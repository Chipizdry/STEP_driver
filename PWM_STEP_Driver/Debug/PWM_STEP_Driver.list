
PWM_STEP_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c774  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  0800c904  0800c904  0001c904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca18  0800ca18  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800ca18  0800ca18  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ca18  0800ca18  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca18  0800ca18  0001ca18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca1c  0800ca1c  0001ca1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800ca20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000820  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000890  20000890  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   000191cf  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000313c  00000000  00000000  000392b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001528  00000000  00000000  0003c3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000010ab  00000000  00000000  0003d918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020ae3  00000000  00000000  0003e9c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001c48d  00000000  00000000  0005f4a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c8516  00000000  00000000  0007b933  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005ef0  00000000  00000000  00143e4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000046  00000000  00000000  00149d3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c8ec 	.word	0x0800c8ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800c8ec 	.word	0x0800c8ec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <ADC_Select_CH1>:
		              HAL_ADC_ConfigChannel(&hadc3, &sConfig);
}


void ADC_Select_CH1 (void)
	     {
 8000270:	b580      	push	{r7, lr}
 8000272:	b086      	sub	sp, #24
 8000274:	af00      	add	r7, sp, #0
	     	ADC_ChannelConfTypeDef sConfig = {0};
 8000276:	463b      	mov	r3, r7
 8000278:	2200      	movs	r2, #0
 800027a:	601a      	str	r2, [r3, #0]
 800027c:	605a      	str	r2, [r3, #4]
 800027e:	609a      	str	r2, [r3, #8]
 8000280:	60da      	str	r2, [r3, #12]
 8000282:	611a      	str	r2, [r3, #16]
 8000284:	615a      	str	r2, [r3, #20]
	     	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	     	  */
	     	  sConfig.Channel = ADC_CHANNEL_1;
 8000286:	2301      	movs	r3, #1
 8000288:	603b      	str	r3, [r7, #0]
	     	  sConfig.Rank = 1;
 800028a:	2301      	movs	r3, #1
 800028c:	607b      	str	r3, [r7, #4]
	     	  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800028e:	2303      	movs	r3, #3
 8000290:	60bb      	str	r3, [r7, #8]
	     	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8000292:	463b      	mov	r3, r7
 8000294:	4619      	mov	r1, r3
 8000296:	4803      	ldr	r0, [pc, #12]	; (80002a4 <ADC_Select_CH1+0x34>)
 8000298:	f003 ffc0 	bl	800421c <HAL_ADC_ConfigChannel>
	     }
 800029c:	bf00      	nop
 800029e:	3718      	adds	r7, #24
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	2000012c 	.word	0x2000012c

080002a8 <ADC_Select_CH12>:

void ADC_Select_CH12 (void)
	     {
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b086      	sub	sp, #24
 80002ac:	af00      	add	r7, sp, #0
	     	ADC_ChannelConfTypeDef sConfig = {0};
 80002ae:	463b      	mov	r3, r7
 80002b0:	2200      	movs	r2, #0
 80002b2:	601a      	str	r2, [r3, #0]
 80002b4:	605a      	str	r2, [r3, #4]
 80002b6:	609a      	str	r2, [r3, #8]
 80002b8:	60da      	str	r2, [r3, #12]
 80002ba:	611a      	str	r2, [r3, #16]
 80002bc:	615a      	str	r2, [r3, #20]
	     	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	     	  */
	     	  sConfig.Channel = ADC_CHANNEL_12;
 80002be:	230c      	movs	r3, #12
 80002c0:	603b      	str	r3, [r7, #0]
	     	  sConfig.Rank = 1;
 80002c2:	2301      	movs	r3, #1
 80002c4:	607b      	str	r3, [r7, #4]
	     	  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80002c6:	2303      	movs	r3, #3
 80002c8:	60bb      	str	r3, [r7, #8]
	     	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 80002ca:	463b      	mov	r3, r7
 80002cc:	4619      	mov	r1, r3
 80002ce:	4803      	ldr	r0, [pc, #12]	; (80002dc <ADC_Select_CH12+0x34>)
 80002d0:	f003 ffa4 	bl	800421c <HAL_ADC_ConfigChannel>
	     }
 80002d4:	bf00      	nop
 80002d6:	3718      	adds	r7, #24
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	2000012c 	.word	0x2000012c

080002e0 <ADC_read_1>:



uint16_t ADC_read_1(void)

	  {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
//	ADC_reset_ch();
	ADC_Select_CH1 ();
 80002e4:	f7ff ffc4 	bl	8000270 <ADC_Select_CH1>
	current[1]=0;
 80002e8:	4b0b      	ldr	r3, [pc, #44]	; (8000318 <ADC_read_1+0x38>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	805a      	strh	r2, [r3, #2]
	HAL_ADC_Start(&hadc3);
 80002ee:	480b      	ldr	r0, [pc, #44]	; (800031c <ADC_read_1+0x3c>)
 80002f0:	f003 f83a 	bl	8003368 <HAL_ADC_Start>

	 		  HAL_ADC_PollForConversion(&hadc3, 100);
 80002f4:	2164      	movs	r1, #100	; 0x64
 80002f6:	4809      	ldr	r0, [pc, #36]	; (800031c <ADC_read_1+0x3c>)
 80002f8:	f003 f982 	bl	8003600 <HAL_ADC_PollForConversion>
	 		  current[1] = HAL_ADC_GetValue(&hadc3);
 80002fc:	4807      	ldr	r0, [pc, #28]	; (800031c <ADC_read_1+0x3c>)
 80002fe:	f003 fbff 	bl	8003b00 <HAL_ADC_GetValue>
 8000302:	4603      	mov	r3, r0
 8000304:	b29a      	uxth	r2, r3
 8000306:	4b04      	ldr	r3, [pc, #16]	; (8000318 <ADC_read_1+0x38>)
 8000308:	805a      	strh	r2, [r3, #2]
	 		  HAL_ADC_Stop(&hadc3);
 800030a:	4804      	ldr	r0, [pc, #16]	; (800031c <ADC_read_1+0x3c>)
 800030c:	f003 f942 	bl	8003594 <HAL_ADC_Stop>


	 		  return current[1];
 8000310:	4b01      	ldr	r3, [pc, #4]	; (8000318 <ADC_read_1+0x38>)
 8000312:	885b      	ldrh	r3, [r3, #2]
	  }
 8000314:	4618      	mov	r0, r3
 8000316:	bd80      	pop	{r7, pc}
 8000318:	20000548 	.word	0x20000548
 800031c:	2000012c 	.word	0x2000012c

08000320 <ADC_read_12>:

uint16_t ADC_read_12(void)

	  {
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
//	ADC_reset_ch();
	ADC_Select_CH12 ();
 8000324:	f7ff ffc0 	bl	80002a8 <ADC_Select_CH12>
	current[0]=0;
 8000328:	4b0b      	ldr	r3, [pc, #44]	; (8000358 <ADC_read_12+0x38>)
 800032a:	2200      	movs	r2, #0
 800032c:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Start(&hadc3);
 800032e:	480b      	ldr	r0, [pc, #44]	; (800035c <ADC_read_12+0x3c>)
 8000330:	f003 f81a 	bl	8003368 <HAL_ADC_Start>

	 		  HAL_ADC_PollForConversion(&hadc3, 100);
 8000334:	2164      	movs	r1, #100	; 0x64
 8000336:	4809      	ldr	r0, [pc, #36]	; (800035c <ADC_read_12+0x3c>)
 8000338:	f003 f962 	bl	8003600 <HAL_ADC_PollForConversion>
	 		  current[0] = HAL_ADC_GetValue(&hadc3);
 800033c:	4807      	ldr	r0, [pc, #28]	; (800035c <ADC_read_12+0x3c>)
 800033e:	f003 fbdf 	bl	8003b00 <HAL_ADC_GetValue>
 8000342:	4603      	mov	r3, r0
 8000344:	b29a      	uxth	r2, r3
 8000346:	4b04      	ldr	r3, [pc, #16]	; (8000358 <ADC_read_12+0x38>)
 8000348:	801a      	strh	r2, [r3, #0]
	 		  HAL_ADC_Stop(&hadc3);
 800034a:	4804      	ldr	r0, [pc, #16]	; (800035c <ADC_read_12+0x3c>)
 800034c:	f003 f922 	bl	8003594 <HAL_ADC_Stop>


	 		  return current[0];
 8000350:	4b01      	ldr	r3, [pc, #4]	; (8000358 <ADC_read_12+0x38>)
 8000352:	881b      	ldrh	r3, [r3, #0]
	  }
 8000354:	4618      	mov	r0, r3
 8000356:	bd80      	pop	{r7, pc}
 8000358:	20000548 	.word	0x20000548
 800035c:	2000012c 	.word	0x2000012c

08000360 <PWM_correction>:


void PWM_correction(void){
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0

for(uint8_t i=0;i<4;i++){
 8000366:	2300      	movs	r3, #0
 8000368:	71fb      	strb	r3, [r7, #7]
 800036a:	e070      	b.n	800044e <PWM_correction+0xee>


	pwm[i]=pwm_cmd;
 800036c:	79fb      	ldrb	r3, [r7, #7]
 800036e:	4a45      	ldr	r2, [pc, #276]	; (8000484 <PWM_correction+0x124>)
 8000370:	8812      	ldrh	r2, [r2, #0]
 8000372:	b291      	uxth	r1, r2
 8000374:	4a44      	ldr	r2, [pc, #272]	; (8000488 <PWM_correction+0x128>)
 8000376:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	if((current[i]>=limit)&&(pwm[i]>=10)){
 800037a:	79fb      	ldrb	r3, [r7, #7]
 800037c:	4a43      	ldr	r2, [pc, #268]	; (800048c <PWM_correction+0x12c>)
 800037e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000382:	4b43      	ldr	r3, [pc, #268]	; (8000490 <PWM_correction+0x130>)
 8000384:	881b      	ldrh	r3, [r3, #0]
 8000386:	429a      	cmp	r2, r3
 8000388:	d314      	bcc.n	80003b4 <PWM_correction+0x54>
 800038a:	79fb      	ldrb	r3, [r7, #7]
 800038c:	4a3e      	ldr	r2, [pc, #248]	; (8000488 <PWM_correction+0x128>)
 800038e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000392:	2b09      	cmp	r3, #9
 8000394:	d90e      	bls.n	80003b4 <PWM_correction+0x54>
	pwm[i]=pwm[i]-10;
 8000396:	79fb      	ldrb	r3, [r7, #7]
 8000398:	4a3b      	ldr	r2, [pc, #236]	; (8000488 <PWM_correction+0x128>)
 800039a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800039e:	79fb      	ldrb	r3, [r7, #7]
 80003a0:	3a0a      	subs	r2, #10
 80003a2:	b291      	uxth	r1, r2
 80003a4:	4a38      	ldr	r2, [pc, #224]	; (8000488 <PWM_correction+0x128>)
 80003a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    LED_2_ON;
 80003aa:	2201      	movs	r2, #1
 80003ac:	2101      	movs	r1, #1
 80003ae:	4839      	ldr	r0, [pc, #228]	; (8000494 <PWM_correction+0x134>)
 80003b0:	f005 f9d0 	bl	8005754 <HAL_GPIO_WritePin>
	}

	//TxData[0]=pwm_cmd>>8;
	//TxData[1]=pwm_cmd&0xff;

	if(current[i]>=3800){
 80003b4:	79fb      	ldrb	r3, [r7, #7]
 80003b6:	4a35      	ldr	r2, [pc, #212]	; (800048c <PWM_correction+0x12c>)
 80003b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003bc:	f640 62d7 	movw	r2, #3799	; 0xed7
 80003c0:	4293      	cmp	r3, r2
 80003c2:	d930      	bls.n	8000426 <PWM_correction+0xc6>

		            HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80003c4:	2100      	movs	r1, #0
 80003c6:	4834      	ldr	r0, [pc, #208]	; (8000498 <PWM_correction+0x138>)
 80003c8:	f008 fda4 	bl	8008f14 <HAL_TIM_PWM_Stop>
		            HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80003cc:	2104      	movs	r1, #4
 80003ce:	4832      	ldr	r0, [pc, #200]	; (8000498 <PWM_correction+0x138>)
 80003d0:	f008 fda0 	bl	8008f14 <HAL_TIM_PWM_Stop>
		            HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 80003d4:	2100      	movs	r1, #0
 80003d6:	4831      	ldr	r0, [pc, #196]	; (800049c <PWM_correction+0x13c>)
 80003d8:	f008 fd9c 	bl	8008f14 <HAL_TIM_PWM_Stop>
		            HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 80003dc:	2100      	movs	r1, #0
 80003de:	4830      	ldr	r0, [pc, #192]	; (80004a0 <PWM_correction+0x140>)
 80003e0:	f008 fd98 	bl	8008f14 <HAL_TIM_PWM_Stop>

		            HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 80003e4:	2100      	movs	r1, #0
 80003e6:	482c      	ldr	r0, [pc, #176]	; (8000498 <PWM_correction+0x138>)
 80003e8:	f00a f9cc 	bl	800a784 <HAL_TIMEx_PWMN_Stop>
		            HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 80003ec:	2104      	movs	r1, #4
 80003ee:	482a      	ldr	r0, [pc, #168]	; (8000498 <PWM_correction+0x138>)
 80003f0:	f00a f9c8 	bl	800a784 <HAL_TIMEx_PWMN_Stop>
		            HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_1);
 80003f4:	2100      	movs	r1, #0
 80003f6:	4829      	ldr	r0, [pc, #164]	; (800049c <PWM_correction+0x13c>)
 80003f8:	f00a f9c4 	bl	800a784 <HAL_TIMEx_PWMN_Stop>
		            HAL_TIMEx_PWMN_Stop(&htim15, TIM_CHANNEL_1);
 80003fc:	2100      	movs	r1, #0
 80003fe:	4828      	ldr	r0, [pc, #160]	; (80004a0 <PWM_correction+0x140>)
 8000400:	f00a f9c0 	bl	800a784 <HAL_TIMEx_PWMN_Stop>

		            pwm[0]=10;
 8000404:	4b20      	ldr	r3, [pc, #128]	; (8000488 <PWM_correction+0x128>)
 8000406:	220a      	movs	r2, #10
 8000408:	801a      	strh	r2, [r3, #0]
		            pwm[1]=10;
 800040a:	4b1f      	ldr	r3, [pc, #124]	; (8000488 <PWM_correction+0x128>)
 800040c:	220a      	movs	r2, #10
 800040e:	805a      	strh	r2, [r3, #2]
		            pwm[2]=10;
 8000410:	4b1d      	ldr	r3, [pc, #116]	; (8000488 <PWM_correction+0x128>)
 8000412:	220a      	movs	r2, #10
 8000414:	809a      	strh	r2, [r3, #4]
		            pwm[3]=10;
 8000416:	4b1c      	ldr	r3, [pc, #112]	; (8000488 <PWM_correction+0x128>)
 8000418:	220a      	movs	r2, #10
 800041a:	80da      	strh	r2, [r3, #6]

		            LED_2_ON;}
 800041c:	2201      	movs	r2, #1
 800041e:	2101      	movs	r1, #1
 8000420:	481c      	ldr	r0, [pc, #112]	; (8000494 <PWM_correction+0x134>)
 8000422:	f005 f997 	bl	8005754 <HAL_GPIO_WritePin>

	if((pwm[i]>=10)&&(current[i]<=10)){LED_2_OFF;}
 8000426:	79fb      	ldrb	r3, [r7, #7]
 8000428:	4a17      	ldr	r2, [pc, #92]	; (8000488 <PWM_correction+0x128>)
 800042a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800042e:	2b09      	cmp	r3, #9
 8000430:	d90a      	bls.n	8000448 <PWM_correction+0xe8>
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	4a15      	ldr	r2, [pc, #84]	; (800048c <PWM_correction+0x12c>)
 8000436:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800043a:	2b0a      	cmp	r3, #10
 800043c:	d804      	bhi.n	8000448 <PWM_correction+0xe8>
 800043e:	2200      	movs	r2, #0
 8000440:	2101      	movs	r1, #1
 8000442:	4814      	ldr	r0, [pc, #80]	; (8000494 <PWM_correction+0x134>)
 8000444:	f005 f986 	bl	8005754 <HAL_GPIO_WritePin>
for(uint8_t i=0;i<4;i++){
 8000448:	79fb      	ldrb	r3, [r7, #7]
 800044a:	3301      	adds	r3, #1
 800044c:	71fb      	strb	r3, [r7, #7]
 800044e:	79fb      	ldrb	r3, [r7, #7]
 8000450:	2b03      	cmp	r3, #3
 8000452:	d98b      	bls.n	800036c <PWM_correction+0xc>

}
pwm_n=(pwm[0]+pwm[1]+pwm[2]+pwm[3])/4;
 8000454:	4b0c      	ldr	r3, [pc, #48]	; (8000488 <PWM_correction+0x128>)
 8000456:	881b      	ldrh	r3, [r3, #0]
 8000458:	461a      	mov	r2, r3
 800045a:	4b0b      	ldr	r3, [pc, #44]	; (8000488 <PWM_correction+0x128>)
 800045c:	885b      	ldrh	r3, [r3, #2]
 800045e:	4413      	add	r3, r2
 8000460:	4a09      	ldr	r2, [pc, #36]	; (8000488 <PWM_correction+0x128>)
 8000462:	8892      	ldrh	r2, [r2, #4]
 8000464:	4413      	add	r3, r2
 8000466:	4a08      	ldr	r2, [pc, #32]	; (8000488 <PWM_correction+0x128>)
 8000468:	88d2      	ldrh	r2, [r2, #6]
 800046a:	4413      	add	r3, r2
 800046c:	2b00      	cmp	r3, #0
 800046e:	da00      	bge.n	8000472 <PWM_correction+0x112>
 8000470:	3303      	adds	r3, #3
 8000472:	109b      	asrs	r3, r3, #2
 8000474:	b29a      	uxth	r2, r3
 8000476:	4b0b      	ldr	r3, [pc, #44]	; (80004a4 <PWM_correction+0x144>)
 8000478:	801a      	strh	r2, [r3, #0]
}
 800047a:	bf00      	nop
 800047c:	3708      	adds	r7, #8
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	2000055c 	.word	0x2000055c
 8000488:	20000000 	.word	0x20000000
 800048c:	20000548 	.word	0x20000548
 8000490:	20000008 	.word	0x20000008
 8000494:	48001400 	.word	0x48001400
 8000498:	20000234 	.word	0x20000234
 800049c:	20000318 	.word	0x20000318
 80004a0:	20000364 	.word	0x20000364
 80004a4:	2000055a 	.word	0x2000055a

080004a8 <I2C_send>:
////////////////////////////////////////////////////////////////////////////////////////////

void I2C_send(uint8_t data, uint8_t flags)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b086      	sub	sp, #24
 80004ac:	af02      	add	r7, sp, #8
 80004ae:	4603      	mov	r3, r0
 80004b0:	460a      	mov	r2, r1
 80004b2:	71fb      	strb	r3, [r7, #7]
 80004b4:	4613      	mov	r3, r2
 80004b6:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef res;
	 // бесконечный цикл
        for(;;) {
                // проверяем, готово ли устройство по адресу lcd_addr для связи
	        res = HAL_I2C_IsDeviceReady(&hi2c1, LCD_ADDR, 1, HAL_MAX_DELAY);
 80004b8:	f04f 33ff 	mov.w	r3, #4294967295
 80004bc:	2201      	movs	r2, #1
 80004be:	214e      	movs	r1, #78	; 0x4e
 80004c0:	4820      	ldr	r0, [pc, #128]	; (8000544 <I2C_send+0x9c>)
 80004c2:	f005 fb15 	bl	8005af0 <HAL_I2C_IsDeviceReady>
 80004c6:	4603      	mov	r3, r0
 80004c8:	73fb      	strb	r3, [r7, #15]
	         // если да, то выходим из бесконечного цикла
                if(res == HAL_OK) break;
 80004ca:	7bfb      	ldrb	r3, [r7, #15]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d000      	beq.n	80004d2 <I2C_send+0x2a>
	        res = HAL_I2C_IsDeviceReady(&hi2c1, LCD_ADDR, 1, HAL_MAX_DELAY);
 80004d0:	e7f2      	b.n	80004b8 <I2C_send+0x10>
                if(res == HAL_OK) break;
 80004d2:	bf00      	nop
	    }
        // операция �? с 1111 0000 приводит к обнулению бит с 0 по 3, остаются биты с 4 по 7
	uint8_t up = data & 0xF0;
 80004d4:	79fb      	ldrb	r3, [r7, #7]
 80004d6:	f023 030f 	bic.w	r3, r3, #15
 80004da:	73bb      	strb	r3, [r7, #14]
        // то же самое, но data сдвигается на 4 бита влево
        uint8_t lo = (data << 4) & 0xF0;
 80004dc:	79fb      	ldrb	r3, [r7, #7]
 80004de:	011b      	lsls	r3, r3, #4
 80004e0:	737b      	strb	r3, [r7, #13]

	uint8_t data_arr[4];
         // 4-7 биты содержат информацию, биты 0-3 настраивают работу дисплея
	data_arr[0] = up|flags|BACKLIGHT|PIN_EN;
 80004e2:	7bba      	ldrb	r2, [r7, #14]
 80004e4:	79bb      	ldrb	r3, [r7, #6]
 80004e6:	4313      	orrs	r3, r2
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	f043 030c 	orr.w	r3, r3, #12
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	723b      	strb	r3, [r7, #8]
         // дублирование сигнала, на выводе Е в этот раз 0
	data_arr[1] = up|flags|BACKLIGHT;
 80004f2:	7bba      	ldrb	r2, [r7, #14]
 80004f4:	79bb      	ldrb	r3, [r7, #6]
 80004f6:	4313      	orrs	r3, r2
 80004f8:	b2db      	uxtb	r3, r3
 80004fa:	f043 0308 	orr.w	r3, r3, #8
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	727b      	strb	r3, [r7, #9]
	data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 8000502:	7b7a      	ldrb	r2, [r7, #13]
 8000504:	79bb      	ldrb	r3, [r7, #6]
 8000506:	4313      	orrs	r3, r2
 8000508:	b2db      	uxtb	r3, r3
 800050a:	f043 030c 	orr.w	r3, r3, #12
 800050e:	b2db      	uxtb	r3, r3
 8000510:	72bb      	strb	r3, [r7, #10]
	data_arr[3] = lo|flags|BACKLIGHT;
 8000512:	7b7a      	ldrb	r2, [r7, #13]
 8000514:	79bb      	ldrb	r3, [r7, #6]
 8000516:	4313      	orrs	r3, r2
 8000518:	b2db      	uxtb	r3, r3
 800051a:	f043 0308 	orr.w	r3, r3, #8
 800051e:	b2db      	uxtb	r3, r3
 8000520:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 8000522:	f107 0208 	add.w	r2, r7, #8
 8000526:	f04f 33ff 	mov.w	r3, #4294967295
 800052a:	9300      	str	r3, [sp, #0]
 800052c:	2304      	movs	r3, #4
 800052e:	214e      	movs	r1, #78	; 0x4e
 8000530:	4804      	ldr	r0, [pc, #16]	; (8000544 <I2C_send+0x9c>)
 8000532:	f005 f9e9 	bl	8005908 <HAL_I2C_Master_Transmit>
	HAL_Delay(LCD_DELAY_MS);
 8000536:	2005      	movs	r0, #5
 8000538:	f002 fcf4 	bl	8002f24 <HAL_Delay>
}
 800053c:	bf00      	nop
 800053e:	3710      	adds	r7, #16
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	200001c0 	.word	0x200001c0

08000548 <lcd_write_nibble>:
    }
}

////////////////////////////////////////////////////////////////////////////////////////////

void lcd_write_nibble(uint8_t nibble, uint8_t rs) {
 8000548:	b580      	push	{r7, lr}
 800054a:	b086      	sub	sp, #24
 800054c:	af02      	add	r7, sp, #8
 800054e:	4603      	mov	r3, r0
 8000550:	460a      	mov	r2, r1
 8000552:	71fb      	strb	r3, [r7, #7]
 8000554:	4613      	mov	r3, r2
 8000556:	71bb      	strb	r3, [r7, #6]
  uint8_t data = nibble << D4_BIT;
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	b2db      	uxtb	r3, r3
 800055e:	73fb      	strb	r3, [r7, #15]
  data |= rs << RS_BIT;
 8000560:	7bfa      	ldrb	r2, [r7, #15]
 8000562:	79bb      	ldrb	r3, [r7, #6]
 8000564:	4313      	orrs	r3, r2
 8000566:	b2db      	uxtb	r3, r3
 8000568:	73fb      	strb	r3, [r7, #15]
  data |= backlight_state << BL_BIT; // Include backlight state in data
 800056a:	4b16      	ldr	r3, [pc, #88]	; (80005c4 <lcd_write_nibble+0x7c>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	00db      	lsls	r3, r3, #3
 8000570:	b25a      	sxtb	r2, r3
 8000572:	7bfb      	ldrb	r3, [r7, #15]
 8000574:	b25b      	sxtb	r3, r3
 8000576:	4313      	orrs	r3, r2
 8000578:	b25b      	sxtb	r3, r3
 800057a:	b2db      	uxtb	r3, r3
 800057c:	73fb      	strb	r3, [r7, #15]
  data |= 1 << EN_BIT;
 800057e:	7bfb      	ldrb	r3, [r7, #15]
 8000580:	f043 0304 	orr.w	r3, r3, #4
 8000584:	b2db      	uxtb	r3, r3
 8000586:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000588:	f107 020f 	add.w	r2, r7, #15
 800058c:	2364      	movs	r3, #100	; 0x64
 800058e:	9300      	str	r3, [sp, #0]
 8000590:	2301      	movs	r3, #1
 8000592:	214e      	movs	r1, #78	; 0x4e
 8000594:	480c      	ldr	r0, [pc, #48]	; (80005c8 <lcd_write_nibble+0x80>)
 8000596:	f005 f9b7 	bl	8005908 <HAL_I2C_Master_Transmit>
  HAL_Delay(1);
 800059a:	2001      	movs	r0, #1
 800059c:	f002 fcc2 	bl	8002f24 <HAL_Delay>
  data &= ~(1 << EN_BIT);
 80005a0:	7bfb      	ldrb	r3, [r7, #15]
 80005a2:	f023 0304 	bic.w	r3, r3, #4
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80005aa:	f107 020f 	add.w	r2, r7, #15
 80005ae:	2364      	movs	r3, #100	; 0x64
 80005b0:	9300      	str	r3, [sp, #0]
 80005b2:	2301      	movs	r3, #1
 80005b4:	214e      	movs	r1, #78	; 0x4e
 80005b6:	4804      	ldr	r0, [pc, #16]	; (80005c8 <lcd_write_nibble+0x80>)
 80005b8:	f005 f9a6 	bl	8005908 <HAL_I2C_Master_Transmit>
}
 80005bc:	bf00      	nop
 80005be:	3710      	adds	r7, #16
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	2000000a 	.word	0x2000000a
 80005c8:	200001c0 	.word	0x200001c0

080005cc <lcd_send_cmd>:

////////////////////////////////////////////////////////////////////////////////////////////

void lcd_send_cmd(uint8_t cmd) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = cmd >> 4;
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	091b      	lsrs	r3, r3, #4
 80005da:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = cmd & 0x0F;
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	f003 030f 	and.w	r3, r3, #15
 80005e2:	73bb      	strb	r3, [r7, #14]
  lcd_write_nibble(upper_nibble, 0);
 80005e4:	7bfb      	ldrb	r3, [r7, #15]
 80005e6:	2100      	movs	r1, #0
 80005e8:	4618      	mov	r0, r3
 80005ea:	f7ff ffad 	bl	8000548 <lcd_write_nibble>
  lcd_write_nibble(lower_nibble, 0);
 80005ee:	7bbb      	ldrb	r3, [r7, #14]
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f7ff ffa8 	bl	8000548 <lcd_write_nibble>
  if (cmd == 0x01 || cmd == 0x02) {
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d002      	beq.n	8000604 <lcd_send_cmd+0x38>
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	2b02      	cmp	r3, #2
 8000602:	d102      	bne.n	800060a <lcd_send_cmd+0x3e>
    HAL_Delay(2);
 8000604:	2002      	movs	r0, #2
 8000606:	f002 fc8d 	bl	8002f24 <HAL_Delay>
  }
}
 800060a:	bf00      	nop
 800060c:	3710      	adds	r7, #16
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}

08000612 <lcd_send_data>:

//////////////////////////////////////////////////////////////////////////////////////////////

void lcd_send_data(uint8_t data) {
 8000612:	b580      	push	{r7, lr}
 8000614:	b084      	sub	sp, #16
 8000616:	af00      	add	r7, sp, #0
 8000618:	4603      	mov	r3, r0
 800061a:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = data >> 4;
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	091b      	lsrs	r3, r3, #4
 8000620:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = data & 0x0F;
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	f003 030f 	and.w	r3, r3, #15
 8000628:	73bb      	strb	r3, [r7, #14]
  lcd_write_nibble(upper_nibble, 1);
 800062a:	7bfb      	ldrb	r3, [r7, #15]
 800062c:	2101      	movs	r1, #1
 800062e:	4618      	mov	r0, r3
 8000630:	f7ff ff8a 	bl	8000548 <lcd_write_nibble>
  lcd_write_nibble(lower_nibble, 1);
 8000634:	7bbb      	ldrb	r3, [r7, #14]
 8000636:	2101      	movs	r1, #1
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff ff85 	bl	8000548 <lcd_write_nibble>
}
 800063e:	bf00      	nop
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}

08000646 <lcd_init>:

//////////////////////////////////////////////////////////////////////////////////////////////

void lcd_init() {
 8000646:	b580      	push	{r7, lr}
 8000648:	af00      	add	r7, sp, #0
  HAL_Delay(50);
 800064a:	2032      	movs	r0, #50	; 0x32
 800064c:	f002 fc6a 	bl	8002f24 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 8000650:	2100      	movs	r1, #0
 8000652:	2003      	movs	r0, #3
 8000654:	f7ff ff78 	bl	8000548 <lcd_write_nibble>
  HAL_Delay(5);
 8000658:	2005      	movs	r0, #5
 800065a:	f002 fc63 	bl	8002f24 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 800065e:	2100      	movs	r1, #0
 8000660:	2003      	movs	r0, #3
 8000662:	f7ff ff71 	bl	8000548 <lcd_write_nibble>
  HAL_Delay(1);
 8000666:	2001      	movs	r0, #1
 8000668:	f002 fc5c 	bl	8002f24 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 800066c:	2100      	movs	r1, #0
 800066e:	2003      	movs	r0, #3
 8000670:	f7ff ff6a 	bl	8000548 <lcd_write_nibble>
  HAL_Delay(1);
 8000674:	2001      	movs	r0, #1
 8000676:	f002 fc55 	bl	8002f24 <HAL_Delay>
  lcd_write_nibble(0x02, 0);
 800067a:	2100      	movs	r1, #0
 800067c:	2002      	movs	r0, #2
 800067e:	f7ff ff63 	bl	8000548 <lcd_write_nibble>
  lcd_send_cmd(0x28);
 8000682:	2028      	movs	r0, #40	; 0x28
 8000684:	f7ff ffa2 	bl	80005cc <lcd_send_cmd>
  lcd_send_cmd(0x0C);
 8000688:	200c      	movs	r0, #12
 800068a:	f7ff ff9f 	bl	80005cc <lcd_send_cmd>
  lcd_send_cmd(0x06);
 800068e:	2006      	movs	r0, #6
 8000690:	f7ff ff9c 	bl	80005cc <lcd_send_cmd>
  lcd_send_cmd(0x01);
 8000694:	2001      	movs	r0, #1
 8000696:	f7ff ff99 	bl	80005cc <lcd_send_cmd>
  HAL_Delay(2);
 800069a:	2002      	movs	r0, #2
 800069c:	f002 fc42 	bl	8002f24 <HAL_Delay>
}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <lcd_write_string>:

//////////////////////////////////////////////////////////////////////////////////////////////

void lcd_write_string(char *str) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  while (*str) {
 80006ac:	e006      	b.n	80006bc <lcd_write_string+0x18>
    lcd_send_data(*str++);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	1c5a      	adds	r2, r3, #1
 80006b2:	607a      	str	r2, [r7, #4]
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	4618      	mov	r0, r3
 80006b8:	f7ff ffab 	bl	8000612 <lcd_send_data>
  while (*str) {
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d1f4      	bne.n	80006ae <lcd_write_string+0xa>
  }
}
 80006c4:	bf00      	nop
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
	...

080006d0 <lcd_set_cursor>:
//////////////////////////////////////////////////////////////////////////

void lcd_set_cursor(uint8_t row, uint8_t column) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	460a      	mov	r2, r1
 80006da:	71fb      	strb	r3, [r7, #7]
 80006dc:	4613      	mov	r3, r2
 80006de:	71bb      	strb	r3, [r7, #6]
    uint8_t address;
    switch (row) {
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	3b01      	subs	r3, #1
 80006e4:	2b03      	cmp	r3, #3
 80006e6:	d817      	bhi.n	8000718 <lcd_set_cursor+0x48>
 80006e8:	a201      	add	r2, pc, #4	; (adr r2, 80006f0 <lcd_set_cursor+0x20>)
 80006ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ee:	bf00      	nop
 80006f0:	08000701 	.word	0x08000701
 80006f4:	08000707 	.word	0x08000707
 80006f8:	0800070d 	.word	0x0800070d
 80006fc:	08000713 	.word	0x08000713
        case 1:
            address = 0x80;
 8000700:	2380      	movs	r3, #128	; 0x80
 8000702:	73fb      	strb	r3, [r7, #15]
            break;
 8000704:	e00a      	b.n	800071c <lcd_set_cursor+0x4c>
        case 2:
            address = 0xC0;
 8000706:	23c0      	movs	r3, #192	; 0xc0
 8000708:	73fb      	strb	r3, [r7, #15]
            break;
 800070a:	e007      	b.n	800071c <lcd_set_cursor+0x4c>

        case 3:
            address = 0x94;
 800070c:	2394      	movs	r3, #148	; 0x94
 800070e:	73fb      	strb	r3, [r7, #15]
            break;
 8000710:	e004      	b.n	800071c <lcd_set_cursor+0x4c>
        case 4:
            address = 0xD4;
 8000712:	23d4      	movs	r3, #212	; 0xd4
 8000714:	73fb      	strb	r3, [r7, #15]
            break;
 8000716:	e001      	b.n	800071c <lcd_set_cursor+0x4c>


        default:
            address = 0x80;
 8000718:	2380      	movs	r3, #128	; 0x80
 800071a:	73fb      	strb	r3, [r7, #15]
    }
    address += column;
 800071c:	7bfa      	ldrb	r2, [r7, #15]
 800071e:	79bb      	ldrb	r3, [r7, #6]
 8000720:	4413      	add	r3, r2
 8000722:	73fb      	strb	r3, [r7, #15]
    lcd_send_cmd(0x80 | address);
 8000724:	7bfb      	ldrb	r3, [r7, #15]
 8000726:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800072a:	b2db      	uxtb	r3, r3
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff ff4d 	bl	80005cc <lcd_send_cmd>
}
 8000732:	bf00      	nop
 8000734:	3710      	adds	r7, #16
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop

0800073c <lcd_clear>:

//////////////////////////////////////////////////////////////////////////////////////////////////

void lcd_clear(void) {
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8000740:	2001      	movs	r0, #1
 8000742:	f7ff ff43 	bl	80005cc <lcd_send_cmd>
    HAL_Delay(2);
 8000746:	2002      	movs	r0, #2
 8000748:	f002 fbec 	bl	8002f24 <HAL_Delay>
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}

08000750 <filter>:
}

//////////////////////////////////////////////////////////////////////////////////////////////

int filter(int x)
  {
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  static int n;
  static int m[N];
  static int y;
  y=y+(x-m[n]);
 8000758:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <filter+0x68>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a17      	ldr	r2, [pc, #92]	; (80007bc <filter+0x6c>)
 800075e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000762:	687a      	ldr	r2, [r7, #4]
 8000764:	1ad2      	subs	r2, r2, r3
 8000766:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <filter+0x70>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4413      	add	r3, r2
 800076c:	4a14      	ldr	r2, [pc, #80]	; (80007c0 <filter+0x70>)
 800076e:	6013      	str	r3, [r2, #0]
  m[n]=x;
 8000770:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <filter+0x68>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4911      	ldr	r1, [pc, #68]	; (80007bc <filter+0x6c>)
 8000776:	687a      	ldr	r2, [r7, #4]
 8000778:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  n=(n+1)%N;
 800077c:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <filter+0x68>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	1c59      	adds	r1, r3, #1
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <filter+0x74>)
 8000784:	fb83 2301 	smull	r2, r3, r3, r1
 8000788:	10da      	asrs	r2, r3, #3
 800078a:	17cb      	asrs	r3, r1, #31
 800078c:	1ad2      	subs	r2, r2, r3
 800078e:	4613      	mov	r3, r2
 8000790:	009b      	lsls	r3, r3, #2
 8000792:	4413      	add	r3, r2
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	1aca      	subs	r2, r1, r3
 8000798:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <filter+0x68>)
 800079a:	601a      	str	r2, [r3, #0]
  return y/N;
 800079c:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <filter+0x70>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a08      	ldr	r2, [pc, #32]	; (80007c4 <filter+0x74>)
 80007a2:	fb82 1203 	smull	r1, r2, r2, r3
 80007a6:	10d2      	asrs	r2, r2, #3
 80007a8:	17db      	asrs	r3, r3, #31
 80007aa:	1ad3      	subs	r3, r2, r3
  }
 80007ac:	4618      	mov	r0, r3
 80007ae:	370c      	adds	r7, #12
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr
 80007b8:	200006e4 	.word	0x200006e4
 80007bc:	200006e8 	.word	0x200006e8
 80007c0:	20000738 	.word	0x20000738
 80007c4:	66666667 	.word	0x66666667

080007c8 <HAL_UARTEx_RxEventCallback>:
}
*/
/////////////////////////////////////////////////////////////////////////////////////////////

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	460b      	mov	r3, r1
 80007d2:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a38      	ldr	r2, [pc, #224]	; (80008bc <HAL_UARTEx_RxEventCallback+0xf4>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d16a      	bne.n	80008b4 <HAL_UARTEx_RxEventCallback+0xec>
	{



        //  LED_3_ON;
				 if (rxFrame[0] == SLAVE_ID) {
 80007de:	4b38      	ldr	r3, [pc, #224]	; (80008c0 <HAL_UARTEx_RxEventCallback+0xf8>)
 80007e0:	781a      	ldrb	r2, [r3, #0]
 80007e2:	4b38      	ldr	r3, [pc, #224]	; (80008c4 <HAL_UARTEx_RxEventCallback+0xfc>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	429a      	cmp	r2, r3
 80007e8:	d157      	bne.n	800089a <HAL_UARTEx_RxEventCallback+0xd2>


					  			 		uint8_t opCode = rxFrame[1];
 80007ea:	4b35      	ldr	r3, [pc, #212]	; (80008c0 <HAL_UARTEx_RxEventCallback+0xf8>)
 80007ec:	785b      	ldrb	r3, [r3, #1]
 80007ee:	73fb      	strb	r3, [r7, #15]
					  			     switch (opCode) {
 80007f0:	7bfb      	ldrb	r3, [r7, #15]
 80007f2:	3b01      	subs	r3, #1
 80007f4:	2b0f      	cmp	r3, #15
 80007f6:	d84f      	bhi.n	8000898 <HAL_UARTEx_RxEventCallback+0xd0>
 80007f8:	a201      	add	r2, pc, #4	; (adr r2, 8000800 <HAL_UARTEx_RxEventCallback+0x38>)
 80007fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007fe:	bf00      	nop
 8000800:	08000899 	.word	0x08000899
 8000804:	08000899 	.word	0x08000899
 8000808:	08000899 	.word	0x08000899
 800080c:	08000841 	.word	0x08000841
 8000810:	08000899 	.word	0x08000899
 8000814:	0800084b 	.word	0x0800084b
 8000818:	08000899 	.word	0x08000899
 800081c:	08000899 	.word	0x08000899
 8000820:	08000899 	.word	0x08000899
 8000824:	08000899 	.word	0x08000899
 8000828:	08000899 	.word	0x08000899
 800082c:	08000899 	.word	0x08000899
 8000830:	08000899 	.word	0x08000899
 8000834:	08000899 	.word	0x08000899
 8000838:	08000899 	.word	0x08000899
 800083c:	0800085d 	.word	0x0800085d
					  			       case READ_COILs:

					  			    	 break;
					  			       case  READ_INPUT_REGs:
					  			    	 handleReadHoldingRegs(&huart2,data_reg);
 8000840:	4921      	ldr	r1, [pc, #132]	; (80008c8 <HAL_UARTEx_RxEventCallback+0x100>)
 8000842:	4822      	ldr	r0, [pc, #136]	; (80008cc <HAL_UARTEx_RxEventCallback+0x104>)
 8000844:	f001 fcfa 	bl	800223c <handleReadHoldingRegs>


					  			    	   break;
 8000848:	e027      	b.n	800089a <HAL_UARTEx_RxEventCallback+0xd2>
					  			     case WRITE_SINGLE_REG:

					  			   					  			    //	 handleWriteSingleHandlingRegister (&huart2,data_reg);
					  			   					  			    	handleWriteMulyipleHandlingRegister (&huart2,rcv_data_reg);
 800084a:	4921      	ldr	r1, [pc, #132]	; (80008d0 <HAL_UARTEx_RxEventCallback+0x108>)
 800084c:	481f      	ldr	r0, [pc, #124]	; (80008cc <HAL_UARTEx_RxEventCallback+0x104>)
 800084e:	f001 fd73 	bl	8002338 <handleWriteMulyipleHandlingRegister>
					  			                                              pwm_cmd=rcv_data_reg[1];
 8000852:	4b1f      	ldr	r3, [pc, #124]	; (80008d0 <HAL_UARTEx_RxEventCallback+0x108>)
 8000854:	885a      	ldrh	r2, [r3, #2]
 8000856:	4b1f      	ldr	r3, [pc, #124]	; (80008d4 <HAL_UARTEx_RxEventCallback+0x10c>)
 8000858:	801a      	strh	r2, [r3, #0]

					  			                                               break;
 800085a:	e01e      	b.n	800089a <HAL_UARTEx_RxEventCallback+0xd2>

					  			       case WRITE_HOLDING_REGs:


					  			    	handleWriteMulyipleHandlingRegister (&huart2,rcv_data_reg);
 800085c:	491c      	ldr	r1, [pc, #112]	; (80008d0 <HAL_UARTEx_RxEventCallback+0x108>)
 800085e:	481b      	ldr	r0, [pc, #108]	; (80008cc <HAL_UARTEx_RxEventCallback+0x104>)
 8000860:	f001 fd6a 	bl	8002338 <handleWriteMulyipleHandlingRegister>
					  			    	 pwm_cmd=rcv_data_reg[1];
 8000864:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <HAL_UARTEx_RxEventCallback+0x108>)
 8000866:	885a      	ldrh	r2, [r3, #2]
 8000868:	4b1a      	ldr	r3, [pc, #104]	; (80008d4 <HAL_UARTEx_RxEventCallback+0x10c>)
 800086a:	801a      	strh	r2, [r3, #0]
					  			    	 limit=rcv_data_reg[2];
 800086c:	4b18      	ldr	r3, [pc, #96]	; (80008d0 <HAL_UARTEx_RxEventCallback+0x108>)
 800086e:	889a      	ldrh	r2, [r3, #4]
 8000870:	4b19      	ldr	r3, [pc, #100]	; (80008d8 <HAL_UARTEx_RxEventCallback+0x110>)
 8000872:	801a      	strh	r2, [r3, #0]
					  			    	hour=(rcv_data_reg[3]>>8) & 0xff;
 8000874:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <HAL_UARTEx_RxEventCallback+0x108>)
 8000876:	88db      	ldrh	r3, [r3, #6]
 8000878:	0a1b      	lsrs	r3, r3, #8
 800087a:	b29b      	uxth	r3, r3
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4b17      	ldr	r3, [pc, #92]	; (80008dc <HAL_UARTEx_RxEventCallback+0x114>)
 8000880:	701a      	strb	r2, [r3, #0]
					  			        min= rcv_data_reg[3] & 0xff;
 8000882:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <HAL_UARTEx_RxEventCallback+0x108>)
 8000884:	88db      	ldrh	r3, [r3, #6]
 8000886:	b2da      	uxtb	r2, r3
 8000888:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <HAL_UARTEx_RxEventCallback+0x118>)
 800088a:	701a      	strb	r2, [r3, #0]
					  			    	sec=rcv_data_reg[4];
 800088c:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <HAL_UARTEx_RxEventCallback+0x108>)
 800088e:	891b      	ldrh	r3, [r3, #8]
 8000890:	b2da      	uxtb	r2, r3
 8000892:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <HAL_UARTEx_RxEventCallback+0x11c>)
 8000894:	701a      	strb	r2, [r3, #0]




                                            break;
 8000896:	e000      	b.n	800089a <HAL_UARTEx_RxEventCallback+0xd2>


					  			       default:
					  			 				break;
 8000898:	bf00      	nop
		/* start the DMA again */

			//	 for(uint8_t i=0;i<sizeof(rxFrame);)
			//	 {           rxFrame[i]=0;i++;}

		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) rxFrame,sizeof(rxFrame));
 800089a:	2210      	movs	r2, #16
 800089c:	4908      	ldr	r1, [pc, #32]	; (80008c0 <HAL_UARTEx_RxEventCallback+0xf8>)
 800089e:	480b      	ldr	r0, [pc, #44]	; (80008cc <HAL_UARTEx_RxEventCallback+0x104>)
 80008a0:	f00b fb2b 	bl	800befa <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80008a4:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <HAL_UARTEx_RxEventCallback+0x120>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <HAL_UARTEx_RxEventCallback+0x120>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f022 0204 	bic.w	r2, r2, #4
 80008b2:	601a      	str	r2, [r3, #0]

	}
}
 80008b4:	bf00      	nop
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40004400 	.word	0x40004400
 80008c0:	2000057c 	.word	0x2000057c
 80008c4:	20000010 	.word	0x20000010
 80008c8:	2000068c 	.word	0x2000068c
 80008cc:	20000438 	.word	0x20000438
 80008d0:	200006ac 	.word	0x200006ac
 80008d4:	2000055c 	.word	0x2000055c
 80008d8:	20000008 	.word	0x20000008
 80008dc:	20000577 	.word	0x20000577
 80008e0:	20000576 	.word	0x20000576
 80008e4:	20000578 	.word	0x20000578
 80008e8:	200004c0 	.word	0x200004c0

080008ec <I2C_Init>:
/* USER CODE BEGIN 0 */



static void I2C_Init(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0

	//I2C1 GPIO

	GPIOB->MODER |= ( GPIO_MODER_MODER9_1 | GPIO_MODER_MODER8_1 );
 80008f0:	4b1a      	ldr	r3, [pc, #104]	; (800095c <I2C_Init+0x70>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a19      	ldr	r2, [pc, #100]	; (800095c <I2C_Init+0x70>)
 80008f6:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 80008fa:	6013      	str	r3, [r2, #0]

	GPIOB->OTYPER |= ( GPIO_OTYPER_OT_9 | GPIO_OTYPER_OT_8 );
 80008fc:	4b17      	ldr	r3, [pc, #92]	; (800095c <I2C_Init+0x70>)
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	4a16      	ldr	r2, [pc, #88]	; (800095c <I2C_Init+0x70>)
 8000902:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000906:	6053      	str	r3, [r2, #4]
	GPIOB->PUPDR |= (GPIO_PUPDR_PUPDR8_1|GPIO_PUPDR_PUPDR9_1);
 8000908:	4b14      	ldr	r3, [pc, #80]	; (800095c <I2C_Init+0x70>)
 800090a:	68db      	ldr	r3, [r3, #12]
 800090c:	4a13      	ldr	r2, [pc, #76]	; (800095c <I2C_Init+0x70>)
 800090e:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8000912:	60d3      	str	r3, [r2, #12]


	  SET_BIT(RCC->AHBENR,RCC_AHBENR_GPIOBEN);
 8000914:	4b12      	ldr	r3, [pc, #72]	; (8000960 <I2C_Init+0x74>)
 8000916:	695b      	ldr	r3, [r3, #20]
 8000918:	4a11      	ldr	r2, [pc, #68]	; (8000960 <I2C_Init+0x74>)
 800091a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800091e:	6153      	str	r3, [r2, #20]
	  SET_BIT(RCC->APB1ENR, RCC_APB1ENR_I2C1EN);
 8000920:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <I2C_Init+0x74>)
 8000922:	69db      	ldr	r3, [r3, #28]
 8000924:	4a0e      	ldr	r2, [pc, #56]	; (8000960 <I2C_Init+0x74>)
 8000926:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800092a:	61d3      	str	r3, [r2, #28]

	  GPIOB->AFR[1] |= (4<<0) | (4<<4);
 800092c:	4b0b      	ldr	r3, [pc, #44]	; (800095c <I2C_Init+0x70>)
 800092e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000930:	4a0a      	ldr	r2, [pc, #40]	; (800095c <I2C_Init+0x70>)
 8000932:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8000936:	6253      	str	r3, [r2, #36]	; 0x24

	  I2C1->CR1 |= (1<<15);  // reset the I2C
 8000938:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <I2C_Init+0x78>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a09      	ldr	r2, [pc, #36]	; (8000964 <I2C_Init+0x78>)
 800093e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000942:	6013      	str	r3, [r2, #0]
	  I2C1->CR1 &= ~(1<<15);  // Normal operation
 8000944:	4b07      	ldr	r3, [pc, #28]	; (8000964 <I2C_Init+0x78>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a06      	ldr	r2, [pc, #24]	; (8000964 <I2C_Init+0x78>)
 800094a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800094e:	6013      	str	r3, [r2, #0]
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	48000400 	.word	0x48000400
 8000960:	40021000 	.word	0x40021000
 8000964:	40005400 	.word	0x40005400

08000968 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b086      	sub	sp, #24
 800096c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800096e:	f002 fa73 	bl	8002e58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000972:	f000 fb5d 	bl	8001030 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000976:	f001 f94d 	bl	8001c14 <MX_GPIO_Init>
  MX_DMA_Init();
 800097a:	f001 f911 	bl	8001ba0 <MX_DMA_Init>
  MX_ADC2_Init();
 800097e:	f000 fc33 	bl	80011e8 <MX_ADC2_Init>
  MX_TIM1_Init();
 8000982:	f000 fdd1 	bl	8001528 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000986:	f000 fe89 	bl	800169c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800098a:	f001 f8a9 	bl	8001ae0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800098e:	f001 f8d7 	bl	8001b40 <MX_USART2_UART_Init>
  MX_TIM8_Init();
 8000992:	f000 ff53 	bl	800183c <MX_TIM8_Init>
  MX_I2C1_Init();
 8000996:	f000 fd2d 	bl	80013f4 <MX_I2C1_Init>
  MX_RTC_Init();
 800099a:	f000 fd6b 	bl	8001474 <MX_RTC_Init>
  MX_TIM15_Init();
 800099e:	f000 fffb 	bl	8001998 <MX_TIM15_Init>
  MX_ADC1_Init();
 80009a2:	f000 fbb1 	bl	8001108 <MX_ADC1_Init>
  MX_ADC3_Init();
 80009a6:	f000 fcb5 	bl	8001314 <MX_ADC3_Init>
  MX_TIM3_Init();
 80009aa:	f000 fef9 	bl	80017a0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  LED_2_ON;
 80009ae:	2201      	movs	r2, #1
 80009b0:	2101      	movs	r1, #1
 80009b2:	48aa      	ldr	r0, [pc, #680]	; (8000c5c <main+0x2f4>)
 80009b4:	f004 fece 	bl	8005754 <HAL_GPIO_WritePin>
	TX_2;
 80009b8:	2201      	movs	r2, #1
 80009ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c2:	f004 fec7 	bl	8005754 <HAL_GPIO_WritePin>


 TIM1->CCR1=pwm[0];
 80009c6:	4ba6      	ldr	r3, [pc, #664]	; (8000c60 <main+0x2f8>)
 80009c8:	881a      	ldrh	r2, [r3, #0]
 80009ca:	4ba6      	ldr	r3, [pc, #664]	; (8000c64 <main+0x2fc>)
 80009cc:	635a      	str	r2, [r3, #52]	; 0x34
 TIM1->CCR2=pwm[1];
 80009ce:	4ba4      	ldr	r3, [pc, #656]	; (8000c60 <main+0x2f8>)
 80009d0:	885a      	ldrh	r2, [r3, #2]
 80009d2:	4ba4      	ldr	r3, [pc, #656]	; (8000c64 <main+0x2fc>)
 80009d4:	639a      	str	r2, [r3, #56]	; 0x38
 TIM8->CCR1=pwm[2];
 80009d6:	4ba2      	ldr	r3, [pc, #648]	; (8000c60 <main+0x2f8>)
 80009d8:	889a      	ldrh	r2, [r3, #4]
 80009da:	4ba3      	ldr	r3, [pc, #652]	; (8000c68 <main+0x300>)
 80009dc:	635a      	str	r2, [r3, #52]	; 0x34
 TIM15->CCR1=pwm[3];
 80009de:	4ba0      	ldr	r3, [pc, #640]	; (8000c60 <main+0x2f8>)
 80009e0:	88da      	ldrh	r2, [r3, #6]
 80009e2:	4ba2      	ldr	r3, [pc, #648]	; (8000c6c <main+0x304>)
 80009e4:	635a      	str	r2, [r3, #52]	; 0x34



  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80009e6:	2100      	movs	r1, #0
 80009e8:	48a1      	ldr	r0, [pc, #644]	; (8000c70 <main+0x308>)
 80009ea:	f008 f993 	bl	8008d14 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80009ee:	2104      	movs	r1, #4
 80009f0:	489f      	ldr	r0, [pc, #636]	; (8000c70 <main+0x308>)
 80009f2:	f008 f98f 	bl	8008d14 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80009f6:	2100      	movs	r1, #0
 80009f8:	489e      	ldr	r0, [pc, #632]	; (8000c74 <main+0x30c>)
 80009fa:	f008 f98b 	bl	8008d14 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80009fe:	2100      	movs	r1, #0
 8000a00:	489d      	ldr	r0, [pc, #628]	; (8000c78 <main+0x310>)
 8000a02:	f008 f987 	bl	8008d14 <HAL_TIM_PWM_Start>
//  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
//  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
//  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
//  HAL_TIMEx_PWMN_Start(&htim15, TIM_CHANNEL_1);

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000a06:	2100      	movs	r1, #0
 8000a08:	489c      	ldr	r0, [pc, #624]	; (8000c7c <main+0x314>)
 8000a0a:	f008 fb7b 	bl	8009104 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8000a0e:	2104      	movs	r1, #4
 8000a10:	489a      	ldr	r0, [pc, #616]	; (8000c7c <main+0x314>)
 8000a12:	f008 fb77 	bl	8009104 <HAL_TIM_IC_Start_IT>

  PORT1_ON;
 8000a16:	2201      	movs	r2, #1
 8000a18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a1c:	4898      	ldr	r0, [pc, #608]	; (8000c80 <main+0x318>)
 8000a1e:	f004 fe99 	bl	8005754 <HAL_GPIO_WritePin>
  PORT2_ON;
 8000a22:	2201      	movs	r2, #1
 8000a24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a28:	4895      	ldr	r0, [pc, #596]	; (8000c80 <main+0x318>)
 8000a2a:	f004 fe93 	bl	8005754 <HAL_GPIO_WritePin>
  PORT3_ON;
 8000a2e:	2201      	movs	r2, #1
 8000a30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a34:	4892      	ldr	r0, [pc, #584]	; (8000c80 <main+0x318>)
 8000a36:	f004 fe8d 	bl	8005754 <HAL_GPIO_WritePin>
  PORT4_ON;
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a40:	488f      	ldr	r0, [pc, #572]	; (8000c80 <main+0x318>)
 8000a42:	f004 fe87 	bl	8005754 <HAL_GPIO_WritePin>

  HAL_ADCEx_Calibration_Start(&hadc2,5);
 8000a46:	2105      	movs	r1, #5
 8000a48:	488e      	ldr	r0, [pc, #568]	; (8000c84 <main+0x31c>)
 8000a4a:	f003 fb4d 	bl	80040e8 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc1,4);
 8000a4e:	2104      	movs	r1, #4
 8000a50:	488d      	ldr	r0, [pc, #564]	; (8000c88 <main+0x320>)
 8000a52:	f003 fb49 	bl	80040e8 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc3,2);
 8000a56:	2102      	movs	r1, #2
 8000a58:	488c      	ldr	r0, [pc, #560]	; (8000c8c <main+0x324>)
 8000a5a:	f003 fb45 	bl	80040e8 <HAL_ADCEx_Calibration_Start>

  flag=1;
 8000a5e:	4b8c      	ldr	r3, [pc, #560]	; (8000c90 <main+0x328>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	701a      	strb	r2, [r3, #0]

  HAL_Delay(100);
 8000a64:	2064      	movs	r0, #100	; 0x64
 8000a66:	f002 fa5d 	bl	8002f24 <HAL_Delay>


  I2C_Init();
 8000a6a:	f7ff ff3f 	bl	80008ec <I2C_Init>



  lcd_init();
 8000a6e:	f7ff fdea 	bl	8000646 <lcd_init>
  lcd_clear();
 8000a72:	f7ff fe63 	bl	800073c <lcd_clear>
    char *text = " ";
 8000a76:	4b87      	ldr	r3, [pc, #540]	; (8000c94 <main+0x32c>)
 8000a78:	60fb      	str	r3, [r7, #12]

  //   LED_2_OFF;



      I2C_send(0b00110000,0);   // 8ми битный интерфейс
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	2030      	movs	r0, #48	; 0x30
 8000a7e:	f7ff fd13 	bl	80004a8 <I2C_send>
      I2C_send(0b00000010,0);   // установка курсора в начале строки
 8000a82:	2100      	movs	r1, #0
 8000a84:	2002      	movs	r0, #2
 8000a86:	f7ff fd0f 	bl	80004a8 <I2C_send>
      I2C_send(0b00001100,0);   // нормальный режим работы
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	200c      	movs	r0, #12
 8000a8e:	f7ff fd0b 	bl	80004a8 <I2C_send>
      I2C_send(0b00000001,0);   // очистка дисплея
 8000a92:	2100      	movs	r1, #0
 8000a94:	2001      	movs	r0, #1
 8000a96:	f7ff fd07 	bl	80004a8 <I2C_send>


  	sprintf(int_to_str, "RPM-%05d t/min     ",rpm);
 8000a9a:	4b7f      	ldr	r3, [pc, #508]	; (8000c98 <main+0x330>)
 8000a9c:	881b      	ldrh	r3, [r3, #0]
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	463b      	mov	r3, r7
 8000aa2:	497e      	ldr	r1, [pc, #504]	; (8000c9c <main+0x334>)
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f00b fa7d 	bl	800bfa4 <siprintf>
  				 	  		lcd_set_cursor(1, 0);
 8000aaa:	2100      	movs	r1, #0
 8000aac:	2001      	movs	r0, #1
 8000aae:	f7ff fe0f 	bl	80006d0 <lcd_set_cursor>
  				 	  	    lcd_write_string(int_to_str);
 8000ab2:	463b      	mov	r3, r7
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff fdf5 	bl	80006a4 <lcd_write_string>




     HAL_ADC_Start_DMA(&hadc2, (uint16_t*)hall_sens, 5);
 8000aba:	2205      	movs	r2, #5
 8000abc:	4978      	ldr	r1, [pc, #480]	; (8000ca0 <main+0x338>)
 8000abe:	4871      	ldr	r0, [pc, #452]	; (8000c84 <main+0x31c>)
 8000ac0:	f002 fea0 	bl	8003804 <HAL_ADC_Start_DMA>
     HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxFrame, 16);
 8000ac4:	2210      	movs	r2, #16
 8000ac6:	4977      	ldr	r1, [pc, #476]	; (8000ca4 <main+0x33c>)
 8000ac8:	4877      	ldr	r0, [pc, #476]	; (8000ca8 <main+0x340>)
 8000aca:	f00b fa16 	bl	800befa <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8000ace:	4b77      	ldr	r3, [pc, #476]	; (8000cac <main+0x344>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	4b75      	ldr	r3, [pc, #468]	; (8000cac <main+0x344>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f022 0204 	bic.w	r2, r2, #4
 8000adc:	601a      	str	r2, [r3, #0]
       RX_2;
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ae4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae8:	f004 fe34 	bl	8005754 <HAL_GPIO_WritePin>
      LED_2_OFF;
 8000aec:	2200      	movs	r2, #0
 8000aee:	2101      	movs	r1, #1
 8000af0:	485a      	ldr	r0, [pc, #360]	; (8000c5c <main+0x2f4>)
 8000af2:	f004 fe2f 	bl	8005754 <HAL_GPIO_WritePin>
  RX_2;
 8000af6:	2200      	movs	r2, #0
 8000af8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000afc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b00:	f004 fe28 	bl	8005754 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  if(flag==1){
 8000b04:	4b62      	ldr	r3, [pc, #392]	; (8000c90 <main+0x328>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d1fa      	bne.n	8000b04 <main+0x19c>
		  HAL_ADC_Stop_DMA(&hadc2);
 8000b0e:	485d      	ldr	r0, [pc, #372]	; (8000c84 <main+0x31c>)
 8000b10:	f002 ff94 	bl	8003a3c <HAL_ADC_Stop_DMA>
		  current[2]=hall_sens[4];
 8000b14:	4b62      	ldr	r3, [pc, #392]	; (8000ca0 <main+0x338>)
 8000b16:	891a      	ldrh	r2, [r3, #8]
 8000b18:	4b65      	ldr	r3, [pc, #404]	; (8000cb0 <main+0x348>)
 8000b1a:	809a      	strh	r2, [r3, #4]
		  HAL_ADC_Start(&hadc1);
 8000b1c:	485a      	ldr	r0, [pc, #360]	; (8000c88 <main+0x320>)
 8000b1e:	f002 fc23 	bl	8003368 <HAL_ADC_Start>
		 	  		  	 HAL_ADC_PollForConversion(&hadc1, 100);
 8000b22:	2164      	movs	r1, #100	; 0x64
 8000b24:	4858      	ldr	r0, [pc, #352]	; (8000c88 <main+0x320>)
 8000b26:	f002 fd6b 	bl	8003600 <HAL_ADC_PollForConversion>
		 	  		     current[3]=0;
 8000b2a:	4b61      	ldr	r3, [pc, #388]	; (8000cb0 <main+0x348>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	80da      	strh	r2, [r3, #6]
		 	  		  	 current[3]=HAL_ADC_GetValue(&hadc1);
 8000b30:	4855      	ldr	r0, [pc, #340]	; (8000c88 <main+0x320>)
 8000b32:	f002 ffe5 	bl	8003b00 <HAL_ADC_GetValue>
 8000b36:	4603      	mov	r3, r0
 8000b38:	b29a      	uxth	r2, r3
 8000b3a:	4b5d      	ldr	r3, [pc, #372]	; (8000cb0 <main+0x348>)
 8000b3c:	80da      	strh	r2, [r3, #6]
		 	  		  	 HAL_ADC_Stop(&hadc1);
 8000b3e:	4852      	ldr	r0, [pc, #328]	; (8000c88 <main+0x320>)
 8000b40:	f002 fd28 	bl	8003594 <HAL_ADC_Stop>

		 	  		  ADC_read_1();
 8000b44:	f7ff fbcc 	bl	80002e0 <ADC_read_1>
		 	  		  ADC_read_12();
 8000b48:	f7ff fbea 	bl	8000320 <ADC_read_12>

		 	  data_reg[0]=current[0];
 8000b4c:	4b58      	ldr	r3, [pc, #352]	; (8000cb0 <main+0x348>)
 8000b4e:	881a      	ldrh	r2, [r3, #0]
 8000b50:	4b58      	ldr	r3, [pc, #352]	; (8000cb4 <main+0x34c>)
 8000b52:	801a      	strh	r2, [r3, #0]
		 	  data_reg[1]=current[1];
 8000b54:	4b56      	ldr	r3, [pc, #344]	; (8000cb0 <main+0x348>)
 8000b56:	885a      	ldrh	r2, [r3, #2]
 8000b58:	4b56      	ldr	r3, [pc, #344]	; (8000cb4 <main+0x34c>)
 8000b5a:	805a      	strh	r2, [r3, #2]
		 	  data_reg[2]=current[2];
 8000b5c:	4b54      	ldr	r3, [pc, #336]	; (8000cb0 <main+0x348>)
 8000b5e:	889a      	ldrh	r2, [r3, #4]
 8000b60:	4b54      	ldr	r3, [pc, #336]	; (8000cb4 <main+0x34c>)
 8000b62:	809a      	strh	r2, [r3, #4]
		 	  data_reg[3]=current[3];
 8000b64:	4b52      	ldr	r3, [pc, #328]	; (8000cb0 <main+0x348>)
 8000b66:	88da      	ldrh	r2, [r3, #6]
 8000b68:	4b52      	ldr	r3, [pc, #328]	; (8000cb4 <main+0x34c>)
 8000b6a:	80da      	strh	r2, [r3, #6]
		 	  data_reg[4]=pwm[0];
 8000b6c:	4b3c      	ldr	r3, [pc, #240]	; (8000c60 <main+0x2f8>)
 8000b6e:	881a      	ldrh	r2, [r3, #0]
 8000b70:	4b50      	ldr	r3, [pc, #320]	; (8000cb4 <main+0x34c>)
 8000b72:	811a      	strh	r2, [r3, #8]
		 	  data_reg[5]=pwm[1];
 8000b74:	4b3a      	ldr	r3, [pc, #232]	; (8000c60 <main+0x2f8>)
 8000b76:	885a      	ldrh	r2, [r3, #2]
 8000b78:	4b4e      	ldr	r3, [pc, #312]	; (8000cb4 <main+0x34c>)
 8000b7a:	815a      	strh	r2, [r3, #10]
		 	  data_reg[6]=pwm[2];
 8000b7c:	4b38      	ldr	r3, [pc, #224]	; (8000c60 <main+0x2f8>)
 8000b7e:	889a      	ldrh	r2, [r3, #4]
 8000b80:	4b4c      	ldr	r3, [pc, #304]	; (8000cb4 <main+0x34c>)
 8000b82:	819a      	strh	r2, [r3, #12]
		 	  data_reg[7]=pwm[3];
 8000b84:	4b36      	ldr	r3, [pc, #216]	; (8000c60 <main+0x2f8>)
 8000b86:	88da      	ldrh	r2, [r3, #6]
 8000b88:	4b4a      	ldr	r3, [pc, #296]	; (8000cb4 <main+0x34c>)
 8000b8a:	81da      	strh	r2, [r3, #14]
		 	  data_reg[8]=rpm;
 8000b8c:	4b42      	ldr	r3, [pc, #264]	; (8000c98 <main+0x330>)
 8000b8e:	881a      	ldrh	r2, [r3, #0]
 8000b90:	4b48      	ldr	r3, [pc, #288]	; (8000cb4 <main+0x34c>)
 8000b92:	821a      	strh	r2, [r3, #16]
		 	  data_reg[9]=f;
 8000b94:	4b48      	ldr	r3, [pc, #288]	; (8000cb8 <main+0x350>)
 8000b96:	881a      	ldrh	r2, [r3, #0]
 8000b98:	4b46      	ldr	r3, [pc, #280]	; (8000cb4 <main+0x34c>)
 8000b9a:	825a      	strh	r2, [r3, #18]
		 	  data_reg[10]=limit;
 8000b9c:	4b47      	ldr	r3, [pc, #284]	; (8000cbc <main+0x354>)
 8000b9e:	881a      	ldrh	r2, [r3, #0]
 8000ba0:	4b44      	ldr	r3, [pc, #272]	; (8000cb4 <main+0x34c>)
 8000ba2:	829a      	strh	r2, [r3, #20]
		 	  data_reg[11]=SLAVE_ID;
 8000ba4:	4b46      	ldr	r3, [pc, #280]	; (8000cc0 <main+0x358>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	b29a      	uxth	r2, r3
 8000baa:	4b42      	ldr	r3, [pc, #264]	; (8000cb4 <main+0x34c>)
 8000bac:	82da      	strh	r2, [r3, #22]
		 	  data_reg[12]=voltage_dc;
 8000bae:	4b45      	ldr	r3, [pc, #276]	; (8000cc4 <main+0x35c>)
 8000bb0:	881a      	ldrh	r2, [r3, #0]
 8000bb2:	4b40      	ldr	r3, [pc, #256]	; (8000cb4 <main+0x34c>)
 8000bb4:	831a      	strh	r2, [r3, #24]
		 	  data_reg[13]=current_dc;
 8000bb6:	4b44      	ldr	r3, [pc, #272]	; (8000cc8 <main+0x360>)
 8000bb8:	881a      	ldrh	r2, [r3, #0]
 8000bba:	4b3e      	ldr	r3, [pc, #248]	; (8000cb4 <main+0x34c>)
 8000bbc:	835a      	strh	r2, [r3, #26]

                current_avg=(current[0]+current[1]+current[2]+current[3])/4;
 8000bbe:	4b3c      	ldr	r3, [pc, #240]	; (8000cb0 <main+0x348>)
 8000bc0:	881b      	ldrh	r3, [r3, #0]
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	4b3a      	ldr	r3, [pc, #232]	; (8000cb0 <main+0x348>)
 8000bc6:	885b      	ldrh	r3, [r3, #2]
 8000bc8:	4413      	add	r3, r2
 8000bca:	4a39      	ldr	r2, [pc, #228]	; (8000cb0 <main+0x348>)
 8000bcc:	8892      	ldrh	r2, [r2, #4]
 8000bce:	4413      	add	r3, r2
 8000bd0:	4a37      	ldr	r2, [pc, #220]	; (8000cb0 <main+0x348>)
 8000bd2:	88d2      	ldrh	r2, [r2, #6]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	da00      	bge.n	8000bdc <main+0x274>
 8000bda:	3303      	adds	r3, #3
 8000bdc:	109b      	asrs	r3, r3, #2
 8000bde:	b29a      	uxth	r2, r3
 8000be0:	4b3a      	ldr	r3, [pc, #232]	; (8000ccc <main+0x364>)
 8000be2:	801a      	strh	r2, [r3, #0]
                current_sum=current[0]+current[1]+current[2]+current[3];
 8000be4:	4b32      	ldr	r3, [pc, #200]	; (8000cb0 <main+0x348>)
 8000be6:	881a      	ldrh	r2, [r3, #0]
 8000be8:	4b31      	ldr	r3, [pc, #196]	; (8000cb0 <main+0x348>)
 8000bea:	885b      	ldrh	r3, [r3, #2]
 8000bec:	4413      	add	r3, r2
 8000bee:	b29a      	uxth	r2, r3
 8000bf0:	4b2f      	ldr	r3, [pc, #188]	; (8000cb0 <main+0x348>)
 8000bf2:	889b      	ldrh	r3, [r3, #4]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	4b2d      	ldr	r3, [pc, #180]	; (8000cb0 <main+0x348>)
 8000bfa:	88db      	ldrh	r3, [r3, #6]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	b29a      	uxth	r2, r3
 8000c00:	4b33      	ldr	r3, [pc, #204]	; (8000cd0 <main+0x368>)
 8000c02:	801a      	strh	r2, [r3, #0]
		 	  		  adc_count++;
 8000c04:	4b33      	ldr	r3, [pc, #204]	; (8000cd4 <main+0x36c>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	b2da      	uxtb	r2, r3
 8000c0c:	4b31      	ldr	r3, [pc, #196]	; (8000cd4 <main+0x36c>)
 8000c0e:	701a      	strb	r2, [r3, #0]



		 	  	    adc_filter[0]= filter(current[0]);
 8000c10:	4b27      	ldr	r3, [pc, #156]	; (8000cb0 <main+0x348>)
 8000c12:	881b      	ldrh	r3, [r3, #0]
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff fd9b 	bl	8000750 <filter>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	4b2e      	ldr	r3, [pc, #184]	; (8000cd8 <main+0x370>)
 8000c20:	701a      	strb	r2, [r3, #0]
		 	  		adc_filter[1]= filter(current[1]);
 8000c22:	4b23      	ldr	r3, [pc, #140]	; (8000cb0 <main+0x348>)
 8000c24:	885b      	ldrh	r3, [r3, #2]
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff fd92 	bl	8000750 <filter>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	4b29      	ldr	r3, [pc, #164]	; (8000cd8 <main+0x370>)
 8000c32:	705a      	strb	r2, [r3, #1]
		 	  		adc_filter[2]= filter(current[2]);
 8000c34:	4b1e      	ldr	r3, [pc, #120]	; (8000cb0 <main+0x348>)
 8000c36:	889b      	ldrh	r3, [r3, #4]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff fd89 	bl	8000750 <filter>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	b2da      	uxtb	r2, r3
 8000c42:	4b25      	ldr	r3, [pc, #148]	; (8000cd8 <main+0x370>)
 8000c44:	709a      	strb	r2, [r3, #2]
		 	  		adc_filter[3]= filter(current[3]);
 8000c46:	4b1a      	ldr	r3, [pc, #104]	; (8000cb0 <main+0x348>)
 8000c48:	88db      	ldrh	r3, [r3, #6]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff fd80 	bl	8000750 <filter>
 8000c50:	4603      	mov	r3, r0
 8000c52:	b2da      	uxtb	r2, r3
 8000c54:	4b20      	ldr	r3, [pc, #128]	; (8000cd8 <main+0x370>)
 8000c56:	70da      	strb	r2, [r3, #3]
 8000c58:	e040      	b.n	8000cdc <main+0x374>
 8000c5a:	bf00      	nop
 8000c5c:	48001400 	.word	0x48001400
 8000c60:	20000000 	.word	0x20000000
 8000c64:	40012c00 	.word	0x40012c00
 8000c68:	40013400 	.word	0x40013400
 8000c6c:	40014000 	.word	0x40014000
 8000c70:	20000234 	.word	0x20000234
 8000c74:	20000318 	.word	0x20000318
 8000c78:	20000364 	.word	0x20000364
 8000c7c:	20000280 	.word	0x20000280
 8000c80:	48000400 	.word	0x48000400
 8000c84:	200000dc 	.word	0x200000dc
 8000c88:	2000008c 	.word	0x2000008c
 8000c8c:	2000012c 	.word	0x2000012c
 8000c90:	2000055f 	.word	0x2000055f
 8000c94:	0800c904 	.word	0x0800c904
 8000c98:	20000566 	.word	0x20000566
 8000c9c:	0800c908 	.word	0x0800c908
 8000ca0:	20000550 	.word	0x20000550
 8000ca4:	2000057c 	.word	0x2000057c
 8000ca8:	20000438 	.word	0x20000438
 8000cac:	200004c0 	.word	0x200004c0
 8000cb0:	20000548 	.word	0x20000548
 8000cb4:	2000068c 	.word	0x2000068c
 8000cb8:	20000568 	.word	0x20000568
 8000cbc:	20000008 	.word	0x20000008
 8000cc0:	20000010 	.word	0x20000010
 8000cc4:	2000000e 	.word	0x2000000e
 8000cc8:	2000000c 	.word	0x2000000c
 8000ccc:	20000572 	.word	0x20000572
 8000cd0:	20000574 	.word	0x20000574
 8000cd4:	2000056a 	.word	0x2000056a
 8000cd8:	2000056c 	.word	0x2000056c


		 	  if(page_flag==1){lcd_clear();page_flag=0;}
 8000cdc:	4bb4      	ldr	r3, [pc, #720]	; (8000fb0 <main+0x648>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d104      	bne.n	8000cee <main+0x386>
 8000ce4:	f7ff fd2a 	bl	800073c <lcd_clear>
 8000ce8:	4bb1      	ldr	r3, [pc, #708]	; (8000fb0 <main+0x648>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	701a      	strb	r2, [r3, #0]
		 	  	  if((page_num==0)&&(adc_count==20)){
 8000cee:	4bb1      	ldr	r3, [pc, #708]	; (8000fb4 <main+0x64c>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14a      	bne.n	8000d8c <main+0x424>
 8000cf6:	4bb0      	ldr	r3, [pc, #704]	; (8000fb8 <main+0x650>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	2b14      	cmp	r3, #20
 8000cfc:	d146      	bne.n	8000d8c <main+0x424>


				 	  		sprintf(int_to_str, "RPM-%05d t/min     ",rpm);
 8000cfe:	4baf      	ldr	r3, [pc, #700]	; (8000fbc <main+0x654>)
 8000d00:	881b      	ldrh	r3, [r3, #0]
 8000d02:	461a      	mov	r2, r3
 8000d04:	463b      	mov	r3, r7
 8000d06:	49ae      	ldr	r1, [pc, #696]	; (8000fc0 <main+0x658>)
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f00b f94b 	bl	800bfa4 <siprintf>
				 	  		lcd_set_cursor(1, 0);
 8000d0e:	2100      	movs	r1, #0
 8000d10:	2001      	movs	r0, #1
 8000d12:	f7ff fcdd 	bl	80006d0 <lcd_set_cursor>
				 	  	    lcd_write_string(int_to_str);
 8000d16:	463b      	mov	r3, r7
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff fcc3 	bl	80006a4 <lcd_write_string>

				 	  	    sprintf(int_to_str, "PWM_CMD-%05d/%03d%% ",pwm_n,pwm_n/20);
 8000d1e:	4ba9      	ldr	r3, [pc, #676]	; (8000fc4 <main+0x65c>)
 8000d20:	881b      	ldrh	r3, [r3, #0]
 8000d22:	4619      	mov	r1, r3
 8000d24:	4ba7      	ldr	r3, [pc, #668]	; (8000fc4 <main+0x65c>)
 8000d26:	881b      	ldrh	r3, [r3, #0]
 8000d28:	4aa7      	ldr	r2, [pc, #668]	; (8000fc8 <main+0x660>)
 8000d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d2e:	091b      	lsrs	r3, r3, #4
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	4638      	mov	r0, r7
 8000d34:	460a      	mov	r2, r1
 8000d36:	49a5      	ldr	r1, [pc, #660]	; (8000fcc <main+0x664>)
 8000d38:	f00b f934 	bl	800bfa4 <siprintf>
				 	  	 	lcd_set_cursor(2, 0);
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	2002      	movs	r0, #2
 8000d40:	f7ff fcc6 	bl	80006d0 <lcd_set_cursor>
				 	  	 	lcd_write_string(int_to_str);
 8000d44:	463b      	mov	r3, r7
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff fcac 	bl	80006a4 <lcd_write_string>

				 	  	    sprintf(int_to_str, "ADC_avg-%05d ",current_avg);
 8000d4c:	4ba0      	ldr	r3, [pc, #640]	; (8000fd0 <main+0x668>)
 8000d4e:	881b      	ldrh	r3, [r3, #0]
 8000d50:	461a      	mov	r2, r3
 8000d52:	463b      	mov	r3, r7
 8000d54:	499f      	ldr	r1, [pc, #636]	; (8000fd4 <main+0x66c>)
 8000d56:	4618      	mov	r0, r3
 8000d58:	f00b f924 	bl	800bfa4 <siprintf>
				 	  	 	lcd_set_cursor(3, 0);
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	2003      	movs	r0, #3
 8000d60:	f7ff fcb6 	bl	80006d0 <lcd_set_cursor>
				 	  	 	lcd_write_string(int_to_str);
 8000d64:	463b      	mov	r3, r7
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff fc9c 	bl	80006a4 <lcd_write_string>

				 	    	sprintf(int_to_str, "F=%05dHz ",f);
 8000d6c:	4b9a      	ldr	r3, [pc, #616]	; (8000fd8 <main+0x670>)
 8000d6e:	881b      	ldrh	r3, [r3, #0]
 8000d70:	461a      	mov	r2, r3
 8000d72:	463b      	mov	r3, r7
 8000d74:	4999      	ldr	r1, [pc, #612]	; (8000fdc <main+0x674>)
 8000d76:	4618      	mov	r0, r3
 8000d78:	f00b f914 	bl	800bfa4 <siprintf>
				 	  	 	lcd_set_cursor(4, 0);
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	2004      	movs	r0, #4
 8000d80:	f7ff fca6 	bl	80006d0 <lcd_set_cursor>
				 	  	 	lcd_write_string(int_to_str);	  }
 8000d84:	463b      	mov	r3, r7
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff fc8c 	bl	80006a4 <lcd_write_string>

		 	  	  if((page_num==2)&&(adc_count==22)){
 8000d8c:	4b89      	ldr	r3, [pc, #548]	; (8000fb4 <main+0x64c>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d149      	bne.n	8000e28 <main+0x4c0>
 8000d94:	4b88      	ldr	r3, [pc, #544]	; (8000fb8 <main+0x650>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2b16      	cmp	r3, #22
 8000d9a:	d145      	bne.n	8000e28 <main+0x4c0>

		 	  		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN); // RTC_FORMAT_BIN , RTC_FORMAT_BCD
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	4990      	ldr	r1, [pc, #576]	; (8000fe0 <main+0x678>)
 8000da0:	4890      	ldr	r0, [pc, #576]	; (8000fe4 <main+0x67c>)
 8000da2:	f007 fd10 	bl	80087c6 <HAL_RTC_GetTime>
		 	  	 HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000da6:	2200      	movs	r2, #0
 8000da8:	498f      	ldr	r1, [pc, #572]	; (8000fe8 <main+0x680>)
 8000daa:	488e      	ldr	r0, [pc, #568]	; (8000fe4 <main+0x67c>)
 8000dac:	f007 fded 	bl	800898a <HAL_RTC_GetDate>

		 	  	                            sprintf(int_to_str, "START_TIME:%02d:%02d:%02d",hour,min,sec);
 8000db0:	4b8e      	ldr	r3, [pc, #568]	; (8000fec <main+0x684>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	461a      	mov	r2, r3
 8000db6:	4b8e      	ldr	r3, [pc, #568]	; (8000ff0 <main+0x688>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4b8d      	ldr	r3, [pc, #564]	; (8000ff4 <main+0x68c>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	4638      	mov	r0, r7
 8000dc2:	9300      	str	r3, [sp, #0]
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	498c      	ldr	r1, [pc, #560]	; (8000ff8 <main+0x690>)
 8000dc8:	f00b f8ec 	bl	800bfa4 <siprintf>
		 	  			 	  				lcd_set_cursor(1, 0);
 8000dcc:	2100      	movs	r1, #0
 8000dce:	2001      	movs	r0, #1
 8000dd0:	f7ff fc7e 	bl	80006d0 <lcd_set_cursor>
		 	  			 	  			    lcd_write_string(int_to_str);
 8000dd4:	463b      	mov	r3, r7
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff fc64 	bl	80006a4 <lcd_write_string>

		 	  					 	  		sprintf(int_to_str, "TIME:%02d:%02d:%02d",sTime.Hours,sTime.Minutes,sTime.Seconds);
 8000ddc:	4b80      	ldr	r3, [pc, #512]	; (8000fe0 <main+0x678>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	461a      	mov	r2, r3
 8000de2:	4b7f      	ldr	r3, [pc, #508]	; (8000fe0 <main+0x678>)
 8000de4:	785b      	ldrb	r3, [r3, #1]
 8000de6:	4619      	mov	r1, r3
 8000de8:	4b7d      	ldr	r3, [pc, #500]	; (8000fe0 <main+0x678>)
 8000dea:	789b      	ldrb	r3, [r3, #2]
 8000dec:	4638      	mov	r0, r7
 8000dee:	9300      	str	r3, [sp, #0]
 8000df0:	460b      	mov	r3, r1
 8000df2:	4982      	ldr	r1, [pc, #520]	; (8000ffc <main+0x694>)
 8000df4:	f00b f8d6 	bl	800bfa4 <siprintf>
		 	  					 	  		lcd_set_cursor(2, 0);
 8000df8:	2100      	movs	r1, #0
 8000dfa:	2002      	movs	r0, #2
 8000dfc:	f7ff fc68 	bl	80006d0 <lcd_set_cursor>
		 	  					 	  	    lcd_write_string(int_to_str);
 8000e00:	463b      	mov	r3, r7
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff fc4e 	bl	80006a4 <lcd_write_string>


		 	  					 	  		sprintf(int_to_str, "ADC_filter:%02d",adc_filter[0]);
 8000e08:	4b7d      	ldr	r3, [pc, #500]	; (8001000 <main+0x698>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	463b      	mov	r3, r7
 8000e10:	497c      	ldr	r1, [pc, #496]	; (8001004 <main+0x69c>)
 8000e12:	4618      	mov	r0, r3
 8000e14:	f00b f8c6 	bl	800bfa4 <siprintf>
		 	  					 	  		lcd_set_cursor(3, 0);
 8000e18:	2100      	movs	r1, #0
 8000e1a:	2003      	movs	r0, #3
 8000e1c:	f7ff fc58 	bl	80006d0 <lcd_set_cursor>
		 	  					 	  	    lcd_write_string(int_to_str);
 8000e20:	463b      	mov	r3, r7
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff fc3e 	bl	80006a4 <lcd_write_string>

		 	  			 	  	  }



		 	  	  if(page_num==1){
 8000e28:	4b62      	ldr	r3, [pc, #392]	; (8000fb4 <main+0x64c>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	f040 80a3 	bne.w	8000f78 <main+0x610>
		 	  	                 	if(adc_count==18){
 8000e32:	4b61      	ldr	r3, [pc, #388]	; (8000fb8 <main+0x650>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	2b12      	cmp	r3, #18
 8000e38:	d157      	bne.n	8000eea <main+0x582>

		 	  				 	  		sprintf(int_to_str, "PWM-%02d%%/%04d",pwm[0]/20,pwm[0]);
 8000e3a:	4b73      	ldr	r3, [pc, #460]	; (8001008 <main+0x6a0>)
 8000e3c:	881b      	ldrh	r3, [r3, #0]
 8000e3e:	4a62      	ldr	r2, [pc, #392]	; (8000fc8 <main+0x660>)
 8000e40:	fba2 2303 	umull	r2, r3, r2, r3
 8000e44:	091b      	lsrs	r3, r3, #4
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4b6f      	ldr	r3, [pc, #444]	; (8001008 <main+0x6a0>)
 8000e4c:	881b      	ldrh	r3, [r3, #0]
 8000e4e:	4638      	mov	r0, r7
 8000e50:	496e      	ldr	r1, [pc, #440]	; (800100c <main+0x6a4>)
 8000e52:	f00b f8a7 	bl	800bfa4 <siprintf>
		 	  				 	  		lcd_set_cursor(1, 0);
 8000e56:	2100      	movs	r1, #0
 8000e58:	2001      	movs	r0, #1
 8000e5a:	f7ff fc39 	bl	80006d0 <lcd_set_cursor>
		 	  				 	  	    lcd_write_string(int_to_str);
 8000e5e:	463b      	mov	r3, r7
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff fc1f 	bl	80006a4 <lcd_write_string>

		 	  				 	     	sprintf(int_to_str, "PWM-%02d%%/%04d",pwm[1]/20,pwm[1]);
 8000e66:	4b68      	ldr	r3, [pc, #416]	; (8001008 <main+0x6a0>)
 8000e68:	885b      	ldrh	r3, [r3, #2]
 8000e6a:	4a57      	ldr	r2, [pc, #348]	; (8000fc8 <main+0x660>)
 8000e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e70:	091b      	lsrs	r3, r3, #4
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	461a      	mov	r2, r3
 8000e76:	4b64      	ldr	r3, [pc, #400]	; (8001008 <main+0x6a0>)
 8000e78:	885b      	ldrh	r3, [r3, #2]
 8000e7a:	4638      	mov	r0, r7
 8000e7c:	4963      	ldr	r1, [pc, #396]	; (800100c <main+0x6a4>)
 8000e7e:	f00b f891 	bl	800bfa4 <siprintf>
		 	  				 	  	    lcd_set_cursor(2, 0);
 8000e82:	2100      	movs	r1, #0
 8000e84:	2002      	movs	r0, #2
 8000e86:	f7ff fc23 	bl	80006d0 <lcd_set_cursor>
		 	  				 	  	    lcd_write_string(int_to_str);
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff fc09 	bl	80006a4 <lcd_write_string>

		 	  				 	  	    sprintf(int_to_str, "PWM-%02d%%/%04d",pwm[2]/20,pwm[2]);
 8000e92:	4b5d      	ldr	r3, [pc, #372]	; (8001008 <main+0x6a0>)
 8000e94:	889b      	ldrh	r3, [r3, #4]
 8000e96:	4a4c      	ldr	r2, [pc, #304]	; (8000fc8 <main+0x660>)
 8000e98:	fba2 2303 	umull	r2, r3, r2, r3
 8000e9c:	091b      	lsrs	r3, r3, #4
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b59      	ldr	r3, [pc, #356]	; (8001008 <main+0x6a0>)
 8000ea4:	889b      	ldrh	r3, [r3, #4]
 8000ea6:	4638      	mov	r0, r7
 8000ea8:	4958      	ldr	r1, [pc, #352]	; (800100c <main+0x6a4>)
 8000eaa:	f00b f87b 	bl	800bfa4 <siprintf>
		 	  				 	  	    lcd_set_cursor(3, 0);
 8000eae:	2100      	movs	r1, #0
 8000eb0:	2003      	movs	r0, #3
 8000eb2:	f7ff fc0d 	bl	80006d0 <lcd_set_cursor>
		 	  				 	  		lcd_write_string(int_to_str);
 8000eb6:	463b      	mov	r3, r7
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff fbf3 	bl	80006a4 <lcd_write_string>

		 	  				 	    	sprintf(int_to_str, "PWM-%02d%%/%04d",pwm[3]/20,pwm[3]);
 8000ebe:	4b52      	ldr	r3, [pc, #328]	; (8001008 <main+0x6a0>)
 8000ec0:	88db      	ldrh	r3, [r3, #6]
 8000ec2:	4a41      	ldr	r2, [pc, #260]	; (8000fc8 <main+0x660>)
 8000ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec8:	091b      	lsrs	r3, r3, #4
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	461a      	mov	r2, r3
 8000ece:	4b4e      	ldr	r3, [pc, #312]	; (8001008 <main+0x6a0>)
 8000ed0:	88db      	ldrh	r3, [r3, #6]
 8000ed2:	4638      	mov	r0, r7
 8000ed4:	494d      	ldr	r1, [pc, #308]	; (800100c <main+0x6a4>)
 8000ed6:	f00b f865 	bl	800bfa4 <siprintf>
		 	  				 	  	    lcd_set_cursor(4, 0);
 8000eda:	2100      	movs	r1, #0
 8000edc:	2004      	movs	r0, #4
 8000ede:	f7ff fbf7 	bl	80006d0 <lcd_set_cursor>
		 	  				 	  		lcd_write_string(int_to_str);
 8000ee2:	463b      	mov	r3, r7
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fbdd 	bl	80006a4 <lcd_write_string>

		 	  				 	  		}

		 	  		if(adc_count==180){
 8000eea:	4b33      	ldr	r3, [pc, #204]	; (8000fb8 <main+0x650>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2bb4      	cmp	r3, #180	; 0xb4
 8000ef0:	d142      	bne.n	8000f78 <main+0x610>


		 	  			sprintf(int_to_str, "Adc-%03d",current[0]);
 8000ef2:	4b47      	ldr	r3, [pc, #284]	; (8001010 <main+0x6a8>)
 8000ef4:	881b      	ldrh	r3, [r3, #0]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	463b      	mov	r3, r7
 8000efa:	4946      	ldr	r1, [pc, #280]	; (8001014 <main+0x6ac>)
 8000efc:	4618      	mov	r0, r3
 8000efe:	f00b f851 	bl	800bfa4 <siprintf>
		 	  			lcd_set_cursor(1, 13);
 8000f02:	210d      	movs	r1, #13
 8000f04:	2001      	movs	r0, #1
 8000f06:	f7ff fbe3 	bl	80006d0 <lcd_set_cursor>
		 	  		    lcd_write_string(int_to_str);
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fbc9 	bl	80006a4 <lcd_write_string>

		 	  		    sprintf(int_to_str, "Adc-%03d",current[1]);
 8000f12:	4b3f      	ldr	r3, [pc, #252]	; (8001010 <main+0x6a8>)
 8000f14:	885b      	ldrh	r3, [r3, #2]
 8000f16:	461a      	mov	r2, r3
 8000f18:	463b      	mov	r3, r7
 8000f1a:	493e      	ldr	r1, [pc, #248]	; (8001014 <main+0x6ac>)
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f00b f841 	bl	800bfa4 <siprintf>
		 	  		 	lcd_set_cursor(2, 13);
 8000f22:	210d      	movs	r1, #13
 8000f24:	2002      	movs	r0, #2
 8000f26:	f7ff fbd3 	bl	80006d0 <lcd_set_cursor>
		 	  		    lcd_write_string(int_to_str);
 8000f2a:	463b      	mov	r3, r7
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff fbb9 	bl	80006a4 <lcd_write_string>

		 	  		    sprintf(int_to_str, "Adc-%03d",current[2]);
 8000f32:	4b37      	ldr	r3, [pc, #220]	; (8001010 <main+0x6a8>)
 8000f34:	889b      	ldrh	r3, [r3, #4]
 8000f36:	461a      	mov	r2, r3
 8000f38:	463b      	mov	r3, r7
 8000f3a:	4936      	ldr	r1, [pc, #216]	; (8001014 <main+0x6ac>)
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f00b f831 	bl	800bfa4 <siprintf>
		 	  		    lcd_set_cursor(3, 13);
 8000f42:	210d      	movs	r1, #13
 8000f44:	2003      	movs	r0, #3
 8000f46:	f7ff fbc3 	bl	80006d0 <lcd_set_cursor>
		 	  		    lcd_write_string(int_to_str);
 8000f4a:	463b      	mov	r3, r7
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff fba9 	bl	80006a4 <lcd_write_string>

		 	  	        sprintf(int_to_str, "Adc-%03d",current[3]);
 8000f52:	4b2f      	ldr	r3, [pc, #188]	; (8001010 <main+0x6a8>)
 8000f54:	88db      	ldrh	r3, [r3, #6]
 8000f56:	461a      	mov	r2, r3
 8000f58:	463b      	mov	r3, r7
 8000f5a:	492e      	ldr	r1, [pc, #184]	; (8001014 <main+0x6ac>)
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f00b f821 	bl	800bfa4 <siprintf>
		 	  	 		lcd_set_cursor(4, 13);
 8000f62:	210d      	movs	r1, #13
 8000f64:	2004      	movs	r0, #4
 8000f66:	f7ff fbb3 	bl	80006d0 <lcd_set_cursor>
		 	  	 		lcd_write_string(int_to_str);
 8000f6a:	463b      	mov	r3, r7
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff fb99 	bl	80006a4 <lcd_write_string>

		 	  	    adc_count=0;
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <main+0x650>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	701a      	strb	r2, [r3, #0]





	     PWM_correction();
 8000f78:	f7ff f9f2 	bl	8000360 <PWM_correction>
	 // 	 page();
	  	 TIM1->CCR1=pwm[0];
 8000f7c:	4b22      	ldr	r3, [pc, #136]	; (8001008 <main+0x6a0>)
 8000f7e:	881a      	ldrh	r2, [r3, #0]
 8000f80:	4b25      	ldr	r3, [pc, #148]	; (8001018 <main+0x6b0>)
 8000f82:	635a      	str	r2, [r3, #52]	; 0x34
	  	 TIM1->CCR2=pwm[1];
 8000f84:	4b20      	ldr	r3, [pc, #128]	; (8001008 <main+0x6a0>)
 8000f86:	885a      	ldrh	r2, [r3, #2]
 8000f88:	4b23      	ldr	r3, [pc, #140]	; (8001018 <main+0x6b0>)
 8000f8a:	639a      	str	r2, [r3, #56]	; 0x38
	  	 TIM8->CCR1=pwm[2];
 8000f8c:	4b1e      	ldr	r3, [pc, #120]	; (8001008 <main+0x6a0>)
 8000f8e:	889a      	ldrh	r2, [r3, #4]
 8000f90:	4b22      	ldr	r3, [pc, #136]	; (800101c <main+0x6b4>)
 8000f92:	635a      	str	r2, [r3, #52]	; 0x34
	  	 TIM15->CCR1=pwm[3];
 8000f94:	4b1c      	ldr	r3, [pc, #112]	; (8001008 <main+0x6a0>)
 8000f96:	88da      	ldrh	r2, [r3, #6]
 8000f98:	4b21      	ldr	r3, [pc, #132]	; (8001020 <main+0x6b8>)
 8000f9a:	635a      	str	r2, [r3, #52]	; 0x34
	  	 flag=0;
 8000f9c:	4b21      	ldr	r3, [pc, #132]	; (8001024 <main+0x6bc>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	701a      	strb	r2, [r3, #0]
	  	 HAL_ADC_Start_DMA(&hadc2, (uint16_t*)hall_sens, 5);
 8000fa2:	2205      	movs	r2, #5
 8000fa4:	4920      	ldr	r1, [pc, #128]	; (8001028 <main+0x6c0>)
 8000fa6:	4821      	ldr	r0, [pc, #132]	; (800102c <main+0x6c4>)
 8000fa8:	f002 fc2c 	bl	8003804 <HAL_ADC_Start_DMA>
	  if(flag==1){
 8000fac:	e5aa      	b.n	8000b04 <main+0x19c>
 8000fae:	bf00      	nop
 8000fb0:	20000571 	.word	0x20000571
 8000fb4:	20000570 	.word	0x20000570
 8000fb8:	2000056a 	.word	0x2000056a
 8000fbc:	20000566 	.word	0x20000566
 8000fc0:	0800c908 	.word	0x0800c908
 8000fc4:	2000055a 	.word	0x2000055a
 8000fc8:	cccccccd 	.word	0xcccccccd
 8000fcc:	0800c91c 	.word	0x0800c91c
 8000fd0:	20000572 	.word	0x20000572
 8000fd4:	0800c934 	.word	0x0800c934
 8000fd8:	20000568 	.word	0x20000568
 8000fdc:	0800c944 	.word	0x0800c944
 8000fe0:	200006cc 	.word	0x200006cc
 8000fe4:	20000214 	.word	0x20000214
 8000fe8:	200006e0 	.word	0x200006e0
 8000fec:	20000577 	.word	0x20000577
 8000ff0:	20000576 	.word	0x20000576
 8000ff4:	20000578 	.word	0x20000578
 8000ff8:	0800c950 	.word	0x0800c950
 8000ffc:	0800c96c 	.word	0x0800c96c
 8001000:	2000056c 	.word	0x2000056c
 8001004:	0800c980 	.word	0x0800c980
 8001008:	20000000 	.word	0x20000000
 800100c:	0800c990 	.word	0x0800c990
 8001010:	20000548 	.word	0x20000548
 8001014:	0800c9a0 	.word	0x0800c9a0
 8001018:	40012c00 	.word	0x40012c00
 800101c:	40013400 	.word	0x40013400
 8001020:	40014000 	.word	0x40014000
 8001024:	2000055f 	.word	0x2000055f
 8001028:	20000550 	.word	0x20000550
 800102c:	200000dc 	.word	0x200000dc

08001030 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b09e      	sub	sp, #120	; 0x78
 8001034:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001036:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800103a:	2228      	movs	r2, #40	; 0x28
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f00a ffd0 	bl	800bfe4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001044:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001054:	463b      	mov	r3, r7
 8001056:	223c      	movs	r2, #60	; 0x3c
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f00a ffc2 	bl	800bfe4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001060:	230a      	movs	r3, #10
 8001062:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001064:	2301      	movs	r3, #1
 8001066:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001068:	2310      	movs	r3, #16
 800106a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800106c:	2301      	movs	r3, #1
 800106e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001070:	2302      	movs	r3, #2
 8001072:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001074:	2300      	movs	r3, #0
 8001076:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001078:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800107c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800107e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001082:	4618      	mov	r0, r3
 8001084:	f005 fe5e 	bl	8006d44 <HAL_RCC_OscConfig>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800108e:	f001 f84f 	bl	8002130 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001092:	230f      	movs	r3, #15
 8001094:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001096:	2302      	movs	r3, #2
 8001098:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800109a:	2300      	movs	r3, #0
 800109c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800109e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80010ac:	2102      	movs	r1, #2
 80010ae:	4618      	mov	r0, r3
 80010b0:	f006 fe86 	bl	8007dc0 <HAL_RCC_ClockConfig>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80010ba:	f001 f839 	bl	8002130 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80010be:	4b11      	ldr	r3, [pc, #68]	; (8001104 <SystemClock_Config+0xd4>)
 80010c0:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM8
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80010c2:	2300      	movs	r3, #0
 80010c4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80010ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 80010d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010d4:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80010da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010de:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80010e0:	2300      	movs	r3, #0
 80010e2:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 80010e4:	2300      	movs	r3, #0
 80010e6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010e8:	463b      	mov	r3, r7
 80010ea:	4618      	mov	r0, r3
 80010ec:	f007 f89e 	bl	800822c <HAL_RCCEx_PeriphCLKConfig>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <SystemClock_Config+0xca>
  {
    Error_Handler();
 80010f6:	f001 f81b 	bl	8002130 <Error_Handler>
  }
}
 80010fa:	bf00      	nop
 80010fc:	3778      	adds	r7, #120	; 0x78
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	000131a3 	.word	0x000131a3

08001108 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08a      	sub	sp, #40	; 0x28
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800110e:	f107 031c 	add.w	r3, r7, #28
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
 8001128:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800112a:	4b2e      	ldr	r3, [pc, #184]	; (80011e4 <MX_ADC1_Init+0xdc>)
 800112c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001130:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001132:	4b2c      	ldr	r3, [pc, #176]	; (80011e4 <MX_ADC1_Init+0xdc>)
 8001134:	2200      	movs	r2, #0
 8001136:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001138:	4b2a      	ldr	r3, [pc, #168]	; (80011e4 <MX_ADC1_Init+0xdc>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800113e:	4b29      	ldr	r3, [pc, #164]	; (80011e4 <MX_ADC1_Init+0xdc>)
 8001140:	2200      	movs	r2, #0
 8001142:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001144:	4b27      	ldr	r3, [pc, #156]	; (80011e4 <MX_ADC1_Init+0xdc>)
 8001146:	2200      	movs	r2, #0
 8001148:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800114a:	4b26      	ldr	r3, [pc, #152]	; (80011e4 <MX_ADC1_Init+0xdc>)
 800114c:	2200      	movs	r2, #0
 800114e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001152:	4b24      	ldr	r3, [pc, #144]	; (80011e4 <MX_ADC1_Init+0xdc>)
 8001154:	2200      	movs	r2, #0
 8001156:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001158:	4b22      	ldr	r3, [pc, #136]	; (80011e4 <MX_ADC1_Init+0xdc>)
 800115a:	2201      	movs	r2, #1
 800115c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800115e:	4b21      	ldr	r3, [pc, #132]	; (80011e4 <MX_ADC1_Init+0xdc>)
 8001160:	2200      	movs	r2, #0
 8001162:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001164:	4b1f      	ldr	r3, [pc, #124]	; (80011e4 <MX_ADC1_Init+0xdc>)
 8001166:	2201      	movs	r2, #1
 8001168:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800116a:	4b1e      	ldr	r3, [pc, #120]	; (80011e4 <MX_ADC1_Init+0xdc>)
 800116c:	2200      	movs	r2, #0
 800116e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001172:	4b1c      	ldr	r3, [pc, #112]	; (80011e4 <MX_ADC1_Init+0xdc>)
 8001174:	2204      	movs	r2, #4
 8001176:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001178:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <MX_ADC1_Init+0xdc>)
 800117a:	2200      	movs	r2, #0
 800117c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800117e:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <MX_ADC1_Init+0xdc>)
 8001180:	2200      	movs	r2, #0
 8001182:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001184:	4817      	ldr	r0, [pc, #92]	; (80011e4 <MX_ADC1_Init+0xdc>)
 8001186:	f001 ff0f 	bl	8002fa8 <HAL_ADC_Init>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001190:	f000 ffce 	bl	8002130 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001194:	2300      	movs	r3, #0
 8001196:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001198:	f107 031c 	add.w	r3, r7, #28
 800119c:	4619      	mov	r1, r3
 800119e:	4811      	ldr	r0, [pc, #68]	; (80011e4 <MX_ADC1_Init+0xdc>)
 80011a0:	f003 fb26 	bl	80047f0 <HAL_ADCEx_MultiModeConfigChannel>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80011aa:	f000 ffc1 	bl	8002130 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80011ae:	2304      	movs	r3, #4
 80011b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011b2:	2301      	movs	r3, #1
 80011b4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES_5;
 80011ba:	2302      	movs	r3, #2
 80011bc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011c6:	1d3b      	adds	r3, r7, #4
 80011c8:	4619      	mov	r1, r3
 80011ca:	4806      	ldr	r0, [pc, #24]	; (80011e4 <MX_ADC1_Init+0xdc>)
 80011cc:	f003 f826 	bl	800421c <HAL_ADC_ConfigChannel>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80011d6:	f000 ffab 	bl	8002130 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011da:	bf00      	nop
 80011dc:	3728      	adds	r7, #40	; 0x28
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	2000008c 	.word	0x2000008c

080011e8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ee:	463b      	mov	r3, r7
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
 80011fc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80011fe:	4b43      	ldr	r3, [pc, #268]	; (800130c <MX_ADC2_Init+0x124>)
 8001200:	4a43      	ldr	r2, [pc, #268]	; (8001310 <MX_ADC2_Init+0x128>)
 8001202:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001204:	4b41      	ldr	r3, [pc, #260]	; (800130c <MX_ADC2_Init+0x124>)
 8001206:	2200      	movs	r2, #0
 8001208:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800120a:	4b40      	ldr	r3, [pc, #256]	; (800130c <MX_ADC2_Init+0x124>)
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001210:	4b3e      	ldr	r3, [pc, #248]	; (800130c <MX_ADC2_Init+0x124>)
 8001212:	2201      	movs	r2, #1
 8001214:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001216:	4b3d      	ldr	r3, [pc, #244]	; (800130c <MX_ADC2_Init+0x124>)
 8001218:	2201      	movs	r2, #1
 800121a:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800121c:	4b3b      	ldr	r3, [pc, #236]	; (800130c <MX_ADC2_Init+0x124>)
 800121e:	2200      	movs	r2, #0
 8001220:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001224:	4b39      	ldr	r3, [pc, #228]	; (800130c <MX_ADC2_Init+0x124>)
 8001226:	2200      	movs	r2, #0
 8001228:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800122a:	4b38      	ldr	r3, [pc, #224]	; (800130c <MX_ADC2_Init+0x124>)
 800122c:	2201      	movs	r2, #1
 800122e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001230:	4b36      	ldr	r3, [pc, #216]	; (800130c <MX_ADC2_Init+0x124>)
 8001232:	2200      	movs	r2, #0
 8001234:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 5;
 8001236:	4b35      	ldr	r3, [pc, #212]	; (800130c <MX_ADC2_Init+0x124>)
 8001238:	2205      	movs	r2, #5
 800123a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800123c:	4b33      	ldr	r3, [pc, #204]	; (800130c <MX_ADC2_Init+0x124>)
 800123e:	2200      	movs	r2, #0
 8001240:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001244:	4b31      	ldr	r3, [pc, #196]	; (800130c <MX_ADC2_Init+0x124>)
 8001246:	2204      	movs	r2, #4
 8001248:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800124a:	4b30      	ldr	r3, [pc, #192]	; (800130c <MX_ADC2_Init+0x124>)
 800124c:	2200      	movs	r2, #0
 800124e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001250:	4b2e      	ldr	r3, [pc, #184]	; (800130c <MX_ADC2_Init+0x124>)
 8001252:	2200      	movs	r2, #0
 8001254:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001256:	482d      	ldr	r0, [pc, #180]	; (800130c <MX_ADC2_Init+0x124>)
 8001258:	f001 fea6 	bl	8002fa8 <HAL_ADC_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8001262:	f000 ff65 	bl	8002130 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001266:	2301      	movs	r3, #1
 8001268:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800126a:	2301      	movs	r3, #1
 800126c:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES_5;
 8001272:	2302      	movs	r3, #2
 8001274:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001276:	2300      	movs	r3, #0
 8001278:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800127e:	463b      	mov	r3, r7
 8001280:	4619      	mov	r1, r3
 8001282:	4822      	ldr	r0, [pc, #136]	; (800130c <MX_ADC2_Init+0x124>)
 8001284:	f002 ffca 	bl	800421c <HAL_ADC_ConfigChannel>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 800128e:	f000 ff4f 	bl	8002130 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001292:	2302      	movs	r3, #2
 8001294:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001296:	2302      	movs	r3, #2
 8001298:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800129a:	463b      	mov	r3, r7
 800129c:	4619      	mov	r1, r3
 800129e:	481b      	ldr	r0, [pc, #108]	; (800130c <MX_ADC2_Init+0x124>)
 80012a0:	f002 ffbc 	bl	800421c <HAL_ADC_ConfigChannel>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_ADC2_Init+0xc6>
  {
    Error_Handler();
 80012aa:	f000 ff41 	bl	8002130 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80012ae:	2303      	movs	r3, #3
 80012b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80012b2:	2303      	movs	r3, #3
 80012b4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80012b6:	463b      	mov	r3, r7
 80012b8:	4619      	mov	r1, r3
 80012ba:	4814      	ldr	r0, [pc, #80]	; (800130c <MX_ADC2_Init+0x124>)
 80012bc:	f002 ffae 	bl	800421c <HAL_ADC_ConfigChannel>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_ADC2_Init+0xe2>
  {
    Error_Handler();
 80012c6:	f000 ff33 	bl	8002130 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80012ca:	2304      	movs	r3, #4
 80012cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80012ce:	2304      	movs	r3, #4
 80012d0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80012d2:	463b      	mov	r3, r7
 80012d4:	4619      	mov	r1, r3
 80012d6:	480d      	ldr	r0, [pc, #52]	; (800130c <MX_ADC2_Init+0x124>)
 80012d8:	f002 ffa0 	bl	800421c <HAL_ADC_ConfigChannel>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_ADC2_Init+0xfe>
  {
    Error_Handler();
 80012e2:	f000 ff25 	bl	8002130 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80012e6:	230c      	movs	r3, #12
 80012e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80012ea:	2305      	movs	r3, #5
 80012ec:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80012ee:	463b      	mov	r3, r7
 80012f0:	4619      	mov	r1, r3
 80012f2:	4806      	ldr	r0, [pc, #24]	; (800130c <MX_ADC2_Init+0x124>)
 80012f4:	f002 ff92 	bl	800421c <HAL_ADC_ConfigChannel>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_ADC2_Init+0x11a>
  {
    Error_Handler();
 80012fe:	f000 ff17 	bl	8002130 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001302:	bf00      	nop
 8001304:	3718      	adds	r7, #24
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	200000dc 	.word	0x200000dc
 8001310:	50000100 	.word	0x50000100

08001314 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08a      	sub	sp, #40	; 0x28
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800131a:	f107 031c 	add.w	r3, r7, #28
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001326:	1d3b      	adds	r3, r7, #4
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	60da      	str	r2, [r3, #12]
 8001332:	611a      	str	r2, [r3, #16]
 8001334:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001336:	4b2d      	ldr	r3, [pc, #180]	; (80013ec <MX_ADC3_Init+0xd8>)
 8001338:	4a2d      	ldr	r2, [pc, #180]	; (80013f0 <MX_ADC3_Init+0xdc>)
 800133a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800133c:	4b2b      	ldr	r3, [pc, #172]	; (80013ec <MX_ADC3_Init+0xd8>)
 800133e:	2200      	movs	r2, #0
 8001340:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001342:	4b2a      	ldr	r3, [pc, #168]	; (80013ec <MX_ADC3_Init+0xd8>)
 8001344:	2200      	movs	r2, #0
 8001346:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001348:	4b28      	ldr	r3, [pc, #160]	; (80013ec <MX_ADC3_Init+0xd8>)
 800134a:	2200      	movs	r2, #0
 800134c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800134e:	4b27      	ldr	r3, [pc, #156]	; (80013ec <MX_ADC3_Init+0xd8>)
 8001350:	2200      	movs	r2, #0
 8001352:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001354:	4b25      	ldr	r3, [pc, #148]	; (80013ec <MX_ADC3_Init+0xd8>)
 8001356:	2200      	movs	r2, #0
 8001358:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800135c:	4b23      	ldr	r3, [pc, #140]	; (80013ec <MX_ADC3_Init+0xd8>)
 800135e:	2200      	movs	r2, #0
 8001360:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001362:	4b22      	ldr	r3, [pc, #136]	; (80013ec <MX_ADC3_Init+0xd8>)
 8001364:	2201      	movs	r2, #1
 8001366:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001368:	4b20      	ldr	r3, [pc, #128]	; (80013ec <MX_ADC3_Init+0xd8>)
 800136a:	2200      	movs	r2, #0
 800136c:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800136e:	4b1f      	ldr	r3, [pc, #124]	; (80013ec <MX_ADC3_Init+0xd8>)
 8001370:	2201      	movs	r2, #1
 8001372:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001374:	4b1d      	ldr	r3, [pc, #116]	; (80013ec <MX_ADC3_Init+0xd8>)
 8001376:	2200      	movs	r2, #0
 8001378:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800137c:	4b1b      	ldr	r3, [pc, #108]	; (80013ec <MX_ADC3_Init+0xd8>)
 800137e:	2204      	movs	r2, #4
 8001380:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001382:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <MX_ADC3_Init+0xd8>)
 8001384:	2200      	movs	r2, #0
 8001386:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001388:	4b18      	ldr	r3, [pc, #96]	; (80013ec <MX_ADC3_Init+0xd8>)
 800138a:	2200      	movs	r2, #0
 800138c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800138e:	4817      	ldr	r0, [pc, #92]	; (80013ec <MX_ADC3_Init+0xd8>)
 8001390:	f001 fe0a 	bl	8002fa8 <HAL_ADC_Init>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 800139a:	f000 fec9 	bl	8002130 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80013a2:	f107 031c 	add.w	r3, r7, #28
 80013a6:	4619      	mov	r1, r3
 80013a8:	4810      	ldr	r0, [pc, #64]	; (80013ec <MX_ADC3_Init+0xd8>)
 80013aa:	f003 fa21 	bl	80047f0 <HAL_ADCEx_MultiModeConfigChannel>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 80013b4:	f000 febc 	bl	8002130 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80013b8:	2301      	movs	r3, #1
 80013ba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013bc:	2301      	movs	r3, #1
 80013be:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013c0:	2300      	movs	r3, #0
 80013c2:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES_5;
 80013c4:	2302      	movs	r3, #2
 80013c6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	4619      	mov	r1, r3
 80013d4:	4805      	ldr	r0, [pc, #20]	; (80013ec <MX_ADC3_Init+0xd8>)
 80013d6:	f002 ff21 	bl	800421c <HAL_ADC_ConfigChannel>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 80013e0:	f000 fea6 	bl	8002130 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80013e4:	bf00      	nop
 80013e6:	3728      	adds	r7, #40	; 0x28
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	2000012c 	.word	0x2000012c
 80013f0:	50000400 	.word	0x50000400

080013f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013f8:	4b1b      	ldr	r3, [pc, #108]	; (8001468 <MX_I2C1_Init+0x74>)
 80013fa:	4a1c      	ldr	r2, [pc, #112]	; (800146c <MX_I2C1_Init+0x78>)
 80013fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80013fe:	4b1a      	ldr	r3, [pc, #104]	; (8001468 <MX_I2C1_Init+0x74>)
 8001400:	4a1b      	ldr	r2, [pc, #108]	; (8001470 <MX_I2C1_Init+0x7c>)
 8001402:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 36;
 8001404:	4b18      	ldr	r3, [pc, #96]	; (8001468 <MX_I2C1_Init+0x74>)
 8001406:	2224      	movs	r2, #36	; 0x24
 8001408:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800140a:	4b17      	ldr	r3, [pc, #92]	; (8001468 <MX_I2C1_Init+0x74>)
 800140c:	2201      	movs	r2, #1
 800140e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001410:	4b15      	ldr	r3, [pc, #84]	; (8001468 <MX_I2C1_Init+0x74>)
 8001412:	2200      	movs	r2, #0
 8001414:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001416:	4b14      	ldr	r3, [pc, #80]	; (8001468 <MX_I2C1_Init+0x74>)
 8001418:	2200      	movs	r2, #0
 800141a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800141c:	4b12      	ldr	r3, [pc, #72]	; (8001468 <MX_I2C1_Init+0x74>)
 800141e:	2200      	movs	r2, #0
 8001420:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001422:	4b11      	ldr	r3, [pc, #68]	; (8001468 <MX_I2C1_Init+0x74>)
 8001424:	2200      	movs	r2, #0
 8001426:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001428:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <MX_I2C1_Init+0x74>)
 800142a:	2200      	movs	r2, #0
 800142c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800142e:	480e      	ldr	r0, [pc, #56]	; (8001468 <MX_I2C1_Init+0x74>)
 8001430:	f004 f9da 	bl	80057e8 <HAL_I2C_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800143a:	f000 fe79 	bl	8002130 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800143e:	2100      	movs	r1, #0
 8001440:	4809      	ldr	r0, [pc, #36]	; (8001468 <MX_I2C1_Init+0x74>)
 8001442:	f005 fbe7 	bl	8006c14 <HAL_I2CEx_ConfigAnalogFilter>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800144c:	f000 fe70 	bl	8002130 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001450:	2100      	movs	r1, #0
 8001452:	4805      	ldr	r0, [pc, #20]	; (8001468 <MX_I2C1_Init+0x74>)
 8001454:	f005 fc29 	bl	8006caa <HAL_I2CEx_ConfigDigitalFilter>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800145e:	f000 fe67 	bl	8002130 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	200001c0 	.word	0x200001c0
 800146c:	40005400 	.word	0x40005400
 8001470:	2000090e 	.word	0x2000090e

08001474 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001488:	2300      	movs	r3, #0
 800148a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800148c:	4b24      	ldr	r3, [pc, #144]	; (8001520 <MX_RTC_Init+0xac>)
 800148e:	4a25      	ldr	r2, [pc, #148]	; (8001524 <MX_RTC_Init+0xb0>)
 8001490:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001492:	4b23      	ldr	r3, [pc, #140]	; (8001520 <MX_RTC_Init+0xac>)
 8001494:	2200      	movs	r2, #0
 8001496:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001498:	4b21      	ldr	r3, [pc, #132]	; (8001520 <MX_RTC_Init+0xac>)
 800149a:	227f      	movs	r2, #127	; 0x7f
 800149c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 311;
 800149e:	4b20      	ldr	r3, [pc, #128]	; (8001520 <MX_RTC_Init+0xac>)
 80014a0:	f240 1237 	movw	r2, #311	; 0x137
 80014a4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80014a6:	4b1e      	ldr	r3, [pc, #120]	; (8001520 <MX_RTC_Init+0xac>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80014ac:	4b1c      	ldr	r3, [pc, #112]	; (8001520 <MX_RTC_Init+0xac>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80014b2:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <MX_RTC_Init+0xac>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80014b8:	4819      	ldr	r0, [pc, #100]	; (8001520 <MX_RTC_Init+0xac>)
 80014ba:	f007 f867 	bl	800858c <HAL_RTC_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 80014c4:	f000 fe34 	bl	8002130 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x9;
 80014c8:	2309      	movs	r3, #9
 80014ca:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80014cc:	2300      	movs	r3, #0
 80014ce:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80014d0:	2300      	movs	r3, #0
 80014d2:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80014d4:	2300      	movs	r3, #0
 80014d6:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80014dc:	1d3b      	adds	r3, r7, #4
 80014de:	2201      	movs	r2, #1
 80014e0:	4619      	mov	r1, r3
 80014e2:	480f      	ldr	r0, [pc, #60]	; (8001520 <MX_RTC_Init+0xac>)
 80014e4:	f007 f8d5 	bl	8008692 <HAL_RTC_SetTime>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 80014ee:	f000 fe1f 	bl	8002130 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80014f2:	2301      	movs	r3, #1
 80014f4:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JUNE;
 80014f6:	2306      	movs	r3, #6
 80014f8:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80014fa:	2301      	movs	r3, #1
 80014fc:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80014fe:	2300      	movs	r3, #0
 8001500:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001502:	463b      	mov	r3, r7
 8001504:	2201      	movs	r2, #1
 8001506:	4619      	mov	r1, r3
 8001508:	4805      	ldr	r0, [pc, #20]	; (8001520 <MX_RTC_Init+0xac>)
 800150a:	f007 f9ba 	bl	8008882 <HAL_RTC_SetDate>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8001514:	f000 fe0c 	bl	8002130 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001518:	bf00      	nop
 800151a:	3718      	adds	r7, #24
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000214 	.word	0x20000214
 8001524:	40002800 	.word	0x40002800

08001528 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b09a      	sub	sp, #104	; 0x68
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800152e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800153c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001548:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
 8001558:	615a      	str	r2, [r3, #20]
 800155a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800155c:	1d3b      	adds	r3, r7, #4
 800155e:	222c      	movs	r2, #44	; 0x2c
 8001560:	2100      	movs	r1, #0
 8001562:	4618      	mov	r0, r3
 8001564:	f00a fd3e 	bl	800bfe4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001568:	4b4a      	ldr	r3, [pc, #296]	; (8001694 <MX_TIM1_Init+0x16c>)
 800156a:	4a4b      	ldr	r2, [pc, #300]	; (8001698 <MX_TIM1_Init+0x170>)
 800156c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800156e:	4b49      	ldr	r3, [pc, #292]	; (8001694 <MX_TIM1_Init+0x16c>)
 8001570:	2200      	movs	r2, #0
 8001572:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001574:	4b47      	ldr	r3, [pc, #284]	; (8001694 <MX_TIM1_Init+0x16c>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 800157a:	4b46      	ldr	r3, [pc, #280]	; (8001694 <MX_TIM1_Init+0x16c>)
 800157c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001580:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001582:	4b44      	ldr	r3, [pc, #272]	; (8001694 <MX_TIM1_Init+0x16c>)
 8001584:	2200      	movs	r2, #0
 8001586:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001588:	4b42      	ldr	r3, [pc, #264]	; (8001694 <MX_TIM1_Init+0x16c>)
 800158a:	2200      	movs	r2, #0
 800158c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800158e:	4b41      	ldr	r3, [pc, #260]	; (8001694 <MX_TIM1_Init+0x16c>)
 8001590:	2280      	movs	r2, #128	; 0x80
 8001592:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001594:	483f      	ldr	r0, [pc, #252]	; (8001694 <MX_TIM1_Init+0x16c>)
 8001596:	f007 fb05 	bl	8008ba4 <HAL_TIM_Base_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80015a0:	f000 fdc6 	bl	8002130 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015a8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80015ae:	4619      	mov	r1, r3
 80015b0:	4838      	ldr	r0, [pc, #224]	; (8001694 <MX_TIM1_Init+0x16c>)
 80015b2:	f008 f9b9 	bl	8009928 <HAL_TIM_ConfigClockSource>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80015bc:	f000 fdb8 	bl	8002130 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015c0:	4834      	ldr	r0, [pc, #208]	; (8001694 <MX_TIM1_Init+0x16c>)
 80015c2:	f007 fb46 	bl	8008c52 <HAL_TIM_PWM_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80015cc:	f000 fdb0 	bl	8002130 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015d0:	2300      	movs	r3, #0
 80015d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015d4:	2300      	movs	r3, #0
 80015d6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d8:	2300      	movs	r3, #0
 80015da:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015e0:	4619      	mov	r1, r3
 80015e2:	482c      	ldr	r0, [pc, #176]	; (8001694 <MX_TIM1_Init+0x16c>)
 80015e4:	f009 f92c 	bl	800a840 <HAL_TIMEx_MasterConfigSynchronization>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80015ee:	f000 fd9f 	bl	8002130 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015f2:	2360      	movs	r3, #96	; 0x60
 80015f4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1000;
 80015f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015fa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015fc:	2300      	movs	r3, #0
 80015fe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001600:	2300      	movs	r3, #0
 8001602:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001604:	2304      	movs	r3, #4
 8001606:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001608:	2300      	movs	r3, #0
 800160a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800160c:	2300      	movs	r3, #0
 800160e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001610:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001614:	2200      	movs	r2, #0
 8001616:	4619      	mov	r1, r3
 8001618:	481e      	ldr	r0, [pc, #120]	; (8001694 <MX_TIM1_Init+0x16c>)
 800161a:	f008 f871 	bl	8009700 <HAL_TIM_PWM_ConfigChannel>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001624:	f000 fd84 	bl	8002130 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001628:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800162c:	2204      	movs	r2, #4
 800162e:	4619      	mov	r1, r3
 8001630:	4818      	ldr	r0, [pc, #96]	; (8001694 <MX_TIM1_Init+0x16c>)
 8001632:	f008 f865 	bl	8009700 <HAL_TIM_PWM_ConfigChannel>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 800163c:	f000 fd78 	bl	8002130 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001640:	2300      	movs	r3, #0
 8001642:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001644:	2300      	movs	r3, #0
 8001646:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001648:	2300      	movs	r3, #0
 800164a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 100;
 800164c:	2364      	movs	r3, #100	; 0x64
 800164e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001654:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001658:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800165a:	2300      	movs	r3, #0
 800165c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800165e:	2300      	movs	r3, #0
 8001660:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001662:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800166c:	2300      	movs	r3, #0
 800166e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001670:	1d3b      	adds	r3, r7, #4
 8001672:	4619      	mov	r1, r3
 8001674:	4807      	ldr	r0, [pc, #28]	; (8001694 <MX_TIM1_Init+0x16c>)
 8001676:	f009 f963 	bl	800a940 <HAL_TIMEx_ConfigBreakDeadTime>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 8001680:	f000 fd56 	bl	8002130 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001684:	4803      	ldr	r0, [pc, #12]	; (8001694 <MX_TIM1_Init+0x16c>)
 8001686:	f001 f935 	bl	80028f4 <HAL_TIM_MspPostInit>

}
 800168a:	bf00      	nop
 800168c:	3768      	adds	r7, #104	; 0x68
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000234 	.word	0x20000234
 8001698:	40012c00 	.word	0x40012c00

0800169c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08c      	sub	sp, #48	; 0x30
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016a2:	f107 0320 	add.w	r3, r7, #32
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	605a      	str	r2, [r3, #4]
 80016ac:	609a      	str	r2, [r3, #8]
 80016ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80016bc:	1d3b      	adds	r3, r7, #4
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]
 80016c4:	609a      	str	r2, [r3, #8]
 80016c6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016c8:	4b33      	ldr	r3, [pc, #204]	; (8001798 <MX_TIM2_Init+0xfc>)
 80016ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80016d0:	4b31      	ldr	r3, [pc, #196]	; (8001798 <MX_TIM2_Init+0xfc>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d6:	4b30      	ldr	r3, [pc, #192]	; (8001798 <MX_TIM2_Init+0xfc>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64000000;
 80016dc:	4b2e      	ldr	r3, [pc, #184]	; (8001798 <MX_TIM2_Init+0xfc>)
 80016de:	4a2f      	ldr	r2, [pc, #188]	; (800179c <MX_TIM2_Init+0x100>)
 80016e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e2:	4b2d      	ldr	r3, [pc, #180]	; (8001798 <MX_TIM2_Init+0xfc>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e8:	4b2b      	ldr	r3, [pc, #172]	; (8001798 <MX_TIM2_Init+0xfc>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016ee:	482a      	ldr	r0, [pc, #168]	; (8001798 <MX_TIM2_Init+0xfc>)
 80016f0:	f007 fa58 	bl	8008ba4 <HAL_TIM_Base_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80016fa:	f000 fd19 	bl	8002130 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001702:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001704:	f107 0320 	add.w	r3, r7, #32
 8001708:	4619      	mov	r1, r3
 800170a:	4823      	ldr	r0, [pc, #140]	; (8001798 <MX_TIM2_Init+0xfc>)
 800170c:	f008 f90c 	bl	8009928 <HAL_TIM_ConfigClockSource>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001716:	f000 fd0b 	bl	8002130 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800171a:	481f      	ldr	r0, [pc, #124]	; (8001798 <MX_TIM2_Init+0xfc>)
 800171c:	f007 fc90 	bl	8009040 <HAL_TIM_IC_Init>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001726:	f000 fd03 	bl	8002130 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800172a:	2300      	movs	r3, #0
 800172c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800172e:	2300      	movs	r3, #0
 8001730:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001732:	f107 0314 	add.w	r3, r7, #20
 8001736:	4619      	mov	r1, r3
 8001738:	4817      	ldr	r0, [pc, #92]	; (8001798 <MX_TIM2_Init+0xfc>)
 800173a:	f009 f881 	bl	800a840 <HAL_TIMEx_MasterConfigSynchronization>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001744:	f000 fcf4 	bl	8002130 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001748:	2300      	movs	r3, #0
 800174a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800174c:	2301      	movs	r3, #1
 800174e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001750:	2300      	movs	r3, #0
 8001752:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 12;
 8001754:	230c      	movs	r3, #12
 8001756:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001758:	1d3b      	adds	r3, r7, #4
 800175a:	2200      	movs	r2, #0
 800175c:	4619      	mov	r1, r3
 800175e:	480e      	ldr	r0, [pc, #56]	; (8001798 <MX_TIM2_Init+0xfc>)
 8001760:	f007 ff31 	bl	80095c6 <HAL_TIM_IC_ConfigChannel>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800176a:	f000 fce1 	bl	8002130 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800176e:	2302      	movs	r3, #2
 8001770:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001772:	2302      	movs	r3, #2
 8001774:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001776:	2300      	movs	r3, #0
 8001778:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800177a:	1d3b      	adds	r3, r7, #4
 800177c:	2204      	movs	r2, #4
 800177e:	4619      	mov	r1, r3
 8001780:	4805      	ldr	r0, [pc, #20]	; (8001798 <MX_TIM2_Init+0xfc>)
 8001782:	f007 ff20 	bl	80095c6 <HAL_TIM_IC_ConfigChannel>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_TIM2_Init+0xf4>
  {
    Error_Handler();
 800178c:	f000 fcd0 	bl	8002130 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001790:	bf00      	nop
 8001792:	3730      	adds	r7, #48	; 0x30
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20000280 	.word	0x20000280
 800179c:	03d09000 	.word	0x03d09000

080017a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b088      	sub	sp, #32
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017a6:	f107 0310 	add.w	r3, r7, #16
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	609a      	str	r2, [r3, #8]
 80017b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b4:	1d3b      	adds	r3, r7, #4
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]
 80017bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017be:	4b1d      	ldr	r3, [pc, #116]	; (8001834 <MX_TIM3_Init+0x94>)
 80017c0:	4a1d      	ldr	r2, [pc, #116]	; (8001838 <MX_TIM3_Init+0x98>)
 80017c2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80017c4:	4b1b      	ldr	r3, [pc, #108]	; (8001834 <MX_TIM3_Init+0x94>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ca:	4b1a      	ldr	r3, [pc, #104]	; (8001834 <MX_TIM3_Init+0x94>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80017d0:	4b18      	ldr	r3, [pc, #96]	; (8001834 <MX_TIM3_Init+0x94>)
 80017d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d8:	4b16      	ldr	r3, [pc, #88]	; (8001834 <MX_TIM3_Init+0x94>)
 80017da:	2200      	movs	r2, #0
 80017dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017de:	4b15      	ldr	r3, [pc, #84]	; (8001834 <MX_TIM3_Init+0x94>)
 80017e0:	2280      	movs	r2, #128	; 0x80
 80017e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017e4:	4813      	ldr	r0, [pc, #76]	; (8001834 <MX_TIM3_Init+0x94>)
 80017e6:	f007 f9dd 	bl	8008ba4 <HAL_TIM_Base_Init>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80017f0:	f000 fc9e 	bl	8002130 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017fa:	f107 0310 	add.w	r3, r7, #16
 80017fe:	4619      	mov	r1, r3
 8001800:	480c      	ldr	r0, [pc, #48]	; (8001834 <MX_TIM3_Init+0x94>)
 8001802:	f008 f891 	bl	8009928 <HAL_TIM_ConfigClockSource>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800180c:	f000 fc90 	bl	8002130 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001810:	2300      	movs	r3, #0
 8001812:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001814:	2300      	movs	r3, #0
 8001816:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001818:	1d3b      	adds	r3, r7, #4
 800181a:	4619      	mov	r1, r3
 800181c:	4805      	ldr	r0, [pc, #20]	; (8001834 <MX_TIM3_Init+0x94>)
 800181e:	f009 f80f 	bl	800a840 <HAL_TIMEx_MasterConfigSynchronization>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001828:	f000 fc82 	bl	8002130 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800182c:	bf00      	nop
 800182e:	3720      	adds	r7, #32
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	200002cc 	.word	0x200002cc
 8001838:	40000400 	.word	0x40000400

0800183c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b09a      	sub	sp, #104	; 0x68
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001842:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	605a      	str	r2, [r3, #4]
 800184c:	609a      	str	r2, [r3, #8]
 800184e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001850:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800185c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	611a      	str	r2, [r3, #16]
 800186c:	615a      	str	r2, [r3, #20]
 800186e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001870:	1d3b      	adds	r3, r7, #4
 8001872:	222c      	movs	r2, #44	; 0x2c
 8001874:	2100      	movs	r1, #0
 8001876:	4618      	mov	r0, r3
 8001878:	f00a fbb4 	bl	800bfe4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800187c:	4b44      	ldr	r3, [pc, #272]	; (8001990 <MX_TIM8_Init+0x154>)
 800187e:	4a45      	ldr	r2, [pc, #276]	; (8001994 <MX_TIM8_Init+0x158>)
 8001880:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001882:	4b43      	ldr	r3, [pc, #268]	; (8001990 <MX_TIM8_Init+0x154>)
 8001884:	2200      	movs	r2, #0
 8001886:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001888:	4b41      	ldr	r3, [pc, #260]	; (8001990 <MX_TIM8_Init+0x154>)
 800188a:	2200      	movs	r2, #0
 800188c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 2000;
 800188e:	4b40      	ldr	r3, [pc, #256]	; (8001990 <MX_TIM8_Init+0x154>)
 8001890:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001894:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001896:	4b3e      	ldr	r3, [pc, #248]	; (8001990 <MX_TIM8_Init+0x154>)
 8001898:	2200      	movs	r2, #0
 800189a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800189c:	4b3c      	ldr	r3, [pc, #240]	; (8001990 <MX_TIM8_Init+0x154>)
 800189e:	2200      	movs	r2, #0
 80018a0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018a2:	4b3b      	ldr	r3, [pc, #236]	; (8001990 <MX_TIM8_Init+0x154>)
 80018a4:	2280      	movs	r2, #128	; 0x80
 80018a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80018a8:	4839      	ldr	r0, [pc, #228]	; (8001990 <MX_TIM8_Init+0x154>)
 80018aa:	f007 f97b 	bl	8008ba4 <HAL_TIM_Base_Init>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80018b4:	f000 fc3c 	bl	8002130 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018bc:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80018be:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018c2:	4619      	mov	r1, r3
 80018c4:	4832      	ldr	r0, [pc, #200]	; (8001990 <MX_TIM8_Init+0x154>)
 80018c6:	f008 f82f 	bl	8009928 <HAL_TIM_ConfigClockSource>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80018d0:	f000 fc2e 	bl	8002130 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80018d4:	482e      	ldr	r0, [pc, #184]	; (8001990 <MX_TIM8_Init+0x154>)
 80018d6:	f007 f9bc 	bl	8008c52 <HAL_TIM_PWM_Init>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80018e0:	f000 fc26 	bl	8002130 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018e4:	2300      	movs	r3, #0
 80018e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018e8:	2300      	movs	r3, #0
 80018ea:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ec:	2300      	movs	r3, #0
 80018ee:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80018f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018f4:	4619      	mov	r1, r3
 80018f6:	4826      	ldr	r0, [pc, #152]	; (8001990 <MX_TIM8_Init+0x154>)
 80018f8:	f008 ffa2 	bl	800a840 <HAL_TIMEx_MasterConfigSynchronization>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8001902:	f000 fc15 	bl	8002130 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001906:	2360      	movs	r3, #96	; 0x60
 8001908:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1000;
 800190a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800190e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001910:	2300      	movs	r3, #0
 8001912:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001914:	2300      	movs	r3, #0
 8001916:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001918:	2300      	movs	r3, #0
 800191a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800191c:	2300      	movs	r3, #0
 800191e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001920:	2300      	movs	r3, #0
 8001922:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001924:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001928:	2200      	movs	r2, #0
 800192a:	4619      	mov	r1, r3
 800192c:	4818      	ldr	r0, [pc, #96]	; (8001990 <MX_TIM8_Init+0x154>)
 800192e:	f007 fee7 	bl	8009700 <HAL_TIM_PWM_ConfigChannel>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8001938:	f000 fbfa 	bl	8002130 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800193c:	2300      	movs	r3, #0
 800193e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001940:	2300      	movs	r3, #0
 8001942:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001944:	2300      	movs	r3, #0
 8001946:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 100;
 8001948:	2364      	movs	r3, #100	; 0x64
 800194a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001950:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001954:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001956:	2300      	movs	r3, #0
 8001958:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800195a:	2300      	movs	r3, #0
 800195c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800195e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001962:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001964:	2300      	movs	r3, #0
 8001966:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001968:	2300      	movs	r3, #0
 800196a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800196c:	1d3b      	adds	r3, r7, #4
 800196e:	4619      	mov	r1, r3
 8001970:	4807      	ldr	r0, [pc, #28]	; (8001990 <MX_TIM8_Init+0x154>)
 8001972:	f008 ffe5 	bl	800a940 <HAL_TIMEx_ConfigBreakDeadTime>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_TIM8_Init+0x144>
  {
    Error_Handler();
 800197c:	f000 fbd8 	bl	8002130 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001980:	4803      	ldr	r0, [pc, #12]	; (8001990 <MX_TIM8_Init+0x154>)
 8001982:	f000 ffb7 	bl	80028f4 <HAL_TIM_MspPostInit>

}
 8001986:	bf00      	nop
 8001988:	3768      	adds	r7, #104	; 0x68
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20000318 	.word	0x20000318
 8001994:	40013400 	.word	0x40013400

08001998 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b09a      	sub	sp, #104	; 0x68
 800199c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800199e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	605a      	str	r2, [r3, #4]
 80019a8:	609a      	str	r2, [r3, #8]
 80019aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	611a      	str	r2, [r3, #16]
 80019c8:	615a      	str	r2, [r3, #20]
 80019ca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019cc:	1d3b      	adds	r3, r7, #4
 80019ce:	222c      	movs	r2, #44	; 0x2c
 80019d0:	2100      	movs	r1, #0
 80019d2:	4618      	mov	r0, r3
 80019d4:	f00a fb06 	bl	800bfe4 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80019d8:	4b3f      	ldr	r3, [pc, #252]	; (8001ad8 <MX_TIM15_Init+0x140>)
 80019da:	4a40      	ldr	r2, [pc, #256]	; (8001adc <MX_TIM15_Init+0x144>)
 80019dc:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80019de:	4b3e      	ldr	r3, [pc, #248]	; (8001ad8 <MX_TIM15_Init+0x140>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e4:	4b3c      	ldr	r3, [pc, #240]	; (8001ad8 <MX_TIM15_Init+0x140>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 2000;
 80019ea:	4b3b      	ldr	r3, [pc, #236]	; (8001ad8 <MX_TIM15_Init+0x140>)
 80019ec:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80019f0:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f2:	4b39      	ldr	r3, [pc, #228]	; (8001ad8 <MX_TIM15_Init+0x140>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80019f8:	4b37      	ldr	r3, [pc, #220]	; (8001ad8 <MX_TIM15_Init+0x140>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019fe:	4b36      	ldr	r3, [pc, #216]	; (8001ad8 <MX_TIM15_Init+0x140>)
 8001a00:	2280      	movs	r2, #128	; 0x80
 8001a02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001a04:	4834      	ldr	r0, [pc, #208]	; (8001ad8 <MX_TIM15_Init+0x140>)
 8001a06:	f007 f8cd 	bl	8008ba4 <HAL_TIM_Base_Init>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8001a10:	f000 fb8e 	bl	8002130 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a18:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001a1a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a1e:	4619      	mov	r1, r3
 8001a20:	482d      	ldr	r0, [pc, #180]	; (8001ad8 <MX_TIM15_Init+0x140>)
 8001a22:	f007 ff81 	bl	8009928 <HAL_TIM_ConfigClockSource>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8001a2c:	f000 fb80 	bl	8002130 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001a30:	4829      	ldr	r0, [pc, #164]	; (8001ad8 <MX_TIM15_Init+0x140>)
 8001a32:	f007 f90e 	bl	8008c52 <HAL_TIM_PWM_Init>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8001a3c:	f000 fb78 	bl	8002130 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a40:	2300      	movs	r3, #0
 8001a42:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a44:	2300      	movs	r3, #0
 8001a46:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001a48:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4822      	ldr	r0, [pc, #136]	; (8001ad8 <MX_TIM15_Init+0x140>)
 8001a50:	f008 fef6 	bl	800a840 <HAL_TIMEx_MasterConfigSynchronization>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8001a5a:	f000 fb69 	bl	8002130 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a5e:	2360      	movs	r3, #96	; 0x60
 8001a60:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1000;
 8001a62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a66:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a70:	2300      	movs	r3, #0
 8001a72:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a74:	2300      	movs	r3, #0
 8001a76:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a80:	2200      	movs	r2, #0
 8001a82:	4619      	mov	r1, r3
 8001a84:	4814      	ldr	r0, [pc, #80]	; (8001ad8 <MX_TIM15_Init+0x140>)
 8001a86:	f007 fe3b 	bl	8009700 <HAL_TIM_PWM_ConfigChannel>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8001a90:	f000 fb4e 	bl	8002130 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a94:	2300      	movs	r3, #0
 8001a96:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 100;
 8001aa0:	2364      	movs	r3, #100	; 0x64
 8001aa2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001aa8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001ab6:	1d3b      	adds	r3, r7, #4
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4807      	ldr	r0, [pc, #28]	; (8001ad8 <MX_TIM15_Init+0x140>)
 8001abc:	f008 ff40 	bl	800a940 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8001ac6:	f000 fb33 	bl	8002130 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001aca:	4803      	ldr	r0, [pc, #12]	; (8001ad8 <MX_TIM15_Init+0x140>)
 8001acc:	f000 ff12 	bl	80028f4 <HAL_TIM_MspPostInit>

}
 8001ad0:	bf00      	nop
 8001ad2:	3768      	adds	r7, #104	; 0x68
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20000364 	.word	0x20000364
 8001adc:	40014000 	.word	0x40014000

08001ae0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ae4:	4b14      	ldr	r3, [pc, #80]	; (8001b38 <MX_USART1_UART_Init+0x58>)
 8001ae6:	4a15      	ldr	r2, [pc, #84]	; (8001b3c <MX_USART1_UART_Init+0x5c>)
 8001ae8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001aea:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <MX_USART1_UART_Init+0x58>)
 8001aec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001af0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001af2:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <MX_USART1_UART_Init+0x58>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001af8:	4b0f      	ldr	r3, [pc, #60]	; (8001b38 <MX_USART1_UART_Init+0x58>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001afe:	4b0e      	ldr	r3, [pc, #56]	; (8001b38 <MX_USART1_UART_Init+0x58>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b04:	4b0c      	ldr	r3, [pc, #48]	; (8001b38 <MX_USART1_UART_Init+0x58>)
 8001b06:	220c      	movs	r2, #12
 8001b08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b0a:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <MX_USART1_UART_Init+0x58>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b10:	4b09      	ldr	r3, [pc, #36]	; (8001b38 <MX_USART1_UART_Init+0x58>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b16:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <MX_USART1_UART_Init+0x58>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b1c:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <MX_USART1_UART_Init+0x58>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b22:	4805      	ldr	r0, [pc, #20]	; (8001b38 <MX_USART1_UART_Init+0x58>)
 8001b24:	f008 ffcd 	bl	800aac2 <HAL_UART_Init>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001b2e:	f000 faff 	bl	8002130 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	200003b0 	.word	0x200003b0
 8001b3c:	40013800 	.word	0x40013800

08001b40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b44:	4b14      	ldr	r3, [pc, #80]	; (8001b98 <MX_USART2_UART_Init+0x58>)
 8001b46:	4a15      	ldr	r2, [pc, #84]	; (8001b9c <MX_USART2_UART_Init+0x5c>)
 8001b48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8001b4a:	4b13      	ldr	r3, [pc, #76]	; (8001b98 <MX_USART2_UART_Init+0x58>)
 8001b4c:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001b50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b52:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <MX_USART2_UART_Init+0x58>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b58:	4b0f      	ldr	r3, [pc, #60]	; (8001b98 <MX_USART2_UART_Init+0x58>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b5e:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <MX_USART2_UART_Init+0x58>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b64:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <MX_USART2_UART_Init+0x58>)
 8001b66:	220c      	movs	r2, #12
 8001b68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <MX_USART2_UART_Init+0x58>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b70:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <MX_USART2_UART_Init+0x58>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b76:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <MX_USART2_UART_Init+0x58>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b7c:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <MX_USART2_UART_Init+0x58>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b82:	4805      	ldr	r0, [pc, #20]	; (8001b98 <MX_USART2_UART_Init+0x58>)
 8001b84:	f008 ff9d 	bl	800aac2 <HAL_UART_Init>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001b8e:	f000 facf 	bl	8002130 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20000438 	.word	0x20000438
 8001b9c:	40004400 	.word	0x40004400

08001ba0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001ba6:	4b1a      	ldr	r3, [pc, #104]	; (8001c10 <MX_DMA_Init+0x70>)
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	4a19      	ldr	r2, [pc, #100]	; (8001c10 <MX_DMA_Init+0x70>)
 8001bac:	f043 0302 	orr.w	r3, r3, #2
 8001bb0:	6153      	str	r3, [r2, #20]
 8001bb2:	4b17      	ldr	r3, [pc, #92]	; (8001c10 <MX_DMA_Init+0x70>)
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	607b      	str	r3, [r7, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bbe:	4b14      	ldr	r3, [pc, #80]	; (8001c10 <MX_DMA_Init+0x70>)
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	4a13      	ldr	r2, [pc, #76]	; (8001c10 <MX_DMA_Init+0x70>)
 8001bc4:	f043 0301 	orr.w	r3, r3, #1
 8001bc8:	6153      	str	r3, [r2, #20]
 8001bca:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <MX_DMA_Init+0x70>)
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	603b      	str	r3, [r7, #0]
 8001bd4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2100      	movs	r1, #0
 8001bda:	2010      	movs	r0, #16
 8001bdc:	f003 f9bb 	bl	8004f56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001be0:	2010      	movs	r0, #16
 8001be2:	f003 f9d4 	bl	8004f8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001be6:	2200      	movs	r2, #0
 8001be8:	2100      	movs	r1, #0
 8001bea:	2011      	movs	r0, #17
 8001bec:	f003 f9b3 	bl	8004f56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001bf0:	2011      	movs	r0, #17
 8001bf2:	f003 f9cc 	bl	8004f8e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	2038      	movs	r0, #56	; 0x38
 8001bfc:	f003 f9ab 	bl	8004f56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8001c00:	2038      	movs	r0, #56	; 0x38
 8001c02:	f003 f9c4 	bl	8004f8e <HAL_NVIC_EnableIRQ>

}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40021000 	.word	0x40021000

08001c14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b08a      	sub	sp, #40	; 0x28
 8001c18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1a:	f107 0314 	add.w	r3, r7, #20
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	605a      	str	r2, [r3, #4]
 8001c24:	609a      	str	r2, [r3, #8]
 8001c26:	60da      	str	r2, [r3, #12]
 8001c28:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c2a:	4b64      	ldr	r3, [pc, #400]	; (8001dbc <MX_GPIO_Init+0x1a8>)
 8001c2c:	695b      	ldr	r3, [r3, #20]
 8001c2e:	4a63      	ldr	r2, [pc, #396]	; (8001dbc <MX_GPIO_Init+0x1a8>)
 8001c30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c34:	6153      	str	r3, [r2, #20]
 8001c36:	4b61      	ldr	r3, [pc, #388]	; (8001dbc <MX_GPIO_Init+0x1a8>)
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c3e:	613b      	str	r3, [r7, #16]
 8001c40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c42:	4b5e      	ldr	r3, [pc, #376]	; (8001dbc <MX_GPIO_Init+0x1a8>)
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	4a5d      	ldr	r2, [pc, #372]	; (8001dbc <MX_GPIO_Init+0x1a8>)
 8001c48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c4c:	6153      	str	r3, [r2, #20]
 8001c4e:	4b5b      	ldr	r3, [pc, #364]	; (8001dbc <MX_GPIO_Init+0x1a8>)
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5a:	4b58      	ldr	r3, [pc, #352]	; (8001dbc <MX_GPIO_Init+0x1a8>)
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	4a57      	ldr	r2, [pc, #348]	; (8001dbc <MX_GPIO_Init+0x1a8>)
 8001c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c64:	6153      	str	r3, [r2, #20]
 8001c66:	4b55      	ldr	r3, [pc, #340]	; (8001dbc <MX_GPIO_Init+0x1a8>)
 8001c68:	695b      	ldr	r3, [r3, #20]
 8001c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6e:	60bb      	str	r3, [r7, #8]
 8001c70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c72:	4b52      	ldr	r3, [pc, #328]	; (8001dbc <MX_GPIO_Init+0x1a8>)
 8001c74:	695b      	ldr	r3, [r3, #20]
 8001c76:	4a51      	ldr	r2, [pc, #324]	; (8001dbc <MX_GPIO_Init+0x1a8>)
 8001c78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c7c:	6153      	str	r3, [r2, #20]
 8001c7e:	4b4f      	ldr	r3, [pc, #316]	; (8001dbc <MX_GPIO_Init+0x1a8>)
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c86:	607b      	str	r3, [r7, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c90:	484b      	ldr	r0, [pc, #300]	; (8001dc0 <MX_GPIO_Init+0x1ac>)
 8001c92:	f003 fd5f 	bl	8005754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 8001c96:	2200      	movs	r2, #0
 8001c98:	2103      	movs	r1, #3
 8001c9a:	484a      	ldr	r0, [pc, #296]	; (8001dc4 <MX_GPIO_Init+0x1b0>)
 8001c9c:	f003 fd5a 	bl	8005754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Port_2_Pin|Port_1_Pin|Port_3_Pin|Port_4_Pin, GPIO_PIN_RESET);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 8001ca6:	4848      	ldr	r0, [pc, #288]	; (8001dc8 <MX_GPIO_Init+0x1b4>)
 8001ca8:	f003 fd54 	bl	8005754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Direct_GPIO_Port, Direct_Pin, GPIO_PIN_RESET);
 8001cac:	2200      	movs	r2, #0
 8001cae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cb6:	f003 fd4d 	bl	8005754 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : START_Pin STOP_Pin */
  GPIO_InitStruct.Pin = START_Pin|STOP_Pin;
 8001cba:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001cbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001cc0:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001cc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cca:	f107 0314 	add.w	r3, r7, #20
 8001cce:	4619      	mov	r1, r3
 8001cd0:	483b      	ldr	r0, [pc, #236]	; (8001dc0 <MX_GPIO_Init+0x1ac>)
 8001cd2:	f003 fbad 	bl	8005430 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_1_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin;
 8001cd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 8001ce8:	f107 0314 	add.w	r3, r7, #20
 8001cec:	4619      	mov	r1, r3
 8001cee:	4834      	ldr	r0, [pc, #208]	; (8001dc0 <MX_GPIO_Init+0x1ac>)
 8001cf0:	f003 fb9e 	bl	8005430 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_2_Pin LED_3_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin|LED_3_Pin;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d00:	2300      	movs	r3, #0
 8001d02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d04:	f107 0314 	add.w	r3, r7, #20
 8001d08:	4619      	mov	r1, r3
 8001d0a:	482e      	ldr	r0, [pc, #184]	; (8001dc4 <MX_GPIO_Init+0x1b0>)
 8001d0c:	f003 fb90 	bl	8005430 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_Pin */
  GPIO_InitStruct.Pin = INT_Pin;
 8001d10:	2302      	movs	r3, #2
 8001d12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001d14:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001d18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8001d1e:	f107 0314 	add.w	r3, r7, #20
 8001d22:	4619      	mov	r1, r3
 8001d24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d28:	f003 fb82 	bl	8005430 <HAL_GPIO_Init>

  /*Configure GPIO pins : Port_2_Pin Port_1_Pin Port_3_Pin Port_4_Pin */
  GPIO_InitStruct.Pin = Port_2_Pin|Port_1_Pin|Port_3_Pin|Port_4_Pin;
 8001d2c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001d30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d32:	2301      	movs	r3, #1
 8001d34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d36:	2300      	movs	r3, #0
 8001d38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d3e:	f107 0314 	add.w	r3, r7, #20
 8001d42:	4619      	mov	r1, r3
 8001d44:	4820      	ldr	r0, [pc, #128]	; (8001dc8 <MX_GPIO_Init+0x1b4>)
 8001d46:	f003 fb73 	bl	8005430 <HAL_GPIO_Init>

  /*Configure GPIO pin : Direct_Pin */
  GPIO_InitStruct.Pin = Direct_Pin;
 8001d4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d50:	2301      	movs	r3, #1
 8001d52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d54:	2300      	movs	r3, #0
 8001d56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Direct_GPIO_Port, &GPIO_InitStruct);
 8001d5c:	f107 0314 	add.w	r3, r7, #20
 8001d60:	4619      	mov	r1, r3
 8001d62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d66:	f003 fb63 	bl	8005430 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001d6a:	2320      	movs	r3, #32
 8001d6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001d6e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001d72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d78:	f107 0314 	add.w	r3, r7, #20
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4812      	ldr	r0, [pc, #72]	; (8001dc8 <MX_GPIO_Init+0x1b4>)
 8001d80:	f003 fb56 	bl	8005430 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001d84:	2200      	movs	r2, #0
 8001d86:	2100      	movs	r1, #0
 8001d88:	2007      	movs	r0, #7
 8001d8a:	f003 f8e4 	bl	8004f56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001d8e:	2007      	movs	r0, #7
 8001d90:	f003 f8fd 	bl	8004f8e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8001d94:	2200      	movs	r2, #0
 8001d96:	2101      	movs	r1, #1
 8001d98:	2017      	movs	r0, #23
 8001d9a:	f003 f8dc 	bl	8004f56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001d9e:	2017      	movs	r0, #23
 8001da0:	f003 f8f5 	bl	8004f8e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8001da4:	2200      	movs	r2, #0
 8001da6:	2103      	movs	r1, #3
 8001da8:	2028      	movs	r0, #40	; 0x28
 8001daa:	f003 f8d4 	bl	8004f56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001dae:	2028      	movs	r0, #40	; 0x28
 8001db0:	f003 f8ed 	bl	8004f8e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001db4:	bf00      	nop
 8001db6:	3728      	adds	r7, #40	; 0x28
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	48000800 	.word	0x48000800
 8001dc4:	48001400 	.word	0x48001400
 8001dc8:	48000400 	.word	0x48000400

08001dcc <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ddc:	d173      	bne.n	8001ec6 <HAL_TIM_IC_CaptureCallback+0xfa>
    {
        if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	7f1b      	ldrb	r3, [r3, #28]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d146      	bne.n	8001e74 <HAL_TIM_IC_CaptureCallback+0xa8>
        {

        //	 TIM3->CNT=0;
        	 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001de6:	2100      	movs	r1, #0
 8001de8:	4839      	ldr	r0, [pc, #228]	; (8001ed0 <HAL_TIM_IC_CaptureCallback+0x104>)
 8001dea:	f007 f893 	bl	8008f14 <HAL_TIM_PWM_Stop>
        	 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001dee:	2104      	movs	r1, #4
 8001df0:	4837      	ldr	r0, [pc, #220]	; (8001ed0 <HAL_TIM_IC_CaptureCallback+0x104>)
 8001df2:	f007 f88f 	bl	8008f14 <HAL_TIM_PWM_Stop>
        	 HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8001df6:	2100      	movs	r1, #0
 8001df8:	4836      	ldr	r0, [pc, #216]	; (8001ed4 <HAL_TIM_IC_CaptureCallback+0x108>)
 8001dfa:	f007 f88b 	bl	8008f14 <HAL_TIM_PWM_Stop>
        	 HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 8001dfe:	2100      	movs	r1, #0
 8001e00:	4835      	ldr	r0, [pc, #212]	; (8001ed8 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001e02:	f007 f887 	bl	8008f14 <HAL_TIM_PWM_Stop>


        	 period = 0;
 8001e06:	4b35      	ldr	r3, [pc, #212]	; (8001edc <HAL_TIM_IC_CaptureCallback+0x110>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]

            TIM2->CNT = 0;
 8001e0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e10:	2200      	movs	r2, #0
 8001e12:	625a      	str	r2, [r3, #36]	; 0x24
            period = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 8001e14:	2100      	movs	r1, #0
 8001e16:	4832      	ldr	r0, [pc, #200]	; (8001ee0 <HAL_TIM_IC_CaptureCallback+0x114>)
 8001e18:	f007 fe50 	bl	8009abc <HAL_TIM_ReadCapturedValue>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	461a      	mov	r2, r3
 8001e20:	4b2e      	ldr	r3, [pc, #184]	; (8001edc <HAL_TIM_IC_CaptureCallback+0x110>)
 8001e22:	601a      	str	r2, [r3, #0]
            pulseWidth = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
 8001e24:	2104      	movs	r1, #4
 8001e26:	482e      	ldr	r0, [pc, #184]	; (8001ee0 <HAL_TIM_IC_CaptureCallback+0x114>)
 8001e28:	f007 fe48 	bl	8009abc <HAL_TIM_ReadCapturedValue>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	4b2c      	ldr	r3, [pc, #176]	; (8001ee4 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001e32:	801a      	strh	r2, [r3, #0]

            rpm= 480000000/period;
 8001e34:	4b29      	ldr	r3, [pc, #164]	; (8001edc <HAL_TIM_IC_CaptureCallback+0x110>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a2b      	ldr	r2, [pc, #172]	; (8001ee8 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001e3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	4b2a      	ldr	r3, [pc, #168]	; (8001eec <HAL_TIM_IC_CaptureCallback+0x120>)
 8001e42:	801a      	strh	r2, [r3, #0]
            f=32000000/period;
 8001e44:	4b25      	ldr	r3, [pc, #148]	; (8001edc <HAL_TIM_IC_CaptureCallback+0x110>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a29      	ldr	r2, [pc, #164]	; (8001ef0 <HAL_TIM_IC_CaptureCallback+0x124>)
 8001e4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	4b28      	ldr	r3, [pc, #160]	; (8001ef4 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001e52:	801a      	strh	r2, [r3, #0]


            HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001e54:	2100      	movs	r1, #0
 8001e56:	481e      	ldr	r0, [pc, #120]	; (8001ed0 <HAL_TIM_IC_CaptureCallback+0x104>)
 8001e58:	f008 fbe0 	bl	800a61c <HAL_TIMEx_PWMN_Start>
            HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001e5c:	2104      	movs	r1, #4
 8001e5e:	481c      	ldr	r0, [pc, #112]	; (8001ed0 <HAL_TIM_IC_CaptureCallback+0x104>)
 8001e60:	f008 fbdc 	bl	800a61c <HAL_TIMEx_PWMN_Start>
            HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
 8001e64:	2100      	movs	r1, #0
 8001e66:	481b      	ldr	r0, [pc, #108]	; (8001ed4 <HAL_TIM_IC_CaptureCallback+0x108>)
 8001e68:	f008 fbd8 	bl	800a61c <HAL_TIMEx_PWMN_Start>
            HAL_TIMEx_PWMN_Start(&htim15, TIM_CHANNEL_1);
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	481a      	ldr	r0, [pc, #104]	; (8001ed8 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001e70:	f008 fbd4 	bl	800a61c <HAL_TIMEx_PWMN_Start>

        }

        if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	7f1b      	ldrb	r3, [r3, #28]
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d124      	bne.n	8001ec6 <HAL_TIM_IC_CaptureCallback+0xfa>
                {

        	//  TIM3->CNT=0;
        	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8001e7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e80:	481d      	ldr	r0, [pc, #116]	; (8001ef8 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001e82:	f003 fc7f 	bl	8005784 <HAL_GPIO_TogglePin>


        	  HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8001e86:	2100      	movs	r1, #0
 8001e88:	4811      	ldr	r0, [pc, #68]	; (8001ed0 <HAL_TIM_IC_CaptureCallback+0x104>)
 8001e8a:	f008 fc7b 	bl	800a784 <HAL_TIMEx_PWMN_Stop>
        	  HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8001e8e:	2104      	movs	r1, #4
 8001e90:	480f      	ldr	r0, [pc, #60]	; (8001ed0 <HAL_TIM_IC_CaptureCallback+0x104>)
 8001e92:	f008 fc77 	bl	800a784 <HAL_TIMEx_PWMN_Stop>
        	  HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_1);
 8001e96:	2100      	movs	r1, #0
 8001e98:	480e      	ldr	r0, [pc, #56]	; (8001ed4 <HAL_TIM_IC_CaptureCallback+0x108>)
 8001e9a:	f008 fc73 	bl	800a784 <HAL_TIMEx_PWMN_Stop>
        	  HAL_TIMEx_PWMN_Stop(&htim15, TIM_CHANNEL_1);
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	480d      	ldr	r0, [pc, #52]	; (8001ed8 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001ea2:	f008 fc6f 	bl	800a784 <HAL_TIMEx_PWMN_Stop>

        	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	4809      	ldr	r0, [pc, #36]	; (8001ed0 <HAL_TIM_IC_CaptureCallback+0x104>)
 8001eaa:	f006 ff33 	bl	8008d14 <HAL_TIM_PWM_Start>
        	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001eae:	2104      	movs	r1, #4
 8001eb0:	4807      	ldr	r0, [pc, #28]	; (8001ed0 <HAL_TIM_IC_CaptureCallback+0x104>)
 8001eb2:	f006 ff2f 	bl	8008d14 <HAL_TIM_PWM_Start>
        	  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	4806      	ldr	r0, [pc, #24]	; (8001ed4 <HAL_TIM_IC_CaptureCallback+0x108>)
 8001eba:	f006 ff2b 	bl	8008d14 <HAL_TIM_PWM_Start>
        	  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	4805      	ldr	r0, [pc, #20]	; (8001ed8 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001ec2:	f006 ff27 	bl	8008d14 <HAL_TIM_PWM_Start>
                                                         }

    }
}
 8001ec6:	bf00      	nop
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20000234 	.word	0x20000234
 8001ed4:	20000318 	.word	0x20000318
 8001ed8:	20000364 	.word	0x20000364
 8001edc:	20000560 	.word	0x20000560
 8001ee0:	20000280 	.word	0x20000280
 8001ee4:	20000564 	.word	0x20000564
 8001ee8:	1c9c3800 	.word	0x1c9c3800
 8001eec:	20000566 	.word	0x20000566
 8001ef0:	01e84800 	.word	0x01e84800
 8001ef4:	20000568 	.word	0x20000568
 8001ef8:	48000800 	.word	0x48000800

08001efc <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	80fb      	strh	r3, [r7, #6]
   if(GPIO_Pin == GPIO_PIN_13) // если прерывание поступило от ножки PC13
 8001f06:	88fb      	ldrh	r3, [r7, #6]
 8001f08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f0c:	d149      	bne.n	8001fa2 <HAL_GPIO_EXTI_Callback+0xa6>
   {
      // Переключение в противоположное состояние ножки
      // выхода для управления светодиодом (LED):
      HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8001f0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f12:	4865      	ldr	r0, [pc, #404]	; (80020a8 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8001f14:	f003 fc36 	bl	8005784 <HAL_GPIO_TogglePin>
      if (GPIO_PIN_RESET == HAL_GPIO_ReadPin (GPIOC, GPIO_PIN_13)){
 8001f18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f1c:	4862      	ldr	r0, [pc, #392]	; (80020a8 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8001f1e:	f003 fc01 	bl	8005724 <HAL_GPIO_ReadPin>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d13c      	bne.n	8001fa2 <HAL_GPIO_EXTI_Callback+0xa6>



            if((pwm_cmd>=0)&&(pwm_cmd<=19)&&(status==0)){
 8001f28:	4b60      	ldr	r3, [pc, #384]	; (80020ac <HAL_GPIO_EXTI_Callback+0x1b0>)
 8001f2a:	881b      	ldrh	r3, [r3, #0]
 8001f2c:	4b5f      	ldr	r3, [pc, #380]	; (80020ac <HAL_GPIO_EXTI_Callback+0x1b0>)
 8001f2e:	881b      	ldrh	r3, [r3, #0]
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	2b13      	cmp	r3, #19
 8001f34:	d81c      	bhi.n	8001f70 <HAL_GPIO_EXTI_Callback+0x74>
 8001f36:	4b5e      	ldr	r3, [pc, #376]	; (80020b0 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d118      	bne.n	8001f70 <HAL_GPIO_EXTI_Callback+0x74>

            	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN); // RTC_FORMAT_BIN , RTC_FORMAT_BCD
 8001f3e:	2200      	movs	r2, #0
 8001f40:	495c      	ldr	r1, [pc, #368]	; (80020b4 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001f42:	485d      	ldr	r0, [pc, #372]	; (80020b8 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001f44:	f006 fc3f 	bl	80087c6 <HAL_RTC_GetTime>
            	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001f48:	2200      	movs	r2, #0
 8001f4a:	495c      	ldr	r1, [pc, #368]	; (80020bc <HAL_GPIO_EXTI_Callback+0x1c0>)
 8001f4c:	485a      	ldr	r0, [pc, #360]	; (80020b8 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001f4e:	f006 fd1c 	bl	800898a <HAL_RTC_GetDate>

            	hour=sTime.Hours;
 8001f52:	4b58      	ldr	r3, [pc, #352]	; (80020b4 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001f54:	781a      	ldrb	r2, [r3, #0]
 8001f56:	4b5a      	ldr	r3, [pc, #360]	; (80020c0 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8001f58:	701a      	strb	r2, [r3, #0]
            	min=sTime.Minutes;
 8001f5a:	4b56      	ldr	r3, [pc, #344]	; (80020b4 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001f5c:	785a      	ldrb	r2, [r3, #1]
 8001f5e:	4b59      	ldr	r3, [pc, #356]	; (80020c4 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8001f60:	701a      	strb	r2, [r3, #0]
            	sec=sTime.Seconds;
 8001f62:	4b54      	ldr	r3, [pc, #336]	; (80020b4 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001f64:	789a      	ldrb	r2, [r3, #2]
 8001f66:	4b58      	ldr	r3, [pc, #352]	; (80020c8 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8001f68:	701a      	strb	r2, [r3, #0]

            	status=1;
 8001f6a:	4b51      	ldr	r3, [pc, #324]	; (80020b0 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	701a      	strb	r2, [r3, #0]
            }

        		   pwm_cmd=pwm_cmd+10;
 8001f70:	4b4e      	ldr	r3, [pc, #312]	; (80020ac <HAL_GPIO_EXTI_Callback+0x1b0>)
 8001f72:	881b      	ldrh	r3, [r3, #0]
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	330a      	adds	r3, #10
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	4b4c      	ldr	r3, [pc, #304]	; (80020ac <HAL_GPIO_EXTI_Callback+0x1b0>)
 8001f7c:	801a      	strh	r2, [r3, #0]
        		   if(pwm_cmd>=1999){pwm_cmd=2000;}
 8001f7e:	4b4b      	ldr	r3, [pc, #300]	; (80020ac <HAL_GPIO_EXTI_Callback+0x1b0>)
 8001f80:	881b      	ldrh	r3, [r3, #0]
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	f240 72ce 	movw	r2, #1998	; 0x7ce
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d903      	bls.n	8001f94 <HAL_GPIO_EXTI_Callback+0x98>
 8001f8c:	4b47      	ldr	r3, [pc, #284]	; (80020ac <HAL_GPIO_EXTI_Callback+0x1b0>)
 8001f8e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001f92:	801a      	strh	r2, [r3, #0]
        		   pwm_tgr=4;
 8001f94:	4b4d      	ldr	r3, [pc, #308]	; (80020cc <HAL_GPIO_EXTI_Callback+0x1d0>)
 8001f96:	2204      	movs	r2, #4
 8001f98:	701a      	strb	r2, [r3, #0]

        		   EXTI->PR = EXTI_PR_PR13;
 8001f9a:	4b4d      	ldr	r3, [pc, #308]	; (80020d0 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8001f9c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fa0:	615a      	str	r2, [r3, #20]


   }


   if(GPIO_Pin == GPIO_PIN_14) // если прерывание поступило от ножки PC14
 8001fa2:	88fb      	ldrh	r3, [r7, #6]
 8001fa4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001fa8:	d149      	bne.n	800203e <HAL_GPIO_EXTI_Callback+0x142>
     {

	   if (GPIO_PIN_SET == HAL_GPIO_ReadPin (GPIOC, GPIO_PIN_14)){
 8001faa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fae:	483e      	ldr	r0, [pc, #248]	; (80020a8 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8001fb0:	f003 fbb8 	bl	8005724 <HAL_GPIO_ReadPin>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d104      	bne.n	8001fc4 <HAL_GPIO_EXTI_Callback+0xc8>
        // Переключение в противоположное состояние ножки
        // выхода для управления светодиодом (LED):
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);}
 8001fba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fbe:	483a      	ldr	r0, [pc, #232]	; (80020a8 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8001fc0:	f003 fbe0 	bl	8005784 <HAL_GPIO_TogglePin>
	   if (GPIO_PIN_RESET == HAL_GPIO_ReadPin (GPIOC, GPIO_PIN_14)){
 8001fc4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fc8:	4837      	ldr	r0, [pc, #220]	; (80020a8 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8001fca:	f003 fbab 	bl	8005724 <HAL_GPIO_ReadPin>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d134      	bne.n	800203e <HAL_GPIO_EXTI_Callback+0x142>

		   if((pwm_cmd==0)&&(status==1)){
 8001fd4:	4b35      	ldr	r3, [pc, #212]	; (80020ac <HAL_GPIO_EXTI_Callback+0x1b0>)
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d10f      	bne.n	8001ffe <HAL_GPIO_EXTI_Callback+0x102>
 8001fde:	4b34      	ldr	r3, [pc, #208]	; (80020b0 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d10b      	bne.n	8001ffe <HAL_GPIO_EXTI_Callback+0x102>
		              	status=0;
 8001fe6:	4b32      	ldr	r3, [pc, #200]	; (80020b0 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	701a      	strb	r2, [r3, #0]

		              	hour=0;
 8001fec:	4b34      	ldr	r3, [pc, #208]	; (80020c0 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	701a      	strb	r2, [r3, #0]
		              	min=0;
 8001ff2:	4b34      	ldr	r3, [pc, #208]	; (80020c4 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	701a      	strb	r2, [r3, #0]
		              	sec=0;
 8001ff8:	4b33      	ldr	r3, [pc, #204]	; (80020c8 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	701a      	strb	r2, [r3, #0]
		              }


		   pwm_cmd=pwm_cmd-10;
 8001ffe:	4b2b      	ldr	r3, [pc, #172]	; (80020ac <HAL_GPIO_EXTI_Callback+0x1b0>)
 8002000:	881b      	ldrh	r3, [r3, #0]
 8002002:	b29b      	uxth	r3, r3
 8002004:	3b0a      	subs	r3, #10
 8002006:	b29a      	uxth	r2, r3
 8002008:	4b28      	ldr	r3, [pc, #160]	; (80020ac <HAL_GPIO_EXTI_Callback+0x1b0>)
 800200a:	801a      	strh	r2, [r3, #0]
		   if(pwm_cmd>=2100){pwm_cmd=0;}
 800200c:	4b27      	ldr	r3, [pc, #156]	; (80020ac <HAL_GPIO_EXTI_Callback+0x1b0>)
 800200e:	881b      	ldrh	r3, [r3, #0]
 8002010:	b29b      	uxth	r3, r3
 8002012:	f640 0233 	movw	r2, #2099	; 0x833
 8002016:	4293      	cmp	r3, r2
 8002018:	d902      	bls.n	8002020 <HAL_GPIO_EXTI_Callback+0x124>
 800201a:	4b24      	ldr	r3, [pc, #144]	; (80020ac <HAL_GPIO_EXTI_Callback+0x1b0>)
 800201c:	2200      	movs	r2, #0
 800201e:	801a      	strh	r2, [r3, #0]
		   if(pwm_cmd<=1){pwm_cmd=0;}
 8002020:	4b22      	ldr	r3, [pc, #136]	; (80020ac <HAL_GPIO_EXTI_Callback+0x1b0>)
 8002022:	881b      	ldrh	r3, [r3, #0]
 8002024:	b29b      	uxth	r3, r3
 8002026:	2b01      	cmp	r3, #1
 8002028:	d802      	bhi.n	8002030 <HAL_GPIO_EXTI_Callback+0x134>
 800202a:	4b20      	ldr	r3, [pc, #128]	; (80020ac <HAL_GPIO_EXTI_Callback+0x1b0>)
 800202c:	2200      	movs	r2, #0
 800202e:	801a      	strh	r2, [r3, #0]
		   pwm_tgr=4;
 8002030:	4b26      	ldr	r3, [pc, #152]	; (80020cc <HAL_GPIO_EXTI_Callback+0x1d0>)
 8002032:	2204      	movs	r2, #4
 8002034:	701a      	strb	r2, [r3, #0]
		   EXTI->PR = EXTI_PR_PR14;
 8002036:	4b26      	ldr	r3, [pc, #152]	; (80020d0 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8002038:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800203c:	615a      	str	r2, [r3, #20]


     }


   if(GPIO_Pin == GPIO_PIN_5) // если прерывание поступило от ножки PB_5
 800203e:	88fb      	ldrh	r3, [r7, #6]
 8002040:	2b20      	cmp	r3, #32
 8002042:	d12d      	bne.n	80020a0 <HAL_GPIO_EXTI_Callback+0x1a4>
      {
	   if (GPIO_PIN_SET == HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_5)){
 8002044:	2120      	movs	r1, #32
 8002046:	4823      	ldr	r0, [pc, #140]	; (80020d4 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8002048:	f003 fb6c 	bl	8005724 <HAL_GPIO_ReadPin>
 800204c:	4603      	mov	r3, r0
 800204e:	2b01      	cmp	r3, #1
 8002050:	d107      	bne.n	8002062 <HAL_GPIO_EXTI_Callback+0x166>
	             LED_3_OFF;
 8002052:	2200      	movs	r2, #0
 8002054:	2102      	movs	r1, #2
 8002056:	4820      	ldr	r0, [pc, #128]	; (80020d8 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8002058:	f003 fb7c 	bl	8005754 <HAL_GPIO_WritePin>

	   			// if(page_num>2){page_num=0;}
	   			// page_flag=0;
	   		  EXTI->PR = EXTI_PR_PR5;
 800205c:	4b1c      	ldr	r3, [pc, #112]	; (80020d0 <HAL_GPIO_EXTI_Callback+0x1d4>)
 800205e:	2220      	movs	r2, #32
 8002060:	615a      	str	r2, [r3, #20]
      }

     if (GPIO_PIN_RESET == HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_5)){
 8002062:	2120      	movs	r1, #32
 8002064:	481b      	ldr	r0, [pc, #108]	; (80020d4 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8002066:	f003 fb5d 	bl	8005724 <HAL_GPIO_ReadPin>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d117      	bne.n	80020a0 <HAL_GPIO_EXTI_Callback+0x1a4>

    	         LED_3_ON;
 8002070:	2201      	movs	r2, #1
 8002072:	2102      	movs	r1, #2
 8002074:	4818      	ldr	r0, [pc, #96]	; (80020d8 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8002076:	f003 fb6d 	bl	8005754 <HAL_GPIO_WritePin>
    	 	     page_flag=1;
 800207a:	4b18      	ldr	r3, [pc, #96]	; (80020dc <HAL_GPIO_EXTI_Callback+0x1e0>)
 800207c:	2201      	movs	r2, #1
 800207e:	701a      	strb	r2, [r3, #0]
    	         page_num++;
 8002080:	4b17      	ldr	r3, [pc, #92]	; (80020e0 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	3301      	adds	r3, #1
 8002086:	b2da      	uxtb	r2, r3
 8002088:	4b15      	ldr	r3, [pc, #84]	; (80020e0 <HAL_GPIO_EXTI_Callback+0x1e4>)
 800208a:	701a      	strb	r2, [r3, #0]
    	         if(page_num>2){page_num=0;}
 800208c:	4b14      	ldr	r3, [pc, #80]	; (80020e0 <HAL_GPIO_EXTI_Callback+0x1e4>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2b02      	cmp	r3, #2
 8002092:	d902      	bls.n	800209a <HAL_GPIO_EXTI_Callback+0x19e>
 8002094:	4b12      	ldr	r3, [pc, #72]	; (80020e0 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8002096:	2200      	movs	r2, #0
 8002098:	701a      	strb	r2, [r3, #0]
    	         EXTI->PR = EXTI_PR_PR5;
 800209a:	4b0d      	ldr	r3, [pc, #52]	; (80020d0 <HAL_GPIO_EXTI_Callback+0x1d4>)
 800209c:	2220      	movs	r2, #32
 800209e:	615a      	str	r2, [r3, #20]
     }



}
}
 80020a0:	bf00      	nop
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	48000800 	.word	0x48000800
 80020ac:	2000055c 	.word	0x2000055c
 80020b0:	20000579 	.word	0x20000579
 80020b4:	200006cc 	.word	0x200006cc
 80020b8:	20000214 	.word	0x20000214
 80020bc:	200006e0 	.word	0x200006e0
 80020c0:	20000577 	.word	0x20000577
 80020c4:	20000576 	.word	0x20000576
 80020c8:	20000578 	.word	0x20000578
 80020cc:	2000055e 	.word	0x2000055e
 80020d0:	40010400 	.word	0x40010400
 80020d4:	48000400 	.word	0x48000400
 80020d8:	48001400 	.word	0x48001400
 80020dc:	20000571 	.word	0x20000571
 80020e0:	20000570 	.word	0x20000570

080020e4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)

{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]

RX_2;
 80020ec:	2200      	movs	r2, #0
 80020ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020f6:	f003 fb2d 	bl	8005754 <HAL_GPIO_WritePin>

//LED_3_OFF;
}
 80020fa:	bf00      	nop
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
	...

08002104 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC2)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a05      	ldr	r2, [pc, #20]	; (8002128 <HAL_ADC_ConvCpltCallback+0x24>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d102      	bne.n	800211c <HAL_ADC_ConvCpltCallback+0x18>
    {
        flag = 1;
 8002116:	4b05      	ldr	r3, [pc, #20]	; (800212c <HAL_ADC_ConvCpltCallback+0x28>)
 8002118:	2201      	movs	r2, #1
 800211a:	701a      	strb	r2, [r3, #0]
    }
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	50000100 	.word	0x50000100
 800212c:	2000055f 	.word	0x2000055f

08002130 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002134:	b672      	cpsid	i
}
 8002136:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002138:	e7fe      	b.n	8002138 <Error_Handler+0x8>

0800213a <calcCRC16ModBus>:

#include "modbusDevice.h"


// Compute the MODBUS RTU CRC
uint16_t calcCRC16ModBus(uint8_t *buffer, uint8_t u8length) {
 800213a:	b480      	push	{r7}
 800213c:	b087      	sub	sp, #28
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
 8002142:	460b      	mov	r3, r1
 8002144:	70fb      	strb	r3, [r7, #3]
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
 8002146:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800214a:	617b      	str	r3, [r7, #20]
	for (unsigned char i = 0; i < u8length; i++) {
 800214c:	2300      	movs	r3, #0
 800214e:	74fb      	strb	r3, [r7, #19]
 8002150:	e023      	b.n	800219a <calcCRC16ModBus+0x60>
		temp = temp ^ buffer[i];
 8002152:	7cfb      	ldrb	r3, [r7, #19]
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	4413      	add	r3, r2
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	461a      	mov	r2, r3
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	4053      	eors	r3, r2
 8002160:	617b      	str	r3, [r7, #20]
		for (unsigned char j = 1; j <= 8; j++) {
 8002162:	2301      	movs	r3, #1
 8002164:	74bb      	strb	r3, [r7, #18]
 8002166:	e012      	b.n	800218e <calcCRC16ModBus+0x54>
			flag = temp & 0x0001;
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	60bb      	str	r3, [r7, #8]
			temp >>= 1;
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	085b      	lsrs	r3, r3, #1
 8002174:	617b      	str	r3, [r7, #20]
			if (flag)
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d005      	beq.n	8002188 <calcCRC16ModBus+0x4e>
				temp ^= 0xA001;
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	f483 4320 	eor.w	r3, r3, #40960	; 0xa000
 8002182:	f083 0301 	eor.w	r3, r3, #1
 8002186:	617b      	str	r3, [r7, #20]
		for (unsigned char j = 1; j <= 8; j++) {
 8002188:	7cbb      	ldrb	r3, [r7, #18]
 800218a:	3301      	adds	r3, #1
 800218c:	74bb      	strb	r3, [r7, #18]
 800218e:	7cbb      	ldrb	r3, [r7, #18]
 8002190:	2b08      	cmp	r3, #8
 8002192:	d9e9      	bls.n	8002168 <calcCRC16ModBus+0x2e>
	for (unsigned char i = 0; i < u8length; i++) {
 8002194:	7cfb      	ldrb	r3, [r7, #19]
 8002196:	3301      	adds	r3, #1
 8002198:	74fb      	strb	r3, [r7, #19]
 800219a:	7cfa      	ldrb	r2, [r7, #19]
 800219c:	78fb      	ldrb	r3, [r7, #3]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d3d7      	bcc.n	8002152 <calcCRC16ModBus+0x18>
		}
	}
	// Reverse byte order.
	temp2 = temp >> 8;
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	0a1b      	lsrs	r3, r3, #8
 80021a6:	60fb      	str	r3, [r7, #12]
	temp = (temp << 8) | temp2;
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	021b      	lsls	r3, r3, #8
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	617b      	str	r3, [r7, #20]
	temp &= 0xFFFF;
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	617b      	str	r3, [r7, #20]
	// the returned value is already swapped
	// crcLo byte is first & crcHi byte is last
	return temp;
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	b29b      	uxth	r3, r3

}
 80021bc:	4618      	mov	r0, r3
 80021be:	371c      	adds	r7, #28
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <sendModBusRequest>:
			rxDataCursor++;
		}
	}
}

modbusResult sendModBusRequest(UART_HandleTypeDef* huart, uint8_t* frame,uint8_t len) {
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	4613      	mov	r3, r2
 80021d4:	71fb      	strb	r3, [r7, #7]

    uint16_t crc = calcCRC16ModBus(frame, len);
 80021d6:	79fb      	ldrb	r3, [r7, #7]
 80021d8:	4619      	mov	r1, r3
 80021da:	68b8      	ldr	r0, [r7, #8]
 80021dc:	f7ff ffad 	bl	800213a <calcCRC16ModBus>
 80021e0:	4603      	mov	r3, r0
 80021e2:	82fb      	strh	r3, [r7, #22]
    frame[len+1] = crc & 0xFF;       // CRC LOW
 80021e4:	79fb      	ldrb	r3, [r7, #7]
 80021e6:	3301      	adds	r3, #1
 80021e8:	68ba      	ldr	r2, [r7, #8]
 80021ea:	4413      	add	r3, r2
 80021ec:	8afa      	ldrh	r2, [r7, #22]
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	701a      	strb	r2, [r3, #0]
    frame[len] = (crc >> 8) & 0xFF;  // CRC HIGH
 80021f2:	8afb      	ldrh	r3, [r7, #22]
 80021f4:	0a1b      	lsrs	r3, r3, #8
 80021f6:	b299      	uxth	r1, r3
 80021f8:	79fb      	ldrb	r3, [r7, #7]
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	4413      	add	r3, r2
 80021fe:	b2ca      	uxtb	r2, r1
 8002200:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,GPIO_PIN_SET);
 8002202:	2201      	movs	r2, #1
 8002204:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002208:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800220c:	f003 faa2 	bl	8005754 <HAL_GPIO_WritePin>

	HAL_UART_Transmit_DMA(huart, frame, len+2);
 8002210:	79fb      	ldrb	r3, [r7, #7]
 8002212:	b29b      	uxth	r3, r3
 8002214:	3302      	adds	r3, #2
 8002216:	b29b      	uxth	r3, r3
 8002218:	461a      	mov	r2, r3
 800221a:	68b9      	ldr	r1, [r7, #8]
 800221c:	68f8      	ldr	r0, [r7, #12]
 800221e:	f008 fc9f 	bl	800ab60 <HAL_UART_Transmit_DMA>

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1,GPIO_PIN_RESET);
 8002222:	2200      	movs	r2, #0
 8002224:	2102      	movs	r1, #2
 8002226:	4804      	ldr	r0, [pc, #16]	; (8002238 <sendModBusRequest+0x70>)
 8002228:	f003 fa94 	bl	8005754 <HAL_GPIO_WritePin>
//	else{

	//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,GPIO_PIN_RESET);
	//	return MODBUS_ERROR;
	//}
}
 800222c:	bf00      	nop
 800222e:	4618      	mov	r0, r3
 8002230:	3718      	adds	r7, #24
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	48001400 	.word	0x48001400

0800223c <handleReadHoldingRegs>:
extern uint8_t rxFrame[255];
extern uint8_t txFrame[255];

extern uint8_t SLAVE_ID;

modbusResult handleReadHoldingRegs(UART_HandleTypeDef* huart,uint16_t* holdingRegisterValues){
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]

	uint16_t startingReg = (rxFrame[2]<<8) | rxFrame[3];
 8002246:	4b39      	ldr	r3, [pc, #228]	; (800232c <handleReadHoldingRegs+0xf0>)
 8002248:	789b      	ldrb	r3, [r3, #2]
 800224a:	021b      	lsls	r3, r3, #8
 800224c:	b21a      	sxth	r2, r3
 800224e:	4b37      	ldr	r3, [pc, #220]	; (800232c <handleReadHoldingRegs+0xf0>)
 8002250:	78db      	ldrb	r3, [r3, #3]
 8002252:	b21b      	sxth	r3, r3
 8002254:	4313      	orrs	r3, r2
 8002256:	b21b      	sxth	r3, r3
 8002258:	82fb      	strh	r3, [r7, #22]
	uint16_t numOfregs = (rxFrame[4]<<8) | rxFrame[5];
 800225a:	4b34      	ldr	r3, [pc, #208]	; (800232c <handleReadHoldingRegs+0xf0>)
 800225c:	791b      	ldrb	r3, [r3, #4]
 800225e:	021b      	lsls	r3, r3, #8
 8002260:	b21a      	sxth	r2, r3
 8002262:	4b32      	ldr	r3, [pc, #200]	; (800232c <handleReadHoldingRegs+0xf0>)
 8002264:	795b      	ldrb	r3, [r3, #5]
 8002266:	b21b      	sxth	r3, r3
 8002268:	4313      	orrs	r3, r2
 800226a:	b21b      	sxth	r3, r3
 800226c:	817b      	strh	r3, [r7, #10]

	startingReg=startingReg-30001;
 800226e:	8afb      	ldrh	r3, [r7, #22]
 8002270:	f5a3 43ea 	sub.w	r3, r3, #29952	; 0x7500
 8002274:	3b31      	subs	r3, #49	; 0x31
 8002276:	82fb      	strh	r3, [r7, #22]

	uint16_t endAddr = startingReg+numOfregs-1;
 8002278:	8afa      	ldrh	r2, [r7, #22]
 800227a:	897b      	ldrh	r3, [r7, #10]
 800227c:	4413      	add	r3, r2
 800227e:	b29b      	uxth	r3, r3
 8002280:	3b01      	subs	r3, #1
 8002282:	813b      	strh	r3, [r7, #8]

	if((numOfregs<0)|(numOfregs >125)){
 8002284:	897b      	ldrh	r3, [r7, #10]
 8002286:	2b7d      	cmp	r3, #125	; 0x7d
 8002288:	d905      	bls.n	8002296 <handleReadHoldingRegs+0x5a>
		sendModbusException(huart,ILLEGAL_DATA_VALUE);
 800228a:	2103      	movs	r1, #3
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f000 f8d3 	bl	8002438 <sendModbusException>
		return MODBUS_ERROR;
 8002292:	2300      	movs	r3, #0
 8002294:	e045      	b.n	8002322 <handleReadHoldingRegs+0xe6>
	}
	if(endAddr > NUM_OF_HOLDING_REGS){
 8002296:	893b      	ldrh	r3, [r7, #8]
 8002298:	2b1e      	cmp	r3, #30
 800229a:	d905      	bls.n	80022a8 <handleReadHoldingRegs+0x6c>
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);
 800229c:	2102      	movs	r1, #2
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 f8ca 	bl	8002438 <sendModbusException>
		return MODBUS_ERROR;
 80022a4:	2300      	movs	r3, #0
 80022a6:	e03c      	b.n	8002322 <handleReadHoldingRegs+0xe6>
	}
	//  | SLAVE_ID | FUNC_CODE | BYTE_COUNT |    DATA     |    CRC    |
	//  |  1 byte  |   1 byte  |    1 byte  |   N*2 Bytes |   2 bytes |

	txFrame[0] = SLAVE_ID;
 80022a8:	4b21      	ldr	r3, [pc, #132]	; (8002330 <handleReadHoldingRegs+0xf4>)
 80022aa:	781a      	ldrb	r2, [r3, #0]
 80022ac:	4b21      	ldr	r3, [pc, #132]	; (8002334 <handleReadHoldingRegs+0xf8>)
 80022ae:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];
 80022b0:	4b1e      	ldr	r3, [pc, #120]	; (800232c <handleReadHoldingRegs+0xf0>)
 80022b2:	785a      	ldrb	r2, [r3, #1]
 80022b4:	4b1f      	ldr	r3, [pc, #124]	; (8002334 <handleReadHoldingRegs+0xf8>)
 80022b6:	705a      	strb	r2, [r3, #1]
	txFrame[2] = numOfregs *2;
 80022b8:	897b      	ldrh	r3, [r7, #10]
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	4b1c      	ldr	r3, [pc, #112]	; (8002334 <handleReadHoldingRegs+0xf8>)
 80022c2:	709a      	strb	r2, [r3, #2]

	int byteCursor=3;
 80022c4:	2303      	movs	r3, #3
 80022c6:	613b      	str	r3, [r7, #16]

	for(int i = 0; i<numOfregs;i++){
 80022c8:	2300      	movs	r3, #0
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	e01d      	b.n	800230a <handleReadHoldingRegs+0xce>
		txFrame[byteCursor++] =(holdingRegisterValues[startingReg]>>8) & 0xff; // Higher byte
 80022ce:	8afb      	ldrh	r3, [r7, #22]
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	4413      	add	r3, r2
 80022d6:	881b      	ldrh	r3, [r3, #0]
 80022d8:	0a1b      	lsrs	r3, r3, #8
 80022da:	b299      	uxth	r1, r3
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	1c5a      	adds	r2, r3, #1
 80022e0:	613a      	str	r2, [r7, #16]
 80022e2:	b2c9      	uxtb	r1, r1
 80022e4:	4a13      	ldr	r2, [pc, #76]	; (8002334 <handleReadHoldingRegs+0xf8>)
 80022e6:	54d1      	strb	r1, [r2, r3]
		txFrame[byteCursor++] =(holdingRegisterValues[startingReg]) & 0xff;    // Lower  byte
 80022e8:	8afb      	ldrh	r3, [r7, #22]
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	4413      	add	r3, r2
 80022f0:	8819      	ldrh	r1, [r3, #0]
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1c5a      	adds	r2, r3, #1
 80022f6:	613a      	str	r2, [r7, #16]
 80022f8:	b2c9      	uxtb	r1, r1
 80022fa:	4a0e      	ldr	r2, [pc, #56]	; (8002334 <handleReadHoldingRegs+0xf8>)
 80022fc:	54d1      	strb	r1, [r2, r3]
		startingReg++;
 80022fe:	8afb      	ldrh	r3, [r7, #22]
 8002300:	3301      	adds	r3, #1
 8002302:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i<numOfregs;i++){
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	3301      	adds	r3, #1
 8002308:	60fb      	str	r3, [r7, #12]
 800230a:	897b      	ldrh	r3, [r7, #10]
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	429a      	cmp	r2, r3
 8002310:	dbdd      	blt.n	80022ce <handleReadHoldingRegs+0x92>
	}
	sendModBusRequest(huart,txFrame,byteCursor);
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	b2db      	uxtb	r3, r3
 8002316:	461a      	mov	r2, r3
 8002318:	4906      	ldr	r1, [pc, #24]	; (8002334 <handleReadHoldingRegs+0xf8>)
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f7ff ff54 	bl	80021c8 <sendModBusRequest>
	return 1;
 8002320:	2301      	movs	r3, #1

}
 8002322:	4618      	mov	r0, r3
 8002324:	3718      	adds	r7, #24
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	2000057c 	.word	0x2000057c
 8002330:	20000010 	.word	0x20000010
 8002334:	2000058c 	.word	0x2000058c

08002338 <handleWriteMulyipleHandlingRegister>:
	sendModBusRequest(huart,txFrame, 6);
	return 1;

}

modbusResult handleWriteMulyipleHandlingRegister (UART_HandleTypeDef* huart,uint16_t* holdingRegisterValues){
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]

	uint16_t staringtAddr = ((rxFrame[2]<<8)| rxFrame[3]);
 8002342:	4b3a      	ldr	r3, [pc, #232]	; (800242c <handleWriteMulyipleHandlingRegister+0xf4>)
 8002344:	789b      	ldrb	r3, [r3, #2]
 8002346:	021b      	lsls	r3, r3, #8
 8002348:	b21a      	sxth	r2, r3
 800234a:	4b38      	ldr	r3, [pc, #224]	; (800242c <handleWriteMulyipleHandlingRegister+0xf4>)
 800234c:	78db      	ldrb	r3, [r3, #3]
 800234e:	b21b      	sxth	r3, r3
 8002350:	4313      	orrs	r3, r2
 8002352:	b21b      	sxth	r3, r3
 8002354:	82fb      	strh	r3, [r7, #22]

	uint16_t numRegs = ((rxFrame[4]<<8) | rxFrame[5]);   // number to registers master has requested
 8002356:	4b35      	ldr	r3, [pc, #212]	; (800242c <handleWriteMulyipleHandlingRegister+0xf4>)
 8002358:	791b      	ldrb	r3, [r3, #4]
 800235a:	021b      	lsls	r3, r3, #8
 800235c:	b21a      	sxth	r2, r3
 800235e:	4b33      	ldr	r3, [pc, #204]	; (800242c <handleWriteMulyipleHandlingRegister+0xf4>)
 8002360:	795b      	ldrb	r3, [r3, #5]
 8002362:	b21b      	sxth	r3, r3
 8002364:	4313      	orrs	r3, r2
 8002366:	b21b      	sxth	r3, r3
 8002368:	817b      	strh	r3, [r7, #10]

	if ((numRegs<1)||(numRegs>123))  // maximum no. of Registers as per Modbus Specification
 800236a:	897b      	ldrh	r3, [r7, #10]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d002      	beq.n	8002376 <handleWriteMulyipleHandlingRegister+0x3e>
 8002370:	897b      	ldrh	r3, [r7, #10]
 8002372:	2b7b      	cmp	r3, #123	; 0x7b
 8002374:	d905      	bls.n	8002382 <handleWriteMulyipleHandlingRegister+0x4a>
	{
		sendModbusException(huart,ILLEGAL_DATA_VALUE);  // send an exception
 8002376:	2103      	movs	r1, #3
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f000 f85d 	bl	8002438 <sendModbusException>
		return MODBUS_ERROR;
 800237e:	2300      	movs	r3, #0
 8002380:	e04f      	b.n	8002422 <handleWriteMulyipleHandlingRegister+0xea>
	}

	uint16_t endAddr = staringtAddr + numRegs - 1;  // end Register
 8002382:	8afa      	ldrh	r2, [r7, #22]
 8002384:	897b      	ldrh	r3, [r7, #10]
 8002386:	4413      	add	r3, r2
 8002388:	b29b      	uxth	r3, r3
 800238a:	3b01      	subs	r3, #1
 800238c:	813b      	strh	r3, [r7, #8]
	if (endAddr> NUM_OF_HOLDING_REGS)  	// end Register can not be more than NUM_OF_HOLDING_REGS as
 800238e:	893b      	ldrh	r3, [r7, #8]
 8002390:	2b1e      	cmp	r3, #30
 8002392:	d905      	bls.n	80023a0 <handleWriteMulyipleHandlingRegister+0x68>
										// we only have record of NUM_OF_HOLDING_REGS Registers in total
	{
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);   // send an exception
 8002394:	2102      	movs	r1, #2
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 f84e 	bl	8002438 <sendModbusException>
		return MODBUS_ERROR;
 800239c:	2300      	movs	r3, #0
 800239e:	e040      	b.n	8002422 <handleWriteMulyipleHandlingRegister+0xea>
	}

	int indx = 7;  // we need to keep track of index in rxFrame
 80023a0:	2307      	movs	r3, #7
 80023a2:	613b      	str	r3, [r7, #16]

	for (int regCorsor=0; regCorsor<numRegs; regCorsor++){
 80023a4:	2300      	movs	r3, #0
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	e019      	b.n	80023de <handleWriteMulyipleHandlingRegister+0xa6>

		holdingRegisterValues[staringtAddr++] = (rxFrame[indx++]<<8)|rxFrame[indx++];
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1c5a      	adds	r2, r3, #1
 80023ae:	613a      	str	r2, [r7, #16]
 80023b0:	4a1e      	ldr	r2, [pc, #120]	; (800242c <handleWriteMulyipleHandlingRegister+0xf4>)
 80023b2:	5cd3      	ldrb	r3, [r2, r3]
 80023b4:	021b      	lsls	r3, r3, #8
 80023b6:	b21a      	sxth	r2, r3
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1c59      	adds	r1, r3, #1
 80023bc:	6139      	str	r1, [r7, #16]
 80023be:	491b      	ldr	r1, [pc, #108]	; (800242c <handleWriteMulyipleHandlingRegister+0xf4>)
 80023c0:	5ccb      	ldrb	r3, [r1, r3]
 80023c2:	b21b      	sxth	r3, r3
 80023c4:	4313      	orrs	r3, r2
 80023c6:	b219      	sxth	r1, r3
 80023c8:	8afb      	ldrh	r3, [r7, #22]
 80023ca:	1c5a      	adds	r2, r3, #1
 80023cc:	82fa      	strh	r2, [r7, #22]
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	4413      	add	r3, r2
 80023d4:	b28a      	uxth	r2, r1
 80023d6:	801a      	strh	r2, [r3, #0]
	for (int regCorsor=0; regCorsor<numRegs; regCorsor++){
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	3301      	adds	r3, #1
 80023dc:	60fb      	str	r3, [r7, #12]
 80023de:	897b      	ldrh	r3, [r7, #10]
 80023e0:	68fa      	ldr	r2, [r7, #12]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	dbe1      	blt.n	80023aa <handleWriteMulyipleHandlingRegister+0x72>

	}
	//   | SLAVE_ID | FUNCTION_CODE | Start Addr |  num of Regs |   CRC   |
	//   | 1 BYTE   |     1 BYTE    |  2 BYTE    |    2 BYTES   | 2 BYTES |

	txFrame[0] = SLAVE_ID;     // Slave ID
 80023e6:	4b12      	ldr	r3, [pc, #72]	; (8002430 <handleWriteMulyipleHandlingRegister+0xf8>)
 80023e8:	781a      	ldrb	r2, [r3, #0]
 80023ea:	4b12      	ldr	r3, [pc, #72]	; (8002434 <handleWriteMulyipleHandlingRegister+0xfc>)
 80023ec:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];   // Function code
 80023ee:	4b0f      	ldr	r3, [pc, #60]	; (800242c <handleWriteMulyipleHandlingRegister+0xf4>)
 80023f0:	785a      	ldrb	r2, [r3, #1]
 80023f2:	4b10      	ldr	r3, [pc, #64]	; (8002434 <handleWriteMulyipleHandlingRegister+0xfc>)
 80023f4:	705a      	strb	r2, [r3, #1]

	txFrame[2] = rxFrame[2];   // Start Addr HIGH Byte
 80023f6:	4b0d      	ldr	r3, [pc, #52]	; (800242c <handleWriteMulyipleHandlingRegister+0xf4>)
 80023f8:	789a      	ldrb	r2, [r3, #2]
 80023fa:	4b0e      	ldr	r3, [pc, #56]	; (8002434 <handleWriteMulyipleHandlingRegister+0xfc>)
 80023fc:	709a      	strb	r2, [r3, #2]
	txFrame[3] = rxFrame[3];   // Start Addr LOW Byte
 80023fe:	4b0b      	ldr	r3, [pc, #44]	; (800242c <handleWriteMulyipleHandlingRegister+0xf4>)
 8002400:	78da      	ldrb	r2, [r3, #3]
 8002402:	4b0c      	ldr	r3, [pc, #48]	; (8002434 <handleWriteMulyipleHandlingRegister+0xfc>)
 8002404:	70da      	strb	r2, [r3, #3]

	txFrame[4] = rxFrame[4];   // Num of Regs HIGH Byte
 8002406:	4b09      	ldr	r3, [pc, #36]	; (800242c <handleWriteMulyipleHandlingRegister+0xf4>)
 8002408:	791a      	ldrb	r2, [r3, #4]
 800240a:	4b0a      	ldr	r3, [pc, #40]	; (8002434 <handleWriteMulyipleHandlingRegister+0xfc>)
 800240c:	711a      	strb	r2, [r3, #4]
	txFrame[5] = rxFrame[5];   // Num of Regs LOW Byte
 800240e:	4b07      	ldr	r3, [pc, #28]	; (800242c <handleWriteMulyipleHandlingRegister+0xf4>)
 8002410:	795a      	ldrb	r2, [r3, #5]
 8002412:	4b08      	ldr	r3, [pc, #32]	; (8002434 <handleWriteMulyipleHandlingRegister+0xfc>)
 8002414:	715a      	strb	r2, [r3, #5]

	sendModBusRequest(huart,txFrame, 6);  // send data... CRC will be calculated in the function itself
 8002416:	2206      	movs	r2, #6
 8002418:	4906      	ldr	r1, [pc, #24]	; (8002434 <handleWriteMulyipleHandlingRegister+0xfc>)
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7ff fed4 	bl	80021c8 <sendModBusRequest>
	return 1;   // success
 8002420:	2301      	movs	r3, #1

}
 8002422:	4618      	mov	r0, r3
 8002424:	3718      	adds	r7, #24
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	2000057c 	.word	0x2000057c
 8002430:	20000010 	.word	0x20000010
 8002434:	2000058c 	.word	0x2000058c

08002438 <sendModbusException>:

	sendModBusRequest(huart,txFrame, 6);
	return MODBUS_OK;
}

modbusResult sendModbusException(UART_HandleTypeDef* huart,modbusExceptionCode exceptionCode){
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	460b      	mov	r3, r1
 8002442:	70fb      	strb	r3, [r7, #3]

	// | SLAVE_ID | FUNCTION_CODE | Exception code | CRC     |
	// | 1 BYTE   |  1 BYTE       |    1 BYTE      | 2 BYTES |

	txFrame[0] = rxFrame[0];       		// Slave ID
 8002444:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <sendModbusException+0x3c>)
 8002446:	781a      	ldrb	r2, [r3, #0]
 8002448:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <sendModbusException+0x40>)
 800244a:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1] | 0x80;  	// Adding 1 to the MSB of the function code
 800244c:	4b09      	ldr	r3, [pc, #36]	; (8002474 <sendModbusException+0x3c>)
 800244e:	785b      	ldrb	r3, [r3, #1]
 8002450:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002454:	b2da      	uxtb	r2, r3
 8002456:	4b08      	ldr	r3, [pc, #32]	; (8002478 <sendModbusException+0x40>)
 8002458:	705a      	strb	r2, [r3, #1]
	txFrame[2] =  exceptionCode;   		// Load the Exception code
 800245a:	4a07      	ldr	r2, [pc, #28]	; (8002478 <sendModbusException+0x40>)
 800245c:	78fb      	ldrb	r3, [r7, #3]
 800245e:	7093      	strb	r3, [r2, #2]

	return 	sendModBusRequest(huart,txFrame, 3);  // send Data... CRC will be calculated in the function
 8002460:	2203      	movs	r2, #3
 8002462:	4905      	ldr	r1, [pc, #20]	; (8002478 <sendModbusException+0x40>)
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f7ff feaf 	bl	80021c8 <sendModBusRequest>
 800246a:	4603      	mov	r3, r0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	2000057c 	.word	0x2000057c
 8002478:	2000058c 	.word	0x2000058c

0800247c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002482:	4b12      	ldr	r3, [pc, #72]	; (80024cc <HAL_MspInit+0x50>)
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	4a11      	ldr	r2, [pc, #68]	; (80024cc <HAL_MspInit+0x50>)
 8002488:	f043 0301 	orr.w	r3, r3, #1
 800248c:	6193      	str	r3, [r2, #24]
 800248e:	4b0f      	ldr	r3, [pc, #60]	; (80024cc <HAL_MspInit+0x50>)
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	607b      	str	r3, [r7, #4]
 8002498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800249a:	4b0c      	ldr	r3, [pc, #48]	; (80024cc <HAL_MspInit+0x50>)
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	4a0b      	ldr	r2, [pc, #44]	; (80024cc <HAL_MspInit+0x50>)
 80024a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a4:	61d3      	str	r3, [r2, #28]
 80024a6:	4b09      	ldr	r3, [pc, #36]	; (80024cc <HAL_MspInit+0x50>)
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ae:	603b      	str	r3, [r7, #0]
 80024b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80024b2:	2200      	movs	r2, #0
 80024b4:	2100      	movs	r1, #0
 80024b6:	2005      	movs	r0, #5
 80024b8:	f002 fd4d 	bl	8004f56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80024bc:	2005      	movs	r0, #5
 80024be:	f002 fd66 	bl	8004f8e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024c2:	bf00      	nop
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40021000 	.word	0x40021000

080024d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b08e      	sub	sp, #56	; 0x38
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	605a      	str	r2, [r3, #4]
 80024e2:	609a      	str	r2, [r3, #8]
 80024e4:	60da      	str	r2, [r3, #12]
 80024e6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024f0:	d136      	bne.n	8002560 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80024f2:	4b70      	ldr	r3, [pc, #448]	; (80026b4 <HAL_ADC_MspInit+0x1e4>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	3301      	adds	r3, #1
 80024f8:	4a6e      	ldr	r2, [pc, #440]	; (80026b4 <HAL_ADC_MspInit+0x1e4>)
 80024fa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80024fc:	4b6d      	ldr	r3, [pc, #436]	; (80026b4 <HAL_ADC_MspInit+0x1e4>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d10b      	bne.n	800251c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002504:	4b6c      	ldr	r3, [pc, #432]	; (80026b8 <HAL_ADC_MspInit+0x1e8>)
 8002506:	695b      	ldr	r3, [r3, #20]
 8002508:	4a6b      	ldr	r2, [pc, #428]	; (80026b8 <HAL_ADC_MspInit+0x1e8>)
 800250a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800250e:	6153      	str	r3, [r2, #20]
 8002510:	4b69      	ldr	r3, [pc, #420]	; (80026b8 <HAL_ADC_MspInit+0x1e8>)
 8002512:	695b      	ldr	r3, [r3, #20]
 8002514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002518:	623b      	str	r3, [r7, #32]
 800251a:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800251c:	4b66      	ldr	r3, [pc, #408]	; (80026b8 <HAL_ADC_MspInit+0x1e8>)
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	4a65      	ldr	r2, [pc, #404]	; (80026b8 <HAL_ADC_MspInit+0x1e8>)
 8002522:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002526:	6153      	str	r3, [r2, #20]
 8002528:	4b63      	ldr	r3, [pc, #396]	; (80026b8 <HAL_ADC_MspInit+0x1e8>)
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002530:	61fb      	str	r3, [r7, #28]
 8002532:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = SENS_4_Pin;
 8002534:	2308      	movs	r3, #8
 8002536:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002538:	2303      	movs	r3, #3
 800253a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253c:	2300      	movs	r3, #0
 800253e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SENS_4_GPIO_Port, &GPIO_InitStruct);
 8002540:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002544:	4619      	mov	r1, r3
 8002546:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800254a:	f002 ff71 	bl	8005430 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 800254e:	2200      	movs	r2, #0
 8002550:	2102      	movs	r1, #2
 8002552:	2012      	movs	r0, #18
 8002554:	f002 fcff 	bl	8004f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002558:	2012      	movs	r0, #18
 800255a:	f002 fd18 	bl	8004f8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800255e:	e0a4      	b.n	80026aa <HAL_ADC_MspInit+0x1da>
  else if(hadc->Instance==ADC2)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a55      	ldr	r2, [pc, #340]	; (80026bc <HAL_ADC_MspInit+0x1ec>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d176      	bne.n	8002658 <HAL_ADC_MspInit+0x188>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800256a:	4b52      	ldr	r3, [pc, #328]	; (80026b4 <HAL_ADC_MspInit+0x1e4>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	3301      	adds	r3, #1
 8002570:	4a50      	ldr	r2, [pc, #320]	; (80026b4 <HAL_ADC_MspInit+0x1e4>)
 8002572:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002574:	4b4f      	ldr	r3, [pc, #316]	; (80026b4 <HAL_ADC_MspInit+0x1e4>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d10b      	bne.n	8002594 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800257c:	4b4e      	ldr	r3, [pc, #312]	; (80026b8 <HAL_ADC_MspInit+0x1e8>)
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	4a4d      	ldr	r2, [pc, #308]	; (80026b8 <HAL_ADC_MspInit+0x1e8>)
 8002582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002586:	6153      	str	r3, [r2, #20]
 8002588:	4b4b      	ldr	r3, [pc, #300]	; (80026b8 <HAL_ADC_MspInit+0x1e8>)
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002590:	61bb      	str	r3, [r7, #24]
 8002592:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002594:	4b48      	ldr	r3, [pc, #288]	; (80026b8 <HAL_ADC_MspInit+0x1e8>)
 8002596:	695b      	ldr	r3, [r3, #20]
 8002598:	4a47      	ldr	r2, [pc, #284]	; (80026b8 <HAL_ADC_MspInit+0x1e8>)
 800259a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800259e:	6153      	str	r3, [r2, #20]
 80025a0:	4b45      	ldr	r3, [pc, #276]	; (80026b8 <HAL_ADC_MspInit+0x1e8>)
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a8:	617b      	str	r3, [r7, #20]
 80025aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ac:	4b42      	ldr	r3, [pc, #264]	; (80026b8 <HAL_ADC_MspInit+0x1e8>)
 80025ae:	695b      	ldr	r3, [r3, #20]
 80025b0:	4a41      	ldr	r2, [pc, #260]	; (80026b8 <HAL_ADC_MspInit+0x1e8>)
 80025b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025b6:	6153      	str	r3, [r2, #20]
 80025b8:	4b3f      	ldr	r3, [pc, #252]	; (80026b8 <HAL_ADC_MspInit+0x1e8>)
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025c0:	613b      	str	r3, [r7, #16]
 80025c2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = HAL_1_Pin|HAL_2_Pin|HAL_3_Pin|HAL_4_Pin;
 80025c4:	23f0      	movs	r3, #240	; 0xf0
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025c8:	2303      	movs	r3, #3
 80025ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025cc:	2300      	movs	r3, #0
 80025ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025d4:	4619      	mov	r1, r3
 80025d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025da:	f002 ff29 	bl	8005430 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SENS_3_Pin;
 80025de:	2304      	movs	r3, #4
 80025e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025e2:	2303      	movs	r3, #3
 80025e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e6:	2300      	movs	r3, #0
 80025e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SENS_3_GPIO_Port, &GPIO_InitStruct);
 80025ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025ee:	4619      	mov	r1, r3
 80025f0:	4833      	ldr	r0, [pc, #204]	; (80026c0 <HAL_ADC_MspInit+0x1f0>)
 80025f2:	f002 ff1d 	bl	8005430 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 80025f6:	4b33      	ldr	r3, [pc, #204]	; (80026c4 <HAL_ADC_MspInit+0x1f4>)
 80025f8:	4a33      	ldr	r2, [pc, #204]	; (80026c8 <HAL_ADC_MspInit+0x1f8>)
 80025fa:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025fc:	4b31      	ldr	r3, [pc, #196]	; (80026c4 <HAL_ADC_MspInit+0x1f4>)
 80025fe:	2200      	movs	r2, #0
 8002600:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002602:	4b30      	ldr	r3, [pc, #192]	; (80026c4 <HAL_ADC_MspInit+0x1f4>)
 8002604:	2200      	movs	r2, #0
 8002606:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002608:	4b2e      	ldr	r3, [pc, #184]	; (80026c4 <HAL_ADC_MspInit+0x1f4>)
 800260a:	2280      	movs	r2, #128	; 0x80
 800260c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800260e:	4b2d      	ldr	r3, [pc, #180]	; (80026c4 <HAL_ADC_MspInit+0x1f4>)
 8002610:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002614:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002616:	4b2b      	ldr	r3, [pc, #172]	; (80026c4 <HAL_ADC_MspInit+0x1f4>)
 8002618:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800261c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 800261e:	4b29      	ldr	r3, [pc, #164]	; (80026c4 <HAL_ADC_MspInit+0x1f4>)
 8002620:	2200      	movs	r2, #0
 8002622:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002624:	4b27      	ldr	r3, [pc, #156]	; (80026c4 <HAL_ADC_MspInit+0x1f4>)
 8002626:	2200      	movs	r2, #0
 8002628:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800262a:	4826      	ldr	r0, [pc, #152]	; (80026c4 <HAL_ADC_MspInit+0x1f4>)
 800262c:	f002 fcc9 	bl	8004fc2 <HAL_DMA_Init>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <HAL_ADC_MspInit+0x16a>
      Error_Handler();
 8002636:	f7ff fd7b 	bl	8002130 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a21      	ldr	r2, [pc, #132]	; (80026c4 <HAL_ADC_MspInit+0x1f4>)
 800263e:	639a      	str	r2, [r3, #56]	; 0x38
 8002640:	4a20      	ldr	r2, [pc, #128]	; (80026c4 <HAL_ADC_MspInit+0x1f4>)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8002646:	2200      	movs	r2, #0
 8002648:	2102      	movs	r1, #2
 800264a:	2012      	movs	r0, #18
 800264c:	f002 fc83 	bl	8004f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002650:	2012      	movs	r0, #18
 8002652:	f002 fc9c 	bl	8004f8e <HAL_NVIC_EnableIRQ>
}
 8002656:	e028      	b.n	80026aa <HAL_ADC_MspInit+0x1da>
  else if(hadc->Instance==ADC3)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a1b      	ldr	r2, [pc, #108]	; (80026cc <HAL_ADC_MspInit+0x1fc>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d123      	bne.n	80026aa <HAL_ADC_MspInit+0x1da>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8002662:	4b15      	ldr	r3, [pc, #84]	; (80026b8 <HAL_ADC_MspInit+0x1e8>)
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	4a14      	ldr	r2, [pc, #80]	; (80026b8 <HAL_ADC_MspInit+0x1e8>)
 8002668:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800266c:	6153      	str	r3, [r2, #20]
 800266e:	4b12      	ldr	r3, [pc, #72]	; (80026b8 <HAL_ADC_MspInit+0x1e8>)
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002676:	60fb      	str	r3, [r7, #12]
 8002678:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800267a:	4b0f      	ldr	r3, [pc, #60]	; (80026b8 <HAL_ADC_MspInit+0x1e8>)
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	4a0e      	ldr	r2, [pc, #56]	; (80026b8 <HAL_ADC_MspInit+0x1e8>)
 8002680:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002684:	6153      	str	r3, [r2, #20]
 8002686:	4b0c      	ldr	r3, [pc, #48]	; (80026b8 <HAL_ADC_MspInit+0x1e8>)
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800268e:	60bb      	str	r3, [r7, #8]
 8002690:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SENS_1_Pin|SENS_2_Pin;
 8002692:	2303      	movs	r3, #3
 8002694:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002696:	2303      	movs	r3, #3
 8002698:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269a:	2300      	movs	r3, #0
 800269c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800269e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026a2:	4619      	mov	r1, r3
 80026a4:	4806      	ldr	r0, [pc, #24]	; (80026c0 <HAL_ADC_MspInit+0x1f0>)
 80026a6:	f002 fec3 	bl	8005430 <HAL_GPIO_Init>
}
 80026aa:	bf00      	nop
 80026ac:	3738      	adds	r7, #56	; 0x38
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	2000073c 	.word	0x2000073c
 80026b8:	40021000 	.word	0x40021000
 80026bc:	50000100 	.word	0x50000100
 80026c0:	48000400 	.word	0x48000400
 80026c4:	2000017c 	.word	0x2000017c
 80026c8:	40020408 	.word	0x40020408
 80026cc:	50000400 	.word	0x50000400

080026d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b08a      	sub	sp, #40	; 0x28
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d8:	f107 0314 	add.w	r3, r7, #20
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	605a      	str	r2, [r3, #4]
 80026e2:	609a      	str	r2, [r3, #8]
 80026e4:	60da      	str	r2, [r3, #12]
 80026e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a1f      	ldr	r2, [pc, #124]	; (800276c <HAL_I2C_MspInit+0x9c>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d138      	bne.n	8002764 <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026f2:	4b1f      	ldr	r3, [pc, #124]	; (8002770 <HAL_I2C_MspInit+0xa0>)
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	4a1e      	ldr	r2, [pc, #120]	; (8002770 <HAL_I2C_MspInit+0xa0>)
 80026f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026fc:	6153      	str	r3, [r2, #20]
 80026fe:	4b1c      	ldr	r3, [pc, #112]	; (8002770 <HAL_I2C_MspInit+0xa0>)
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002706:	613b      	str	r3, [r7, #16]
 8002708:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800270a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800270e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002710:	2312      	movs	r3, #18
 8002712:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002714:	2301      	movs	r3, #1
 8002716:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002718:	2303      	movs	r3, #3
 800271a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800271c:	2304      	movs	r3, #4
 800271e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002720:	f107 0314 	add.w	r3, r7, #20
 8002724:	4619      	mov	r1, r3
 8002726:	4813      	ldr	r0, [pc, #76]	; (8002774 <HAL_I2C_MspInit+0xa4>)
 8002728:	f002 fe82 	bl	8005430 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800272c:	4b10      	ldr	r3, [pc, #64]	; (8002770 <HAL_I2C_MspInit+0xa0>)
 800272e:	69db      	ldr	r3, [r3, #28]
 8002730:	4a0f      	ldr	r2, [pc, #60]	; (8002770 <HAL_I2C_MspInit+0xa0>)
 8002732:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002736:	61d3      	str	r3, [r2, #28]
 8002738:	4b0d      	ldr	r3, [pc, #52]	; (8002770 <HAL_I2C_MspInit+0xa0>)
 800273a:	69db      	ldr	r3, [r3, #28]
 800273c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002740:	60fb      	str	r3, [r7, #12]
 8002742:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002744:	2200      	movs	r2, #0
 8002746:	2100      	movs	r1, #0
 8002748:	201f      	movs	r0, #31
 800274a:	f002 fc04 	bl	8004f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800274e:	201f      	movs	r0, #31
 8002750:	f002 fc1d 	bl	8004f8e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002754:	2200      	movs	r2, #0
 8002756:	2100      	movs	r1, #0
 8002758:	2020      	movs	r0, #32
 800275a:	f002 fbfc 	bl	8004f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800275e:	2020      	movs	r0, #32
 8002760:	f002 fc15 	bl	8004f8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002764:	bf00      	nop
 8002766:	3728      	adds	r7, #40	; 0x28
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40005400 	.word	0x40005400
 8002770:	40021000 	.word	0x40021000
 8002774:	48000400 	.word	0x48000400

08002778 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a0d      	ldr	r2, [pc, #52]	; (80027bc <HAL_RTC_MspInit+0x44>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d111      	bne.n	80027ae <HAL_RTC_MspInit+0x36>
 800278a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800278e:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	fa93 f3a3 	rbit	r3, r3
 8002796:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002798:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800279a:	fab3 f383 	clz	r3, r3
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	461a      	mov	r2, r3
 80027a2:	4b07      	ldr	r3, [pc, #28]	; (80027c0 <HAL_RTC_MspInit+0x48>)
 80027a4:	4413      	add	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	461a      	mov	r2, r3
 80027aa:	2301      	movs	r3, #1
 80027ac:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80027ae:	bf00      	nop
 80027b0:	3714      	adds	r7, #20
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	40002800 	.word	0x40002800
 80027c0:	10908100 	.word	0x10908100

080027c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b08e      	sub	sp, #56	; 0x38
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	605a      	str	r2, [r3, #4]
 80027d6:	609a      	str	r2, [r3, #8]
 80027d8:	60da      	str	r2, [r3, #12]
 80027da:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a3f      	ldr	r2, [pc, #252]	; (80028e0 <HAL_TIM_Base_MspInit+0x11c>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d10c      	bne.n	8002800 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027e6:	4b3f      	ldr	r3, [pc, #252]	; (80028e4 <HAL_TIM_Base_MspInit+0x120>)
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	4a3e      	ldr	r2, [pc, #248]	; (80028e4 <HAL_TIM_Base_MspInit+0x120>)
 80027ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027f0:	6193      	str	r3, [r2, #24]
 80027f2:	4b3c      	ldr	r3, [pc, #240]	; (80028e4 <HAL_TIM_Base_MspInit+0x120>)
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027fa:	623b      	str	r3, [r7, #32]
 80027fc:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80027fe:	e06b      	b.n	80028d8 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM2)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002808:	d131      	bne.n	800286e <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800280a:	4b36      	ldr	r3, [pc, #216]	; (80028e4 <HAL_TIM_Base_MspInit+0x120>)
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	4a35      	ldr	r2, [pc, #212]	; (80028e4 <HAL_TIM_Base_MspInit+0x120>)
 8002810:	f043 0301 	orr.w	r3, r3, #1
 8002814:	61d3      	str	r3, [r2, #28]
 8002816:	4b33      	ldr	r3, [pc, #204]	; (80028e4 <HAL_TIM_Base_MspInit+0x120>)
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	61fb      	str	r3, [r7, #28]
 8002820:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002822:	4b30      	ldr	r3, [pc, #192]	; (80028e4 <HAL_TIM_Base_MspInit+0x120>)
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	4a2f      	ldr	r2, [pc, #188]	; (80028e4 <HAL_TIM_Base_MspInit+0x120>)
 8002828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800282c:	6153      	str	r3, [r2, #20]
 800282e:	4b2d      	ldr	r3, [pc, #180]	; (80028e4 <HAL_TIM_Base_MspInit+0x120>)
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002836:	61bb      	str	r3, [r7, #24]
 8002838:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800283a:	2301      	movs	r3, #1
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283e:	2302      	movs	r3, #2
 8002840:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002842:	2300      	movs	r3, #0
 8002844:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002846:	2300      	movs	r3, #0
 8002848:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800284a:	2301      	movs	r3, #1
 800284c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800284e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002852:	4619      	mov	r1, r3
 8002854:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002858:	f002 fdea 	bl	8005430 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800285c:	2200      	movs	r2, #0
 800285e:	2100      	movs	r1, #0
 8002860:	201c      	movs	r0, #28
 8002862:	f002 fb78 	bl	8004f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002866:	201c      	movs	r0, #28
 8002868:	f002 fb91 	bl	8004f8e <HAL_NVIC_EnableIRQ>
}
 800286c:	e034      	b.n	80028d8 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM3)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a1d      	ldr	r2, [pc, #116]	; (80028e8 <HAL_TIM_Base_MspInit+0x124>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d10c      	bne.n	8002892 <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002878:	4b1a      	ldr	r3, [pc, #104]	; (80028e4 <HAL_TIM_Base_MspInit+0x120>)
 800287a:	69db      	ldr	r3, [r3, #28]
 800287c:	4a19      	ldr	r2, [pc, #100]	; (80028e4 <HAL_TIM_Base_MspInit+0x120>)
 800287e:	f043 0302 	orr.w	r3, r3, #2
 8002882:	61d3      	str	r3, [r2, #28]
 8002884:	4b17      	ldr	r3, [pc, #92]	; (80028e4 <HAL_TIM_Base_MspInit+0x120>)
 8002886:	69db      	ldr	r3, [r3, #28]
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	617b      	str	r3, [r7, #20]
 800288e:	697b      	ldr	r3, [r7, #20]
}
 8002890:	e022      	b.n	80028d8 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM8)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a15      	ldr	r2, [pc, #84]	; (80028ec <HAL_TIM_Base_MspInit+0x128>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d10c      	bne.n	80028b6 <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800289c:	4b11      	ldr	r3, [pc, #68]	; (80028e4 <HAL_TIM_Base_MspInit+0x120>)
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	4a10      	ldr	r2, [pc, #64]	; (80028e4 <HAL_TIM_Base_MspInit+0x120>)
 80028a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80028a6:	6193      	str	r3, [r2, #24]
 80028a8:	4b0e      	ldr	r3, [pc, #56]	; (80028e4 <HAL_TIM_Base_MspInit+0x120>)
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028b0:	613b      	str	r3, [r7, #16]
 80028b2:	693b      	ldr	r3, [r7, #16]
}
 80028b4:	e010      	b.n	80028d8 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM15)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a0d      	ldr	r2, [pc, #52]	; (80028f0 <HAL_TIM_Base_MspInit+0x12c>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d10b      	bne.n	80028d8 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80028c0:	4b08      	ldr	r3, [pc, #32]	; (80028e4 <HAL_TIM_Base_MspInit+0x120>)
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	4a07      	ldr	r2, [pc, #28]	; (80028e4 <HAL_TIM_Base_MspInit+0x120>)
 80028c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ca:	6193      	str	r3, [r2, #24]
 80028cc:	4b05      	ldr	r3, [pc, #20]	; (80028e4 <HAL_TIM_Base_MspInit+0x120>)
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	68fb      	ldr	r3, [r7, #12]
}
 80028d8:	bf00      	nop
 80028da:	3738      	adds	r7, #56	; 0x38
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40012c00 	.word	0x40012c00
 80028e4:	40021000 	.word	0x40021000
 80028e8:	40000400 	.word	0x40000400
 80028ec:	40013400 	.word	0x40013400
 80028f0:	40014000 	.word	0x40014000

080028f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b08c      	sub	sp, #48	; 0x30
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028fc:	f107 031c 	add.w	r3, r7, #28
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	609a      	str	r2, [r3, #8]
 8002908:	60da      	str	r2, [r3, #12]
 800290a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a4c      	ldr	r2, [pc, #304]	; (8002a44 <HAL_TIM_MspPostInit+0x150>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d11e      	bne.n	8002954 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002916:	4b4c      	ldr	r3, [pc, #304]	; (8002a48 <HAL_TIM_MspPostInit+0x154>)
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	4a4b      	ldr	r2, [pc, #300]	; (8002a48 <HAL_TIM_MspPostInit+0x154>)
 800291c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002920:	6153      	str	r3, [r2, #20]
 8002922:	4b49      	ldr	r3, [pc, #292]	; (8002a48 <HAL_TIM_MspPostInit+0x154>)
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292a:	61bb      	str	r3, [r7, #24]
 800292c:	69bb      	ldr	r3, [r7, #24]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 800292e:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8002932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002934:	2302      	movs	r3, #2
 8002936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002938:	2300      	movs	r3, #0
 800293a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800293c:	2300      	movs	r3, #0
 800293e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002940:	2306      	movs	r3, #6
 8002942:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002944:	f107 031c 	add.w	r3, r7, #28
 8002948:	4619      	mov	r1, r3
 800294a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800294e:	f002 fd6f 	bl	8005430 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8002952:	e072      	b.n	8002a3a <HAL_TIM_MspPostInit+0x146>
  else if(htim->Instance==TIM8)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a3c      	ldr	r2, [pc, #240]	; (8002a4c <HAL_TIM_MspPostInit+0x158>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d13a      	bne.n	80029d4 <HAL_TIM_MspPostInit+0xe0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800295e:	4b3a      	ldr	r3, [pc, #232]	; (8002a48 <HAL_TIM_MspPostInit+0x154>)
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	4a39      	ldr	r2, [pc, #228]	; (8002a48 <HAL_TIM_MspPostInit+0x154>)
 8002964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002968:	6153      	str	r3, [r2, #20]
 800296a:	4b37      	ldr	r3, [pc, #220]	; (8002a48 <HAL_TIM_MspPostInit+0x154>)
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002972:	617b      	str	r3, [r7, #20]
 8002974:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002976:	4b34      	ldr	r3, [pc, #208]	; (8002a48 <HAL_TIM_MspPostInit+0x154>)
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	4a33      	ldr	r2, [pc, #204]	; (8002a48 <HAL_TIM_MspPostInit+0x154>)
 800297c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002980:	6153      	str	r3, [r2, #20]
 8002982:	4b31      	ldr	r3, [pc, #196]	; (8002a48 <HAL_TIM_MspPostInit+0x154>)
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800298a:	613b      	str	r3, [r7, #16]
 800298c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800298e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002992:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002994:	2302      	movs	r3, #2
 8002996:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002998:	2300      	movs	r3, #0
 800299a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299c:	2300      	movs	r3, #0
 800299e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 80029a0:	2302      	movs	r3, #2
 80029a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a4:	f107 031c 	add.w	r3, r7, #28
 80029a8:	4619      	mov	r1, r3
 80029aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029ae:	f002 fd3f 	bl	8005430 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80029b2:	2308      	movs	r3, #8
 80029b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b6:	2302      	movs	r3, #2
 80029b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ba:	2300      	movs	r3, #0
 80029bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029be:	2300      	movs	r3, #0
 80029c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80029c2:	2304      	movs	r3, #4
 80029c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029c6:	f107 031c 	add.w	r3, r7, #28
 80029ca:	4619      	mov	r1, r3
 80029cc:	4820      	ldr	r0, [pc, #128]	; (8002a50 <HAL_TIM_MspPostInit+0x15c>)
 80029ce:	f002 fd2f 	bl	8005430 <HAL_GPIO_Init>
}
 80029d2:	e032      	b.n	8002a3a <HAL_TIM_MspPostInit+0x146>
  else if(htim->Instance==TIM15)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a1e      	ldr	r2, [pc, #120]	; (8002a54 <HAL_TIM_MspPostInit+0x160>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d12d      	bne.n	8002a3a <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029de:	4b1a      	ldr	r3, [pc, #104]	; (8002a48 <HAL_TIM_MspPostInit+0x154>)
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	4a19      	ldr	r2, [pc, #100]	; (8002a48 <HAL_TIM_MspPostInit+0x154>)
 80029e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029e8:	6153      	str	r3, [r2, #20]
 80029ea:	4b17      	ldr	r3, [pc, #92]	; (8002a48 <HAL_TIM_MspPostInit+0x154>)
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80029f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fc:	2302      	movs	r3, #2
 80029fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a00:	2300      	movs	r3, #0
 8002a02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a04:	2300      	movs	r3, #0
 8002a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a0c:	f107 031c 	add.w	r3, r7, #28
 8002a10:	4619      	mov	r1, r3
 8002a12:	480f      	ldr	r0, [pc, #60]	; (8002a50 <HAL_TIM_MspPostInit+0x15c>)
 8002a14:	f002 fd0c 	bl	8005430 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002a18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1e:	2302      	movs	r3, #2
 8002a20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a22:	2300      	movs	r3, #0
 8002a24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a26:	2300      	movs	r3, #0
 8002a28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM15;
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a2e:	f107 031c 	add.w	r3, r7, #28
 8002a32:	4619      	mov	r1, r3
 8002a34:	4806      	ldr	r0, [pc, #24]	; (8002a50 <HAL_TIM_MspPostInit+0x15c>)
 8002a36:	f002 fcfb 	bl	8005430 <HAL_GPIO_Init>
}
 8002a3a:	bf00      	nop
 8002a3c:	3730      	adds	r7, #48	; 0x30
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	40012c00 	.word	0x40012c00
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	40013400 	.word	0x40013400
 8002a50:	48000400 	.word	0x48000400
 8002a54:	40014000 	.word	0x40014000

08002a58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b08c      	sub	sp, #48	; 0x30
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a60:	f107 031c 	add.w	r3, r7, #28
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	605a      	str	r2, [r3, #4]
 8002a6a:	609a      	str	r2, [r3, #8]
 8002a6c:	60da      	str	r2, [r3, #12]
 8002a6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a67      	ldr	r2, [pc, #412]	; (8002c14 <HAL_UART_MspInit+0x1bc>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d128      	bne.n	8002acc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a7a:	4b67      	ldr	r3, [pc, #412]	; (8002c18 <HAL_UART_MspInit+0x1c0>)
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	4a66      	ldr	r2, [pc, #408]	; (8002c18 <HAL_UART_MspInit+0x1c0>)
 8002a80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a84:	6193      	str	r3, [r2, #24]
 8002a86:	4b64      	ldr	r3, [pc, #400]	; (8002c18 <HAL_UART_MspInit+0x1c0>)
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a8e:	61bb      	str	r3, [r7, #24]
 8002a90:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a92:	4b61      	ldr	r3, [pc, #388]	; (8002c18 <HAL_UART_MspInit+0x1c0>)
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	4a60      	ldr	r2, [pc, #384]	; (8002c18 <HAL_UART_MspInit+0x1c0>)
 8002a98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a9c:	6153      	str	r3, [r2, #20]
 8002a9e:	4b5e      	ldr	r3, [pc, #376]	; (8002c18 <HAL_UART_MspInit+0x1c0>)
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aa6:	617b      	str	r3, [r7, #20]
 8002aa8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002aaa:	23c0      	movs	r3, #192	; 0xc0
 8002aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aae:	2302      	movs	r3, #2
 8002ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002aba:	2307      	movs	r3, #7
 8002abc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002abe:	f107 031c 	add.w	r3, r7, #28
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	4855      	ldr	r0, [pc, #340]	; (8002c1c <HAL_UART_MspInit+0x1c4>)
 8002ac6:	f002 fcb3 	bl	8005430 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002aca:	e09f      	b.n	8002c0c <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==USART2)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a53      	ldr	r2, [pc, #332]	; (8002c20 <HAL_UART_MspInit+0x1c8>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	f040 809a 	bne.w	8002c0c <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ad8:	4b4f      	ldr	r3, [pc, #316]	; (8002c18 <HAL_UART_MspInit+0x1c0>)
 8002ada:	69db      	ldr	r3, [r3, #28]
 8002adc:	4a4e      	ldr	r2, [pc, #312]	; (8002c18 <HAL_UART_MspInit+0x1c0>)
 8002ade:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ae2:	61d3      	str	r3, [r2, #28]
 8002ae4:	4b4c      	ldr	r3, [pc, #304]	; (8002c18 <HAL_UART_MspInit+0x1c0>)
 8002ae6:	69db      	ldr	r3, [r3, #28]
 8002ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aec:	613b      	str	r3, [r7, #16]
 8002aee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002af0:	4b49      	ldr	r3, [pc, #292]	; (8002c18 <HAL_UART_MspInit+0x1c0>)
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	4a48      	ldr	r2, [pc, #288]	; (8002c18 <HAL_UART_MspInit+0x1c0>)
 8002af6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002afa:	6153      	str	r3, [r2, #20]
 8002afc:	4b46      	ldr	r3, [pc, #280]	; (8002c18 <HAL_UART_MspInit+0x1c0>)
 8002afe:	695b      	ldr	r3, [r3, #20]
 8002b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b04:	60fb      	str	r3, [r7, #12]
 8002b06:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b08:	4b43      	ldr	r3, [pc, #268]	; (8002c18 <HAL_UART_MspInit+0x1c0>)
 8002b0a:	695b      	ldr	r3, [r3, #20]
 8002b0c:	4a42      	ldr	r2, [pc, #264]	; (8002c18 <HAL_UART_MspInit+0x1c0>)
 8002b0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b12:	6153      	str	r3, [r2, #20]
 8002b14:	4b40      	ldr	r3, [pc, #256]	; (8002c18 <HAL_UART_MspInit+0x1c0>)
 8002b16:	695b      	ldr	r3, [r3, #20]
 8002b18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b1c:	60bb      	str	r3, [r7, #8]
 8002b1e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b20:	2304      	movs	r3, #4
 8002b22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b24:	2302      	movs	r3, #2
 8002b26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b30:	2307      	movs	r3, #7
 8002b32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b34:	f107 031c 	add.w	r3, r7, #28
 8002b38:	4619      	mov	r1, r3
 8002b3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b3e:	f002 fc77 	bl	8005430 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002b42:	2310      	movs	r3, #16
 8002b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b46:	2302      	movs	r3, #2
 8002b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b52:	2307      	movs	r3, #7
 8002b54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b56:	f107 031c 	add.w	r3, r7, #28
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	482f      	ldr	r0, [pc, #188]	; (8002c1c <HAL_UART_MspInit+0x1c4>)
 8002b5e:	f002 fc67 	bl	8005430 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002b62:	4b30      	ldr	r3, [pc, #192]	; (8002c24 <HAL_UART_MspInit+0x1cc>)
 8002b64:	4a30      	ldr	r2, [pc, #192]	; (8002c28 <HAL_UART_MspInit+0x1d0>)
 8002b66:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b68:	4b2e      	ldr	r3, [pc, #184]	; (8002c24 <HAL_UART_MspInit+0x1cc>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b6e:	4b2d      	ldr	r3, [pc, #180]	; (8002c24 <HAL_UART_MspInit+0x1cc>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b74:	4b2b      	ldr	r3, [pc, #172]	; (8002c24 <HAL_UART_MspInit+0x1cc>)
 8002b76:	2280      	movs	r2, #128	; 0x80
 8002b78:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b7a:	4b2a      	ldr	r3, [pc, #168]	; (8002c24 <HAL_UART_MspInit+0x1cc>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b80:	4b28      	ldr	r3, [pc, #160]	; (8002c24 <HAL_UART_MspInit+0x1cc>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002b86:	4b27      	ldr	r3, [pc, #156]	; (8002c24 <HAL_UART_MspInit+0x1cc>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002b8c:	4b25      	ldr	r3, [pc, #148]	; (8002c24 <HAL_UART_MspInit+0x1cc>)
 8002b8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b92:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002b94:	4823      	ldr	r0, [pc, #140]	; (8002c24 <HAL_UART_MspInit+0x1cc>)
 8002b96:	f002 fa14 	bl	8004fc2 <HAL_DMA_Init>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <HAL_UART_MspInit+0x14c>
      Error_Handler();
 8002ba0:	f7ff fac6 	bl	8002130 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a1f      	ldr	r2, [pc, #124]	; (8002c24 <HAL_UART_MspInit+0x1cc>)
 8002ba8:	675a      	str	r2, [r3, #116]	; 0x74
 8002baa:	4a1e      	ldr	r2, [pc, #120]	; (8002c24 <HAL_UART_MspInit+0x1cc>)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8002bb0:	4b1e      	ldr	r3, [pc, #120]	; (8002c2c <HAL_UART_MspInit+0x1d4>)
 8002bb2:	4a1f      	ldr	r2, [pc, #124]	; (8002c30 <HAL_UART_MspInit+0x1d8>)
 8002bb4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002bb6:	4b1d      	ldr	r3, [pc, #116]	; (8002c2c <HAL_UART_MspInit+0x1d4>)
 8002bb8:	2210      	movs	r2, #16
 8002bba:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bbc:	4b1b      	ldr	r3, [pc, #108]	; (8002c2c <HAL_UART_MspInit+0x1d4>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002bc2:	4b1a      	ldr	r3, [pc, #104]	; (8002c2c <HAL_UART_MspInit+0x1d4>)
 8002bc4:	2280      	movs	r2, #128	; 0x80
 8002bc6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bc8:	4b18      	ldr	r3, [pc, #96]	; (8002c2c <HAL_UART_MspInit+0x1d4>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bce:	4b17      	ldr	r3, [pc, #92]	; (8002c2c <HAL_UART_MspInit+0x1d4>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002bd4:	4b15      	ldr	r3, [pc, #84]	; (8002c2c <HAL_UART_MspInit+0x1d4>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002bda:	4b14      	ldr	r3, [pc, #80]	; (8002c2c <HAL_UART_MspInit+0x1d4>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002be0:	4812      	ldr	r0, [pc, #72]	; (8002c2c <HAL_UART_MspInit+0x1d4>)
 8002be2:	f002 f9ee 	bl	8004fc2 <HAL_DMA_Init>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <HAL_UART_MspInit+0x198>
      Error_Handler();
 8002bec:	f7ff faa0 	bl	8002130 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a0e      	ldr	r2, [pc, #56]	; (8002c2c <HAL_UART_MspInit+0x1d4>)
 8002bf4:	671a      	str	r2, [r3, #112]	; 0x70
 8002bf6:	4a0d      	ldr	r2, [pc, #52]	; (8002c2c <HAL_UART_MspInit+0x1d4>)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	2101      	movs	r1, #1
 8002c00:	2026      	movs	r0, #38	; 0x26
 8002c02:	f002 f9a8 	bl	8004f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002c06:	2026      	movs	r0, #38	; 0x26
 8002c08:	f002 f9c1 	bl	8004f8e <HAL_NVIC_EnableIRQ>
}
 8002c0c:	bf00      	nop
 8002c0e:	3730      	adds	r7, #48	; 0x30
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40013800 	.word	0x40013800
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	48000400 	.word	0x48000400
 8002c20:	40004400 	.word	0x40004400
 8002c24:	200004c0 	.word	0x200004c0
 8002c28:	4002006c 	.word	0x4002006c
 8002c2c:	20000504 	.word	0x20000504
 8002c30:	40020080 	.word	0x40020080

08002c34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c38:	e7fe      	b.n	8002c38 <NMI_Handler+0x4>

08002c3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c3e:	e7fe      	b.n	8002c3e <HardFault_Handler+0x4>

08002c40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c44:	e7fe      	b.n	8002c44 <MemManage_Handler+0x4>

08002c46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c46:	b480      	push	{r7}
 8002c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c4a:	e7fe      	b.n	8002c4a <BusFault_Handler+0x4>

08002c4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c50:	e7fe      	b.n	8002c50 <UsageFault_Handler+0x4>

08002c52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c52:	b480      	push	{r7}
 8002c54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c56:	bf00      	nop
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c64:	bf00      	nop
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c72:	bf00      	nop
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c80:	f000 f930 	bl	8002ee4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c84:	bf00      	nop
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002c8c:	bf00      	nop
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_Pin);
 8002c9a:	2002      	movs	r0, #2
 8002c9c:	f002 fd8c 	bl	80057b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002ca0:	bf00      	nop
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002ca8:	4802      	ldr	r0, [pc, #8]	; (8002cb4 <DMA1_Channel6_IRQHandler+0x10>)
 8002caa:	f002 faa7 	bl	80051fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002cae:	bf00      	nop
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	200004c0 	.word	0x200004c0

08002cb8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002cbc:	4802      	ldr	r0, [pc, #8]	; (8002cc8 <DMA1_Channel7_IRQHandler+0x10>)
 8002cbe:	f002 fa9d 	bl	80051fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002cc2:	bf00      	nop
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	20000504 	.word	0x20000504

08002ccc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002cd0:	4803      	ldr	r0, [pc, #12]	; (8002ce0 <ADC1_2_IRQHandler+0x14>)
 8002cd2:	f000 ff23 	bl	8003b1c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002cd6:	4803      	ldr	r0, [pc, #12]	; (8002ce4 <ADC1_2_IRQHandler+0x18>)
 8002cd8:	f000 ff20 	bl	8003b1c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002cdc:	bf00      	nop
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	2000008c 	.word	0x2000008c
 8002ce4:	200000dc 	.word	0x200000dc

08002ce8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002cec:	2020      	movs	r0, #32
 8002cee:	f002 fd63 	bl	80057b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002cf2:	bf00      	nop
 8002cf4:	bd80      	pop	{r7, pc}
	...

08002cf8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002cfc:	4802      	ldr	r0, [pc, #8]	; (8002d08 <TIM2_IRQHandler+0x10>)
 8002cfe:	f006 fb43 	bl	8009388 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002d02:	bf00      	nop
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	20000280 	.word	0x20000280

08002d0c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002d10:	4802      	ldr	r0, [pc, #8]	; (8002d1c <I2C1_EV_IRQHandler+0x10>)
 8002d12:	f002 fff6 	bl	8005d02 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002d16:	bf00      	nop
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	200001c0 	.word	0x200001c0

08002d20 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002d24:	4802      	ldr	r0, [pc, #8]	; (8002d30 <I2C1_ER_IRQHandler+0x10>)
 8002d26:	f003 f806 	bl	8005d36 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002d2a:	bf00      	nop
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	200001c0 	.word	0x200001c0

08002d34 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002d38:	4802      	ldr	r0, [pc, #8]	; (8002d44 <USART2_IRQHandler+0x10>)
 8002d3a:	f007 ff8d 	bl	800ac58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002d3e:	bf00      	nop
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	20000438 	.word	0x20000438

08002d48 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(START_Pin);
 8002d4c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002d50:	f002 fd32 	bl	80057b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(STOP_Pin);
 8002d54:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002d58:	f002 fd2e 	bl	80057b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002d5c:	bf00      	nop
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002d64:	4802      	ldr	r0, [pc, #8]	; (8002d70 <DMA2_Channel1_IRQHandler+0x10>)
 8002d66:	f002 fa49 	bl	80051fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8002d6a:	bf00      	nop
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	2000017c 	.word	0x2000017c

08002d74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d7c:	4a14      	ldr	r2, [pc, #80]	; (8002dd0 <_sbrk+0x5c>)
 8002d7e:	4b15      	ldr	r3, [pc, #84]	; (8002dd4 <_sbrk+0x60>)
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d88:	4b13      	ldr	r3, [pc, #76]	; (8002dd8 <_sbrk+0x64>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d102      	bne.n	8002d96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d90:	4b11      	ldr	r3, [pc, #68]	; (8002dd8 <_sbrk+0x64>)
 8002d92:	4a12      	ldr	r2, [pc, #72]	; (8002ddc <_sbrk+0x68>)
 8002d94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d96:	4b10      	ldr	r3, [pc, #64]	; (8002dd8 <_sbrk+0x64>)
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d207      	bcs.n	8002db4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002da4:	f009 f926 	bl	800bff4 <__errno>
 8002da8:	4603      	mov	r3, r0
 8002daa:	220c      	movs	r2, #12
 8002dac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dae:	f04f 33ff 	mov.w	r3, #4294967295
 8002db2:	e009      	b.n	8002dc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002db4:	4b08      	ldr	r3, [pc, #32]	; (8002dd8 <_sbrk+0x64>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dba:	4b07      	ldr	r3, [pc, #28]	; (8002dd8 <_sbrk+0x64>)
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	4a05      	ldr	r2, [pc, #20]	; (8002dd8 <_sbrk+0x64>)
 8002dc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3718      	adds	r7, #24
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	2000a000 	.word	0x2000a000
 8002dd4:	00000400 	.word	0x00000400
 8002dd8:	20000740 	.word	0x20000740
 8002ddc:	20000890 	.word	0x20000890

08002de0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002de4:	4b06      	ldr	r3, [pc, #24]	; (8002e00 <SystemInit+0x20>)
 8002de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dea:	4a05      	ldr	r2, [pc, #20]	; (8002e00 <SystemInit+0x20>)
 8002dec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002df0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002df4:	bf00      	nop
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	e000ed00 	.word	0xe000ed00

08002e04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002e04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e3c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002e08:	f7ff ffea 	bl	8002de0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e0c:	480c      	ldr	r0, [pc, #48]	; (8002e40 <LoopForever+0x6>)
  ldr r1, =_edata
 8002e0e:	490d      	ldr	r1, [pc, #52]	; (8002e44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e10:	4a0d      	ldr	r2, [pc, #52]	; (8002e48 <LoopForever+0xe>)
  movs r3, #0
 8002e12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e14:	e002      	b.n	8002e1c <LoopCopyDataInit>

08002e16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e1a:	3304      	adds	r3, #4

08002e1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e20:	d3f9      	bcc.n	8002e16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e22:	4a0a      	ldr	r2, [pc, #40]	; (8002e4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e24:	4c0a      	ldr	r4, [pc, #40]	; (8002e50 <LoopForever+0x16>)
  movs r3, #0
 8002e26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e28:	e001      	b.n	8002e2e <LoopFillZerobss>

08002e2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e2c:	3204      	adds	r2, #4

08002e2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e30:	d3fb      	bcc.n	8002e2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e32:	f009 f8e5 	bl	800c000 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002e36:	f7fd fd97 	bl	8000968 <main>

08002e3a <LoopForever>:

LoopForever:
    b LoopForever
 8002e3a:	e7fe      	b.n	8002e3a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002e3c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002e40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e44:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002e48:	0800ca20 	.word	0x0800ca20
  ldr r2, =_sbss
 8002e4c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002e50:	20000890 	.word	0x20000890

08002e54 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002e54:	e7fe      	b.n	8002e54 <ADC3_IRQHandler>
	...

08002e58 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e5c:	4b08      	ldr	r3, [pc, #32]	; (8002e80 <HAL_Init+0x28>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a07      	ldr	r2, [pc, #28]	; (8002e80 <HAL_Init+0x28>)
 8002e62:	f043 0310 	orr.w	r3, r3, #16
 8002e66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e68:	2003      	movs	r0, #3
 8002e6a:	f002 f869 	bl	8004f40 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e6e:	200f      	movs	r0, #15
 8002e70:	f000 f808 	bl	8002e84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e74:	f7ff fb02 	bl	800247c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	40022000 	.word	0x40022000

08002e84 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e8c:	4b12      	ldr	r3, [pc, #72]	; (8002ed8 <HAL_InitTick+0x54>)
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	4b12      	ldr	r3, [pc, #72]	; (8002edc <HAL_InitTick+0x58>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	4619      	mov	r1, r3
 8002e96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f002 f881 	bl	8004faa <HAL_SYSTICK_Config>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e00e      	b.n	8002ed0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2b0f      	cmp	r3, #15
 8002eb6:	d80a      	bhi.n	8002ece <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002eb8:	2200      	movs	r2, #0
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ec0:	f002 f849 	bl	8004f56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ec4:	4a06      	ldr	r2, [pc, #24]	; (8002ee0 <HAL_InitTick+0x5c>)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	e000      	b.n	8002ed0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3708      	adds	r7, #8
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	20000014 	.word	0x20000014
 8002edc:	2000001c 	.word	0x2000001c
 8002ee0:	20000018 	.word	0x20000018

08002ee4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ee8:	4b06      	ldr	r3, [pc, #24]	; (8002f04 <HAL_IncTick+0x20>)
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	461a      	mov	r2, r3
 8002eee:	4b06      	ldr	r3, [pc, #24]	; (8002f08 <HAL_IncTick+0x24>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	4a04      	ldr	r2, [pc, #16]	; (8002f08 <HAL_IncTick+0x24>)
 8002ef6:	6013      	str	r3, [r2, #0]
}
 8002ef8:	bf00      	nop
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	2000001c 	.word	0x2000001c
 8002f08:	20000744 	.word	0x20000744

08002f0c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  return uwTick;  
 8002f10:	4b03      	ldr	r3, [pc, #12]	; (8002f20 <HAL_GetTick+0x14>)
 8002f12:	681b      	ldr	r3, [r3, #0]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	20000744 	.word	0x20000744

08002f24 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f2c:	f7ff ffee 	bl	8002f0c <HAL_GetTick>
 8002f30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f3c:	d005      	beq.n	8002f4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f3e:	4b0a      	ldr	r3, [pc, #40]	; (8002f68 <HAL_Delay+0x44>)
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	461a      	mov	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	4413      	add	r3, r2
 8002f48:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002f4a:	bf00      	nop
 8002f4c:	f7ff ffde 	bl	8002f0c <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d8f7      	bhi.n	8002f4c <HAL_Delay+0x28>
  {
  }
}
 8002f5c:	bf00      	nop
 8002f5e:	bf00      	nop
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	2000001c 	.word	0x2000001c

08002f6c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b09a      	sub	sp, #104	; 0x68
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d101      	bne.n	8002fc8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e1c9      	b.n	800335c <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	f003 0310 	and.w	r3, r3, #16
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d176      	bne.n	80030c8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d152      	bne.n	8003088 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f7ff fa67 	bl	80024d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d13b      	bne.n	8003088 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f001 fda9 	bl	8004b68 <ADC_Disable>
 8003016:	4603      	mov	r3, r0
 8003018:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003020:	f003 0310 	and.w	r3, r3, #16
 8003024:	2b00      	cmp	r3, #0
 8003026:	d12f      	bne.n	8003088 <HAL_ADC_Init+0xe0>
 8003028:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800302c:	2b00      	cmp	r3, #0
 800302e:	d12b      	bne.n	8003088 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003034:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003038:	f023 0302 	bic.w	r3, r3, #2
 800303c:	f043 0202 	orr.w	r2, r3, #2
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689a      	ldr	r2, [r3, #8]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003052:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689a      	ldr	r2, [r3, #8]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003062:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003064:	4b86      	ldr	r3, [pc, #536]	; (8003280 <HAL_ADC_Init+0x2d8>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a86      	ldr	r2, [pc, #536]	; (8003284 <HAL_ADC_Init+0x2dc>)
 800306a:	fba2 2303 	umull	r2, r3, r2, r3
 800306e:	0c9a      	lsrs	r2, r3, #18
 8003070:	4613      	mov	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	4413      	add	r3, r2
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800307a:	e002      	b.n	8003082 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	3b01      	subs	r3, #1
 8003080:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1f9      	bne.n	800307c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d007      	beq.n	80030a6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80030a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030a4:	d110      	bne.n	80030c8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	f023 0312 	bic.w	r3, r3, #18
 80030ae:	f043 0210 	orr.w	r2, r3, #16
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ba:	f043 0201 	orr.w	r2, r3, #1
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030cc:	f003 0310 	and.w	r3, r3, #16
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f040 8136 	bne.w	8003342 <HAL_ADC_Init+0x39a>
 80030d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f040 8131 	bne.w	8003342 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f040 8129 	bne.w	8003342 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80030f8:	f043 0202 	orr.w	r2, r3, #2
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003108:	d004      	beq.n	8003114 <HAL_ADC_Init+0x16c>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a5e      	ldr	r2, [pc, #376]	; (8003288 <HAL_ADC_Init+0x2e0>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d101      	bne.n	8003118 <HAL_ADC_Init+0x170>
 8003114:	4b5d      	ldr	r3, [pc, #372]	; (800328c <HAL_ADC_Init+0x2e4>)
 8003116:	e000      	b.n	800311a <HAL_ADC_Init+0x172>
 8003118:	4b5d      	ldr	r3, [pc, #372]	; (8003290 <HAL_ADC_Init+0x2e8>)
 800311a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003124:	d102      	bne.n	800312c <HAL_ADC_Init+0x184>
 8003126:	4b58      	ldr	r3, [pc, #352]	; (8003288 <HAL_ADC_Init+0x2e0>)
 8003128:	60fb      	str	r3, [r7, #12]
 800312a:	e01a      	b.n	8003162 <HAL_ADC_Init+0x1ba>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a55      	ldr	r2, [pc, #340]	; (8003288 <HAL_ADC_Init+0x2e0>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d103      	bne.n	800313e <HAL_ADC_Init+0x196>
 8003136:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800313a:	60fb      	str	r3, [r7, #12]
 800313c:	e011      	b.n	8003162 <HAL_ADC_Init+0x1ba>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a54      	ldr	r2, [pc, #336]	; (8003294 <HAL_ADC_Init+0x2ec>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d102      	bne.n	800314e <HAL_ADC_Init+0x1a6>
 8003148:	4b53      	ldr	r3, [pc, #332]	; (8003298 <HAL_ADC_Init+0x2f0>)
 800314a:	60fb      	str	r3, [r7, #12]
 800314c:	e009      	b.n	8003162 <HAL_ADC_Init+0x1ba>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a51      	ldr	r2, [pc, #324]	; (8003298 <HAL_ADC_Init+0x2f0>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d102      	bne.n	800315e <HAL_ADC_Init+0x1b6>
 8003158:	4b4e      	ldr	r3, [pc, #312]	; (8003294 <HAL_ADC_Init+0x2ec>)
 800315a:	60fb      	str	r3, [r7, #12]
 800315c:	e001      	b.n	8003162 <HAL_ADC_Init+0x1ba>
 800315e:	2300      	movs	r3, #0
 8003160:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f003 0303 	and.w	r3, r3, #3
 800316c:	2b01      	cmp	r3, #1
 800316e:	d108      	bne.n	8003182 <HAL_ADC_Init+0x1da>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	2b01      	cmp	r3, #1
 800317c:	d101      	bne.n	8003182 <HAL_ADC_Init+0x1da>
 800317e:	2301      	movs	r3, #1
 8003180:	e000      	b.n	8003184 <HAL_ADC_Init+0x1dc>
 8003182:	2300      	movs	r3, #0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d11c      	bne.n	80031c2 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003188:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800318a:	2b00      	cmp	r3, #0
 800318c:	d010      	beq.n	80031b0 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f003 0303 	and.w	r3, r3, #3
 8003196:	2b01      	cmp	r3, #1
 8003198:	d107      	bne.n	80031aa <HAL_ADC_Init+0x202>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d101      	bne.n	80031aa <HAL_ADC_Init+0x202>
 80031a6:	2301      	movs	r3, #1
 80031a8:	e000      	b.n	80031ac <HAL_ADC_Init+0x204>
 80031aa:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d108      	bne.n	80031c2 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80031b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	431a      	orrs	r2, r3
 80031be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031c0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	7e5b      	ldrb	r3, [r3, #25]
 80031c6:	035b      	lsls	r3, r3, #13
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80031cc:	2a01      	cmp	r2, #1
 80031ce:	d002      	beq.n	80031d6 <HAL_ADC_Init+0x22e>
 80031d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80031d4:	e000      	b.n	80031d8 <HAL_ADC_Init+0x230>
 80031d6:	2200      	movs	r2, #0
 80031d8:	431a      	orrs	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	431a      	orrs	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80031e8:	4313      	orrs	r3, r2
 80031ea:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d11b      	bne.n	800322e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	7e5b      	ldrb	r3, [r3, #25]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d109      	bne.n	8003212 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003202:	3b01      	subs	r3, #1
 8003204:	045a      	lsls	r2, r3, #17
 8003206:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003208:	4313      	orrs	r3, r2
 800320a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800320e:	663b      	str	r3, [r7, #96]	; 0x60
 8003210:	e00d      	b.n	800322e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800321a:	f043 0220 	orr.w	r2, r3, #32
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003226:	f043 0201 	orr.w	r2, r3, #1
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003232:	2b01      	cmp	r3, #1
 8003234:	d03a      	beq.n	80032ac <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a16      	ldr	r2, [pc, #88]	; (8003294 <HAL_ADC_Init+0x2ec>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d004      	beq.n	800324a <HAL_ADC_Init+0x2a2>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a14      	ldr	r2, [pc, #80]	; (8003298 <HAL_ADC_Init+0x2f0>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d128      	bne.n	800329c <HAL_ADC_Init+0x2f4>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8003252:	d012      	beq.n	800327a <HAL_ADC_Init+0x2d2>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003258:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800325c:	d00a      	beq.n	8003274 <HAL_ADC_Init+0x2cc>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003262:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8003266:	d002      	beq.n	800326e <HAL_ADC_Init+0x2c6>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326c:	e018      	b.n	80032a0 <HAL_ADC_Init+0x2f8>
 800326e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003272:	e015      	b.n	80032a0 <HAL_ADC_Init+0x2f8>
 8003274:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8003278:	e012      	b.n	80032a0 <HAL_ADC_Init+0x2f8>
 800327a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800327e:	e00f      	b.n	80032a0 <HAL_ADC_Init+0x2f8>
 8003280:	20000014 	.word	0x20000014
 8003284:	431bde83 	.word	0x431bde83
 8003288:	50000100 	.word	0x50000100
 800328c:	50000300 	.word	0x50000300
 8003290:	50000700 	.word	0x50000700
 8003294:	50000400 	.word	0x50000400
 8003298:	50000500 	.word	0x50000500
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80032a4:	4313      	orrs	r3, r2
 80032a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80032a8:	4313      	orrs	r3, r2
 80032aa:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f003 030c 	and.w	r3, r3, #12
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d114      	bne.n	80032e4 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	6812      	ldr	r2, [r2, #0]
 80032c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032c8:	f023 0302 	bic.w	r3, r3, #2
 80032cc:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	7e1b      	ldrb	r3, [r3, #24]
 80032d2:	039a      	lsls	r2, r3, #14
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	4313      	orrs	r3, r2
 80032de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80032e0:	4313      	orrs	r3, r2
 80032e2:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68da      	ldr	r2, [r3, #12]
 80032ea:	4b1e      	ldr	r3, [pc, #120]	; (8003364 <HAL_ADC_Init+0x3bc>)
 80032ec:	4013      	ands	r3, r2
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	6812      	ldr	r2, [r2, #0]
 80032f2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80032f4:	430b      	orrs	r3, r1
 80032f6:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d10c      	bne.n	800331a <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003306:	f023 010f 	bic.w	r1, r3, #15
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	69db      	ldr	r3, [r3, #28]
 800330e:	1e5a      	subs	r2, r3, #1
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	430a      	orrs	r2, r1
 8003316:	631a      	str	r2, [r3, #48]	; 0x30
 8003318:	e007      	b.n	800332a <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 020f 	bic.w	r2, r2, #15
 8003328:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003334:	f023 0303 	bic.w	r3, r3, #3
 8003338:	f043 0201 	orr.w	r2, r3, #1
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	641a      	str	r2, [r3, #64]	; 0x40
 8003340:	e00a      	b.n	8003358 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003346:	f023 0312 	bic.w	r3, r3, #18
 800334a:	f043 0210 	orr.w	r2, r3, #16
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8003352:	2301      	movs	r3, #1
 8003354:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8003358:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800335c:	4618      	mov	r0, r3
 800335e:	3768      	adds	r7, #104	; 0x68
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	fff0c007 	.word	0xfff0c007

08003368 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003370:	2300      	movs	r3, #0
 8003372:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f003 0304 	and.w	r3, r3, #4
 800337e:	2b00      	cmp	r3, #0
 8003380:	f040 80f9 	bne.w	8003576 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800338a:	2b01      	cmp	r3, #1
 800338c:	d101      	bne.n	8003392 <HAL_ADC_Start+0x2a>
 800338e:	2302      	movs	r3, #2
 8003390:	e0f4      	b.n	800357c <HAL_ADC_Start+0x214>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2201      	movs	r2, #1
 8003396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f001 fb80 	bl	8004aa0 <ADC_Enable>
 80033a0:	4603      	mov	r3, r0
 80033a2:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80033a4:	7bfb      	ldrb	r3, [r7, #15]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f040 80e0 	bne.w	800356c <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80033b4:	f023 0301 	bic.w	r3, r3, #1
 80033b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033c8:	d004      	beq.n	80033d4 <HAL_ADC_Start+0x6c>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a6d      	ldr	r2, [pc, #436]	; (8003584 <HAL_ADC_Start+0x21c>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d106      	bne.n	80033e2 <HAL_ADC_Start+0x7a>
 80033d4:	4b6c      	ldr	r3, [pc, #432]	; (8003588 <HAL_ADC_Start+0x220>)
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f003 031f 	and.w	r3, r3, #31
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d010      	beq.n	8003402 <HAL_ADC_Start+0x9a>
 80033e0:	e005      	b.n	80033ee <HAL_ADC_Start+0x86>
 80033e2:	4b6a      	ldr	r3, [pc, #424]	; (800358c <HAL_ADC_Start+0x224>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 031f 	and.w	r3, r3, #31
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d009      	beq.n	8003402 <HAL_ADC_Start+0x9a>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033f6:	d004      	beq.n	8003402 <HAL_ADC_Start+0x9a>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a64      	ldr	r2, [pc, #400]	; (8003590 <HAL_ADC_Start+0x228>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d115      	bne.n	800342e <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d036      	beq.n	800348a <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003420:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003424:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800342c:	e02d      	b.n	800348a <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003442:	d004      	beq.n	800344e <HAL_ADC_Start+0xe6>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a4e      	ldr	r2, [pc, #312]	; (8003584 <HAL_ADC_Start+0x21c>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d10a      	bne.n	8003464 <HAL_ADC_Start+0xfc>
 800344e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003458:	2b00      	cmp	r3, #0
 800345a:	bf14      	ite	ne
 800345c:	2301      	movne	r3, #1
 800345e:	2300      	moveq	r3, #0
 8003460:	b2db      	uxtb	r3, r3
 8003462:	e008      	b.n	8003476 <HAL_ADC_Start+0x10e>
 8003464:	4b4a      	ldr	r3, [pc, #296]	; (8003590 <HAL_ADC_Start+0x228>)
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800346c:	2b00      	cmp	r3, #0
 800346e:	bf14      	ite	ne
 8003470:	2301      	movne	r3, #1
 8003472:	2300      	moveq	r3, #0
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d007      	beq.n	800348a <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003482:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003496:	d106      	bne.n	80034a6 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349c:	f023 0206 	bic.w	r2, r3, #6
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	645a      	str	r2, [r3, #68]	; 0x44
 80034a4:	e002      	b.n	80034ac <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	221c      	movs	r2, #28
 80034ba:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034c4:	d004      	beq.n	80034d0 <HAL_ADC_Start+0x168>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a2e      	ldr	r2, [pc, #184]	; (8003584 <HAL_ADC_Start+0x21c>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d106      	bne.n	80034de <HAL_ADC_Start+0x176>
 80034d0:	4b2d      	ldr	r3, [pc, #180]	; (8003588 <HAL_ADC_Start+0x220>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f003 031f 	and.w	r3, r3, #31
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d03e      	beq.n	800355a <HAL_ADC_Start+0x1f2>
 80034dc:	e005      	b.n	80034ea <HAL_ADC_Start+0x182>
 80034de:	4b2b      	ldr	r3, [pc, #172]	; (800358c <HAL_ADC_Start+0x224>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f003 031f 	and.w	r3, r3, #31
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d037      	beq.n	800355a <HAL_ADC_Start+0x1f2>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034f2:	d004      	beq.n	80034fe <HAL_ADC_Start+0x196>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a22      	ldr	r2, [pc, #136]	; (8003584 <HAL_ADC_Start+0x21c>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d106      	bne.n	800350c <HAL_ADC_Start+0x1a4>
 80034fe:	4b22      	ldr	r3, [pc, #136]	; (8003588 <HAL_ADC_Start+0x220>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 031f 	and.w	r3, r3, #31
 8003506:	2b05      	cmp	r3, #5
 8003508:	d027      	beq.n	800355a <HAL_ADC_Start+0x1f2>
 800350a:	e005      	b.n	8003518 <HAL_ADC_Start+0x1b0>
 800350c:	4b1f      	ldr	r3, [pc, #124]	; (800358c <HAL_ADC_Start+0x224>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f003 031f 	and.w	r3, r3, #31
 8003514:	2b05      	cmp	r3, #5
 8003516:	d020      	beq.n	800355a <HAL_ADC_Start+0x1f2>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003520:	d004      	beq.n	800352c <HAL_ADC_Start+0x1c4>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a17      	ldr	r2, [pc, #92]	; (8003584 <HAL_ADC_Start+0x21c>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d106      	bne.n	800353a <HAL_ADC_Start+0x1d2>
 800352c:	4b16      	ldr	r3, [pc, #88]	; (8003588 <HAL_ADC_Start+0x220>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f003 031f 	and.w	r3, r3, #31
 8003534:	2b09      	cmp	r3, #9
 8003536:	d010      	beq.n	800355a <HAL_ADC_Start+0x1f2>
 8003538:	e005      	b.n	8003546 <HAL_ADC_Start+0x1de>
 800353a:	4b14      	ldr	r3, [pc, #80]	; (800358c <HAL_ADC_Start+0x224>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f003 031f 	and.w	r3, r3, #31
 8003542:	2b09      	cmp	r3, #9
 8003544:	d009      	beq.n	800355a <HAL_ADC_Start+0x1f2>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800354e:	d004      	beq.n	800355a <HAL_ADC_Start+0x1f2>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a0e      	ldr	r2, [pc, #56]	; (8003590 <HAL_ADC_Start+0x228>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d10f      	bne.n	800357a <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689a      	ldr	r2, [r3, #8]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f042 0204 	orr.w	r2, r2, #4
 8003568:	609a      	str	r2, [r3, #8]
 800356a:	e006      	b.n	800357a <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003574:	e001      	b.n	800357a <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003576:	2302      	movs	r3, #2
 8003578:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800357a:	7bfb      	ldrb	r3, [r7, #15]
}
 800357c:	4618      	mov	r0, r3
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	50000100 	.word	0x50000100
 8003588:	50000300 	.word	0x50000300
 800358c:	50000700 	.word	0x50000700
 8003590:	50000400 	.word	0x50000400

08003594 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800359c:	2300      	movs	r3, #0
 800359e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d101      	bne.n	80035ae <HAL_ADC_Stop+0x1a>
 80035aa:	2302      	movs	r3, #2
 80035ac:	e023      	b.n	80035f6 <HAL_ADC_Stop+0x62>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80035b6:	216c      	movs	r1, #108	; 0x6c
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f001 fb3b 	bl	8004c34 <ADC_ConversionStop>
 80035be:	4603      	mov	r3, r0
 80035c0:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80035c2:	7bfb      	ldrb	r3, [r7, #15]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d111      	bne.n	80035ec <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f001 facd 	bl	8004b68 <ADC_Disable>
 80035ce:	4603      	mov	r3, r0
 80035d0:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80035d2:	7bfb      	ldrb	r3, [r7, #15]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d109      	bne.n	80035ec <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035dc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80035e0:	f023 0301 	bic.w	r3, r3, #1
 80035e4:	f043 0201 	orr.w	r2, r3, #1
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80035f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
	...

08003600 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800360a:	2300      	movs	r3, #0
 800360c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	2b08      	cmp	r3, #8
 8003614:	d102      	bne.n	800361c <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8003616:	2308      	movs	r3, #8
 8003618:	617b      	str	r3, [r7, #20]
 800361a:	e03a      	b.n	8003692 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003624:	d004      	beq.n	8003630 <HAL_ADC_PollForConversion+0x30>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a72      	ldr	r2, [pc, #456]	; (80037f4 <HAL_ADC_PollForConversion+0x1f4>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d101      	bne.n	8003634 <HAL_ADC_PollForConversion+0x34>
 8003630:	4b71      	ldr	r3, [pc, #452]	; (80037f8 <HAL_ADC_PollForConversion+0x1f8>)
 8003632:	e000      	b.n	8003636 <HAL_ADC_PollForConversion+0x36>
 8003634:	4b71      	ldr	r3, [pc, #452]	; (80037fc <HAL_ADC_PollForConversion+0x1fc>)
 8003636:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f003 031f 	and.w	r3, r3, #31
 8003640:	2b00      	cmp	r3, #0
 8003642:	d112      	bne.n	800366a <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b01      	cmp	r3, #1
 8003650:	d11d      	bne.n	800368e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	f043 0220 	orr.w	r2, r3, #32
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e0bf      	b.n	80037ea <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00b      	beq.n	800368e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367a:	f043 0220 	orr.w	r2, r3, #32
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e0ad      	b.n	80037ea <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800368e:	230c      	movs	r3, #12
 8003690:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800369a:	d004      	beq.n	80036a6 <HAL_ADC_PollForConversion+0xa6>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a54      	ldr	r2, [pc, #336]	; (80037f4 <HAL_ADC_PollForConversion+0x1f4>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d106      	bne.n	80036b4 <HAL_ADC_PollForConversion+0xb4>
 80036a6:	4b54      	ldr	r3, [pc, #336]	; (80037f8 <HAL_ADC_PollForConversion+0x1f8>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 031f 	and.w	r3, r3, #31
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d010      	beq.n	80036d4 <HAL_ADC_PollForConversion+0xd4>
 80036b2:	e005      	b.n	80036c0 <HAL_ADC_PollForConversion+0xc0>
 80036b4:	4b51      	ldr	r3, [pc, #324]	; (80037fc <HAL_ADC_PollForConversion+0x1fc>)
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f003 031f 	and.w	r3, r3, #31
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d009      	beq.n	80036d4 <HAL_ADC_PollForConversion+0xd4>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036c8:	d004      	beq.n	80036d4 <HAL_ADC_PollForConversion+0xd4>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a4c      	ldr	r2, [pc, #304]	; (8003800 <HAL_ADC_PollForConversion+0x200>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d104      	bne.n	80036de <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	613b      	str	r3, [r7, #16]
 80036dc:	e00f      	b.n	80036fe <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036e6:	d004      	beq.n	80036f2 <HAL_ADC_PollForConversion+0xf2>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a41      	ldr	r2, [pc, #260]	; (80037f4 <HAL_ADC_PollForConversion+0x1f4>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d102      	bne.n	80036f8 <HAL_ADC_PollForConversion+0xf8>
 80036f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80036f6:	e000      	b.n	80036fa <HAL_ADC_PollForConversion+0xfa>
 80036f8:	4b41      	ldr	r3, [pc, #260]	; (8003800 <HAL_ADC_PollForConversion+0x200>)
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80036fe:	f7ff fc05 	bl	8002f0c <HAL_GetTick>
 8003702:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003704:	e021      	b.n	800374a <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800370c:	d01d      	beq.n	800374a <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d007      	beq.n	8003724 <HAL_ADC_PollForConversion+0x124>
 8003714:	f7ff fbfa 	bl	8002f0c <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	429a      	cmp	r2, r3
 8003722:	d212      	bcs.n	800374a <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	4013      	ands	r3, r2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d10b      	bne.n	800374a <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003736:	f043 0204 	orr.w	r2, r3, #4
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e04f      	b.n	80037ea <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	4013      	ands	r3, r2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d0d6      	beq.n	8003706 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800376e:	2b00      	cmp	r3, #0
 8003770:	d131      	bne.n	80037d6 <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8003778:	2b00      	cmp	r3, #0
 800377a:	d12c      	bne.n	80037d6 <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0308 	and.w	r3, r3, #8
 8003786:	2b08      	cmp	r3, #8
 8003788:	d125      	bne.n	80037d6 <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f003 0304 	and.w	r3, r3, #4
 8003794:	2b00      	cmp	r3, #0
 8003796:	d112      	bne.n	80037be <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d112      	bne.n	80037d6 <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b4:	f043 0201 	orr.w	r2, r3, #1
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	641a      	str	r2, [r3, #64]	; 0x40
 80037bc:	e00b      	b.n	80037d6 <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	f043 0220 	orr.w	r2, r3, #32
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ce:	f043 0201 	orr.w	r2, r3, #1
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d103      	bne.n	80037e8 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3718      	adds	r7, #24
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	50000100 	.word	0x50000100
 80037f8:	50000300 	.word	0x50000300
 80037fc:	50000700 	.word	0x50000700
 8003800:	50000400 	.word	0x50000400

08003804 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003810:	2300      	movs	r3, #0
 8003812:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f003 0304 	and.w	r3, r3, #4
 800381e:	2b00      	cmp	r3, #0
 8003820:	f040 80f7 	bne.w	8003a12 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800382a:	2b01      	cmp	r3, #1
 800382c:	d101      	bne.n	8003832 <HAL_ADC_Start_DMA+0x2e>
 800382e:	2302      	movs	r3, #2
 8003830:	e0f2      	b.n	8003a18 <HAL_ADC_Start_DMA+0x214>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003842:	d004      	beq.n	800384e <HAL_ADC_Start_DMA+0x4a>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a75      	ldr	r2, [pc, #468]	; (8003a20 <HAL_ADC_Start_DMA+0x21c>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d109      	bne.n	8003862 <HAL_ADC_Start_DMA+0x5e>
 800384e:	4b75      	ldr	r3, [pc, #468]	; (8003a24 <HAL_ADC_Start_DMA+0x220>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 031f 	and.w	r3, r3, #31
 8003856:	2b00      	cmp	r3, #0
 8003858:	bf0c      	ite	eq
 800385a:	2301      	moveq	r3, #1
 800385c:	2300      	movne	r3, #0
 800385e:	b2db      	uxtb	r3, r3
 8003860:	e008      	b.n	8003874 <HAL_ADC_Start_DMA+0x70>
 8003862:	4b71      	ldr	r3, [pc, #452]	; (8003a28 <HAL_ADC_Start_DMA+0x224>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f003 031f 	and.w	r3, r3, #31
 800386a:	2b00      	cmp	r3, #0
 800386c:	bf0c      	ite	eq
 800386e:	2301      	moveq	r3, #1
 8003870:	2300      	movne	r3, #0
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b00      	cmp	r3, #0
 8003876:	f000 80c5 	beq.w	8003a04 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f001 f910 	bl	8004aa0 <ADC_Enable>
 8003880:	4603      	mov	r3, r0
 8003882:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003884:	7dfb      	ldrb	r3, [r7, #23]
 8003886:	2b00      	cmp	r3, #0
 8003888:	f040 80b7 	bne.w	80039fa <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003890:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003894:	f023 0301 	bic.w	r3, r3, #1
 8003898:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038a8:	d004      	beq.n	80038b4 <HAL_ADC_Start_DMA+0xb0>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a5c      	ldr	r2, [pc, #368]	; (8003a20 <HAL_ADC_Start_DMA+0x21c>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d106      	bne.n	80038c2 <HAL_ADC_Start_DMA+0xbe>
 80038b4:	4b5b      	ldr	r3, [pc, #364]	; (8003a24 <HAL_ADC_Start_DMA+0x220>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f003 031f 	and.w	r3, r3, #31
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d010      	beq.n	80038e2 <HAL_ADC_Start_DMA+0xde>
 80038c0:	e005      	b.n	80038ce <HAL_ADC_Start_DMA+0xca>
 80038c2:	4b59      	ldr	r3, [pc, #356]	; (8003a28 <HAL_ADC_Start_DMA+0x224>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f003 031f 	and.w	r3, r3, #31
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d009      	beq.n	80038e2 <HAL_ADC_Start_DMA+0xde>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038d6:	d004      	beq.n	80038e2 <HAL_ADC_Start_DMA+0xde>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a53      	ldr	r2, [pc, #332]	; (8003a2c <HAL_ADC_Start_DMA+0x228>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d115      	bne.n	800390e <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d036      	beq.n	800396a <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003900:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003904:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800390c:	e02d      	b.n	800396a <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003922:	d004      	beq.n	800392e <HAL_ADC_Start_DMA+0x12a>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a3d      	ldr	r2, [pc, #244]	; (8003a20 <HAL_ADC_Start_DMA+0x21c>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d10a      	bne.n	8003944 <HAL_ADC_Start_DMA+0x140>
 800392e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003938:	2b00      	cmp	r3, #0
 800393a:	bf14      	ite	ne
 800393c:	2301      	movne	r3, #1
 800393e:	2300      	moveq	r3, #0
 8003940:	b2db      	uxtb	r3, r3
 8003942:	e008      	b.n	8003956 <HAL_ADC_Start_DMA+0x152>
 8003944:	4b39      	ldr	r3, [pc, #228]	; (8003a2c <HAL_ADC_Start_DMA+0x228>)
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800394c:	2b00      	cmp	r3, #0
 800394e:	bf14      	ite	ne
 8003950:	2301      	movne	r3, #1
 8003952:	2300      	moveq	r3, #0
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d007      	beq.n	800396a <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003962:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003976:	d106      	bne.n	8003986 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397c:	f023 0206 	bic.w	r2, r3, #6
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	645a      	str	r2, [r3, #68]	; 0x44
 8003984:	e002      	b.n	800398c <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003998:	4a25      	ldr	r2, [pc, #148]	; (8003a30 <HAL_ADC_Start_DMA+0x22c>)
 800399a:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a0:	4a24      	ldr	r2, [pc, #144]	; (8003a34 <HAL_ADC_Start_DMA+0x230>)
 80039a2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a8:	4a23      	ldr	r2, [pc, #140]	; (8003a38 <HAL_ADC_Start_DMA+0x234>)
 80039aa:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	221c      	movs	r2, #28
 80039b2:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685a      	ldr	r2, [r3, #4]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f042 0210 	orr.w	r2, r2, #16
 80039c2:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68da      	ldr	r2, [r3, #12]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f042 0201 	orr.w	r2, r2, #1
 80039d2:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	3340      	adds	r3, #64	; 0x40
 80039de:	4619      	mov	r1, r3
 80039e0:	68ba      	ldr	r2, [r7, #8]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f001 fb34 	bl	8005050 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	689a      	ldr	r2, [r3, #8]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f042 0204 	orr.w	r2, r2, #4
 80039f6:	609a      	str	r2, [r3, #8]
 80039f8:	e00d      	b.n	8003a16 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003a02:	e008      	b.n	8003a16 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003a10:	e001      	b.n	8003a16 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003a12:	2302      	movs	r3, #2
 8003a14:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3718      	adds	r7, #24
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	50000100 	.word	0x50000100
 8003a24:	50000300 	.word	0x50000300
 8003a28:	50000700 	.word	0x50000700
 8003a2c:	50000400 	.word	0x50000400
 8003a30:	080049d5 	.word	0x080049d5
 8003a34:	08004a4f 	.word	0x08004a4f
 8003a38:	08004a6b 	.word	0x08004a6b

08003a3c <HAL_ADC_Stop_DMA>:
  *         dedicated MultimodeStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a44:	2300      	movs	r3, #0
 8003a46:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d101      	bne.n	8003a56 <HAL_ADC_Stop_DMA+0x1a>
 8003a52:	2302      	movs	r3, #2
 8003a54:	e050      	b.n	8003af8 <HAL_ADC_Stop_DMA+0xbc>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003a5e:	216c      	movs	r1, #108	; 0x6c
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f001 f8e7 	bl	8004c34 <ADC_ConversionStop>
 8003a66:	4603      	mov	r3, r0
 8003a68:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003a6a:	7bfb      	ldrb	r3, [r7, #15]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d13e      	bne.n	8003aee <HAL_ADC_Stop_DMA+0xb2>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68da      	ldr	r2, [r3, #12]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f022 0201 	bic.w	r2, r2, #1
 8003a7e:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a84:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d10f      	bne.n	8003aac <HAL_ADC_Stop_DMA+0x70>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a90:	4618      	mov	r0, r3
 8003a92:	f001 fb3c 	bl	800510e <HAL_DMA_Abort>
 8003a96:	4603      	mov	r3, r0
 8003a98:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003a9a:	7bfb      	ldrb	r3, [r7, #15]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d005      	beq.n	8003aac <HAL_ADC_Stop_DMA+0x70>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685a      	ldr	r2, [r3, #4]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 0210 	bic.w	r2, r2, #16
 8003aba:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 8003abc:	7bfb      	ldrb	r3, [r7, #15]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d105      	bne.n	8003ace <HAL_ADC_Stop_DMA+0x92>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f001 f850 	bl	8004b68 <ADC_Disable>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	73fb      	strb	r3, [r7, #15]
 8003acc:	e002      	b.n	8003ad4 <HAL_ADC_Stop_DMA+0x98>
    }
    else
    {
      ADC_Disable(hadc);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f001 f84a 	bl	8004b68 <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003ad4:	7bfb      	ldrb	r3, [r7, #15]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d109      	bne.n	8003aee <HAL_ADC_Stop_DMA+0xb2>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ade:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003ae2:	f023 0301 	bic.w	r3, r3, #1
 8003ae6:	f043 0201 	orr.w	r2, r3, #1
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
	...

08003b1c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b088      	sub	sp, #32
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8003b24:	2300      	movs	r3, #0
 8003b26:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	f003 0304 	and.w	r3, r3, #4
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d004      	beq.n	8003b54 <HAL_ADC_IRQHandler+0x38>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10b      	bne.n	8003b6c <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f000 80bc 	beq.w	8003cd8 <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f003 0308 	and.w	r3, r3, #8
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f000 80b6 	beq.w	8003cd8 <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b70:	f003 0310 	and.w	r3, r3, #16
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d105      	bne.n	8003b84 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b8c:	d004      	beq.n	8003b98 <HAL_ADC_IRQHandler+0x7c>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a90      	ldr	r2, [pc, #576]	; (8003dd4 <HAL_ADC_IRQHandler+0x2b8>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d106      	bne.n	8003ba6 <HAL_ADC_IRQHandler+0x8a>
 8003b98:	4b8f      	ldr	r3, [pc, #572]	; (8003dd8 <HAL_ADC_IRQHandler+0x2bc>)
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f003 031f 	and.w	r3, r3, #31
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d03e      	beq.n	8003c22 <HAL_ADC_IRQHandler+0x106>
 8003ba4:	e005      	b.n	8003bb2 <HAL_ADC_IRQHandler+0x96>
 8003ba6:	4b8d      	ldr	r3, [pc, #564]	; (8003ddc <HAL_ADC_IRQHandler+0x2c0>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f003 031f 	and.w	r3, r3, #31
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d037      	beq.n	8003c22 <HAL_ADC_IRQHandler+0x106>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bba:	d004      	beq.n	8003bc6 <HAL_ADC_IRQHandler+0xaa>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a84      	ldr	r2, [pc, #528]	; (8003dd4 <HAL_ADC_IRQHandler+0x2b8>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d106      	bne.n	8003bd4 <HAL_ADC_IRQHandler+0xb8>
 8003bc6:	4b84      	ldr	r3, [pc, #528]	; (8003dd8 <HAL_ADC_IRQHandler+0x2bc>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f003 031f 	and.w	r3, r3, #31
 8003bce:	2b05      	cmp	r3, #5
 8003bd0:	d027      	beq.n	8003c22 <HAL_ADC_IRQHandler+0x106>
 8003bd2:	e005      	b.n	8003be0 <HAL_ADC_IRQHandler+0xc4>
 8003bd4:	4b81      	ldr	r3, [pc, #516]	; (8003ddc <HAL_ADC_IRQHandler+0x2c0>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f003 031f 	and.w	r3, r3, #31
 8003bdc:	2b05      	cmp	r3, #5
 8003bde:	d020      	beq.n	8003c22 <HAL_ADC_IRQHandler+0x106>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003be8:	d004      	beq.n	8003bf4 <HAL_ADC_IRQHandler+0xd8>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a79      	ldr	r2, [pc, #484]	; (8003dd4 <HAL_ADC_IRQHandler+0x2b8>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d106      	bne.n	8003c02 <HAL_ADC_IRQHandler+0xe6>
 8003bf4:	4b78      	ldr	r3, [pc, #480]	; (8003dd8 <HAL_ADC_IRQHandler+0x2bc>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f003 031f 	and.w	r3, r3, #31
 8003bfc:	2b09      	cmp	r3, #9
 8003bfe:	d010      	beq.n	8003c22 <HAL_ADC_IRQHandler+0x106>
 8003c00:	e005      	b.n	8003c0e <HAL_ADC_IRQHandler+0xf2>
 8003c02:	4b76      	ldr	r3, [pc, #472]	; (8003ddc <HAL_ADC_IRQHandler+0x2c0>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f003 031f 	and.w	r3, r3, #31
 8003c0a:	2b09      	cmp	r3, #9
 8003c0c:	d009      	beq.n	8003c22 <HAL_ADC_IRQHandler+0x106>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c16:	d004      	beq.n	8003c22 <HAL_ADC_IRQHandler+0x106>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a70      	ldr	r2, [pc, #448]	; (8003de0 <HAL_ADC_IRQHandler+0x2c4>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d104      	bne.n	8003c2c <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	61bb      	str	r3, [r7, #24]
 8003c2a:	e00f      	b.n	8003c4c <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c34:	d004      	beq.n	8003c40 <HAL_ADC_IRQHandler+0x124>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a66      	ldr	r2, [pc, #408]	; (8003dd4 <HAL_ADC_IRQHandler+0x2b8>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d102      	bne.n	8003c46 <HAL_ADC_IRQHandler+0x12a>
 8003c40:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003c44:	e000      	b.n	8003c48 <HAL_ADC_IRQHandler+0x12c>
 8003c46:	4b66      	ldr	r3, [pc, #408]	; (8003de0 <HAL_ADC_IRQHandler+0x2c4>)
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d137      	bne.n	8003cca <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d132      	bne.n	8003cca <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	f003 0308 	and.w	r3, r3, #8
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d02d      	beq.n	8003cca <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f003 0304 	and.w	r3, r3, #4
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d11a      	bne.n	8003cb2 <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f022 020c 	bic.w	r2, r2, #12
 8003c8a:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d112      	bne.n	8003cca <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca8:	f043 0201 	orr.w	r2, r3, #1
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	641a      	str	r2, [r3, #64]	; 0x40
 8003cb0:	e00b      	b.n	8003cca <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb6:	f043 0210 	orr.w	r2, r3, #16
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc2:	f043 0201 	orr.w	r2, r3, #1
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f7fe fa1a 	bl	8002104 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	220c      	movs	r2, #12
 8003cd6:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	f003 0320 	and.w	r3, r3, #32
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d004      	beq.n	8003cec <HAL_ADC_IRQHandler+0x1d0>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f003 0320 	and.w	r3, r3, #32
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10b      	bne.n	8003d04 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	f000 8138 	beq.w	8003f68 <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f000 8132 	beq.w	8003f68 <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d08:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d18:	d004      	beq.n	8003d24 <HAL_ADC_IRQHandler+0x208>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a2d      	ldr	r2, [pc, #180]	; (8003dd4 <HAL_ADC_IRQHandler+0x2b8>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d106      	bne.n	8003d32 <HAL_ADC_IRQHandler+0x216>
 8003d24:	4b2c      	ldr	r3, [pc, #176]	; (8003dd8 <HAL_ADC_IRQHandler+0x2bc>)
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f003 031f 	and.w	r3, r3, #31
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d03e      	beq.n	8003dae <HAL_ADC_IRQHandler+0x292>
 8003d30:	e005      	b.n	8003d3e <HAL_ADC_IRQHandler+0x222>
 8003d32:	4b2a      	ldr	r3, [pc, #168]	; (8003ddc <HAL_ADC_IRQHandler+0x2c0>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f003 031f 	and.w	r3, r3, #31
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d037      	beq.n	8003dae <HAL_ADC_IRQHandler+0x292>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d46:	d004      	beq.n	8003d52 <HAL_ADC_IRQHandler+0x236>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a21      	ldr	r2, [pc, #132]	; (8003dd4 <HAL_ADC_IRQHandler+0x2b8>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d106      	bne.n	8003d60 <HAL_ADC_IRQHandler+0x244>
 8003d52:	4b21      	ldr	r3, [pc, #132]	; (8003dd8 <HAL_ADC_IRQHandler+0x2bc>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f003 031f 	and.w	r3, r3, #31
 8003d5a:	2b05      	cmp	r3, #5
 8003d5c:	d027      	beq.n	8003dae <HAL_ADC_IRQHandler+0x292>
 8003d5e:	e005      	b.n	8003d6c <HAL_ADC_IRQHandler+0x250>
 8003d60:	4b1e      	ldr	r3, [pc, #120]	; (8003ddc <HAL_ADC_IRQHandler+0x2c0>)
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f003 031f 	and.w	r3, r3, #31
 8003d68:	2b05      	cmp	r3, #5
 8003d6a:	d020      	beq.n	8003dae <HAL_ADC_IRQHandler+0x292>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d74:	d004      	beq.n	8003d80 <HAL_ADC_IRQHandler+0x264>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a16      	ldr	r2, [pc, #88]	; (8003dd4 <HAL_ADC_IRQHandler+0x2b8>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d106      	bne.n	8003d8e <HAL_ADC_IRQHandler+0x272>
 8003d80:	4b15      	ldr	r3, [pc, #84]	; (8003dd8 <HAL_ADC_IRQHandler+0x2bc>)
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f003 031f 	and.w	r3, r3, #31
 8003d88:	2b09      	cmp	r3, #9
 8003d8a:	d010      	beq.n	8003dae <HAL_ADC_IRQHandler+0x292>
 8003d8c:	e005      	b.n	8003d9a <HAL_ADC_IRQHandler+0x27e>
 8003d8e:	4b13      	ldr	r3, [pc, #76]	; (8003ddc <HAL_ADC_IRQHandler+0x2c0>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f003 031f 	and.w	r3, r3, #31
 8003d96:	2b09      	cmp	r3, #9
 8003d98:	d009      	beq.n	8003dae <HAL_ADC_IRQHandler+0x292>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003da2:	d004      	beq.n	8003dae <HAL_ADC_IRQHandler+0x292>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a0d      	ldr	r2, [pc, #52]	; (8003de0 <HAL_ADC_IRQHandler+0x2c4>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d104      	bne.n	8003db8 <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	61bb      	str	r3, [r7, #24]
 8003db6:	e018      	b.n	8003dea <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003dc0:	d004      	beq.n	8003dcc <HAL_ADC_IRQHandler+0x2b0>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a03      	ldr	r2, [pc, #12]	; (8003dd4 <HAL_ADC_IRQHandler+0x2b8>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d10b      	bne.n	8003de4 <HAL_ADC_IRQHandler+0x2c8>
 8003dcc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003dd0:	e009      	b.n	8003de6 <HAL_ADC_IRQHandler+0x2ca>
 8003dd2:	bf00      	nop
 8003dd4:	50000100 	.word	0x50000100
 8003dd8:	50000300 	.word	0x50000300
 8003ddc:	50000700 	.word	0x50000700
 8003de0:	50000400 	.word	0x50000400
 8003de4:	4b92      	ldr	r3, [pc, #584]	; (8004030 <HAL_ADC_IRQHandler+0x514>)
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003df0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f040 80b0 	bne.w	8003f5a <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00d      	beq.n	8003e20 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f040 80a3 	bne.w	8003f5a <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f040 809d 	bne.w	8003f5a <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f000 8097 	beq.w	8003f5a <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e34:	d004      	beq.n	8003e40 <HAL_ADC_IRQHandler+0x324>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a7e      	ldr	r2, [pc, #504]	; (8004034 <HAL_ADC_IRQHandler+0x518>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d106      	bne.n	8003e4e <HAL_ADC_IRQHandler+0x332>
 8003e40:	4b7d      	ldr	r3, [pc, #500]	; (8004038 <HAL_ADC_IRQHandler+0x51c>)
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f003 031f 	and.w	r3, r3, #31
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d03e      	beq.n	8003eca <HAL_ADC_IRQHandler+0x3ae>
 8003e4c:	e005      	b.n	8003e5a <HAL_ADC_IRQHandler+0x33e>
 8003e4e:	4b7b      	ldr	r3, [pc, #492]	; (800403c <HAL_ADC_IRQHandler+0x520>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f003 031f 	and.w	r3, r3, #31
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d037      	beq.n	8003eca <HAL_ADC_IRQHandler+0x3ae>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e62:	d004      	beq.n	8003e6e <HAL_ADC_IRQHandler+0x352>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a72      	ldr	r2, [pc, #456]	; (8004034 <HAL_ADC_IRQHandler+0x518>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d106      	bne.n	8003e7c <HAL_ADC_IRQHandler+0x360>
 8003e6e:	4b72      	ldr	r3, [pc, #456]	; (8004038 <HAL_ADC_IRQHandler+0x51c>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 031f 	and.w	r3, r3, #31
 8003e76:	2b06      	cmp	r3, #6
 8003e78:	d027      	beq.n	8003eca <HAL_ADC_IRQHandler+0x3ae>
 8003e7a:	e005      	b.n	8003e88 <HAL_ADC_IRQHandler+0x36c>
 8003e7c:	4b6f      	ldr	r3, [pc, #444]	; (800403c <HAL_ADC_IRQHandler+0x520>)
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f003 031f 	and.w	r3, r3, #31
 8003e84:	2b06      	cmp	r3, #6
 8003e86:	d020      	beq.n	8003eca <HAL_ADC_IRQHandler+0x3ae>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e90:	d004      	beq.n	8003e9c <HAL_ADC_IRQHandler+0x380>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a67      	ldr	r2, [pc, #412]	; (8004034 <HAL_ADC_IRQHandler+0x518>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d106      	bne.n	8003eaa <HAL_ADC_IRQHandler+0x38e>
 8003e9c:	4b66      	ldr	r3, [pc, #408]	; (8004038 <HAL_ADC_IRQHandler+0x51c>)
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f003 031f 	and.w	r3, r3, #31
 8003ea4:	2b07      	cmp	r3, #7
 8003ea6:	d010      	beq.n	8003eca <HAL_ADC_IRQHandler+0x3ae>
 8003ea8:	e005      	b.n	8003eb6 <HAL_ADC_IRQHandler+0x39a>
 8003eaa:	4b64      	ldr	r3, [pc, #400]	; (800403c <HAL_ADC_IRQHandler+0x520>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f003 031f 	and.w	r3, r3, #31
 8003eb2:	2b07      	cmp	r3, #7
 8003eb4:	d009      	beq.n	8003eca <HAL_ADC_IRQHandler+0x3ae>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ebe:	d004      	beq.n	8003eca <HAL_ADC_IRQHandler+0x3ae>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a5a      	ldr	r2, [pc, #360]	; (8004030 <HAL_ADC_IRQHandler+0x514>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d104      	bne.n	8003ed4 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	617b      	str	r3, [r7, #20]
 8003ed2:	e00f      	b.n	8003ef4 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003edc:	d004      	beq.n	8003ee8 <HAL_ADC_IRQHandler+0x3cc>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a54      	ldr	r2, [pc, #336]	; (8004034 <HAL_ADC_IRQHandler+0x518>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d102      	bne.n	8003eee <HAL_ADC_IRQHandler+0x3d2>
 8003ee8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003eec:	e000      	b.n	8003ef0 <HAL_ADC_IRQHandler+0x3d4>
 8003eee:	4b50      	ldr	r3, [pc, #320]	; (8004030 <HAL_ADC_IRQHandler+0x514>)
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d12d      	bne.n	8003f5a <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f003 0308 	and.w	r3, r3, #8
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d11a      	bne.n	8003f42 <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	685a      	ldr	r2, [r3, #4]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f1a:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f20:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d112      	bne.n	8003f5a <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f38:	f043 0201 	orr.w	r2, r3, #1
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	641a      	str	r2, [r3, #64]	; 0x40
 8003f40:	e00b      	b.n	8003f5a <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f46:	f043 0210 	orr.w	r2, r3, #16
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f52:	f043 0201 	orr.w	r2, r3, #1
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f936 	bl	80041cc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2260      	movs	r2, #96	; 0x60
 8003f66:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d011      	beq.n	8003f96 <HAL_ADC_IRQHandler+0x47a>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00c      	beq.n	8003f96 <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f80:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f7fe fff9 	bl	8002f80 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2280      	movs	r2, #128	; 0x80
 8003f94:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d012      	beq.n	8003fc6 <HAL_ADC_IRQHandler+0x4aa>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00d      	beq.n	8003fc6 <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f91c 	bl	80041f4 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fc4:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d012      	beq.n	8003ff6 <HAL_ADC_IRQHandler+0x4da>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00d      	beq.n	8003ff6 <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fde:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 f90e 	bl	8004208 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ff4:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	f003 0310 	and.w	r3, r3, #16
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d04f      	beq.n	80040a0 <HAL_ADC_IRQHandler+0x584>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f003 0310 	and.w	r3, r3, #16
 8004006:	2b00      	cmp	r3, #0
 8004008:	d04a      	beq.n	80040a0 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800400e:	2b01      	cmp	r3, #1
 8004010:	d102      	bne.n	8004018 <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 8004012:	2301      	movs	r3, #1
 8004014:	61fb      	str	r3, [r7, #28]
 8004016:	e02d      	b.n	8004074 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004020:	d004      	beq.n	800402c <HAL_ADC_IRQHandler+0x510>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a03      	ldr	r2, [pc, #12]	; (8004034 <HAL_ADC_IRQHandler+0x518>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d109      	bne.n	8004040 <HAL_ADC_IRQHandler+0x524>
 800402c:	4b02      	ldr	r3, [pc, #8]	; (8004038 <HAL_ADC_IRQHandler+0x51c>)
 800402e:	e008      	b.n	8004042 <HAL_ADC_IRQHandler+0x526>
 8004030:	50000400 	.word	0x50000400
 8004034:	50000100 	.word	0x50000100
 8004038:	50000300 	.word	0x50000300
 800403c:	50000700 	.word	0x50000700
 8004040:	4b28      	ldr	r3, [pc, #160]	; (80040e4 <HAL_ADC_IRQHandler+0x5c8>)
 8004042:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f003 031f 	and.w	r3, r3, #31
 800404c:	2b00      	cmp	r3, #0
 800404e:	d109      	bne.n	8004064 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b01      	cmp	r3, #1
 800405c:	d10a      	bne.n	8004074 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 800405e:	2301      	movs	r3, #1
 8004060:	61fb      	str	r3, [r7, #28]
 8004062:	e007      	b.n	8004074 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d001      	beq.n	8004074 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8004070:	2301      	movs	r3, #1
 8004072:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d10e      	bne.n	8004098 <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800408a:	f043 0202 	orr.w	r2, r3, #2
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7fe ff7e 	bl	8002f94 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2210      	movs	r2, #16
 800409e:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d018      	beq.n	80040dc <HAL_ADC_IRQHandler+0x5c0>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d013      	beq.n	80040dc <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c4:	f043 0208 	orr.w	r2, r3, #8
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040d4:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f882 	bl	80041e0 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 80040dc:	bf00      	nop
 80040de:	3720      	adds	r7, #32
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	50000700 	.word	0x50000700

080040e8 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040f2:	2300      	movs	r3, #0
 80040f4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d101      	bne.n	8004104 <HAL_ADCEx_Calibration_Start+0x1c>
 8004100:	2302      	movs	r3, #2
 8004102:	e05f      	b.n	80041c4 <HAL_ADCEx_Calibration_Start+0xdc>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 fd2b 	bl	8004b68 <ADC_Disable>
 8004112:	4603      	mov	r3, r0
 8004114:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004116:	7bfb      	ldrb	r3, [r7, #15]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d14e      	bne.n	80041ba <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	689a      	ldr	r2, [r3, #8]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8004130:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d107      	bne.n	8004148 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	689a      	ldr	r2, [r3, #8]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004146:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	689a      	ldr	r2, [r3, #8]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004156:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8004158:	f7fe fed8 	bl	8002f0c <HAL_GetTick>
 800415c:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800415e:	e01c      	b.n	800419a <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004160:	f7fe fed4 	bl	8002f0c <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b0a      	cmp	r3, #10
 800416c:	d915      	bls.n	800419a <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004178:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800417c:	d10d      	bne.n	800419a <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	f023 0312 	bic.w	r3, r3, #18
 8004186:	f043 0210 	orr.w	r2, r3, #16
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e014      	b.n	80041c4 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041a8:	d0da      	beq.n	8004160 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ae:	f023 0303 	bic.w	r3, r3, #3
 80041b2:	f043 0201 	orr.w	r2, r3, #1
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80041c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3710      	adds	r7, #16
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800421c:	b480      	push	{r7}
 800421e:	b09b      	sub	sp, #108	; 0x6c
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004226:	2300      	movs	r3, #0
 8004228:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800422c:	2300      	movs	r3, #0
 800422e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004236:	2b01      	cmp	r3, #1
 8004238:	d101      	bne.n	800423e <HAL_ADC_ConfigChannel+0x22>
 800423a:	2302      	movs	r3, #2
 800423c:	e2c8      	b.n	80047d0 <HAL_ADC_ConfigChannel+0x5b4>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2201      	movs	r2, #1
 8004242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f003 0304 	and.w	r3, r3, #4
 8004250:	2b00      	cmp	r3, #0
 8004252:	f040 82ac 	bne.w	80047ae <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	2b04      	cmp	r3, #4
 800425c:	d81c      	bhi.n	8004298 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	4613      	mov	r3, r2
 800426a:	005b      	lsls	r3, r3, #1
 800426c:	4413      	add	r3, r2
 800426e:	005b      	lsls	r3, r3, #1
 8004270:	461a      	mov	r2, r3
 8004272:	231f      	movs	r3, #31
 8004274:	4093      	lsls	r3, r2
 8004276:	43db      	mvns	r3, r3
 8004278:	4019      	ands	r1, r3
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	6818      	ldr	r0, [r3, #0]
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	685a      	ldr	r2, [r3, #4]
 8004282:	4613      	mov	r3, r2
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	4413      	add	r3, r2
 8004288:	005b      	lsls	r3, r3, #1
 800428a:	fa00 f203 	lsl.w	r2, r0, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	430a      	orrs	r2, r1
 8004294:	631a      	str	r2, [r3, #48]	; 0x30
 8004296:	e063      	b.n	8004360 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	2b09      	cmp	r3, #9
 800429e:	d81e      	bhi.n	80042de <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	4613      	mov	r3, r2
 80042ac:	005b      	lsls	r3, r3, #1
 80042ae:	4413      	add	r3, r2
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	3b1e      	subs	r3, #30
 80042b4:	221f      	movs	r2, #31
 80042b6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ba:	43db      	mvns	r3, r3
 80042bc:	4019      	ands	r1, r3
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	6818      	ldr	r0, [r3, #0]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	685a      	ldr	r2, [r3, #4]
 80042c6:	4613      	mov	r3, r2
 80042c8:	005b      	lsls	r3, r3, #1
 80042ca:	4413      	add	r3, r2
 80042cc:	005b      	lsls	r3, r3, #1
 80042ce:	3b1e      	subs	r3, #30
 80042d0:	fa00 f203 	lsl.w	r2, r0, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	430a      	orrs	r2, r1
 80042da:	635a      	str	r2, [r3, #52]	; 0x34
 80042dc:	e040      	b.n	8004360 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	2b0e      	cmp	r3, #14
 80042e4:	d81e      	bhi.n	8004324 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	4613      	mov	r3, r2
 80042f2:	005b      	lsls	r3, r3, #1
 80042f4:	4413      	add	r3, r2
 80042f6:	005b      	lsls	r3, r3, #1
 80042f8:	3b3c      	subs	r3, #60	; 0x3c
 80042fa:	221f      	movs	r2, #31
 80042fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004300:	43db      	mvns	r3, r3
 8004302:	4019      	ands	r1, r3
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	6818      	ldr	r0, [r3, #0]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	4613      	mov	r3, r2
 800430e:	005b      	lsls	r3, r3, #1
 8004310:	4413      	add	r3, r2
 8004312:	005b      	lsls	r3, r3, #1
 8004314:	3b3c      	subs	r3, #60	; 0x3c
 8004316:	fa00 f203 	lsl.w	r2, r0, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	430a      	orrs	r2, r1
 8004320:	639a      	str	r2, [r3, #56]	; 0x38
 8004322:	e01d      	b.n	8004360 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	685a      	ldr	r2, [r3, #4]
 800432e:	4613      	mov	r3, r2
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	4413      	add	r3, r2
 8004334:	005b      	lsls	r3, r3, #1
 8004336:	3b5a      	subs	r3, #90	; 0x5a
 8004338:	221f      	movs	r2, #31
 800433a:	fa02 f303 	lsl.w	r3, r2, r3
 800433e:	43db      	mvns	r3, r3
 8004340:	4019      	ands	r1, r3
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	6818      	ldr	r0, [r3, #0]
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	4613      	mov	r3, r2
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	4413      	add	r3, r2
 8004350:	005b      	lsls	r3, r3, #1
 8004352:	3b5a      	subs	r3, #90	; 0x5a
 8004354:	fa00 f203 	lsl.w	r2, r0, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	430a      	orrs	r2, r1
 800435e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f003 030c 	and.w	r3, r3, #12
 800436a:	2b00      	cmp	r3, #0
 800436c:	f040 80e5 	bne.w	800453a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2b09      	cmp	r3, #9
 8004376:	d91c      	bls.n	80043b2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6999      	ldr	r1, [r3, #24]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	4613      	mov	r3, r2
 8004384:	005b      	lsls	r3, r3, #1
 8004386:	4413      	add	r3, r2
 8004388:	3b1e      	subs	r3, #30
 800438a:	2207      	movs	r2, #7
 800438c:	fa02 f303 	lsl.w	r3, r2, r3
 8004390:	43db      	mvns	r3, r3
 8004392:	4019      	ands	r1, r3
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	6898      	ldr	r0, [r3, #8]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	4613      	mov	r3, r2
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	4413      	add	r3, r2
 80043a2:	3b1e      	subs	r3, #30
 80043a4:	fa00 f203 	lsl.w	r2, r0, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	430a      	orrs	r2, r1
 80043ae:	619a      	str	r2, [r3, #24]
 80043b0:	e019      	b.n	80043e6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	6959      	ldr	r1, [r3, #20]
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	4613      	mov	r3, r2
 80043be:	005b      	lsls	r3, r3, #1
 80043c0:	4413      	add	r3, r2
 80043c2:	2207      	movs	r2, #7
 80043c4:	fa02 f303 	lsl.w	r3, r2, r3
 80043c8:	43db      	mvns	r3, r3
 80043ca:	4019      	ands	r1, r3
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	6898      	ldr	r0, [r3, #8]
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	4613      	mov	r3, r2
 80043d6:	005b      	lsls	r3, r3, #1
 80043d8:	4413      	add	r3, r2
 80043da:	fa00 f203 	lsl.w	r2, r0, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	430a      	orrs	r2, r1
 80043e4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	695a      	ldr	r2, [r3, #20]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	08db      	lsrs	r3, r3, #3
 80043f2:	f003 0303 	and.w	r3, r3, #3
 80043f6:	005b      	lsls	r3, r3, #1
 80043f8:	fa02 f303 	lsl.w	r3, r2, r3
 80043fc:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	3b01      	subs	r3, #1
 8004404:	2b03      	cmp	r3, #3
 8004406:	d84f      	bhi.n	80044a8 <HAL_ADC_ConfigChannel+0x28c>
 8004408:	a201      	add	r2, pc, #4	; (adr r2, 8004410 <HAL_ADC_ConfigChannel+0x1f4>)
 800440a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800440e:	bf00      	nop
 8004410:	08004421 	.word	0x08004421
 8004414:	08004443 	.word	0x08004443
 8004418:	08004465 	.word	0x08004465
 800441c:	08004487 	.word	0x08004487
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004426:	4b99      	ldr	r3, [pc, #612]	; (800468c <HAL_ADC_ConfigChannel+0x470>)
 8004428:	4013      	ands	r3, r2
 800442a:	683a      	ldr	r2, [r7, #0]
 800442c:	6812      	ldr	r2, [r2, #0]
 800442e:	0691      	lsls	r1, r2, #26
 8004430:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004432:	430a      	orrs	r2, r1
 8004434:	431a      	orrs	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800443e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004440:	e07b      	b.n	800453a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004448:	4b90      	ldr	r3, [pc, #576]	; (800468c <HAL_ADC_ConfigChannel+0x470>)
 800444a:	4013      	ands	r3, r2
 800444c:	683a      	ldr	r2, [r7, #0]
 800444e:	6812      	ldr	r2, [r2, #0]
 8004450:	0691      	lsls	r1, r2, #26
 8004452:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004454:	430a      	orrs	r2, r1
 8004456:	431a      	orrs	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004460:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004462:	e06a      	b.n	800453a <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800446a:	4b88      	ldr	r3, [pc, #544]	; (800468c <HAL_ADC_ConfigChannel+0x470>)
 800446c:	4013      	ands	r3, r2
 800446e:	683a      	ldr	r2, [r7, #0]
 8004470:	6812      	ldr	r2, [r2, #0]
 8004472:	0691      	lsls	r1, r2, #26
 8004474:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004476:	430a      	orrs	r2, r1
 8004478:	431a      	orrs	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004482:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004484:	e059      	b.n	800453a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800448c:	4b7f      	ldr	r3, [pc, #508]	; (800468c <HAL_ADC_ConfigChannel+0x470>)
 800448e:	4013      	ands	r3, r2
 8004490:	683a      	ldr	r2, [r7, #0]
 8004492:	6812      	ldr	r2, [r2, #0]
 8004494:	0691      	lsls	r1, r2, #26
 8004496:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004498:	430a      	orrs	r2, r1
 800449a:	431a      	orrs	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80044a4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80044a6:	e048      	b.n	800453a <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	069b      	lsls	r3, r3, #26
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d107      	bne.n	80044cc <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80044ca:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	069b      	lsls	r3, r3, #26
 80044dc:	429a      	cmp	r2, r3
 80044de:	d107      	bne.n	80044f0 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80044ee:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	069b      	lsls	r3, r3, #26
 8004500:	429a      	cmp	r2, r3
 8004502:	d107      	bne.n	8004514 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004512:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800451a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	069b      	lsls	r3, r3, #26
 8004524:	429a      	cmp	r2, r3
 8004526:	d107      	bne.n	8004538 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004536:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8004538:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f003 0303 	and.w	r3, r3, #3
 8004544:	2b01      	cmp	r3, #1
 8004546:	d108      	bne.n	800455a <HAL_ADC_ConfigChannel+0x33e>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b01      	cmp	r3, #1
 8004554:	d101      	bne.n	800455a <HAL_ADC_ConfigChannel+0x33e>
 8004556:	2301      	movs	r3, #1
 8004558:	e000      	b.n	800455c <HAL_ADC_ConfigChannel+0x340>
 800455a:	2300      	movs	r3, #0
 800455c:	2b00      	cmp	r3, #0
 800455e:	f040 8131 	bne.w	80047c4 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d00f      	beq.n	800458a <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2201      	movs	r2, #1
 8004578:	fa02 f303 	lsl.w	r3, r2, r3
 800457c:	43da      	mvns	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	400a      	ands	r2, r1
 8004584:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8004588:	e049      	b.n	800461e <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2201      	movs	r2, #1
 8004598:	409a      	lsls	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	430a      	orrs	r2, r1
 80045a0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2b09      	cmp	r3, #9
 80045aa:	d91c      	bls.n	80045e6 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6999      	ldr	r1, [r3, #24]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	4613      	mov	r3, r2
 80045b8:	005b      	lsls	r3, r3, #1
 80045ba:	4413      	add	r3, r2
 80045bc:	3b1b      	subs	r3, #27
 80045be:	2207      	movs	r2, #7
 80045c0:	fa02 f303 	lsl.w	r3, r2, r3
 80045c4:	43db      	mvns	r3, r3
 80045c6:	4019      	ands	r1, r3
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	6898      	ldr	r0, [r3, #8]
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	4613      	mov	r3, r2
 80045d2:	005b      	lsls	r3, r3, #1
 80045d4:	4413      	add	r3, r2
 80045d6:	3b1b      	subs	r3, #27
 80045d8:	fa00 f203 	lsl.w	r2, r0, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	430a      	orrs	r2, r1
 80045e2:	619a      	str	r2, [r3, #24]
 80045e4:	e01b      	b.n	800461e <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	6959      	ldr	r1, [r3, #20]
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	1c5a      	adds	r2, r3, #1
 80045f2:	4613      	mov	r3, r2
 80045f4:	005b      	lsls	r3, r3, #1
 80045f6:	4413      	add	r3, r2
 80045f8:	2207      	movs	r2, #7
 80045fa:	fa02 f303 	lsl.w	r3, r2, r3
 80045fe:	43db      	mvns	r3, r3
 8004600:	4019      	ands	r1, r3
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	6898      	ldr	r0, [r3, #8]
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	1c5a      	adds	r2, r3, #1
 800460c:	4613      	mov	r3, r2
 800460e:	005b      	lsls	r3, r3, #1
 8004610:	4413      	add	r3, r2
 8004612:	fa00 f203 	lsl.w	r2, r0, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	430a      	orrs	r2, r1
 800461c:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004626:	d004      	beq.n	8004632 <HAL_ADC_ConfigChannel+0x416>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a18      	ldr	r2, [pc, #96]	; (8004690 <HAL_ADC_ConfigChannel+0x474>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d101      	bne.n	8004636 <HAL_ADC_ConfigChannel+0x41a>
 8004632:	4b18      	ldr	r3, [pc, #96]	; (8004694 <HAL_ADC_ConfigChannel+0x478>)
 8004634:	e000      	b.n	8004638 <HAL_ADC_ConfigChannel+0x41c>
 8004636:	4b18      	ldr	r3, [pc, #96]	; (8004698 <HAL_ADC_ConfigChannel+0x47c>)
 8004638:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2b10      	cmp	r3, #16
 8004640:	d105      	bne.n	800464e <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004642:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800464a:	2b00      	cmp	r3, #0
 800464c:	d015      	beq.n	800467a <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004652:	2b11      	cmp	r3, #17
 8004654:	d105      	bne.n	8004662 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004656:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00b      	beq.n	800467a <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004666:	2b12      	cmp	r3, #18
 8004668:	f040 80ac 	bne.w	80047c4 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800466c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004674:	2b00      	cmp	r3, #0
 8004676:	f040 80a5 	bne.w	80047c4 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004682:	d10b      	bne.n	800469c <HAL_ADC_ConfigChannel+0x480>
 8004684:	4b02      	ldr	r3, [pc, #8]	; (8004690 <HAL_ADC_ConfigChannel+0x474>)
 8004686:	60fb      	str	r3, [r7, #12]
 8004688:	e023      	b.n	80046d2 <HAL_ADC_ConfigChannel+0x4b6>
 800468a:	bf00      	nop
 800468c:	83fff000 	.word	0x83fff000
 8004690:	50000100 	.word	0x50000100
 8004694:	50000300 	.word	0x50000300
 8004698:	50000700 	.word	0x50000700
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a4e      	ldr	r2, [pc, #312]	; (80047dc <HAL_ADC_ConfigChannel+0x5c0>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d103      	bne.n	80046ae <HAL_ADC_ConfigChannel+0x492>
 80046a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80046aa:	60fb      	str	r3, [r7, #12]
 80046ac:	e011      	b.n	80046d2 <HAL_ADC_ConfigChannel+0x4b6>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a4b      	ldr	r2, [pc, #300]	; (80047e0 <HAL_ADC_ConfigChannel+0x5c4>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d102      	bne.n	80046be <HAL_ADC_ConfigChannel+0x4a2>
 80046b8:	4b4a      	ldr	r3, [pc, #296]	; (80047e4 <HAL_ADC_ConfigChannel+0x5c8>)
 80046ba:	60fb      	str	r3, [r7, #12]
 80046bc:	e009      	b.n	80046d2 <HAL_ADC_ConfigChannel+0x4b6>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a48      	ldr	r2, [pc, #288]	; (80047e4 <HAL_ADC_ConfigChannel+0x5c8>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d102      	bne.n	80046ce <HAL_ADC_ConfigChannel+0x4b2>
 80046c8:	4b45      	ldr	r3, [pc, #276]	; (80047e0 <HAL_ADC_ConfigChannel+0x5c4>)
 80046ca:	60fb      	str	r3, [r7, #12]
 80046cc:	e001      	b.n	80046d2 <HAL_ADC_ConfigChannel+0x4b6>
 80046ce:	2300      	movs	r3, #0
 80046d0:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f003 0303 	and.w	r3, r3, #3
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d108      	bne.n	80046f2 <HAL_ADC_ConfigChannel+0x4d6>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d101      	bne.n	80046f2 <HAL_ADC_ConfigChannel+0x4d6>
 80046ee:	2301      	movs	r3, #1
 80046f0:	e000      	b.n	80046f4 <HAL_ADC_ConfigChannel+0x4d8>
 80046f2:	2300      	movs	r3, #0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d150      	bne.n	800479a <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80046f8:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d010      	beq.n	8004720 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f003 0303 	and.w	r3, r3, #3
 8004706:	2b01      	cmp	r3, #1
 8004708:	d107      	bne.n	800471a <HAL_ADC_ConfigChannel+0x4fe>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	2b01      	cmp	r3, #1
 8004714:	d101      	bne.n	800471a <HAL_ADC_ConfigChannel+0x4fe>
 8004716:	2301      	movs	r3, #1
 8004718:	e000      	b.n	800471c <HAL_ADC_ConfigChannel+0x500>
 800471a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800471c:	2b00      	cmp	r3, #0
 800471e:	d13c      	bne.n	800479a <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2b10      	cmp	r3, #16
 8004726:	d11d      	bne.n	8004764 <HAL_ADC_ConfigChannel+0x548>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004730:	d118      	bne.n	8004764 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8004732:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800473a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800473c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800473e:	4b2a      	ldr	r3, [pc, #168]	; (80047e8 <HAL_ADC_ConfigChannel+0x5cc>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a2a      	ldr	r2, [pc, #168]	; (80047ec <HAL_ADC_ConfigChannel+0x5d0>)
 8004744:	fba2 2303 	umull	r2, r3, r2, r3
 8004748:	0c9a      	lsrs	r2, r3, #18
 800474a:	4613      	mov	r3, r2
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	4413      	add	r3, r2
 8004750:	005b      	lsls	r3, r3, #1
 8004752:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004754:	e002      	b.n	800475c <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	3b01      	subs	r3, #1
 800475a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1f9      	bne.n	8004756 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004762:	e02e      	b.n	80047c2 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2b11      	cmp	r3, #17
 800476a:	d10b      	bne.n	8004784 <HAL_ADC_ConfigChannel+0x568>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004774:	d106      	bne.n	8004784 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8004776:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800477e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004780:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004782:	e01e      	b.n	80047c2 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2b12      	cmp	r3, #18
 800478a:	d11a      	bne.n	80047c2 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800478c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004794:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004796:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004798:	e013      	b.n	80047c2 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479e:	f043 0220 	orr.w	r2, r3, #32
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80047ac:	e00a      	b.n	80047c4 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b2:	f043 0220 	orr.w	r2, r3, #32
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80047c0:	e000      	b.n	80047c4 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80047c2:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80047cc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	376c      	adds	r7, #108	; 0x6c
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr
 80047dc:	50000100 	.word	0x50000100
 80047e0:	50000400 	.word	0x50000400
 80047e4:	50000500 	.word	0x50000500
 80047e8:	20000014 	.word	0x20000014
 80047ec:	431bde83 	.word	0x431bde83

080047f0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b099      	sub	sp, #100	; 0x64
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047fa:	2300      	movs	r3, #0
 80047fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004808:	d102      	bne.n	8004810 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800480a:	4b6d      	ldr	r3, [pc, #436]	; (80049c0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800480c:	60bb      	str	r3, [r7, #8]
 800480e:	e01a      	b.n	8004846 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a6a      	ldr	r2, [pc, #424]	; (80049c0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d103      	bne.n	8004822 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800481a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800481e:	60bb      	str	r3, [r7, #8]
 8004820:	e011      	b.n	8004846 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a67      	ldr	r2, [pc, #412]	; (80049c4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d102      	bne.n	8004832 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800482c:	4b66      	ldr	r3, [pc, #408]	; (80049c8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800482e:	60bb      	str	r3, [r7, #8]
 8004830:	e009      	b.n	8004846 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a64      	ldr	r2, [pc, #400]	; (80049c8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d102      	bne.n	8004842 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800483c:	4b61      	ldr	r3, [pc, #388]	; (80049c4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800483e:	60bb      	str	r3, [r7, #8]
 8004840:	e001      	b.n	8004846 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004842:	2300      	movs	r3, #0
 8004844:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d101      	bne.n	8004850 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e0b0      	b.n	80049b2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004856:	2b01      	cmp	r3, #1
 8004858:	d101      	bne.n	800485e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800485a:	2302      	movs	r3, #2
 800485c:	e0a9      	b.n	80049b2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2201      	movs	r2, #1
 8004862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f003 0304 	and.w	r3, r3, #4
 8004870:	2b00      	cmp	r3, #0
 8004872:	f040 808d 	bne.w	8004990 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f003 0304 	and.w	r3, r3, #4
 800487e:	2b00      	cmp	r3, #0
 8004880:	f040 8086 	bne.w	8004990 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800488c:	d004      	beq.n	8004898 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a4b      	ldr	r2, [pc, #300]	; (80049c0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d101      	bne.n	800489c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004898:	4b4c      	ldr	r3, [pc, #304]	; (80049cc <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800489a:	e000      	b.n	800489e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800489c:	4b4c      	ldr	r3, [pc, #304]	; (80049d0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800489e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d040      	beq.n	800492a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80048a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	6859      	ldr	r1, [r3, #4]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80048ba:	035b      	lsls	r3, r3, #13
 80048bc:	430b      	orrs	r3, r1
 80048be:	431a      	orrs	r2, r3
 80048c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048c2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f003 0303 	and.w	r3, r3, #3
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d108      	bne.n	80048e4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0301 	and.w	r3, r3, #1
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d101      	bne.n	80048e4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80048e0:	2301      	movs	r3, #1
 80048e2:	e000      	b.n	80048e6 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80048e4:	2300      	movs	r3, #0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d15c      	bne.n	80049a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f003 0303 	and.w	r3, r3, #3
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d107      	bne.n	8004906 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d101      	bne.n	8004906 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8004902:	2301      	movs	r3, #1
 8004904:	e000      	b.n	8004908 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8004906:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004908:	2b00      	cmp	r3, #0
 800490a:	d14b      	bne.n	80049a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800490c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004914:	f023 030f 	bic.w	r3, r3, #15
 8004918:	683a      	ldr	r2, [r7, #0]
 800491a:	6811      	ldr	r1, [r2, #0]
 800491c:	683a      	ldr	r2, [r7, #0]
 800491e:	6892      	ldr	r2, [r2, #8]
 8004920:	430a      	orrs	r2, r1
 8004922:	431a      	orrs	r2, r3
 8004924:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004926:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004928:	e03c      	b.n	80049a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800492a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004932:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004934:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f003 0303 	and.w	r3, r3, #3
 8004940:	2b01      	cmp	r3, #1
 8004942:	d108      	bne.n	8004956 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b01      	cmp	r3, #1
 8004950:	d101      	bne.n	8004956 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8004952:	2301      	movs	r3, #1
 8004954:	e000      	b.n	8004958 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004956:	2300      	movs	r3, #0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d123      	bne.n	80049a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f003 0303 	and.w	r3, r3, #3
 8004964:	2b01      	cmp	r3, #1
 8004966:	d107      	bne.n	8004978 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0301 	and.w	r3, r3, #1
 8004970:	2b01      	cmp	r3, #1
 8004972:	d101      	bne.n	8004978 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8004974:	2301      	movs	r3, #1
 8004976:	e000      	b.n	800497a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8004978:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800497a:	2b00      	cmp	r3, #0
 800497c:	d112      	bne.n	80049a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800497e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004986:	f023 030f 	bic.w	r3, r3, #15
 800498a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800498c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800498e:	e009      	b.n	80049a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004994:	f043 0220 	orr.w	r2, r3, #32
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80049a2:	e000      	b.n	80049a6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80049a4:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80049ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80049b2:	4618      	mov	r0, r3
 80049b4:	3764      	adds	r7, #100	; 0x64
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	50000100 	.word	0x50000100
 80049c4:	50000400 	.word	0x50000400
 80049c8:	50000500 	.word	0x50000500
 80049cc:	50000300 	.word	0x50000300
 80049d0:	50000700 	.word	0x50000700

080049d4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e0:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d126      	bne.n	8004a3c <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d115      	bne.n	8004a34 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d111      	bne.n	8004a34 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d105      	bne.n	8004a34 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2c:	f043 0201 	orr.w	r2, r3, #1
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f7fd fb65 	bl	8002104 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8004a3a:	e004      	b.n	8004a46 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	4798      	blx	r3
}
 8004a46:	bf00      	nop
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b084      	sub	sp, #16
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f7fe fa85 	bl	8002f6c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8004a62:	bf00      	nop
 8004a64:	3710      	adds	r7, #16
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b084      	sub	sp, #16
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a76:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a88:	f043 0204 	orr.w	r2, r3, #4
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f7fe fa7f 	bl	8002f94 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004a96:	bf00      	nop
 8004a98:	3710      	adds	r7, #16
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
	...

08004aa0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f003 0303 	and.w	r3, r3, #3
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d108      	bne.n	8004acc <ADC_Enable+0x2c>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0301 	and.w	r3, r3, #1
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d101      	bne.n	8004acc <ADC_Enable+0x2c>
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e000      	b.n	8004ace <ADC_Enable+0x2e>
 8004acc:	2300      	movs	r3, #0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d143      	bne.n	8004b5a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	689a      	ldr	r2, [r3, #8]
 8004ad8:	4b22      	ldr	r3, [pc, #136]	; (8004b64 <ADC_Enable+0xc4>)
 8004ada:	4013      	ands	r3, r2
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00d      	beq.n	8004afc <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae4:	f043 0210 	orr.w	r2, r3, #16
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af0:	f043 0201 	orr.w	r2, r3, #1
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e02f      	b.n	8004b5c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689a      	ldr	r2, [r3, #8]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f042 0201 	orr.w	r2, r2, #1
 8004b0a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8004b0c:	f7fe f9fe 	bl	8002f0c <HAL_GetTick>
 8004b10:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004b12:	e01b      	b.n	8004b4c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004b14:	f7fe f9fa 	bl	8002f0c <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d914      	bls.n	8004b4c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0301 	and.w	r3, r3, #1
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d00d      	beq.n	8004b4c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b34:	f043 0210 	orr.w	r2, r3, #16
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b40:	f043 0201 	orr.w	r2, r3, #1
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e007      	b.n	8004b5c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d1dc      	bne.n	8004b14 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3710      	adds	r7, #16
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	8000003f 	.word	0x8000003f

08004b68 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b70:	2300      	movs	r3, #0
 8004b72:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f003 0303 	and.w	r3, r3, #3
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d108      	bne.n	8004b94 <ADC_Disable+0x2c>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0301 	and.w	r3, r3, #1
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d101      	bne.n	8004b94 <ADC_Disable+0x2c>
 8004b90:	2301      	movs	r3, #1
 8004b92:	e000      	b.n	8004b96 <ADC_Disable+0x2e>
 8004b94:	2300      	movs	r3, #0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d047      	beq.n	8004c2a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f003 030d 	and.w	r3, r3, #13
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d10f      	bne.n	8004bc8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	689a      	ldr	r2, [r3, #8]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f042 0202 	orr.w	r2, r2, #2
 8004bb6:	609a      	str	r2, [r3, #8]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2203      	movs	r2, #3
 8004bbe:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8004bc0:	f7fe f9a4 	bl	8002f0c <HAL_GetTick>
 8004bc4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004bc6:	e029      	b.n	8004c1c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bcc:	f043 0210 	orr.w	r2, r3, #16
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd8:	f043 0201 	orr.w	r2, r3, #1
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e023      	b.n	8004c2c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004be4:	f7fe f992 	bl	8002f0c <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d914      	bls.n	8004c1c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f003 0301 	and.w	r3, r3, #1
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d10d      	bne.n	8004c1c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c04:	f043 0210 	orr.w	r2, r3, #16
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c10:	f043 0201 	orr.w	r2, r3, #1
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e007      	b.n	8004c2c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d0dc      	beq.n	8004be4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3710      	adds	r7, #16
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8004c42:	2300      	movs	r3, #0
 8004c44:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8004c46:	2300      	movs	r3, #0
 8004c48:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f003 030c 	and.w	r3, r3, #12
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f000 809b 	beq.w	8004d90 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c68:	d12a      	bne.n	8004cc0 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d126      	bne.n	8004cc0 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d122      	bne.n	8004cc0 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8004c7a:	230c      	movs	r3, #12
 8004c7c:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8004c7e:	e014      	b.n	8004caa <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	4a46      	ldr	r2, [pc, #280]	; (8004d9c <ADC_ConversionStop+0x168>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d90d      	bls.n	8004ca4 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8c:	f043 0210 	orr.w	r2, r3, #16
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c98:	f043 0201 	orr.w	r2, r3, #1
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e076      	b.n	8004d92 <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb4:	2b40      	cmp	r3, #64	; 0x40
 8004cb6:	d1e3      	bne.n	8004c80 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2240      	movs	r2, #64	; 0x40
 8004cbe:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	2b60      	cmp	r3, #96	; 0x60
 8004cc4:	d015      	beq.n	8004cf2 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f003 0304 	and.w	r3, r3, #4
 8004cd0:	2b04      	cmp	r3, #4
 8004cd2:	d10e      	bne.n	8004cf2 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d107      	bne.n	8004cf2 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	689a      	ldr	r2, [r3, #8]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f042 0210 	orr.w	r2, r2, #16
 8004cf0:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	2b0c      	cmp	r3, #12
 8004cf6:	d015      	beq.n	8004d24 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f003 0308 	and.w	r3, r3, #8
 8004d02:	2b08      	cmp	r3, #8
 8004d04:	d10e      	bne.n	8004d24 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d107      	bne.n	8004d24 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	689a      	ldr	r2, [r3, #8]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f042 0220 	orr.w	r2, r2, #32
 8004d22:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	2b60      	cmp	r3, #96	; 0x60
 8004d28:	d005      	beq.n	8004d36 <ADC_ConversionStop+0x102>
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	2b6c      	cmp	r3, #108	; 0x6c
 8004d2e:	d105      	bne.n	8004d3c <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004d30:	230c      	movs	r3, #12
 8004d32:	617b      	str	r3, [r7, #20]
        break;
 8004d34:	e005      	b.n	8004d42 <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004d36:	2308      	movs	r3, #8
 8004d38:	617b      	str	r3, [r7, #20]
        break;
 8004d3a:	e002      	b.n	8004d42 <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004d3c:	2304      	movs	r3, #4
 8004d3e:	617b      	str	r3, [r7, #20]
        break;
 8004d40:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004d42:	f7fe f8e3 	bl	8002f0c <HAL_GetTick>
 8004d46:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8004d48:	e01b      	b.n	8004d82 <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004d4a:	f7fe f8df 	bl	8002f0c <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	2b0b      	cmp	r3, #11
 8004d56:	d914      	bls.n	8004d82 <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	689a      	ldr	r2, [r3, #8]
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	4013      	ands	r3, r2
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00d      	beq.n	8004d82 <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6a:	f043 0210 	orr.w	r2, r3, #16
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d76:	f043 0201 	orr.w	r2, r3, #1
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e007      	b.n	8004d92 <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	689a      	ldr	r2, [r3, #8]
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1dc      	bne.n	8004d4a <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3718      	adds	r7, #24
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	000993ff 	.word	0x000993ff

08004da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f003 0307 	and.w	r3, r3, #7
 8004dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004db0:	4b0c      	ldr	r3, [pc, #48]	; (8004de4 <__NVIC_SetPriorityGrouping+0x44>)
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004db6:	68ba      	ldr	r2, [r7, #8]
 8004db8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004dc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004dd2:	4a04      	ldr	r2, [pc, #16]	; (8004de4 <__NVIC_SetPriorityGrouping+0x44>)
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	60d3      	str	r3, [r2, #12]
}
 8004dd8:	bf00      	nop
 8004dda:	3714      	adds	r7, #20
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr
 8004de4:	e000ed00 	.word	0xe000ed00

08004de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004de8:	b480      	push	{r7}
 8004dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004dec:	4b04      	ldr	r3, [pc, #16]	; (8004e00 <__NVIC_GetPriorityGrouping+0x18>)
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	0a1b      	lsrs	r3, r3, #8
 8004df2:	f003 0307 	and.w	r3, r3, #7
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr
 8004e00:	e000ed00 	.word	0xe000ed00

08004e04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	db0b      	blt.n	8004e2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e16:	79fb      	ldrb	r3, [r7, #7]
 8004e18:	f003 021f 	and.w	r2, r3, #31
 8004e1c:	4907      	ldr	r1, [pc, #28]	; (8004e3c <__NVIC_EnableIRQ+0x38>)
 8004e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e22:	095b      	lsrs	r3, r3, #5
 8004e24:	2001      	movs	r0, #1
 8004e26:	fa00 f202 	lsl.w	r2, r0, r2
 8004e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004e2e:	bf00      	nop
 8004e30:	370c      	adds	r7, #12
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	e000e100 	.word	0xe000e100

08004e40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	4603      	mov	r3, r0
 8004e48:	6039      	str	r1, [r7, #0]
 8004e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	db0a      	blt.n	8004e6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	b2da      	uxtb	r2, r3
 8004e58:	490c      	ldr	r1, [pc, #48]	; (8004e8c <__NVIC_SetPriority+0x4c>)
 8004e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e5e:	0112      	lsls	r2, r2, #4
 8004e60:	b2d2      	uxtb	r2, r2
 8004e62:	440b      	add	r3, r1
 8004e64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e68:	e00a      	b.n	8004e80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	b2da      	uxtb	r2, r3
 8004e6e:	4908      	ldr	r1, [pc, #32]	; (8004e90 <__NVIC_SetPriority+0x50>)
 8004e70:	79fb      	ldrb	r3, [r7, #7]
 8004e72:	f003 030f 	and.w	r3, r3, #15
 8004e76:	3b04      	subs	r3, #4
 8004e78:	0112      	lsls	r2, r2, #4
 8004e7a:	b2d2      	uxtb	r2, r2
 8004e7c:	440b      	add	r3, r1
 8004e7e:	761a      	strb	r2, [r3, #24]
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr
 8004e8c:	e000e100 	.word	0xe000e100
 8004e90:	e000ed00 	.word	0xe000ed00

08004e94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b089      	sub	sp, #36	; 0x24
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f003 0307 	and.w	r3, r3, #7
 8004ea6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	f1c3 0307 	rsb	r3, r3, #7
 8004eae:	2b04      	cmp	r3, #4
 8004eb0:	bf28      	it	cs
 8004eb2:	2304      	movcs	r3, #4
 8004eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	3304      	adds	r3, #4
 8004eba:	2b06      	cmp	r3, #6
 8004ebc:	d902      	bls.n	8004ec4 <NVIC_EncodePriority+0x30>
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	3b03      	subs	r3, #3
 8004ec2:	e000      	b.n	8004ec6 <NVIC_EncodePriority+0x32>
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed2:	43da      	mvns	r2, r3
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	401a      	ands	r2, r3
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004edc:	f04f 31ff 	mov.w	r1, #4294967295
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ee6:	43d9      	mvns	r1, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004eec:	4313      	orrs	r3, r2
         );
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3724      	adds	r7, #36	; 0x24
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
	...

08004efc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	3b01      	subs	r3, #1
 8004f08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f0c:	d301      	bcc.n	8004f12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e00f      	b.n	8004f32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f12:	4a0a      	ldr	r2, [pc, #40]	; (8004f3c <SysTick_Config+0x40>)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	3b01      	subs	r3, #1
 8004f18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f1a:	210f      	movs	r1, #15
 8004f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f20:	f7ff ff8e 	bl	8004e40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f24:	4b05      	ldr	r3, [pc, #20]	; (8004f3c <SysTick_Config+0x40>)
 8004f26:	2200      	movs	r2, #0
 8004f28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f2a:	4b04      	ldr	r3, [pc, #16]	; (8004f3c <SysTick_Config+0x40>)
 8004f2c:	2207      	movs	r2, #7
 8004f2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3708      	adds	r7, #8
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	e000e010 	.word	0xe000e010

08004f40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f7ff ff29 	bl	8004da0 <__NVIC_SetPriorityGrouping>
}
 8004f4e:	bf00      	nop
 8004f50:	3708      	adds	r7, #8
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}

08004f56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b086      	sub	sp, #24
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	60b9      	str	r1, [r7, #8]
 8004f60:	607a      	str	r2, [r7, #4]
 8004f62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004f64:	2300      	movs	r3, #0
 8004f66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004f68:	f7ff ff3e 	bl	8004de8 <__NVIC_GetPriorityGrouping>
 8004f6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	68b9      	ldr	r1, [r7, #8]
 8004f72:	6978      	ldr	r0, [r7, #20]
 8004f74:	f7ff ff8e 	bl	8004e94 <NVIC_EncodePriority>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f7e:	4611      	mov	r1, r2
 8004f80:	4618      	mov	r0, r3
 8004f82:	f7ff ff5d 	bl	8004e40 <__NVIC_SetPriority>
}
 8004f86:	bf00      	nop
 8004f88:	3718      	adds	r7, #24
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b082      	sub	sp, #8
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	4603      	mov	r3, r0
 8004f96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f7ff ff31 	bl	8004e04 <__NVIC_EnableIRQ>
}
 8004fa2:	bf00      	nop
 8004fa4:	3708      	adds	r7, #8
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b082      	sub	sp, #8
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f7ff ffa2 	bl	8004efc <SysTick_Config>
 8004fb8:	4603      	mov	r3, r0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3708      	adds	r7, #8
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b084      	sub	sp, #16
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d101      	bne.n	8004fd8 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e037      	b.n	8005048 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2202      	movs	r2, #2
 8004fdc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004fee:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004ff2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004ffc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005008:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005014:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	69db      	ldr	r3, [r3, #28]
 800501a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	4313      	orrs	r3, r2
 8005020:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 f9c4 	bl	80053b8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8005046:	2300      	movs	r3, #0
}  
 8005048:	4618      	mov	r0, r3
 800504a:	3710      	adds	r7, #16
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b086      	sub	sp, #24
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
 800505c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800505e:	2300      	movs	r3, #0
 8005060:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d101      	bne.n	8005070 <HAL_DMA_Start_IT+0x20>
 800506c:	2302      	movs	r3, #2
 800506e:	e04a      	b.n	8005106 <HAL_DMA_Start_IT+0xb6>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800507e:	2b01      	cmp	r3, #1
 8005080:	d13a      	bne.n	80050f8 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2202      	movs	r2, #2
 8005086:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f022 0201 	bic.w	r2, r2, #1
 800509e:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	68b9      	ldr	r1, [r7, #8]
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f000 f958 	bl	800535c <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d008      	beq.n	80050c6 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f042 020e 	orr.w	r2, r2, #14
 80050c2:	601a      	str	r2, [r3, #0]
 80050c4:	e00f      	b.n	80050e6 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f042 020a 	orr.w	r2, r2, #10
 80050d4:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f022 0204 	bic.w	r2, r2, #4
 80050e4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f042 0201 	orr.w	r2, r2, #1
 80050f4:	601a      	str	r2, [r3, #0]
 80050f6:	e005      	b.n	8005104 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8005100:	2302      	movs	r3, #2
 8005102:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8005104:	7dfb      	ldrb	r3, [r7, #23]
} 
 8005106:	4618      	mov	r0, r3
 8005108:	3718      	adds	r7, #24
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800510e:	b480      	push	{r7}
 8005110:	b083      	sub	sp, #12
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800511c:	2b02      	cmp	r3, #2
 800511e:	d008      	beq.n	8005132 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2204      	movs	r2, #4
 8005124:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e020      	b.n	8005174 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f022 020e 	bic.w	r2, r2, #14
 8005140:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f022 0201 	bic.w	r2, r2, #1
 8005150:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800515a:	2101      	movs	r1, #1
 800515c:	fa01 f202 	lsl.w	r2, r1, r2
 8005160:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2201      	movs	r2, #1
 8005166:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005188:	2300      	movs	r3, #0
 800518a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005192:	2b02      	cmp	r3, #2
 8005194:	d005      	beq.n	80051a2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2204      	movs	r2, #4
 800519a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	73fb      	strb	r3, [r7, #15]
 80051a0:	e027      	b.n	80051f2 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f022 020e 	bic.w	r2, r2, #14
 80051b0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f022 0201 	bic.w	r2, r2, #1
 80051c0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ca:	2101      	movs	r1, #1
 80051cc:	fa01 f202 	lsl.w	r2, r1, r2
 80051d0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d003      	beq.n	80051f2 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	4798      	blx	r3
    } 
  }
  return status;
 80051f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005218:	2204      	movs	r2, #4
 800521a:	409a      	lsls	r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	4013      	ands	r3, r2
 8005220:	2b00      	cmp	r3, #0
 8005222:	d024      	beq.n	800526e <HAL_DMA_IRQHandler+0x72>
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	f003 0304 	and.w	r3, r3, #4
 800522a:	2b00      	cmp	r3, #0
 800522c:	d01f      	beq.n	800526e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 0320 	and.w	r3, r3, #32
 8005238:	2b00      	cmp	r3, #0
 800523a:	d107      	bne.n	800524c <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f022 0204 	bic.w	r2, r2, #4
 800524a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005254:	2104      	movs	r1, #4
 8005256:	fa01 f202 	lsl.w	r2, r1, r2
 800525a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005260:	2b00      	cmp	r3, #0
 8005262:	d06a      	beq.n	800533a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800526c:	e065      	b.n	800533a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005272:	2202      	movs	r2, #2
 8005274:	409a      	lsls	r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	4013      	ands	r3, r2
 800527a:	2b00      	cmp	r3, #0
 800527c:	d02c      	beq.n	80052d8 <HAL_DMA_IRQHandler+0xdc>
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	f003 0302 	and.w	r3, r3, #2
 8005284:	2b00      	cmp	r3, #0
 8005286:	d027      	beq.n	80052d8 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0320 	and.w	r3, r3, #32
 8005292:	2b00      	cmp	r3, #0
 8005294:	d10b      	bne.n	80052ae <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f022 020a 	bic.w	r2, r2, #10
 80052a4:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2201      	movs	r2, #1
 80052aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b6:	2102      	movs	r1, #2
 80052b8:	fa01 f202 	lsl.w	r2, r1, r2
 80052bc:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d035      	beq.n	800533a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80052d6:	e030      	b.n	800533a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052dc:	2208      	movs	r2, #8
 80052de:	409a      	lsls	r2, r3
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	4013      	ands	r3, r2
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d028      	beq.n	800533a <HAL_DMA_IRQHandler+0x13e>
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	f003 0308 	and.w	r3, r3, #8
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d023      	beq.n	800533a <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f022 020e 	bic.w	r2, r2, #14
 8005300:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800530a:	2101      	movs	r1, #1
 800530c:	fa01 f202 	lsl.w	r2, r1, r2
 8005310:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2201      	movs	r2, #1
 8005316:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532c:	2b00      	cmp	r3, #0
 800532e:	d004      	beq.n	800533a <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	4798      	blx	r3
    }
  }
}  
 8005338:	e7ff      	b.n	800533a <HAL_DMA_IRQHandler+0x13e>
 800533a:	bf00      	nop
 800533c:	3710      	adds	r7, #16
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005342:	b480      	push	{r7}
 8005344:	b083      	sub	sp, #12
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8005350:	4618      	mov	r0, r3
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
 8005368:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005372:	2101      	movs	r1, #1
 8005374:	fa01 f202 	lsl.w	r2, r1, r2
 8005378:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	2b10      	cmp	r3, #16
 8005388:	d108      	bne.n	800539c <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68ba      	ldr	r2, [r7, #8]
 8005398:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800539a:	e007      	b.n	80053ac <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68ba      	ldr	r2, [r7, #8]
 80053a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	60da      	str	r2, [r3, #12]
}
 80053ac:	bf00      	nop
 80053ae:	3714      	adds	r7, #20
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	461a      	mov	r2, r3
 80053c6:	4b14      	ldr	r3, [pc, #80]	; (8005418 <DMA_CalcBaseAndBitshift+0x60>)
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d80f      	bhi.n	80053ec <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	461a      	mov	r2, r3
 80053d2:	4b12      	ldr	r3, [pc, #72]	; (800541c <DMA_CalcBaseAndBitshift+0x64>)
 80053d4:	4413      	add	r3, r2
 80053d6:	4a12      	ldr	r2, [pc, #72]	; (8005420 <DMA_CalcBaseAndBitshift+0x68>)
 80053d8:	fba2 2303 	umull	r2, r3, r2, r3
 80053dc:	091b      	lsrs	r3, r3, #4
 80053de:	009a      	lsls	r2, r3, #2
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a0f      	ldr	r2, [pc, #60]	; (8005424 <DMA_CalcBaseAndBitshift+0x6c>)
 80053e8:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80053ea:	e00e      	b.n	800540a <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	461a      	mov	r2, r3
 80053f2:	4b0d      	ldr	r3, [pc, #52]	; (8005428 <DMA_CalcBaseAndBitshift+0x70>)
 80053f4:	4413      	add	r3, r2
 80053f6:	4a0a      	ldr	r2, [pc, #40]	; (8005420 <DMA_CalcBaseAndBitshift+0x68>)
 80053f8:	fba2 2303 	umull	r2, r3, r2, r3
 80053fc:	091b      	lsrs	r3, r3, #4
 80053fe:	009a      	lsls	r2, r3, #2
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a09      	ldr	r2, [pc, #36]	; (800542c <DMA_CalcBaseAndBitshift+0x74>)
 8005408:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800540a:	bf00      	nop
 800540c:	370c      	adds	r7, #12
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	40020407 	.word	0x40020407
 800541c:	bffdfff8 	.word	0xbffdfff8
 8005420:	cccccccd 	.word	0xcccccccd
 8005424:	40020000 	.word	0x40020000
 8005428:	bffdfbf8 	.word	0xbffdfbf8
 800542c:	40020400 	.word	0x40020400

08005430 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005430:	b480      	push	{r7}
 8005432:	b087      	sub	sp, #28
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800543a:	2300      	movs	r3, #0
 800543c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800543e:	e154      	b.n	80056ea <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	2101      	movs	r1, #1
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	fa01 f303 	lsl.w	r3, r1, r3
 800544c:	4013      	ands	r3, r2
 800544e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2b00      	cmp	r3, #0
 8005454:	f000 8146 	beq.w	80056e4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	f003 0303 	and.w	r3, r3, #3
 8005460:	2b01      	cmp	r3, #1
 8005462:	d005      	beq.n	8005470 <HAL_GPIO_Init+0x40>
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f003 0303 	and.w	r3, r3, #3
 800546c:	2b02      	cmp	r3, #2
 800546e:	d130      	bne.n	80054d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	005b      	lsls	r3, r3, #1
 800547a:	2203      	movs	r2, #3
 800547c:	fa02 f303 	lsl.w	r3, r2, r3
 8005480:	43db      	mvns	r3, r3
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	4013      	ands	r3, r2
 8005486:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	68da      	ldr	r2, [r3, #12]
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	005b      	lsls	r3, r3, #1
 8005490:	fa02 f303 	lsl.w	r3, r2, r3
 8005494:	693a      	ldr	r2, [r7, #16]
 8005496:	4313      	orrs	r3, r2
 8005498:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	693a      	ldr	r2, [r7, #16]
 800549e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80054a6:	2201      	movs	r2, #1
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	fa02 f303 	lsl.w	r3, r2, r3
 80054ae:	43db      	mvns	r3, r3
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	4013      	ands	r3, r2
 80054b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	091b      	lsrs	r3, r3, #4
 80054bc:	f003 0201 	and.w	r2, r3, #1
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	fa02 f303 	lsl.w	r3, r2, r3
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	f003 0303 	and.w	r3, r3, #3
 80054da:	2b03      	cmp	r3, #3
 80054dc:	d017      	beq.n	800550e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	005b      	lsls	r3, r3, #1
 80054e8:	2203      	movs	r2, #3
 80054ea:	fa02 f303 	lsl.w	r3, r2, r3
 80054ee:	43db      	mvns	r3, r3
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	4013      	ands	r3, r2
 80054f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	689a      	ldr	r2, [r3, #8]
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	005b      	lsls	r3, r3, #1
 80054fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	4313      	orrs	r3, r2
 8005506:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	f003 0303 	and.w	r3, r3, #3
 8005516:	2b02      	cmp	r3, #2
 8005518:	d123      	bne.n	8005562 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	08da      	lsrs	r2, r3, #3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	3208      	adds	r2, #8
 8005522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005526:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	f003 0307 	and.w	r3, r3, #7
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	220f      	movs	r2, #15
 8005532:	fa02 f303 	lsl.w	r3, r2, r3
 8005536:	43db      	mvns	r3, r3
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	4013      	ands	r3, r2
 800553c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	691a      	ldr	r2, [r3, #16]
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	f003 0307 	and.w	r3, r3, #7
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	fa02 f303 	lsl.w	r3, r2, r3
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	4313      	orrs	r3, r2
 8005552:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	08da      	lsrs	r2, r3, #3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	3208      	adds	r2, #8
 800555c:	6939      	ldr	r1, [r7, #16]
 800555e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	005b      	lsls	r3, r3, #1
 800556c:	2203      	movs	r2, #3
 800556e:	fa02 f303 	lsl.w	r3, r2, r3
 8005572:	43db      	mvns	r3, r3
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	4013      	ands	r3, r2
 8005578:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f003 0203 	and.w	r2, r3, #3
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	005b      	lsls	r3, r3, #1
 8005586:	fa02 f303 	lsl.w	r3, r2, r3
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	4313      	orrs	r3, r2
 800558e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	f000 80a0 	beq.w	80056e4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055a4:	4b58      	ldr	r3, [pc, #352]	; (8005708 <HAL_GPIO_Init+0x2d8>)
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	4a57      	ldr	r2, [pc, #348]	; (8005708 <HAL_GPIO_Init+0x2d8>)
 80055aa:	f043 0301 	orr.w	r3, r3, #1
 80055ae:	6193      	str	r3, [r2, #24]
 80055b0:	4b55      	ldr	r3, [pc, #340]	; (8005708 <HAL_GPIO_Init+0x2d8>)
 80055b2:	699b      	ldr	r3, [r3, #24]
 80055b4:	f003 0301 	and.w	r3, r3, #1
 80055b8:	60bb      	str	r3, [r7, #8]
 80055ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80055bc:	4a53      	ldr	r2, [pc, #332]	; (800570c <HAL_GPIO_Init+0x2dc>)
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	089b      	lsrs	r3, r3, #2
 80055c2:	3302      	adds	r3, #2
 80055c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f003 0303 	and.w	r3, r3, #3
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	220f      	movs	r2, #15
 80055d4:	fa02 f303 	lsl.w	r3, r2, r3
 80055d8:	43db      	mvns	r3, r3
 80055da:	693a      	ldr	r2, [r7, #16]
 80055dc:	4013      	ands	r3, r2
 80055de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80055e6:	d019      	beq.n	800561c <HAL_GPIO_Init+0x1ec>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a49      	ldr	r2, [pc, #292]	; (8005710 <HAL_GPIO_Init+0x2e0>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d013      	beq.n	8005618 <HAL_GPIO_Init+0x1e8>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a48      	ldr	r2, [pc, #288]	; (8005714 <HAL_GPIO_Init+0x2e4>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d00d      	beq.n	8005614 <HAL_GPIO_Init+0x1e4>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a47      	ldr	r2, [pc, #284]	; (8005718 <HAL_GPIO_Init+0x2e8>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d007      	beq.n	8005610 <HAL_GPIO_Init+0x1e0>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a46      	ldr	r2, [pc, #280]	; (800571c <HAL_GPIO_Init+0x2ec>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d101      	bne.n	800560c <HAL_GPIO_Init+0x1dc>
 8005608:	2304      	movs	r3, #4
 800560a:	e008      	b.n	800561e <HAL_GPIO_Init+0x1ee>
 800560c:	2305      	movs	r3, #5
 800560e:	e006      	b.n	800561e <HAL_GPIO_Init+0x1ee>
 8005610:	2303      	movs	r3, #3
 8005612:	e004      	b.n	800561e <HAL_GPIO_Init+0x1ee>
 8005614:	2302      	movs	r3, #2
 8005616:	e002      	b.n	800561e <HAL_GPIO_Init+0x1ee>
 8005618:	2301      	movs	r3, #1
 800561a:	e000      	b.n	800561e <HAL_GPIO_Init+0x1ee>
 800561c:	2300      	movs	r3, #0
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	f002 0203 	and.w	r2, r2, #3
 8005624:	0092      	lsls	r2, r2, #2
 8005626:	4093      	lsls	r3, r2
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	4313      	orrs	r3, r2
 800562c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800562e:	4937      	ldr	r1, [pc, #220]	; (800570c <HAL_GPIO_Init+0x2dc>)
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	089b      	lsrs	r3, r3, #2
 8005634:	3302      	adds	r3, #2
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800563c:	4b38      	ldr	r3, [pc, #224]	; (8005720 <HAL_GPIO_Init+0x2f0>)
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	43db      	mvns	r3, r3
 8005646:	693a      	ldr	r2, [r7, #16]
 8005648:	4013      	ands	r3, r2
 800564a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d003      	beq.n	8005660 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8005658:	693a      	ldr	r2, [r7, #16]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	4313      	orrs	r3, r2
 800565e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005660:	4a2f      	ldr	r2, [pc, #188]	; (8005720 <HAL_GPIO_Init+0x2f0>)
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005666:	4b2e      	ldr	r3, [pc, #184]	; (8005720 <HAL_GPIO_Init+0x2f0>)
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	43db      	mvns	r3, r3
 8005670:	693a      	ldr	r2, [r7, #16]
 8005672:	4013      	ands	r3, r2
 8005674:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d003      	beq.n	800568a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8005682:	693a      	ldr	r2, [r7, #16]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	4313      	orrs	r3, r2
 8005688:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800568a:	4a25      	ldr	r2, [pc, #148]	; (8005720 <HAL_GPIO_Init+0x2f0>)
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005690:	4b23      	ldr	r3, [pc, #140]	; (8005720 <HAL_GPIO_Init+0x2f0>)
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	43db      	mvns	r3, r3
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	4013      	ands	r3, r2
 800569e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d003      	beq.n	80056b4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80056b4:	4a1a      	ldr	r2, [pc, #104]	; (8005720 <HAL_GPIO_Init+0x2f0>)
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80056ba:	4b19      	ldr	r3, [pc, #100]	; (8005720 <HAL_GPIO_Init+0x2f0>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	43db      	mvns	r3, r3
 80056c4:	693a      	ldr	r2, [r7, #16]
 80056c6:	4013      	ands	r3, r2
 80056c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d003      	beq.n	80056de <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	4313      	orrs	r3, r2
 80056dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80056de:	4a10      	ldr	r2, [pc, #64]	; (8005720 <HAL_GPIO_Init+0x2f0>)
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	3301      	adds	r3, #1
 80056e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	fa22 f303 	lsr.w	r3, r2, r3
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f47f aea3 	bne.w	8005440 <HAL_GPIO_Init+0x10>
  }
}
 80056fa:	bf00      	nop
 80056fc:	bf00      	nop
 80056fe:	371c      	adds	r7, #28
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr
 8005708:	40021000 	.word	0x40021000
 800570c:	40010000 	.word	0x40010000
 8005710:	48000400 	.word	0x48000400
 8005714:	48000800 	.word	0x48000800
 8005718:	48000c00 	.word	0x48000c00
 800571c:	48001000 	.word	0x48001000
 8005720:	40010400 	.word	0x40010400

08005724 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	460b      	mov	r3, r1
 800572e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	691a      	ldr	r2, [r3, #16]
 8005734:	887b      	ldrh	r3, [r7, #2]
 8005736:	4013      	ands	r3, r2
 8005738:	2b00      	cmp	r3, #0
 800573a:	d002      	beq.n	8005742 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800573c:	2301      	movs	r3, #1
 800573e:	73fb      	strb	r3, [r7, #15]
 8005740:	e001      	b.n	8005746 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005742:	2300      	movs	r3, #0
 8005744:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005746:	7bfb      	ldrb	r3, [r7, #15]
}
 8005748:	4618      	mov	r0, r3
 800574a:	3714      	adds	r7, #20
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	460b      	mov	r3, r1
 800575e:	807b      	strh	r3, [r7, #2]
 8005760:	4613      	mov	r3, r2
 8005762:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005764:	787b      	ldrb	r3, [r7, #1]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d003      	beq.n	8005772 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800576a:	887a      	ldrh	r2, [r7, #2]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005770:	e002      	b.n	8005778 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005772:	887a      	ldrh	r2, [r7, #2]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005778:	bf00      	nop
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005784:	b480      	push	{r7}
 8005786:	b085      	sub	sp, #20
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	460b      	mov	r3, r1
 800578e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	695b      	ldr	r3, [r3, #20]
 8005794:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005796:	887a      	ldrh	r2, [r7, #2]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	4013      	ands	r3, r2
 800579c:	041a      	lsls	r2, r3, #16
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	43d9      	mvns	r1, r3
 80057a2:	887b      	ldrh	r3, [r7, #2]
 80057a4:	400b      	ands	r3, r1
 80057a6:	431a      	orrs	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	619a      	str	r2, [r3, #24]
}
 80057ac:	bf00      	nop
 80057ae:	3714      	adds	r7, #20
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
 80057be:	4603      	mov	r3, r0
 80057c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80057c2:	4b08      	ldr	r3, [pc, #32]	; (80057e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80057c4:	695a      	ldr	r2, [r3, #20]
 80057c6:	88fb      	ldrh	r3, [r7, #6]
 80057c8:	4013      	ands	r3, r2
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d006      	beq.n	80057dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80057ce:	4a05      	ldr	r2, [pc, #20]	; (80057e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80057d0:	88fb      	ldrh	r3, [r7, #6]
 80057d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80057d4:	88fb      	ldrh	r3, [r7, #6]
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7fc fb90 	bl	8001efc <HAL_GPIO_EXTI_Callback>
  }
}
 80057dc:	bf00      	nop
 80057de:	3708      	adds	r7, #8
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	40010400 	.word	0x40010400

080057e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d101      	bne.n	80057fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e081      	b.n	80058fe <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005800:	b2db      	uxtb	r3, r3
 8005802:	2b00      	cmp	r3, #0
 8005804:	d106      	bne.n	8005814 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f7fc ff5e 	bl	80026d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2224      	movs	r2, #36	; 0x24
 8005818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f022 0201 	bic.w	r2, r2, #1
 800582a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685a      	ldr	r2, [r3, #4]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005838:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	689a      	ldr	r2, [r3, #8]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005848:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	2b01      	cmp	r3, #1
 8005850:	d107      	bne.n	8005862 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	689a      	ldr	r2, [r3, #8]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800585e:	609a      	str	r2, [r3, #8]
 8005860:	e006      	b.n	8005870 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	689a      	ldr	r2, [r3, #8]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800586e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	2b02      	cmp	r3, #2
 8005876:	d104      	bne.n	8005882 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005880:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	6812      	ldr	r2, [r2, #0]
 800588c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005890:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005894:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68da      	ldr	r2, [r3, #12]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80058a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	691a      	ldr	r2, [r3, #16]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	695b      	ldr	r3, [r3, #20]
 80058ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	430a      	orrs	r2, r1
 80058be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	69d9      	ldr	r1, [r3, #28]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a1a      	ldr	r2, [r3, #32]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	430a      	orrs	r2, r1
 80058ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f042 0201 	orr.w	r2, r2, #1
 80058de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2220      	movs	r2, #32
 80058ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3708      	adds	r7, #8
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
	...

08005908 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b088      	sub	sp, #32
 800590c:	af02      	add	r7, sp, #8
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	607a      	str	r2, [r7, #4]
 8005912:	461a      	mov	r2, r3
 8005914:	460b      	mov	r3, r1
 8005916:	817b      	strh	r3, [r7, #10]
 8005918:	4613      	mov	r3, r2
 800591a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005922:	b2db      	uxtb	r3, r3
 8005924:	2b20      	cmp	r3, #32
 8005926:	f040 80da 	bne.w	8005ade <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005930:	2b01      	cmp	r3, #1
 8005932:	d101      	bne.n	8005938 <HAL_I2C_Master_Transmit+0x30>
 8005934:	2302      	movs	r3, #2
 8005936:	e0d3      	b.n	8005ae0 <HAL_I2C_Master_Transmit+0x1d8>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005940:	f7fd fae4 	bl	8002f0c <HAL_GetTick>
 8005944:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	9300      	str	r3, [sp, #0]
 800594a:	2319      	movs	r3, #25
 800594c:	2201      	movs	r2, #1
 800594e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005952:	68f8      	ldr	r0, [r7, #12]
 8005954:	f000 ff15 	bl	8006782 <I2C_WaitOnFlagUntilTimeout>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d001      	beq.n	8005962 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e0be      	b.n	8005ae0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2221      	movs	r2, #33	; 0x21
 8005966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2210      	movs	r2, #16
 800596e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	893a      	ldrh	r2, [r7, #8]
 8005982:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800598e:	b29b      	uxth	r3, r3
 8005990:	2bff      	cmp	r3, #255	; 0xff
 8005992:	d90e      	bls.n	80059b2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	22ff      	movs	r2, #255	; 0xff
 8005998:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800599e:	b2da      	uxtb	r2, r3
 80059a0:	8979      	ldrh	r1, [r7, #10]
 80059a2:	4b51      	ldr	r3, [pc, #324]	; (8005ae8 <HAL_I2C_Master_Transmit+0x1e0>)
 80059a4:	9300      	str	r3, [sp, #0]
 80059a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80059aa:	68f8      	ldr	r0, [r7, #12]
 80059ac:	f001 f8a2 	bl	8006af4 <I2C_TransferConfig>
 80059b0:	e06c      	b.n	8005a8c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059c0:	b2da      	uxtb	r2, r3
 80059c2:	8979      	ldrh	r1, [r7, #10]
 80059c4:	4b48      	ldr	r3, [pc, #288]	; (8005ae8 <HAL_I2C_Master_Transmit+0x1e0>)
 80059c6:	9300      	str	r3, [sp, #0]
 80059c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80059cc:	68f8      	ldr	r0, [r7, #12]
 80059ce:	f001 f891 	bl	8006af4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80059d2:	e05b      	b.n	8005a8c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059d4:	697a      	ldr	r2, [r7, #20]
 80059d6:	6a39      	ldr	r1, [r7, #32]
 80059d8:	68f8      	ldr	r0, [r7, #12]
 80059da:	f000 ff21 	bl	8006820 <I2C_WaitOnTXISFlagUntilTimeout>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d001      	beq.n	80059e8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e07b      	b.n	8005ae0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ec:	781a      	ldrb	r2, [r3, #0]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f8:	1c5a      	adds	r2, r3, #1
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	3b01      	subs	r3, #1
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a10:	3b01      	subs	r3, #1
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d034      	beq.n	8005a8c <HAL_I2C_Master_Transmit+0x184>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d130      	bne.n	8005a8c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	9300      	str	r3, [sp, #0]
 8005a2e:	6a3b      	ldr	r3, [r7, #32]
 8005a30:	2200      	movs	r2, #0
 8005a32:	2180      	movs	r1, #128	; 0x80
 8005a34:	68f8      	ldr	r0, [r7, #12]
 8005a36:	f000 fea4 	bl	8006782 <I2C_WaitOnFlagUntilTimeout>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d001      	beq.n	8005a44 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e04d      	b.n	8005ae0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	2bff      	cmp	r3, #255	; 0xff
 8005a4c:	d90e      	bls.n	8005a6c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	22ff      	movs	r2, #255	; 0xff
 8005a52:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a58:	b2da      	uxtb	r2, r3
 8005a5a:	8979      	ldrh	r1, [r7, #10]
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	9300      	str	r3, [sp, #0]
 8005a60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	f001 f845 	bl	8006af4 <I2C_TransferConfig>
 8005a6a:	e00f      	b.n	8005a8c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a7a:	b2da      	uxtb	r2, r3
 8005a7c:	8979      	ldrh	r1, [r7, #10]
 8005a7e:	2300      	movs	r3, #0
 8005a80:	9300      	str	r3, [sp, #0]
 8005a82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f001 f834 	bl	8006af4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d19e      	bne.n	80059d4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	6a39      	ldr	r1, [r7, #32]
 8005a9a:	68f8      	ldr	r0, [r7, #12]
 8005a9c:	f000 ff07 	bl	80068ae <I2C_WaitOnSTOPFlagUntilTimeout>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d001      	beq.n	8005aaa <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e01a      	b.n	8005ae0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	2220      	movs	r2, #32
 8005ab0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	6859      	ldr	r1, [r3, #4]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	4b0b      	ldr	r3, [pc, #44]	; (8005aec <HAL_I2C_Master_Transmit+0x1e4>)
 8005abe:	400b      	ands	r3, r1
 8005ac0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2220      	movs	r2, #32
 8005ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005ada:	2300      	movs	r3, #0
 8005adc:	e000      	b.n	8005ae0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005ade:	2302      	movs	r3, #2
  }
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3718      	adds	r7, #24
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	80002000 	.word	0x80002000
 8005aec:	fe00e800 	.word	0xfe00e800

08005af0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b08a      	sub	sp, #40	; 0x28
 8005af4:	af02      	add	r7, sp, #8
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	607a      	str	r2, [r7, #4]
 8005afa:	603b      	str	r3, [r7, #0]
 8005afc:	460b      	mov	r3, r1
 8005afe:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005b00:	2300      	movs	r3, #0
 8005b02:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	2b20      	cmp	r3, #32
 8005b0e:	f040 80f3 	bne.w	8005cf8 <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	699b      	ldr	r3, [r3, #24]
 8005b18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b20:	d101      	bne.n	8005b26 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8005b22:	2302      	movs	r3, #2
 8005b24:	e0e9      	b.n	8005cfa <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d101      	bne.n	8005b34 <HAL_I2C_IsDeviceReady+0x44>
 8005b30:	2302      	movs	r3, #2
 8005b32:	e0e2      	b.n	8005cfa <HAL_I2C_IsDeviceReady+0x20a>
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2224      	movs	r2, #36	; 0x24
 8005b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d107      	bne.n	8005b62 <HAL_I2C_IsDeviceReady+0x72>
 8005b52:	897b      	ldrh	r3, [r7, #10]
 8005b54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005b5c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005b60:	e006      	b.n	8005b70 <HAL_I2C_IsDeviceReady+0x80>
 8005b62:	897b      	ldrh	r3, [r7, #10]
 8005b64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005b6c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	6812      	ldr	r2, [r2, #0]
 8005b74:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8005b76:	f7fd f9c9 	bl	8002f0c <HAL_GetTick>
 8005b7a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	699b      	ldr	r3, [r3, #24]
 8005b82:	f003 0320 	and.w	r3, r3, #32
 8005b86:	2b20      	cmp	r3, #32
 8005b88:	bf0c      	ite	eq
 8005b8a:	2301      	moveq	r3, #1
 8005b8c:	2300      	movne	r3, #0
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	699b      	ldr	r3, [r3, #24]
 8005b98:	f003 0310 	and.w	r3, r3, #16
 8005b9c:	2b10      	cmp	r3, #16
 8005b9e:	bf0c      	ite	eq
 8005ba0:	2301      	moveq	r3, #1
 8005ba2:	2300      	movne	r3, #0
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005ba8:	e034      	b.n	8005c14 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb0:	d01a      	beq.n	8005be8 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005bb2:	f7fd f9ab 	bl	8002f0c <HAL_GetTick>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	683a      	ldr	r2, [r7, #0]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d302      	bcc.n	8005bc8 <HAL_I2C_IsDeviceReady+0xd8>
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d10f      	bne.n	8005be8 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2220      	movs	r2, #32
 8005bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bd4:	f043 0220 	orr.w	r2, r3, #32
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e088      	b.n	8005cfa <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	f003 0320 	and.w	r3, r3, #32
 8005bf2:	2b20      	cmp	r3, #32
 8005bf4:	bf0c      	ite	eq
 8005bf6:	2301      	moveq	r3, #1
 8005bf8:	2300      	movne	r3, #0
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	f003 0310 	and.w	r3, r3, #16
 8005c08:	2b10      	cmp	r3, #16
 8005c0a:	bf0c      	ite	eq
 8005c0c:	2301      	moveq	r3, #1
 8005c0e:	2300      	movne	r3, #0
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005c14:	7ffb      	ldrb	r3, [r7, #31]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d102      	bne.n	8005c20 <HAL_I2C_IsDeviceReady+0x130>
 8005c1a:	7fbb      	ldrb	r3, [r7, #30]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d0c4      	beq.n	8005baa <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	f003 0310 	and.w	r3, r3, #16
 8005c2a:	2b10      	cmp	r3, #16
 8005c2c:	d01a      	beq.n	8005c64 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	9300      	str	r3, [sp, #0]
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	2200      	movs	r2, #0
 8005c36:	2120      	movs	r1, #32
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f000 fda2 	bl	8006782 <I2C_WaitOnFlagUntilTimeout>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d001      	beq.n	8005c48 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e058      	b.n	8005cfa <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2220      	movs	r2, #32
 8005c4e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2220      	movs	r2, #32
 8005c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8005c60:	2300      	movs	r3, #0
 8005c62:	e04a      	b.n	8005cfa <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	9300      	str	r3, [sp, #0]
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	2120      	movs	r1, #32
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f000 fd87 	bl	8006782 <I2C_WaitOnFlagUntilTimeout>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d001      	beq.n	8005c7e <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e03d      	b.n	8005cfa <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2210      	movs	r2, #16
 8005c84:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2220      	movs	r2, #32
 8005c8c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d118      	bne.n	8005cc8 <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	685a      	ldr	r2, [r3, #4]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ca4:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	9300      	str	r3, [sp, #0]
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	2200      	movs	r2, #0
 8005cae:	2120      	movs	r1, #32
 8005cb0:	68f8      	ldr	r0, [r7, #12]
 8005cb2:	f000 fd66 	bl	8006782 <I2C_WaitOnFlagUntilTimeout>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d001      	beq.n	8005cc0 <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e01c      	b.n	8005cfa <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2220      	movs	r2, #32
 8005cc6:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	f63f af39 	bhi.w	8005b4a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2220      	movs	r2, #32
 8005cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ce4:	f043 0220 	orr.w	r2, r3, #32
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e000      	b.n	8005cfa <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8005cf8:	2302      	movs	r3, #2
  }
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3720      	adds	r7, #32
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005d02:	b580      	push	{r7, lr}
 8005d04:	b084      	sub	sp, #16
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	699b      	ldr	r3, [r3, #24]
 8005d10:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d005      	beq.n	8005d2e <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d26:	68ba      	ldr	r2, [r7, #8]
 8005d28:	68f9      	ldr	r1, [r7, #12]
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	4798      	blx	r3
  }
}
 8005d2e:	bf00      	nop
 8005d30:	3710      	adds	r7, #16
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}

08005d36 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005d36:	b580      	push	{r7, lr}
 8005d38:	b086      	sub	sp, #24
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	699b      	ldr	r3, [r3, #24]
 8005d44:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00f      	beq.n	8005d78 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00a      	beq.n	8005d78 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d66:	f043 0201 	orr.w	r2, r3, #1
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d76:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00f      	beq.n	8005da2 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00a      	beq.n	8005da2 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d90:	f043 0208 	orr.w	r2, r3, #8
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005da0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d00f      	beq.n	8005dcc <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00a      	beq.n	8005dcc <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dba:	f043 0202 	orr.w	r2, r3, #2
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dca:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dd0:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f003 030b 	and.w	r3, r3, #11
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d003      	beq.n	8005de4 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8005ddc:	68f9      	ldr	r1, [r7, #12]
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 fb76 	bl	80064d0 <I2C_ITError>
  }
}
 8005de4:	bf00      	nop
 8005de6:	3718      	adds	r7, #24
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005df4:	bf00      	nop
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005e08:	bf00      	nop
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	70fb      	strb	r3, [r7, #3]
 8005e20:	4613      	mov	r3, r2
 8005e22:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005e24:	bf00      	nop
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005e38:	bf00      	nop
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005e4c:	bf00      	nop
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b086      	sub	sp, #24
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e7c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d101      	bne.n	8005e90 <I2C_Slave_ISR_IT+0x24>
 8005e8c:	2302      	movs	r3, #2
 8005e8e:	e0e1      	b.n	8006054 <I2C_Slave_ISR_IT+0x1e8>
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	f003 0320 	and.w	r3, r3, #32
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d008      	beq.n	8005eb4 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d003      	beq.n	8005eb4 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005eac:	6939      	ldr	r1, [r7, #16]
 8005eae:	68f8      	ldr	r0, [r7, #12]
 8005eb0:	f000 f9b4 	bl	800621c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	f003 0310 	and.w	r3, r3, #16
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d04b      	beq.n	8005f56 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d046      	beq.n	8005f56 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d128      	bne.n	8005f24 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	2b28      	cmp	r3, #40	; 0x28
 8005edc:	d108      	bne.n	8005ef0 <I2C_Slave_ISR_IT+0x84>
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ee4:	d104      	bne.n	8005ef0 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005ee6:	6939      	ldr	r1, [r7, #16]
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	f000 fa9d 	bl	8006428 <I2C_ITListenCplt>
 8005eee:	e031      	b.n	8005f54 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	2b29      	cmp	r3, #41	; 0x29
 8005efa:	d10e      	bne.n	8005f1a <I2C_Slave_ISR_IT+0xae>
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f02:	d00a      	beq.n	8005f1a <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2210      	movs	r2, #16
 8005f0a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005f0c:	68f8      	ldr	r0, [r7, #12]
 8005f0e:	f000 fbf6 	bl	80066fe <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	f000 f926 	bl	8006164 <I2C_ITSlaveSeqCplt>
 8005f18:	e01c      	b.n	8005f54 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2210      	movs	r2, #16
 8005f20:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005f22:	e08f      	b.n	8006044 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2210      	movs	r2, #16
 8005f2a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f30:	f043 0204 	orr.w	r2, r3, #4
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d003      	beq.n	8005f46 <I2C_Slave_ISR_IT+0xda>
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f44:	d17e      	bne.n	8006044 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	68f8      	ldr	r0, [r7, #12]
 8005f4e:	f000 fabf 	bl	80064d0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005f52:	e077      	b.n	8006044 <I2C_Slave_ISR_IT+0x1d8>
 8005f54:	e076      	b.n	8006044 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	f003 0304 	and.w	r3, r3, #4
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d02f      	beq.n	8005fc0 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d02a      	beq.n	8005fc0 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d018      	beq.n	8005fa6 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7e:	b2d2      	uxtb	r2, r2
 8005f80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f86:	1c5a      	adds	r2, r3, #1
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f90:	3b01      	subs	r3, #1
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d14b      	bne.n	8006048 <I2C_Slave_ISR_IT+0x1dc>
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005fb6:	d047      	beq.n	8006048 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	f000 f8d3 	bl	8006164 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005fbe:	e043      	b.n	8006048 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	f003 0308 	and.w	r3, r3, #8
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d009      	beq.n	8005fde <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d004      	beq.n	8005fde <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005fd4:	6939      	ldr	r1, [r7, #16]
 8005fd6:	68f8      	ldr	r0, [r7, #12]
 8005fd8:	f000 f840 	bl	800605c <I2C_ITAddrCplt>
 8005fdc:	e035      	b.n	800604a <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	f003 0302 	and.w	r3, r3, #2
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d030      	beq.n	800604a <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d02b      	beq.n	800604a <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d018      	beq.n	800602e <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006000:	781a      	ldrb	r2, [r3, #0]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600c:	1c5a      	adds	r2, r3, #1
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006016:	b29b      	uxth	r3, r3
 8006018:	3b01      	subs	r3, #1
 800601a:	b29a      	uxth	r2, r3
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006024:	3b01      	subs	r3, #1
 8006026:	b29a      	uxth	r2, r3
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	851a      	strh	r2, [r3, #40]	; 0x28
 800602c:	e00d      	b.n	800604a <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006034:	d002      	beq.n	800603c <I2C_Slave_ISR_IT+0x1d0>
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d106      	bne.n	800604a <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f000 f891 	bl	8006164 <I2C_ITSlaveSeqCplt>
 8006042:	e002      	b.n	800604a <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8006044:	bf00      	nop
 8006046:	e000      	b.n	800604a <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8006048:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3718      	adds	r7, #24
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800606c:	b2db      	uxtb	r3, r3
 800606e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006072:	2b28      	cmp	r3, #40	; 0x28
 8006074:	d16a      	bne.n	800614c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	699b      	ldr	r3, [r3, #24]
 800607c:	0c1b      	lsrs	r3, r3, #16
 800607e:	b2db      	uxtb	r3, r3
 8006080:	f003 0301 	and.w	r3, r3, #1
 8006084:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	699b      	ldr	r3, [r3, #24]
 800608c:	0c1b      	lsrs	r3, r3, #16
 800608e:	b29b      	uxth	r3, r3
 8006090:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006094:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	b29b      	uxth	r3, r3
 800609e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060a2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80060b0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d138      	bne.n	800612c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80060ba:	897b      	ldrh	r3, [r7, #10]
 80060bc:	09db      	lsrs	r3, r3, #7
 80060be:	b29a      	uxth	r2, r3
 80060c0:	89bb      	ldrh	r3, [r7, #12]
 80060c2:	4053      	eors	r3, r2
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	f003 0306 	and.w	r3, r3, #6
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d11c      	bne.n	8006108 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80060ce:	897b      	ldrh	r3, [r7, #10]
 80060d0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060d6:	1c5a      	adds	r2, r3, #1
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	d13b      	bne.n	800615c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2208      	movs	r2, #8
 80060f0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80060fa:	89ba      	ldrh	r2, [r7, #12]
 80060fc:	7bfb      	ldrb	r3, [r7, #15]
 80060fe:	4619      	mov	r1, r3
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f7ff fe87 	bl	8005e14 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006106:	e029      	b.n	800615c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006108:	893b      	ldrh	r3, [r7, #8]
 800610a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800610c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 fd21 	bl	8006b58 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800611e:	89ba      	ldrh	r2, [r7, #12]
 8006120:	7bfb      	ldrb	r3, [r7, #15]
 8006122:	4619      	mov	r1, r3
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f7ff fe75 	bl	8005e14 <HAL_I2C_AddrCallback>
}
 800612a:	e017      	b.n	800615c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800612c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 fd11 	bl	8006b58 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800613e:	89ba      	ldrh	r2, [r7, #12]
 8006140:	7bfb      	ldrb	r3, [r7, #15]
 8006142:	4619      	mov	r1, r3
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f7ff fe65 	bl	8005e14 <HAL_I2C_AddrCallback>
}
 800614a:	e007      	b.n	800615c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2208      	movs	r2, #8
 8006152:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800615c:	bf00      	nop
 800615e:	3710      	adds	r7, #16
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006182:	2b00      	cmp	r3, #0
 8006184:	d008      	beq.n	8006198 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006194:	601a      	str	r2, [r3, #0]
 8006196:	e00c      	b.n	80061b2 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d007      	beq.n	80061b2 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80061b0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	2b29      	cmp	r3, #41	; 0x29
 80061bc:	d112      	bne.n	80061e4 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2228      	movs	r2, #40	; 0x28
 80061c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2221      	movs	r2, #33	; 0x21
 80061ca:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80061cc:	2101      	movs	r1, #1
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 fcc2 	bl	8006b58 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f7ff fe05 	bl	8005dec <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80061e2:	e017      	b.n	8006214 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	2b2a      	cmp	r3, #42	; 0x2a
 80061ee:	d111      	bne.n	8006214 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2228      	movs	r2, #40	; 0x28
 80061f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2222      	movs	r2, #34	; 0x22
 80061fc:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80061fe:	2102      	movs	r1, #2
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 fca9 	bl	8006b58 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f7ff fdf6 	bl	8005e00 <HAL_I2C_SlaveRxCpltCallback>
}
 8006214:	bf00      	nop
 8006216:	3710      	adds	r7, #16
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b086      	sub	sp, #24
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006238:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2220      	movs	r2, #32
 8006240:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006242:	7bfb      	ldrb	r3, [r7, #15]
 8006244:	2b21      	cmp	r3, #33	; 0x21
 8006246:	d002      	beq.n	800624e <I2C_ITSlaveCplt+0x32>
 8006248:	7bfb      	ldrb	r3, [r7, #15]
 800624a:	2b29      	cmp	r3, #41	; 0x29
 800624c:	d108      	bne.n	8006260 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800624e:	f248 0101 	movw	r1, #32769	; 0x8001
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 fc80 	bl	8006b58 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2221      	movs	r2, #33	; 0x21
 800625c:	631a      	str	r2, [r3, #48]	; 0x30
 800625e:	e00d      	b.n	800627c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006260:	7bfb      	ldrb	r3, [r7, #15]
 8006262:	2b22      	cmp	r3, #34	; 0x22
 8006264:	d002      	beq.n	800626c <I2C_ITSlaveCplt+0x50>
 8006266:	7bfb      	ldrb	r3, [r7, #15]
 8006268:	2b2a      	cmp	r3, #42	; 0x2a
 800626a:	d107      	bne.n	800627c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800626c:	f248 0102 	movw	r1, #32770	; 0x8002
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 fc71 	bl	8006b58 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2222      	movs	r2, #34	; 0x22
 800627a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	685a      	ldr	r2, [r3, #4]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800628a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6859      	ldr	r1, [r3, #4]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	4b62      	ldr	r3, [pc, #392]	; (8006420 <I2C_ITSlaveCplt+0x204>)
 8006298:	400b      	ands	r3, r1
 800629a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f000 fa2e 	bl	80066fe <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d013      	beq.n	80062d4 <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80062ba:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d01f      	beq.n	8006304 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80062d2:	e017      	b.n	8006304 <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d012      	beq.n	8006304 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80062ec:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d006      	beq.n	8006304 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	b29a      	uxth	r2, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	f003 0304 	and.w	r3, r3, #4
 800630a:	2b00      	cmp	r3, #0
 800630c:	d020      	beq.n	8006350 <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	f023 0304 	bic.w	r3, r3, #4
 8006314:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006320:	b2d2      	uxtb	r2, r2
 8006322:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006328:	1c5a      	adds	r2, r3, #1
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00c      	beq.n	8006350 <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800633a:	3b01      	subs	r3, #1
 800633c:	b29a      	uxth	r2, r3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006346:	b29b      	uxth	r3, r3
 8006348:	3b01      	subs	r3, #1
 800634a:	b29a      	uxth	r2, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006354:	b29b      	uxth	r3, r3
 8006356:	2b00      	cmp	r3, #0
 8006358:	d005      	beq.n	8006366 <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800635e:	f043 0204 	orr.w	r2, r3, #4
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006378:	2b00      	cmp	r3, #0
 800637a:	d010      	beq.n	800639e <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006380:	4619      	mov	r1, r3
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 f8a4 	bl	80064d0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800638e:	b2db      	uxtb	r3, r3
 8006390:	2b28      	cmp	r3, #40	; 0x28
 8006392:	d141      	bne.n	8006418 <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006394:	6979      	ldr	r1, [r7, #20]
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 f846 	bl	8006428 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800639c:	e03c      	b.n	8006418 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80063a6:	d014      	beq.n	80063d2 <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f7ff fedb 	bl	8006164 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a1c      	ldr	r2, [pc, #112]	; (8006424 <I2C_ITSlaveCplt+0x208>)
 80063b2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2220      	movs	r2, #32
 80063b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f7ff fd30 	bl	8005e30 <HAL_I2C_ListenCpltCallback>
}
 80063d0:	e022      	b.n	8006418 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	2b22      	cmp	r3, #34	; 0x22
 80063dc:	d10e      	bne.n	80063fc <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2220      	movs	r2, #32
 80063e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f7ff fd03 	bl	8005e00 <HAL_I2C_SlaveRxCpltCallback>
}
 80063fa:	e00d      	b.n	8006418 <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2220      	movs	r2, #32
 8006400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f7ff fcea 	bl	8005dec <HAL_I2C_SlaveTxCpltCallback>
}
 8006418:	bf00      	nop
 800641a:	3718      	adds	r7, #24
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}
 8006420:	fe00e800 	.word	0xfe00e800
 8006424:	ffff0000 	.word	0xffff0000

08006428 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a25      	ldr	r2, [pc, #148]	; (80064cc <I2C_ITListenCplt+0xa4>)
 8006436:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2220      	movs	r2, #32
 8006442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	f003 0304 	and.w	r3, r3, #4
 800645a:	2b00      	cmp	r3, #0
 800645c:	d022      	beq.n	80064a4 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006468:	b2d2      	uxtb	r2, r2
 800646a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006470:	1c5a      	adds	r2, r3, #1
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800647a:	2b00      	cmp	r3, #0
 800647c:	d012      	beq.n	80064a4 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006482:	3b01      	subs	r3, #1
 8006484:	b29a      	uxth	r2, r3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800648e:	b29b      	uxth	r3, r3
 8006490:	3b01      	subs	r3, #1
 8006492:	b29a      	uxth	r2, r3
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800649c:	f043 0204 	orr.w	r2, r3, #4
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80064a4:	f248 0103 	movw	r1, #32771	; 0x8003
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 fb55 	bl	8006b58 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2210      	movs	r2, #16
 80064b4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f7ff fcb6 	bl	8005e30 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80064c4:	bf00      	nop
 80064c6:	3708      	adds	r7, #8
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	ffff0000 	.word	0xffff0000

080064d0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064e0:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a6d      	ldr	r2, [pc, #436]	; (80066a4 <I2C_ITError+0x1d4>)
 80064ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	431a      	orrs	r2, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006502:	7bfb      	ldrb	r3, [r7, #15]
 8006504:	2b28      	cmp	r3, #40	; 0x28
 8006506:	d005      	beq.n	8006514 <I2C_ITError+0x44>
 8006508:	7bfb      	ldrb	r3, [r7, #15]
 800650a:	2b29      	cmp	r3, #41	; 0x29
 800650c:	d002      	beq.n	8006514 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800650e:	7bfb      	ldrb	r3, [r7, #15]
 8006510:	2b2a      	cmp	r3, #42	; 0x2a
 8006512:	d10b      	bne.n	800652c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006514:	2103      	movs	r1, #3
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 fb1e 	bl	8006b58 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2228      	movs	r2, #40	; 0x28
 8006520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a60      	ldr	r2, [pc, #384]	; (80066a8 <I2C_ITError+0x1d8>)
 8006528:	635a      	str	r2, [r3, #52]	; 0x34
 800652a:	e030      	b.n	800658e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800652c:	f248 0103 	movw	r1, #32771	; 0x8003
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 fb11 	bl	8006b58 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 f8e1 	bl	80066fe <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006542:	b2db      	uxtb	r3, r3
 8006544:	2b60      	cmp	r3, #96	; 0x60
 8006546:	d01f      	beq.n	8006588 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2220      	movs	r2, #32
 800654c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	f003 0320 	and.w	r3, r3, #32
 800655a:	2b20      	cmp	r3, #32
 800655c:	d114      	bne.n	8006588 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	699b      	ldr	r3, [r3, #24]
 8006564:	f003 0310 	and.w	r3, r3, #16
 8006568:	2b10      	cmp	r3, #16
 800656a:	d109      	bne.n	8006580 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2210      	movs	r2, #16
 8006572:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006578:	f043 0204 	orr.w	r2, r3, #4
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2220      	movs	r2, #32
 8006586:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006592:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006598:	2b00      	cmp	r3, #0
 800659a:	d039      	beq.n	8006610 <I2C_ITError+0x140>
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	2b11      	cmp	r3, #17
 80065a0:	d002      	beq.n	80065a8 <I2C_ITError+0xd8>
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	2b21      	cmp	r3, #33	; 0x21
 80065a6:	d133      	bne.n	8006610 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065b6:	d107      	bne.n	80065c8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80065c6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065cc:	4618      	mov	r0, r3
 80065ce:	f7fe feb8 	bl	8005342 <HAL_DMA_GetState>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d017      	beq.n	8006608 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065dc:	4a33      	ldr	r2, [pc, #204]	; (80066ac <I2C_ITError+0x1dc>)
 80065de:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ec:	4618      	mov	r0, r3
 80065ee:	f7fe fdc7 	bl	8005180 <HAL_DMA_Abort_IT>
 80065f2:	4603      	mov	r3, r0
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d04d      	beq.n	8006694 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006602:	4610      	mov	r0, r2
 8006604:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006606:	e045      	b.n	8006694 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f000 f851 	bl	80066b0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800660e:	e041      	b.n	8006694 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006614:	2b00      	cmp	r3, #0
 8006616:	d039      	beq.n	800668c <I2C_ITError+0x1bc>
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	2b12      	cmp	r3, #18
 800661c:	d002      	beq.n	8006624 <I2C_ITError+0x154>
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	2b22      	cmp	r3, #34	; 0x22
 8006622:	d133      	bne.n	800668c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800662e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006632:	d107      	bne.n	8006644 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006642:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006648:	4618      	mov	r0, r3
 800664a:	f7fe fe7a 	bl	8005342 <HAL_DMA_GetState>
 800664e:	4603      	mov	r3, r0
 8006650:	2b01      	cmp	r3, #1
 8006652:	d017      	beq.n	8006684 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006658:	4a14      	ldr	r2, [pc, #80]	; (80066ac <I2C_ITError+0x1dc>)
 800665a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006668:	4618      	mov	r0, r3
 800666a:	f7fe fd89 	bl	8005180 <HAL_DMA_Abort_IT>
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d011      	beq.n	8006698 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800667e:	4610      	mov	r0, r2
 8006680:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006682:	e009      	b.n	8006698 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 f813 	bl	80066b0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800668a:	e005      	b.n	8006698 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 f80f 	bl	80066b0 <I2C_TreatErrorCallback>
  }
}
 8006692:	e002      	b.n	800669a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006694:	bf00      	nop
 8006696:	e000      	b.n	800669a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006698:	bf00      	nop
}
 800669a:	bf00      	nop
 800669c:	3710      	adds	r7, #16
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	ffff0000 	.word	0xffff0000
 80066a8:	08005e6d 	.word	0x08005e6d
 80066ac:	08006747 	.word	0x08006747

080066b0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	2b60      	cmp	r3, #96	; 0x60
 80066c2:	d10e      	bne.n	80066e2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2220      	movs	r2, #32
 80066c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f7ff fbbc 	bl	8005e58 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80066e0:	e009      	b.n	80066f6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f7ff fba7 	bl	8005e44 <HAL_I2C_ErrorCallback>
}
 80066f6:	bf00      	nop
 80066f8:	3708      	adds	r7, #8
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}

080066fe <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80066fe:	b480      	push	{r7}
 8006700:	b083      	sub	sp, #12
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	699b      	ldr	r3, [r3, #24]
 800670c:	f003 0302 	and.w	r3, r3, #2
 8006710:	2b02      	cmp	r3, #2
 8006712:	d103      	bne.n	800671c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2200      	movs	r2, #0
 800671a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	699b      	ldr	r3, [r3, #24]
 8006722:	f003 0301 	and.w	r3, r3, #1
 8006726:	2b01      	cmp	r3, #1
 8006728:	d007      	beq.n	800673a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	699a      	ldr	r2, [r3, #24]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f042 0201 	orr.w	r2, r2, #1
 8006738:	619a      	str	r2, [r3, #24]
  }
}
 800673a:	bf00      	nop
 800673c:	370c      	adds	r7, #12
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr

08006746 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006746:	b580      	push	{r7, lr}
 8006748:	b084      	sub	sp, #16
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006752:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006758:	2b00      	cmp	r3, #0
 800675a:	d003      	beq.n	8006764 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006760:	2200      	movs	r2, #0
 8006762:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006768:	2b00      	cmp	r3, #0
 800676a:	d003      	beq.n	8006774 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006770:	2200      	movs	r2, #0
 8006772:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8006774:	68f8      	ldr	r0, [r7, #12]
 8006776:	f7ff ff9b 	bl	80066b0 <I2C_TreatErrorCallback>
}
 800677a:	bf00      	nop
 800677c:	3710      	adds	r7, #16
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}

08006782 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006782:	b580      	push	{r7, lr}
 8006784:	b084      	sub	sp, #16
 8006786:	af00      	add	r7, sp, #0
 8006788:	60f8      	str	r0, [r7, #12]
 800678a:	60b9      	str	r1, [r7, #8]
 800678c:	603b      	str	r3, [r7, #0]
 800678e:	4613      	mov	r3, r2
 8006790:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006792:	e031      	b.n	80067f8 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800679a:	d02d      	beq.n	80067f8 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800679c:	f7fc fbb6 	bl	8002f0c <HAL_GetTick>
 80067a0:	4602      	mov	r2, r0
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	1ad3      	subs	r3, r2, r3
 80067a6:	683a      	ldr	r2, [r7, #0]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d302      	bcc.n	80067b2 <I2C_WaitOnFlagUntilTimeout+0x30>
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d122      	bne.n	80067f8 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	699a      	ldr	r2, [r3, #24]
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	4013      	ands	r3, r2
 80067bc:	68ba      	ldr	r2, [r7, #8]
 80067be:	429a      	cmp	r2, r3
 80067c0:	bf0c      	ite	eq
 80067c2:	2301      	moveq	r3, #1
 80067c4:	2300      	movne	r3, #0
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	461a      	mov	r2, r3
 80067ca:	79fb      	ldrb	r3, [r7, #7]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d113      	bne.n	80067f8 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067d4:	f043 0220 	orr.w	r2, r3, #32
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2220      	movs	r2, #32
 80067e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e00f      	b.n	8006818 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	699a      	ldr	r2, [r3, #24]
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	4013      	ands	r3, r2
 8006802:	68ba      	ldr	r2, [r7, #8]
 8006804:	429a      	cmp	r2, r3
 8006806:	bf0c      	ite	eq
 8006808:	2301      	moveq	r3, #1
 800680a:	2300      	movne	r3, #0
 800680c:	b2db      	uxtb	r3, r3
 800680e:	461a      	mov	r2, r3
 8006810:	79fb      	ldrb	r3, [r7, #7]
 8006812:	429a      	cmp	r2, r3
 8006814:	d0be      	beq.n	8006794 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	3710      	adds	r7, #16
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800682c:	e033      	b.n	8006896 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	68b9      	ldr	r1, [r7, #8]
 8006832:	68f8      	ldr	r0, [r7, #12]
 8006834:	f000 f87e 	bl	8006934 <I2C_IsErrorOccurred>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d001      	beq.n	8006842 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e031      	b.n	80068a6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006848:	d025      	beq.n	8006896 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800684a:	f7fc fb5f 	bl	8002f0c <HAL_GetTick>
 800684e:	4602      	mov	r2, r0
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	1ad3      	subs	r3, r2, r3
 8006854:	68ba      	ldr	r2, [r7, #8]
 8006856:	429a      	cmp	r2, r3
 8006858:	d302      	bcc.n	8006860 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d11a      	bne.n	8006896 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	699b      	ldr	r3, [r3, #24]
 8006866:	f003 0302 	and.w	r3, r3, #2
 800686a:	2b02      	cmp	r3, #2
 800686c:	d013      	beq.n	8006896 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006872:	f043 0220 	orr.w	r2, r3, #32
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2220      	movs	r2, #32
 800687e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2200      	movs	r2, #0
 8006886:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2200      	movs	r2, #0
 800688e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e007      	b.n	80068a6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	699b      	ldr	r3, [r3, #24]
 800689c:	f003 0302 	and.w	r3, r3, #2
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	d1c4      	bne.n	800682e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3710      	adds	r7, #16
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}

080068ae <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80068ae:	b580      	push	{r7, lr}
 80068b0:	b084      	sub	sp, #16
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	60f8      	str	r0, [r7, #12]
 80068b6:	60b9      	str	r1, [r7, #8]
 80068b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80068ba:	e02f      	b.n	800691c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	68b9      	ldr	r1, [r7, #8]
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f000 f837 	bl	8006934 <I2C_IsErrorOccurred>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d001      	beq.n	80068d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	e02d      	b.n	800692c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068d0:	f7fc fb1c 	bl	8002f0c <HAL_GetTick>
 80068d4:	4602      	mov	r2, r0
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	68ba      	ldr	r2, [r7, #8]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d302      	bcc.n	80068e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d11a      	bne.n	800691c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	699b      	ldr	r3, [r3, #24]
 80068ec:	f003 0320 	and.w	r3, r3, #32
 80068f0:	2b20      	cmp	r3, #32
 80068f2:	d013      	beq.n	800691c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068f8:	f043 0220 	orr.w	r2, r3, #32
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2220      	movs	r2, #32
 8006904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	e007      	b.n	800692c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	699b      	ldr	r3, [r3, #24]
 8006922:	f003 0320 	and.w	r3, r3, #32
 8006926:	2b20      	cmp	r3, #32
 8006928:	d1c8      	bne.n	80068bc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800692a:	2300      	movs	r3, #0
}
 800692c:	4618      	mov	r0, r3
 800692e:	3710      	adds	r7, #16
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b08a      	sub	sp, #40	; 0x28
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006940:	2300      	movs	r3, #0
 8006942:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	699b      	ldr	r3, [r3, #24]
 800694c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800694e:	2300      	movs	r3, #0
 8006950:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	f003 0310 	and.w	r3, r3, #16
 800695c:	2b00      	cmp	r3, #0
 800695e:	d068      	beq.n	8006a32 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2210      	movs	r2, #16
 8006966:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006968:	e049      	b.n	80069fe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006970:	d045      	beq.n	80069fe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006972:	f7fc facb 	bl	8002f0c <HAL_GetTick>
 8006976:	4602      	mov	r2, r0
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	1ad3      	subs	r3, r2, r3
 800697c:	68ba      	ldr	r2, [r7, #8]
 800697e:	429a      	cmp	r2, r3
 8006980:	d302      	bcc.n	8006988 <I2C_IsErrorOccurred+0x54>
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d13a      	bne.n	80069fe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006992:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800699a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	699b      	ldr	r3, [r3, #24]
 80069a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069aa:	d121      	bne.n	80069f0 <I2C_IsErrorOccurred+0xbc>
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069b2:	d01d      	beq.n	80069f0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80069b4:	7cfb      	ldrb	r3, [r7, #19]
 80069b6:	2b20      	cmp	r3, #32
 80069b8:	d01a      	beq.n	80069f0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	685a      	ldr	r2, [r3, #4]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069c8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80069ca:	f7fc fa9f 	bl	8002f0c <HAL_GetTick>
 80069ce:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80069d0:	e00e      	b.n	80069f0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80069d2:	f7fc fa9b 	bl	8002f0c <HAL_GetTick>
 80069d6:	4602      	mov	r2, r0
 80069d8:	69fb      	ldr	r3, [r7, #28]
 80069da:	1ad3      	subs	r3, r2, r3
 80069dc:	2b19      	cmp	r3, #25
 80069de:	d907      	bls.n	80069f0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80069e0:	6a3b      	ldr	r3, [r7, #32]
 80069e2:	f043 0320 	orr.w	r3, r3, #32
 80069e6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80069ee:	e006      	b.n	80069fe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	699b      	ldr	r3, [r3, #24]
 80069f6:	f003 0320 	and.w	r3, r3, #32
 80069fa:	2b20      	cmp	r3, #32
 80069fc:	d1e9      	bne.n	80069d2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	699b      	ldr	r3, [r3, #24]
 8006a04:	f003 0320 	and.w	r3, r3, #32
 8006a08:	2b20      	cmp	r3, #32
 8006a0a:	d003      	beq.n	8006a14 <I2C_IsErrorOccurred+0xe0>
 8006a0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d0aa      	beq.n	800696a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006a14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d103      	bne.n	8006a24 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2220      	movs	r2, #32
 8006a22:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006a24:	6a3b      	ldr	r3, [r7, #32]
 8006a26:	f043 0304 	orr.w	r3, r3, #4
 8006a2a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	699b      	ldr	r3, [r3, #24]
 8006a38:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d00b      	beq.n	8006a5c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006a44:	6a3b      	ldr	r3, [r7, #32]
 8006a46:	f043 0301 	orr.w	r3, r3, #1
 8006a4a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a54:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00b      	beq.n	8006a7e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006a66:	6a3b      	ldr	r3, [r7, #32]
 8006a68:	f043 0308 	orr.w	r3, r3, #8
 8006a6c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a76:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d00b      	beq.n	8006aa0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006a88:	6a3b      	ldr	r3, [r7, #32]
 8006a8a:	f043 0302 	orr.w	r3, r3, #2
 8006a8e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a98:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006aa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d01c      	beq.n	8006ae2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	f7ff fe28 	bl	80066fe <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	6859      	ldr	r1, [r3, #4]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	4b0d      	ldr	r3, [pc, #52]	; (8006af0 <I2C_IsErrorOccurred+0x1bc>)
 8006aba:	400b      	ands	r3, r1
 8006abc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ac2:	6a3b      	ldr	r3, [r7, #32]
 8006ac4:	431a      	orrs	r2, r3
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2220      	movs	r2, #32
 8006ace:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006ae2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3728      	adds	r7, #40	; 0x28
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	fe00e800 	.word	0xfe00e800

08006af4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b087      	sub	sp, #28
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	607b      	str	r3, [r7, #4]
 8006afe:	460b      	mov	r3, r1
 8006b00:	817b      	strh	r3, [r7, #10]
 8006b02:	4613      	mov	r3, r2
 8006b04:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b06:	897b      	ldrh	r3, [r7, #10]
 8006b08:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006b0c:	7a7b      	ldrb	r3, [r7, #9]
 8006b0e:	041b      	lsls	r3, r3, #16
 8006b10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b14:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b1a:	6a3b      	ldr	r3, [r7, #32]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b22:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	685a      	ldr	r2, [r3, #4]
 8006b2a:	6a3b      	ldr	r3, [r7, #32]
 8006b2c:	0d5b      	lsrs	r3, r3, #21
 8006b2e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006b32:	4b08      	ldr	r3, [pc, #32]	; (8006b54 <I2C_TransferConfig+0x60>)
 8006b34:	430b      	orrs	r3, r1
 8006b36:	43db      	mvns	r3, r3
 8006b38:	ea02 0103 	and.w	r1, r2, r3
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	697a      	ldr	r2, [r7, #20]
 8006b42:	430a      	orrs	r2, r1
 8006b44:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006b46:	bf00      	nop
 8006b48:	371c      	adds	r7, #28
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr
 8006b52:	bf00      	nop
 8006b54:	03ff63ff 	.word	0x03ff63ff

08006b58 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	460b      	mov	r3, r1
 8006b62:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006b64:	2300      	movs	r3, #0
 8006b66:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006b68:	887b      	ldrh	r3, [r7, #2]
 8006b6a:	f003 0301 	and.w	r3, r3, #1
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d00f      	beq.n	8006b92 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8006b78:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006b86:	2b28      	cmp	r3, #40	; 0x28
 8006b88:	d003      	beq.n	8006b92 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8006b90:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006b92:	887b      	ldrh	r3, [r7, #2]
 8006b94:	f003 0302 	and.w	r3, r3, #2
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d00f      	beq.n	8006bbc <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8006ba2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006bb0:	2b28      	cmp	r3, #40	; 0x28
 8006bb2:	d003      	beq.n	8006bbc <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8006bba:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006bbc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	da03      	bge.n	8006bcc <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006bca:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006bcc:	887b      	ldrh	r3, [r7, #2]
 8006bce:	2b10      	cmp	r3, #16
 8006bd0:	d103      	bne.n	8006bda <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006bd8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006bda:	887b      	ldrh	r3, [r7, #2]
 8006bdc:	2b20      	cmp	r3, #32
 8006bde:	d103      	bne.n	8006be8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f043 0320 	orr.w	r3, r3, #32
 8006be6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006be8:	887b      	ldrh	r3, [r7, #2]
 8006bea:	2b40      	cmp	r3, #64	; 0x40
 8006bec:	d103      	bne.n	8006bf6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bf4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	6819      	ldr	r1, [r3, #0]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	43da      	mvns	r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	400a      	ands	r2, r1
 8006c06:	601a      	str	r2, [r3, #0]
}
 8006c08:	bf00      	nop
 8006c0a:	3714      	adds	r7, #20
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	2b20      	cmp	r3, #32
 8006c28:	d138      	bne.n	8006c9c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d101      	bne.n	8006c38 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006c34:	2302      	movs	r3, #2
 8006c36:	e032      	b.n	8006c9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2224      	movs	r2, #36	; 0x24
 8006c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f022 0201 	bic.w	r2, r2, #1
 8006c56:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006c66:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	6819      	ldr	r1, [r3, #0]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	683a      	ldr	r2, [r7, #0]
 8006c74:	430a      	orrs	r2, r1
 8006c76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f042 0201 	orr.w	r2, r2, #1
 8006c86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2220      	movs	r2, #32
 8006c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	e000      	b.n	8006c9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006c9c:	2302      	movs	r3, #2
  }
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	370c      	adds	r7, #12
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr

08006caa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006caa:	b480      	push	{r7}
 8006cac:	b085      	sub	sp, #20
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
 8006cb2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	2b20      	cmp	r3, #32
 8006cbe:	d139      	bne.n	8006d34 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d101      	bne.n	8006cce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006cca:	2302      	movs	r3, #2
 8006ccc:	e033      	b.n	8006d36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2224      	movs	r2, #36	; 0x24
 8006cda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f022 0201 	bic.w	r2, r2, #1
 8006cec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006cfc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	021b      	lsls	r3, r3, #8
 8006d02:	68fa      	ldr	r2, [r7, #12]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f042 0201 	orr.w	r2, r2, #1
 8006d1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2220      	movs	r2, #32
 8006d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006d30:	2300      	movs	r3, #0
 8006d32:	e000      	b.n	8006d36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006d34:	2302      	movs	r3, #2
  }
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3714      	adds	r7, #20
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr
	...

08006d44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d50:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006d54:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d102      	bne.n	8006d6a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	f001 b823 	b.w	8007db0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 0301 	and.w	r3, r3, #1
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	f000 817d 	beq.w	800707a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8006d80:	4bbc      	ldr	r3, [pc, #752]	; (8007074 <HAL_RCC_OscConfig+0x330>)
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	f003 030c 	and.w	r3, r3, #12
 8006d88:	2b04      	cmp	r3, #4
 8006d8a:	d00c      	beq.n	8006da6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006d8c:	4bb9      	ldr	r3, [pc, #740]	; (8007074 <HAL_RCC_OscConfig+0x330>)
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	f003 030c 	and.w	r3, r3, #12
 8006d94:	2b08      	cmp	r3, #8
 8006d96:	d15c      	bne.n	8006e52 <HAL_RCC_OscConfig+0x10e>
 8006d98:	4bb6      	ldr	r3, [pc, #728]	; (8007074 <HAL_RCC_OscConfig+0x330>)
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006da4:	d155      	bne.n	8006e52 <HAL_RCC_OscConfig+0x10e>
 8006da6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006daa:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dae:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8006db2:	fa93 f3a3 	rbit	r3, r3
 8006db6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 8006dba:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dbe:	fab3 f383 	clz	r3, r3
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	095b      	lsrs	r3, r3, #5
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	f043 0301 	orr.w	r3, r3, #1
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d102      	bne.n	8006dd8 <HAL_RCC_OscConfig+0x94>
 8006dd2:	4ba8      	ldr	r3, [pc, #672]	; (8007074 <HAL_RCC_OscConfig+0x330>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	e015      	b.n	8006e04 <HAL_RCC_OscConfig+0xc0>
 8006dd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006ddc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006de0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8006de4:	fa93 f3a3 	rbit	r3, r3
 8006de8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8006dec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006df0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8006df4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8006df8:	fa93 f3a3 	rbit	r3, r3
 8006dfc:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8006e00:	4b9c      	ldr	r3, [pc, #624]	; (8007074 <HAL_RCC_OscConfig+0x330>)
 8006e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e04:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006e08:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8006e0c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8006e10:	fa92 f2a2 	rbit	r2, r2
 8006e14:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8006e18:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8006e1c:	fab2 f282 	clz	r2, r2
 8006e20:	b2d2      	uxtb	r2, r2
 8006e22:	f042 0220 	orr.w	r2, r2, #32
 8006e26:	b2d2      	uxtb	r2, r2
 8006e28:	f002 021f 	and.w	r2, r2, #31
 8006e2c:	2101      	movs	r1, #1
 8006e2e:	fa01 f202 	lsl.w	r2, r1, r2
 8006e32:	4013      	ands	r3, r2
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	f000 811f 	beq.w	8007078 <HAL_RCC_OscConfig+0x334>
 8006e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	f040 8116 	bne.w	8007078 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	f000 bfaf 	b.w	8007db0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e62:	d106      	bne.n	8006e72 <HAL_RCC_OscConfig+0x12e>
 8006e64:	4b83      	ldr	r3, [pc, #524]	; (8007074 <HAL_RCC_OscConfig+0x330>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a82      	ldr	r2, [pc, #520]	; (8007074 <HAL_RCC_OscConfig+0x330>)
 8006e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e6e:	6013      	str	r3, [r2, #0]
 8006e70:	e036      	b.n	8006ee0 <HAL_RCC_OscConfig+0x19c>
 8006e72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d10c      	bne.n	8006e9c <HAL_RCC_OscConfig+0x158>
 8006e82:	4b7c      	ldr	r3, [pc, #496]	; (8007074 <HAL_RCC_OscConfig+0x330>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a7b      	ldr	r2, [pc, #492]	; (8007074 <HAL_RCC_OscConfig+0x330>)
 8006e88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e8c:	6013      	str	r3, [r2, #0]
 8006e8e:	4b79      	ldr	r3, [pc, #484]	; (8007074 <HAL_RCC_OscConfig+0x330>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a78      	ldr	r2, [pc, #480]	; (8007074 <HAL_RCC_OscConfig+0x330>)
 8006e94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e98:	6013      	str	r3, [r2, #0]
 8006e9a:	e021      	b.n	8006ee0 <HAL_RCC_OscConfig+0x19c>
 8006e9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ea0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006eac:	d10c      	bne.n	8006ec8 <HAL_RCC_OscConfig+0x184>
 8006eae:	4b71      	ldr	r3, [pc, #452]	; (8007074 <HAL_RCC_OscConfig+0x330>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a70      	ldr	r2, [pc, #448]	; (8007074 <HAL_RCC_OscConfig+0x330>)
 8006eb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006eb8:	6013      	str	r3, [r2, #0]
 8006eba:	4b6e      	ldr	r3, [pc, #440]	; (8007074 <HAL_RCC_OscConfig+0x330>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a6d      	ldr	r2, [pc, #436]	; (8007074 <HAL_RCC_OscConfig+0x330>)
 8006ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ec4:	6013      	str	r3, [r2, #0]
 8006ec6:	e00b      	b.n	8006ee0 <HAL_RCC_OscConfig+0x19c>
 8006ec8:	4b6a      	ldr	r3, [pc, #424]	; (8007074 <HAL_RCC_OscConfig+0x330>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a69      	ldr	r2, [pc, #420]	; (8007074 <HAL_RCC_OscConfig+0x330>)
 8006ece:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ed2:	6013      	str	r3, [r2, #0]
 8006ed4:	4b67      	ldr	r3, [pc, #412]	; (8007074 <HAL_RCC_OscConfig+0x330>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a66      	ldr	r2, [pc, #408]	; (8007074 <HAL_RCC_OscConfig+0x330>)
 8006eda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ede:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006ee0:	4b64      	ldr	r3, [pc, #400]	; (8007074 <HAL_RCC_OscConfig+0x330>)
 8006ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee4:	f023 020f 	bic.w	r2, r3, #15
 8006ee8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006eec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	495f      	ldr	r1, [pc, #380]	; (8007074 <HAL_RCC_OscConfig+0x330>)
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006efa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006efe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d059      	beq.n	8006fbe <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f0a:	f7fb ffff 	bl	8002f0c <HAL_GetTick>
 8006f0e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f12:	e00a      	b.n	8006f2a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f14:	f7fb fffa 	bl	8002f0c <HAL_GetTick>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006f1e:	1ad3      	subs	r3, r2, r3
 8006f20:	2b64      	cmp	r3, #100	; 0x64
 8006f22:	d902      	bls.n	8006f2a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8006f24:	2303      	movs	r3, #3
 8006f26:	f000 bf43 	b.w	8007db0 <HAL_RCC_OscConfig+0x106c>
 8006f2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006f2e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f32:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8006f36:	fa93 f3a3 	rbit	r3, r3
 8006f3a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8006f3e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f42:	fab3 f383 	clz	r3, r3
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	095b      	lsrs	r3, r3, #5
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	f043 0301 	orr.w	r3, r3, #1
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d102      	bne.n	8006f5c <HAL_RCC_OscConfig+0x218>
 8006f56:	4b47      	ldr	r3, [pc, #284]	; (8007074 <HAL_RCC_OscConfig+0x330>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	e015      	b.n	8006f88 <HAL_RCC_OscConfig+0x244>
 8006f5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006f60:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f64:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8006f68:	fa93 f3a3 	rbit	r3, r3
 8006f6c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8006f70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006f74:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8006f78:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8006f7c:	fa93 f3a3 	rbit	r3, r3
 8006f80:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8006f84:	4b3b      	ldr	r3, [pc, #236]	; (8007074 <HAL_RCC_OscConfig+0x330>)
 8006f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f88:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006f8c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8006f90:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8006f94:	fa92 f2a2 	rbit	r2, r2
 8006f98:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8006f9c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8006fa0:	fab2 f282 	clz	r2, r2
 8006fa4:	b2d2      	uxtb	r2, r2
 8006fa6:	f042 0220 	orr.w	r2, r2, #32
 8006faa:	b2d2      	uxtb	r2, r2
 8006fac:	f002 021f 	and.w	r2, r2, #31
 8006fb0:	2101      	movs	r1, #1
 8006fb2:	fa01 f202 	lsl.w	r2, r1, r2
 8006fb6:	4013      	ands	r3, r2
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d0ab      	beq.n	8006f14 <HAL_RCC_OscConfig+0x1d0>
 8006fbc:	e05d      	b.n	800707a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fbe:	f7fb ffa5 	bl	8002f0c <HAL_GetTick>
 8006fc2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006fc6:	e00a      	b.n	8006fde <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006fc8:	f7fb ffa0 	bl	8002f0c <HAL_GetTick>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006fd2:	1ad3      	subs	r3, r2, r3
 8006fd4:	2b64      	cmp	r3, #100	; 0x64
 8006fd6:	d902      	bls.n	8006fde <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8006fd8:	2303      	movs	r3, #3
 8006fda:	f000 bee9 	b.w	8007db0 <HAL_RCC_OscConfig+0x106c>
 8006fde:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006fe2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fe6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8006fea:	fa93 f3a3 	rbit	r3, r3
 8006fee:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8006ff2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ff6:	fab3 f383 	clz	r3, r3
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	095b      	lsrs	r3, r3, #5
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	f043 0301 	orr.w	r3, r3, #1
 8007004:	b2db      	uxtb	r3, r3
 8007006:	2b01      	cmp	r3, #1
 8007008:	d102      	bne.n	8007010 <HAL_RCC_OscConfig+0x2cc>
 800700a:	4b1a      	ldr	r3, [pc, #104]	; (8007074 <HAL_RCC_OscConfig+0x330>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	e015      	b.n	800703c <HAL_RCC_OscConfig+0x2f8>
 8007010:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007014:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007018:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800701c:	fa93 f3a3 	rbit	r3, r3
 8007020:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8007024:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007028:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800702c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8007030:	fa93 f3a3 	rbit	r3, r3
 8007034:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8007038:	4b0e      	ldr	r3, [pc, #56]	; (8007074 <HAL_RCC_OscConfig+0x330>)
 800703a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007040:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8007044:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8007048:	fa92 f2a2 	rbit	r2, r2
 800704c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8007050:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8007054:	fab2 f282 	clz	r2, r2
 8007058:	b2d2      	uxtb	r2, r2
 800705a:	f042 0220 	orr.w	r2, r2, #32
 800705e:	b2d2      	uxtb	r2, r2
 8007060:	f002 021f 	and.w	r2, r2, #31
 8007064:	2101      	movs	r1, #1
 8007066:	fa01 f202 	lsl.w	r2, r1, r2
 800706a:	4013      	ands	r3, r2
 800706c:	2b00      	cmp	r3, #0
 800706e:	d1ab      	bne.n	8006fc8 <HAL_RCC_OscConfig+0x284>
 8007070:	e003      	b.n	800707a <HAL_RCC_OscConfig+0x336>
 8007072:	bf00      	nop
 8007074:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007078:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800707a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800707e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f003 0302 	and.w	r3, r3, #2
 800708a:	2b00      	cmp	r3, #0
 800708c:	f000 817d 	beq.w	800738a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8007090:	4ba6      	ldr	r3, [pc, #664]	; (800732c <HAL_RCC_OscConfig+0x5e8>)
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	f003 030c 	and.w	r3, r3, #12
 8007098:	2b00      	cmp	r3, #0
 800709a:	d00b      	beq.n	80070b4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800709c:	4ba3      	ldr	r3, [pc, #652]	; (800732c <HAL_RCC_OscConfig+0x5e8>)
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	f003 030c 	and.w	r3, r3, #12
 80070a4:	2b08      	cmp	r3, #8
 80070a6:	d172      	bne.n	800718e <HAL_RCC_OscConfig+0x44a>
 80070a8:	4ba0      	ldr	r3, [pc, #640]	; (800732c <HAL_RCC_OscConfig+0x5e8>)
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d16c      	bne.n	800718e <HAL_RCC_OscConfig+0x44a>
 80070b4:	2302      	movs	r3, #2
 80070b6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070ba:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80070be:	fa93 f3a3 	rbit	r3, r3
 80070c2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80070c6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070ca:	fab3 f383 	clz	r3, r3
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	095b      	lsrs	r3, r3, #5
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	f043 0301 	orr.w	r3, r3, #1
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d102      	bne.n	80070e4 <HAL_RCC_OscConfig+0x3a0>
 80070de:	4b93      	ldr	r3, [pc, #588]	; (800732c <HAL_RCC_OscConfig+0x5e8>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	e013      	b.n	800710c <HAL_RCC_OscConfig+0x3c8>
 80070e4:	2302      	movs	r3, #2
 80070e6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070ea:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80070ee:	fa93 f3a3 	rbit	r3, r3
 80070f2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80070f6:	2302      	movs	r3, #2
 80070f8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80070fc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8007100:	fa93 f3a3 	rbit	r3, r3
 8007104:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8007108:	4b88      	ldr	r3, [pc, #544]	; (800732c <HAL_RCC_OscConfig+0x5e8>)
 800710a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710c:	2202      	movs	r2, #2
 800710e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8007112:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8007116:	fa92 f2a2 	rbit	r2, r2
 800711a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800711e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8007122:	fab2 f282 	clz	r2, r2
 8007126:	b2d2      	uxtb	r2, r2
 8007128:	f042 0220 	orr.w	r2, r2, #32
 800712c:	b2d2      	uxtb	r2, r2
 800712e:	f002 021f 	and.w	r2, r2, #31
 8007132:	2101      	movs	r1, #1
 8007134:	fa01 f202 	lsl.w	r2, r1, r2
 8007138:	4013      	ands	r3, r2
 800713a:	2b00      	cmp	r3, #0
 800713c:	d00a      	beq.n	8007154 <HAL_RCC_OscConfig+0x410>
 800713e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007142:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	691b      	ldr	r3, [r3, #16]
 800714a:	2b01      	cmp	r3, #1
 800714c:	d002      	beq.n	8007154 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	f000 be2e 	b.w	8007db0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007154:	4b75      	ldr	r3, [pc, #468]	; (800732c <HAL_RCC_OscConfig+0x5e8>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800715c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007160:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	695b      	ldr	r3, [r3, #20]
 8007168:	21f8      	movs	r1, #248	; 0xf8
 800716a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800716e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8007172:	fa91 f1a1 	rbit	r1, r1
 8007176:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800717a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800717e:	fab1 f181 	clz	r1, r1
 8007182:	b2c9      	uxtb	r1, r1
 8007184:	408b      	lsls	r3, r1
 8007186:	4969      	ldr	r1, [pc, #420]	; (800732c <HAL_RCC_OscConfig+0x5e8>)
 8007188:	4313      	orrs	r3, r2
 800718a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800718c:	e0fd      	b.n	800738a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800718e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007192:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	691b      	ldr	r3, [r3, #16]
 800719a:	2b00      	cmp	r3, #0
 800719c:	f000 8088 	beq.w	80072b0 <HAL_RCC_OscConfig+0x56c>
 80071a0:	2301      	movs	r3, #1
 80071a2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071a6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80071aa:	fa93 f3a3 	rbit	r3, r3
 80071ae:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80071b2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80071b6:	fab3 f383 	clz	r3, r3
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80071c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	461a      	mov	r2, r3
 80071c8:	2301      	movs	r3, #1
 80071ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071cc:	f7fb fe9e 	bl	8002f0c <HAL_GetTick>
 80071d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071d4:	e00a      	b.n	80071ec <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80071d6:	f7fb fe99 	bl	8002f0c <HAL_GetTick>
 80071da:	4602      	mov	r2, r0
 80071dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80071e0:	1ad3      	subs	r3, r2, r3
 80071e2:	2b02      	cmp	r3, #2
 80071e4:	d902      	bls.n	80071ec <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80071e6:	2303      	movs	r3, #3
 80071e8:	f000 bde2 	b.w	8007db0 <HAL_RCC_OscConfig+0x106c>
 80071ec:	2302      	movs	r3, #2
 80071ee:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071f2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80071f6:	fa93 f3a3 	rbit	r3, r3
 80071fa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80071fe:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007202:	fab3 f383 	clz	r3, r3
 8007206:	b2db      	uxtb	r3, r3
 8007208:	095b      	lsrs	r3, r3, #5
 800720a:	b2db      	uxtb	r3, r3
 800720c:	f043 0301 	orr.w	r3, r3, #1
 8007210:	b2db      	uxtb	r3, r3
 8007212:	2b01      	cmp	r3, #1
 8007214:	d102      	bne.n	800721c <HAL_RCC_OscConfig+0x4d8>
 8007216:	4b45      	ldr	r3, [pc, #276]	; (800732c <HAL_RCC_OscConfig+0x5e8>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	e013      	b.n	8007244 <HAL_RCC_OscConfig+0x500>
 800721c:	2302      	movs	r3, #2
 800721e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007222:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8007226:	fa93 f3a3 	rbit	r3, r3
 800722a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800722e:	2302      	movs	r3, #2
 8007230:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8007234:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8007238:	fa93 f3a3 	rbit	r3, r3
 800723c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8007240:	4b3a      	ldr	r3, [pc, #232]	; (800732c <HAL_RCC_OscConfig+0x5e8>)
 8007242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007244:	2202      	movs	r2, #2
 8007246:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800724a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800724e:	fa92 f2a2 	rbit	r2, r2
 8007252:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8007256:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800725a:	fab2 f282 	clz	r2, r2
 800725e:	b2d2      	uxtb	r2, r2
 8007260:	f042 0220 	orr.w	r2, r2, #32
 8007264:	b2d2      	uxtb	r2, r2
 8007266:	f002 021f 	and.w	r2, r2, #31
 800726a:	2101      	movs	r1, #1
 800726c:	fa01 f202 	lsl.w	r2, r1, r2
 8007270:	4013      	ands	r3, r2
 8007272:	2b00      	cmp	r3, #0
 8007274:	d0af      	beq.n	80071d6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007276:	4b2d      	ldr	r3, [pc, #180]	; (800732c <HAL_RCC_OscConfig+0x5e8>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800727e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007282:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	695b      	ldr	r3, [r3, #20]
 800728a:	21f8      	movs	r1, #248	; 0xf8
 800728c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007290:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007294:	fa91 f1a1 	rbit	r1, r1
 8007298:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800729c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80072a0:	fab1 f181 	clz	r1, r1
 80072a4:	b2c9      	uxtb	r1, r1
 80072a6:	408b      	lsls	r3, r1
 80072a8:	4920      	ldr	r1, [pc, #128]	; (800732c <HAL_RCC_OscConfig+0x5e8>)
 80072aa:	4313      	orrs	r3, r2
 80072ac:	600b      	str	r3, [r1, #0]
 80072ae:	e06c      	b.n	800738a <HAL_RCC_OscConfig+0x646>
 80072b0:	2301      	movs	r3, #1
 80072b2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072b6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80072ba:	fa93 f3a3 	rbit	r3, r3
 80072be:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80072c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80072c6:	fab3 f383 	clz	r3, r3
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80072d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	461a      	mov	r2, r3
 80072d8:	2300      	movs	r3, #0
 80072da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072dc:	f7fb fe16 	bl	8002f0c <HAL_GetTick>
 80072e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072e4:	e00a      	b.n	80072fc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80072e6:	f7fb fe11 	bl	8002f0c <HAL_GetTick>
 80072ea:	4602      	mov	r2, r0
 80072ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80072f0:	1ad3      	subs	r3, r2, r3
 80072f2:	2b02      	cmp	r3, #2
 80072f4:	d902      	bls.n	80072fc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80072f6:	2303      	movs	r3, #3
 80072f8:	f000 bd5a 	b.w	8007db0 <HAL_RCC_OscConfig+0x106c>
 80072fc:	2302      	movs	r3, #2
 80072fe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007302:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007306:	fa93 f3a3 	rbit	r3, r3
 800730a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800730e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007312:	fab3 f383 	clz	r3, r3
 8007316:	b2db      	uxtb	r3, r3
 8007318:	095b      	lsrs	r3, r3, #5
 800731a:	b2db      	uxtb	r3, r3
 800731c:	f043 0301 	orr.w	r3, r3, #1
 8007320:	b2db      	uxtb	r3, r3
 8007322:	2b01      	cmp	r3, #1
 8007324:	d104      	bne.n	8007330 <HAL_RCC_OscConfig+0x5ec>
 8007326:	4b01      	ldr	r3, [pc, #4]	; (800732c <HAL_RCC_OscConfig+0x5e8>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	e015      	b.n	8007358 <HAL_RCC_OscConfig+0x614>
 800732c:	40021000 	.word	0x40021000
 8007330:	2302      	movs	r3, #2
 8007332:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007336:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800733a:	fa93 f3a3 	rbit	r3, r3
 800733e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007342:	2302      	movs	r3, #2
 8007344:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007348:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800734c:	fa93 f3a3 	rbit	r3, r3
 8007350:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007354:	4bc8      	ldr	r3, [pc, #800]	; (8007678 <HAL_RCC_OscConfig+0x934>)
 8007356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007358:	2202      	movs	r2, #2
 800735a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800735e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8007362:	fa92 f2a2 	rbit	r2, r2
 8007366:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800736a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800736e:	fab2 f282 	clz	r2, r2
 8007372:	b2d2      	uxtb	r2, r2
 8007374:	f042 0220 	orr.w	r2, r2, #32
 8007378:	b2d2      	uxtb	r2, r2
 800737a:	f002 021f 	and.w	r2, r2, #31
 800737e:	2101      	movs	r1, #1
 8007380:	fa01 f202 	lsl.w	r2, r1, r2
 8007384:	4013      	ands	r3, r2
 8007386:	2b00      	cmp	r3, #0
 8007388:	d1ad      	bne.n	80072e6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800738a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800738e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f003 0308 	and.w	r3, r3, #8
 800739a:	2b00      	cmp	r3, #0
 800739c:	f000 8110 	beq.w	80075c0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80073a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	699b      	ldr	r3, [r3, #24]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d079      	beq.n	80074a4 <HAL_RCC_OscConfig+0x760>
 80073b0:	2301      	movs	r3, #1
 80073b2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80073ba:	fa93 f3a3 	rbit	r3, r3
 80073be:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80073c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80073c6:	fab3 f383 	clz	r3, r3
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	461a      	mov	r2, r3
 80073ce:	4bab      	ldr	r3, [pc, #684]	; (800767c <HAL_RCC_OscConfig+0x938>)
 80073d0:	4413      	add	r3, r2
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	461a      	mov	r2, r3
 80073d6:	2301      	movs	r3, #1
 80073d8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80073da:	f7fb fd97 	bl	8002f0c <HAL_GetTick>
 80073de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073e2:	e00a      	b.n	80073fa <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80073e4:	f7fb fd92 	bl	8002f0c <HAL_GetTick>
 80073e8:	4602      	mov	r2, r0
 80073ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80073ee:	1ad3      	subs	r3, r2, r3
 80073f0:	2b02      	cmp	r3, #2
 80073f2:	d902      	bls.n	80073fa <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80073f4:	2303      	movs	r3, #3
 80073f6:	f000 bcdb 	b.w	8007db0 <HAL_RCC_OscConfig+0x106c>
 80073fa:	2302      	movs	r3, #2
 80073fc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007400:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007404:	fa93 f3a3 	rbit	r3, r3
 8007408:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800740c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007410:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007414:	2202      	movs	r2, #2
 8007416:	601a      	str	r2, [r3, #0]
 8007418:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800741c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	fa93 f2a3 	rbit	r2, r3
 8007426:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800742a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800742e:	601a      	str	r2, [r3, #0]
 8007430:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007434:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007438:	2202      	movs	r2, #2
 800743a:	601a      	str	r2, [r3, #0]
 800743c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007440:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	fa93 f2a3 	rbit	r2, r3
 800744a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800744e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007452:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007454:	4b88      	ldr	r3, [pc, #544]	; (8007678 <HAL_RCC_OscConfig+0x934>)
 8007456:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007458:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800745c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007460:	2102      	movs	r1, #2
 8007462:	6019      	str	r1, [r3, #0]
 8007464:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007468:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	fa93 f1a3 	rbit	r1, r3
 8007472:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007476:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800747a:	6019      	str	r1, [r3, #0]
  return result;
 800747c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007480:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	fab3 f383 	clz	r3, r3
 800748a:	b2db      	uxtb	r3, r3
 800748c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007490:	b2db      	uxtb	r3, r3
 8007492:	f003 031f 	and.w	r3, r3, #31
 8007496:	2101      	movs	r1, #1
 8007498:	fa01 f303 	lsl.w	r3, r1, r3
 800749c:	4013      	ands	r3, r2
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d0a0      	beq.n	80073e4 <HAL_RCC_OscConfig+0x6a0>
 80074a2:	e08d      	b.n	80075c0 <HAL_RCC_OscConfig+0x87c>
 80074a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074a8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80074ac:	2201      	movs	r2, #1
 80074ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074b4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	fa93 f2a3 	rbit	r2, r3
 80074be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074c2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80074c6:	601a      	str	r2, [r3, #0]
  return result;
 80074c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074cc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80074d0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80074d2:	fab3 f383 	clz	r3, r3
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	461a      	mov	r2, r3
 80074da:	4b68      	ldr	r3, [pc, #416]	; (800767c <HAL_RCC_OscConfig+0x938>)
 80074dc:	4413      	add	r3, r2
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	461a      	mov	r2, r3
 80074e2:	2300      	movs	r3, #0
 80074e4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074e6:	f7fb fd11 	bl	8002f0c <HAL_GetTick>
 80074ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074ee:	e00a      	b.n	8007506 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80074f0:	f7fb fd0c 	bl	8002f0c <HAL_GetTick>
 80074f4:	4602      	mov	r2, r0
 80074f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80074fa:	1ad3      	subs	r3, r2, r3
 80074fc:	2b02      	cmp	r3, #2
 80074fe:	d902      	bls.n	8007506 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8007500:	2303      	movs	r3, #3
 8007502:	f000 bc55 	b.w	8007db0 <HAL_RCC_OscConfig+0x106c>
 8007506:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800750a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800750e:	2202      	movs	r2, #2
 8007510:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007512:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007516:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	fa93 f2a3 	rbit	r2, r3
 8007520:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007524:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007528:	601a      	str	r2, [r3, #0]
 800752a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800752e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007532:	2202      	movs	r2, #2
 8007534:	601a      	str	r2, [r3, #0]
 8007536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800753a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	fa93 f2a3 	rbit	r2, r3
 8007544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007548:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800754c:	601a      	str	r2, [r3, #0]
 800754e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007552:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007556:	2202      	movs	r2, #2
 8007558:	601a      	str	r2, [r3, #0]
 800755a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800755e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	fa93 f2a3 	rbit	r2, r3
 8007568:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800756c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8007570:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007572:	4b41      	ldr	r3, [pc, #260]	; (8007678 <HAL_RCC_OscConfig+0x934>)
 8007574:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007576:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800757a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800757e:	2102      	movs	r1, #2
 8007580:	6019      	str	r1, [r3, #0]
 8007582:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007586:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	fa93 f1a3 	rbit	r1, r3
 8007590:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007594:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8007598:	6019      	str	r1, [r3, #0]
  return result;
 800759a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800759e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	fab3 f383 	clz	r3, r3
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	f003 031f 	and.w	r3, r3, #31
 80075b4:	2101      	movs	r1, #1
 80075b6:	fa01 f303 	lsl.w	r3, r1, r3
 80075ba:	4013      	ands	r3, r2
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d197      	bne.n	80074f0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80075c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f003 0304 	and.w	r3, r3, #4
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	f000 81a1 	beq.w	8007918 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80075d6:	2300      	movs	r3, #0
 80075d8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80075dc:	4b26      	ldr	r3, [pc, #152]	; (8007678 <HAL_RCC_OscConfig+0x934>)
 80075de:	69db      	ldr	r3, [r3, #28]
 80075e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d116      	bne.n	8007616 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80075e8:	4b23      	ldr	r3, [pc, #140]	; (8007678 <HAL_RCC_OscConfig+0x934>)
 80075ea:	69db      	ldr	r3, [r3, #28]
 80075ec:	4a22      	ldr	r2, [pc, #136]	; (8007678 <HAL_RCC_OscConfig+0x934>)
 80075ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075f2:	61d3      	str	r3, [r2, #28]
 80075f4:	4b20      	ldr	r3, [pc, #128]	; (8007678 <HAL_RCC_OscConfig+0x934>)
 80075f6:	69db      	ldr	r3, [r3, #28]
 80075f8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80075fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007600:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8007604:	601a      	str	r2, [r3, #0]
 8007606:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800760a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800760e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8007610:	2301      	movs	r3, #1
 8007612:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007616:	4b1a      	ldr	r3, [pc, #104]	; (8007680 <HAL_RCC_OscConfig+0x93c>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800761e:	2b00      	cmp	r3, #0
 8007620:	d11a      	bne.n	8007658 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007622:	4b17      	ldr	r3, [pc, #92]	; (8007680 <HAL_RCC_OscConfig+0x93c>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a16      	ldr	r2, [pc, #88]	; (8007680 <HAL_RCC_OscConfig+0x93c>)
 8007628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800762c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800762e:	f7fb fc6d 	bl	8002f0c <HAL_GetTick>
 8007632:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007636:	e009      	b.n	800764c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007638:	f7fb fc68 	bl	8002f0c <HAL_GetTick>
 800763c:	4602      	mov	r2, r0
 800763e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007642:	1ad3      	subs	r3, r2, r3
 8007644:	2b64      	cmp	r3, #100	; 0x64
 8007646:	d901      	bls.n	800764c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8007648:	2303      	movs	r3, #3
 800764a:	e3b1      	b.n	8007db0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800764c:	4b0c      	ldr	r3, [pc, #48]	; (8007680 <HAL_RCC_OscConfig+0x93c>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007654:	2b00      	cmp	r3, #0
 8007656:	d0ef      	beq.n	8007638 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007658:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800765c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	2b01      	cmp	r3, #1
 8007666:	d10d      	bne.n	8007684 <HAL_RCC_OscConfig+0x940>
 8007668:	4b03      	ldr	r3, [pc, #12]	; (8007678 <HAL_RCC_OscConfig+0x934>)
 800766a:	6a1b      	ldr	r3, [r3, #32]
 800766c:	4a02      	ldr	r2, [pc, #8]	; (8007678 <HAL_RCC_OscConfig+0x934>)
 800766e:	f043 0301 	orr.w	r3, r3, #1
 8007672:	6213      	str	r3, [r2, #32]
 8007674:	e03c      	b.n	80076f0 <HAL_RCC_OscConfig+0x9ac>
 8007676:	bf00      	nop
 8007678:	40021000 	.word	0x40021000
 800767c:	10908120 	.word	0x10908120
 8007680:	40007000 	.word	0x40007000
 8007684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007688:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d10c      	bne.n	80076ae <HAL_RCC_OscConfig+0x96a>
 8007694:	4bc1      	ldr	r3, [pc, #772]	; (800799c <HAL_RCC_OscConfig+0xc58>)
 8007696:	6a1b      	ldr	r3, [r3, #32]
 8007698:	4ac0      	ldr	r2, [pc, #768]	; (800799c <HAL_RCC_OscConfig+0xc58>)
 800769a:	f023 0301 	bic.w	r3, r3, #1
 800769e:	6213      	str	r3, [r2, #32]
 80076a0:	4bbe      	ldr	r3, [pc, #760]	; (800799c <HAL_RCC_OscConfig+0xc58>)
 80076a2:	6a1b      	ldr	r3, [r3, #32]
 80076a4:	4abd      	ldr	r2, [pc, #756]	; (800799c <HAL_RCC_OscConfig+0xc58>)
 80076a6:	f023 0304 	bic.w	r3, r3, #4
 80076aa:	6213      	str	r3, [r2, #32]
 80076ac:	e020      	b.n	80076f0 <HAL_RCC_OscConfig+0x9ac>
 80076ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	2b05      	cmp	r3, #5
 80076bc:	d10c      	bne.n	80076d8 <HAL_RCC_OscConfig+0x994>
 80076be:	4bb7      	ldr	r3, [pc, #732]	; (800799c <HAL_RCC_OscConfig+0xc58>)
 80076c0:	6a1b      	ldr	r3, [r3, #32]
 80076c2:	4ab6      	ldr	r2, [pc, #728]	; (800799c <HAL_RCC_OscConfig+0xc58>)
 80076c4:	f043 0304 	orr.w	r3, r3, #4
 80076c8:	6213      	str	r3, [r2, #32]
 80076ca:	4bb4      	ldr	r3, [pc, #720]	; (800799c <HAL_RCC_OscConfig+0xc58>)
 80076cc:	6a1b      	ldr	r3, [r3, #32]
 80076ce:	4ab3      	ldr	r2, [pc, #716]	; (800799c <HAL_RCC_OscConfig+0xc58>)
 80076d0:	f043 0301 	orr.w	r3, r3, #1
 80076d4:	6213      	str	r3, [r2, #32]
 80076d6:	e00b      	b.n	80076f0 <HAL_RCC_OscConfig+0x9ac>
 80076d8:	4bb0      	ldr	r3, [pc, #704]	; (800799c <HAL_RCC_OscConfig+0xc58>)
 80076da:	6a1b      	ldr	r3, [r3, #32]
 80076dc:	4aaf      	ldr	r2, [pc, #700]	; (800799c <HAL_RCC_OscConfig+0xc58>)
 80076de:	f023 0301 	bic.w	r3, r3, #1
 80076e2:	6213      	str	r3, [r2, #32]
 80076e4:	4bad      	ldr	r3, [pc, #692]	; (800799c <HAL_RCC_OscConfig+0xc58>)
 80076e6:	6a1b      	ldr	r3, [r3, #32]
 80076e8:	4aac      	ldr	r2, [pc, #688]	; (800799c <HAL_RCC_OscConfig+0xc58>)
 80076ea:	f023 0304 	bic.w	r3, r3, #4
 80076ee:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80076f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	f000 8081 	beq.w	8007804 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007702:	f7fb fc03 	bl	8002f0c <HAL_GetTick>
 8007706:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800770a:	e00b      	b.n	8007724 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800770c:	f7fb fbfe 	bl	8002f0c <HAL_GetTick>
 8007710:	4602      	mov	r2, r0
 8007712:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007716:	1ad3      	subs	r3, r2, r3
 8007718:	f241 3288 	movw	r2, #5000	; 0x1388
 800771c:	4293      	cmp	r3, r2
 800771e:	d901      	bls.n	8007724 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8007720:	2303      	movs	r3, #3
 8007722:	e345      	b.n	8007db0 <HAL_RCC_OscConfig+0x106c>
 8007724:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007728:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800772c:	2202      	movs	r2, #2
 800772e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007730:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007734:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	fa93 f2a3 	rbit	r2, r3
 800773e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007742:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8007746:	601a      	str	r2, [r3, #0]
 8007748:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800774c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007750:	2202      	movs	r2, #2
 8007752:	601a      	str	r2, [r3, #0]
 8007754:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007758:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	fa93 f2a3 	rbit	r2, r3
 8007762:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007766:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800776a:	601a      	str	r2, [r3, #0]
  return result;
 800776c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007770:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8007774:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007776:	fab3 f383 	clz	r3, r3
 800777a:	b2db      	uxtb	r3, r3
 800777c:	095b      	lsrs	r3, r3, #5
 800777e:	b2db      	uxtb	r3, r3
 8007780:	f043 0302 	orr.w	r3, r3, #2
 8007784:	b2db      	uxtb	r3, r3
 8007786:	2b02      	cmp	r3, #2
 8007788:	d102      	bne.n	8007790 <HAL_RCC_OscConfig+0xa4c>
 800778a:	4b84      	ldr	r3, [pc, #528]	; (800799c <HAL_RCC_OscConfig+0xc58>)
 800778c:	6a1b      	ldr	r3, [r3, #32]
 800778e:	e013      	b.n	80077b8 <HAL_RCC_OscConfig+0xa74>
 8007790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007794:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8007798:	2202      	movs	r2, #2
 800779a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800779c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077a0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	fa93 f2a3 	rbit	r2, r3
 80077aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077ae:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80077b2:	601a      	str	r2, [r3, #0]
 80077b4:	4b79      	ldr	r3, [pc, #484]	; (800799c <HAL_RCC_OscConfig+0xc58>)
 80077b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80077bc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80077c0:	2102      	movs	r1, #2
 80077c2:	6011      	str	r1, [r2, #0]
 80077c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80077c8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80077cc:	6812      	ldr	r2, [r2, #0]
 80077ce:	fa92 f1a2 	rbit	r1, r2
 80077d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80077d6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80077da:	6011      	str	r1, [r2, #0]
  return result;
 80077dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80077e0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80077e4:	6812      	ldr	r2, [r2, #0]
 80077e6:	fab2 f282 	clz	r2, r2
 80077ea:	b2d2      	uxtb	r2, r2
 80077ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077f0:	b2d2      	uxtb	r2, r2
 80077f2:	f002 021f 	and.w	r2, r2, #31
 80077f6:	2101      	movs	r1, #1
 80077f8:	fa01 f202 	lsl.w	r2, r1, r2
 80077fc:	4013      	ands	r3, r2
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d084      	beq.n	800770c <HAL_RCC_OscConfig+0x9c8>
 8007802:	e07f      	b.n	8007904 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007804:	f7fb fb82 	bl	8002f0c <HAL_GetTick>
 8007808:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800780c:	e00b      	b.n	8007826 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800780e:	f7fb fb7d 	bl	8002f0c <HAL_GetTick>
 8007812:	4602      	mov	r2, r0
 8007814:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007818:	1ad3      	subs	r3, r2, r3
 800781a:	f241 3288 	movw	r2, #5000	; 0x1388
 800781e:	4293      	cmp	r3, r2
 8007820:	d901      	bls.n	8007826 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8007822:	2303      	movs	r3, #3
 8007824:	e2c4      	b.n	8007db0 <HAL_RCC_OscConfig+0x106c>
 8007826:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800782a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800782e:	2202      	movs	r2, #2
 8007830:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007836:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	fa93 f2a3 	rbit	r2, r3
 8007840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007844:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8007848:	601a      	str	r2, [r3, #0]
 800784a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800784e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8007852:	2202      	movs	r2, #2
 8007854:	601a      	str	r2, [r3, #0]
 8007856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800785a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	fa93 f2a3 	rbit	r2, r3
 8007864:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007868:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800786c:	601a      	str	r2, [r3, #0]
  return result;
 800786e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007872:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8007876:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007878:	fab3 f383 	clz	r3, r3
 800787c:	b2db      	uxtb	r3, r3
 800787e:	095b      	lsrs	r3, r3, #5
 8007880:	b2db      	uxtb	r3, r3
 8007882:	f043 0302 	orr.w	r3, r3, #2
 8007886:	b2db      	uxtb	r3, r3
 8007888:	2b02      	cmp	r3, #2
 800788a:	d102      	bne.n	8007892 <HAL_RCC_OscConfig+0xb4e>
 800788c:	4b43      	ldr	r3, [pc, #268]	; (800799c <HAL_RCC_OscConfig+0xc58>)
 800788e:	6a1b      	ldr	r3, [r3, #32]
 8007890:	e013      	b.n	80078ba <HAL_RCC_OscConfig+0xb76>
 8007892:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007896:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800789a:	2202      	movs	r2, #2
 800789c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800789e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078a2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	fa93 f2a3 	rbit	r2, r3
 80078ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078b0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80078b4:	601a      	str	r2, [r3, #0]
 80078b6:	4b39      	ldr	r3, [pc, #228]	; (800799c <HAL_RCC_OscConfig+0xc58>)
 80078b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80078be:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80078c2:	2102      	movs	r1, #2
 80078c4:	6011      	str	r1, [r2, #0]
 80078c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80078ca:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80078ce:	6812      	ldr	r2, [r2, #0]
 80078d0:	fa92 f1a2 	rbit	r1, r2
 80078d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80078d8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80078dc:	6011      	str	r1, [r2, #0]
  return result;
 80078de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80078e2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80078e6:	6812      	ldr	r2, [r2, #0]
 80078e8:	fab2 f282 	clz	r2, r2
 80078ec:	b2d2      	uxtb	r2, r2
 80078ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078f2:	b2d2      	uxtb	r2, r2
 80078f4:	f002 021f 	and.w	r2, r2, #31
 80078f8:	2101      	movs	r1, #1
 80078fa:	fa01 f202 	lsl.w	r2, r1, r2
 80078fe:	4013      	ands	r3, r2
 8007900:	2b00      	cmp	r3, #0
 8007902:	d184      	bne.n	800780e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007904:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8007908:	2b01      	cmp	r3, #1
 800790a:	d105      	bne.n	8007918 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800790c:	4b23      	ldr	r3, [pc, #140]	; (800799c <HAL_RCC_OscConfig+0xc58>)
 800790e:	69db      	ldr	r3, [r3, #28]
 8007910:	4a22      	ldr	r2, [pc, #136]	; (800799c <HAL_RCC_OscConfig+0xc58>)
 8007912:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007916:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007918:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800791c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	69db      	ldr	r3, [r3, #28]
 8007924:	2b00      	cmp	r3, #0
 8007926:	f000 8242 	beq.w	8007dae <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800792a:	4b1c      	ldr	r3, [pc, #112]	; (800799c <HAL_RCC_OscConfig+0xc58>)
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	f003 030c 	and.w	r3, r3, #12
 8007932:	2b08      	cmp	r3, #8
 8007934:	f000 8213 	beq.w	8007d5e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007938:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800793c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	69db      	ldr	r3, [r3, #28]
 8007944:	2b02      	cmp	r3, #2
 8007946:	f040 8162 	bne.w	8007c0e <HAL_RCC_OscConfig+0xeca>
 800794a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800794e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8007952:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007956:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007958:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800795c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	fa93 f2a3 	rbit	r2, r3
 8007966:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800796a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800796e:	601a      	str	r2, [r3, #0]
  return result;
 8007970:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007974:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8007978:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800797a:	fab3 f383 	clz	r3, r3
 800797e:	b2db      	uxtb	r3, r3
 8007980:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007984:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	461a      	mov	r2, r3
 800798c:	2300      	movs	r3, #0
 800798e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007990:	f7fb fabc 	bl	8002f0c <HAL_GetTick>
 8007994:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007998:	e00c      	b.n	80079b4 <HAL_RCC_OscConfig+0xc70>
 800799a:	bf00      	nop
 800799c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079a0:	f7fb fab4 	bl	8002f0c <HAL_GetTick>
 80079a4:	4602      	mov	r2, r0
 80079a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80079aa:	1ad3      	subs	r3, r2, r3
 80079ac:	2b02      	cmp	r3, #2
 80079ae:	d901      	bls.n	80079b4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80079b0:	2303      	movs	r3, #3
 80079b2:	e1fd      	b.n	8007db0 <HAL_RCC_OscConfig+0x106c>
 80079b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079b8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80079bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80079c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079c6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	fa93 f2a3 	rbit	r2, r3
 80079d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079d4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80079d8:	601a      	str	r2, [r3, #0]
  return result;
 80079da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079de:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80079e2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80079e4:	fab3 f383 	clz	r3, r3
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	095b      	lsrs	r3, r3, #5
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	f043 0301 	orr.w	r3, r3, #1
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d102      	bne.n	80079fe <HAL_RCC_OscConfig+0xcba>
 80079f8:	4bb0      	ldr	r3, [pc, #704]	; (8007cbc <HAL_RCC_OscConfig+0xf78>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	e027      	b.n	8007a4e <HAL_RCC_OscConfig+0xd0a>
 80079fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a02:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8007a06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007a0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a10:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	fa93 f2a3 	rbit	r2, r3
 8007a1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a1e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8007a22:	601a      	str	r2, [r3, #0]
 8007a24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a28:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8007a2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007a30:	601a      	str	r2, [r3, #0]
 8007a32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a36:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	fa93 f2a3 	rbit	r2, r3
 8007a40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a44:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007a48:	601a      	str	r2, [r3, #0]
 8007a4a:	4b9c      	ldr	r3, [pc, #624]	; (8007cbc <HAL_RCC_OscConfig+0xf78>)
 8007a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007a52:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8007a56:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007a5a:	6011      	str	r1, [r2, #0]
 8007a5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007a60:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8007a64:	6812      	ldr	r2, [r2, #0]
 8007a66:	fa92 f1a2 	rbit	r1, r2
 8007a6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007a6e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8007a72:	6011      	str	r1, [r2, #0]
  return result;
 8007a74:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007a78:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8007a7c:	6812      	ldr	r2, [r2, #0]
 8007a7e:	fab2 f282 	clz	r2, r2
 8007a82:	b2d2      	uxtb	r2, r2
 8007a84:	f042 0220 	orr.w	r2, r2, #32
 8007a88:	b2d2      	uxtb	r2, r2
 8007a8a:	f002 021f 	and.w	r2, r2, #31
 8007a8e:	2101      	movs	r1, #1
 8007a90:	fa01 f202 	lsl.w	r2, r1, r2
 8007a94:	4013      	ands	r3, r2
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d182      	bne.n	80079a0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a9a:	4b88      	ldr	r3, [pc, #544]	; (8007cbc <HAL_RCC_OscConfig+0xf78>)
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007aa6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007aae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ab2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	6a1b      	ldr	r3, [r3, #32]
 8007aba:	430b      	orrs	r3, r1
 8007abc:	497f      	ldr	r1, [pc, #508]	; (8007cbc <HAL_RCC_OscConfig+0xf78>)
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	604b      	str	r3, [r1, #4]
 8007ac2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ac6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8007aca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007ace:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ad0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ad4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	fa93 f2a3 	rbit	r2, r3
 8007ade:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ae2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8007ae6:	601a      	str	r2, [r3, #0]
  return result;
 8007ae8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007aec:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8007af0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007af2:	fab3 f383 	clz	r3, r3
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007afc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	461a      	mov	r2, r3
 8007b04:	2301      	movs	r3, #1
 8007b06:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b08:	f7fb fa00 	bl	8002f0c <HAL_GetTick>
 8007b0c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007b10:	e009      	b.n	8007b26 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b12:	f7fb f9fb 	bl	8002f0c <HAL_GetTick>
 8007b16:	4602      	mov	r2, r0
 8007b18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007b1c:	1ad3      	subs	r3, r2, r3
 8007b1e:	2b02      	cmp	r3, #2
 8007b20:	d901      	bls.n	8007b26 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8007b22:	2303      	movs	r3, #3
 8007b24:	e144      	b.n	8007db0 <HAL_RCC_OscConfig+0x106c>
 8007b26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b2a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8007b2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007b32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b38:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	fa93 f2a3 	rbit	r2, r3
 8007b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b46:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8007b4a:	601a      	str	r2, [r3, #0]
  return result;
 8007b4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b50:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8007b54:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007b56:	fab3 f383 	clz	r3, r3
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	095b      	lsrs	r3, r3, #5
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	f043 0301 	orr.w	r3, r3, #1
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	d102      	bne.n	8007b70 <HAL_RCC_OscConfig+0xe2c>
 8007b6a:	4b54      	ldr	r3, [pc, #336]	; (8007cbc <HAL_RCC_OscConfig+0xf78>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	e027      	b.n	8007bc0 <HAL_RCC_OscConfig+0xe7c>
 8007b70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b74:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8007b78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007b7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b82:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	fa93 f2a3 	rbit	r2, r3
 8007b8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b90:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8007b94:	601a      	str	r2, [r3, #0]
 8007b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b9a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8007b9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007ba2:	601a      	str	r2, [r3, #0]
 8007ba4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ba8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	fa93 f2a3 	rbit	r2, r3
 8007bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007bb6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8007bba:	601a      	str	r2, [r3, #0]
 8007bbc:	4b3f      	ldr	r3, [pc, #252]	; (8007cbc <HAL_RCC_OscConfig+0xf78>)
 8007bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007bc4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8007bc8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007bcc:	6011      	str	r1, [r2, #0]
 8007bce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007bd2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8007bd6:	6812      	ldr	r2, [r2, #0]
 8007bd8:	fa92 f1a2 	rbit	r1, r2
 8007bdc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007be0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8007be4:	6011      	str	r1, [r2, #0]
  return result;
 8007be6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007bea:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8007bee:	6812      	ldr	r2, [r2, #0]
 8007bf0:	fab2 f282 	clz	r2, r2
 8007bf4:	b2d2      	uxtb	r2, r2
 8007bf6:	f042 0220 	orr.w	r2, r2, #32
 8007bfa:	b2d2      	uxtb	r2, r2
 8007bfc:	f002 021f 	and.w	r2, r2, #31
 8007c00:	2101      	movs	r1, #1
 8007c02:	fa01 f202 	lsl.w	r2, r1, r2
 8007c06:	4013      	ands	r3, r2
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d082      	beq.n	8007b12 <HAL_RCC_OscConfig+0xdce>
 8007c0c:	e0cf      	b.n	8007dae <HAL_RCC_OscConfig+0x106a>
 8007c0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c12:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8007c16:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007c1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c20:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	fa93 f2a3 	rbit	r2, r3
 8007c2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c2e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8007c32:	601a      	str	r2, [r3, #0]
  return result;
 8007c34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c38:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8007c3c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c3e:	fab3 f383 	clz	r3, r3
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007c48:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	461a      	mov	r2, r3
 8007c50:	2300      	movs	r3, #0
 8007c52:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c54:	f7fb f95a 	bl	8002f0c <HAL_GetTick>
 8007c58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007c5c:	e009      	b.n	8007c72 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c5e:	f7fb f955 	bl	8002f0c <HAL_GetTick>
 8007c62:	4602      	mov	r2, r0
 8007c64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007c68:	1ad3      	subs	r3, r2, r3
 8007c6a:	2b02      	cmp	r3, #2
 8007c6c:	d901      	bls.n	8007c72 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8007c6e:	2303      	movs	r3, #3
 8007c70:	e09e      	b.n	8007db0 <HAL_RCC_OscConfig+0x106c>
 8007c72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c76:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8007c7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007c7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c84:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	fa93 f2a3 	rbit	r2, r3
 8007c8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c92:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8007c96:	601a      	str	r2, [r3, #0]
  return result;
 8007c98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c9c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8007ca0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007ca2:	fab3 f383 	clz	r3, r3
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	095b      	lsrs	r3, r3, #5
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	f043 0301 	orr.w	r3, r3, #1
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d104      	bne.n	8007cc0 <HAL_RCC_OscConfig+0xf7c>
 8007cb6:	4b01      	ldr	r3, [pc, #4]	; (8007cbc <HAL_RCC_OscConfig+0xf78>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	e029      	b.n	8007d10 <HAL_RCC_OscConfig+0xfcc>
 8007cbc:	40021000 	.word	0x40021000
 8007cc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cc4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8007cc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007ccc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cd2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	fa93 f2a3 	rbit	r2, r3
 8007cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ce0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8007ce4:	601a      	str	r2, [r3, #0]
 8007ce6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cea:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8007cee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007cf2:	601a      	str	r2, [r3, #0]
 8007cf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cf8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	fa93 f2a3 	rbit	r2, r3
 8007d02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d06:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8007d0a:	601a      	str	r2, [r3, #0]
 8007d0c:	4b2b      	ldr	r3, [pc, #172]	; (8007dbc <HAL_RCC_OscConfig+0x1078>)
 8007d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007d14:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8007d18:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007d1c:	6011      	str	r1, [r2, #0]
 8007d1e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007d22:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8007d26:	6812      	ldr	r2, [r2, #0]
 8007d28:	fa92 f1a2 	rbit	r1, r2
 8007d2c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007d30:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8007d34:	6011      	str	r1, [r2, #0]
  return result;
 8007d36:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007d3a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8007d3e:	6812      	ldr	r2, [r2, #0]
 8007d40:	fab2 f282 	clz	r2, r2
 8007d44:	b2d2      	uxtb	r2, r2
 8007d46:	f042 0220 	orr.w	r2, r2, #32
 8007d4a:	b2d2      	uxtb	r2, r2
 8007d4c:	f002 021f 	and.w	r2, r2, #31
 8007d50:	2101      	movs	r1, #1
 8007d52:	fa01 f202 	lsl.w	r2, r1, r2
 8007d56:	4013      	ands	r3, r2
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d180      	bne.n	8007c5e <HAL_RCC_OscConfig+0xf1a>
 8007d5c:	e027      	b.n	8007dae <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	69db      	ldr	r3, [r3, #28]
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d101      	bne.n	8007d72 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e01e      	b.n	8007db0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007d72:	4b12      	ldr	r3, [pc, #72]	; (8007dbc <HAL_RCC_OscConfig+0x1078>)
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8007d7a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8007d7e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007d82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	6a1b      	ldr	r3, [r3, #32]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d10b      	bne.n	8007daa <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8007d92:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8007d96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007d9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d001      	beq.n	8007dae <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	e000      	b.n	8007db0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8007dae:	2300      	movs	r3, #0
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
 8007dba:	bf00      	nop
 8007dbc:	40021000 	.word	0x40021000

08007dc0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b09e      	sub	sp, #120	; 0x78
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d101      	bne.n	8007dd8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	e162      	b.n	800809e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007dd8:	4b90      	ldr	r3, [pc, #576]	; (800801c <HAL_RCC_ClockConfig+0x25c>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f003 0307 	and.w	r3, r3, #7
 8007de0:	683a      	ldr	r2, [r7, #0]
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d910      	bls.n	8007e08 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007de6:	4b8d      	ldr	r3, [pc, #564]	; (800801c <HAL_RCC_ClockConfig+0x25c>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f023 0207 	bic.w	r2, r3, #7
 8007dee:	498b      	ldr	r1, [pc, #556]	; (800801c <HAL_RCC_ClockConfig+0x25c>)
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	4313      	orrs	r3, r2
 8007df4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007df6:	4b89      	ldr	r3, [pc, #548]	; (800801c <HAL_RCC_ClockConfig+0x25c>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f003 0307 	and.w	r3, r3, #7
 8007dfe:	683a      	ldr	r2, [r7, #0]
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d001      	beq.n	8007e08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007e04:	2301      	movs	r3, #1
 8007e06:	e14a      	b.n	800809e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f003 0302 	and.w	r3, r3, #2
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d008      	beq.n	8007e26 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e14:	4b82      	ldr	r3, [pc, #520]	; (8008020 <HAL_RCC_ClockConfig+0x260>)
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	497f      	ldr	r1, [pc, #508]	; (8008020 <HAL_RCC_ClockConfig+0x260>)
 8007e22:	4313      	orrs	r3, r2
 8007e24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f003 0301 	and.w	r3, r3, #1
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	f000 80dc 	beq.w	8007fec <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d13c      	bne.n	8007eb6 <HAL_RCC_ClockConfig+0xf6>
 8007e3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007e40:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e44:	fa93 f3a3 	rbit	r3, r3
 8007e48:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8007e4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e4c:	fab3 f383 	clz	r3, r3
 8007e50:	b2db      	uxtb	r3, r3
 8007e52:	095b      	lsrs	r3, r3, #5
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	f043 0301 	orr.w	r3, r3, #1
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d102      	bne.n	8007e66 <HAL_RCC_ClockConfig+0xa6>
 8007e60:	4b6f      	ldr	r3, [pc, #444]	; (8008020 <HAL_RCC_ClockConfig+0x260>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	e00f      	b.n	8007e86 <HAL_RCC_ClockConfig+0xc6>
 8007e66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007e6a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e6e:	fa93 f3a3 	rbit	r3, r3
 8007e72:	667b      	str	r3, [r7, #100]	; 0x64
 8007e74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007e78:	663b      	str	r3, [r7, #96]	; 0x60
 8007e7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e7c:	fa93 f3a3 	rbit	r3, r3
 8007e80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e82:	4b67      	ldr	r3, [pc, #412]	; (8008020 <HAL_RCC_ClockConfig+0x260>)
 8007e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007e8a:	65ba      	str	r2, [r7, #88]	; 0x58
 8007e8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e8e:	fa92 f2a2 	rbit	r2, r2
 8007e92:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8007e94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007e96:	fab2 f282 	clz	r2, r2
 8007e9a:	b2d2      	uxtb	r2, r2
 8007e9c:	f042 0220 	orr.w	r2, r2, #32
 8007ea0:	b2d2      	uxtb	r2, r2
 8007ea2:	f002 021f 	and.w	r2, r2, #31
 8007ea6:	2101      	movs	r1, #1
 8007ea8:	fa01 f202 	lsl.w	r2, r1, r2
 8007eac:	4013      	ands	r3, r2
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d17b      	bne.n	8007faa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e0f3      	b.n	800809e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	2b02      	cmp	r3, #2
 8007ebc:	d13c      	bne.n	8007f38 <HAL_RCC_ClockConfig+0x178>
 8007ebe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007ec2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ec4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ec6:	fa93 f3a3 	rbit	r3, r3
 8007eca:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8007ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ece:	fab3 f383 	clz	r3, r3
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	095b      	lsrs	r3, r3, #5
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	f043 0301 	orr.w	r3, r3, #1
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d102      	bne.n	8007ee8 <HAL_RCC_ClockConfig+0x128>
 8007ee2:	4b4f      	ldr	r3, [pc, #316]	; (8008020 <HAL_RCC_ClockConfig+0x260>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	e00f      	b.n	8007f08 <HAL_RCC_ClockConfig+0x148>
 8007ee8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007eec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007eee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ef0:	fa93 f3a3 	rbit	r3, r3
 8007ef4:	647b      	str	r3, [r7, #68]	; 0x44
 8007ef6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007efa:	643b      	str	r3, [r7, #64]	; 0x40
 8007efc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007efe:	fa93 f3a3 	rbit	r3, r3
 8007f02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f04:	4b46      	ldr	r3, [pc, #280]	; (8008020 <HAL_RCC_ClockConfig+0x260>)
 8007f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007f0c:	63ba      	str	r2, [r7, #56]	; 0x38
 8007f0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f10:	fa92 f2a2 	rbit	r2, r2
 8007f14:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8007f16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f18:	fab2 f282 	clz	r2, r2
 8007f1c:	b2d2      	uxtb	r2, r2
 8007f1e:	f042 0220 	orr.w	r2, r2, #32
 8007f22:	b2d2      	uxtb	r2, r2
 8007f24:	f002 021f 	and.w	r2, r2, #31
 8007f28:	2101      	movs	r1, #1
 8007f2a:	fa01 f202 	lsl.w	r2, r1, r2
 8007f2e:	4013      	ands	r3, r2
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d13a      	bne.n	8007faa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007f34:	2301      	movs	r3, #1
 8007f36:	e0b2      	b.n	800809e <HAL_RCC_ClockConfig+0x2de>
 8007f38:	2302      	movs	r3, #2
 8007f3a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3e:	fa93 f3a3 	rbit	r3, r3
 8007f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f46:	fab3 f383 	clz	r3, r3
 8007f4a:	b2db      	uxtb	r3, r3
 8007f4c:	095b      	lsrs	r3, r3, #5
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	f043 0301 	orr.w	r3, r3, #1
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d102      	bne.n	8007f60 <HAL_RCC_ClockConfig+0x1a0>
 8007f5a:	4b31      	ldr	r3, [pc, #196]	; (8008020 <HAL_RCC_ClockConfig+0x260>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	e00d      	b.n	8007f7c <HAL_RCC_ClockConfig+0x1bc>
 8007f60:	2302      	movs	r3, #2
 8007f62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f66:	fa93 f3a3 	rbit	r3, r3
 8007f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8007f6c:	2302      	movs	r3, #2
 8007f6e:	623b      	str	r3, [r7, #32]
 8007f70:	6a3b      	ldr	r3, [r7, #32]
 8007f72:	fa93 f3a3 	rbit	r3, r3
 8007f76:	61fb      	str	r3, [r7, #28]
 8007f78:	4b29      	ldr	r3, [pc, #164]	; (8008020 <HAL_RCC_ClockConfig+0x260>)
 8007f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7c:	2202      	movs	r2, #2
 8007f7e:	61ba      	str	r2, [r7, #24]
 8007f80:	69ba      	ldr	r2, [r7, #24]
 8007f82:	fa92 f2a2 	rbit	r2, r2
 8007f86:	617a      	str	r2, [r7, #20]
  return result;
 8007f88:	697a      	ldr	r2, [r7, #20]
 8007f8a:	fab2 f282 	clz	r2, r2
 8007f8e:	b2d2      	uxtb	r2, r2
 8007f90:	f042 0220 	orr.w	r2, r2, #32
 8007f94:	b2d2      	uxtb	r2, r2
 8007f96:	f002 021f 	and.w	r2, r2, #31
 8007f9a:	2101      	movs	r1, #1
 8007f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8007fa0:	4013      	ands	r3, r2
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d101      	bne.n	8007faa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e079      	b.n	800809e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007faa:	4b1d      	ldr	r3, [pc, #116]	; (8008020 <HAL_RCC_ClockConfig+0x260>)
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	f023 0203 	bic.w	r2, r3, #3
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	491a      	ldr	r1, [pc, #104]	; (8008020 <HAL_RCC_ClockConfig+0x260>)
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007fbc:	f7fa ffa6 	bl	8002f0c <HAL_GetTick>
 8007fc0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fc2:	e00a      	b.n	8007fda <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007fc4:	f7fa ffa2 	bl	8002f0c <HAL_GetTick>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fcc:	1ad3      	subs	r3, r2, r3
 8007fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d901      	bls.n	8007fda <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8007fd6:	2303      	movs	r3, #3
 8007fd8:	e061      	b.n	800809e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fda:	4b11      	ldr	r3, [pc, #68]	; (8008020 <HAL_RCC_ClockConfig+0x260>)
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	f003 020c 	and.w	r2, r3, #12
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d1eb      	bne.n	8007fc4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007fec:	4b0b      	ldr	r3, [pc, #44]	; (800801c <HAL_RCC_ClockConfig+0x25c>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f003 0307 	and.w	r3, r3, #7
 8007ff4:	683a      	ldr	r2, [r7, #0]
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d214      	bcs.n	8008024 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ffa:	4b08      	ldr	r3, [pc, #32]	; (800801c <HAL_RCC_ClockConfig+0x25c>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f023 0207 	bic.w	r2, r3, #7
 8008002:	4906      	ldr	r1, [pc, #24]	; (800801c <HAL_RCC_ClockConfig+0x25c>)
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	4313      	orrs	r3, r2
 8008008:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800800a:	4b04      	ldr	r3, [pc, #16]	; (800801c <HAL_RCC_ClockConfig+0x25c>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f003 0307 	and.w	r3, r3, #7
 8008012:	683a      	ldr	r2, [r7, #0]
 8008014:	429a      	cmp	r2, r3
 8008016:	d005      	beq.n	8008024 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8008018:	2301      	movs	r3, #1
 800801a:	e040      	b.n	800809e <HAL_RCC_ClockConfig+0x2de>
 800801c:	40022000 	.word	0x40022000
 8008020:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f003 0304 	and.w	r3, r3, #4
 800802c:	2b00      	cmp	r3, #0
 800802e:	d008      	beq.n	8008042 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008030:	4b1d      	ldr	r3, [pc, #116]	; (80080a8 <HAL_RCC_ClockConfig+0x2e8>)
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	68db      	ldr	r3, [r3, #12]
 800803c:	491a      	ldr	r1, [pc, #104]	; (80080a8 <HAL_RCC_ClockConfig+0x2e8>)
 800803e:	4313      	orrs	r3, r2
 8008040:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f003 0308 	and.w	r3, r3, #8
 800804a:	2b00      	cmp	r3, #0
 800804c:	d009      	beq.n	8008062 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800804e:	4b16      	ldr	r3, [pc, #88]	; (80080a8 <HAL_RCC_ClockConfig+0x2e8>)
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	691b      	ldr	r3, [r3, #16]
 800805a:	00db      	lsls	r3, r3, #3
 800805c:	4912      	ldr	r1, [pc, #72]	; (80080a8 <HAL_RCC_ClockConfig+0x2e8>)
 800805e:	4313      	orrs	r3, r2
 8008060:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8008062:	f000 f829 	bl	80080b8 <HAL_RCC_GetSysClockFreq>
 8008066:	4601      	mov	r1, r0
 8008068:	4b0f      	ldr	r3, [pc, #60]	; (80080a8 <HAL_RCC_ClockConfig+0x2e8>)
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008070:	22f0      	movs	r2, #240	; 0xf0
 8008072:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008074:	693a      	ldr	r2, [r7, #16]
 8008076:	fa92 f2a2 	rbit	r2, r2
 800807a:	60fa      	str	r2, [r7, #12]
  return result;
 800807c:	68fa      	ldr	r2, [r7, #12]
 800807e:	fab2 f282 	clz	r2, r2
 8008082:	b2d2      	uxtb	r2, r2
 8008084:	40d3      	lsrs	r3, r2
 8008086:	4a09      	ldr	r2, [pc, #36]	; (80080ac <HAL_RCC_ClockConfig+0x2ec>)
 8008088:	5cd3      	ldrb	r3, [r2, r3]
 800808a:	fa21 f303 	lsr.w	r3, r1, r3
 800808e:	4a08      	ldr	r2, [pc, #32]	; (80080b0 <HAL_RCC_ClockConfig+0x2f0>)
 8008090:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8008092:	4b08      	ldr	r3, [pc, #32]	; (80080b4 <HAL_RCC_ClockConfig+0x2f4>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4618      	mov	r0, r3
 8008098:	f7fa fef4 	bl	8002e84 <HAL_InitTick>
  
  return HAL_OK;
 800809c:	2300      	movs	r3, #0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3778      	adds	r7, #120	; 0x78
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	40021000 	.word	0x40021000
 80080ac:	0800c9ac 	.word	0x0800c9ac
 80080b0:	20000014 	.word	0x20000014
 80080b4:	20000018 	.word	0x20000018

080080b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b08b      	sub	sp, #44	; 0x2c
 80080bc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80080be:	2300      	movs	r3, #0
 80080c0:	61fb      	str	r3, [r7, #28]
 80080c2:	2300      	movs	r3, #0
 80080c4:	61bb      	str	r3, [r7, #24]
 80080c6:	2300      	movs	r3, #0
 80080c8:	627b      	str	r3, [r7, #36]	; 0x24
 80080ca:	2300      	movs	r3, #0
 80080cc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80080ce:	2300      	movs	r3, #0
 80080d0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80080d2:	4b29      	ldr	r3, [pc, #164]	; (8008178 <HAL_RCC_GetSysClockFreq+0xc0>)
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80080d8:	69fb      	ldr	r3, [r7, #28]
 80080da:	f003 030c 	and.w	r3, r3, #12
 80080de:	2b04      	cmp	r3, #4
 80080e0:	d002      	beq.n	80080e8 <HAL_RCC_GetSysClockFreq+0x30>
 80080e2:	2b08      	cmp	r3, #8
 80080e4:	d003      	beq.n	80080ee <HAL_RCC_GetSysClockFreq+0x36>
 80080e6:	e03c      	b.n	8008162 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80080e8:	4b24      	ldr	r3, [pc, #144]	; (800817c <HAL_RCC_GetSysClockFreq+0xc4>)
 80080ea:	623b      	str	r3, [r7, #32]
      break;
 80080ec:	e03c      	b.n	8008168 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80080ee:	69fb      	ldr	r3, [r7, #28]
 80080f0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80080f4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80080f8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080fa:	68ba      	ldr	r2, [r7, #8]
 80080fc:	fa92 f2a2 	rbit	r2, r2
 8008100:	607a      	str	r2, [r7, #4]
  return result;
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	fab2 f282 	clz	r2, r2
 8008108:	b2d2      	uxtb	r2, r2
 800810a:	40d3      	lsrs	r3, r2
 800810c:	4a1c      	ldr	r2, [pc, #112]	; (8008180 <HAL_RCC_GetSysClockFreq+0xc8>)
 800810e:	5cd3      	ldrb	r3, [r2, r3]
 8008110:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8008112:	4b19      	ldr	r3, [pc, #100]	; (8008178 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008116:	f003 030f 	and.w	r3, r3, #15
 800811a:	220f      	movs	r2, #15
 800811c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800811e:	693a      	ldr	r2, [r7, #16]
 8008120:	fa92 f2a2 	rbit	r2, r2
 8008124:	60fa      	str	r2, [r7, #12]
  return result;
 8008126:	68fa      	ldr	r2, [r7, #12]
 8008128:	fab2 f282 	clz	r2, r2
 800812c:	b2d2      	uxtb	r2, r2
 800812e:	40d3      	lsrs	r3, r2
 8008130:	4a14      	ldr	r2, [pc, #80]	; (8008184 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008132:	5cd3      	ldrb	r3, [r2, r3]
 8008134:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8008136:	69fb      	ldr	r3, [r7, #28]
 8008138:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800813c:	2b00      	cmp	r3, #0
 800813e:	d008      	beq.n	8008152 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8008140:	4a0e      	ldr	r2, [pc, #56]	; (800817c <HAL_RCC_GetSysClockFreq+0xc4>)
 8008142:	69bb      	ldr	r3, [r7, #24]
 8008144:	fbb2 f2f3 	udiv	r2, r2, r3
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	fb02 f303 	mul.w	r3, r2, r3
 800814e:	627b      	str	r3, [r7, #36]	; 0x24
 8008150:	e004      	b.n	800815c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	4a0c      	ldr	r2, [pc, #48]	; (8008188 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008156:	fb02 f303 	mul.w	r3, r2, r3
 800815a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800815c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815e:	623b      	str	r3, [r7, #32]
      break;
 8008160:	e002      	b.n	8008168 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008162:	4b06      	ldr	r3, [pc, #24]	; (800817c <HAL_RCC_GetSysClockFreq+0xc4>)
 8008164:	623b      	str	r3, [r7, #32]
      break;
 8008166:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008168:	6a3b      	ldr	r3, [r7, #32]
}
 800816a:	4618      	mov	r0, r3
 800816c:	372c      	adds	r7, #44	; 0x2c
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr
 8008176:	bf00      	nop
 8008178:	40021000 	.word	0x40021000
 800817c:	007a1200 	.word	0x007a1200
 8008180:	0800c9c4 	.word	0x0800c9c4
 8008184:	0800c9d4 	.word	0x0800c9d4
 8008188:	003d0900 	.word	0x003d0900

0800818c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800818c:	b480      	push	{r7}
 800818e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008190:	4b03      	ldr	r3, [pc, #12]	; (80081a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8008192:	681b      	ldr	r3, [r3, #0]
}
 8008194:	4618      	mov	r0, r3
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr
 800819e:	bf00      	nop
 80081a0:	20000014 	.word	0x20000014

080081a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b082      	sub	sp, #8
 80081a8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80081aa:	f7ff ffef 	bl	800818c <HAL_RCC_GetHCLKFreq>
 80081ae:	4601      	mov	r1, r0
 80081b0:	4b0b      	ldr	r3, [pc, #44]	; (80081e0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80081b8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80081bc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	fa92 f2a2 	rbit	r2, r2
 80081c4:	603a      	str	r2, [r7, #0]
  return result;
 80081c6:	683a      	ldr	r2, [r7, #0]
 80081c8:	fab2 f282 	clz	r2, r2
 80081cc:	b2d2      	uxtb	r2, r2
 80081ce:	40d3      	lsrs	r3, r2
 80081d0:	4a04      	ldr	r2, [pc, #16]	; (80081e4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80081d2:	5cd3      	ldrb	r3, [r2, r3]
 80081d4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80081d8:	4618      	mov	r0, r3
 80081da:	3708      	adds	r7, #8
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	40021000 	.word	0x40021000
 80081e4:	0800c9bc 	.word	0x0800c9bc

080081e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b082      	sub	sp, #8
 80081ec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80081ee:	f7ff ffcd 	bl	800818c <HAL_RCC_GetHCLKFreq>
 80081f2:	4601      	mov	r1, r0
 80081f4:	4b0b      	ldr	r3, [pc, #44]	; (8008224 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80081fc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008200:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	fa92 f2a2 	rbit	r2, r2
 8008208:	603a      	str	r2, [r7, #0]
  return result;
 800820a:	683a      	ldr	r2, [r7, #0]
 800820c:	fab2 f282 	clz	r2, r2
 8008210:	b2d2      	uxtb	r2, r2
 8008212:	40d3      	lsrs	r3, r2
 8008214:	4a04      	ldr	r2, [pc, #16]	; (8008228 <HAL_RCC_GetPCLK2Freq+0x40>)
 8008216:	5cd3      	ldrb	r3, [r2, r3]
 8008218:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800821c:	4618      	mov	r0, r3
 800821e:	3708      	adds	r7, #8
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}
 8008224:	40021000 	.word	0x40021000
 8008228:	0800c9bc 	.word	0x0800c9bc

0800822c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b092      	sub	sp, #72	; 0x48
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008234:	2300      	movs	r3, #0
 8008236:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8008238:	2300      	movs	r3, #0
 800823a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800823c:	2300      	movs	r3, #0
 800823e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800824a:	2b00      	cmp	r3, #0
 800824c:	f000 80d4 	beq.w	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008250:	4b4e      	ldr	r3, [pc, #312]	; (800838c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008252:	69db      	ldr	r3, [r3, #28]
 8008254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008258:	2b00      	cmp	r3, #0
 800825a:	d10e      	bne.n	800827a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800825c:	4b4b      	ldr	r3, [pc, #300]	; (800838c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800825e:	69db      	ldr	r3, [r3, #28]
 8008260:	4a4a      	ldr	r2, [pc, #296]	; (800838c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008262:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008266:	61d3      	str	r3, [r2, #28]
 8008268:	4b48      	ldr	r3, [pc, #288]	; (800838c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800826a:	69db      	ldr	r3, [r3, #28]
 800826c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008270:	60bb      	str	r3, [r7, #8]
 8008272:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008274:	2301      	movs	r3, #1
 8008276:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800827a:	4b45      	ldr	r3, [pc, #276]	; (8008390 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008282:	2b00      	cmp	r3, #0
 8008284:	d118      	bne.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008286:	4b42      	ldr	r3, [pc, #264]	; (8008390 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a41      	ldr	r2, [pc, #260]	; (8008390 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800828c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008290:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008292:	f7fa fe3b 	bl	8002f0c <HAL_GetTick>
 8008296:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008298:	e008      	b.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800829a:	f7fa fe37 	bl	8002f0c <HAL_GetTick>
 800829e:	4602      	mov	r2, r0
 80082a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082a2:	1ad3      	subs	r3, r2, r3
 80082a4:	2b64      	cmp	r3, #100	; 0x64
 80082a6:	d901      	bls.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80082a8:	2303      	movs	r3, #3
 80082aa:	e169      	b.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082ac:	4b38      	ldr	r3, [pc, #224]	; (8008390 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d0f0      	beq.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80082b8:	4b34      	ldr	r3, [pc, #208]	; (800838c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80082ba:	6a1b      	ldr	r3, [r3, #32]
 80082bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80082c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	f000 8084 	beq.w	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d07c      	beq.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80082d8:	4b2c      	ldr	r3, [pc, #176]	; (800838c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80082da:	6a1b      	ldr	r3, [r3, #32]
 80082dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80082e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ea:	fa93 f3a3 	rbit	r3, r3
 80082ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80082f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80082f2:	fab3 f383 	clz	r3, r3
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	461a      	mov	r2, r3
 80082fa:	4b26      	ldr	r3, [pc, #152]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80082fc:	4413      	add	r3, r2
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	461a      	mov	r2, r3
 8008302:	2301      	movs	r3, #1
 8008304:	6013      	str	r3, [r2, #0]
 8008306:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800830a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800830c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800830e:	fa93 f3a3 	rbit	r3, r3
 8008312:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008316:	fab3 f383 	clz	r3, r3
 800831a:	b2db      	uxtb	r3, r3
 800831c:	461a      	mov	r2, r3
 800831e:	4b1d      	ldr	r3, [pc, #116]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008320:	4413      	add	r3, r2
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	461a      	mov	r2, r3
 8008326:	2300      	movs	r3, #0
 8008328:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800832a:	4a18      	ldr	r2, [pc, #96]	; (800838c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800832c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800832e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008332:	f003 0301 	and.w	r3, r3, #1
 8008336:	2b00      	cmp	r3, #0
 8008338:	d04b      	beq.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800833a:	f7fa fde7 	bl	8002f0c <HAL_GetTick>
 800833e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008340:	e00a      	b.n	8008358 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008342:	f7fa fde3 	bl	8002f0c <HAL_GetTick>
 8008346:	4602      	mov	r2, r0
 8008348:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800834a:	1ad3      	subs	r3, r2, r3
 800834c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008350:	4293      	cmp	r3, r2
 8008352:	d901      	bls.n	8008358 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8008354:	2303      	movs	r3, #3
 8008356:	e113      	b.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8008358:	2302      	movs	r3, #2
 800835a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800835c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800835e:	fa93 f3a3 	rbit	r3, r3
 8008362:	627b      	str	r3, [r7, #36]	; 0x24
 8008364:	2302      	movs	r3, #2
 8008366:	623b      	str	r3, [r7, #32]
 8008368:	6a3b      	ldr	r3, [r7, #32]
 800836a:	fa93 f3a3 	rbit	r3, r3
 800836e:	61fb      	str	r3, [r7, #28]
  return result;
 8008370:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008372:	fab3 f383 	clz	r3, r3
 8008376:	b2db      	uxtb	r3, r3
 8008378:	095b      	lsrs	r3, r3, #5
 800837a:	b2db      	uxtb	r3, r3
 800837c:	f043 0302 	orr.w	r3, r3, #2
 8008380:	b2db      	uxtb	r3, r3
 8008382:	2b02      	cmp	r3, #2
 8008384:	d108      	bne.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8008386:	4b01      	ldr	r3, [pc, #4]	; (800838c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008388:	6a1b      	ldr	r3, [r3, #32]
 800838a:	e00d      	b.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800838c:	40021000 	.word	0x40021000
 8008390:	40007000 	.word	0x40007000
 8008394:	10908100 	.word	0x10908100
 8008398:	2302      	movs	r3, #2
 800839a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800839c:	69bb      	ldr	r3, [r7, #24]
 800839e:	fa93 f3a3 	rbit	r3, r3
 80083a2:	617b      	str	r3, [r7, #20]
 80083a4:	4b78      	ldr	r3, [pc, #480]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80083a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a8:	2202      	movs	r2, #2
 80083aa:	613a      	str	r2, [r7, #16]
 80083ac:	693a      	ldr	r2, [r7, #16]
 80083ae:	fa92 f2a2 	rbit	r2, r2
 80083b2:	60fa      	str	r2, [r7, #12]
  return result;
 80083b4:	68fa      	ldr	r2, [r7, #12]
 80083b6:	fab2 f282 	clz	r2, r2
 80083ba:	b2d2      	uxtb	r2, r2
 80083bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083c0:	b2d2      	uxtb	r2, r2
 80083c2:	f002 021f 	and.w	r2, r2, #31
 80083c6:	2101      	movs	r1, #1
 80083c8:	fa01 f202 	lsl.w	r2, r1, r2
 80083cc:	4013      	ands	r3, r2
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d0b7      	beq.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80083d2:	4b6d      	ldr	r3, [pc, #436]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80083d4:	6a1b      	ldr	r3, [r3, #32]
 80083d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	496a      	ldr	r1, [pc, #424]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80083e0:	4313      	orrs	r3, r2
 80083e2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80083e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d105      	bne.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80083ec:	4b66      	ldr	r3, [pc, #408]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80083ee:	69db      	ldr	r3, [r3, #28]
 80083f0:	4a65      	ldr	r2, [pc, #404]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80083f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083f6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f003 0301 	and.w	r3, r3, #1
 8008400:	2b00      	cmp	r3, #0
 8008402:	d008      	beq.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008404:	4b60      	ldr	r3, [pc, #384]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008408:	f023 0203 	bic.w	r2, r3, #3
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	495d      	ldr	r1, [pc, #372]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008412:	4313      	orrs	r3, r2
 8008414:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f003 0302 	and.w	r3, r3, #2
 800841e:	2b00      	cmp	r3, #0
 8008420:	d008      	beq.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008422:	4b59      	ldr	r3, [pc, #356]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008426:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	4956      	ldr	r1, [pc, #344]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008430:	4313      	orrs	r3, r2
 8008432:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f003 0304 	and.w	r3, r3, #4
 800843c:	2b00      	cmp	r3, #0
 800843e:	d008      	beq.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008440:	4b51      	ldr	r3, [pc, #324]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008444:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	691b      	ldr	r3, [r3, #16]
 800844c:	494e      	ldr	r1, [pc, #312]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800844e:	4313      	orrs	r3, r2
 8008450:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f003 0320 	and.w	r3, r3, #32
 800845a:	2b00      	cmp	r3, #0
 800845c:	d008      	beq.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800845e:	4b4a      	ldr	r3, [pc, #296]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008462:	f023 0210 	bic.w	r2, r3, #16
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	69db      	ldr	r3, [r3, #28]
 800846a:	4947      	ldr	r1, [pc, #284]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800846c:	4313      	orrs	r3, r2
 800846e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008478:	2b00      	cmp	r3, #0
 800847a:	d008      	beq.n	800848e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800847c:	4b42      	ldr	r3, [pc, #264]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008488:	493f      	ldr	r1, [pc, #252]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800848a:	4313      	orrs	r3, r2
 800848c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008496:	2b00      	cmp	r3, #0
 8008498:	d008      	beq.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800849a:	4b3b      	ldr	r3, [pc, #236]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800849c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800849e:	f023 0220 	bic.w	r2, r3, #32
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6a1b      	ldr	r3, [r3, #32]
 80084a6:	4938      	ldr	r1, [pc, #224]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80084a8:	4313      	orrs	r3, r2
 80084aa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f003 0308 	and.w	r3, r3, #8
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d008      	beq.n	80084ca <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80084b8:	4b33      	ldr	r3, [pc, #204]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80084ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	695b      	ldr	r3, [r3, #20]
 80084c4:	4930      	ldr	r1, [pc, #192]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80084c6:	4313      	orrs	r3, r2
 80084c8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f003 0310 	and.w	r3, r3, #16
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d008      	beq.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80084d6:	4b2c      	ldr	r3, [pc, #176]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80084d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	699b      	ldr	r3, [r3, #24]
 80084e2:	4929      	ldr	r1, [pc, #164]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80084e4:	4313      	orrs	r3, r2
 80084e6:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d008      	beq.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80084f4:	4b24      	ldr	r3, [pc, #144]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008500:	4921      	ldr	r1, [pc, #132]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008502:	4313      	orrs	r3, r2
 8008504:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800850e:	2b00      	cmp	r3, #0
 8008510:	d008      	beq.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008512:	4b1d      	ldr	r3, [pc, #116]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008516:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800851e:	491a      	ldr	r1, [pc, #104]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008520:	4313      	orrs	r3, r2
 8008522:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800852c:	2b00      	cmp	r3, #0
 800852e:	d008      	beq.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8008530:	4b15      	ldr	r3, [pc, #84]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008534:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800853c:	4912      	ldr	r1, [pc, #72]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800853e:	4313      	orrs	r3, r2
 8008540:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800854a:	2b00      	cmp	r3, #0
 800854c:	d008      	beq.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800854e:	4b0e      	ldr	r3, [pc, #56]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008552:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800855a:	490b      	ldr	r1, [pc, #44]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800855c:	4313      	orrs	r3, r2
 800855e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008568:	2b00      	cmp	r3, #0
 800856a:	d008      	beq.n	800857e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800856c:	4b06      	ldr	r3, [pc, #24]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800856e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008570:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008578:	4903      	ldr	r1, [pc, #12]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800857a:	4313      	orrs	r3, r2
 800857c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800857e:	2300      	movs	r3, #0
}
 8008580:	4618      	mov	r0, r3
 8008582:	3748      	adds	r7, #72	; 0x48
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}
 8008588:	40021000 	.word	0x40021000

0800858c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008594:	2301      	movs	r3, #1
 8008596:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d101      	bne.n	80085a2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800859e:	2301      	movs	r3, #1
 80085a0:	e073      	b.n	800868a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	7f5b      	ldrb	r3, [r3, #29]
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d105      	bne.n	80085b8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2200      	movs	r2, #0
 80085b0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f7fa f8e0 	bl	8002778 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2202      	movs	r2, #2
 80085bc:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	68db      	ldr	r3, [r3, #12]
 80085c4:	f003 0310 	and.w	r3, r3, #16
 80085c8:	2b10      	cmp	r3, #16
 80085ca:	d055      	beq.n	8008678 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	22ca      	movs	r2, #202	; 0xca
 80085d2:	625a      	str	r2, [r3, #36]	; 0x24
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	2253      	movs	r2, #83	; 0x53
 80085da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f000 fa49 	bl	8008a74 <RTC_EnterInitMode>
 80085e2:	4603      	mov	r3, r0
 80085e4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80085e6:	7bfb      	ldrb	r3, [r7, #15]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d12c      	bne.n	8008646 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	687a      	ldr	r2, [r7, #4]
 80085f4:	6812      	ldr	r2, [r2, #0]
 80085f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80085fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085fe:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	6899      	ldr	r1, [r3, #8]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	685a      	ldr	r2, [r3, #4]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	691b      	ldr	r3, [r3, #16]
 800860e:	431a      	orrs	r2, r3
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	695b      	ldr	r3, [r3, #20]
 8008614:	431a      	orrs	r2, r3
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	430a      	orrs	r2, r1
 800861c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	68d2      	ldr	r2, [r2, #12]
 8008626:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	6919      	ldr	r1, [r3, #16]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	689b      	ldr	r3, [r3, #8]
 8008632:	041a      	lsls	r2, r3, #16
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	430a      	orrs	r2, r1
 800863a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 fa50 	bl	8008ae2 <RTC_ExitInitMode>
 8008642:	4603      	mov	r3, r0
 8008644:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008646:	7bfb      	ldrb	r3, [r7, #15]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d110      	bne.n	800866e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800865a:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	699a      	ldr	r2, [r3, #24]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	430a      	orrs	r2, r1
 800866c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	22ff      	movs	r2, #255	; 0xff
 8008674:	625a      	str	r2, [r3, #36]	; 0x24
 8008676:	e001      	b.n	800867c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8008678:	2300      	movs	r3, #0
 800867a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800867c:	7bfb      	ldrb	r3, [r7, #15]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d102      	bne.n	8008688 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2201      	movs	r2, #1
 8008686:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8008688:	7bfb      	ldrb	r3, [r7, #15]
}
 800868a:	4618      	mov	r0, r3
 800868c:	3710      	adds	r7, #16
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}

08008692 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008692:	b590      	push	{r4, r7, lr}
 8008694:	b087      	sub	sp, #28
 8008696:	af00      	add	r7, sp, #0
 8008698:	60f8      	str	r0, [r7, #12]
 800869a:	60b9      	str	r1, [r7, #8]
 800869c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800869e:	2300      	movs	r3, #0
 80086a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	7f1b      	ldrb	r3, [r3, #28]
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d101      	bne.n	80086ae <HAL_RTC_SetTime+0x1c>
 80086aa:	2302      	movs	r3, #2
 80086ac:	e087      	b.n	80087be <HAL_RTC_SetTime+0x12c>
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2201      	movs	r2, #1
 80086b2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2202      	movs	r2, #2
 80086b8:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d126      	bne.n	800870e <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d102      	bne.n	80086d4 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	2200      	movs	r2, #0
 80086d2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	4618      	mov	r0, r3
 80086da:	f000 fa27 	bl	8008b2c <RTC_ByteToBcd2>
 80086de:	4603      	mov	r3, r0
 80086e0:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	785b      	ldrb	r3, [r3, #1]
 80086e6:	4618      	mov	r0, r3
 80086e8:	f000 fa20 	bl	8008b2c <RTC_ByteToBcd2>
 80086ec:	4603      	mov	r3, r0
 80086ee:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80086f0:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	789b      	ldrb	r3, [r3, #2]
 80086f6:	4618      	mov	r0, r3
 80086f8:	f000 fa18 	bl	8008b2c <RTC_ByteToBcd2>
 80086fc:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80086fe:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	78db      	ldrb	r3, [r3, #3]
 8008706:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008708:	4313      	orrs	r3, r2
 800870a:	617b      	str	r3, [r7, #20]
 800870c:	e018      	b.n	8008740 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008718:	2b00      	cmp	r3, #0
 800871a:	d102      	bne.n	8008722 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	2200      	movs	r2, #0
 8008720:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	785b      	ldrb	r3, [r3, #1]
 800872c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800872e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8008730:	68ba      	ldr	r2, [r7, #8]
 8008732:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008734:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	78db      	ldrb	r3, [r3, #3]
 800873a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800873c:	4313      	orrs	r3, r2
 800873e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	22ca      	movs	r2, #202	; 0xca
 8008746:	625a      	str	r2, [r3, #36]	; 0x24
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	2253      	movs	r2, #83	; 0x53
 800874e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008750:	68f8      	ldr	r0, [r7, #12]
 8008752:	f000 f98f 	bl	8008a74 <RTC_EnterInitMode>
 8008756:	4603      	mov	r3, r0
 8008758:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800875a:	7cfb      	ldrb	r3, [r7, #19]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d120      	bne.n	80087a2 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681a      	ldr	r2, [r3, #0]
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800876a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800876e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	689a      	ldr	r2, [r3, #8]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800877e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	6899      	ldr	r1, [r3, #8]
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	68da      	ldr	r2, [r3, #12]
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	691b      	ldr	r3, [r3, #16]
 800878e:	431a      	orrs	r2, r3
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	430a      	orrs	r2, r1
 8008796:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008798:	68f8      	ldr	r0, [r7, #12]
 800879a:	f000 f9a2 	bl	8008ae2 <RTC_ExitInitMode>
 800879e:	4603      	mov	r3, r0
 80087a0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80087a2:	7cfb      	ldrb	r3, [r7, #19]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d102      	bne.n	80087ae <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2201      	movs	r2, #1
 80087ac:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	22ff      	movs	r2, #255	; 0xff
 80087b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2200      	movs	r2, #0
 80087ba:	771a      	strb	r2, [r3, #28]

  return status;
 80087bc:	7cfb      	ldrb	r3, [r7, #19]
}
 80087be:	4618      	mov	r0, r3
 80087c0:	371c      	adds	r7, #28
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd90      	pop	{r4, r7, pc}

080087c6 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80087c6:	b580      	push	{r7, lr}
 80087c8:	b086      	sub	sp, #24
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	60f8      	str	r0, [r7, #12]
 80087ce:	60b9      	str	r1, [r7, #8]
 80087d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80087d2:	2300      	movs	r3, #0
 80087d4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	691b      	ldr	r3, [r3, #16]
 80087e6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80087f8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80087fc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	0c1b      	lsrs	r3, r3, #16
 8008802:	b2db      	uxtb	r3, r3
 8008804:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008808:	b2da      	uxtb	r2, r3
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	0a1b      	lsrs	r3, r3, #8
 8008812:	b2db      	uxtb	r3, r3
 8008814:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008818:	b2da      	uxtb	r2, r3
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	b2db      	uxtb	r3, r3
 8008822:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008826:	b2da      	uxtb	r2, r3
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	0d9b      	lsrs	r3, r3, #22
 8008830:	b2db      	uxtb	r3, r3
 8008832:	f003 0301 	and.w	r3, r3, #1
 8008836:	b2da      	uxtb	r2, r3
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d11a      	bne.n	8008878 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	781b      	ldrb	r3, [r3, #0]
 8008846:	4618      	mov	r0, r3
 8008848:	f000 f98e 	bl	8008b68 <RTC_Bcd2ToByte>
 800884c:	4603      	mov	r3, r0
 800884e:	461a      	mov	r2, r3
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	785b      	ldrb	r3, [r3, #1]
 8008858:	4618      	mov	r0, r3
 800885a:	f000 f985 	bl	8008b68 <RTC_Bcd2ToByte>
 800885e:	4603      	mov	r3, r0
 8008860:	461a      	mov	r2, r3
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	789b      	ldrb	r3, [r3, #2]
 800886a:	4618      	mov	r0, r3
 800886c:	f000 f97c 	bl	8008b68 <RTC_Bcd2ToByte>
 8008870:	4603      	mov	r3, r0
 8008872:	461a      	mov	r2, r3
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008878:	2300      	movs	r3, #0
}
 800887a:	4618      	mov	r0, r3
 800887c:	3718      	adds	r7, #24
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}

08008882 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008882:	b590      	push	{r4, r7, lr}
 8008884:	b087      	sub	sp, #28
 8008886:	af00      	add	r7, sp, #0
 8008888:	60f8      	str	r0, [r7, #12]
 800888a:	60b9      	str	r1, [r7, #8]
 800888c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800888e:	2300      	movs	r3, #0
 8008890:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	7f1b      	ldrb	r3, [r3, #28]
 8008896:	2b01      	cmp	r3, #1
 8008898:	d101      	bne.n	800889e <HAL_RTC_SetDate+0x1c>
 800889a:	2302      	movs	r3, #2
 800889c:	e071      	b.n	8008982 <HAL_RTC_SetDate+0x100>
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2201      	movs	r2, #1
 80088a2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2202      	movs	r2, #2
 80088a8:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d10e      	bne.n	80088ce <HAL_RTC_SetDate+0x4c>
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	785b      	ldrb	r3, [r3, #1]
 80088b4:	f003 0310 	and.w	r3, r3, #16
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d008      	beq.n	80088ce <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	785b      	ldrb	r3, [r3, #1]
 80088c0:	f023 0310 	bic.w	r3, r3, #16
 80088c4:	b2db      	uxtb	r3, r3
 80088c6:	330a      	adds	r3, #10
 80088c8:	b2da      	uxtb	r2, r3
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d11c      	bne.n	800890e <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	78db      	ldrb	r3, [r3, #3]
 80088d8:	4618      	mov	r0, r3
 80088da:	f000 f927 	bl	8008b2c <RTC_ByteToBcd2>
 80088de:	4603      	mov	r3, r0
 80088e0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	785b      	ldrb	r3, [r3, #1]
 80088e6:	4618      	mov	r0, r3
 80088e8:	f000 f920 	bl	8008b2c <RTC_ByteToBcd2>
 80088ec:	4603      	mov	r3, r0
 80088ee:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80088f0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	789b      	ldrb	r3, [r3, #2]
 80088f6:	4618      	mov	r0, r3
 80088f8:	f000 f918 	bl	8008b2c <RTC_ByteToBcd2>
 80088fc:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80088fe:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008908:	4313      	orrs	r3, r2
 800890a:	617b      	str	r3, [r7, #20]
 800890c:	e00e      	b.n	800892c <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	78db      	ldrb	r3, [r3, #3]
 8008912:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	785b      	ldrb	r3, [r3, #1]
 8008918:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800891a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800891c:	68ba      	ldr	r2, [r7, #8]
 800891e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008920:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	781b      	ldrb	r3, [r3, #0]
 8008926:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008928:	4313      	orrs	r3, r2
 800892a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	22ca      	movs	r2, #202	; 0xca
 8008932:	625a      	str	r2, [r3, #36]	; 0x24
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	2253      	movs	r2, #83	; 0x53
 800893a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800893c:	68f8      	ldr	r0, [r7, #12]
 800893e:	f000 f899 	bl	8008a74 <RTC_EnterInitMode>
 8008942:	4603      	mov	r3, r0
 8008944:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008946:	7cfb      	ldrb	r3, [r7, #19]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d10c      	bne.n	8008966 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008956:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800895a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800895c:	68f8      	ldr	r0, [r7, #12]
 800895e:	f000 f8c0 	bl	8008ae2 <RTC_ExitInitMode>
 8008962:	4603      	mov	r3, r0
 8008964:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008966:	7cfb      	ldrb	r3, [r7, #19]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d102      	bne.n	8008972 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2201      	movs	r2, #1
 8008970:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	22ff      	movs	r2, #255	; 0xff
 8008978:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2200      	movs	r2, #0
 800897e:	771a      	strb	r2, [r3, #28]

  return status;
 8008980:	7cfb      	ldrb	r3, [r7, #19]
}
 8008982:	4618      	mov	r0, r3
 8008984:	371c      	adds	r7, #28
 8008986:	46bd      	mov	sp, r7
 8008988:	bd90      	pop	{r4, r7, pc}

0800898a <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800898a:	b580      	push	{r7, lr}
 800898c:	b086      	sub	sp, #24
 800898e:	af00      	add	r7, sp, #0
 8008990:	60f8      	str	r0, [r7, #12]
 8008992:	60b9      	str	r1, [r7, #8]
 8008994:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008996:	2300      	movs	r3, #0
 8008998:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80089a4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80089a8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	0c1b      	lsrs	r3, r3, #16
 80089ae:	b2da      	uxtb	r2, r3
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	0a1b      	lsrs	r3, r3, #8
 80089b8:	b2db      	uxtb	r3, r3
 80089ba:	f003 031f 	and.w	r3, r3, #31
 80089be:	b2da      	uxtb	r2, r3
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80089cc:	b2da      	uxtb	r2, r3
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	0b5b      	lsrs	r3, r3, #13
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	f003 0307 	and.w	r3, r3, #7
 80089dc:	b2da      	uxtb	r2, r3
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d11a      	bne.n	8008a1e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	78db      	ldrb	r3, [r3, #3]
 80089ec:	4618      	mov	r0, r3
 80089ee:	f000 f8bb 	bl	8008b68 <RTC_Bcd2ToByte>
 80089f2:	4603      	mov	r3, r0
 80089f4:	461a      	mov	r2, r3
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	785b      	ldrb	r3, [r3, #1]
 80089fe:	4618      	mov	r0, r3
 8008a00:	f000 f8b2 	bl	8008b68 <RTC_Bcd2ToByte>
 8008a04:	4603      	mov	r3, r0
 8008a06:	461a      	mov	r2, r3
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	789b      	ldrb	r3, [r3, #2]
 8008a10:	4618      	mov	r0, r3
 8008a12:	f000 f8a9 	bl	8008b68 <RTC_Bcd2ToByte>
 8008a16:	4603      	mov	r3, r0
 8008a18:	461a      	mov	r2, r3
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008a1e:	2300      	movs	r3, #0
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3718      	adds	r7, #24
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b084      	sub	sp, #16
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008a30:	2300      	movs	r3, #0
 8008a32:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	4a0d      	ldr	r2, [pc, #52]	; (8008a70 <HAL_RTC_WaitForSynchro+0x48>)
 8008a3a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008a3c:	f7fa fa66 	bl	8002f0c <HAL_GetTick>
 8008a40:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008a42:	e009      	b.n	8008a58 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008a44:	f7fa fa62 	bl	8002f0c <HAL_GetTick>
 8008a48:	4602      	mov	r2, r0
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	1ad3      	subs	r3, r2, r3
 8008a4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a52:	d901      	bls.n	8008a58 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8008a54:	2303      	movs	r3, #3
 8008a56:	e007      	b.n	8008a68 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	68db      	ldr	r3, [r3, #12]
 8008a5e:	f003 0320 	and.w	r3, r3, #32
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d0ee      	beq.n	8008a44 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8008a66:	2300      	movs	r3, #0
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3710      	adds	r7, #16
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}
 8008a70:	0001ff5f 	.word	0x0001ff5f

08008a74 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b084      	sub	sp, #16
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008a80:	2300      	movs	r3, #0
 8008a82:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	68db      	ldr	r3, [r3, #12]
 8008a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d122      	bne.n	8008ad8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	68da      	ldr	r2, [r3, #12]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008aa0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008aa2:	f7fa fa33 	bl	8002f0c <HAL_GetTick>
 8008aa6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008aa8:	e00c      	b.n	8008ac4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008aaa:	f7fa fa2f 	bl	8002f0c <HAL_GetTick>
 8008aae:	4602      	mov	r2, r0
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	1ad3      	subs	r3, r2, r3
 8008ab4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ab8:	d904      	bls.n	8008ac4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2204      	movs	r2, #4
 8008abe:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	68db      	ldr	r3, [r3, #12]
 8008aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d102      	bne.n	8008ad8 <RTC_EnterInitMode+0x64>
 8008ad2:	7bfb      	ldrb	r3, [r7, #15]
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	d1e8      	bne.n	8008aaa <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8008ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3710      	adds	r7, #16
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}

08008ae2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008ae2:	b580      	push	{r7, lr}
 8008ae4:	b084      	sub	sp, #16
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008aea:	2300      	movs	r3, #0
 8008aec:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	68da      	ldr	r2, [r3, #12]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008afc:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	689b      	ldr	r3, [r3, #8]
 8008b04:	f003 0320 	and.w	r3, r3, #32
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d10a      	bne.n	8008b22 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f7ff ff8b 	bl	8008a28 <HAL_RTC_WaitForSynchro>
 8008b12:	4603      	mov	r3, r0
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d004      	beq.n	8008b22 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2204      	movs	r2, #4
 8008b1c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3710      	adds	r7, #16
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b085      	sub	sp, #20
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	4603      	mov	r3, r0
 8008b34:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008b36:	2300      	movs	r3, #0
 8008b38:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8008b3a:	e005      	b.n	8008b48 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	3301      	adds	r3, #1
 8008b40:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8008b42:	79fb      	ldrb	r3, [r7, #7]
 8008b44:	3b0a      	subs	r3, #10
 8008b46:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8008b48:	79fb      	ldrb	r3, [r7, #7]
 8008b4a:	2b09      	cmp	r3, #9
 8008b4c:	d8f6      	bhi.n	8008b3c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	011b      	lsls	r3, r3, #4
 8008b54:	b2da      	uxtb	r2, r3
 8008b56:	79fb      	ldrb	r3, [r7, #7]
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	b2db      	uxtb	r3, r3
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3714      	adds	r7, #20
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr

08008b68 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b085      	sub	sp, #20
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	4603      	mov	r3, r0
 8008b70:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8008b72:	2300      	movs	r3, #0
 8008b74:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8008b76:	79fb      	ldrb	r3, [r7, #7]
 8008b78:	091b      	lsrs	r3, r3, #4
 8008b7a:	b2db      	uxtb	r3, r3
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	4613      	mov	r3, r2
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	4413      	add	r3, r2
 8008b84:	005b      	lsls	r3, r3, #1
 8008b86:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	b2da      	uxtb	r2, r3
 8008b8c:	79fb      	ldrb	r3, [r7, #7]
 8008b8e:	f003 030f 	and.w	r3, r3, #15
 8008b92:	b2db      	uxtb	r3, r3
 8008b94:	4413      	add	r3, r2
 8008b96:	b2db      	uxtb	r3, r3
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3714      	adds	r7, #20
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr

08008ba4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b082      	sub	sp, #8
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d101      	bne.n	8008bb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	e049      	b.n	8008c4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d106      	bne.n	8008bd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f7f9 fdfa 	bl	80027c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2202      	movs	r2, #2
 8008bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	3304      	adds	r3, #4
 8008be0:	4619      	mov	r1, r3
 8008be2:	4610      	mov	r0, r2
 8008be4:	f000 ffd6 	bl	8009b94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2201      	movs	r2, #1
 8008bec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2201      	movs	r2, #1
 8008c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2201      	movs	r2, #1
 8008c14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2201      	movs	r2, #1
 8008c24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2201      	movs	r2, #1
 8008c34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2201      	movs	r2, #1
 8008c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c48:	2300      	movs	r3, #0
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3708      	adds	r7, #8
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}

08008c52 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008c52:	b580      	push	{r7, lr}
 8008c54:	b082      	sub	sp, #8
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d101      	bne.n	8008c64 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008c60:	2301      	movs	r3, #1
 8008c62:	e049      	b.n	8008cf8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c6a:	b2db      	uxtb	r3, r3
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d106      	bne.n	8008c7e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2200      	movs	r2, #0
 8008c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f000 f841 	bl	8008d00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2202      	movs	r2, #2
 8008c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681a      	ldr	r2, [r3, #0]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	3304      	adds	r3, #4
 8008c8e:	4619      	mov	r1, r3
 8008c90:	4610      	mov	r0, r2
 8008c92:	f000 ff7f 	bl	8009b94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2201      	movs	r2, #1
 8008c9a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2201      	movs	r2, #1
 8008ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2201      	movs	r2, #1
 8008caa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2201      	movs	r2, #1
 8008cba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2201      	movs	r2, #1
 8008cca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2201      	movs	r2, #1
 8008cd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2201      	movs	r2, #1
 8008cda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2201      	movs	r2, #1
 8008cea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008cf6:	2300      	movs	r3, #0
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3708      	adds	r7, #8
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b083      	sub	sp, #12
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008d08:	bf00      	nop
 8008d0a:	370c      	adds	r7, #12
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr

08008d14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b084      	sub	sp, #16
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d109      	bne.n	8008d38 <HAL_TIM_PWM_Start+0x24>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d2a:	b2db      	uxtb	r3, r3
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	bf14      	ite	ne
 8008d30:	2301      	movne	r3, #1
 8008d32:	2300      	moveq	r3, #0
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	e03c      	b.n	8008db2 <HAL_TIM_PWM_Start+0x9e>
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	2b04      	cmp	r3, #4
 8008d3c:	d109      	bne.n	8008d52 <HAL_TIM_PWM_Start+0x3e>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008d44:	b2db      	uxtb	r3, r3
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	bf14      	ite	ne
 8008d4a:	2301      	movne	r3, #1
 8008d4c:	2300      	moveq	r3, #0
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	e02f      	b.n	8008db2 <HAL_TIM_PWM_Start+0x9e>
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	2b08      	cmp	r3, #8
 8008d56:	d109      	bne.n	8008d6c <HAL_TIM_PWM_Start+0x58>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008d5e:	b2db      	uxtb	r3, r3
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	bf14      	ite	ne
 8008d64:	2301      	movne	r3, #1
 8008d66:	2300      	moveq	r3, #0
 8008d68:	b2db      	uxtb	r3, r3
 8008d6a:	e022      	b.n	8008db2 <HAL_TIM_PWM_Start+0x9e>
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	2b0c      	cmp	r3, #12
 8008d70:	d109      	bne.n	8008d86 <HAL_TIM_PWM_Start+0x72>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d78:	b2db      	uxtb	r3, r3
 8008d7a:	2b01      	cmp	r3, #1
 8008d7c:	bf14      	ite	ne
 8008d7e:	2301      	movne	r3, #1
 8008d80:	2300      	moveq	r3, #0
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	e015      	b.n	8008db2 <HAL_TIM_PWM_Start+0x9e>
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	2b10      	cmp	r3, #16
 8008d8a:	d109      	bne.n	8008da0 <HAL_TIM_PWM_Start+0x8c>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	bf14      	ite	ne
 8008d98:	2301      	movne	r3, #1
 8008d9a:	2300      	moveq	r3, #0
 8008d9c:	b2db      	uxtb	r3, r3
 8008d9e:	e008      	b.n	8008db2 <HAL_TIM_PWM_Start+0x9e>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008da6:	b2db      	uxtb	r3, r3
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	bf14      	ite	ne
 8008dac:	2301      	movne	r3, #1
 8008dae:	2300      	moveq	r3, #0
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d001      	beq.n	8008dba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008db6:	2301      	movs	r3, #1
 8008db8:	e097      	b.n	8008eea <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d104      	bne.n	8008dca <HAL_TIM_PWM_Start+0xb6>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2202      	movs	r2, #2
 8008dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008dc8:	e023      	b.n	8008e12 <HAL_TIM_PWM_Start+0xfe>
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	2b04      	cmp	r3, #4
 8008dce:	d104      	bne.n	8008dda <HAL_TIM_PWM_Start+0xc6>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2202      	movs	r2, #2
 8008dd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008dd8:	e01b      	b.n	8008e12 <HAL_TIM_PWM_Start+0xfe>
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	2b08      	cmp	r3, #8
 8008dde:	d104      	bne.n	8008dea <HAL_TIM_PWM_Start+0xd6>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2202      	movs	r2, #2
 8008de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008de8:	e013      	b.n	8008e12 <HAL_TIM_PWM_Start+0xfe>
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	2b0c      	cmp	r3, #12
 8008dee:	d104      	bne.n	8008dfa <HAL_TIM_PWM_Start+0xe6>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2202      	movs	r2, #2
 8008df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008df8:	e00b      	b.n	8008e12 <HAL_TIM_PWM_Start+0xfe>
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	2b10      	cmp	r3, #16
 8008dfe:	d104      	bne.n	8008e0a <HAL_TIM_PWM_Start+0xf6>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2202      	movs	r2, #2
 8008e04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e08:	e003      	b.n	8008e12 <HAL_TIM_PWM_Start+0xfe>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2202      	movs	r2, #2
 8008e0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	2201      	movs	r2, #1
 8008e18:	6839      	ldr	r1, [r7, #0]
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f001 fbd8 	bl	800a5d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4a33      	ldr	r2, [pc, #204]	; (8008ef4 <HAL_TIM_PWM_Start+0x1e0>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d013      	beq.n	8008e52 <HAL_TIM_PWM_Start+0x13e>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a32      	ldr	r2, [pc, #200]	; (8008ef8 <HAL_TIM_PWM_Start+0x1e4>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d00e      	beq.n	8008e52 <HAL_TIM_PWM_Start+0x13e>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a30      	ldr	r2, [pc, #192]	; (8008efc <HAL_TIM_PWM_Start+0x1e8>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d009      	beq.n	8008e52 <HAL_TIM_PWM_Start+0x13e>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4a2f      	ldr	r2, [pc, #188]	; (8008f00 <HAL_TIM_PWM_Start+0x1ec>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d004      	beq.n	8008e52 <HAL_TIM_PWM_Start+0x13e>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a2d      	ldr	r2, [pc, #180]	; (8008f04 <HAL_TIM_PWM_Start+0x1f0>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d101      	bne.n	8008e56 <HAL_TIM_PWM_Start+0x142>
 8008e52:	2301      	movs	r3, #1
 8008e54:	e000      	b.n	8008e58 <HAL_TIM_PWM_Start+0x144>
 8008e56:	2300      	movs	r3, #0
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d007      	beq.n	8008e6c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008e6a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a20      	ldr	r2, [pc, #128]	; (8008ef4 <HAL_TIM_PWM_Start+0x1e0>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d018      	beq.n	8008ea8 <HAL_TIM_PWM_Start+0x194>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e7e:	d013      	beq.n	8008ea8 <HAL_TIM_PWM_Start+0x194>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a20      	ldr	r2, [pc, #128]	; (8008f08 <HAL_TIM_PWM_Start+0x1f4>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d00e      	beq.n	8008ea8 <HAL_TIM_PWM_Start+0x194>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a1f      	ldr	r2, [pc, #124]	; (8008f0c <HAL_TIM_PWM_Start+0x1f8>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d009      	beq.n	8008ea8 <HAL_TIM_PWM_Start+0x194>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a17      	ldr	r2, [pc, #92]	; (8008ef8 <HAL_TIM_PWM_Start+0x1e4>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d004      	beq.n	8008ea8 <HAL_TIM_PWM_Start+0x194>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4a16      	ldr	r2, [pc, #88]	; (8008efc <HAL_TIM_PWM_Start+0x1e8>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d115      	bne.n	8008ed4 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	689a      	ldr	r2, [r3, #8]
 8008eae:	4b18      	ldr	r3, [pc, #96]	; (8008f10 <HAL_TIM_PWM_Start+0x1fc>)
 8008eb0:	4013      	ands	r3, r2
 8008eb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2b06      	cmp	r3, #6
 8008eb8:	d015      	beq.n	8008ee6 <HAL_TIM_PWM_Start+0x1d2>
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ec0:	d011      	beq.n	8008ee6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	681a      	ldr	r2, [r3, #0]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f042 0201 	orr.w	r2, r2, #1
 8008ed0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ed2:	e008      	b.n	8008ee6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	681a      	ldr	r2, [r3, #0]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f042 0201 	orr.w	r2, r2, #1
 8008ee2:	601a      	str	r2, [r3, #0]
 8008ee4:	e000      	b.n	8008ee8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ee6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008ee8:	2300      	movs	r3, #0
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3710      	adds	r7, #16
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}
 8008ef2:	bf00      	nop
 8008ef4:	40012c00 	.word	0x40012c00
 8008ef8:	40013400 	.word	0x40013400
 8008efc:	40014000 	.word	0x40014000
 8008f00:	40014400 	.word	0x40014400
 8008f04:	40014800 	.word	0x40014800
 8008f08:	40000400 	.word	0x40000400
 8008f0c:	40000800 	.word	0x40000800
 8008f10:	00010007 	.word	0x00010007

08008f14 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b082      	sub	sp, #8
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	2200      	movs	r2, #0
 8008f24:	6839      	ldr	r1, [r7, #0]
 8008f26:	4618      	mov	r0, r3
 8008f28:	f001 fb52 	bl	800a5d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a3e      	ldr	r2, [pc, #248]	; (800902c <HAL_TIM_PWM_Stop+0x118>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d013      	beq.n	8008f5e <HAL_TIM_PWM_Stop+0x4a>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4a3d      	ldr	r2, [pc, #244]	; (8009030 <HAL_TIM_PWM_Stop+0x11c>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d00e      	beq.n	8008f5e <HAL_TIM_PWM_Stop+0x4a>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4a3b      	ldr	r2, [pc, #236]	; (8009034 <HAL_TIM_PWM_Stop+0x120>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d009      	beq.n	8008f5e <HAL_TIM_PWM_Stop+0x4a>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	4a3a      	ldr	r2, [pc, #232]	; (8009038 <HAL_TIM_PWM_Stop+0x124>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d004      	beq.n	8008f5e <HAL_TIM_PWM_Stop+0x4a>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4a38      	ldr	r2, [pc, #224]	; (800903c <HAL_TIM_PWM_Stop+0x128>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d101      	bne.n	8008f62 <HAL_TIM_PWM_Stop+0x4e>
 8008f5e:	2301      	movs	r3, #1
 8008f60:	e000      	b.n	8008f64 <HAL_TIM_PWM_Stop+0x50>
 8008f62:	2300      	movs	r3, #0
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d017      	beq.n	8008f98 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	6a1a      	ldr	r2, [r3, #32]
 8008f6e:	f241 1311 	movw	r3, #4369	; 0x1111
 8008f72:	4013      	ands	r3, r2
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d10f      	bne.n	8008f98 <HAL_TIM_PWM_Stop+0x84>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	6a1a      	ldr	r2, [r3, #32]
 8008f7e:	f240 4344 	movw	r3, #1092	; 0x444
 8008f82:	4013      	ands	r3, r2
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d107      	bne.n	8008f98 <HAL_TIM_PWM_Stop+0x84>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008f96:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	6a1a      	ldr	r2, [r3, #32]
 8008f9e:	f241 1311 	movw	r3, #4369	; 0x1111
 8008fa2:	4013      	ands	r3, r2
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d10f      	bne.n	8008fc8 <HAL_TIM_PWM_Stop+0xb4>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	6a1a      	ldr	r2, [r3, #32]
 8008fae:	f240 4344 	movw	r3, #1092	; 0x444
 8008fb2:	4013      	ands	r3, r2
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d107      	bne.n	8008fc8 <HAL_TIM_PWM_Stop+0xb4>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	681a      	ldr	r2, [r3, #0]
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f022 0201 	bic.w	r2, r2, #1
 8008fc6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d104      	bne.n	8008fd8 <HAL_TIM_PWM_Stop+0xc4>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008fd6:	e023      	b.n	8009020 <HAL_TIM_PWM_Stop+0x10c>
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	2b04      	cmp	r3, #4
 8008fdc:	d104      	bne.n	8008fe8 <HAL_TIM_PWM_Stop+0xd4>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008fe6:	e01b      	b.n	8009020 <HAL_TIM_PWM_Stop+0x10c>
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	2b08      	cmp	r3, #8
 8008fec:	d104      	bne.n	8008ff8 <HAL_TIM_PWM_Stop+0xe4>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2201      	movs	r2, #1
 8008ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ff6:	e013      	b.n	8009020 <HAL_TIM_PWM_Stop+0x10c>
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	2b0c      	cmp	r3, #12
 8008ffc:	d104      	bne.n	8009008 <HAL_TIM_PWM_Stop+0xf4>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2201      	movs	r2, #1
 8009002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009006:	e00b      	b.n	8009020 <HAL_TIM_PWM_Stop+0x10c>
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	2b10      	cmp	r3, #16
 800900c:	d104      	bne.n	8009018 <HAL_TIM_PWM_Stop+0x104>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2201      	movs	r2, #1
 8009012:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009016:	e003      	b.n	8009020 <HAL_TIM_PWM_Stop+0x10c>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2201      	movs	r2, #1
 800901c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8009020:	2300      	movs	r3, #0
}
 8009022:	4618      	mov	r0, r3
 8009024:	3708      	adds	r7, #8
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
 800902a:	bf00      	nop
 800902c:	40012c00 	.word	0x40012c00
 8009030:	40013400 	.word	0x40013400
 8009034:	40014000 	.word	0x40014000
 8009038:	40014400 	.word	0x40014400
 800903c:	40014800 	.word	0x40014800

08009040 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b082      	sub	sp, #8
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d101      	bne.n	8009052 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800904e:	2301      	movs	r3, #1
 8009050:	e049      	b.n	80090e6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009058:	b2db      	uxtb	r3, r3
 800905a:	2b00      	cmp	r3, #0
 800905c:	d106      	bne.n	800906c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2200      	movs	r2, #0
 8009062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 f841 	bl	80090ee <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2202      	movs	r2, #2
 8009070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	3304      	adds	r3, #4
 800907c:	4619      	mov	r1, r3
 800907e:	4610      	mov	r0, r2
 8009080:	f000 fd88 	bl	8009b94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2201      	movs	r2, #1
 8009088:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2201      	movs	r2, #1
 8009090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2201      	movs	r2, #1
 8009098:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2201      	movs	r2, #1
 80090a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2201      	movs	r2, #1
 80090a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2201      	movs	r2, #1
 80090b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2201      	movs	r2, #1
 80090b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2201      	movs	r2, #1
 80090c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2201      	movs	r2, #1
 80090c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2201      	movs	r2, #1
 80090d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2201      	movs	r2, #1
 80090d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2201      	movs	r2, #1
 80090e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80090e4:	2300      	movs	r3, #0
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3708      	adds	r7, #8
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}

080090ee <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80090ee:	b480      	push	{r7}
 80090f0:	b083      	sub	sp, #12
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80090f6:	bf00      	nop
 80090f8:	370c      	adds	r7, #12
 80090fa:	46bd      	mov	sp, r7
 80090fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009100:	4770      	bx	lr
	...

08009104 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b084      	sub	sp, #16
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800910e:	2300      	movs	r3, #0
 8009110:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d104      	bne.n	8009122 <HAL_TIM_IC_Start_IT+0x1e>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800911e:	b2db      	uxtb	r3, r3
 8009120:	e023      	b.n	800916a <HAL_TIM_IC_Start_IT+0x66>
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	2b04      	cmp	r3, #4
 8009126:	d104      	bne.n	8009132 <HAL_TIM_IC_Start_IT+0x2e>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800912e:	b2db      	uxtb	r3, r3
 8009130:	e01b      	b.n	800916a <HAL_TIM_IC_Start_IT+0x66>
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	2b08      	cmp	r3, #8
 8009136:	d104      	bne.n	8009142 <HAL_TIM_IC_Start_IT+0x3e>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800913e:	b2db      	uxtb	r3, r3
 8009140:	e013      	b.n	800916a <HAL_TIM_IC_Start_IT+0x66>
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	2b0c      	cmp	r3, #12
 8009146:	d104      	bne.n	8009152 <HAL_TIM_IC_Start_IT+0x4e>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800914e:	b2db      	uxtb	r3, r3
 8009150:	e00b      	b.n	800916a <HAL_TIM_IC_Start_IT+0x66>
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	2b10      	cmp	r3, #16
 8009156:	d104      	bne.n	8009162 <HAL_TIM_IC_Start_IT+0x5e>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800915e:	b2db      	uxtb	r3, r3
 8009160:	e003      	b.n	800916a <HAL_TIM_IC_Start_IT+0x66>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009168:	b2db      	uxtb	r3, r3
 800916a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d104      	bne.n	800917c <HAL_TIM_IC_Start_IT+0x78>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009178:	b2db      	uxtb	r3, r3
 800917a:	e013      	b.n	80091a4 <HAL_TIM_IC_Start_IT+0xa0>
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	2b04      	cmp	r3, #4
 8009180:	d104      	bne.n	800918c <HAL_TIM_IC_Start_IT+0x88>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009188:	b2db      	uxtb	r3, r3
 800918a:	e00b      	b.n	80091a4 <HAL_TIM_IC_Start_IT+0xa0>
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	2b08      	cmp	r3, #8
 8009190:	d104      	bne.n	800919c <HAL_TIM_IC_Start_IT+0x98>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009198:	b2db      	uxtb	r3, r3
 800919a:	e003      	b.n	80091a4 <HAL_TIM_IC_Start_IT+0xa0>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80091a2:	b2db      	uxtb	r3, r3
 80091a4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80091a6:	7bbb      	ldrb	r3, [r7, #14]
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d102      	bne.n	80091b2 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80091ac:	7b7b      	ldrb	r3, [r7, #13]
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	d001      	beq.n	80091b6 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80091b2:	2301      	movs	r3, #1
 80091b4:	e0d8      	b.n	8009368 <HAL_TIM_IC_Start_IT+0x264>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d104      	bne.n	80091c6 <HAL_TIM_IC_Start_IT+0xc2>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2202      	movs	r2, #2
 80091c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80091c4:	e023      	b.n	800920e <HAL_TIM_IC_Start_IT+0x10a>
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	2b04      	cmp	r3, #4
 80091ca:	d104      	bne.n	80091d6 <HAL_TIM_IC_Start_IT+0xd2>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2202      	movs	r2, #2
 80091d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80091d4:	e01b      	b.n	800920e <HAL_TIM_IC_Start_IT+0x10a>
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	2b08      	cmp	r3, #8
 80091da:	d104      	bne.n	80091e6 <HAL_TIM_IC_Start_IT+0xe2>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2202      	movs	r2, #2
 80091e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80091e4:	e013      	b.n	800920e <HAL_TIM_IC_Start_IT+0x10a>
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	2b0c      	cmp	r3, #12
 80091ea:	d104      	bne.n	80091f6 <HAL_TIM_IC_Start_IT+0xf2>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2202      	movs	r2, #2
 80091f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80091f4:	e00b      	b.n	800920e <HAL_TIM_IC_Start_IT+0x10a>
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	2b10      	cmp	r3, #16
 80091fa:	d104      	bne.n	8009206 <HAL_TIM_IC_Start_IT+0x102>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2202      	movs	r2, #2
 8009200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009204:	e003      	b.n	800920e <HAL_TIM_IC_Start_IT+0x10a>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2202      	movs	r2, #2
 800920a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d104      	bne.n	800921e <HAL_TIM_IC_Start_IT+0x11a>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2202      	movs	r2, #2
 8009218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800921c:	e013      	b.n	8009246 <HAL_TIM_IC_Start_IT+0x142>
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	2b04      	cmp	r3, #4
 8009222:	d104      	bne.n	800922e <HAL_TIM_IC_Start_IT+0x12a>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2202      	movs	r2, #2
 8009228:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800922c:	e00b      	b.n	8009246 <HAL_TIM_IC_Start_IT+0x142>
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	2b08      	cmp	r3, #8
 8009232:	d104      	bne.n	800923e <HAL_TIM_IC_Start_IT+0x13a>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2202      	movs	r2, #2
 8009238:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800923c:	e003      	b.n	8009246 <HAL_TIM_IC_Start_IT+0x142>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2202      	movs	r2, #2
 8009242:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	2b0c      	cmp	r3, #12
 800924a:	d841      	bhi.n	80092d0 <HAL_TIM_IC_Start_IT+0x1cc>
 800924c:	a201      	add	r2, pc, #4	; (adr r2, 8009254 <HAL_TIM_IC_Start_IT+0x150>)
 800924e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009252:	bf00      	nop
 8009254:	08009289 	.word	0x08009289
 8009258:	080092d1 	.word	0x080092d1
 800925c:	080092d1 	.word	0x080092d1
 8009260:	080092d1 	.word	0x080092d1
 8009264:	0800929b 	.word	0x0800929b
 8009268:	080092d1 	.word	0x080092d1
 800926c:	080092d1 	.word	0x080092d1
 8009270:	080092d1 	.word	0x080092d1
 8009274:	080092ad 	.word	0x080092ad
 8009278:	080092d1 	.word	0x080092d1
 800927c:	080092d1 	.word	0x080092d1
 8009280:	080092d1 	.word	0x080092d1
 8009284:	080092bf 	.word	0x080092bf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	68da      	ldr	r2, [r3, #12]
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f042 0202 	orr.w	r2, r2, #2
 8009296:	60da      	str	r2, [r3, #12]
      break;
 8009298:	e01d      	b.n	80092d6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	68da      	ldr	r2, [r3, #12]
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f042 0204 	orr.w	r2, r2, #4
 80092a8:	60da      	str	r2, [r3, #12]
      break;
 80092aa:	e014      	b.n	80092d6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	68da      	ldr	r2, [r3, #12]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f042 0208 	orr.w	r2, r2, #8
 80092ba:	60da      	str	r2, [r3, #12]
      break;
 80092bc:	e00b      	b.n	80092d6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	68da      	ldr	r2, [r3, #12]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f042 0210 	orr.w	r2, r2, #16
 80092cc:	60da      	str	r2, [r3, #12]
      break;
 80092ce:	e002      	b.n	80092d6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80092d0:	2301      	movs	r3, #1
 80092d2:	73fb      	strb	r3, [r7, #15]
      break;
 80092d4:	bf00      	nop
  }

  if (status == HAL_OK)
 80092d6:	7bfb      	ldrb	r3, [r7, #15]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d144      	bne.n	8009366 <HAL_TIM_IC_Start_IT+0x262>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	2201      	movs	r2, #1
 80092e2:	6839      	ldr	r1, [r7, #0]
 80092e4:	4618      	mov	r0, r3
 80092e6:	f001 f973 	bl	800a5d0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4a20      	ldr	r2, [pc, #128]	; (8009370 <HAL_TIM_IC_Start_IT+0x26c>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d018      	beq.n	8009326 <HAL_TIM_IC_Start_IT+0x222>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092fc:	d013      	beq.n	8009326 <HAL_TIM_IC_Start_IT+0x222>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4a1c      	ldr	r2, [pc, #112]	; (8009374 <HAL_TIM_IC_Start_IT+0x270>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d00e      	beq.n	8009326 <HAL_TIM_IC_Start_IT+0x222>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4a1a      	ldr	r2, [pc, #104]	; (8009378 <HAL_TIM_IC_Start_IT+0x274>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d009      	beq.n	8009326 <HAL_TIM_IC_Start_IT+0x222>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4a19      	ldr	r2, [pc, #100]	; (800937c <HAL_TIM_IC_Start_IT+0x278>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d004      	beq.n	8009326 <HAL_TIM_IC_Start_IT+0x222>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a17      	ldr	r2, [pc, #92]	; (8009380 <HAL_TIM_IC_Start_IT+0x27c>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d115      	bne.n	8009352 <HAL_TIM_IC_Start_IT+0x24e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	689a      	ldr	r2, [r3, #8]
 800932c:	4b15      	ldr	r3, [pc, #84]	; (8009384 <HAL_TIM_IC_Start_IT+0x280>)
 800932e:	4013      	ands	r3, r2
 8009330:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	2b06      	cmp	r3, #6
 8009336:	d015      	beq.n	8009364 <HAL_TIM_IC_Start_IT+0x260>
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800933e:	d011      	beq.n	8009364 <HAL_TIM_IC_Start_IT+0x260>
      {
        __HAL_TIM_ENABLE(htim);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	681a      	ldr	r2, [r3, #0]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f042 0201 	orr.w	r2, r2, #1
 800934e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009350:	e008      	b.n	8009364 <HAL_TIM_IC_Start_IT+0x260>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	681a      	ldr	r2, [r3, #0]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f042 0201 	orr.w	r2, r2, #1
 8009360:	601a      	str	r2, [r3, #0]
 8009362:	e000      	b.n	8009366 <HAL_TIM_IC_Start_IT+0x262>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009364:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8009366:	7bfb      	ldrb	r3, [r7, #15]
}
 8009368:	4618      	mov	r0, r3
 800936a:	3710      	adds	r7, #16
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}
 8009370:	40012c00 	.word	0x40012c00
 8009374:	40000400 	.word	0x40000400
 8009378:	40000800 	.word	0x40000800
 800937c:	40013400 	.word	0x40013400
 8009380:	40014000 	.word	0x40014000
 8009384:	00010007 	.word	0x00010007

08009388 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	691b      	ldr	r3, [r3, #16]
 8009396:	f003 0302 	and.w	r3, r3, #2
 800939a:	2b02      	cmp	r3, #2
 800939c:	d122      	bne.n	80093e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	68db      	ldr	r3, [r3, #12]
 80093a4:	f003 0302 	and.w	r3, r3, #2
 80093a8:	2b02      	cmp	r3, #2
 80093aa:	d11b      	bne.n	80093e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f06f 0202 	mvn.w	r2, #2
 80093b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2201      	movs	r2, #1
 80093ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	699b      	ldr	r3, [r3, #24]
 80093c2:	f003 0303 	and.w	r3, r3, #3
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d003      	beq.n	80093d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f7f8 fcfe 	bl	8001dcc <HAL_TIM_IC_CaptureCallback>
 80093d0:	e005      	b.n	80093de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 fbc0 	bl	8009b58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f000 fbc7 	bl	8009b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2200      	movs	r2, #0
 80093e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	691b      	ldr	r3, [r3, #16]
 80093ea:	f003 0304 	and.w	r3, r3, #4
 80093ee:	2b04      	cmp	r3, #4
 80093f0:	d122      	bne.n	8009438 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	68db      	ldr	r3, [r3, #12]
 80093f8:	f003 0304 	and.w	r3, r3, #4
 80093fc:	2b04      	cmp	r3, #4
 80093fe:	d11b      	bne.n	8009438 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f06f 0204 	mvn.w	r2, #4
 8009408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2202      	movs	r2, #2
 800940e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	699b      	ldr	r3, [r3, #24]
 8009416:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800941a:	2b00      	cmp	r3, #0
 800941c:	d003      	beq.n	8009426 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f7f8 fcd4 	bl	8001dcc <HAL_TIM_IC_CaptureCallback>
 8009424:	e005      	b.n	8009432 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f000 fb96 	bl	8009b58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f000 fb9d 	bl	8009b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2200      	movs	r2, #0
 8009436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	691b      	ldr	r3, [r3, #16]
 800943e:	f003 0308 	and.w	r3, r3, #8
 8009442:	2b08      	cmp	r3, #8
 8009444:	d122      	bne.n	800948c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	68db      	ldr	r3, [r3, #12]
 800944c:	f003 0308 	and.w	r3, r3, #8
 8009450:	2b08      	cmp	r3, #8
 8009452:	d11b      	bne.n	800948c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f06f 0208 	mvn.w	r2, #8
 800945c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2204      	movs	r2, #4
 8009462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	69db      	ldr	r3, [r3, #28]
 800946a:	f003 0303 	and.w	r3, r3, #3
 800946e:	2b00      	cmp	r3, #0
 8009470:	d003      	beq.n	800947a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f7f8 fcaa 	bl	8001dcc <HAL_TIM_IC_CaptureCallback>
 8009478:	e005      	b.n	8009486 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f000 fb6c 	bl	8009b58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f000 fb73 	bl	8009b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2200      	movs	r2, #0
 800948a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	691b      	ldr	r3, [r3, #16]
 8009492:	f003 0310 	and.w	r3, r3, #16
 8009496:	2b10      	cmp	r3, #16
 8009498:	d122      	bne.n	80094e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	68db      	ldr	r3, [r3, #12]
 80094a0:	f003 0310 	and.w	r3, r3, #16
 80094a4:	2b10      	cmp	r3, #16
 80094a6:	d11b      	bne.n	80094e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f06f 0210 	mvn.w	r2, #16
 80094b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2208      	movs	r2, #8
 80094b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	69db      	ldr	r3, [r3, #28]
 80094be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d003      	beq.n	80094ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f7f8 fc80 	bl	8001dcc <HAL_TIM_IC_CaptureCallback>
 80094cc:	e005      	b.n	80094da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 fb42 	bl	8009b58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f000 fb49 	bl	8009b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2200      	movs	r2, #0
 80094de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	691b      	ldr	r3, [r3, #16]
 80094e6:	f003 0301 	and.w	r3, r3, #1
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d10e      	bne.n	800950c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	68db      	ldr	r3, [r3, #12]
 80094f4:	f003 0301 	and.w	r3, r3, #1
 80094f8:	2b01      	cmp	r3, #1
 80094fa:	d107      	bne.n	800950c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f06f 0201 	mvn.w	r2, #1
 8009504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 fb1c 	bl	8009b44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	691b      	ldr	r3, [r3, #16]
 8009512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009516:	2b80      	cmp	r3, #128	; 0x80
 8009518:	d10e      	bne.n	8009538 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	68db      	ldr	r3, [r3, #12]
 8009520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009524:	2b80      	cmp	r3, #128	; 0x80
 8009526:	d107      	bne.n	8009538 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f001 fa8c 	bl	800aa50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	691b      	ldr	r3, [r3, #16]
 800953e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009542:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009546:	d10e      	bne.n	8009566 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	68db      	ldr	r3, [r3, #12]
 800954e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009552:	2b80      	cmp	r3, #128	; 0x80
 8009554:	d107      	bne.n	8009566 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800955e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f001 fa7f 	bl	800aa64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	691b      	ldr	r3, [r3, #16]
 800956c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009570:	2b40      	cmp	r3, #64	; 0x40
 8009572:	d10e      	bne.n	8009592 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	68db      	ldr	r3, [r3, #12]
 800957a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800957e:	2b40      	cmp	r3, #64	; 0x40
 8009580:	d107      	bne.n	8009592 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800958a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f000 faf7 	bl	8009b80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	691b      	ldr	r3, [r3, #16]
 8009598:	f003 0320 	and.w	r3, r3, #32
 800959c:	2b20      	cmp	r3, #32
 800959e:	d10e      	bne.n	80095be <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	68db      	ldr	r3, [r3, #12]
 80095a6:	f003 0320 	and.w	r3, r3, #32
 80095aa:	2b20      	cmp	r3, #32
 80095ac:	d107      	bne.n	80095be <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f06f 0220 	mvn.w	r2, #32
 80095b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f001 fa3f 	bl	800aa3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80095be:	bf00      	nop
 80095c0:	3708      	adds	r7, #8
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}

080095c6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80095c6:	b580      	push	{r7, lr}
 80095c8:	b086      	sub	sp, #24
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	60f8      	str	r0, [r7, #12]
 80095ce:	60b9      	str	r1, [r7, #8]
 80095d0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80095d2:	2300      	movs	r3, #0
 80095d4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d101      	bne.n	80095e4 <HAL_TIM_IC_ConfigChannel+0x1e>
 80095e0:	2302      	movs	r3, #2
 80095e2:	e088      	b.n	80096f6 <HAL_TIM_IC_ConfigChannel+0x130>
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2201      	movs	r2, #1
 80095e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d11b      	bne.n	800962a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8009602:	f000 fe2d 	bl	800a260 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	699a      	ldr	r2, [r3, #24]
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f022 020c 	bic.w	r2, r2, #12
 8009614:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	6999      	ldr	r1, [r3, #24]
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	689a      	ldr	r2, [r3, #8]
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	430a      	orrs	r2, r1
 8009626:	619a      	str	r2, [r3, #24]
 8009628:	e060      	b.n	80096ec <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2b04      	cmp	r3, #4
 800962e:	d11c      	bne.n	800966a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8009640:	f000 fea5 	bl	800a38e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	699a      	ldr	r2, [r3, #24]
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009652:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	6999      	ldr	r1, [r3, #24]
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	689b      	ldr	r3, [r3, #8]
 800965e:	021a      	lsls	r2, r3, #8
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	430a      	orrs	r2, r1
 8009666:	619a      	str	r2, [r3, #24]
 8009668:	e040      	b.n	80096ec <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2b08      	cmp	r3, #8
 800966e:	d11b      	bne.n	80096a8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8009680:	f000 fef2 	bl	800a468 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	69da      	ldr	r2, [r3, #28]
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f022 020c 	bic.w	r2, r2, #12
 8009692:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	69d9      	ldr	r1, [r3, #28]
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	689a      	ldr	r2, [r3, #8]
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	430a      	orrs	r2, r1
 80096a4:	61da      	str	r2, [r3, #28]
 80096a6:	e021      	b.n	80096ec <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2b0c      	cmp	r3, #12
 80096ac:	d11c      	bne.n	80096e8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80096be:	f000 ff0f 	bl	800a4e0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	69da      	ldr	r2, [r3, #28]
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80096d0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	69d9      	ldr	r1, [r3, #28]
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	689b      	ldr	r3, [r3, #8]
 80096dc:	021a      	lsls	r2, r3, #8
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	430a      	orrs	r2, r1
 80096e4:	61da      	str	r2, [r3, #28]
 80096e6:	e001      	b.n	80096ec <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80096e8:	2301      	movs	r3, #1
 80096ea:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2200      	movs	r2, #0
 80096f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80096f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3718      	adds	r7, #24
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
	...

08009700 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b086      	sub	sp, #24
 8009704:	af00      	add	r7, sp, #0
 8009706:	60f8      	str	r0, [r7, #12]
 8009708:	60b9      	str	r1, [r7, #8]
 800970a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800970c:	2300      	movs	r3, #0
 800970e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009716:	2b01      	cmp	r3, #1
 8009718:	d101      	bne.n	800971e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800971a:	2302      	movs	r3, #2
 800971c:	e0ff      	b.n	800991e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	2201      	movs	r2, #1
 8009722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2b14      	cmp	r3, #20
 800972a:	f200 80f0 	bhi.w	800990e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800972e:	a201      	add	r2, pc, #4	; (adr r2, 8009734 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009734:	08009789 	.word	0x08009789
 8009738:	0800990f 	.word	0x0800990f
 800973c:	0800990f 	.word	0x0800990f
 8009740:	0800990f 	.word	0x0800990f
 8009744:	080097c9 	.word	0x080097c9
 8009748:	0800990f 	.word	0x0800990f
 800974c:	0800990f 	.word	0x0800990f
 8009750:	0800990f 	.word	0x0800990f
 8009754:	0800980b 	.word	0x0800980b
 8009758:	0800990f 	.word	0x0800990f
 800975c:	0800990f 	.word	0x0800990f
 8009760:	0800990f 	.word	0x0800990f
 8009764:	0800984b 	.word	0x0800984b
 8009768:	0800990f 	.word	0x0800990f
 800976c:	0800990f 	.word	0x0800990f
 8009770:	0800990f 	.word	0x0800990f
 8009774:	0800988d 	.word	0x0800988d
 8009778:	0800990f 	.word	0x0800990f
 800977c:	0800990f 	.word	0x0800990f
 8009780:	0800990f 	.word	0x0800990f
 8009784:	080098cd 	.word	0x080098cd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	68b9      	ldr	r1, [r7, #8]
 800978e:	4618      	mov	r0, r3
 8009790:	f000 fa90 	bl	8009cb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	699a      	ldr	r2, [r3, #24]
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f042 0208 	orr.w	r2, r2, #8
 80097a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	699a      	ldr	r2, [r3, #24]
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f022 0204 	bic.w	r2, r2, #4
 80097b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	6999      	ldr	r1, [r3, #24]
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	691a      	ldr	r2, [r3, #16]
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	430a      	orrs	r2, r1
 80097c4:	619a      	str	r2, [r3, #24]
      break;
 80097c6:	e0a5      	b.n	8009914 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	68b9      	ldr	r1, [r7, #8]
 80097ce:	4618      	mov	r0, r3
 80097d0:	f000 fb00 	bl	8009dd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	699a      	ldr	r2, [r3, #24]
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80097e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	699a      	ldr	r2, [r3, #24]
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	6999      	ldr	r1, [r3, #24]
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	691b      	ldr	r3, [r3, #16]
 80097fe:	021a      	lsls	r2, r3, #8
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	430a      	orrs	r2, r1
 8009806:	619a      	str	r2, [r3, #24]
      break;
 8009808:	e084      	b.n	8009914 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	68b9      	ldr	r1, [r7, #8]
 8009810:	4618      	mov	r0, r3
 8009812:	f000 fb69 	bl	8009ee8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	69da      	ldr	r2, [r3, #28]
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f042 0208 	orr.w	r2, r2, #8
 8009824:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	69da      	ldr	r2, [r3, #28]
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f022 0204 	bic.w	r2, r2, #4
 8009834:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	69d9      	ldr	r1, [r3, #28]
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	691a      	ldr	r2, [r3, #16]
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	430a      	orrs	r2, r1
 8009846:	61da      	str	r2, [r3, #28]
      break;
 8009848:	e064      	b.n	8009914 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	68b9      	ldr	r1, [r7, #8]
 8009850:	4618      	mov	r0, r3
 8009852:	f000 fbd1 	bl	8009ff8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	69da      	ldr	r2, [r3, #28]
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009864:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	69da      	ldr	r2, [r3, #28]
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009874:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	69d9      	ldr	r1, [r3, #28]
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	691b      	ldr	r3, [r3, #16]
 8009880:	021a      	lsls	r2, r3, #8
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	430a      	orrs	r2, r1
 8009888:	61da      	str	r2, [r3, #28]
      break;
 800988a:	e043      	b.n	8009914 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	68b9      	ldr	r1, [r7, #8]
 8009892:	4618      	mov	r0, r3
 8009894:	f000 fc1a 	bl	800a0cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f042 0208 	orr.w	r2, r2, #8
 80098a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f022 0204 	bic.w	r2, r2, #4
 80098b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	691a      	ldr	r2, [r3, #16]
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	430a      	orrs	r2, r1
 80098c8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80098ca:	e023      	b.n	8009914 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	68b9      	ldr	r1, [r7, #8]
 80098d2:	4618      	mov	r0, r3
 80098d4:	f000 fc5e 	bl	800a194 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80098e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80098f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	691b      	ldr	r3, [r3, #16]
 8009902:	021a      	lsls	r2, r3, #8
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	430a      	orrs	r2, r1
 800990a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800990c:	e002      	b.n	8009914 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800990e:	2301      	movs	r3, #1
 8009910:	75fb      	strb	r3, [r7, #23]
      break;
 8009912:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	2200      	movs	r2, #0
 8009918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800991c:	7dfb      	ldrb	r3, [r7, #23]
}
 800991e:	4618      	mov	r0, r3
 8009920:	3718      	adds	r7, #24
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
 8009926:	bf00      	nop

08009928 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b084      	sub	sp, #16
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009932:	2300      	movs	r3, #0
 8009934:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800993c:	2b01      	cmp	r3, #1
 800993e:	d101      	bne.n	8009944 <HAL_TIM_ConfigClockSource+0x1c>
 8009940:	2302      	movs	r3, #2
 8009942:	e0b6      	b.n	8009ab2 <HAL_TIM_ConfigClockSource+0x18a>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2201      	movs	r2, #1
 8009948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2202      	movs	r2, #2
 8009950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	689b      	ldr	r3, [r3, #8]
 800995a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009962:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009966:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800996e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	68ba      	ldr	r2, [r7, #8]
 8009976:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009980:	d03e      	beq.n	8009a00 <HAL_TIM_ConfigClockSource+0xd8>
 8009982:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009986:	f200 8087 	bhi.w	8009a98 <HAL_TIM_ConfigClockSource+0x170>
 800998a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800998e:	f000 8086 	beq.w	8009a9e <HAL_TIM_ConfigClockSource+0x176>
 8009992:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009996:	d87f      	bhi.n	8009a98 <HAL_TIM_ConfigClockSource+0x170>
 8009998:	2b70      	cmp	r3, #112	; 0x70
 800999a:	d01a      	beq.n	80099d2 <HAL_TIM_ConfigClockSource+0xaa>
 800999c:	2b70      	cmp	r3, #112	; 0x70
 800999e:	d87b      	bhi.n	8009a98 <HAL_TIM_ConfigClockSource+0x170>
 80099a0:	2b60      	cmp	r3, #96	; 0x60
 80099a2:	d050      	beq.n	8009a46 <HAL_TIM_ConfigClockSource+0x11e>
 80099a4:	2b60      	cmp	r3, #96	; 0x60
 80099a6:	d877      	bhi.n	8009a98 <HAL_TIM_ConfigClockSource+0x170>
 80099a8:	2b50      	cmp	r3, #80	; 0x50
 80099aa:	d03c      	beq.n	8009a26 <HAL_TIM_ConfigClockSource+0xfe>
 80099ac:	2b50      	cmp	r3, #80	; 0x50
 80099ae:	d873      	bhi.n	8009a98 <HAL_TIM_ConfigClockSource+0x170>
 80099b0:	2b40      	cmp	r3, #64	; 0x40
 80099b2:	d058      	beq.n	8009a66 <HAL_TIM_ConfigClockSource+0x13e>
 80099b4:	2b40      	cmp	r3, #64	; 0x40
 80099b6:	d86f      	bhi.n	8009a98 <HAL_TIM_ConfigClockSource+0x170>
 80099b8:	2b30      	cmp	r3, #48	; 0x30
 80099ba:	d064      	beq.n	8009a86 <HAL_TIM_ConfigClockSource+0x15e>
 80099bc:	2b30      	cmp	r3, #48	; 0x30
 80099be:	d86b      	bhi.n	8009a98 <HAL_TIM_ConfigClockSource+0x170>
 80099c0:	2b20      	cmp	r3, #32
 80099c2:	d060      	beq.n	8009a86 <HAL_TIM_ConfigClockSource+0x15e>
 80099c4:	2b20      	cmp	r3, #32
 80099c6:	d867      	bhi.n	8009a98 <HAL_TIM_ConfigClockSource+0x170>
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d05c      	beq.n	8009a86 <HAL_TIM_ConfigClockSource+0x15e>
 80099cc:	2b10      	cmp	r3, #16
 80099ce:	d05a      	beq.n	8009a86 <HAL_TIM_ConfigClockSource+0x15e>
 80099d0:	e062      	b.n	8009a98 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80099e2:	f000 fdd5 	bl	800a590 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	689b      	ldr	r3, [r3, #8]
 80099ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80099f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	68ba      	ldr	r2, [r7, #8]
 80099fc:	609a      	str	r2, [r3, #8]
      break;
 80099fe:	e04f      	b.n	8009aa0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009a10:	f000 fdbe 	bl	800a590 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	689a      	ldr	r2, [r3, #8]
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009a22:	609a      	str	r2, [r3, #8]
      break;
 8009a24:	e03c      	b.n	8009aa0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a32:	461a      	mov	r2, r3
 8009a34:	f000 fc7c 	bl	800a330 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	2150      	movs	r1, #80	; 0x50
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f000 fd8b 	bl	800a55a <TIM_ITRx_SetConfig>
      break;
 8009a44:	e02c      	b.n	8009aa0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009a52:	461a      	mov	r2, r3
 8009a54:	f000 fcd8 	bl	800a408 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	2160      	movs	r1, #96	; 0x60
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f000 fd7b 	bl	800a55a <TIM_ITRx_SetConfig>
      break;
 8009a64:	e01c      	b.n	8009aa0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a72:	461a      	mov	r2, r3
 8009a74:	f000 fc5c 	bl	800a330 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	2140      	movs	r1, #64	; 0x40
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f000 fd6b 	bl	800a55a <TIM_ITRx_SetConfig>
      break;
 8009a84:	e00c      	b.n	8009aa0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681a      	ldr	r2, [r3, #0]
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4619      	mov	r1, r3
 8009a90:	4610      	mov	r0, r2
 8009a92:	f000 fd62 	bl	800a55a <TIM_ITRx_SetConfig>
      break;
 8009a96:	e003      	b.n	8009aa0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8009a98:	2301      	movs	r3, #1
 8009a9a:	73fb      	strb	r3, [r7, #15]
      break;
 8009a9c:	e000      	b.n	8009aa0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8009a9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3710      	adds	r7, #16
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}
	...

08009abc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b085      	sub	sp, #20
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
 8009ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	2b0c      	cmp	r3, #12
 8009ace:	d831      	bhi.n	8009b34 <HAL_TIM_ReadCapturedValue+0x78>
 8009ad0:	a201      	add	r2, pc, #4	; (adr r2, 8009ad8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8009ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad6:	bf00      	nop
 8009ad8:	08009b0d 	.word	0x08009b0d
 8009adc:	08009b35 	.word	0x08009b35
 8009ae0:	08009b35 	.word	0x08009b35
 8009ae4:	08009b35 	.word	0x08009b35
 8009ae8:	08009b17 	.word	0x08009b17
 8009aec:	08009b35 	.word	0x08009b35
 8009af0:	08009b35 	.word	0x08009b35
 8009af4:	08009b35 	.word	0x08009b35
 8009af8:	08009b21 	.word	0x08009b21
 8009afc:	08009b35 	.word	0x08009b35
 8009b00:	08009b35 	.word	0x08009b35
 8009b04:	08009b35 	.word	0x08009b35
 8009b08:	08009b2b 	.word	0x08009b2b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b12:	60fb      	str	r3, [r7, #12]

      break;
 8009b14:	e00f      	b.n	8009b36 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b1c:	60fb      	str	r3, [r7, #12]

      break;
 8009b1e:	e00a      	b.n	8009b36 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b26:	60fb      	str	r3, [r7, #12]

      break;
 8009b28:	e005      	b.n	8009b36 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b30:	60fb      	str	r3, [r7, #12]

      break;
 8009b32:	e000      	b.n	8009b36 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8009b34:	bf00      	nop
  }

  return tmpreg;
 8009b36:	68fb      	ldr	r3, [r7, #12]
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3714      	adds	r7, #20
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr

08009b44 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009b4c:	bf00      	nop
 8009b4e:	370c      	adds	r7, #12
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr

08009b58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b083      	sub	sp, #12
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009b60:	bf00      	nop
 8009b62:	370c      	adds	r7, #12
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr

08009b6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b083      	sub	sp, #12
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009b74:	bf00      	nop
 8009b76:	370c      	adds	r7, #12
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr

08009b80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b083      	sub	sp, #12
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009b88:	bf00      	nop
 8009b8a:	370c      	adds	r7, #12
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b92:	4770      	bx	lr

08009b94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b085      	sub	sp, #20
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	4a3c      	ldr	r2, [pc, #240]	; (8009c98 <TIM_Base_SetConfig+0x104>)
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d00f      	beq.n	8009bcc <TIM_Base_SetConfig+0x38>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bb2:	d00b      	beq.n	8009bcc <TIM_Base_SetConfig+0x38>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	4a39      	ldr	r2, [pc, #228]	; (8009c9c <TIM_Base_SetConfig+0x108>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d007      	beq.n	8009bcc <TIM_Base_SetConfig+0x38>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	4a38      	ldr	r2, [pc, #224]	; (8009ca0 <TIM_Base_SetConfig+0x10c>)
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d003      	beq.n	8009bcc <TIM_Base_SetConfig+0x38>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	4a37      	ldr	r2, [pc, #220]	; (8009ca4 <TIM_Base_SetConfig+0x110>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d108      	bne.n	8009bde <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	68fa      	ldr	r2, [r7, #12]
 8009bda:	4313      	orrs	r3, r2
 8009bdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	4a2d      	ldr	r2, [pc, #180]	; (8009c98 <TIM_Base_SetConfig+0x104>)
 8009be2:	4293      	cmp	r3, r2
 8009be4:	d01b      	beq.n	8009c1e <TIM_Base_SetConfig+0x8a>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bec:	d017      	beq.n	8009c1e <TIM_Base_SetConfig+0x8a>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	4a2a      	ldr	r2, [pc, #168]	; (8009c9c <TIM_Base_SetConfig+0x108>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d013      	beq.n	8009c1e <TIM_Base_SetConfig+0x8a>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	4a29      	ldr	r2, [pc, #164]	; (8009ca0 <TIM_Base_SetConfig+0x10c>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d00f      	beq.n	8009c1e <TIM_Base_SetConfig+0x8a>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	4a28      	ldr	r2, [pc, #160]	; (8009ca4 <TIM_Base_SetConfig+0x110>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d00b      	beq.n	8009c1e <TIM_Base_SetConfig+0x8a>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	4a27      	ldr	r2, [pc, #156]	; (8009ca8 <TIM_Base_SetConfig+0x114>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d007      	beq.n	8009c1e <TIM_Base_SetConfig+0x8a>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	4a26      	ldr	r2, [pc, #152]	; (8009cac <TIM_Base_SetConfig+0x118>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d003      	beq.n	8009c1e <TIM_Base_SetConfig+0x8a>
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	4a25      	ldr	r2, [pc, #148]	; (8009cb0 <TIM_Base_SetConfig+0x11c>)
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d108      	bne.n	8009c30 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	68db      	ldr	r3, [r3, #12]
 8009c2a:	68fa      	ldr	r2, [r7, #12]
 8009c2c:	4313      	orrs	r3, r2
 8009c2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	695b      	ldr	r3, [r3, #20]
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	68fa      	ldr	r2, [r7, #12]
 8009c42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	689a      	ldr	r2, [r3, #8]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	681a      	ldr	r2, [r3, #0]
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	4a10      	ldr	r2, [pc, #64]	; (8009c98 <TIM_Base_SetConfig+0x104>)
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d00f      	beq.n	8009c7c <TIM_Base_SetConfig+0xe8>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	4a11      	ldr	r2, [pc, #68]	; (8009ca4 <TIM_Base_SetConfig+0x110>)
 8009c60:	4293      	cmp	r3, r2
 8009c62:	d00b      	beq.n	8009c7c <TIM_Base_SetConfig+0xe8>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	4a10      	ldr	r2, [pc, #64]	; (8009ca8 <TIM_Base_SetConfig+0x114>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d007      	beq.n	8009c7c <TIM_Base_SetConfig+0xe8>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	4a0f      	ldr	r2, [pc, #60]	; (8009cac <TIM_Base_SetConfig+0x118>)
 8009c70:	4293      	cmp	r3, r2
 8009c72:	d003      	beq.n	8009c7c <TIM_Base_SetConfig+0xe8>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	4a0e      	ldr	r2, [pc, #56]	; (8009cb0 <TIM_Base_SetConfig+0x11c>)
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	d103      	bne.n	8009c84 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	691a      	ldr	r2, [r3, #16]
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2201      	movs	r2, #1
 8009c88:	615a      	str	r2, [r3, #20]
}
 8009c8a:	bf00      	nop
 8009c8c:	3714      	adds	r7, #20
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c94:	4770      	bx	lr
 8009c96:	bf00      	nop
 8009c98:	40012c00 	.word	0x40012c00
 8009c9c:	40000400 	.word	0x40000400
 8009ca0:	40000800 	.word	0x40000800
 8009ca4:	40013400 	.word	0x40013400
 8009ca8:	40014000 	.word	0x40014000
 8009cac:	40014400 	.word	0x40014400
 8009cb0:	40014800 	.word	0x40014800

08009cb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b087      	sub	sp, #28
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6a1b      	ldr	r3, [r3, #32]
 8009cc2:	f023 0201 	bic.w	r2, r3, #1
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6a1b      	ldr	r3, [r3, #32]
 8009cce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	699b      	ldr	r3, [r3, #24]
 8009cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	f023 0303 	bic.w	r3, r3, #3
 8009cee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	68fa      	ldr	r2, [r7, #12]
 8009cf6:	4313      	orrs	r3, r2
 8009cf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	f023 0302 	bic.w	r3, r3, #2
 8009d00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	689b      	ldr	r3, [r3, #8]
 8009d06:	697a      	ldr	r2, [r7, #20]
 8009d08:	4313      	orrs	r3, r2
 8009d0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	4a2c      	ldr	r2, [pc, #176]	; (8009dc0 <TIM_OC1_SetConfig+0x10c>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d00f      	beq.n	8009d34 <TIM_OC1_SetConfig+0x80>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	4a2b      	ldr	r2, [pc, #172]	; (8009dc4 <TIM_OC1_SetConfig+0x110>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d00b      	beq.n	8009d34 <TIM_OC1_SetConfig+0x80>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	4a2a      	ldr	r2, [pc, #168]	; (8009dc8 <TIM_OC1_SetConfig+0x114>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d007      	beq.n	8009d34 <TIM_OC1_SetConfig+0x80>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	4a29      	ldr	r2, [pc, #164]	; (8009dcc <TIM_OC1_SetConfig+0x118>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d003      	beq.n	8009d34 <TIM_OC1_SetConfig+0x80>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	4a28      	ldr	r2, [pc, #160]	; (8009dd0 <TIM_OC1_SetConfig+0x11c>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d10c      	bne.n	8009d4e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	f023 0308 	bic.w	r3, r3, #8
 8009d3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	68db      	ldr	r3, [r3, #12]
 8009d40:	697a      	ldr	r2, [r7, #20]
 8009d42:	4313      	orrs	r3, r2
 8009d44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	f023 0304 	bic.w	r3, r3, #4
 8009d4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	4a1b      	ldr	r2, [pc, #108]	; (8009dc0 <TIM_OC1_SetConfig+0x10c>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d00f      	beq.n	8009d76 <TIM_OC1_SetConfig+0xc2>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	4a1a      	ldr	r2, [pc, #104]	; (8009dc4 <TIM_OC1_SetConfig+0x110>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d00b      	beq.n	8009d76 <TIM_OC1_SetConfig+0xc2>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	4a19      	ldr	r2, [pc, #100]	; (8009dc8 <TIM_OC1_SetConfig+0x114>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d007      	beq.n	8009d76 <TIM_OC1_SetConfig+0xc2>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	4a18      	ldr	r2, [pc, #96]	; (8009dcc <TIM_OC1_SetConfig+0x118>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d003      	beq.n	8009d76 <TIM_OC1_SetConfig+0xc2>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	4a17      	ldr	r2, [pc, #92]	; (8009dd0 <TIM_OC1_SetConfig+0x11c>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d111      	bne.n	8009d9a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009d84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	695b      	ldr	r3, [r3, #20]
 8009d8a:	693a      	ldr	r2, [r7, #16]
 8009d8c:	4313      	orrs	r3, r2
 8009d8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	699b      	ldr	r3, [r3, #24]
 8009d94:	693a      	ldr	r2, [r7, #16]
 8009d96:	4313      	orrs	r3, r2
 8009d98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	693a      	ldr	r2, [r7, #16]
 8009d9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	68fa      	ldr	r2, [r7, #12]
 8009da4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	685a      	ldr	r2, [r3, #4]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	697a      	ldr	r2, [r7, #20]
 8009db2:	621a      	str	r2, [r3, #32]
}
 8009db4:	bf00      	nop
 8009db6:	371c      	adds	r7, #28
 8009db8:	46bd      	mov	sp, r7
 8009dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbe:	4770      	bx	lr
 8009dc0:	40012c00 	.word	0x40012c00
 8009dc4:	40013400 	.word	0x40013400
 8009dc8:	40014000 	.word	0x40014000
 8009dcc:	40014400 	.word	0x40014400
 8009dd0:	40014800 	.word	0x40014800

08009dd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b087      	sub	sp, #28
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6a1b      	ldr	r3, [r3, #32]
 8009de2:	f023 0210 	bic.w	r2, r3, #16
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6a1b      	ldr	r3, [r3, #32]
 8009dee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	685b      	ldr	r3, [r3, #4]
 8009df4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	699b      	ldr	r3, [r3, #24]
 8009dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009e02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	021b      	lsls	r3, r3, #8
 8009e16:	68fa      	ldr	r2, [r7, #12]
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	f023 0320 	bic.w	r3, r3, #32
 8009e22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	689b      	ldr	r3, [r3, #8]
 8009e28:	011b      	lsls	r3, r3, #4
 8009e2a:	697a      	ldr	r2, [r7, #20]
 8009e2c:	4313      	orrs	r3, r2
 8009e2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	4a28      	ldr	r2, [pc, #160]	; (8009ed4 <TIM_OC2_SetConfig+0x100>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d003      	beq.n	8009e40 <TIM_OC2_SetConfig+0x6c>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	4a27      	ldr	r2, [pc, #156]	; (8009ed8 <TIM_OC2_SetConfig+0x104>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d10d      	bne.n	8009e5c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	68db      	ldr	r3, [r3, #12]
 8009e4c:	011b      	lsls	r3, r3, #4
 8009e4e:	697a      	ldr	r2, [r7, #20]
 8009e50:	4313      	orrs	r3, r2
 8009e52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	4a1d      	ldr	r2, [pc, #116]	; (8009ed4 <TIM_OC2_SetConfig+0x100>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d00f      	beq.n	8009e84 <TIM_OC2_SetConfig+0xb0>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	4a1c      	ldr	r2, [pc, #112]	; (8009ed8 <TIM_OC2_SetConfig+0x104>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d00b      	beq.n	8009e84 <TIM_OC2_SetConfig+0xb0>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	4a1b      	ldr	r2, [pc, #108]	; (8009edc <TIM_OC2_SetConfig+0x108>)
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d007      	beq.n	8009e84 <TIM_OC2_SetConfig+0xb0>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	4a1a      	ldr	r2, [pc, #104]	; (8009ee0 <TIM_OC2_SetConfig+0x10c>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d003      	beq.n	8009e84 <TIM_OC2_SetConfig+0xb0>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	4a19      	ldr	r2, [pc, #100]	; (8009ee4 <TIM_OC2_SetConfig+0x110>)
 8009e80:	4293      	cmp	r3, r2
 8009e82:	d113      	bne.n	8009eac <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009e8a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009e92:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	695b      	ldr	r3, [r3, #20]
 8009e98:	009b      	lsls	r3, r3, #2
 8009e9a:	693a      	ldr	r2, [r7, #16]
 8009e9c:	4313      	orrs	r3, r2
 8009e9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	699b      	ldr	r3, [r3, #24]
 8009ea4:	009b      	lsls	r3, r3, #2
 8009ea6:	693a      	ldr	r2, [r7, #16]
 8009ea8:	4313      	orrs	r3, r2
 8009eaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	693a      	ldr	r2, [r7, #16]
 8009eb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	68fa      	ldr	r2, [r7, #12]
 8009eb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	685a      	ldr	r2, [r3, #4]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	697a      	ldr	r2, [r7, #20]
 8009ec4:	621a      	str	r2, [r3, #32]
}
 8009ec6:	bf00      	nop
 8009ec8:	371c      	adds	r7, #28
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed0:	4770      	bx	lr
 8009ed2:	bf00      	nop
 8009ed4:	40012c00 	.word	0x40012c00
 8009ed8:	40013400 	.word	0x40013400
 8009edc:	40014000 	.word	0x40014000
 8009ee0:	40014400 	.word	0x40014400
 8009ee4:	40014800 	.word	0x40014800

08009ee8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b087      	sub	sp, #28
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6a1b      	ldr	r3, [r3, #32]
 8009ef6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6a1b      	ldr	r3, [r3, #32]
 8009f02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	685b      	ldr	r3, [r3, #4]
 8009f08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	69db      	ldr	r3, [r3, #28]
 8009f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	f023 0303 	bic.w	r3, r3, #3
 8009f22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	68fa      	ldr	r2, [r7, #12]
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009f34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	689b      	ldr	r3, [r3, #8]
 8009f3a:	021b      	lsls	r3, r3, #8
 8009f3c:	697a      	ldr	r2, [r7, #20]
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	4a27      	ldr	r2, [pc, #156]	; (8009fe4 <TIM_OC3_SetConfig+0xfc>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d003      	beq.n	8009f52 <TIM_OC3_SetConfig+0x6a>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	4a26      	ldr	r2, [pc, #152]	; (8009fe8 <TIM_OC3_SetConfig+0x100>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d10d      	bne.n	8009f6e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009f58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	68db      	ldr	r3, [r3, #12]
 8009f5e:	021b      	lsls	r3, r3, #8
 8009f60:	697a      	ldr	r2, [r7, #20]
 8009f62:	4313      	orrs	r3, r2
 8009f64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009f6c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	4a1c      	ldr	r2, [pc, #112]	; (8009fe4 <TIM_OC3_SetConfig+0xfc>)
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d00f      	beq.n	8009f96 <TIM_OC3_SetConfig+0xae>
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	4a1b      	ldr	r2, [pc, #108]	; (8009fe8 <TIM_OC3_SetConfig+0x100>)
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	d00b      	beq.n	8009f96 <TIM_OC3_SetConfig+0xae>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	4a1a      	ldr	r2, [pc, #104]	; (8009fec <TIM_OC3_SetConfig+0x104>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d007      	beq.n	8009f96 <TIM_OC3_SetConfig+0xae>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	4a19      	ldr	r2, [pc, #100]	; (8009ff0 <TIM_OC3_SetConfig+0x108>)
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	d003      	beq.n	8009f96 <TIM_OC3_SetConfig+0xae>
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	4a18      	ldr	r2, [pc, #96]	; (8009ff4 <TIM_OC3_SetConfig+0x10c>)
 8009f92:	4293      	cmp	r3, r2
 8009f94:	d113      	bne.n	8009fbe <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009fa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	695b      	ldr	r3, [r3, #20]
 8009faa:	011b      	lsls	r3, r3, #4
 8009fac:	693a      	ldr	r2, [r7, #16]
 8009fae:	4313      	orrs	r3, r2
 8009fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	699b      	ldr	r3, [r3, #24]
 8009fb6:	011b      	lsls	r3, r3, #4
 8009fb8:	693a      	ldr	r2, [r7, #16]
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	693a      	ldr	r2, [r7, #16]
 8009fc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	68fa      	ldr	r2, [r7, #12]
 8009fc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	685a      	ldr	r2, [r3, #4]
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	697a      	ldr	r2, [r7, #20]
 8009fd6:	621a      	str	r2, [r3, #32]
}
 8009fd8:	bf00      	nop
 8009fda:	371c      	adds	r7, #28
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe2:	4770      	bx	lr
 8009fe4:	40012c00 	.word	0x40012c00
 8009fe8:	40013400 	.word	0x40013400
 8009fec:	40014000 	.word	0x40014000
 8009ff0:	40014400 	.word	0x40014400
 8009ff4:	40014800 	.word	0x40014800

08009ff8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b087      	sub	sp, #28
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6a1b      	ldr	r3, [r3, #32]
 800a006:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6a1b      	ldr	r3, [r3, #32]
 800a012:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	69db      	ldr	r3, [r3, #28]
 800a01e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a026:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a02a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a032:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	021b      	lsls	r3, r3, #8
 800a03a:	68fa      	ldr	r2, [r7, #12]
 800a03c:	4313      	orrs	r3, r2
 800a03e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a046:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	689b      	ldr	r3, [r3, #8]
 800a04c:	031b      	lsls	r3, r3, #12
 800a04e:	693a      	ldr	r2, [r7, #16]
 800a050:	4313      	orrs	r3, r2
 800a052:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	4a18      	ldr	r2, [pc, #96]	; (800a0b8 <TIM_OC4_SetConfig+0xc0>)
 800a058:	4293      	cmp	r3, r2
 800a05a:	d00f      	beq.n	800a07c <TIM_OC4_SetConfig+0x84>
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	4a17      	ldr	r2, [pc, #92]	; (800a0bc <TIM_OC4_SetConfig+0xc4>)
 800a060:	4293      	cmp	r3, r2
 800a062:	d00b      	beq.n	800a07c <TIM_OC4_SetConfig+0x84>
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	4a16      	ldr	r2, [pc, #88]	; (800a0c0 <TIM_OC4_SetConfig+0xc8>)
 800a068:	4293      	cmp	r3, r2
 800a06a:	d007      	beq.n	800a07c <TIM_OC4_SetConfig+0x84>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	4a15      	ldr	r2, [pc, #84]	; (800a0c4 <TIM_OC4_SetConfig+0xcc>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d003      	beq.n	800a07c <TIM_OC4_SetConfig+0x84>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	4a14      	ldr	r2, [pc, #80]	; (800a0c8 <TIM_OC4_SetConfig+0xd0>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d109      	bne.n	800a090 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a082:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	695b      	ldr	r3, [r3, #20]
 800a088:	019b      	lsls	r3, r3, #6
 800a08a:	697a      	ldr	r2, [r7, #20]
 800a08c:	4313      	orrs	r3, r2
 800a08e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	697a      	ldr	r2, [r7, #20]
 800a094:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	68fa      	ldr	r2, [r7, #12]
 800a09a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	685a      	ldr	r2, [r3, #4]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	693a      	ldr	r2, [r7, #16]
 800a0a8:	621a      	str	r2, [r3, #32]
}
 800a0aa:	bf00      	nop
 800a0ac:	371c      	adds	r7, #28
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b4:	4770      	bx	lr
 800a0b6:	bf00      	nop
 800a0b8:	40012c00 	.word	0x40012c00
 800a0bc:	40013400 	.word	0x40013400
 800a0c0:	40014000 	.word	0x40014000
 800a0c4:	40014400 	.word	0x40014400
 800a0c8:	40014800 	.word	0x40014800

0800a0cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b087      	sub	sp, #28
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
 800a0d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6a1b      	ldr	r3, [r3, #32]
 800a0da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6a1b      	ldr	r3, [r3, #32]
 800a0e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a0fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	68fa      	ldr	r2, [r7, #12]
 800a106:	4313      	orrs	r3, r2
 800a108:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a110:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	689b      	ldr	r3, [r3, #8]
 800a116:	041b      	lsls	r3, r3, #16
 800a118:	693a      	ldr	r2, [r7, #16]
 800a11a:	4313      	orrs	r3, r2
 800a11c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	4a17      	ldr	r2, [pc, #92]	; (800a180 <TIM_OC5_SetConfig+0xb4>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d00f      	beq.n	800a146 <TIM_OC5_SetConfig+0x7a>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	4a16      	ldr	r2, [pc, #88]	; (800a184 <TIM_OC5_SetConfig+0xb8>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d00b      	beq.n	800a146 <TIM_OC5_SetConfig+0x7a>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	4a15      	ldr	r2, [pc, #84]	; (800a188 <TIM_OC5_SetConfig+0xbc>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d007      	beq.n	800a146 <TIM_OC5_SetConfig+0x7a>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	4a14      	ldr	r2, [pc, #80]	; (800a18c <TIM_OC5_SetConfig+0xc0>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d003      	beq.n	800a146 <TIM_OC5_SetConfig+0x7a>
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	4a13      	ldr	r2, [pc, #76]	; (800a190 <TIM_OC5_SetConfig+0xc4>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d109      	bne.n	800a15a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a14c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	695b      	ldr	r3, [r3, #20]
 800a152:	021b      	lsls	r3, r3, #8
 800a154:	697a      	ldr	r2, [r7, #20]
 800a156:	4313      	orrs	r3, r2
 800a158:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	697a      	ldr	r2, [r7, #20]
 800a15e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	68fa      	ldr	r2, [r7, #12]
 800a164:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	685a      	ldr	r2, [r3, #4]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	693a      	ldr	r2, [r7, #16]
 800a172:	621a      	str	r2, [r3, #32]
}
 800a174:	bf00      	nop
 800a176:	371c      	adds	r7, #28
 800a178:	46bd      	mov	sp, r7
 800a17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17e:	4770      	bx	lr
 800a180:	40012c00 	.word	0x40012c00
 800a184:	40013400 	.word	0x40013400
 800a188:	40014000 	.word	0x40014000
 800a18c:	40014400 	.word	0x40014400
 800a190:	40014800 	.word	0x40014800

0800a194 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a194:	b480      	push	{r7}
 800a196:	b087      	sub	sp, #28
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
 800a19c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6a1b      	ldr	r3, [r3, #32]
 800a1a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6a1b      	ldr	r3, [r3, #32]
 800a1ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a1c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	021b      	lsls	r3, r3, #8
 800a1ce:	68fa      	ldr	r2, [r7, #12]
 800a1d0:	4313      	orrs	r3, r2
 800a1d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a1da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	689b      	ldr	r3, [r3, #8]
 800a1e0:	051b      	lsls	r3, r3, #20
 800a1e2:	693a      	ldr	r2, [r7, #16]
 800a1e4:	4313      	orrs	r3, r2
 800a1e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	4a18      	ldr	r2, [pc, #96]	; (800a24c <TIM_OC6_SetConfig+0xb8>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d00f      	beq.n	800a210 <TIM_OC6_SetConfig+0x7c>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	4a17      	ldr	r2, [pc, #92]	; (800a250 <TIM_OC6_SetConfig+0xbc>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d00b      	beq.n	800a210 <TIM_OC6_SetConfig+0x7c>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	4a16      	ldr	r2, [pc, #88]	; (800a254 <TIM_OC6_SetConfig+0xc0>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d007      	beq.n	800a210 <TIM_OC6_SetConfig+0x7c>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	4a15      	ldr	r2, [pc, #84]	; (800a258 <TIM_OC6_SetConfig+0xc4>)
 800a204:	4293      	cmp	r3, r2
 800a206:	d003      	beq.n	800a210 <TIM_OC6_SetConfig+0x7c>
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	4a14      	ldr	r2, [pc, #80]	; (800a25c <TIM_OC6_SetConfig+0xc8>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d109      	bne.n	800a224 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a216:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	695b      	ldr	r3, [r3, #20]
 800a21c:	029b      	lsls	r3, r3, #10
 800a21e:	697a      	ldr	r2, [r7, #20]
 800a220:	4313      	orrs	r3, r2
 800a222:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	697a      	ldr	r2, [r7, #20]
 800a228:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	68fa      	ldr	r2, [r7, #12]
 800a22e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	685a      	ldr	r2, [r3, #4]
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	693a      	ldr	r2, [r7, #16]
 800a23c:	621a      	str	r2, [r3, #32]
}
 800a23e:	bf00      	nop
 800a240:	371c      	adds	r7, #28
 800a242:	46bd      	mov	sp, r7
 800a244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a248:	4770      	bx	lr
 800a24a:	bf00      	nop
 800a24c:	40012c00 	.word	0x40012c00
 800a250:	40013400 	.word	0x40013400
 800a254:	40014000 	.word	0x40014000
 800a258:	40014400 	.word	0x40014400
 800a25c:	40014800 	.word	0x40014800

0800a260 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a260:	b480      	push	{r7}
 800a262:	b087      	sub	sp, #28
 800a264:	af00      	add	r7, sp, #0
 800a266:	60f8      	str	r0, [r7, #12]
 800a268:	60b9      	str	r1, [r7, #8]
 800a26a:	607a      	str	r2, [r7, #4]
 800a26c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	6a1b      	ldr	r3, [r3, #32]
 800a272:	f023 0201 	bic.w	r2, r3, #1
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	699b      	ldr	r3, [r3, #24]
 800a27e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	6a1b      	ldr	r3, [r3, #32]
 800a284:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	4a24      	ldr	r2, [pc, #144]	; (800a31c <TIM_TI1_SetConfig+0xbc>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d013      	beq.n	800a2b6 <TIM_TI1_SetConfig+0x56>
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a294:	d00f      	beq.n	800a2b6 <TIM_TI1_SetConfig+0x56>
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	4a21      	ldr	r2, [pc, #132]	; (800a320 <TIM_TI1_SetConfig+0xc0>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d00b      	beq.n	800a2b6 <TIM_TI1_SetConfig+0x56>
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	4a20      	ldr	r2, [pc, #128]	; (800a324 <TIM_TI1_SetConfig+0xc4>)
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d007      	beq.n	800a2b6 <TIM_TI1_SetConfig+0x56>
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	4a1f      	ldr	r2, [pc, #124]	; (800a328 <TIM_TI1_SetConfig+0xc8>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d003      	beq.n	800a2b6 <TIM_TI1_SetConfig+0x56>
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	4a1e      	ldr	r2, [pc, #120]	; (800a32c <TIM_TI1_SetConfig+0xcc>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d101      	bne.n	800a2ba <TIM_TI1_SetConfig+0x5a>
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	e000      	b.n	800a2bc <TIM_TI1_SetConfig+0x5c>
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d008      	beq.n	800a2d2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	f023 0303 	bic.w	r3, r3, #3
 800a2c6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a2c8:	697a      	ldr	r2, [r7, #20]
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	4313      	orrs	r3, r2
 800a2ce:	617b      	str	r3, [r7, #20]
 800a2d0:	e003      	b.n	800a2da <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	f043 0301 	orr.w	r3, r3, #1
 800a2d8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a2e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	011b      	lsls	r3, r3, #4
 800a2e6:	b2db      	uxtb	r3, r3
 800a2e8:	697a      	ldr	r2, [r7, #20]
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	f023 030a 	bic.w	r3, r3, #10
 800a2f4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	f003 030a 	and.w	r3, r3, #10
 800a2fc:	693a      	ldr	r2, [r7, #16]
 800a2fe:	4313      	orrs	r3, r2
 800a300:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	697a      	ldr	r2, [r7, #20]
 800a306:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	693a      	ldr	r2, [r7, #16]
 800a30c:	621a      	str	r2, [r3, #32]
}
 800a30e:	bf00      	nop
 800a310:	371c      	adds	r7, #28
 800a312:	46bd      	mov	sp, r7
 800a314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a318:	4770      	bx	lr
 800a31a:	bf00      	nop
 800a31c:	40012c00 	.word	0x40012c00
 800a320:	40000400 	.word	0x40000400
 800a324:	40000800 	.word	0x40000800
 800a328:	40013400 	.word	0x40013400
 800a32c:	40014000 	.word	0x40014000

0800a330 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a330:	b480      	push	{r7}
 800a332:	b087      	sub	sp, #28
 800a334:	af00      	add	r7, sp, #0
 800a336:	60f8      	str	r0, [r7, #12]
 800a338:	60b9      	str	r1, [r7, #8]
 800a33a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	6a1b      	ldr	r3, [r3, #32]
 800a340:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	6a1b      	ldr	r3, [r3, #32]
 800a346:	f023 0201 	bic.w	r2, r3, #1
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	699b      	ldr	r3, [r3, #24]
 800a352:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a35a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	011b      	lsls	r3, r3, #4
 800a360:	693a      	ldr	r2, [r7, #16]
 800a362:	4313      	orrs	r3, r2
 800a364:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	f023 030a 	bic.w	r3, r3, #10
 800a36c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a36e:	697a      	ldr	r2, [r7, #20]
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	4313      	orrs	r3, r2
 800a374:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	693a      	ldr	r2, [r7, #16]
 800a37a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	697a      	ldr	r2, [r7, #20]
 800a380:	621a      	str	r2, [r3, #32]
}
 800a382:	bf00      	nop
 800a384:	371c      	adds	r7, #28
 800a386:	46bd      	mov	sp, r7
 800a388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38c:	4770      	bx	lr

0800a38e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a38e:	b480      	push	{r7}
 800a390:	b087      	sub	sp, #28
 800a392:	af00      	add	r7, sp, #0
 800a394:	60f8      	str	r0, [r7, #12]
 800a396:	60b9      	str	r1, [r7, #8]
 800a398:	607a      	str	r2, [r7, #4]
 800a39a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	6a1b      	ldr	r3, [r3, #32]
 800a3a0:	f023 0210 	bic.w	r2, r3, #16
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	699b      	ldr	r3, [r3, #24]
 800a3ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	6a1b      	ldr	r3, [r3, #32]
 800a3b2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	021b      	lsls	r3, r3, #8
 800a3c0:	697a      	ldr	r2, [r7, #20]
 800a3c2:	4313      	orrs	r3, r2
 800a3c4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a3cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	031b      	lsls	r3, r3, #12
 800a3d2:	b29b      	uxth	r3, r3
 800a3d4:	697a      	ldr	r2, [r7, #20]
 800a3d6:	4313      	orrs	r3, r2
 800a3d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a3e0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	011b      	lsls	r3, r3, #4
 800a3e6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a3ea:	693a      	ldr	r2, [r7, #16]
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	697a      	ldr	r2, [r7, #20]
 800a3f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	693a      	ldr	r2, [r7, #16]
 800a3fa:	621a      	str	r2, [r3, #32]
}
 800a3fc:	bf00      	nop
 800a3fe:	371c      	adds	r7, #28
 800a400:	46bd      	mov	sp, r7
 800a402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a406:	4770      	bx	lr

0800a408 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a408:	b480      	push	{r7}
 800a40a:	b087      	sub	sp, #28
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	60f8      	str	r0, [r7, #12]
 800a410:	60b9      	str	r1, [r7, #8]
 800a412:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	6a1b      	ldr	r3, [r3, #32]
 800a418:	f023 0210 	bic.w	r2, r3, #16
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	699b      	ldr	r3, [r3, #24]
 800a424:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	6a1b      	ldr	r3, [r3, #32]
 800a42a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a432:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	031b      	lsls	r3, r3, #12
 800a438:	697a      	ldr	r2, [r7, #20]
 800a43a:	4313      	orrs	r3, r2
 800a43c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a444:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	011b      	lsls	r3, r3, #4
 800a44a:	693a      	ldr	r2, [r7, #16]
 800a44c:	4313      	orrs	r3, r2
 800a44e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	697a      	ldr	r2, [r7, #20]
 800a454:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	693a      	ldr	r2, [r7, #16]
 800a45a:	621a      	str	r2, [r3, #32]
}
 800a45c:	bf00      	nop
 800a45e:	371c      	adds	r7, #28
 800a460:	46bd      	mov	sp, r7
 800a462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a466:	4770      	bx	lr

0800a468 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a468:	b480      	push	{r7}
 800a46a:	b087      	sub	sp, #28
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	60f8      	str	r0, [r7, #12]
 800a470:	60b9      	str	r1, [r7, #8]
 800a472:	607a      	str	r2, [r7, #4]
 800a474:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	6a1b      	ldr	r3, [r3, #32]
 800a47a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	69db      	ldr	r3, [r3, #28]
 800a486:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	6a1b      	ldr	r3, [r3, #32]
 800a48c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	f023 0303 	bic.w	r3, r3, #3
 800a494:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a496:	697a      	ldr	r2, [r7, #20]
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	4313      	orrs	r3, r2
 800a49c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a4a4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	011b      	lsls	r3, r3, #4
 800a4aa:	b2db      	uxtb	r3, r3
 800a4ac:	697a      	ldr	r2, [r7, #20]
 800a4ae:	4313      	orrs	r3, r2
 800a4b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a4b2:	693b      	ldr	r3, [r7, #16]
 800a4b4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a4b8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	021b      	lsls	r3, r3, #8
 800a4be:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800a4c2:	693a      	ldr	r2, [r7, #16]
 800a4c4:	4313      	orrs	r3, r2
 800a4c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	697a      	ldr	r2, [r7, #20]
 800a4cc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	693a      	ldr	r2, [r7, #16]
 800a4d2:	621a      	str	r2, [r3, #32]
}
 800a4d4:	bf00      	nop
 800a4d6:	371c      	adds	r7, #28
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr

0800a4e0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b087      	sub	sp, #28
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	60f8      	str	r0, [r7, #12]
 800a4e8:	60b9      	str	r1, [r7, #8]
 800a4ea:	607a      	str	r2, [r7, #4]
 800a4ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	6a1b      	ldr	r3, [r3, #32]
 800a4f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	69db      	ldr	r3, [r3, #28]
 800a4fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	6a1b      	ldr	r3, [r3, #32]
 800a504:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a50c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	021b      	lsls	r3, r3, #8
 800a512:	697a      	ldr	r2, [r7, #20]
 800a514:	4313      	orrs	r3, r2
 800a516:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a51e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	031b      	lsls	r3, r3, #12
 800a524:	b29b      	uxth	r3, r3
 800a526:	697a      	ldr	r2, [r7, #20]
 800a528:	4313      	orrs	r3, r2
 800a52a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a532:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	031b      	lsls	r3, r3, #12
 800a538:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800a53c:	693a      	ldr	r2, [r7, #16]
 800a53e:	4313      	orrs	r3, r2
 800a540:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	697a      	ldr	r2, [r7, #20]
 800a546:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	693a      	ldr	r2, [r7, #16]
 800a54c:	621a      	str	r2, [r3, #32]
}
 800a54e:	bf00      	nop
 800a550:	371c      	adds	r7, #28
 800a552:	46bd      	mov	sp, r7
 800a554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a558:	4770      	bx	lr

0800a55a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a55a:	b480      	push	{r7}
 800a55c:	b085      	sub	sp, #20
 800a55e:	af00      	add	r7, sp, #0
 800a560:	6078      	str	r0, [r7, #4]
 800a562:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	689b      	ldr	r3, [r3, #8]
 800a568:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a570:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a572:	683a      	ldr	r2, [r7, #0]
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	4313      	orrs	r3, r2
 800a578:	f043 0307 	orr.w	r3, r3, #7
 800a57c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	68fa      	ldr	r2, [r7, #12]
 800a582:	609a      	str	r2, [r3, #8]
}
 800a584:	bf00      	nop
 800a586:	3714      	adds	r7, #20
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr

0800a590 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a590:	b480      	push	{r7}
 800a592:	b087      	sub	sp, #28
 800a594:	af00      	add	r7, sp, #0
 800a596:	60f8      	str	r0, [r7, #12]
 800a598:	60b9      	str	r1, [r7, #8]
 800a59a:	607a      	str	r2, [r7, #4]
 800a59c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	689b      	ldr	r3, [r3, #8]
 800a5a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a5a4:	697b      	ldr	r3, [r7, #20]
 800a5a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a5aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	021a      	lsls	r2, r3, #8
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	431a      	orrs	r2, r3
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	4313      	orrs	r3, r2
 800a5b8:	697a      	ldr	r2, [r7, #20]
 800a5ba:	4313      	orrs	r3, r2
 800a5bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	697a      	ldr	r2, [r7, #20]
 800a5c2:	609a      	str	r2, [r3, #8]
}
 800a5c4:	bf00      	nop
 800a5c6:	371c      	adds	r7, #28
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ce:	4770      	bx	lr

0800a5d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b087      	sub	sp, #28
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	60f8      	str	r0, [r7, #12]
 800a5d8:	60b9      	str	r1, [r7, #8]
 800a5da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	f003 031f 	and.w	r3, r3, #31
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	fa02 f303 	lsl.w	r3, r2, r3
 800a5e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	6a1a      	ldr	r2, [r3, #32]
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	43db      	mvns	r3, r3
 800a5f2:	401a      	ands	r2, r3
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	6a1a      	ldr	r2, [r3, #32]
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	f003 031f 	and.w	r3, r3, #31
 800a602:	6879      	ldr	r1, [r7, #4]
 800a604:	fa01 f303 	lsl.w	r3, r1, r3
 800a608:	431a      	orrs	r2, r3
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	621a      	str	r2, [r3, #32]
}
 800a60e:	bf00      	nop
 800a610:	371c      	adds	r7, #28
 800a612:	46bd      	mov	sp, r7
 800a614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a618:	4770      	bx	lr
	...

0800a61c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b084      	sub	sp, #16
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d109      	bne.n	800a640 <HAL_TIMEx_PWMN_Start+0x24>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a632:	b2db      	uxtb	r3, r3
 800a634:	2b01      	cmp	r3, #1
 800a636:	bf14      	ite	ne
 800a638:	2301      	movne	r3, #1
 800a63a:	2300      	moveq	r3, #0
 800a63c:	b2db      	uxtb	r3, r3
 800a63e:	e022      	b.n	800a686 <HAL_TIMEx_PWMN_Start+0x6a>
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	2b04      	cmp	r3, #4
 800a644:	d109      	bne.n	800a65a <HAL_TIMEx_PWMN_Start+0x3e>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a64c:	b2db      	uxtb	r3, r3
 800a64e:	2b01      	cmp	r3, #1
 800a650:	bf14      	ite	ne
 800a652:	2301      	movne	r3, #1
 800a654:	2300      	moveq	r3, #0
 800a656:	b2db      	uxtb	r3, r3
 800a658:	e015      	b.n	800a686 <HAL_TIMEx_PWMN_Start+0x6a>
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	2b08      	cmp	r3, #8
 800a65e:	d109      	bne.n	800a674 <HAL_TIMEx_PWMN_Start+0x58>
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a666:	b2db      	uxtb	r3, r3
 800a668:	2b01      	cmp	r3, #1
 800a66a:	bf14      	ite	ne
 800a66c:	2301      	movne	r3, #1
 800a66e:	2300      	moveq	r3, #0
 800a670:	b2db      	uxtb	r3, r3
 800a672:	e008      	b.n	800a686 <HAL_TIMEx_PWMN_Start+0x6a>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800a67a:	b2db      	uxtb	r3, r3
 800a67c:	2b01      	cmp	r3, #1
 800a67e:	bf14      	ite	ne
 800a680:	2301      	movne	r3, #1
 800a682:	2300      	moveq	r3, #0
 800a684:	b2db      	uxtb	r3, r3
 800a686:	2b00      	cmp	r3, #0
 800a688:	d001      	beq.n	800a68e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800a68a:	2301      	movs	r3, #1
 800a68c:	e069      	b.n	800a762 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d104      	bne.n	800a69e <HAL_TIMEx_PWMN_Start+0x82>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2202      	movs	r2, #2
 800a698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a69c:	e013      	b.n	800a6c6 <HAL_TIMEx_PWMN_Start+0xaa>
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	2b04      	cmp	r3, #4
 800a6a2:	d104      	bne.n	800a6ae <HAL_TIMEx_PWMN_Start+0x92>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2202      	movs	r2, #2
 800a6a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a6ac:	e00b      	b.n	800a6c6 <HAL_TIMEx_PWMN_Start+0xaa>
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	2b08      	cmp	r3, #8
 800a6b2:	d104      	bne.n	800a6be <HAL_TIMEx_PWMN_Start+0xa2>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2202      	movs	r2, #2
 800a6b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a6bc:	e003      	b.n	800a6c6 <HAL_TIMEx_PWMN_Start+0xaa>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2202      	movs	r2, #2
 800a6c2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	2204      	movs	r2, #4
 800a6cc:	6839      	ldr	r1, [r7, #0]
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f000 f9d2 	bl	800aa78 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a6e2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	4a20      	ldr	r2, [pc, #128]	; (800a76c <HAL_TIMEx_PWMN_Start+0x150>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d018      	beq.n	800a720 <HAL_TIMEx_PWMN_Start+0x104>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6f6:	d013      	beq.n	800a720 <HAL_TIMEx_PWMN_Start+0x104>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	4a1c      	ldr	r2, [pc, #112]	; (800a770 <HAL_TIMEx_PWMN_Start+0x154>)
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d00e      	beq.n	800a720 <HAL_TIMEx_PWMN_Start+0x104>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	4a1b      	ldr	r2, [pc, #108]	; (800a774 <HAL_TIMEx_PWMN_Start+0x158>)
 800a708:	4293      	cmp	r3, r2
 800a70a:	d009      	beq.n	800a720 <HAL_TIMEx_PWMN_Start+0x104>
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4a19      	ldr	r2, [pc, #100]	; (800a778 <HAL_TIMEx_PWMN_Start+0x15c>)
 800a712:	4293      	cmp	r3, r2
 800a714:	d004      	beq.n	800a720 <HAL_TIMEx_PWMN_Start+0x104>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	4a18      	ldr	r2, [pc, #96]	; (800a77c <HAL_TIMEx_PWMN_Start+0x160>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d115      	bne.n	800a74c <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	689a      	ldr	r2, [r3, #8]
 800a726:	4b16      	ldr	r3, [pc, #88]	; (800a780 <HAL_TIMEx_PWMN_Start+0x164>)
 800a728:	4013      	ands	r3, r2
 800a72a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	2b06      	cmp	r3, #6
 800a730:	d015      	beq.n	800a75e <HAL_TIMEx_PWMN_Start+0x142>
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a738:	d011      	beq.n	800a75e <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	681a      	ldr	r2, [r3, #0]
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f042 0201 	orr.w	r2, r2, #1
 800a748:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a74a:	e008      	b.n	800a75e <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	681a      	ldr	r2, [r3, #0]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f042 0201 	orr.w	r2, r2, #1
 800a75a:	601a      	str	r2, [r3, #0]
 800a75c:	e000      	b.n	800a760 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a75e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a760:	2300      	movs	r3, #0
}
 800a762:	4618      	mov	r0, r3
 800a764:	3710      	adds	r7, #16
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}
 800a76a:	bf00      	nop
 800a76c:	40012c00 	.word	0x40012c00
 800a770:	40000400 	.word	0x40000400
 800a774:	40000800 	.word	0x40000800
 800a778:	40013400 	.word	0x40013400
 800a77c:	40014000 	.word	0x40014000
 800a780:	00010007 	.word	0x00010007

0800a784 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b082      	sub	sp, #8
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	2200      	movs	r2, #0
 800a794:	6839      	ldr	r1, [r7, #0]
 800a796:	4618      	mov	r0, r3
 800a798:	f000 f96e 	bl	800aa78 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	6a1a      	ldr	r2, [r3, #32]
 800a7a2:	f241 1311 	movw	r3, #4369	; 0x1111
 800a7a6:	4013      	ands	r3, r2
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d10f      	bne.n	800a7cc <HAL_TIMEx_PWMN_Stop+0x48>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	6a1a      	ldr	r2, [r3, #32]
 800a7b2:	f240 4344 	movw	r3, #1092	; 0x444
 800a7b6:	4013      	ands	r3, r2
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d107      	bne.n	800a7cc <HAL_TIMEx_PWMN_Stop+0x48>
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a7ca:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	6a1a      	ldr	r2, [r3, #32]
 800a7d2:	f241 1311 	movw	r3, #4369	; 0x1111
 800a7d6:	4013      	ands	r3, r2
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d10f      	bne.n	800a7fc <HAL_TIMEx_PWMN_Stop+0x78>
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	6a1a      	ldr	r2, [r3, #32]
 800a7e2:	f240 4344 	movw	r3, #1092	; 0x444
 800a7e6:	4013      	ands	r3, r2
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d107      	bne.n	800a7fc <HAL_TIMEx_PWMN_Stop+0x78>
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	681a      	ldr	r2, [r3, #0]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f022 0201 	bic.w	r2, r2, #1
 800a7fa:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d104      	bne.n	800a80c <HAL_TIMEx_PWMN_Stop+0x88>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2201      	movs	r2, #1
 800a806:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a80a:	e013      	b.n	800a834 <HAL_TIMEx_PWMN_Stop+0xb0>
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	2b04      	cmp	r3, #4
 800a810:	d104      	bne.n	800a81c <HAL_TIMEx_PWMN_Stop+0x98>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2201      	movs	r2, #1
 800a816:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a81a:	e00b      	b.n	800a834 <HAL_TIMEx_PWMN_Stop+0xb0>
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	2b08      	cmp	r3, #8
 800a820:	d104      	bne.n	800a82c <HAL_TIMEx_PWMN_Stop+0xa8>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2201      	movs	r2, #1
 800a826:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a82a:	e003      	b.n	800a834 <HAL_TIMEx_PWMN_Stop+0xb0>
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2201      	movs	r2, #1
 800a830:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 800a834:	2300      	movs	r3, #0
}
 800a836:	4618      	mov	r0, r3
 800a838:	3708      	adds	r7, #8
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}
	...

0800a840 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a840:	b480      	push	{r7}
 800a842:	b085      	sub	sp, #20
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
 800a848:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a850:	2b01      	cmp	r3, #1
 800a852:	d101      	bne.n	800a858 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a854:	2302      	movs	r3, #2
 800a856:	e063      	b.n	800a920 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2201      	movs	r2, #1
 800a85c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2202      	movs	r2, #2
 800a864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	685b      	ldr	r3, [r3, #4]
 800a86e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	689b      	ldr	r3, [r3, #8]
 800a876:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	4a2b      	ldr	r2, [pc, #172]	; (800a92c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a87e:	4293      	cmp	r3, r2
 800a880:	d004      	beq.n	800a88c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	4a2a      	ldr	r2, [pc, #168]	; (800a930 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a888:	4293      	cmp	r3, r2
 800a88a:	d108      	bne.n	800a89e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a892:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	685b      	ldr	r3, [r3, #4]
 800a898:	68fa      	ldr	r2, [r7, #12]
 800a89a:	4313      	orrs	r3, r2
 800a89c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	68fa      	ldr	r2, [r7, #12]
 800a8ac:	4313      	orrs	r3, r2
 800a8ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	68fa      	ldr	r2, [r7, #12]
 800a8b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	4a1b      	ldr	r2, [pc, #108]	; (800a92c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	d018      	beq.n	800a8f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8ca:	d013      	beq.n	800a8f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	4a18      	ldr	r2, [pc, #96]	; (800a934 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d00e      	beq.n	800a8f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	4a17      	ldr	r2, [pc, #92]	; (800a938 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	d009      	beq.n	800a8f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	4a12      	ldr	r2, [pc, #72]	; (800a930 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	d004      	beq.n	800a8f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	4a13      	ldr	r2, [pc, #76]	; (800a93c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d10c      	bne.n	800a90e <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a8fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	689b      	ldr	r3, [r3, #8]
 800a900:	68ba      	ldr	r2, [r7, #8]
 800a902:	4313      	orrs	r3, r2
 800a904:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	68ba      	ldr	r2, [r7, #8]
 800a90c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2201      	movs	r2, #1
 800a912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2200      	movs	r2, #0
 800a91a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a91e:	2300      	movs	r3, #0
}
 800a920:	4618      	mov	r0, r3
 800a922:	3714      	adds	r7, #20
 800a924:	46bd      	mov	sp, r7
 800a926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92a:	4770      	bx	lr
 800a92c:	40012c00 	.word	0x40012c00
 800a930:	40013400 	.word	0x40013400
 800a934:	40000400 	.word	0x40000400
 800a938:	40000800 	.word	0x40000800
 800a93c:	40014000 	.word	0x40014000

0800a940 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a940:	b480      	push	{r7}
 800a942:	b085      	sub	sp, #20
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
 800a948:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a94a:	2300      	movs	r3, #0
 800a94c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a954:	2b01      	cmp	r3, #1
 800a956:	d101      	bne.n	800a95c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a958:	2302      	movs	r3, #2
 800a95a:	e065      	b.n	800aa28 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2201      	movs	r2, #1
 800a960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	68db      	ldr	r3, [r3, #12]
 800a96e:	4313      	orrs	r3, r2
 800a970:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	689b      	ldr	r3, [r3, #8]
 800a97c:	4313      	orrs	r3, r2
 800a97e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	685b      	ldr	r3, [r3, #4]
 800a98a:	4313      	orrs	r3, r2
 800a98c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	4313      	orrs	r3, r2
 800a99a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	691b      	ldr	r3, [r3, #16]
 800a9a6:	4313      	orrs	r3, r2
 800a9a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	695b      	ldr	r3, [r3, #20]
 800a9b4:	4313      	orrs	r3, r2
 800a9b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9c2:	4313      	orrs	r3, r2
 800a9c4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	699b      	ldr	r3, [r3, #24]
 800a9d0:	041b      	lsls	r3, r3, #16
 800a9d2:	4313      	orrs	r3, r2
 800a9d4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	4a16      	ldr	r2, [pc, #88]	; (800aa34 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	d004      	beq.n	800a9ea <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	4a14      	ldr	r2, [pc, #80]	; (800aa38 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d115      	bne.n	800aa16 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f4:	051b      	lsls	r3, r3, #20
 800a9f6:	4313      	orrs	r3, r2
 800a9f8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	69db      	ldr	r3, [r3, #28]
 800aa04:	4313      	orrs	r3, r2
 800aa06:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	6a1b      	ldr	r3, [r3, #32]
 800aa12:	4313      	orrs	r3, r2
 800aa14:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	68fa      	ldr	r2, [r7, #12]
 800aa1c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2200      	movs	r2, #0
 800aa22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aa26:	2300      	movs	r3, #0
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3714      	adds	r7, #20
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa32:	4770      	bx	lr
 800aa34:	40012c00 	.word	0x40012c00
 800aa38:	40013400 	.word	0x40013400

0800aa3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b083      	sub	sp, #12
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aa44:	bf00      	nop
 800aa46:	370c      	adds	r7, #12
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4e:	4770      	bx	lr

0800aa50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b083      	sub	sp, #12
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aa58:	bf00      	nop
 800aa5a:	370c      	adds	r7, #12
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa62:	4770      	bx	lr

0800aa64 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b083      	sub	sp, #12
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800aa6c:	bf00      	nop
 800aa6e:	370c      	adds	r7, #12
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr

0800aa78 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b087      	sub	sp, #28
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	60f8      	str	r0, [r7, #12]
 800aa80:	60b9      	str	r1, [r7, #8]
 800aa82:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	f003 031f 	and.w	r3, r3, #31
 800aa8a:	2204      	movs	r2, #4
 800aa8c:	fa02 f303 	lsl.w	r3, r2, r3
 800aa90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	6a1a      	ldr	r2, [r3, #32]
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	43db      	mvns	r3, r3
 800aa9a:	401a      	ands	r2, r3
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	6a1a      	ldr	r2, [r3, #32]
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	f003 031f 	and.w	r3, r3, #31
 800aaaa:	6879      	ldr	r1, [r7, #4]
 800aaac:	fa01 f303 	lsl.w	r3, r1, r3
 800aab0:	431a      	orrs	r2, r3
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	621a      	str	r2, [r3, #32]
}
 800aab6:	bf00      	nop
 800aab8:	371c      	adds	r7, #28
 800aaba:	46bd      	mov	sp, r7
 800aabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac0:	4770      	bx	lr

0800aac2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aac2:	b580      	push	{r7, lr}
 800aac4:	b082      	sub	sp, #8
 800aac6:	af00      	add	r7, sp, #0
 800aac8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d101      	bne.n	800aad4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aad0:	2301      	movs	r3, #1
 800aad2:	e040      	b.n	800ab56 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d106      	bne.n	800aaea <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2200      	movs	r2, #0
 800aae0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f7f7 ffb7 	bl	8002a58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2224      	movs	r2, #36	; 0x24
 800aaee:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	681a      	ldr	r2, [r3, #0]
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f022 0201 	bic.w	r2, r2, #1
 800aafe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f000 fbb7 	bl	800b274 <UART_SetConfig>
 800ab06:	4603      	mov	r3, r0
 800ab08:	2b01      	cmp	r3, #1
 800ab0a:	d101      	bne.n	800ab10 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	e022      	b.n	800ab56 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d002      	beq.n	800ab1e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f000 fd7f 	bl	800b61c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	685a      	ldr	r2, [r3, #4]
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ab2c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	689a      	ldr	r2, [r3, #8]
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ab3c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	681a      	ldr	r2, [r3, #0]
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f042 0201 	orr.w	r2, r2, #1
 800ab4c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f000 fe06 	bl	800b760 <UART_CheckIdleState>
 800ab54:	4603      	mov	r3, r0
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3708      	adds	r7, #8
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}
	...

0800ab60 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b08a      	sub	sp, #40	; 0x28
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	60f8      	str	r0, [r7, #12]
 800ab68:	60b9      	str	r1, [r7, #8]
 800ab6a:	4613      	mov	r3, r2
 800ab6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab72:	2b20      	cmp	r3, #32
 800ab74:	d165      	bne.n	800ac42 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d002      	beq.n	800ab82 <HAL_UART_Transmit_DMA+0x22>
 800ab7c:	88fb      	ldrh	r3, [r7, #6]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d101      	bne.n	800ab86 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800ab82:	2301      	movs	r3, #1
 800ab84:	e05e      	b.n	800ac44 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	68ba      	ldr	r2, [r7, #8]
 800ab8a:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	88fa      	ldrh	r2, [r7, #6]
 800ab90:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	88fa      	ldrh	r2, [r7, #6]
 800ab98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2221      	movs	r2, #33	; 0x21
 800aba8:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d027      	beq.n	800ac02 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abb6:	4a25      	ldr	r2, [pc, #148]	; (800ac4c <HAL_UART_Transmit_DMA+0xec>)
 800abb8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abbe:	4a24      	ldr	r2, [pc, #144]	; (800ac50 <HAL_UART_Transmit_DMA+0xf0>)
 800abc0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abc6:	4a23      	ldr	r2, [pc, #140]	; (800ac54 <HAL_UART_Transmit_DMA+0xf4>)
 800abc8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abce:	2200      	movs	r2, #0
 800abd0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abda:	4619      	mov	r1, r3
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	3328      	adds	r3, #40	; 0x28
 800abe2:	461a      	mov	r2, r3
 800abe4:	88fb      	ldrh	r3, [r7, #6]
 800abe6:	f7fa fa33 	bl	8005050 <HAL_DMA_Start_IT>
 800abea:	4603      	mov	r3, r0
 800abec:	2b00      	cmp	r3, #0
 800abee:	d008      	beq.n	800ac02 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	2210      	movs	r2, #16
 800abf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	2220      	movs	r2, #32
 800abfc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 800abfe:	2301      	movs	r3, #1
 800ac00:	e020      	b.n	800ac44 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	2240      	movs	r2, #64	; 0x40
 800ac08:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	3308      	adds	r3, #8
 800ac10:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac12:	697b      	ldr	r3, [r7, #20]
 800ac14:	e853 3f00 	ldrex	r3, [r3]
 800ac18:	613b      	str	r3, [r7, #16]
   return(result);
 800ac1a:	693b      	ldr	r3, [r7, #16]
 800ac1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac20:	627b      	str	r3, [r7, #36]	; 0x24
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	3308      	adds	r3, #8
 800ac28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac2a:	623a      	str	r2, [r7, #32]
 800ac2c:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac2e:	69f9      	ldr	r1, [r7, #28]
 800ac30:	6a3a      	ldr	r2, [r7, #32]
 800ac32:	e841 2300 	strex	r3, r2, [r1]
 800ac36:	61bb      	str	r3, [r7, #24]
   return(result);
 800ac38:	69bb      	ldr	r3, [r7, #24]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d1e5      	bne.n	800ac0a <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	e000      	b.n	800ac44 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800ac42:	2302      	movs	r3, #2
  }
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	3728      	adds	r7, #40	; 0x28
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}
 800ac4c:	0800bbd5 	.word	0x0800bbd5
 800ac50:	0800bc69 	.word	0x0800bc69
 800ac54:	0800bde9 	.word	0x0800bde9

0800ac58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b0ba      	sub	sp, #232	; 0xe8
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	69db      	ldr	r3, [r3, #28]
 800ac66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	689b      	ldr	r3, [r3, #8]
 800ac7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ac7e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ac82:	f640 030f 	movw	r3, #2063	; 0x80f
 800ac86:	4013      	ands	r3, r2
 800ac88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ac8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d115      	bne.n	800acc0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800ac94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac98:	f003 0320 	and.w	r3, r3, #32
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d00f      	beq.n	800acc0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800aca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aca4:	f003 0320 	and.w	r3, r3, #32
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d009      	beq.n	800acc0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	f000 82ab 	beq.w	800b20c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	4798      	blx	r3
      }
      return;
 800acbe:	e2a5      	b.n	800b20c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800acc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	f000 8117 	beq.w	800aef8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800acca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800acce:	f003 0301 	and.w	r3, r3, #1
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d106      	bne.n	800ace4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800acd6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800acda:	4b85      	ldr	r3, [pc, #532]	; (800aef0 <HAL_UART_IRQHandler+0x298>)
 800acdc:	4013      	ands	r3, r2
 800acde:	2b00      	cmp	r3, #0
 800ace0:	f000 810a 	beq.w	800aef8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ace4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ace8:	f003 0301 	and.w	r3, r3, #1
 800acec:	2b00      	cmp	r3, #0
 800acee:	d011      	beq.n	800ad14 <HAL_UART_IRQHandler+0xbc>
 800acf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800acf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d00b      	beq.n	800ad14 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	2201      	movs	r2, #1
 800ad02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ad0a:	f043 0201 	orr.w	r2, r3, #1
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ad14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad18:	f003 0302 	and.w	r3, r3, #2
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d011      	beq.n	800ad44 <HAL_UART_IRQHandler+0xec>
 800ad20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad24:	f003 0301 	and.w	r3, r3, #1
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d00b      	beq.n	800ad44 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	2202      	movs	r2, #2
 800ad32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ad3a:	f043 0204 	orr.w	r2, r3, #4
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ad44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad48:	f003 0304 	and.w	r3, r3, #4
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d011      	beq.n	800ad74 <HAL_UART_IRQHandler+0x11c>
 800ad50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad54:	f003 0301 	and.w	r3, r3, #1
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d00b      	beq.n	800ad74 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	2204      	movs	r2, #4
 800ad62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ad6a:	f043 0202 	orr.w	r2, r3, #2
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ad74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad78:	f003 0308 	and.w	r3, r3, #8
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d017      	beq.n	800adb0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ad80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad84:	f003 0320 	and.w	r3, r3, #32
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d105      	bne.n	800ad98 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800ad8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad90:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d00b      	beq.n	800adb0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	2208      	movs	r2, #8
 800ad9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ada6:	f043 0208 	orr.w	r2, r3, #8
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800adb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d012      	beq.n	800ade2 <HAL_UART_IRQHandler+0x18a>
 800adbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800adc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d00c      	beq.n	800ade2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800add0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800add8:	f043 0220 	orr.w	r2, r3, #32
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ade8:	2b00      	cmp	r3, #0
 800adea:	f000 8211 	beq.w	800b210 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800adee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adf2:	f003 0320 	and.w	r3, r3, #32
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d00d      	beq.n	800ae16 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800adfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800adfe:	f003 0320 	and.w	r3, r3, #32
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d007      	beq.n	800ae16 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d003      	beq.n	800ae16 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ae1c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	689b      	ldr	r3, [r3, #8]
 800ae26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae2a:	2b40      	cmp	r3, #64	; 0x40
 800ae2c:	d005      	beq.n	800ae3a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ae2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ae32:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d04f      	beq.n	800aeda <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f000 fe66 	bl	800bb0c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	689b      	ldr	r3, [r3, #8]
 800ae46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae4a:	2b40      	cmp	r3, #64	; 0x40
 800ae4c:	d141      	bne.n	800aed2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	3308      	adds	r3, #8
 800ae54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ae5c:	e853 3f00 	ldrex	r3, [r3]
 800ae60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ae64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ae68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	3308      	adds	r3, #8
 800ae76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ae7a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ae7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ae86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ae8a:	e841 2300 	strex	r3, r2, [r1]
 800ae8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ae92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d1d9      	bne.n	800ae4e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d013      	beq.n	800aeca <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aea6:	4a13      	ldr	r2, [pc, #76]	; (800aef4 <HAL_UART_IRQHandler+0x29c>)
 800aea8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f7fa f966 	bl	8005180 <HAL_DMA_Abort_IT>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d017      	beq.n	800aeea <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aec0:	687a      	ldr	r2, [r7, #4]
 800aec2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800aec4:	4610      	mov	r0, r2
 800aec6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aec8:	e00f      	b.n	800aeea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f000 f9c8 	bl	800b260 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aed0:	e00b      	b.n	800aeea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f000 f9c4 	bl	800b260 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aed8:	e007      	b.n	800aeea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f000 f9c0 	bl	800b260 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2200      	movs	r2, #0
 800aee4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800aee8:	e192      	b.n	800b210 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aeea:	bf00      	nop
    return;
 800aeec:	e190      	b.n	800b210 <HAL_UART_IRQHandler+0x5b8>
 800aeee:	bf00      	nop
 800aef0:	04000120 	.word	0x04000120
 800aef4:	0800be67 	.word	0x0800be67

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aefc:	2b01      	cmp	r3, #1
 800aefe:	f040 814b 	bne.w	800b198 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800af02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af06:	f003 0310 	and.w	r3, r3, #16
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	f000 8144 	beq.w	800b198 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800af10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af14:	f003 0310 	and.w	r3, r3, #16
 800af18:	2b00      	cmp	r3, #0
 800af1a:	f000 813d 	beq.w	800b198 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	2210      	movs	r2, #16
 800af24:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	689b      	ldr	r3, [r3, #8]
 800af2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af30:	2b40      	cmp	r3, #64	; 0x40
 800af32:	f040 80b5 	bne.w	800b0a0 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	685b      	ldr	r3, [r3, #4]
 800af3e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800af42:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800af46:	2b00      	cmp	r3, #0
 800af48:	f000 8164 	beq.w	800b214 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800af52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800af56:	429a      	cmp	r2, r3
 800af58:	f080 815c 	bcs.w	800b214 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800af62:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af6a:	699b      	ldr	r3, [r3, #24]
 800af6c:	2b20      	cmp	r3, #32
 800af6e:	f000 8086 	beq.w	800b07e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800af7e:	e853 3f00 	ldrex	r3, [r3]
 800af82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800af86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800af8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af8e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	461a      	mov	r2, r3
 800af98:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800af9c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800afa0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afa4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800afa8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800afac:	e841 2300 	strex	r3, r2, [r1]
 800afb0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800afb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d1da      	bne.n	800af72 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	3308      	adds	r3, #8
 800afc2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800afc6:	e853 3f00 	ldrex	r3, [r3]
 800afca:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800afcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800afce:	f023 0301 	bic.w	r3, r3, #1
 800afd2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	3308      	adds	r3, #8
 800afdc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800afe0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800afe4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afe6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800afe8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800afec:	e841 2300 	strex	r3, r2, [r1]
 800aff0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800aff2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d1e1      	bne.n	800afbc <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	3308      	adds	r3, #8
 800affe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b000:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b002:	e853 3f00 	ldrex	r3, [r3]
 800b006:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b008:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b00a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b00e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	3308      	adds	r3, #8
 800b018:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b01c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b01e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b020:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b022:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b024:	e841 2300 	strex	r3, r2, [r1]
 800b028:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b02a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d1e3      	bne.n	800aff8 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2220      	movs	r2, #32
 800b034:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2200      	movs	r2, #0
 800b03c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b046:	e853 3f00 	ldrex	r3, [r3]
 800b04a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b04c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b04e:	f023 0310 	bic.w	r3, r3, #16
 800b052:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	461a      	mov	r2, r3
 800b05c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b060:	65bb      	str	r3, [r7, #88]	; 0x58
 800b062:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b064:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b066:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b068:	e841 2300 	strex	r3, r2, [r1]
 800b06c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b06e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b070:	2b00      	cmp	r3, #0
 800b072:	d1e4      	bne.n	800b03e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b078:	4618      	mov	r0, r3
 800b07a:	f7fa f848 	bl	800510e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2202      	movs	r2, #2
 800b082:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b090:	b29b      	uxth	r3, r3
 800b092:	1ad3      	subs	r3, r2, r3
 800b094:	b29b      	uxth	r3, r3
 800b096:	4619      	mov	r1, r3
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f7f5 fb95 	bl	80007c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b09e:	e0b9      	b.n	800b214 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b0ac:	b29b      	uxth	r3, r3
 800b0ae:	1ad3      	subs	r3, r2, r3
 800b0b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b0ba:	b29b      	uxth	r3, r3
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	f000 80ab 	beq.w	800b218 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800b0c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	f000 80a6 	beq.w	800b218 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0d4:	e853 3f00 	ldrex	r3, [r3]
 800b0d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b0da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b0e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	461a      	mov	r2, r3
 800b0ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b0ee:	647b      	str	r3, [r7, #68]	; 0x44
 800b0f0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b0f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b0f6:	e841 2300 	strex	r3, r2, [r1]
 800b0fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b0fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d1e4      	bne.n	800b0cc <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	3308      	adds	r3, #8
 800b108:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b10c:	e853 3f00 	ldrex	r3, [r3]
 800b110:	623b      	str	r3, [r7, #32]
   return(result);
 800b112:	6a3b      	ldr	r3, [r7, #32]
 800b114:	f023 0301 	bic.w	r3, r3, #1
 800b118:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	3308      	adds	r3, #8
 800b122:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b126:	633a      	str	r2, [r7, #48]	; 0x30
 800b128:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b12a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b12c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b12e:	e841 2300 	strex	r3, r2, [r1]
 800b132:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b136:	2b00      	cmp	r3, #0
 800b138:	d1e3      	bne.n	800b102 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2220      	movs	r2, #32
 800b13e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2200      	movs	r2, #0
 800b146:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2200      	movs	r2, #0
 800b14c:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	e853 3f00 	ldrex	r3, [r3]
 800b15a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	f023 0310 	bic.w	r3, r3, #16
 800b162:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	461a      	mov	r2, r3
 800b16c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b170:	61fb      	str	r3, [r7, #28]
 800b172:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b174:	69b9      	ldr	r1, [r7, #24]
 800b176:	69fa      	ldr	r2, [r7, #28]
 800b178:	e841 2300 	strex	r3, r2, [r1]
 800b17c:	617b      	str	r3, [r7, #20]
   return(result);
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d1e4      	bne.n	800b14e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2202      	movs	r2, #2
 800b188:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b18a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b18e:	4619      	mov	r1, r3
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f7f5 fb19 	bl	80007c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b196:	e03f      	b.n	800b218 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b19c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d00e      	beq.n	800b1c2 <HAL_UART_IRQHandler+0x56a>
 800b1a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b1a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d008      	beq.n	800b1c2 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b1b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f000 fe93 	bl	800bee6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b1c0:	e02d      	b.n	800b21e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b1c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d00e      	beq.n	800b1ec <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b1ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d008      	beq.n	800b1ec <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d01c      	beq.n	800b21c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	4798      	blx	r3
    }
    return;
 800b1ea:	e017      	b.n	800b21c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b1ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d012      	beq.n	800b21e <HAL_UART_IRQHandler+0x5c6>
 800b1f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b200:	2b00      	cmp	r3, #0
 800b202:	d00c      	beq.n	800b21e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f000 fe44 	bl	800be92 <UART_EndTransmit_IT>
    return;
 800b20a:	e008      	b.n	800b21e <HAL_UART_IRQHandler+0x5c6>
      return;
 800b20c:	bf00      	nop
 800b20e:	e006      	b.n	800b21e <HAL_UART_IRQHandler+0x5c6>
    return;
 800b210:	bf00      	nop
 800b212:	e004      	b.n	800b21e <HAL_UART_IRQHandler+0x5c6>
      return;
 800b214:	bf00      	nop
 800b216:	e002      	b.n	800b21e <HAL_UART_IRQHandler+0x5c6>
      return;
 800b218:	bf00      	nop
 800b21a:	e000      	b.n	800b21e <HAL_UART_IRQHandler+0x5c6>
    return;
 800b21c:	bf00      	nop
  }

}
 800b21e:	37e8      	adds	r7, #232	; 0xe8
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}

0800b224 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b224:	b480      	push	{r7}
 800b226:	b083      	sub	sp, #12
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b22c:	bf00      	nop
 800b22e:	370c      	adds	r7, #12
 800b230:	46bd      	mov	sp, r7
 800b232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b236:	4770      	bx	lr

0800b238 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b238:	b480      	push	{r7}
 800b23a:	b083      	sub	sp, #12
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800b240:	bf00      	nop
 800b242:	370c      	adds	r7, #12
 800b244:	46bd      	mov	sp, r7
 800b246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24a:	4770      	bx	lr

0800b24c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b24c:	b480      	push	{r7}
 800b24e:	b083      	sub	sp, #12
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b254:	bf00      	nop
 800b256:	370c      	adds	r7, #12
 800b258:	46bd      	mov	sp, r7
 800b25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25e:	4770      	bx	lr

0800b260 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b260:	b480      	push	{r7}
 800b262:	b083      	sub	sp, #12
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b268:	bf00      	nop
 800b26a:	370c      	adds	r7, #12
 800b26c:	46bd      	mov	sp, r7
 800b26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b272:	4770      	bx	lr

0800b274 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b088      	sub	sp, #32
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b27c:	2300      	movs	r3, #0
 800b27e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	689a      	ldr	r2, [r3, #8]
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	691b      	ldr	r3, [r3, #16]
 800b288:	431a      	orrs	r2, r3
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	695b      	ldr	r3, [r3, #20]
 800b28e:	431a      	orrs	r2, r3
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	69db      	ldr	r3, [r3, #28]
 800b294:	4313      	orrs	r3, r2
 800b296:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800b2a2:	f023 030c 	bic.w	r3, r3, #12
 800b2a6:	687a      	ldr	r2, [r7, #4]
 800b2a8:	6812      	ldr	r2, [r2, #0]
 800b2aa:	6979      	ldr	r1, [r7, #20]
 800b2ac:	430b      	orrs	r3, r1
 800b2ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	685b      	ldr	r3, [r3, #4]
 800b2b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	68da      	ldr	r2, [r3, #12]
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	430a      	orrs	r2, r1
 800b2c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	699b      	ldr	r3, [r3, #24]
 800b2ca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6a1b      	ldr	r3, [r3, #32]
 800b2d0:	697a      	ldr	r2, [r7, #20]
 800b2d2:	4313      	orrs	r3, r2
 800b2d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	689b      	ldr	r3, [r3, #8]
 800b2dc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	697a      	ldr	r2, [r7, #20]
 800b2e6:	430a      	orrs	r2, r1
 800b2e8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	4aa7      	ldr	r2, [pc, #668]	; (800b58c <UART_SetConfig+0x318>)
 800b2f0:	4293      	cmp	r3, r2
 800b2f2:	d120      	bne.n	800b336 <UART_SetConfig+0xc2>
 800b2f4:	4ba6      	ldr	r3, [pc, #664]	; (800b590 <UART_SetConfig+0x31c>)
 800b2f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2f8:	f003 0303 	and.w	r3, r3, #3
 800b2fc:	2b03      	cmp	r3, #3
 800b2fe:	d817      	bhi.n	800b330 <UART_SetConfig+0xbc>
 800b300:	a201      	add	r2, pc, #4	; (adr r2, 800b308 <UART_SetConfig+0x94>)
 800b302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b306:	bf00      	nop
 800b308:	0800b319 	.word	0x0800b319
 800b30c:	0800b325 	.word	0x0800b325
 800b310:	0800b32b 	.word	0x0800b32b
 800b314:	0800b31f 	.word	0x0800b31f
 800b318:	2301      	movs	r3, #1
 800b31a:	77fb      	strb	r3, [r7, #31]
 800b31c:	e0b5      	b.n	800b48a <UART_SetConfig+0x216>
 800b31e:	2302      	movs	r3, #2
 800b320:	77fb      	strb	r3, [r7, #31]
 800b322:	e0b2      	b.n	800b48a <UART_SetConfig+0x216>
 800b324:	2304      	movs	r3, #4
 800b326:	77fb      	strb	r3, [r7, #31]
 800b328:	e0af      	b.n	800b48a <UART_SetConfig+0x216>
 800b32a:	2308      	movs	r3, #8
 800b32c:	77fb      	strb	r3, [r7, #31]
 800b32e:	e0ac      	b.n	800b48a <UART_SetConfig+0x216>
 800b330:	2310      	movs	r3, #16
 800b332:	77fb      	strb	r3, [r7, #31]
 800b334:	e0a9      	b.n	800b48a <UART_SetConfig+0x216>
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	4a96      	ldr	r2, [pc, #600]	; (800b594 <UART_SetConfig+0x320>)
 800b33c:	4293      	cmp	r3, r2
 800b33e:	d124      	bne.n	800b38a <UART_SetConfig+0x116>
 800b340:	4b93      	ldr	r3, [pc, #588]	; (800b590 <UART_SetConfig+0x31c>)
 800b342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b344:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b348:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b34c:	d011      	beq.n	800b372 <UART_SetConfig+0xfe>
 800b34e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b352:	d817      	bhi.n	800b384 <UART_SetConfig+0x110>
 800b354:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b358:	d011      	beq.n	800b37e <UART_SetConfig+0x10a>
 800b35a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b35e:	d811      	bhi.n	800b384 <UART_SetConfig+0x110>
 800b360:	2b00      	cmp	r3, #0
 800b362:	d003      	beq.n	800b36c <UART_SetConfig+0xf8>
 800b364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b368:	d006      	beq.n	800b378 <UART_SetConfig+0x104>
 800b36a:	e00b      	b.n	800b384 <UART_SetConfig+0x110>
 800b36c:	2300      	movs	r3, #0
 800b36e:	77fb      	strb	r3, [r7, #31]
 800b370:	e08b      	b.n	800b48a <UART_SetConfig+0x216>
 800b372:	2302      	movs	r3, #2
 800b374:	77fb      	strb	r3, [r7, #31]
 800b376:	e088      	b.n	800b48a <UART_SetConfig+0x216>
 800b378:	2304      	movs	r3, #4
 800b37a:	77fb      	strb	r3, [r7, #31]
 800b37c:	e085      	b.n	800b48a <UART_SetConfig+0x216>
 800b37e:	2308      	movs	r3, #8
 800b380:	77fb      	strb	r3, [r7, #31]
 800b382:	e082      	b.n	800b48a <UART_SetConfig+0x216>
 800b384:	2310      	movs	r3, #16
 800b386:	77fb      	strb	r3, [r7, #31]
 800b388:	e07f      	b.n	800b48a <UART_SetConfig+0x216>
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	4a82      	ldr	r2, [pc, #520]	; (800b598 <UART_SetConfig+0x324>)
 800b390:	4293      	cmp	r3, r2
 800b392:	d124      	bne.n	800b3de <UART_SetConfig+0x16a>
 800b394:	4b7e      	ldr	r3, [pc, #504]	; (800b590 <UART_SetConfig+0x31c>)
 800b396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b398:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800b39c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800b3a0:	d011      	beq.n	800b3c6 <UART_SetConfig+0x152>
 800b3a2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800b3a6:	d817      	bhi.n	800b3d8 <UART_SetConfig+0x164>
 800b3a8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b3ac:	d011      	beq.n	800b3d2 <UART_SetConfig+0x15e>
 800b3ae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b3b2:	d811      	bhi.n	800b3d8 <UART_SetConfig+0x164>
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d003      	beq.n	800b3c0 <UART_SetConfig+0x14c>
 800b3b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b3bc:	d006      	beq.n	800b3cc <UART_SetConfig+0x158>
 800b3be:	e00b      	b.n	800b3d8 <UART_SetConfig+0x164>
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	77fb      	strb	r3, [r7, #31]
 800b3c4:	e061      	b.n	800b48a <UART_SetConfig+0x216>
 800b3c6:	2302      	movs	r3, #2
 800b3c8:	77fb      	strb	r3, [r7, #31]
 800b3ca:	e05e      	b.n	800b48a <UART_SetConfig+0x216>
 800b3cc:	2304      	movs	r3, #4
 800b3ce:	77fb      	strb	r3, [r7, #31]
 800b3d0:	e05b      	b.n	800b48a <UART_SetConfig+0x216>
 800b3d2:	2308      	movs	r3, #8
 800b3d4:	77fb      	strb	r3, [r7, #31]
 800b3d6:	e058      	b.n	800b48a <UART_SetConfig+0x216>
 800b3d8:	2310      	movs	r3, #16
 800b3da:	77fb      	strb	r3, [r7, #31]
 800b3dc:	e055      	b.n	800b48a <UART_SetConfig+0x216>
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	4a6e      	ldr	r2, [pc, #440]	; (800b59c <UART_SetConfig+0x328>)
 800b3e4:	4293      	cmp	r3, r2
 800b3e6:	d124      	bne.n	800b432 <UART_SetConfig+0x1be>
 800b3e8:	4b69      	ldr	r3, [pc, #420]	; (800b590 <UART_SetConfig+0x31c>)
 800b3ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3ec:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800b3f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b3f4:	d011      	beq.n	800b41a <UART_SetConfig+0x1a6>
 800b3f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b3fa:	d817      	bhi.n	800b42c <UART_SetConfig+0x1b8>
 800b3fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b400:	d011      	beq.n	800b426 <UART_SetConfig+0x1b2>
 800b402:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b406:	d811      	bhi.n	800b42c <UART_SetConfig+0x1b8>
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d003      	beq.n	800b414 <UART_SetConfig+0x1a0>
 800b40c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b410:	d006      	beq.n	800b420 <UART_SetConfig+0x1ac>
 800b412:	e00b      	b.n	800b42c <UART_SetConfig+0x1b8>
 800b414:	2300      	movs	r3, #0
 800b416:	77fb      	strb	r3, [r7, #31]
 800b418:	e037      	b.n	800b48a <UART_SetConfig+0x216>
 800b41a:	2302      	movs	r3, #2
 800b41c:	77fb      	strb	r3, [r7, #31]
 800b41e:	e034      	b.n	800b48a <UART_SetConfig+0x216>
 800b420:	2304      	movs	r3, #4
 800b422:	77fb      	strb	r3, [r7, #31]
 800b424:	e031      	b.n	800b48a <UART_SetConfig+0x216>
 800b426:	2308      	movs	r3, #8
 800b428:	77fb      	strb	r3, [r7, #31]
 800b42a:	e02e      	b.n	800b48a <UART_SetConfig+0x216>
 800b42c:	2310      	movs	r3, #16
 800b42e:	77fb      	strb	r3, [r7, #31]
 800b430:	e02b      	b.n	800b48a <UART_SetConfig+0x216>
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	4a5a      	ldr	r2, [pc, #360]	; (800b5a0 <UART_SetConfig+0x32c>)
 800b438:	4293      	cmp	r3, r2
 800b43a:	d124      	bne.n	800b486 <UART_SetConfig+0x212>
 800b43c:	4b54      	ldr	r3, [pc, #336]	; (800b590 <UART_SetConfig+0x31c>)
 800b43e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b440:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800b444:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b448:	d011      	beq.n	800b46e <UART_SetConfig+0x1fa>
 800b44a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b44e:	d817      	bhi.n	800b480 <UART_SetConfig+0x20c>
 800b450:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b454:	d011      	beq.n	800b47a <UART_SetConfig+0x206>
 800b456:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b45a:	d811      	bhi.n	800b480 <UART_SetConfig+0x20c>
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d003      	beq.n	800b468 <UART_SetConfig+0x1f4>
 800b460:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b464:	d006      	beq.n	800b474 <UART_SetConfig+0x200>
 800b466:	e00b      	b.n	800b480 <UART_SetConfig+0x20c>
 800b468:	2300      	movs	r3, #0
 800b46a:	77fb      	strb	r3, [r7, #31]
 800b46c:	e00d      	b.n	800b48a <UART_SetConfig+0x216>
 800b46e:	2302      	movs	r3, #2
 800b470:	77fb      	strb	r3, [r7, #31]
 800b472:	e00a      	b.n	800b48a <UART_SetConfig+0x216>
 800b474:	2304      	movs	r3, #4
 800b476:	77fb      	strb	r3, [r7, #31]
 800b478:	e007      	b.n	800b48a <UART_SetConfig+0x216>
 800b47a:	2308      	movs	r3, #8
 800b47c:	77fb      	strb	r3, [r7, #31]
 800b47e:	e004      	b.n	800b48a <UART_SetConfig+0x216>
 800b480:	2310      	movs	r3, #16
 800b482:	77fb      	strb	r3, [r7, #31]
 800b484:	e001      	b.n	800b48a <UART_SetConfig+0x216>
 800b486:	2310      	movs	r3, #16
 800b488:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	69db      	ldr	r3, [r3, #28]
 800b48e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b492:	d15b      	bne.n	800b54c <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 800b494:	7ffb      	ldrb	r3, [r7, #31]
 800b496:	2b08      	cmp	r3, #8
 800b498:	d827      	bhi.n	800b4ea <UART_SetConfig+0x276>
 800b49a:	a201      	add	r2, pc, #4	; (adr r2, 800b4a0 <UART_SetConfig+0x22c>)
 800b49c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4a0:	0800b4c5 	.word	0x0800b4c5
 800b4a4:	0800b4cd 	.word	0x0800b4cd
 800b4a8:	0800b4d5 	.word	0x0800b4d5
 800b4ac:	0800b4eb 	.word	0x0800b4eb
 800b4b0:	0800b4db 	.word	0x0800b4db
 800b4b4:	0800b4eb 	.word	0x0800b4eb
 800b4b8:	0800b4eb 	.word	0x0800b4eb
 800b4bc:	0800b4eb 	.word	0x0800b4eb
 800b4c0:	0800b4e3 	.word	0x0800b4e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b4c4:	f7fc fe6e 	bl	80081a4 <HAL_RCC_GetPCLK1Freq>
 800b4c8:	61b8      	str	r0, [r7, #24]
        break;
 800b4ca:	e013      	b.n	800b4f4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b4cc:	f7fc fe8c 	bl	80081e8 <HAL_RCC_GetPCLK2Freq>
 800b4d0:	61b8      	str	r0, [r7, #24]
        break;
 800b4d2:	e00f      	b.n	800b4f4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b4d4:	4b33      	ldr	r3, [pc, #204]	; (800b5a4 <UART_SetConfig+0x330>)
 800b4d6:	61bb      	str	r3, [r7, #24]
        break;
 800b4d8:	e00c      	b.n	800b4f4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b4da:	f7fc fded 	bl	80080b8 <HAL_RCC_GetSysClockFreq>
 800b4de:	61b8      	str	r0, [r7, #24]
        break;
 800b4e0:	e008      	b.n	800b4f4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b4e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b4e6:	61bb      	str	r3, [r7, #24]
        break;
 800b4e8:	e004      	b.n	800b4f4 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	77bb      	strb	r3, [r7, #30]
        break;
 800b4f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b4f4:	69bb      	ldr	r3, [r7, #24]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	f000 8082 	beq.w	800b600 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b4fc:	69bb      	ldr	r3, [r7, #24]
 800b4fe:	005a      	lsls	r2, r3, #1
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	685b      	ldr	r3, [r3, #4]
 800b504:	085b      	lsrs	r3, r3, #1
 800b506:	441a      	add	r2, r3
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	685b      	ldr	r3, [r3, #4]
 800b50c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b510:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b512:	693b      	ldr	r3, [r7, #16]
 800b514:	2b0f      	cmp	r3, #15
 800b516:	d916      	bls.n	800b546 <UART_SetConfig+0x2d2>
 800b518:	693b      	ldr	r3, [r7, #16]
 800b51a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b51e:	d212      	bcs.n	800b546 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b520:	693b      	ldr	r3, [r7, #16]
 800b522:	b29b      	uxth	r3, r3
 800b524:	f023 030f 	bic.w	r3, r3, #15
 800b528:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b52a:	693b      	ldr	r3, [r7, #16]
 800b52c:	085b      	lsrs	r3, r3, #1
 800b52e:	b29b      	uxth	r3, r3
 800b530:	f003 0307 	and.w	r3, r3, #7
 800b534:	b29a      	uxth	r2, r3
 800b536:	89fb      	ldrh	r3, [r7, #14]
 800b538:	4313      	orrs	r3, r2
 800b53a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	89fa      	ldrh	r2, [r7, #14]
 800b542:	60da      	str	r2, [r3, #12]
 800b544:	e05c      	b.n	800b600 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800b546:	2301      	movs	r3, #1
 800b548:	77bb      	strb	r3, [r7, #30]
 800b54a:	e059      	b.n	800b600 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b54c:	7ffb      	ldrb	r3, [r7, #31]
 800b54e:	2b08      	cmp	r3, #8
 800b550:	d835      	bhi.n	800b5be <UART_SetConfig+0x34a>
 800b552:	a201      	add	r2, pc, #4	; (adr r2, 800b558 <UART_SetConfig+0x2e4>)
 800b554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b558:	0800b57d 	.word	0x0800b57d
 800b55c:	0800b585 	.word	0x0800b585
 800b560:	0800b5a9 	.word	0x0800b5a9
 800b564:	0800b5bf 	.word	0x0800b5bf
 800b568:	0800b5af 	.word	0x0800b5af
 800b56c:	0800b5bf 	.word	0x0800b5bf
 800b570:	0800b5bf 	.word	0x0800b5bf
 800b574:	0800b5bf 	.word	0x0800b5bf
 800b578:	0800b5b7 	.word	0x0800b5b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b57c:	f7fc fe12 	bl	80081a4 <HAL_RCC_GetPCLK1Freq>
 800b580:	61b8      	str	r0, [r7, #24]
        break;
 800b582:	e021      	b.n	800b5c8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b584:	f7fc fe30 	bl	80081e8 <HAL_RCC_GetPCLK2Freq>
 800b588:	61b8      	str	r0, [r7, #24]
        break;
 800b58a:	e01d      	b.n	800b5c8 <UART_SetConfig+0x354>
 800b58c:	40013800 	.word	0x40013800
 800b590:	40021000 	.word	0x40021000
 800b594:	40004400 	.word	0x40004400
 800b598:	40004800 	.word	0x40004800
 800b59c:	40004c00 	.word	0x40004c00
 800b5a0:	40005000 	.word	0x40005000
 800b5a4:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b5a8:	4b1b      	ldr	r3, [pc, #108]	; (800b618 <UART_SetConfig+0x3a4>)
 800b5aa:	61bb      	str	r3, [r7, #24]
        break;
 800b5ac:	e00c      	b.n	800b5c8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b5ae:	f7fc fd83 	bl	80080b8 <HAL_RCC_GetSysClockFreq>
 800b5b2:	61b8      	str	r0, [r7, #24]
        break;
 800b5b4:	e008      	b.n	800b5c8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b5b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b5ba:	61bb      	str	r3, [r7, #24]
        break;
 800b5bc:	e004      	b.n	800b5c8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b5c2:	2301      	movs	r3, #1
 800b5c4:	77bb      	strb	r3, [r7, #30]
        break;
 800b5c6:	bf00      	nop
    }

    if (pclk != 0U)
 800b5c8:	69bb      	ldr	r3, [r7, #24]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d018      	beq.n	800b600 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	685b      	ldr	r3, [r3, #4]
 800b5d2:	085a      	lsrs	r2, r3, #1
 800b5d4:	69bb      	ldr	r3, [r7, #24]
 800b5d6:	441a      	add	r2, r3
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	685b      	ldr	r3, [r3, #4]
 800b5dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5e0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b5e2:	693b      	ldr	r3, [r7, #16]
 800b5e4:	2b0f      	cmp	r3, #15
 800b5e6:	d909      	bls.n	800b5fc <UART_SetConfig+0x388>
 800b5e8:	693b      	ldr	r3, [r7, #16]
 800b5ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5ee:	d205      	bcs.n	800b5fc <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b5f0:	693b      	ldr	r3, [r7, #16]
 800b5f2:	b29a      	uxth	r2, r3
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	60da      	str	r2, [r3, #12]
 800b5fa:	e001      	b.n	800b600 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800b5fc:	2301      	movs	r3, #1
 800b5fe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2200      	movs	r2, #0
 800b604:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2200      	movs	r2, #0
 800b60a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800b60c:	7fbb      	ldrb	r3, [r7, #30]
}
 800b60e:	4618      	mov	r0, r3
 800b610:	3720      	adds	r7, #32
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}
 800b616:	bf00      	nop
 800b618:	007a1200 	.word	0x007a1200

0800b61c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b61c:	b480      	push	{r7}
 800b61e:	b083      	sub	sp, #12
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b628:	f003 0301 	and.w	r3, r3, #1
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d00a      	beq.n	800b646 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	685b      	ldr	r3, [r3, #4]
 800b636:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	430a      	orrs	r2, r1
 800b644:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b64a:	f003 0302 	and.w	r3, r3, #2
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d00a      	beq.n	800b668 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	685b      	ldr	r3, [r3, #4]
 800b658:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	430a      	orrs	r2, r1
 800b666:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b66c:	f003 0304 	and.w	r3, r3, #4
 800b670:	2b00      	cmp	r3, #0
 800b672:	d00a      	beq.n	800b68a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	685b      	ldr	r3, [r3, #4]
 800b67a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	430a      	orrs	r2, r1
 800b688:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b68e:	f003 0308 	and.w	r3, r3, #8
 800b692:	2b00      	cmp	r3, #0
 800b694:	d00a      	beq.n	800b6ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	685b      	ldr	r3, [r3, #4]
 800b69c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	430a      	orrs	r2, r1
 800b6aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b0:	f003 0310 	and.w	r3, r3, #16
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d00a      	beq.n	800b6ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	689b      	ldr	r3, [r3, #8]
 800b6be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	430a      	orrs	r2, r1
 800b6cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6d2:	f003 0320 	and.w	r3, r3, #32
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d00a      	beq.n	800b6f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	689b      	ldr	r3, [r3, #8]
 800b6e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	430a      	orrs	r2, r1
 800b6ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d01a      	beq.n	800b732 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	685b      	ldr	r3, [r3, #4]
 800b702:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	430a      	orrs	r2, r1
 800b710:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b716:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b71a:	d10a      	bne.n	800b732 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	685b      	ldr	r3, [r3, #4]
 800b722:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	430a      	orrs	r2, r1
 800b730:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d00a      	beq.n	800b754 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	685b      	ldr	r3, [r3, #4]
 800b744:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	430a      	orrs	r2, r1
 800b752:	605a      	str	r2, [r3, #4]
  }
}
 800b754:	bf00      	nop
 800b756:	370c      	adds	r7, #12
 800b758:	46bd      	mov	sp, r7
 800b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75e:	4770      	bx	lr

0800b760 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b098      	sub	sp, #96	; 0x60
 800b764:	af02      	add	r7, sp, #8
 800b766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2200      	movs	r2, #0
 800b76c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b770:	f7f7 fbcc 	bl	8002f0c <HAL_GetTick>
 800b774:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	f003 0308 	and.w	r3, r3, #8
 800b780:	2b08      	cmp	r3, #8
 800b782:	d12e      	bne.n	800b7e2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b784:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b788:	9300      	str	r3, [sp, #0]
 800b78a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b78c:	2200      	movs	r2, #0
 800b78e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f000 f88c 	bl	800b8b0 <UART_WaitOnFlagUntilTimeout>
 800b798:	4603      	mov	r3, r0
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d021      	beq.n	800b7e2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7a6:	e853 3f00 	ldrex	r3, [r3]
 800b7aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b7ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b7b2:	653b      	str	r3, [r7, #80]	; 0x50
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	461a      	mov	r2, r3
 800b7ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b7bc:	647b      	str	r3, [r7, #68]	; 0x44
 800b7be:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b7c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b7c4:	e841 2300 	strex	r3, r2, [r1]
 800b7c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b7ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d1e6      	bne.n	800b79e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2220      	movs	r2, #32
 800b7d4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2200      	movs	r2, #0
 800b7da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b7de:	2303      	movs	r3, #3
 800b7e0:	e062      	b.n	800b8a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	f003 0304 	and.w	r3, r3, #4
 800b7ec:	2b04      	cmp	r3, #4
 800b7ee:	d149      	bne.n	800b884 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b7f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b7f4:	9300      	str	r3, [sp, #0]
 800b7f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f000 f856 	bl	800b8b0 <UART_WaitOnFlagUntilTimeout>
 800b804:	4603      	mov	r3, r0
 800b806:	2b00      	cmp	r3, #0
 800b808:	d03c      	beq.n	800b884 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b812:	e853 3f00 	ldrex	r3, [r3]
 800b816:	623b      	str	r3, [r7, #32]
   return(result);
 800b818:	6a3b      	ldr	r3, [r7, #32]
 800b81a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b81e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	461a      	mov	r2, r3
 800b826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b828:	633b      	str	r3, [r7, #48]	; 0x30
 800b82a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b82c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b82e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b830:	e841 2300 	strex	r3, r2, [r1]
 800b834:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d1e6      	bne.n	800b80a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	3308      	adds	r3, #8
 800b842:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b844:	693b      	ldr	r3, [r7, #16]
 800b846:	e853 3f00 	ldrex	r3, [r3]
 800b84a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	f023 0301 	bic.w	r3, r3, #1
 800b852:	64bb      	str	r3, [r7, #72]	; 0x48
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	3308      	adds	r3, #8
 800b85a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b85c:	61fa      	str	r2, [r7, #28]
 800b85e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b860:	69b9      	ldr	r1, [r7, #24]
 800b862:	69fa      	ldr	r2, [r7, #28]
 800b864:	e841 2300 	strex	r3, r2, [r1]
 800b868:	617b      	str	r3, [r7, #20]
   return(result);
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d1e5      	bne.n	800b83c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2220      	movs	r2, #32
 800b874:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2200      	movs	r2, #0
 800b87c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b880:	2303      	movs	r3, #3
 800b882:	e011      	b.n	800b8a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2220      	movs	r2, #32
 800b888:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2220      	movs	r2, #32
 800b88e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2200      	movs	r2, #0
 800b896:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2200      	movs	r2, #0
 800b89c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800b8a6:	2300      	movs	r3, #0
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	3758      	adds	r7, #88	; 0x58
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd80      	pop	{r7, pc}

0800b8b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b084      	sub	sp, #16
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	60f8      	str	r0, [r7, #12]
 800b8b8:	60b9      	str	r1, [r7, #8]
 800b8ba:	603b      	str	r3, [r7, #0]
 800b8bc:	4613      	mov	r3, r2
 800b8be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b8c0:	e049      	b.n	800b956 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b8c2:	69bb      	ldr	r3, [r7, #24]
 800b8c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8c8:	d045      	beq.n	800b956 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b8ca:	f7f7 fb1f 	bl	8002f0c <HAL_GetTick>
 800b8ce:	4602      	mov	r2, r0
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	1ad3      	subs	r3, r2, r3
 800b8d4:	69ba      	ldr	r2, [r7, #24]
 800b8d6:	429a      	cmp	r2, r3
 800b8d8:	d302      	bcc.n	800b8e0 <UART_WaitOnFlagUntilTimeout+0x30>
 800b8da:	69bb      	ldr	r3, [r7, #24]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d101      	bne.n	800b8e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b8e0:	2303      	movs	r3, #3
 800b8e2:	e048      	b.n	800b976 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f003 0304 	and.w	r3, r3, #4
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d031      	beq.n	800b956 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	69db      	ldr	r3, [r3, #28]
 800b8f8:	f003 0308 	and.w	r3, r3, #8
 800b8fc:	2b08      	cmp	r3, #8
 800b8fe:	d110      	bne.n	800b922 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	2208      	movs	r2, #8
 800b906:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800b908:	68f8      	ldr	r0, [r7, #12]
 800b90a:	f000 f8ff 	bl	800bb0c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	2208      	movs	r2, #8
 800b912:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	2200      	movs	r2, #0
 800b91a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800b91e:	2301      	movs	r3, #1
 800b920:	e029      	b.n	800b976 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	69db      	ldr	r3, [r3, #28]
 800b928:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b92c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b930:	d111      	bne.n	800b956 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b93a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b93c:	68f8      	ldr	r0, [r7, #12]
 800b93e:	f000 f8e5 	bl	800bb0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	2220      	movs	r2, #32
 800b946:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	2200      	movs	r2, #0
 800b94e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800b952:	2303      	movs	r3, #3
 800b954:	e00f      	b.n	800b976 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	69da      	ldr	r2, [r3, #28]
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	4013      	ands	r3, r2
 800b960:	68ba      	ldr	r2, [r7, #8]
 800b962:	429a      	cmp	r2, r3
 800b964:	bf0c      	ite	eq
 800b966:	2301      	moveq	r3, #1
 800b968:	2300      	movne	r3, #0
 800b96a:	b2db      	uxtb	r3, r3
 800b96c:	461a      	mov	r2, r3
 800b96e:	79fb      	ldrb	r3, [r7, #7]
 800b970:	429a      	cmp	r2, r3
 800b972:	d0a6      	beq.n	800b8c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b974:	2300      	movs	r3, #0
}
 800b976:	4618      	mov	r0, r3
 800b978:	3710      	adds	r7, #16
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}
	...

0800b980 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b096      	sub	sp, #88	; 0x58
 800b984:	af00      	add	r7, sp, #0
 800b986:	60f8      	str	r0, [r7, #12]
 800b988:	60b9      	str	r1, [r7, #8]
 800b98a:	4613      	mov	r3, r2
 800b98c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	68ba      	ldr	r2, [r7, #8]
 800b992:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	88fa      	ldrh	r2, [r7, #6]
 800b998:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	2200      	movs	r2, #0
 800b9a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	2222      	movs	r2, #34	; 0x22
 800b9a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d028      	beq.n	800ba06 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b9b8:	4a3e      	ldr	r2, [pc, #248]	; (800bab4 <UART_Start_Receive_DMA+0x134>)
 800b9ba:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b9c0:	4a3d      	ldr	r2, [pc, #244]	; (800bab8 <UART_Start_Receive_DMA+0x138>)
 800b9c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b9c8:	4a3c      	ldr	r2, [pc, #240]	; (800babc <UART_Start_Receive_DMA+0x13c>)
 800b9ca:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	3324      	adds	r3, #36	; 0x24
 800b9de:	4619      	mov	r1, r3
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9e4:	461a      	mov	r2, r3
 800b9e6:	88fb      	ldrh	r3, [r7, #6]
 800b9e8:	f7f9 fb32 	bl	8005050 <HAL_DMA_Start_IT>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d009      	beq.n	800ba06 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	2210      	movs	r2, #16
 800b9f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	2220      	movs	r2, #32
 800b9fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800ba02:	2301      	movs	r3, #1
 800ba04:	e051      	b.n	800baaa <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	691b      	ldr	r3, [r3, #16]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d018      	beq.n	800ba40 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba16:	e853 3f00 	ldrex	r3, [r3]
 800ba1a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ba1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba22:	657b      	str	r3, [r7, #84]	; 0x54
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	461a      	mov	r2, r3
 800ba2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba2c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ba2e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba30:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ba32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ba34:	e841 2300 	strex	r3, r2, [r1]
 800ba38:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ba3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d1e6      	bne.n	800ba0e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	3308      	adds	r3, #8
 800ba46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba4a:	e853 3f00 	ldrex	r3, [r3]
 800ba4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ba50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba52:	f043 0301 	orr.w	r3, r3, #1
 800ba56:	653b      	str	r3, [r7, #80]	; 0x50
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	3308      	adds	r3, #8
 800ba5e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ba60:	637a      	str	r2, [r7, #52]	; 0x34
 800ba62:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ba66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba68:	e841 2300 	strex	r3, r2, [r1]
 800ba6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ba6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d1e5      	bne.n	800ba40 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	3308      	adds	r3, #8
 800ba7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba7c:	697b      	ldr	r3, [r7, #20]
 800ba7e:	e853 3f00 	ldrex	r3, [r3]
 800ba82:	613b      	str	r3, [r7, #16]
   return(result);
 800ba84:	693b      	ldr	r3, [r7, #16]
 800ba86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	3308      	adds	r3, #8
 800ba92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ba94:	623a      	str	r2, [r7, #32]
 800ba96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba98:	69f9      	ldr	r1, [r7, #28]
 800ba9a:	6a3a      	ldr	r2, [r7, #32]
 800ba9c:	e841 2300 	strex	r3, r2, [r1]
 800baa0:	61bb      	str	r3, [r7, #24]
   return(result);
 800baa2:	69bb      	ldr	r3, [r7, #24]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d1e5      	bne.n	800ba74 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800baa8:	2300      	movs	r3, #0
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3758      	adds	r7, #88	; 0x58
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}
 800bab2:	bf00      	nop
 800bab4:	0800bc85 	.word	0x0800bc85
 800bab8:	0800bdab 	.word	0x0800bdab
 800babc:	0800bde9 	.word	0x0800bde9

0800bac0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bac0:	b480      	push	{r7}
 800bac2:	b089      	sub	sp, #36	; 0x24
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	e853 3f00 	ldrex	r3, [r3]
 800bad4:	60bb      	str	r3, [r7, #8]
   return(result);
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800badc:	61fb      	str	r3, [r7, #28]
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	461a      	mov	r2, r3
 800bae4:	69fb      	ldr	r3, [r7, #28]
 800bae6:	61bb      	str	r3, [r7, #24]
 800bae8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baea:	6979      	ldr	r1, [r7, #20]
 800baec:	69ba      	ldr	r2, [r7, #24]
 800baee:	e841 2300 	strex	r3, r2, [r1]
 800baf2:	613b      	str	r3, [r7, #16]
   return(result);
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d1e6      	bne.n	800bac8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2220      	movs	r2, #32
 800bafe:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800bb00:	bf00      	nop
 800bb02:	3724      	adds	r7, #36	; 0x24
 800bb04:	46bd      	mov	sp, r7
 800bb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0a:	4770      	bx	lr

0800bb0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bb0c:	b480      	push	{r7}
 800bb0e:	b095      	sub	sp, #84	; 0x54
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb1c:	e853 3f00 	ldrex	r3, [r3]
 800bb20:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bb22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bb28:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	461a      	mov	r2, r3
 800bb30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb32:	643b      	str	r3, [r7, #64]	; 0x40
 800bb34:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb36:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bb38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bb3a:	e841 2300 	strex	r3, r2, [r1]
 800bb3e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bb40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d1e6      	bne.n	800bb14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	3308      	adds	r3, #8
 800bb4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb4e:	6a3b      	ldr	r3, [r7, #32]
 800bb50:	e853 3f00 	ldrex	r3, [r3]
 800bb54:	61fb      	str	r3, [r7, #28]
   return(result);
 800bb56:	69fb      	ldr	r3, [r7, #28]
 800bb58:	f023 0301 	bic.w	r3, r3, #1
 800bb5c:	64bb      	str	r3, [r7, #72]	; 0x48
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	3308      	adds	r3, #8
 800bb64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bb66:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bb68:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bb6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb6e:	e841 2300 	strex	r3, r2, [r1]
 800bb72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bb74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d1e5      	bne.n	800bb46 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb7e:	2b01      	cmp	r3, #1
 800bb80:	d118      	bne.n	800bbb4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	e853 3f00 	ldrex	r3, [r3]
 800bb8e:	60bb      	str	r3, [r7, #8]
   return(result);
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	f023 0310 	bic.w	r3, r3, #16
 800bb96:	647b      	str	r3, [r7, #68]	; 0x44
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	461a      	mov	r2, r3
 800bb9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bba0:	61bb      	str	r3, [r7, #24]
 800bba2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bba4:	6979      	ldr	r1, [r7, #20]
 800bba6:	69ba      	ldr	r2, [r7, #24]
 800bba8:	e841 2300 	strex	r3, r2, [r1]
 800bbac:	613b      	str	r3, [r7, #16]
   return(result);
 800bbae:	693b      	ldr	r3, [r7, #16]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d1e6      	bne.n	800bb82 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2220      	movs	r2, #32
 800bbb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	669a      	str	r2, [r3, #104]	; 0x68
}
 800bbc8:	bf00      	nop
 800bbca:	3754      	adds	r7, #84	; 0x54
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd2:	4770      	bx	lr

0800bbd4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b090      	sub	sp, #64	; 0x40
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbe0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	699b      	ldr	r3, [r3, #24]
 800bbe6:	2b20      	cmp	r3, #32
 800bbe8:	d037      	beq.n	800bc5a <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800bbea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbec:	2200      	movs	r2, #0
 800bbee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bbf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	3308      	adds	r3, #8
 800bbf8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbfc:	e853 3f00 	ldrex	r3, [r3]
 800bc00:	623b      	str	r3, [r7, #32]
   return(result);
 800bc02:	6a3b      	ldr	r3, [r7, #32]
 800bc04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bc08:	63bb      	str	r3, [r7, #56]	; 0x38
 800bc0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	3308      	adds	r3, #8
 800bc10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc12:	633a      	str	r2, [r7, #48]	; 0x30
 800bc14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bc18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc1a:	e841 2300 	strex	r3, r2, [r1]
 800bc1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bc20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d1e5      	bne.n	800bbf2 <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bc26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc2c:	693b      	ldr	r3, [r7, #16]
 800bc2e:	e853 3f00 	ldrex	r3, [r3]
 800bc32:	60fb      	str	r3, [r7, #12]
   return(result);
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc3a:	637b      	str	r3, [r7, #52]	; 0x34
 800bc3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	461a      	mov	r2, r3
 800bc42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc44:	61fb      	str	r3, [r7, #28]
 800bc46:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc48:	69b9      	ldr	r1, [r7, #24]
 800bc4a:	69fa      	ldr	r2, [r7, #28]
 800bc4c:	e841 2300 	strex	r3, r2, [r1]
 800bc50:	617b      	str	r3, [r7, #20]
   return(result);
 800bc52:	697b      	ldr	r3, [r7, #20]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d1e6      	bne.n	800bc26 <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bc58:	e002      	b.n	800bc60 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 800bc5a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bc5c:	f7f6 fa42 	bl	80020e4 <HAL_UART_TxCpltCallback>
}
 800bc60:	bf00      	nop
 800bc62:	3740      	adds	r7, #64	; 0x40
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bd80      	pop	{r7, pc}

0800bc68 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b084      	sub	sp, #16
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc74:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800bc76:	68f8      	ldr	r0, [r7, #12]
 800bc78:	f7ff fad4 	bl	800b224 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc7c:	bf00      	nop
 800bc7e:	3710      	adds	r7, #16
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bd80      	pop	{r7, pc}

0800bc84 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b09c      	sub	sp, #112	; 0x70
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc90:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	699b      	ldr	r3, [r3, #24]
 800bc96:	2b20      	cmp	r3, #32
 800bc98:	d071      	beq.n	800bd7e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800bc9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcaa:	e853 3f00 	ldrex	r3, [r3]
 800bcae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bcb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bcb2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bcb6:	66bb      	str	r3, [r7, #104]	; 0x68
 800bcb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	461a      	mov	r2, r3
 800bcbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bcc0:	65bb      	str	r3, [r7, #88]	; 0x58
 800bcc2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcc4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bcc6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bcc8:	e841 2300 	strex	r3, r2, [r1]
 800bccc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bcce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d1e6      	bne.n	800bca2 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	3308      	adds	r3, #8
 800bcda:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcde:	e853 3f00 	ldrex	r3, [r3]
 800bce2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bce6:	f023 0301 	bic.w	r3, r3, #1
 800bcea:	667b      	str	r3, [r7, #100]	; 0x64
 800bcec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	3308      	adds	r3, #8
 800bcf2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bcf4:	647a      	str	r2, [r7, #68]	; 0x44
 800bcf6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcf8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bcfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bcfc:	e841 2300 	strex	r3, r2, [r1]
 800bd00:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bd02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d1e5      	bne.n	800bcd4 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	3308      	adds	r3, #8
 800bd0e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd12:	e853 3f00 	ldrex	r3, [r3]
 800bd16:	623b      	str	r3, [r7, #32]
   return(result);
 800bd18:	6a3b      	ldr	r3, [r7, #32]
 800bd1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd1e:	663b      	str	r3, [r7, #96]	; 0x60
 800bd20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	3308      	adds	r3, #8
 800bd26:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bd28:	633a      	str	r2, [r7, #48]	; 0x30
 800bd2a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bd2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd30:	e841 2300 	strex	r3, r2, [r1]
 800bd34:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bd36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d1e5      	bne.n	800bd08 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bd3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd3e:	2220      	movs	r2, #32
 800bd40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bd48:	2b01      	cmp	r3, #1
 800bd4a:	d118      	bne.n	800bd7e <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd52:	693b      	ldr	r3, [r7, #16]
 800bd54:	e853 3f00 	ldrex	r3, [r3]
 800bd58:	60fb      	str	r3, [r7, #12]
   return(result);
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	f023 0310 	bic.w	r3, r3, #16
 800bd60:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bd62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	461a      	mov	r2, r3
 800bd68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd6a:	61fb      	str	r3, [r7, #28]
 800bd6c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd6e:	69b9      	ldr	r1, [r7, #24]
 800bd70:	69fa      	ldr	r2, [r7, #28]
 800bd72:	e841 2300 	strex	r3, r2, [r1]
 800bd76:	617b      	str	r3, [r7, #20]
   return(result);
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d1e6      	bne.n	800bd4c <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bd7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd80:	2200      	movs	r2, #0
 800bd82:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bd88:	2b01      	cmp	r3, #1
 800bd8a:	d107      	bne.n	800bd9c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bd8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd8e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800bd92:	4619      	mov	r1, r3
 800bd94:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800bd96:	f7f4 fd17 	bl	80007c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bd9a:	e002      	b.n	800bda2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800bd9c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800bd9e:	f7ff fa4b 	bl	800b238 <HAL_UART_RxCpltCallback>
}
 800bda2:	bf00      	nop
 800bda4:	3770      	adds	r7, #112	; 0x70
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bd80      	pop	{r7, pc}

0800bdaa <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bdaa:	b580      	push	{r7, lr}
 800bdac:	b084      	sub	sp, #16
 800bdae:	af00      	add	r7, sp, #0
 800bdb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdb6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	2201      	movs	r2, #1
 800bdbc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bdc2:	2b01      	cmp	r3, #1
 800bdc4:	d109      	bne.n	800bdda <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800bdcc:	085b      	lsrs	r3, r3, #1
 800bdce:	b29b      	uxth	r3, r3
 800bdd0:	4619      	mov	r1, r3
 800bdd2:	68f8      	ldr	r0, [r7, #12]
 800bdd4:	f7f4 fcf8 	bl	80007c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bdd8:	e002      	b.n	800bde0 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800bdda:	68f8      	ldr	r0, [r7, #12]
 800bddc:	f7ff fa36 	bl	800b24c <HAL_UART_RxHalfCpltCallback>
}
 800bde0:	bf00      	nop
 800bde2:	3710      	adds	r7, #16
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}

0800bde8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b086      	sub	sp, #24
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdf4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bdf6:	697b      	ldr	r3, [r7, #20]
 800bdf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bdfa:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bdfc:	697b      	ldr	r3, [r7, #20]
 800bdfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be02:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800be04:	697b      	ldr	r3, [r7, #20]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	689b      	ldr	r3, [r3, #8]
 800be0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be0e:	2b80      	cmp	r3, #128	; 0x80
 800be10:	d109      	bne.n	800be26 <UART_DMAError+0x3e>
 800be12:	693b      	ldr	r3, [r7, #16]
 800be14:	2b21      	cmp	r3, #33	; 0x21
 800be16:	d106      	bne.n	800be26 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800be18:	697b      	ldr	r3, [r7, #20]
 800be1a:	2200      	movs	r2, #0
 800be1c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800be20:	6978      	ldr	r0, [r7, #20]
 800be22:	f7ff fe4d 	bl	800bac0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800be26:	697b      	ldr	r3, [r7, #20]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	689b      	ldr	r3, [r3, #8]
 800be2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be30:	2b40      	cmp	r3, #64	; 0x40
 800be32:	d109      	bne.n	800be48 <UART_DMAError+0x60>
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	2b22      	cmp	r3, #34	; 0x22
 800be38:	d106      	bne.n	800be48 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800be3a:	697b      	ldr	r3, [r7, #20]
 800be3c:	2200      	movs	r2, #0
 800be3e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800be42:	6978      	ldr	r0, [r7, #20]
 800be44:	f7ff fe62 	bl	800bb0c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800be48:	697b      	ldr	r3, [r7, #20]
 800be4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be4e:	f043 0210 	orr.w	r2, r3, #16
 800be52:	697b      	ldr	r3, [r7, #20]
 800be54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800be58:	6978      	ldr	r0, [r7, #20]
 800be5a:	f7ff fa01 	bl	800b260 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be5e:	bf00      	nop
 800be60:	3718      	adds	r7, #24
 800be62:	46bd      	mov	sp, r7
 800be64:	bd80      	pop	{r7, pc}

0800be66 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800be66:	b580      	push	{r7, lr}
 800be68:	b084      	sub	sp, #16
 800be6a:	af00      	add	r7, sp, #0
 800be6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	2200      	movs	r2, #0
 800be78:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	2200      	movs	r2, #0
 800be80:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800be84:	68f8      	ldr	r0, [r7, #12]
 800be86:	f7ff f9eb 	bl	800b260 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be8a:	bf00      	nop
 800be8c:	3710      	adds	r7, #16
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}

0800be92 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800be92:	b580      	push	{r7, lr}
 800be94:	b088      	sub	sp, #32
 800be96:	af00      	add	r7, sp, #0
 800be98:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	e853 3f00 	ldrex	r3, [r3]
 800bea6:	60bb      	str	r3, [r7, #8]
   return(result);
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800beae:	61fb      	str	r3, [r7, #28]
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	461a      	mov	r2, r3
 800beb6:	69fb      	ldr	r3, [r7, #28]
 800beb8:	61bb      	str	r3, [r7, #24]
 800beba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bebc:	6979      	ldr	r1, [r7, #20]
 800bebe:	69ba      	ldr	r2, [r7, #24]
 800bec0:	e841 2300 	strex	r3, r2, [r1]
 800bec4:	613b      	str	r3, [r7, #16]
   return(result);
 800bec6:	693b      	ldr	r3, [r7, #16]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d1e6      	bne.n	800be9a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2220      	movs	r2, #32
 800bed0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2200      	movs	r2, #0
 800bed6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f7f6 f903 	bl	80020e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bede:	bf00      	nop
 800bee0:	3720      	adds	r7, #32
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}

0800bee6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bee6:	b480      	push	{r7}
 800bee8:	b083      	sub	sp, #12
 800beea:	af00      	add	r7, sp, #0
 800beec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800beee:	bf00      	nop
 800bef0:	370c      	adds	r7, #12
 800bef2:	46bd      	mov	sp, r7
 800bef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef8:	4770      	bx	lr

0800befa <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800befa:	b580      	push	{r7, lr}
 800befc:	b08c      	sub	sp, #48	; 0x30
 800befe:	af00      	add	r7, sp, #0
 800bf00:	60f8      	str	r0, [r7, #12]
 800bf02:	60b9      	str	r1, [r7, #8]
 800bf04:	4613      	mov	r3, r2
 800bf06:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf0e:	2b20      	cmp	r3, #32
 800bf10:	d142      	bne.n	800bf98 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800bf12:	68bb      	ldr	r3, [r7, #8]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d002      	beq.n	800bf1e <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800bf18:	88fb      	ldrh	r3, [r7, #6]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d101      	bne.n	800bf22 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800bf1e:	2301      	movs	r3, #1
 800bf20:	e03b      	b.n	800bf9a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	2201      	movs	r2, #1
 800bf26:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800bf2e:	88fb      	ldrh	r3, [r7, #6]
 800bf30:	461a      	mov	r2, r3
 800bf32:	68b9      	ldr	r1, [r7, #8]
 800bf34:	68f8      	ldr	r0, [r7, #12]
 800bf36:	f7ff fd23 	bl	800b980 <UART_Start_Receive_DMA>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800bf40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d124      	bne.n	800bf92 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bf4c:	2b01      	cmp	r3, #1
 800bf4e:	d11d      	bne.n	800bf8c <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	2210      	movs	r2, #16
 800bf56:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf5e:	69bb      	ldr	r3, [r7, #24]
 800bf60:	e853 3f00 	ldrex	r3, [r3]
 800bf64:	617b      	str	r3, [r7, #20]
   return(result);
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	f043 0310 	orr.w	r3, r3, #16
 800bf6c:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	461a      	mov	r2, r3
 800bf74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf76:	627b      	str	r3, [r7, #36]	; 0x24
 800bf78:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf7a:	6a39      	ldr	r1, [r7, #32]
 800bf7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf7e:	e841 2300 	strex	r3, r2, [r1]
 800bf82:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf84:	69fb      	ldr	r3, [r7, #28]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d1e6      	bne.n	800bf58 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800bf8a:	e002      	b.n	800bf92 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800bf92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bf96:	e000      	b.n	800bf9a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800bf98:	2302      	movs	r3, #2
  }
}
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	3730      	adds	r7, #48	; 0x30
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}
	...

0800bfa4 <siprintf>:
 800bfa4:	b40e      	push	{r1, r2, r3}
 800bfa6:	b500      	push	{lr}
 800bfa8:	b09c      	sub	sp, #112	; 0x70
 800bfaa:	ab1d      	add	r3, sp, #116	; 0x74
 800bfac:	9002      	str	r0, [sp, #8]
 800bfae:	9006      	str	r0, [sp, #24]
 800bfb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bfb4:	4809      	ldr	r0, [pc, #36]	; (800bfdc <siprintf+0x38>)
 800bfb6:	9107      	str	r1, [sp, #28]
 800bfb8:	9104      	str	r1, [sp, #16]
 800bfba:	4909      	ldr	r1, [pc, #36]	; (800bfe0 <siprintf+0x3c>)
 800bfbc:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfc0:	9105      	str	r1, [sp, #20]
 800bfc2:	6800      	ldr	r0, [r0, #0]
 800bfc4:	9301      	str	r3, [sp, #4]
 800bfc6:	a902      	add	r1, sp, #8
 800bfc8:	f000 f992 	bl	800c2f0 <_svfiprintf_r>
 800bfcc:	9b02      	ldr	r3, [sp, #8]
 800bfce:	2200      	movs	r2, #0
 800bfd0:	701a      	strb	r2, [r3, #0]
 800bfd2:	b01c      	add	sp, #112	; 0x70
 800bfd4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bfd8:	b003      	add	sp, #12
 800bfda:	4770      	bx	lr
 800bfdc:	2000006c 	.word	0x2000006c
 800bfe0:	ffff0208 	.word	0xffff0208

0800bfe4 <memset>:
 800bfe4:	4402      	add	r2, r0
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	d100      	bne.n	800bfee <memset+0xa>
 800bfec:	4770      	bx	lr
 800bfee:	f803 1b01 	strb.w	r1, [r3], #1
 800bff2:	e7f9      	b.n	800bfe8 <memset+0x4>

0800bff4 <__errno>:
 800bff4:	4b01      	ldr	r3, [pc, #4]	; (800bffc <__errno+0x8>)
 800bff6:	6818      	ldr	r0, [r3, #0]
 800bff8:	4770      	bx	lr
 800bffa:	bf00      	nop
 800bffc:	2000006c 	.word	0x2000006c

0800c000 <__libc_init_array>:
 800c000:	b570      	push	{r4, r5, r6, lr}
 800c002:	4d0d      	ldr	r5, [pc, #52]	; (800c038 <__libc_init_array+0x38>)
 800c004:	4c0d      	ldr	r4, [pc, #52]	; (800c03c <__libc_init_array+0x3c>)
 800c006:	1b64      	subs	r4, r4, r5
 800c008:	10a4      	asrs	r4, r4, #2
 800c00a:	2600      	movs	r6, #0
 800c00c:	42a6      	cmp	r6, r4
 800c00e:	d109      	bne.n	800c024 <__libc_init_array+0x24>
 800c010:	4d0b      	ldr	r5, [pc, #44]	; (800c040 <__libc_init_array+0x40>)
 800c012:	4c0c      	ldr	r4, [pc, #48]	; (800c044 <__libc_init_array+0x44>)
 800c014:	f000 fc6a 	bl	800c8ec <_init>
 800c018:	1b64      	subs	r4, r4, r5
 800c01a:	10a4      	asrs	r4, r4, #2
 800c01c:	2600      	movs	r6, #0
 800c01e:	42a6      	cmp	r6, r4
 800c020:	d105      	bne.n	800c02e <__libc_init_array+0x2e>
 800c022:	bd70      	pop	{r4, r5, r6, pc}
 800c024:	f855 3b04 	ldr.w	r3, [r5], #4
 800c028:	4798      	blx	r3
 800c02a:	3601      	adds	r6, #1
 800c02c:	e7ee      	b.n	800c00c <__libc_init_array+0xc>
 800c02e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c032:	4798      	blx	r3
 800c034:	3601      	adds	r6, #1
 800c036:	e7f2      	b.n	800c01e <__libc_init_array+0x1e>
 800c038:	0800ca18 	.word	0x0800ca18
 800c03c:	0800ca18 	.word	0x0800ca18
 800c040:	0800ca18 	.word	0x0800ca18
 800c044:	0800ca1c 	.word	0x0800ca1c

0800c048 <__retarget_lock_acquire_recursive>:
 800c048:	4770      	bx	lr

0800c04a <__retarget_lock_release_recursive>:
 800c04a:	4770      	bx	lr

0800c04c <_free_r>:
 800c04c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c04e:	2900      	cmp	r1, #0
 800c050:	d044      	beq.n	800c0dc <_free_r+0x90>
 800c052:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c056:	9001      	str	r0, [sp, #4]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	f1a1 0404 	sub.w	r4, r1, #4
 800c05e:	bfb8      	it	lt
 800c060:	18e4      	addlt	r4, r4, r3
 800c062:	f000 f8df 	bl	800c224 <__malloc_lock>
 800c066:	4a1e      	ldr	r2, [pc, #120]	; (800c0e0 <_free_r+0x94>)
 800c068:	9801      	ldr	r0, [sp, #4]
 800c06a:	6813      	ldr	r3, [r2, #0]
 800c06c:	b933      	cbnz	r3, 800c07c <_free_r+0x30>
 800c06e:	6063      	str	r3, [r4, #4]
 800c070:	6014      	str	r4, [r2, #0]
 800c072:	b003      	add	sp, #12
 800c074:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c078:	f000 b8da 	b.w	800c230 <__malloc_unlock>
 800c07c:	42a3      	cmp	r3, r4
 800c07e:	d908      	bls.n	800c092 <_free_r+0x46>
 800c080:	6825      	ldr	r5, [r4, #0]
 800c082:	1961      	adds	r1, r4, r5
 800c084:	428b      	cmp	r3, r1
 800c086:	bf01      	itttt	eq
 800c088:	6819      	ldreq	r1, [r3, #0]
 800c08a:	685b      	ldreq	r3, [r3, #4]
 800c08c:	1949      	addeq	r1, r1, r5
 800c08e:	6021      	streq	r1, [r4, #0]
 800c090:	e7ed      	b.n	800c06e <_free_r+0x22>
 800c092:	461a      	mov	r2, r3
 800c094:	685b      	ldr	r3, [r3, #4]
 800c096:	b10b      	cbz	r3, 800c09c <_free_r+0x50>
 800c098:	42a3      	cmp	r3, r4
 800c09a:	d9fa      	bls.n	800c092 <_free_r+0x46>
 800c09c:	6811      	ldr	r1, [r2, #0]
 800c09e:	1855      	adds	r5, r2, r1
 800c0a0:	42a5      	cmp	r5, r4
 800c0a2:	d10b      	bne.n	800c0bc <_free_r+0x70>
 800c0a4:	6824      	ldr	r4, [r4, #0]
 800c0a6:	4421      	add	r1, r4
 800c0a8:	1854      	adds	r4, r2, r1
 800c0aa:	42a3      	cmp	r3, r4
 800c0ac:	6011      	str	r1, [r2, #0]
 800c0ae:	d1e0      	bne.n	800c072 <_free_r+0x26>
 800c0b0:	681c      	ldr	r4, [r3, #0]
 800c0b2:	685b      	ldr	r3, [r3, #4]
 800c0b4:	6053      	str	r3, [r2, #4]
 800c0b6:	440c      	add	r4, r1
 800c0b8:	6014      	str	r4, [r2, #0]
 800c0ba:	e7da      	b.n	800c072 <_free_r+0x26>
 800c0bc:	d902      	bls.n	800c0c4 <_free_r+0x78>
 800c0be:	230c      	movs	r3, #12
 800c0c0:	6003      	str	r3, [r0, #0]
 800c0c2:	e7d6      	b.n	800c072 <_free_r+0x26>
 800c0c4:	6825      	ldr	r5, [r4, #0]
 800c0c6:	1961      	adds	r1, r4, r5
 800c0c8:	428b      	cmp	r3, r1
 800c0ca:	bf04      	itt	eq
 800c0cc:	6819      	ldreq	r1, [r3, #0]
 800c0ce:	685b      	ldreq	r3, [r3, #4]
 800c0d0:	6063      	str	r3, [r4, #4]
 800c0d2:	bf04      	itt	eq
 800c0d4:	1949      	addeq	r1, r1, r5
 800c0d6:	6021      	streq	r1, [r4, #0]
 800c0d8:	6054      	str	r4, [r2, #4]
 800c0da:	e7ca      	b.n	800c072 <_free_r+0x26>
 800c0dc:	b003      	add	sp, #12
 800c0de:	bd30      	pop	{r4, r5, pc}
 800c0e0:	20000888 	.word	0x20000888

0800c0e4 <sbrk_aligned>:
 800c0e4:	b570      	push	{r4, r5, r6, lr}
 800c0e6:	4e0e      	ldr	r6, [pc, #56]	; (800c120 <sbrk_aligned+0x3c>)
 800c0e8:	460c      	mov	r4, r1
 800c0ea:	6831      	ldr	r1, [r6, #0]
 800c0ec:	4605      	mov	r5, r0
 800c0ee:	b911      	cbnz	r1, 800c0f6 <sbrk_aligned+0x12>
 800c0f0:	f000 fba6 	bl	800c840 <_sbrk_r>
 800c0f4:	6030      	str	r0, [r6, #0]
 800c0f6:	4621      	mov	r1, r4
 800c0f8:	4628      	mov	r0, r5
 800c0fa:	f000 fba1 	bl	800c840 <_sbrk_r>
 800c0fe:	1c43      	adds	r3, r0, #1
 800c100:	d00a      	beq.n	800c118 <sbrk_aligned+0x34>
 800c102:	1cc4      	adds	r4, r0, #3
 800c104:	f024 0403 	bic.w	r4, r4, #3
 800c108:	42a0      	cmp	r0, r4
 800c10a:	d007      	beq.n	800c11c <sbrk_aligned+0x38>
 800c10c:	1a21      	subs	r1, r4, r0
 800c10e:	4628      	mov	r0, r5
 800c110:	f000 fb96 	bl	800c840 <_sbrk_r>
 800c114:	3001      	adds	r0, #1
 800c116:	d101      	bne.n	800c11c <sbrk_aligned+0x38>
 800c118:	f04f 34ff 	mov.w	r4, #4294967295
 800c11c:	4620      	mov	r0, r4
 800c11e:	bd70      	pop	{r4, r5, r6, pc}
 800c120:	2000088c 	.word	0x2000088c

0800c124 <_malloc_r>:
 800c124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c128:	1ccd      	adds	r5, r1, #3
 800c12a:	f025 0503 	bic.w	r5, r5, #3
 800c12e:	3508      	adds	r5, #8
 800c130:	2d0c      	cmp	r5, #12
 800c132:	bf38      	it	cc
 800c134:	250c      	movcc	r5, #12
 800c136:	2d00      	cmp	r5, #0
 800c138:	4607      	mov	r7, r0
 800c13a:	db01      	blt.n	800c140 <_malloc_r+0x1c>
 800c13c:	42a9      	cmp	r1, r5
 800c13e:	d905      	bls.n	800c14c <_malloc_r+0x28>
 800c140:	230c      	movs	r3, #12
 800c142:	603b      	str	r3, [r7, #0]
 800c144:	2600      	movs	r6, #0
 800c146:	4630      	mov	r0, r6
 800c148:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c14c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c220 <_malloc_r+0xfc>
 800c150:	f000 f868 	bl	800c224 <__malloc_lock>
 800c154:	f8d8 3000 	ldr.w	r3, [r8]
 800c158:	461c      	mov	r4, r3
 800c15a:	bb5c      	cbnz	r4, 800c1b4 <_malloc_r+0x90>
 800c15c:	4629      	mov	r1, r5
 800c15e:	4638      	mov	r0, r7
 800c160:	f7ff ffc0 	bl	800c0e4 <sbrk_aligned>
 800c164:	1c43      	adds	r3, r0, #1
 800c166:	4604      	mov	r4, r0
 800c168:	d155      	bne.n	800c216 <_malloc_r+0xf2>
 800c16a:	f8d8 4000 	ldr.w	r4, [r8]
 800c16e:	4626      	mov	r6, r4
 800c170:	2e00      	cmp	r6, #0
 800c172:	d145      	bne.n	800c200 <_malloc_r+0xdc>
 800c174:	2c00      	cmp	r4, #0
 800c176:	d048      	beq.n	800c20a <_malloc_r+0xe6>
 800c178:	6823      	ldr	r3, [r4, #0]
 800c17a:	4631      	mov	r1, r6
 800c17c:	4638      	mov	r0, r7
 800c17e:	eb04 0903 	add.w	r9, r4, r3
 800c182:	f000 fb5d 	bl	800c840 <_sbrk_r>
 800c186:	4581      	cmp	r9, r0
 800c188:	d13f      	bne.n	800c20a <_malloc_r+0xe6>
 800c18a:	6821      	ldr	r1, [r4, #0]
 800c18c:	1a6d      	subs	r5, r5, r1
 800c18e:	4629      	mov	r1, r5
 800c190:	4638      	mov	r0, r7
 800c192:	f7ff ffa7 	bl	800c0e4 <sbrk_aligned>
 800c196:	3001      	adds	r0, #1
 800c198:	d037      	beq.n	800c20a <_malloc_r+0xe6>
 800c19a:	6823      	ldr	r3, [r4, #0]
 800c19c:	442b      	add	r3, r5
 800c19e:	6023      	str	r3, [r4, #0]
 800c1a0:	f8d8 3000 	ldr.w	r3, [r8]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d038      	beq.n	800c21a <_malloc_r+0xf6>
 800c1a8:	685a      	ldr	r2, [r3, #4]
 800c1aa:	42a2      	cmp	r2, r4
 800c1ac:	d12b      	bne.n	800c206 <_malloc_r+0xe2>
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	605a      	str	r2, [r3, #4]
 800c1b2:	e00f      	b.n	800c1d4 <_malloc_r+0xb0>
 800c1b4:	6822      	ldr	r2, [r4, #0]
 800c1b6:	1b52      	subs	r2, r2, r5
 800c1b8:	d41f      	bmi.n	800c1fa <_malloc_r+0xd6>
 800c1ba:	2a0b      	cmp	r2, #11
 800c1bc:	d917      	bls.n	800c1ee <_malloc_r+0xca>
 800c1be:	1961      	adds	r1, r4, r5
 800c1c0:	42a3      	cmp	r3, r4
 800c1c2:	6025      	str	r5, [r4, #0]
 800c1c4:	bf18      	it	ne
 800c1c6:	6059      	strne	r1, [r3, #4]
 800c1c8:	6863      	ldr	r3, [r4, #4]
 800c1ca:	bf08      	it	eq
 800c1cc:	f8c8 1000 	streq.w	r1, [r8]
 800c1d0:	5162      	str	r2, [r4, r5]
 800c1d2:	604b      	str	r3, [r1, #4]
 800c1d4:	4638      	mov	r0, r7
 800c1d6:	f104 060b 	add.w	r6, r4, #11
 800c1da:	f000 f829 	bl	800c230 <__malloc_unlock>
 800c1de:	f026 0607 	bic.w	r6, r6, #7
 800c1e2:	1d23      	adds	r3, r4, #4
 800c1e4:	1af2      	subs	r2, r6, r3
 800c1e6:	d0ae      	beq.n	800c146 <_malloc_r+0x22>
 800c1e8:	1b9b      	subs	r3, r3, r6
 800c1ea:	50a3      	str	r3, [r4, r2]
 800c1ec:	e7ab      	b.n	800c146 <_malloc_r+0x22>
 800c1ee:	42a3      	cmp	r3, r4
 800c1f0:	6862      	ldr	r2, [r4, #4]
 800c1f2:	d1dd      	bne.n	800c1b0 <_malloc_r+0x8c>
 800c1f4:	f8c8 2000 	str.w	r2, [r8]
 800c1f8:	e7ec      	b.n	800c1d4 <_malloc_r+0xb0>
 800c1fa:	4623      	mov	r3, r4
 800c1fc:	6864      	ldr	r4, [r4, #4]
 800c1fe:	e7ac      	b.n	800c15a <_malloc_r+0x36>
 800c200:	4634      	mov	r4, r6
 800c202:	6876      	ldr	r6, [r6, #4]
 800c204:	e7b4      	b.n	800c170 <_malloc_r+0x4c>
 800c206:	4613      	mov	r3, r2
 800c208:	e7cc      	b.n	800c1a4 <_malloc_r+0x80>
 800c20a:	230c      	movs	r3, #12
 800c20c:	603b      	str	r3, [r7, #0]
 800c20e:	4638      	mov	r0, r7
 800c210:	f000 f80e 	bl	800c230 <__malloc_unlock>
 800c214:	e797      	b.n	800c146 <_malloc_r+0x22>
 800c216:	6025      	str	r5, [r4, #0]
 800c218:	e7dc      	b.n	800c1d4 <_malloc_r+0xb0>
 800c21a:	605b      	str	r3, [r3, #4]
 800c21c:	deff      	udf	#255	; 0xff
 800c21e:	bf00      	nop
 800c220:	20000888 	.word	0x20000888

0800c224 <__malloc_lock>:
 800c224:	4801      	ldr	r0, [pc, #4]	; (800c22c <__malloc_lock+0x8>)
 800c226:	f7ff bf0f 	b.w	800c048 <__retarget_lock_acquire_recursive>
 800c22a:	bf00      	nop
 800c22c:	20000884 	.word	0x20000884

0800c230 <__malloc_unlock>:
 800c230:	4801      	ldr	r0, [pc, #4]	; (800c238 <__malloc_unlock+0x8>)
 800c232:	f7ff bf0a 	b.w	800c04a <__retarget_lock_release_recursive>
 800c236:	bf00      	nop
 800c238:	20000884 	.word	0x20000884

0800c23c <__ssputs_r>:
 800c23c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c240:	688e      	ldr	r6, [r1, #8]
 800c242:	461f      	mov	r7, r3
 800c244:	42be      	cmp	r6, r7
 800c246:	680b      	ldr	r3, [r1, #0]
 800c248:	4682      	mov	sl, r0
 800c24a:	460c      	mov	r4, r1
 800c24c:	4690      	mov	r8, r2
 800c24e:	d82c      	bhi.n	800c2aa <__ssputs_r+0x6e>
 800c250:	898a      	ldrh	r2, [r1, #12]
 800c252:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c256:	d026      	beq.n	800c2a6 <__ssputs_r+0x6a>
 800c258:	6965      	ldr	r5, [r4, #20]
 800c25a:	6909      	ldr	r1, [r1, #16]
 800c25c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c260:	eba3 0901 	sub.w	r9, r3, r1
 800c264:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c268:	1c7b      	adds	r3, r7, #1
 800c26a:	444b      	add	r3, r9
 800c26c:	106d      	asrs	r5, r5, #1
 800c26e:	429d      	cmp	r5, r3
 800c270:	bf38      	it	cc
 800c272:	461d      	movcc	r5, r3
 800c274:	0553      	lsls	r3, r2, #21
 800c276:	d527      	bpl.n	800c2c8 <__ssputs_r+0x8c>
 800c278:	4629      	mov	r1, r5
 800c27a:	f7ff ff53 	bl	800c124 <_malloc_r>
 800c27e:	4606      	mov	r6, r0
 800c280:	b360      	cbz	r0, 800c2dc <__ssputs_r+0xa0>
 800c282:	6921      	ldr	r1, [r4, #16]
 800c284:	464a      	mov	r2, r9
 800c286:	f000 faeb 	bl	800c860 <memcpy>
 800c28a:	89a3      	ldrh	r3, [r4, #12]
 800c28c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c290:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c294:	81a3      	strh	r3, [r4, #12]
 800c296:	6126      	str	r6, [r4, #16]
 800c298:	6165      	str	r5, [r4, #20]
 800c29a:	444e      	add	r6, r9
 800c29c:	eba5 0509 	sub.w	r5, r5, r9
 800c2a0:	6026      	str	r6, [r4, #0]
 800c2a2:	60a5      	str	r5, [r4, #8]
 800c2a4:	463e      	mov	r6, r7
 800c2a6:	42be      	cmp	r6, r7
 800c2a8:	d900      	bls.n	800c2ac <__ssputs_r+0x70>
 800c2aa:	463e      	mov	r6, r7
 800c2ac:	6820      	ldr	r0, [r4, #0]
 800c2ae:	4632      	mov	r2, r6
 800c2b0:	4641      	mov	r1, r8
 800c2b2:	f000 faab 	bl	800c80c <memmove>
 800c2b6:	68a3      	ldr	r3, [r4, #8]
 800c2b8:	1b9b      	subs	r3, r3, r6
 800c2ba:	60a3      	str	r3, [r4, #8]
 800c2bc:	6823      	ldr	r3, [r4, #0]
 800c2be:	4433      	add	r3, r6
 800c2c0:	6023      	str	r3, [r4, #0]
 800c2c2:	2000      	movs	r0, #0
 800c2c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2c8:	462a      	mov	r2, r5
 800c2ca:	f000 fad7 	bl	800c87c <_realloc_r>
 800c2ce:	4606      	mov	r6, r0
 800c2d0:	2800      	cmp	r0, #0
 800c2d2:	d1e0      	bne.n	800c296 <__ssputs_r+0x5a>
 800c2d4:	6921      	ldr	r1, [r4, #16]
 800c2d6:	4650      	mov	r0, sl
 800c2d8:	f7ff feb8 	bl	800c04c <_free_r>
 800c2dc:	230c      	movs	r3, #12
 800c2de:	f8ca 3000 	str.w	r3, [sl]
 800c2e2:	89a3      	ldrh	r3, [r4, #12]
 800c2e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2e8:	81a3      	strh	r3, [r4, #12]
 800c2ea:	f04f 30ff 	mov.w	r0, #4294967295
 800c2ee:	e7e9      	b.n	800c2c4 <__ssputs_r+0x88>

0800c2f0 <_svfiprintf_r>:
 800c2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2f4:	4698      	mov	r8, r3
 800c2f6:	898b      	ldrh	r3, [r1, #12]
 800c2f8:	061b      	lsls	r3, r3, #24
 800c2fa:	b09d      	sub	sp, #116	; 0x74
 800c2fc:	4607      	mov	r7, r0
 800c2fe:	460d      	mov	r5, r1
 800c300:	4614      	mov	r4, r2
 800c302:	d50e      	bpl.n	800c322 <_svfiprintf_r+0x32>
 800c304:	690b      	ldr	r3, [r1, #16]
 800c306:	b963      	cbnz	r3, 800c322 <_svfiprintf_r+0x32>
 800c308:	2140      	movs	r1, #64	; 0x40
 800c30a:	f7ff ff0b 	bl	800c124 <_malloc_r>
 800c30e:	6028      	str	r0, [r5, #0]
 800c310:	6128      	str	r0, [r5, #16]
 800c312:	b920      	cbnz	r0, 800c31e <_svfiprintf_r+0x2e>
 800c314:	230c      	movs	r3, #12
 800c316:	603b      	str	r3, [r7, #0]
 800c318:	f04f 30ff 	mov.w	r0, #4294967295
 800c31c:	e0d0      	b.n	800c4c0 <_svfiprintf_r+0x1d0>
 800c31e:	2340      	movs	r3, #64	; 0x40
 800c320:	616b      	str	r3, [r5, #20]
 800c322:	2300      	movs	r3, #0
 800c324:	9309      	str	r3, [sp, #36]	; 0x24
 800c326:	2320      	movs	r3, #32
 800c328:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c32c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c330:	2330      	movs	r3, #48	; 0x30
 800c332:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c4d8 <_svfiprintf_r+0x1e8>
 800c336:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c33a:	f04f 0901 	mov.w	r9, #1
 800c33e:	4623      	mov	r3, r4
 800c340:	469a      	mov	sl, r3
 800c342:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c346:	b10a      	cbz	r2, 800c34c <_svfiprintf_r+0x5c>
 800c348:	2a25      	cmp	r2, #37	; 0x25
 800c34a:	d1f9      	bne.n	800c340 <_svfiprintf_r+0x50>
 800c34c:	ebba 0b04 	subs.w	fp, sl, r4
 800c350:	d00b      	beq.n	800c36a <_svfiprintf_r+0x7a>
 800c352:	465b      	mov	r3, fp
 800c354:	4622      	mov	r2, r4
 800c356:	4629      	mov	r1, r5
 800c358:	4638      	mov	r0, r7
 800c35a:	f7ff ff6f 	bl	800c23c <__ssputs_r>
 800c35e:	3001      	adds	r0, #1
 800c360:	f000 80a9 	beq.w	800c4b6 <_svfiprintf_r+0x1c6>
 800c364:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c366:	445a      	add	r2, fp
 800c368:	9209      	str	r2, [sp, #36]	; 0x24
 800c36a:	f89a 3000 	ldrb.w	r3, [sl]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	f000 80a1 	beq.w	800c4b6 <_svfiprintf_r+0x1c6>
 800c374:	2300      	movs	r3, #0
 800c376:	f04f 32ff 	mov.w	r2, #4294967295
 800c37a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c37e:	f10a 0a01 	add.w	sl, sl, #1
 800c382:	9304      	str	r3, [sp, #16]
 800c384:	9307      	str	r3, [sp, #28]
 800c386:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c38a:	931a      	str	r3, [sp, #104]	; 0x68
 800c38c:	4654      	mov	r4, sl
 800c38e:	2205      	movs	r2, #5
 800c390:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c394:	4850      	ldr	r0, [pc, #320]	; (800c4d8 <_svfiprintf_r+0x1e8>)
 800c396:	f7f3 ff1b 	bl	80001d0 <memchr>
 800c39a:	9a04      	ldr	r2, [sp, #16]
 800c39c:	b9d8      	cbnz	r0, 800c3d6 <_svfiprintf_r+0xe6>
 800c39e:	06d0      	lsls	r0, r2, #27
 800c3a0:	bf44      	itt	mi
 800c3a2:	2320      	movmi	r3, #32
 800c3a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c3a8:	0711      	lsls	r1, r2, #28
 800c3aa:	bf44      	itt	mi
 800c3ac:	232b      	movmi	r3, #43	; 0x2b
 800c3ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c3b2:	f89a 3000 	ldrb.w	r3, [sl]
 800c3b6:	2b2a      	cmp	r3, #42	; 0x2a
 800c3b8:	d015      	beq.n	800c3e6 <_svfiprintf_r+0xf6>
 800c3ba:	9a07      	ldr	r2, [sp, #28]
 800c3bc:	4654      	mov	r4, sl
 800c3be:	2000      	movs	r0, #0
 800c3c0:	f04f 0c0a 	mov.w	ip, #10
 800c3c4:	4621      	mov	r1, r4
 800c3c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c3ca:	3b30      	subs	r3, #48	; 0x30
 800c3cc:	2b09      	cmp	r3, #9
 800c3ce:	d94d      	bls.n	800c46c <_svfiprintf_r+0x17c>
 800c3d0:	b1b0      	cbz	r0, 800c400 <_svfiprintf_r+0x110>
 800c3d2:	9207      	str	r2, [sp, #28]
 800c3d4:	e014      	b.n	800c400 <_svfiprintf_r+0x110>
 800c3d6:	eba0 0308 	sub.w	r3, r0, r8
 800c3da:	fa09 f303 	lsl.w	r3, r9, r3
 800c3de:	4313      	orrs	r3, r2
 800c3e0:	9304      	str	r3, [sp, #16]
 800c3e2:	46a2      	mov	sl, r4
 800c3e4:	e7d2      	b.n	800c38c <_svfiprintf_r+0x9c>
 800c3e6:	9b03      	ldr	r3, [sp, #12]
 800c3e8:	1d19      	adds	r1, r3, #4
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	9103      	str	r1, [sp, #12]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	bfbb      	ittet	lt
 800c3f2:	425b      	neglt	r3, r3
 800c3f4:	f042 0202 	orrlt.w	r2, r2, #2
 800c3f8:	9307      	strge	r3, [sp, #28]
 800c3fa:	9307      	strlt	r3, [sp, #28]
 800c3fc:	bfb8      	it	lt
 800c3fe:	9204      	strlt	r2, [sp, #16]
 800c400:	7823      	ldrb	r3, [r4, #0]
 800c402:	2b2e      	cmp	r3, #46	; 0x2e
 800c404:	d10c      	bne.n	800c420 <_svfiprintf_r+0x130>
 800c406:	7863      	ldrb	r3, [r4, #1]
 800c408:	2b2a      	cmp	r3, #42	; 0x2a
 800c40a:	d134      	bne.n	800c476 <_svfiprintf_r+0x186>
 800c40c:	9b03      	ldr	r3, [sp, #12]
 800c40e:	1d1a      	adds	r2, r3, #4
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	9203      	str	r2, [sp, #12]
 800c414:	2b00      	cmp	r3, #0
 800c416:	bfb8      	it	lt
 800c418:	f04f 33ff 	movlt.w	r3, #4294967295
 800c41c:	3402      	adds	r4, #2
 800c41e:	9305      	str	r3, [sp, #20]
 800c420:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c4e8 <_svfiprintf_r+0x1f8>
 800c424:	7821      	ldrb	r1, [r4, #0]
 800c426:	2203      	movs	r2, #3
 800c428:	4650      	mov	r0, sl
 800c42a:	f7f3 fed1 	bl	80001d0 <memchr>
 800c42e:	b138      	cbz	r0, 800c440 <_svfiprintf_r+0x150>
 800c430:	9b04      	ldr	r3, [sp, #16]
 800c432:	eba0 000a 	sub.w	r0, r0, sl
 800c436:	2240      	movs	r2, #64	; 0x40
 800c438:	4082      	lsls	r2, r0
 800c43a:	4313      	orrs	r3, r2
 800c43c:	3401      	adds	r4, #1
 800c43e:	9304      	str	r3, [sp, #16]
 800c440:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c444:	4825      	ldr	r0, [pc, #148]	; (800c4dc <_svfiprintf_r+0x1ec>)
 800c446:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c44a:	2206      	movs	r2, #6
 800c44c:	f7f3 fec0 	bl	80001d0 <memchr>
 800c450:	2800      	cmp	r0, #0
 800c452:	d038      	beq.n	800c4c6 <_svfiprintf_r+0x1d6>
 800c454:	4b22      	ldr	r3, [pc, #136]	; (800c4e0 <_svfiprintf_r+0x1f0>)
 800c456:	bb1b      	cbnz	r3, 800c4a0 <_svfiprintf_r+0x1b0>
 800c458:	9b03      	ldr	r3, [sp, #12]
 800c45a:	3307      	adds	r3, #7
 800c45c:	f023 0307 	bic.w	r3, r3, #7
 800c460:	3308      	adds	r3, #8
 800c462:	9303      	str	r3, [sp, #12]
 800c464:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c466:	4433      	add	r3, r6
 800c468:	9309      	str	r3, [sp, #36]	; 0x24
 800c46a:	e768      	b.n	800c33e <_svfiprintf_r+0x4e>
 800c46c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c470:	460c      	mov	r4, r1
 800c472:	2001      	movs	r0, #1
 800c474:	e7a6      	b.n	800c3c4 <_svfiprintf_r+0xd4>
 800c476:	2300      	movs	r3, #0
 800c478:	3401      	adds	r4, #1
 800c47a:	9305      	str	r3, [sp, #20]
 800c47c:	4619      	mov	r1, r3
 800c47e:	f04f 0c0a 	mov.w	ip, #10
 800c482:	4620      	mov	r0, r4
 800c484:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c488:	3a30      	subs	r2, #48	; 0x30
 800c48a:	2a09      	cmp	r2, #9
 800c48c:	d903      	bls.n	800c496 <_svfiprintf_r+0x1a6>
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d0c6      	beq.n	800c420 <_svfiprintf_r+0x130>
 800c492:	9105      	str	r1, [sp, #20]
 800c494:	e7c4      	b.n	800c420 <_svfiprintf_r+0x130>
 800c496:	fb0c 2101 	mla	r1, ip, r1, r2
 800c49a:	4604      	mov	r4, r0
 800c49c:	2301      	movs	r3, #1
 800c49e:	e7f0      	b.n	800c482 <_svfiprintf_r+0x192>
 800c4a0:	ab03      	add	r3, sp, #12
 800c4a2:	9300      	str	r3, [sp, #0]
 800c4a4:	462a      	mov	r2, r5
 800c4a6:	4b0f      	ldr	r3, [pc, #60]	; (800c4e4 <_svfiprintf_r+0x1f4>)
 800c4a8:	a904      	add	r1, sp, #16
 800c4aa:	4638      	mov	r0, r7
 800c4ac:	f3af 8000 	nop.w
 800c4b0:	1c42      	adds	r2, r0, #1
 800c4b2:	4606      	mov	r6, r0
 800c4b4:	d1d6      	bne.n	800c464 <_svfiprintf_r+0x174>
 800c4b6:	89ab      	ldrh	r3, [r5, #12]
 800c4b8:	065b      	lsls	r3, r3, #25
 800c4ba:	f53f af2d 	bmi.w	800c318 <_svfiprintf_r+0x28>
 800c4be:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c4c0:	b01d      	add	sp, #116	; 0x74
 800c4c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4c6:	ab03      	add	r3, sp, #12
 800c4c8:	9300      	str	r3, [sp, #0]
 800c4ca:	462a      	mov	r2, r5
 800c4cc:	4b05      	ldr	r3, [pc, #20]	; (800c4e4 <_svfiprintf_r+0x1f4>)
 800c4ce:	a904      	add	r1, sp, #16
 800c4d0:	4638      	mov	r0, r7
 800c4d2:	f000 f879 	bl	800c5c8 <_printf_i>
 800c4d6:	e7eb      	b.n	800c4b0 <_svfiprintf_r+0x1c0>
 800c4d8:	0800c9e4 	.word	0x0800c9e4
 800c4dc:	0800c9ee 	.word	0x0800c9ee
 800c4e0:	00000000 	.word	0x00000000
 800c4e4:	0800c23d 	.word	0x0800c23d
 800c4e8:	0800c9ea 	.word	0x0800c9ea

0800c4ec <_printf_common>:
 800c4ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4f0:	4616      	mov	r6, r2
 800c4f2:	4699      	mov	r9, r3
 800c4f4:	688a      	ldr	r2, [r1, #8]
 800c4f6:	690b      	ldr	r3, [r1, #16]
 800c4f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c4fc:	4293      	cmp	r3, r2
 800c4fe:	bfb8      	it	lt
 800c500:	4613      	movlt	r3, r2
 800c502:	6033      	str	r3, [r6, #0]
 800c504:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c508:	4607      	mov	r7, r0
 800c50a:	460c      	mov	r4, r1
 800c50c:	b10a      	cbz	r2, 800c512 <_printf_common+0x26>
 800c50e:	3301      	adds	r3, #1
 800c510:	6033      	str	r3, [r6, #0]
 800c512:	6823      	ldr	r3, [r4, #0]
 800c514:	0699      	lsls	r1, r3, #26
 800c516:	bf42      	ittt	mi
 800c518:	6833      	ldrmi	r3, [r6, #0]
 800c51a:	3302      	addmi	r3, #2
 800c51c:	6033      	strmi	r3, [r6, #0]
 800c51e:	6825      	ldr	r5, [r4, #0]
 800c520:	f015 0506 	ands.w	r5, r5, #6
 800c524:	d106      	bne.n	800c534 <_printf_common+0x48>
 800c526:	f104 0a19 	add.w	sl, r4, #25
 800c52a:	68e3      	ldr	r3, [r4, #12]
 800c52c:	6832      	ldr	r2, [r6, #0]
 800c52e:	1a9b      	subs	r3, r3, r2
 800c530:	42ab      	cmp	r3, r5
 800c532:	dc26      	bgt.n	800c582 <_printf_common+0x96>
 800c534:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c538:	1e13      	subs	r3, r2, #0
 800c53a:	6822      	ldr	r2, [r4, #0]
 800c53c:	bf18      	it	ne
 800c53e:	2301      	movne	r3, #1
 800c540:	0692      	lsls	r2, r2, #26
 800c542:	d42b      	bmi.n	800c59c <_printf_common+0xb0>
 800c544:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c548:	4649      	mov	r1, r9
 800c54a:	4638      	mov	r0, r7
 800c54c:	47c0      	blx	r8
 800c54e:	3001      	adds	r0, #1
 800c550:	d01e      	beq.n	800c590 <_printf_common+0xa4>
 800c552:	6823      	ldr	r3, [r4, #0]
 800c554:	6922      	ldr	r2, [r4, #16]
 800c556:	f003 0306 	and.w	r3, r3, #6
 800c55a:	2b04      	cmp	r3, #4
 800c55c:	bf02      	ittt	eq
 800c55e:	68e5      	ldreq	r5, [r4, #12]
 800c560:	6833      	ldreq	r3, [r6, #0]
 800c562:	1aed      	subeq	r5, r5, r3
 800c564:	68a3      	ldr	r3, [r4, #8]
 800c566:	bf0c      	ite	eq
 800c568:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c56c:	2500      	movne	r5, #0
 800c56e:	4293      	cmp	r3, r2
 800c570:	bfc4      	itt	gt
 800c572:	1a9b      	subgt	r3, r3, r2
 800c574:	18ed      	addgt	r5, r5, r3
 800c576:	2600      	movs	r6, #0
 800c578:	341a      	adds	r4, #26
 800c57a:	42b5      	cmp	r5, r6
 800c57c:	d11a      	bne.n	800c5b4 <_printf_common+0xc8>
 800c57e:	2000      	movs	r0, #0
 800c580:	e008      	b.n	800c594 <_printf_common+0xa8>
 800c582:	2301      	movs	r3, #1
 800c584:	4652      	mov	r2, sl
 800c586:	4649      	mov	r1, r9
 800c588:	4638      	mov	r0, r7
 800c58a:	47c0      	blx	r8
 800c58c:	3001      	adds	r0, #1
 800c58e:	d103      	bne.n	800c598 <_printf_common+0xac>
 800c590:	f04f 30ff 	mov.w	r0, #4294967295
 800c594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c598:	3501      	adds	r5, #1
 800c59a:	e7c6      	b.n	800c52a <_printf_common+0x3e>
 800c59c:	18e1      	adds	r1, r4, r3
 800c59e:	1c5a      	adds	r2, r3, #1
 800c5a0:	2030      	movs	r0, #48	; 0x30
 800c5a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c5a6:	4422      	add	r2, r4
 800c5a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c5ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c5b0:	3302      	adds	r3, #2
 800c5b2:	e7c7      	b.n	800c544 <_printf_common+0x58>
 800c5b4:	2301      	movs	r3, #1
 800c5b6:	4622      	mov	r2, r4
 800c5b8:	4649      	mov	r1, r9
 800c5ba:	4638      	mov	r0, r7
 800c5bc:	47c0      	blx	r8
 800c5be:	3001      	adds	r0, #1
 800c5c0:	d0e6      	beq.n	800c590 <_printf_common+0xa4>
 800c5c2:	3601      	adds	r6, #1
 800c5c4:	e7d9      	b.n	800c57a <_printf_common+0x8e>
	...

0800c5c8 <_printf_i>:
 800c5c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c5cc:	7e0f      	ldrb	r7, [r1, #24]
 800c5ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c5d0:	2f78      	cmp	r7, #120	; 0x78
 800c5d2:	4691      	mov	r9, r2
 800c5d4:	4680      	mov	r8, r0
 800c5d6:	460c      	mov	r4, r1
 800c5d8:	469a      	mov	sl, r3
 800c5da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c5de:	d807      	bhi.n	800c5f0 <_printf_i+0x28>
 800c5e0:	2f62      	cmp	r7, #98	; 0x62
 800c5e2:	d80a      	bhi.n	800c5fa <_printf_i+0x32>
 800c5e4:	2f00      	cmp	r7, #0
 800c5e6:	f000 80d4 	beq.w	800c792 <_printf_i+0x1ca>
 800c5ea:	2f58      	cmp	r7, #88	; 0x58
 800c5ec:	f000 80c0 	beq.w	800c770 <_printf_i+0x1a8>
 800c5f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c5f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c5f8:	e03a      	b.n	800c670 <_printf_i+0xa8>
 800c5fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c5fe:	2b15      	cmp	r3, #21
 800c600:	d8f6      	bhi.n	800c5f0 <_printf_i+0x28>
 800c602:	a101      	add	r1, pc, #4	; (adr r1, 800c608 <_printf_i+0x40>)
 800c604:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c608:	0800c661 	.word	0x0800c661
 800c60c:	0800c675 	.word	0x0800c675
 800c610:	0800c5f1 	.word	0x0800c5f1
 800c614:	0800c5f1 	.word	0x0800c5f1
 800c618:	0800c5f1 	.word	0x0800c5f1
 800c61c:	0800c5f1 	.word	0x0800c5f1
 800c620:	0800c675 	.word	0x0800c675
 800c624:	0800c5f1 	.word	0x0800c5f1
 800c628:	0800c5f1 	.word	0x0800c5f1
 800c62c:	0800c5f1 	.word	0x0800c5f1
 800c630:	0800c5f1 	.word	0x0800c5f1
 800c634:	0800c779 	.word	0x0800c779
 800c638:	0800c6a1 	.word	0x0800c6a1
 800c63c:	0800c733 	.word	0x0800c733
 800c640:	0800c5f1 	.word	0x0800c5f1
 800c644:	0800c5f1 	.word	0x0800c5f1
 800c648:	0800c79b 	.word	0x0800c79b
 800c64c:	0800c5f1 	.word	0x0800c5f1
 800c650:	0800c6a1 	.word	0x0800c6a1
 800c654:	0800c5f1 	.word	0x0800c5f1
 800c658:	0800c5f1 	.word	0x0800c5f1
 800c65c:	0800c73b 	.word	0x0800c73b
 800c660:	682b      	ldr	r3, [r5, #0]
 800c662:	1d1a      	adds	r2, r3, #4
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	602a      	str	r2, [r5, #0]
 800c668:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c66c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c670:	2301      	movs	r3, #1
 800c672:	e09f      	b.n	800c7b4 <_printf_i+0x1ec>
 800c674:	6820      	ldr	r0, [r4, #0]
 800c676:	682b      	ldr	r3, [r5, #0]
 800c678:	0607      	lsls	r7, r0, #24
 800c67a:	f103 0104 	add.w	r1, r3, #4
 800c67e:	6029      	str	r1, [r5, #0]
 800c680:	d501      	bpl.n	800c686 <_printf_i+0xbe>
 800c682:	681e      	ldr	r6, [r3, #0]
 800c684:	e003      	b.n	800c68e <_printf_i+0xc6>
 800c686:	0646      	lsls	r6, r0, #25
 800c688:	d5fb      	bpl.n	800c682 <_printf_i+0xba>
 800c68a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c68e:	2e00      	cmp	r6, #0
 800c690:	da03      	bge.n	800c69a <_printf_i+0xd2>
 800c692:	232d      	movs	r3, #45	; 0x2d
 800c694:	4276      	negs	r6, r6
 800c696:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c69a:	485a      	ldr	r0, [pc, #360]	; (800c804 <_printf_i+0x23c>)
 800c69c:	230a      	movs	r3, #10
 800c69e:	e012      	b.n	800c6c6 <_printf_i+0xfe>
 800c6a0:	682b      	ldr	r3, [r5, #0]
 800c6a2:	6820      	ldr	r0, [r4, #0]
 800c6a4:	1d19      	adds	r1, r3, #4
 800c6a6:	6029      	str	r1, [r5, #0]
 800c6a8:	0605      	lsls	r5, r0, #24
 800c6aa:	d501      	bpl.n	800c6b0 <_printf_i+0xe8>
 800c6ac:	681e      	ldr	r6, [r3, #0]
 800c6ae:	e002      	b.n	800c6b6 <_printf_i+0xee>
 800c6b0:	0641      	lsls	r1, r0, #25
 800c6b2:	d5fb      	bpl.n	800c6ac <_printf_i+0xe4>
 800c6b4:	881e      	ldrh	r6, [r3, #0]
 800c6b6:	4853      	ldr	r0, [pc, #332]	; (800c804 <_printf_i+0x23c>)
 800c6b8:	2f6f      	cmp	r7, #111	; 0x6f
 800c6ba:	bf0c      	ite	eq
 800c6bc:	2308      	moveq	r3, #8
 800c6be:	230a      	movne	r3, #10
 800c6c0:	2100      	movs	r1, #0
 800c6c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c6c6:	6865      	ldr	r5, [r4, #4]
 800c6c8:	60a5      	str	r5, [r4, #8]
 800c6ca:	2d00      	cmp	r5, #0
 800c6cc:	bfa2      	ittt	ge
 800c6ce:	6821      	ldrge	r1, [r4, #0]
 800c6d0:	f021 0104 	bicge.w	r1, r1, #4
 800c6d4:	6021      	strge	r1, [r4, #0]
 800c6d6:	b90e      	cbnz	r6, 800c6dc <_printf_i+0x114>
 800c6d8:	2d00      	cmp	r5, #0
 800c6da:	d04b      	beq.n	800c774 <_printf_i+0x1ac>
 800c6dc:	4615      	mov	r5, r2
 800c6de:	fbb6 f1f3 	udiv	r1, r6, r3
 800c6e2:	fb03 6711 	mls	r7, r3, r1, r6
 800c6e6:	5dc7      	ldrb	r7, [r0, r7]
 800c6e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c6ec:	4637      	mov	r7, r6
 800c6ee:	42bb      	cmp	r3, r7
 800c6f0:	460e      	mov	r6, r1
 800c6f2:	d9f4      	bls.n	800c6de <_printf_i+0x116>
 800c6f4:	2b08      	cmp	r3, #8
 800c6f6:	d10b      	bne.n	800c710 <_printf_i+0x148>
 800c6f8:	6823      	ldr	r3, [r4, #0]
 800c6fa:	07de      	lsls	r6, r3, #31
 800c6fc:	d508      	bpl.n	800c710 <_printf_i+0x148>
 800c6fe:	6923      	ldr	r3, [r4, #16]
 800c700:	6861      	ldr	r1, [r4, #4]
 800c702:	4299      	cmp	r1, r3
 800c704:	bfde      	ittt	le
 800c706:	2330      	movle	r3, #48	; 0x30
 800c708:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c70c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c710:	1b52      	subs	r2, r2, r5
 800c712:	6122      	str	r2, [r4, #16]
 800c714:	f8cd a000 	str.w	sl, [sp]
 800c718:	464b      	mov	r3, r9
 800c71a:	aa03      	add	r2, sp, #12
 800c71c:	4621      	mov	r1, r4
 800c71e:	4640      	mov	r0, r8
 800c720:	f7ff fee4 	bl	800c4ec <_printf_common>
 800c724:	3001      	adds	r0, #1
 800c726:	d14a      	bne.n	800c7be <_printf_i+0x1f6>
 800c728:	f04f 30ff 	mov.w	r0, #4294967295
 800c72c:	b004      	add	sp, #16
 800c72e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c732:	6823      	ldr	r3, [r4, #0]
 800c734:	f043 0320 	orr.w	r3, r3, #32
 800c738:	6023      	str	r3, [r4, #0]
 800c73a:	4833      	ldr	r0, [pc, #204]	; (800c808 <_printf_i+0x240>)
 800c73c:	2778      	movs	r7, #120	; 0x78
 800c73e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c742:	6823      	ldr	r3, [r4, #0]
 800c744:	6829      	ldr	r1, [r5, #0]
 800c746:	061f      	lsls	r7, r3, #24
 800c748:	f851 6b04 	ldr.w	r6, [r1], #4
 800c74c:	d402      	bmi.n	800c754 <_printf_i+0x18c>
 800c74e:	065f      	lsls	r7, r3, #25
 800c750:	bf48      	it	mi
 800c752:	b2b6      	uxthmi	r6, r6
 800c754:	07df      	lsls	r7, r3, #31
 800c756:	bf48      	it	mi
 800c758:	f043 0320 	orrmi.w	r3, r3, #32
 800c75c:	6029      	str	r1, [r5, #0]
 800c75e:	bf48      	it	mi
 800c760:	6023      	strmi	r3, [r4, #0]
 800c762:	b91e      	cbnz	r6, 800c76c <_printf_i+0x1a4>
 800c764:	6823      	ldr	r3, [r4, #0]
 800c766:	f023 0320 	bic.w	r3, r3, #32
 800c76a:	6023      	str	r3, [r4, #0]
 800c76c:	2310      	movs	r3, #16
 800c76e:	e7a7      	b.n	800c6c0 <_printf_i+0xf8>
 800c770:	4824      	ldr	r0, [pc, #144]	; (800c804 <_printf_i+0x23c>)
 800c772:	e7e4      	b.n	800c73e <_printf_i+0x176>
 800c774:	4615      	mov	r5, r2
 800c776:	e7bd      	b.n	800c6f4 <_printf_i+0x12c>
 800c778:	682b      	ldr	r3, [r5, #0]
 800c77a:	6826      	ldr	r6, [r4, #0]
 800c77c:	6961      	ldr	r1, [r4, #20]
 800c77e:	1d18      	adds	r0, r3, #4
 800c780:	6028      	str	r0, [r5, #0]
 800c782:	0635      	lsls	r5, r6, #24
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	d501      	bpl.n	800c78c <_printf_i+0x1c4>
 800c788:	6019      	str	r1, [r3, #0]
 800c78a:	e002      	b.n	800c792 <_printf_i+0x1ca>
 800c78c:	0670      	lsls	r0, r6, #25
 800c78e:	d5fb      	bpl.n	800c788 <_printf_i+0x1c0>
 800c790:	8019      	strh	r1, [r3, #0]
 800c792:	2300      	movs	r3, #0
 800c794:	6123      	str	r3, [r4, #16]
 800c796:	4615      	mov	r5, r2
 800c798:	e7bc      	b.n	800c714 <_printf_i+0x14c>
 800c79a:	682b      	ldr	r3, [r5, #0]
 800c79c:	1d1a      	adds	r2, r3, #4
 800c79e:	602a      	str	r2, [r5, #0]
 800c7a0:	681d      	ldr	r5, [r3, #0]
 800c7a2:	6862      	ldr	r2, [r4, #4]
 800c7a4:	2100      	movs	r1, #0
 800c7a6:	4628      	mov	r0, r5
 800c7a8:	f7f3 fd12 	bl	80001d0 <memchr>
 800c7ac:	b108      	cbz	r0, 800c7b2 <_printf_i+0x1ea>
 800c7ae:	1b40      	subs	r0, r0, r5
 800c7b0:	6060      	str	r0, [r4, #4]
 800c7b2:	6863      	ldr	r3, [r4, #4]
 800c7b4:	6123      	str	r3, [r4, #16]
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7bc:	e7aa      	b.n	800c714 <_printf_i+0x14c>
 800c7be:	6923      	ldr	r3, [r4, #16]
 800c7c0:	462a      	mov	r2, r5
 800c7c2:	4649      	mov	r1, r9
 800c7c4:	4640      	mov	r0, r8
 800c7c6:	47d0      	blx	sl
 800c7c8:	3001      	adds	r0, #1
 800c7ca:	d0ad      	beq.n	800c728 <_printf_i+0x160>
 800c7cc:	6823      	ldr	r3, [r4, #0]
 800c7ce:	079b      	lsls	r3, r3, #30
 800c7d0:	d413      	bmi.n	800c7fa <_printf_i+0x232>
 800c7d2:	68e0      	ldr	r0, [r4, #12]
 800c7d4:	9b03      	ldr	r3, [sp, #12]
 800c7d6:	4298      	cmp	r0, r3
 800c7d8:	bfb8      	it	lt
 800c7da:	4618      	movlt	r0, r3
 800c7dc:	e7a6      	b.n	800c72c <_printf_i+0x164>
 800c7de:	2301      	movs	r3, #1
 800c7e0:	4632      	mov	r2, r6
 800c7e2:	4649      	mov	r1, r9
 800c7e4:	4640      	mov	r0, r8
 800c7e6:	47d0      	blx	sl
 800c7e8:	3001      	adds	r0, #1
 800c7ea:	d09d      	beq.n	800c728 <_printf_i+0x160>
 800c7ec:	3501      	adds	r5, #1
 800c7ee:	68e3      	ldr	r3, [r4, #12]
 800c7f0:	9903      	ldr	r1, [sp, #12]
 800c7f2:	1a5b      	subs	r3, r3, r1
 800c7f4:	42ab      	cmp	r3, r5
 800c7f6:	dcf2      	bgt.n	800c7de <_printf_i+0x216>
 800c7f8:	e7eb      	b.n	800c7d2 <_printf_i+0x20a>
 800c7fa:	2500      	movs	r5, #0
 800c7fc:	f104 0619 	add.w	r6, r4, #25
 800c800:	e7f5      	b.n	800c7ee <_printf_i+0x226>
 800c802:	bf00      	nop
 800c804:	0800c9f5 	.word	0x0800c9f5
 800c808:	0800ca06 	.word	0x0800ca06

0800c80c <memmove>:
 800c80c:	4288      	cmp	r0, r1
 800c80e:	b510      	push	{r4, lr}
 800c810:	eb01 0402 	add.w	r4, r1, r2
 800c814:	d902      	bls.n	800c81c <memmove+0x10>
 800c816:	4284      	cmp	r4, r0
 800c818:	4623      	mov	r3, r4
 800c81a:	d807      	bhi.n	800c82c <memmove+0x20>
 800c81c:	1e43      	subs	r3, r0, #1
 800c81e:	42a1      	cmp	r1, r4
 800c820:	d008      	beq.n	800c834 <memmove+0x28>
 800c822:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c826:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c82a:	e7f8      	b.n	800c81e <memmove+0x12>
 800c82c:	4402      	add	r2, r0
 800c82e:	4601      	mov	r1, r0
 800c830:	428a      	cmp	r2, r1
 800c832:	d100      	bne.n	800c836 <memmove+0x2a>
 800c834:	bd10      	pop	{r4, pc}
 800c836:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c83a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c83e:	e7f7      	b.n	800c830 <memmove+0x24>

0800c840 <_sbrk_r>:
 800c840:	b538      	push	{r3, r4, r5, lr}
 800c842:	4d06      	ldr	r5, [pc, #24]	; (800c85c <_sbrk_r+0x1c>)
 800c844:	2300      	movs	r3, #0
 800c846:	4604      	mov	r4, r0
 800c848:	4608      	mov	r0, r1
 800c84a:	602b      	str	r3, [r5, #0]
 800c84c:	f7f6 fa92 	bl	8002d74 <_sbrk>
 800c850:	1c43      	adds	r3, r0, #1
 800c852:	d102      	bne.n	800c85a <_sbrk_r+0x1a>
 800c854:	682b      	ldr	r3, [r5, #0]
 800c856:	b103      	cbz	r3, 800c85a <_sbrk_r+0x1a>
 800c858:	6023      	str	r3, [r4, #0]
 800c85a:	bd38      	pop	{r3, r4, r5, pc}
 800c85c:	20000880 	.word	0x20000880

0800c860 <memcpy>:
 800c860:	440a      	add	r2, r1
 800c862:	4291      	cmp	r1, r2
 800c864:	f100 33ff 	add.w	r3, r0, #4294967295
 800c868:	d100      	bne.n	800c86c <memcpy+0xc>
 800c86a:	4770      	bx	lr
 800c86c:	b510      	push	{r4, lr}
 800c86e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c872:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c876:	4291      	cmp	r1, r2
 800c878:	d1f9      	bne.n	800c86e <memcpy+0xe>
 800c87a:	bd10      	pop	{r4, pc}

0800c87c <_realloc_r>:
 800c87c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c880:	4680      	mov	r8, r0
 800c882:	4614      	mov	r4, r2
 800c884:	460e      	mov	r6, r1
 800c886:	b921      	cbnz	r1, 800c892 <_realloc_r+0x16>
 800c888:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c88c:	4611      	mov	r1, r2
 800c88e:	f7ff bc49 	b.w	800c124 <_malloc_r>
 800c892:	b92a      	cbnz	r2, 800c8a0 <_realloc_r+0x24>
 800c894:	f7ff fbda 	bl	800c04c <_free_r>
 800c898:	4625      	mov	r5, r4
 800c89a:	4628      	mov	r0, r5
 800c89c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8a0:	f000 f81b 	bl	800c8da <_malloc_usable_size_r>
 800c8a4:	4284      	cmp	r4, r0
 800c8a6:	4607      	mov	r7, r0
 800c8a8:	d802      	bhi.n	800c8b0 <_realloc_r+0x34>
 800c8aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c8ae:	d812      	bhi.n	800c8d6 <_realloc_r+0x5a>
 800c8b0:	4621      	mov	r1, r4
 800c8b2:	4640      	mov	r0, r8
 800c8b4:	f7ff fc36 	bl	800c124 <_malloc_r>
 800c8b8:	4605      	mov	r5, r0
 800c8ba:	2800      	cmp	r0, #0
 800c8bc:	d0ed      	beq.n	800c89a <_realloc_r+0x1e>
 800c8be:	42bc      	cmp	r4, r7
 800c8c0:	4622      	mov	r2, r4
 800c8c2:	4631      	mov	r1, r6
 800c8c4:	bf28      	it	cs
 800c8c6:	463a      	movcs	r2, r7
 800c8c8:	f7ff ffca 	bl	800c860 <memcpy>
 800c8cc:	4631      	mov	r1, r6
 800c8ce:	4640      	mov	r0, r8
 800c8d0:	f7ff fbbc 	bl	800c04c <_free_r>
 800c8d4:	e7e1      	b.n	800c89a <_realloc_r+0x1e>
 800c8d6:	4635      	mov	r5, r6
 800c8d8:	e7df      	b.n	800c89a <_realloc_r+0x1e>

0800c8da <_malloc_usable_size_r>:
 800c8da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c8de:	1f18      	subs	r0, r3, #4
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	bfbc      	itt	lt
 800c8e4:	580b      	ldrlt	r3, [r1, r0]
 800c8e6:	18c0      	addlt	r0, r0, r3
 800c8e8:	4770      	bx	lr
	...

0800c8ec <_init>:
 800c8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8ee:	bf00      	nop
 800c8f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8f2:	bc08      	pop	{r3}
 800c8f4:	469e      	mov	lr, r3
 800c8f6:	4770      	bx	lr

0800c8f8 <_fini>:
 800c8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8fa:	bf00      	nop
 800c8fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8fe:	bc08      	pop	{r3}
 800c900:	469e      	mov	lr, r3
 800c902:	4770      	bx	lr
