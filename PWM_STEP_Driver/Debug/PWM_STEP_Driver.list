
PWM_STEP_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb3c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0800bccc  0800bccc  0001bccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bdcc  0800bdcc  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  0800bdcc  0800bdcc  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bdcc  0800bdcc  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bdcc  0800bdcc  0001bdcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bdd0  0800bdd0  0001bdd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800bdd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          0000051c  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000598  20000598  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018c8d  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bf3  00000000  00000000  00038d39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001488  00000000  00000000  0003b930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001370  00000000  00000000  0003cdb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003b77  00000000  00000000  0003e128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a0d1  00000000  00000000  00041c9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c850e  00000000  00000000  0005bd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012427e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005bac  00000000  00000000  001242d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bcb4 	.word	0x0800bcb4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	0800bcb4 	.word	0x0800bcb4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <ADC_Select_CH1>:
		              HAL_ADC_ConfigChannel(&hadc3, &sConfig);
}


void ADC_Select_CH1 (void)
	     {
 8000270:	b580      	push	{r7, lr}
 8000272:	b086      	sub	sp, #24
 8000274:	af00      	add	r7, sp, #0
	     	ADC_ChannelConfTypeDef sConfig = {0};
 8000276:	463b      	mov	r3, r7
 8000278:	2200      	movs	r2, #0
 800027a:	601a      	str	r2, [r3, #0]
 800027c:	605a      	str	r2, [r3, #4]
 800027e:	609a      	str	r2, [r3, #8]
 8000280:	60da      	str	r2, [r3, #12]
 8000282:	611a      	str	r2, [r3, #16]
 8000284:	615a      	str	r2, [r3, #20]
	     	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	     	  */
	     	  sConfig.Channel = ADC_CHANNEL_1;
 8000286:	2301      	movs	r3, #1
 8000288:	603b      	str	r3, [r7, #0]
	     	  sConfig.Rank = 1;
 800028a:	2301      	movs	r3, #1
 800028c:	607b      	str	r3, [r7, #4]
	     	  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800028e:	2303      	movs	r3, #3
 8000290:	60bb      	str	r3, [r7, #8]
	     	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8000292:	463b      	mov	r3, r7
 8000294:	4619      	mov	r1, r3
 8000296:	4803      	ldr	r0, [pc, #12]	; (80002a4 <ADC_Select_CH1+0x34>)
 8000298:	f003 fc7e 	bl	8003b98 <HAL_ADC_ConfigChannel>
	     }
 800029c:	bf00      	nop
 800029e:	3718      	adds	r7, #24
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	20000138 	.word	0x20000138

080002a8 <ADC_Select_CH12>:

void ADC_Select_CH12 (void)
	     {
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b086      	sub	sp, #24
 80002ac:	af00      	add	r7, sp, #0
	     	ADC_ChannelConfTypeDef sConfig = {0};
 80002ae:	463b      	mov	r3, r7
 80002b0:	2200      	movs	r2, #0
 80002b2:	601a      	str	r2, [r3, #0]
 80002b4:	605a      	str	r2, [r3, #4]
 80002b6:	609a      	str	r2, [r3, #8]
 80002b8:	60da      	str	r2, [r3, #12]
 80002ba:	611a      	str	r2, [r3, #16]
 80002bc:	615a      	str	r2, [r3, #20]
	     	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	     	  */
	     	  sConfig.Channel = ADC_CHANNEL_12;
 80002be:	230c      	movs	r3, #12
 80002c0:	603b      	str	r3, [r7, #0]
	     	  sConfig.Rank = 1;
 80002c2:	2301      	movs	r3, #1
 80002c4:	607b      	str	r3, [r7, #4]
	     	  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80002c6:	2303      	movs	r3, #3
 80002c8:	60bb      	str	r3, [r7, #8]
	     	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 80002ca:	463b      	mov	r3, r7
 80002cc:	4619      	mov	r1, r3
 80002ce:	4803      	ldr	r0, [pc, #12]	; (80002dc <ADC_Select_CH12+0x34>)
 80002d0:	f003 fc62 	bl	8003b98 <HAL_ADC_ConfigChannel>
	     }
 80002d4:	bf00      	nop
 80002d6:	3718      	adds	r7, #24
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	20000138 	.word	0x20000138

080002e0 <ADC_read_1>:



uint16_t ADC_read_1(void)

	  {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
//	ADC_reset_ch();
	ADC_Select_CH1 ();
 80002e4:	f7ff ffc4 	bl	8000270 <ADC_Select_CH1>
	current[1]=0;
 80002e8:	4b0b      	ldr	r3, [pc, #44]	; (8000318 <ADC_read_1+0x38>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	805a      	strh	r2, [r3, #2]
	HAL_ADC_Start(&hadc3);
 80002ee:	480b      	ldr	r0, [pc, #44]	; (800031c <ADC_read_1+0x3c>)
 80002f0:	f002 fcf8 	bl	8002ce4 <HAL_ADC_Start>

	 		  HAL_ADC_PollForConversion(&hadc3, 100);
 80002f4:	2164      	movs	r1, #100	; 0x64
 80002f6:	4809      	ldr	r0, [pc, #36]	; (800031c <ADC_read_1+0x3c>)
 80002f8:	f002 fe40 	bl	8002f7c <HAL_ADC_PollForConversion>
	 		  current[1] = HAL_ADC_GetValue(&hadc3);
 80002fc:	4807      	ldr	r0, [pc, #28]	; (800031c <ADC_read_1+0x3c>)
 80002fe:	f003 f8bd 	bl	800347c <HAL_ADC_GetValue>
 8000302:	4603      	mov	r3, r0
 8000304:	b29a      	uxth	r2, r3
 8000306:	4b04      	ldr	r3, [pc, #16]	; (8000318 <ADC_read_1+0x38>)
 8000308:	805a      	strh	r2, [r3, #2]
	 		  HAL_ADC_Stop(&hadc3);
 800030a:	4804      	ldr	r0, [pc, #16]	; (800031c <ADC_read_1+0x3c>)
 800030c:	f002 fe00 	bl	8002f10 <HAL_ADC_Stop>


	 		  return current[1];
 8000310:	4b01      	ldr	r3, [pc, #4]	; (8000318 <ADC_read_1+0x38>)
 8000312:	885b      	ldrh	r3, [r3, #2]
	  }
 8000314:	4618      	mov	r0, r3
 8000316:	bd80      	pop	{r7, pc}
 8000318:	200004cc 	.word	0x200004cc
 800031c:	20000138 	.word	0x20000138

08000320 <ADC_read_12>:

uint16_t ADC_read_12(void)

	  {
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
//	ADC_reset_ch();
	ADC_Select_CH12 ();
 8000324:	f7ff ffc0 	bl	80002a8 <ADC_Select_CH12>
	current[0]=0;
 8000328:	4b0b      	ldr	r3, [pc, #44]	; (8000358 <ADC_read_12+0x38>)
 800032a:	2200      	movs	r2, #0
 800032c:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Start(&hadc3);
 800032e:	480b      	ldr	r0, [pc, #44]	; (800035c <ADC_read_12+0x3c>)
 8000330:	f002 fcd8 	bl	8002ce4 <HAL_ADC_Start>

	 		  HAL_ADC_PollForConversion(&hadc3, 100);
 8000334:	2164      	movs	r1, #100	; 0x64
 8000336:	4809      	ldr	r0, [pc, #36]	; (800035c <ADC_read_12+0x3c>)
 8000338:	f002 fe20 	bl	8002f7c <HAL_ADC_PollForConversion>
	 		  current[0] = HAL_ADC_GetValue(&hadc3);
 800033c:	4807      	ldr	r0, [pc, #28]	; (800035c <ADC_read_12+0x3c>)
 800033e:	f003 f89d 	bl	800347c <HAL_ADC_GetValue>
 8000342:	4603      	mov	r3, r0
 8000344:	b29a      	uxth	r2, r3
 8000346:	4b04      	ldr	r3, [pc, #16]	; (8000358 <ADC_read_12+0x38>)
 8000348:	801a      	strh	r2, [r3, #0]
	 		  HAL_ADC_Stop(&hadc3);
 800034a:	4804      	ldr	r0, [pc, #16]	; (800035c <ADC_read_12+0x3c>)
 800034c:	f002 fde0 	bl	8002f10 <HAL_ADC_Stop>


	 		  return current[0];
 8000350:	4b01      	ldr	r3, [pc, #4]	; (8000358 <ADC_read_12+0x38>)
 8000352:	881b      	ldrh	r3, [r3, #0]
	  }
 8000354:	4618      	mov	r0, r3
 8000356:	bd80      	pop	{r7, pc}
 8000358:	200004cc 	.word	0x200004cc
 800035c:	20000138 	.word	0x20000138

08000360 <PWM_correction>:


void PWM_correction(void){
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0

for(uint8_t i=0;i<4;i++){
 8000366:	2300      	movs	r3, #0
 8000368:	71fb      	strb	r3, [r7, #7]
 800036a:	e07e      	b.n	800046a <PWM_correction+0x10a>


	pwm[i]=pwm_cmd;
 800036c:	79fb      	ldrb	r3, [r7, #7]
 800036e:	4a4c      	ldr	r2, [pc, #304]	; (80004a0 <PWM_correction+0x140>)
 8000370:	8812      	ldrh	r2, [r2, #0]
 8000372:	b291      	uxth	r1, r2
 8000374:	4a4b      	ldr	r2, [pc, #300]	; (80004a4 <PWM_correction+0x144>)
 8000376:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	if((current[i]>=limit)&&(pwm[i]>=10)){
 800037a:	79fb      	ldrb	r3, [r7, #7]
 800037c:	4a4a      	ldr	r2, [pc, #296]	; (80004a8 <PWM_correction+0x148>)
 800037e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000382:	4b4a      	ldr	r3, [pc, #296]	; (80004ac <PWM_correction+0x14c>)
 8000384:	881b      	ldrh	r3, [r3, #0]
 8000386:	429a      	cmp	r2, r3
 8000388:	d314      	bcc.n	80003b4 <PWM_correction+0x54>
 800038a:	79fb      	ldrb	r3, [r7, #7]
 800038c:	4a45      	ldr	r2, [pc, #276]	; (80004a4 <PWM_correction+0x144>)
 800038e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000392:	2b09      	cmp	r3, #9
 8000394:	d90e      	bls.n	80003b4 <PWM_correction+0x54>
	pwm[i]=pwm[i]-10;
 8000396:	79fb      	ldrb	r3, [r7, #7]
 8000398:	4a42      	ldr	r2, [pc, #264]	; (80004a4 <PWM_correction+0x144>)
 800039a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800039e:	79fb      	ldrb	r3, [r7, #7]
 80003a0:	3a0a      	subs	r2, #10
 80003a2:	b291      	uxth	r1, r2
 80003a4:	4a3f      	ldr	r2, [pc, #252]	; (80004a4 <PWM_correction+0x144>)
 80003a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    LED_2_ON;
 80003aa:	2201      	movs	r2, #1
 80003ac:	2101      	movs	r1, #1
 80003ae:	4840      	ldr	r0, [pc, #256]	; (80004b0 <PWM_correction+0x150>)
 80003b0:	f004 fe90 	bl	80050d4 <HAL_GPIO_WritePin>
	}

	TxData[0]=pwm_cmd>>8;
 80003b4:	4b3a      	ldr	r3, [pc, #232]	; (80004a0 <PWM_correction+0x140>)
 80003b6:	881b      	ldrh	r3, [r3, #0]
 80003b8:	b29b      	uxth	r3, r3
 80003ba:	0a1b      	lsrs	r3, r3, #8
 80003bc:	b29b      	uxth	r3, r3
 80003be:	b2da      	uxtb	r2, r3
 80003c0:	4b3c      	ldr	r3, [pc, #240]	; (80004b4 <PWM_correction+0x154>)
 80003c2:	701a      	strb	r2, [r3, #0]
	TxData[1]=pwm_cmd&0xff;
 80003c4:	4b36      	ldr	r3, [pc, #216]	; (80004a0 <PWM_correction+0x140>)
 80003c6:	881b      	ldrh	r3, [r3, #0]
 80003c8:	b29b      	uxth	r3, r3
 80003ca:	b2da      	uxtb	r2, r3
 80003cc:	4b39      	ldr	r3, [pc, #228]	; (80004b4 <PWM_correction+0x154>)
 80003ce:	705a      	strb	r2, [r3, #1]

	if(current[i]>=3800){
 80003d0:	79fb      	ldrb	r3, [r7, #7]
 80003d2:	4a35      	ldr	r2, [pc, #212]	; (80004a8 <PWM_correction+0x148>)
 80003d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003d8:	f640 62d7 	movw	r2, #3799	; 0xed7
 80003dc:	4293      	cmp	r3, r2
 80003de:	d930      	bls.n	8000442 <PWM_correction+0xe2>

		            HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80003e0:	2100      	movs	r1, #0
 80003e2:	4835      	ldr	r0, [pc, #212]	; (80004b8 <PWM_correction+0x158>)
 80003e4:	f008 fa70 	bl	80088c8 <HAL_TIM_PWM_Stop>
		            HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80003e8:	2104      	movs	r1, #4
 80003ea:	4833      	ldr	r0, [pc, #204]	; (80004b8 <PWM_correction+0x158>)
 80003ec:	f008 fa6c 	bl	80088c8 <HAL_TIM_PWM_Stop>
		            HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 80003f0:	2100      	movs	r1, #0
 80003f2:	4832      	ldr	r0, [pc, #200]	; (80004bc <PWM_correction+0x15c>)
 80003f4:	f008 fa68 	bl	80088c8 <HAL_TIM_PWM_Stop>
		            HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 80003f8:	2100      	movs	r1, #0
 80003fa:	4831      	ldr	r0, [pc, #196]	; (80004c0 <PWM_correction+0x160>)
 80003fc:	f008 fa64 	bl	80088c8 <HAL_TIM_PWM_Stop>

		            HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8000400:	2100      	movs	r1, #0
 8000402:	482d      	ldr	r0, [pc, #180]	; (80004b8 <PWM_correction+0x158>)
 8000404:	f009 fe98 	bl	800a138 <HAL_TIMEx_PWMN_Stop>
		            HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8000408:	2104      	movs	r1, #4
 800040a:	482b      	ldr	r0, [pc, #172]	; (80004b8 <PWM_correction+0x158>)
 800040c:	f009 fe94 	bl	800a138 <HAL_TIMEx_PWMN_Stop>
		            HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_1);
 8000410:	2100      	movs	r1, #0
 8000412:	482a      	ldr	r0, [pc, #168]	; (80004bc <PWM_correction+0x15c>)
 8000414:	f009 fe90 	bl	800a138 <HAL_TIMEx_PWMN_Stop>
		            HAL_TIMEx_PWMN_Stop(&htim15, TIM_CHANNEL_1);
 8000418:	2100      	movs	r1, #0
 800041a:	4829      	ldr	r0, [pc, #164]	; (80004c0 <PWM_correction+0x160>)
 800041c:	f009 fe8c 	bl	800a138 <HAL_TIMEx_PWMN_Stop>

		            pwm[0]=10;
 8000420:	4b20      	ldr	r3, [pc, #128]	; (80004a4 <PWM_correction+0x144>)
 8000422:	220a      	movs	r2, #10
 8000424:	801a      	strh	r2, [r3, #0]
		            pwm[1]=10;
 8000426:	4b1f      	ldr	r3, [pc, #124]	; (80004a4 <PWM_correction+0x144>)
 8000428:	220a      	movs	r2, #10
 800042a:	805a      	strh	r2, [r3, #2]
		            pwm[2]=10;
 800042c:	4b1d      	ldr	r3, [pc, #116]	; (80004a4 <PWM_correction+0x144>)
 800042e:	220a      	movs	r2, #10
 8000430:	809a      	strh	r2, [r3, #4]
		            pwm[3]=10;
 8000432:	4b1c      	ldr	r3, [pc, #112]	; (80004a4 <PWM_correction+0x144>)
 8000434:	220a      	movs	r2, #10
 8000436:	80da      	strh	r2, [r3, #6]

		            LED_2_ON;}
 8000438:	2201      	movs	r2, #1
 800043a:	2101      	movs	r1, #1
 800043c:	481c      	ldr	r0, [pc, #112]	; (80004b0 <PWM_correction+0x150>)
 800043e:	f004 fe49 	bl	80050d4 <HAL_GPIO_WritePin>

	if((pwm[i]>=10)&&(current[i]<=10)){LED_2_OFF;}
 8000442:	79fb      	ldrb	r3, [r7, #7]
 8000444:	4a17      	ldr	r2, [pc, #92]	; (80004a4 <PWM_correction+0x144>)
 8000446:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800044a:	2b09      	cmp	r3, #9
 800044c:	d90a      	bls.n	8000464 <PWM_correction+0x104>
 800044e:	79fb      	ldrb	r3, [r7, #7]
 8000450:	4a15      	ldr	r2, [pc, #84]	; (80004a8 <PWM_correction+0x148>)
 8000452:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000456:	2b0a      	cmp	r3, #10
 8000458:	d804      	bhi.n	8000464 <PWM_correction+0x104>
 800045a:	2200      	movs	r2, #0
 800045c:	2101      	movs	r1, #1
 800045e:	4814      	ldr	r0, [pc, #80]	; (80004b0 <PWM_correction+0x150>)
 8000460:	f004 fe38 	bl	80050d4 <HAL_GPIO_WritePin>
for(uint8_t i=0;i<4;i++){
 8000464:	79fb      	ldrb	r3, [r7, #7]
 8000466:	3301      	adds	r3, #1
 8000468:	71fb      	strb	r3, [r7, #7]
 800046a:	79fb      	ldrb	r3, [r7, #7]
 800046c:	2b03      	cmp	r3, #3
 800046e:	f67f af7d 	bls.w	800036c <PWM_correction+0xc>

}
pwm_n=(pwm[0]+pwm[1]+pwm[2]+pwm[3])/4;
 8000472:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <PWM_correction+0x144>)
 8000474:	881b      	ldrh	r3, [r3, #0]
 8000476:	461a      	mov	r2, r3
 8000478:	4b0a      	ldr	r3, [pc, #40]	; (80004a4 <PWM_correction+0x144>)
 800047a:	885b      	ldrh	r3, [r3, #2]
 800047c:	4413      	add	r3, r2
 800047e:	4a09      	ldr	r2, [pc, #36]	; (80004a4 <PWM_correction+0x144>)
 8000480:	8892      	ldrh	r2, [r2, #4]
 8000482:	4413      	add	r3, r2
 8000484:	4a07      	ldr	r2, [pc, #28]	; (80004a4 <PWM_correction+0x144>)
 8000486:	88d2      	ldrh	r2, [r2, #6]
 8000488:	4413      	add	r3, r2
 800048a:	2b00      	cmp	r3, #0
 800048c:	da00      	bge.n	8000490 <PWM_correction+0x130>
 800048e:	3303      	adds	r3, #3
 8000490:	109b      	asrs	r3, r3, #2
 8000492:	b29a      	uxth	r2, r3
 8000494:	4b0b      	ldr	r3, [pc, #44]	; (80004c4 <PWM_correction+0x164>)
 8000496:	801a      	strh	r2, [r3, #0]
}
 8000498:	bf00      	nop
 800049a:	3708      	adds	r7, #8
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	200004e8 	.word	0x200004e8
 80004a4:	20000000 	.word	0x20000000
 80004a8:	200004cc 	.word	0x200004cc
 80004ac:	20000008 	.word	0x20000008
 80004b0:	48001400 	.word	0x48001400
 80004b4:	200004e0 	.word	0x200004e0
 80004b8:	20000240 	.word	0x20000240
 80004bc:	20000324 	.word	0x20000324
 80004c0:	20000370 	.word	0x20000370
 80004c4:	200004e6 	.word	0x200004e6

080004c8 <I2C_send>:
////////////////////////////////////////////////////////////////////////////////////////////

void I2C_send(uint8_t data, uint8_t flags)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af02      	add	r7, sp, #8
 80004ce:	4603      	mov	r3, r0
 80004d0:	460a      	mov	r2, r1
 80004d2:	71fb      	strb	r3, [r7, #7]
 80004d4:	4613      	mov	r3, r2
 80004d6:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef res;
	 // бесконечный цикл
        for(;;) {
                // проверяем, готово ли устройство по адресу lcd_addr для связи
	        res = HAL_I2C_IsDeviceReady(&hi2c1, LCD_ADDR, 1, HAL_MAX_DELAY);
 80004d8:	f04f 33ff 	mov.w	r3, #4294967295
 80004dc:	2201      	movs	r2, #1
 80004de:	214e      	movs	r1, #78	; 0x4e
 80004e0:	4820      	ldr	r0, [pc, #128]	; (8000564 <I2C_send+0x9c>)
 80004e2:	f004 ffc5 	bl	8005470 <HAL_I2C_IsDeviceReady>
 80004e6:	4603      	mov	r3, r0
 80004e8:	73fb      	strb	r3, [r7, #15]
	         // если да, то выходим из бесконечного цикла
                if(res == HAL_OK) break;
 80004ea:	7bfb      	ldrb	r3, [r7, #15]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d000      	beq.n	80004f2 <I2C_send+0x2a>
	        res = HAL_I2C_IsDeviceReady(&hi2c1, LCD_ADDR, 1, HAL_MAX_DELAY);
 80004f0:	e7f2      	b.n	80004d8 <I2C_send+0x10>
                if(res == HAL_OK) break;
 80004f2:	bf00      	nop
	    }
        // операция �? с 1111 0000 приводит к обнулению бит с 0 по 3, остаются биты с 4 по 7
	uint8_t up = data & 0xF0;
 80004f4:	79fb      	ldrb	r3, [r7, #7]
 80004f6:	f023 030f 	bic.w	r3, r3, #15
 80004fa:	73bb      	strb	r3, [r7, #14]
        // то же самое, но data сдвигается на 4 бита влево
        uint8_t lo = (data << 4) & 0xF0;
 80004fc:	79fb      	ldrb	r3, [r7, #7]
 80004fe:	011b      	lsls	r3, r3, #4
 8000500:	737b      	strb	r3, [r7, #13]

	uint8_t data_arr[4];
         // 4-7 биты содержат информацию, биты 0-3 настраивают работу дисплея
	data_arr[0] = up|flags|BACKLIGHT|PIN_EN;
 8000502:	7bba      	ldrb	r2, [r7, #14]
 8000504:	79bb      	ldrb	r3, [r7, #6]
 8000506:	4313      	orrs	r3, r2
 8000508:	b2db      	uxtb	r3, r3
 800050a:	f043 030c 	orr.w	r3, r3, #12
 800050e:	b2db      	uxtb	r3, r3
 8000510:	723b      	strb	r3, [r7, #8]
         // дублирование сигнала, на выводе Е в этот раз 0
	data_arr[1] = up|flags|BACKLIGHT;
 8000512:	7bba      	ldrb	r2, [r7, #14]
 8000514:	79bb      	ldrb	r3, [r7, #6]
 8000516:	4313      	orrs	r3, r2
 8000518:	b2db      	uxtb	r3, r3
 800051a:	f043 0308 	orr.w	r3, r3, #8
 800051e:	b2db      	uxtb	r3, r3
 8000520:	727b      	strb	r3, [r7, #9]
	data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 8000522:	7b7a      	ldrb	r2, [r7, #13]
 8000524:	79bb      	ldrb	r3, [r7, #6]
 8000526:	4313      	orrs	r3, r2
 8000528:	b2db      	uxtb	r3, r3
 800052a:	f043 030c 	orr.w	r3, r3, #12
 800052e:	b2db      	uxtb	r3, r3
 8000530:	72bb      	strb	r3, [r7, #10]
	data_arr[3] = lo|flags|BACKLIGHT;
 8000532:	7b7a      	ldrb	r2, [r7, #13]
 8000534:	79bb      	ldrb	r3, [r7, #6]
 8000536:	4313      	orrs	r3, r2
 8000538:	b2db      	uxtb	r3, r3
 800053a:	f043 0308 	orr.w	r3, r3, #8
 800053e:	b2db      	uxtb	r3, r3
 8000540:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 8000542:	f107 0208 	add.w	r2, r7, #8
 8000546:	f04f 33ff 	mov.w	r3, #4294967295
 800054a:	9300      	str	r3, [sp, #0]
 800054c:	2304      	movs	r3, #4
 800054e:	214e      	movs	r1, #78	; 0x4e
 8000550:	4804      	ldr	r0, [pc, #16]	; (8000564 <I2C_send+0x9c>)
 8000552:	f004 fe99 	bl	8005288 <HAL_I2C_Master_Transmit>
	HAL_Delay(LCD_DELAY_MS);
 8000556:	2005      	movs	r0, #5
 8000558:	f002 f9a2 	bl	80028a0 <HAL_Delay>
}
 800055c:	bf00      	nop
 800055e:	3710      	adds	r7, #16
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	200001cc 	.word	0x200001cc

08000568 <lcd_write_nibble>:
    }
}

////////////////////////////////////////////////////////////////////////////////////////////

void lcd_write_nibble(uint8_t nibble, uint8_t rs) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af02      	add	r7, sp, #8
 800056e:	4603      	mov	r3, r0
 8000570:	460a      	mov	r2, r1
 8000572:	71fb      	strb	r3, [r7, #7]
 8000574:	4613      	mov	r3, r2
 8000576:	71bb      	strb	r3, [r7, #6]
  uint8_t data = nibble << D4_BIT;
 8000578:	79fb      	ldrb	r3, [r7, #7]
 800057a:	011b      	lsls	r3, r3, #4
 800057c:	b2db      	uxtb	r3, r3
 800057e:	73fb      	strb	r3, [r7, #15]
  data |= rs << RS_BIT;
 8000580:	7bfa      	ldrb	r2, [r7, #15]
 8000582:	79bb      	ldrb	r3, [r7, #6]
 8000584:	4313      	orrs	r3, r2
 8000586:	b2db      	uxtb	r3, r3
 8000588:	73fb      	strb	r3, [r7, #15]
  data |= backlight_state << BL_BIT; // Include backlight state in data
 800058a:	4b16      	ldr	r3, [pc, #88]	; (80005e4 <lcd_write_nibble+0x7c>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	00db      	lsls	r3, r3, #3
 8000590:	b25a      	sxtb	r2, r3
 8000592:	7bfb      	ldrb	r3, [r7, #15]
 8000594:	b25b      	sxtb	r3, r3
 8000596:	4313      	orrs	r3, r2
 8000598:	b25b      	sxtb	r3, r3
 800059a:	b2db      	uxtb	r3, r3
 800059c:	73fb      	strb	r3, [r7, #15]
  data |= 1 << EN_BIT;
 800059e:	7bfb      	ldrb	r3, [r7, #15]
 80005a0:	f043 0304 	orr.w	r3, r3, #4
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80005a8:	f107 020f 	add.w	r2, r7, #15
 80005ac:	2364      	movs	r3, #100	; 0x64
 80005ae:	9300      	str	r3, [sp, #0]
 80005b0:	2301      	movs	r3, #1
 80005b2:	214e      	movs	r1, #78	; 0x4e
 80005b4:	480c      	ldr	r0, [pc, #48]	; (80005e8 <lcd_write_nibble+0x80>)
 80005b6:	f004 fe67 	bl	8005288 <HAL_I2C_Master_Transmit>
  HAL_Delay(1);
 80005ba:	2001      	movs	r0, #1
 80005bc:	f002 f970 	bl	80028a0 <HAL_Delay>
  data &= ~(1 << EN_BIT);
 80005c0:	7bfb      	ldrb	r3, [r7, #15]
 80005c2:	f023 0304 	bic.w	r3, r3, #4
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80005ca:	f107 020f 	add.w	r2, r7, #15
 80005ce:	2364      	movs	r3, #100	; 0x64
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2301      	movs	r3, #1
 80005d4:	214e      	movs	r1, #78	; 0x4e
 80005d6:	4804      	ldr	r0, [pc, #16]	; (80005e8 <lcd_write_nibble+0x80>)
 80005d8:	f004 fe56 	bl	8005288 <HAL_I2C_Master_Transmit>
}
 80005dc:	bf00      	nop
 80005de:	3710      	adds	r7, #16
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	2000000a 	.word	0x2000000a
 80005e8:	200001cc 	.word	0x200001cc

080005ec <lcd_send_cmd>:

////////////////////////////////////////////////////////////////////////////////////////////

void lcd_send_cmd(uint8_t cmd) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = cmd >> 4;
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = cmd & 0x0F;
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	f003 030f 	and.w	r3, r3, #15
 8000602:	73bb      	strb	r3, [r7, #14]
  lcd_write_nibble(upper_nibble, 0);
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	2100      	movs	r1, #0
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff ffad 	bl	8000568 <lcd_write_nibble>
  lcd_write_nibble(lower_nibble, 0);
 800060e:	7bbb      	ldrb	r3, [r7, #14]
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f7ff ffa8 	bl	8000568 <lcd_write_nibble>
  if (cmd == 0x01 || cmd == 0x02) {
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	2b01      	cmp	r3, #1
 800061c:	d002      	beq.n	8000624 <lcd_send_cmd+0x38>
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	2b02      	cmp	r3, #2
 8000622:	d102      	bne.n	800062a <lcd_send_cmd+0x3e>
    HAL_Delay(2);
 8000624:	2002      	movs	r0, #2
 8000626:	f002 f93b 	bl	80028a0 <HAL_Delay>
  }
}
 800062a:	bf00      	nop
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}

08000632 <lcd_send_data>:

//////////////////////////////////////////////////////////////////////////////////////////////

void lcd_send_data(uint8_t data) {
 8000632:	b580      	push	{r7, lr}
 8000634:	b084      	sub	sp, #16
 8000636:	af00      	add	r7, sp, #0
 8000638:	4603      	mov	r3, r0
 800063a:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = data >> 4;
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	091b      	lsrs	r3, r3, #4
 8000640:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = data & 0x0F;
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	f003 030f 	and.w	r3, r3, #15
 8000648:	73bb      	strb	r3, [r7, #14]
  lcd_write_nibble(upper_nibble, 1);
 800064a:	7bfb      	ldrb	r3, [r7, #15]
 800064c:	2101      	movs	r1, #1
 800064e:	4618      	mov	r0, r3
 8000650:	f7ff ff8a 	bl	8000568 <lcd_write_nibble>
  lcd_write_nibble(lower_nibble, 1);
 8000654:	7bbb      	ldrb	r3, [r7, #14]
 8000656:	2101      	movs	r1, #1
 8000658:	4618      	mov	r0, r3
 800065a:	f7ff ff85 	bl	8000568 <lcd_write_nibble>
}
 800065e:	bf00      	nop
 8000660:	3710      	adds	r7, #16
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}

08000666 <lcd_init>:

//////////////////////////////////////////////////////////////////////////////////////////////

void lcd_init() {
 8000666:	b580      	push	{r7, lr}
 8000668:	af00      	add	r7, sp, #0
  HAL_Delay(50);
 800066a:	2032      	movs	r0, #50	; 0x32
 800066c:	f002 f918 	bl	80028a0 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 8000670:	2100      	movs	r1, #0
 8000672:	2003      	movs	r0, #3
 8000674:	f7ff ff78 	bl	8000568 <lcd_write_nibble>
  HAL_Delay(5);
 8000678:	2005      	movs	r0, #5
 800067a:	f002 f911 	bl	80028a0 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 800067e:	2100      	movs	r1, #0
 8000680:	2003      	movs	r0, #3
 8000682:	f7ff ff71 	bl	8000568 <lcd_write_nibble>
  HAL_Delay(1);
 8000686:	2001      	movs	r0, #1
 8000688:	f002 f90a 	bl	80028a0 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 800068c:	2100      	movs	r1, #0
 800068e:	2003      	movs	r0, #3
 8000690:	f7ff ff6a 	bl	8000568 <lcd_write_nibble>
  HAL_Delay(1);
 8000694:	2001      	movs	r0, #1
 8000696:	f002 f903 	bl	80028a0 <HAL_Delay>
  lcd_write_nibble(0x02, 0);
 800069a:	2100      	movs	r1, #0
 800069c:	2002      	movs	r0, #2
 800069e:	f7ff ff63 	bl	8000568 <lcd_write_nibble>
  lcd_send_cmd(0x28);
 80006a2:	2028      	movs	r0, #40	; 0x28
 80006a4:	f7ff ffa2 	bl	80005ec <lcd_send_cmd>
  lcd_send_cmd(0x0C);
 80006a8:	200c      	movs	r0, #12
 80006aa:	f7ff ff9f 	bl	80005ec <lcd_send_cmd>
  lcd_send_cmd(0x06);
 80006ae:	2006      	movs	r0, #6
 80006b0:	f7ff ff9c 	bl	80005ec <lcd_send_cmd>
  lcd_send_cmd(0x01);
 80006b4:	2001      	movs	r0, #1
 80006b6:	f7ff ff99 	bl	80005ec <lcd_send_cmd>
  HAL_Delay(2);
 80006ba:	2002      	movs	r0, #2
 80006bc:	f002 f8f0 	bl	80028a0 <HAL_Delay>
}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <lcd_write_string>:

//////////////////////////////////////////////////////////////////////////////////////////////

void lcd_write_string(char *str) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  while (*str) {
 80006cc:	e006      	b.n	80006dc <lcd_write_string+0x18>
    lcd_send_data(*str++);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	1c5a      	adds	r2, r3, #1
 80006d2:	607a      	str	r2, [r7, #4]
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff ffab 	bl	8000632 <lcd_send_data>
  while (*str) {
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d1f4      	bne.n	80006ce <lcd_write_string+0xa>
  }
}
 80006e4:	bf00      	nop
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
	...

080006f0 <lcd_set_cursor>:
//////////////////////////////////////////////////////////////////////////

void lcd_set_cursor(uint8_t row, uint8_t column) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	460a      	mov	r2, r1
 80006fa:	71fb      	strb	r3, [r7, #7]
 80006fc:	4613      	mov	r3, r2
 80006fe:	71bb      	strb	r3, [r7, #6]
    uint8_t address;
    switch (row) {
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	3b01      	subs	r3, #1
 8000704:	2b03      	cmp	r3, #3
 8000706:	d817      	bhi.n	8000738 <lcd_set_cursor+0x48>
 8000708:	a201      	add	r2, pc, #4	; (adr r2, 8000710 <lcd_set_cursor+0x20>)
 800070a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800070e:	bf00      	nop
 8000710:	08000721 	.word	0x08000721
 8000714:	08000727 	.word	0x08000727
 8000718:	0800072d 	.word	0x0800072d
 800071c:	08000733 	.word	0x08000733
        case 1:
            address = 0x80;
 8000720:	2380      	movs	r3, #128	; 0x80
 8000722:	73fb      	strb	r3, [r7, #15]
            break;
 8000724:	e00a      	b.n	800073c <lcd_set_cursor+0x4c>
        case 2:
            address = 0xC0;
 8000726:	23c0      	movs	r3, #192	; 0xc0
 8000728:	73fb      	strb	r3, [r7, #15]
            break;
 800072a:	e007      	b.n	800073c <lcd_set_cursor+0x4c>

        case 3:
            address = 0x94;
 800072c:	2394      	movs	r3, #148	; 0x94
 800072e:	73fb      	strb	r3, [r7, #15]
            break;
 8000730:	e004      	b.n	800073c <lcd_set_cursor+0x4c>
        case 4:
            address = 0xD4;
 8000732:	23d4      	movs	r3, #212	; 0xd4
 8000734:	73fb      	strb	r3, [r7, #15]
            break;
 8000736:	e001      	b.n	800073c <lcd_set_cursor+0x4c>


        default:
            address = 0x80;
 8000738:	2380      	movs	r3, #128	; 0x80
 800073a:	73fb      	strb	r3, [r7, #15]
    }
    address += column;
 800073c:	7bfa      	ldrb	r2, [r7, #15]
 800073e:	79bb      	ldrb	r3, [r7, #6]
 8000740:	4413      	add	r3, r2
 8000742:	73fb      	strb	r3, [r7, #15]
    lcd_send_cmd(0x80 | address);
 8000744:	7bfb      	ldrb	r3, [r7, #15]
 8000746:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800074a:	b2db      	uxtb	r3, r3
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff ff4d 	bl	80005ec <lcd_send_cmd>
}
 8000752:	bf00      	nop
 8000754:	3710      	adds	r7, #16
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop

0800075c <lcd_clear>:

//////////////////////////////////////////////////////////////////////////////////////////////////

void lcd_clear(void) {
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8000760:	2001      	movs	r0, #1
 8000762:	f7ff ff43 	bl	80005ec <lcd_send_cmd>
    HAL_Delay(2);
 8000766:	2002      	movs	r0, #2
 8000768:	f002 f89a 	bl	80028a0 <HAL_Delay>
}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}

08000770 <filter>:
}

//////////////////////////////////////////////////////////////////////////////////////////////

int filter(int x)
  {
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  static int n;
  static int m[N];
  static int y;
  y=y+(x-m[n]);
 8000778:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <filter+0x68>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a17      	ldr	r2, [pc, #92]	; (80007dc <filter+0x6c>)
 800077e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	1ad2      	subs	r2, r2, r3
 8000786:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <filter+0x70>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4413      	add	r3, r2
 800078c:	4a14      	ldr	r2, [pc, #80]	; (80007e0 <filter+0x70>)
 800078e:	6013      	str	r3, [r2, #0]
  m[n]=x;
 8000790:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <filter+0x68>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4911      	ldr	r1, [pc, #68]	; (80007dc <filter+0x6c>)
 8000796:	687a      	ldr	r2, [r7, #4]
 8000798:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  n=(n+1)%N;
 800079c:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <filter+0x68>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	1c59      	adds	r1, r3, #1
 80007a2:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <filter+0x74>)
 80007a4:	fb83 2301 	smull	r2, r3, r3, r1
 80007a8:	10da      	asrs	r2, r3, #3
 80007aa:	17cb      	asrs	r3, r1, #31
 80007ac:	1ad2      	subs	r2, r2, r3
 80007ae:	4613      	mov	r3, r2
 80007b0:	009b      	lsls	r3, r3, #2
 80007b2:	4413      	add	r3, r2
 80007b4:	009b      	lsls	r3, r3, #2
 80007b6:	1aca      	subs	r2, r1, r3
 80007b8:	4b07      	ldr	r3, [pc, #28]	; (80007d8 <filter+0x68>)
 80007ba:	601a      	str	r2, [r3, #0]
  return y/N;
 80007bc:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <filter+0x70>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a08      	ldr	r2, [pc, #32]	; (80007e4 <filter+0x74>)
 80007c2:	fb82 1203 	smull	r1, r2, r2, r3
 80007c6:	10d2      	asrs	r2, r2, #3
 80007c8:	17db      	asrs	r3, r3, #31
 80007ca:	1ad3      	subs	r3, r2, r3
  }
 80007cc:	4618      	mov	r0, r3
 80007ce:	370c      	adds	r7, #12
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr
 80007d8:	20000524 	.word	0x20000524
 80007dc:	20000528 	.word	0x20000528
 80007e0:	20000578 	.word	0x20000578
 80007e4:	66666667 	.word	0x66666667

080007e8 <page>:

//////////////////////////////////////////////////////////////////////////////////////////////
void page(void){
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	if((!CLEAR)&&(!page_flag)){
 80007ec:	2120      	movs	r1, #32
 80007ee:	481b      	ldr	r0, [pc, #108]	; (800085c <page+0x74>)
 80007f0:	f004 fc58 	bl	80050a4 <HAL_GPIO_ReadPin>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d113      	bne.n	8000822 <page+0x3a>
 80007fa:	4b19      	ldr	r3, [pc, #100]	; (8000860 <page+0x78>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d10f      	bne.n	8000822 <page+0x3a>
		LED_3_ON;
 8000802:	2201      	movs	r2, #1
 8000804:	2102      	movs	r1, #2
 8000806:	4817      	ldr	r0, [pc, #92]	; (8000864 <page+0x7c>)
 8000808:	f004 fc64 	bl	80050d4 <HAL_GPIO_WritePin>
		page_flag=1;
 800080c:	4b14      	ldr	r3, [pc, #80]	; (8000860 <page+0x78>)
 800080e:	2201      	movs	r2, #1
 8000810:	701a      	strb	r2, [r3, #0]
        page_num++;
 8000812:	4b15      	ldr	r3, [pc, #84]	; (8000868 <page+0x80>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	3301      	adds	r3, #1
 8000818:	b2da      	uxtb	r2, r3
 800081a:	4b13      	ldr	r3, [pc, #76]	; (8000868 <page+0x80>)
 800081c:	701a      	strb	r2, [r3, #0]
        lcd_clear();
 800081e:	f7ff ff9d 	bl	800075c <lcd_clear>
	}

	if((CLEAR)&&(page_flag)){
 8000822:	2120      	movs	r1, #32
 8000824:	480d      	ldr	r0, [pc, #52]	; (800085c <page+0x74>)
 8000826:	f004 fc3d 	bl	80050a4 <HAL_GPIO_ReadPin>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d012      	beq.n	8000856 <page+0x6e>
 8000830:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <page+0x78>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d00e      	beq.n	8000856 <page+0x6e>
			LED_3_OFF;
 8000838:	2200      	movs	r2, #0
 800083a:	2102      	movs	r1, #2
 800083c:	4809      	ldr	r0, [pc, #36]	; (8000864 <page+0x7c>)
 800083e:	f004 fc49 	bl	80050d4 <HAL_GPIO_WritePin>

			 if(page_num>2){page_num=0;}
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <page+0x80>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2b02      	cmp	r3, #2
 8000848:	d902      	bls.n	8000850 <page+0x68>
 800084a:	4b07      	ldr	r3, [pc, #28]	; (8000868 <page+0x80>)
 800084c:	2200      	movs	r2, #0
 800084e:	701a      	strb	r2, [r3, #0]
			 page_flag=0;
 8000850:	4b03      	ldr	r3, [pc, #12]	; (8000860 <page+0x78>)
 8000852:	2200      	movs	r2, #0
 8000854:	701a      	strb	r2, [r3, #0]

		}

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	48000400 	.word	0x48000400
 8000860:	20000501 	.word	0x20000501
 8000864:	48001400 	.word	0x48001400
 8000868:	20000500 	.word	0x20000500

0800086c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000872:	f001 ffaf 	bl	80027d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000876:	f000 fac3 	bl	8000e00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800087a:	f001 f897 	bl	80019ac <MX_GPIO_Init>
  MX_DMA_Init();
 800087e:	f001 f877 	bl	8001970 <MX_DMA_Init>
  MX_ADC2_Init();
 8000882:	f000 fb99 	bl	8000fb8 <MX_ADC2_Init>
  MX_TIM1_Init();
 8000886:	f000 fd37 	bl	80012f8 <MX_TIM1_Init>
  MX_TIM2_Init();
 800088a:	f000 fdef 	bl	800146c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800088e:	f001 f80f 	bl	80018b0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000892:	f001 f83d 	bl	8001910 <MX_USART2_UART_Init>
  MX_TIM8_Init();
 8000896:	f000 feb9 	bl	800160c <MX_TIM8_Init>
  MX_I2C1_Init();
 800089a:	f000 fc93 	bl	80011c4 <MX_I2C1_Init>
  MX_RTC_Init();
 800089e:	f000 fcd1 	bl	8001244 <MX_RTC_Init>
  MX_TIM15_Init();
 80008a2:	f000 ff61 	bl	8001768 <MX_TIM15_Init>
  MX_ADC1_Init();
 80008a6:	f000 fb17 	bl	8000ed8 <MX_ADC1_Init>
  MX_ADC3_Init();
 80008aa:	f000 fc1b 	bl	80010e4 <MX_ADC3_Init>
  MX_TIM3_Init();
 80008ae:	f000 fe5f 	bl	8001570 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  LED_2_ON;
 80008b2:	2201      	movs	r2, #1
 80008b4:	2101      	movs	r1, #1
 80008b6:	48b4      	ldr	r0, [pc, #720]	; (8000b88 <main+0x31c>)
 80008b8:	f004 fc0c 	bl	80050d4 <HAL_GPIO_WritePin>
	TX_2;
 80008bc:	2201      	movs	r2, #1
 80008be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c6:	f004 fc05 	bl	80050d4 <HAL_GPIO_WritePin>


 TIM1->CCR1=pwm[0];
 80008ca:	4bb0      	ldr	r3, [pc, #704]	; (8000b8c <main+0x320>)
 80008cc:	881a      	ldrh	r2, [r3, #0]
 80008ce:	4bb0      	ldr	r3, [pc, #704]	; (8000b90 <main+0x324>)
 80008d0:	635a      	str	r2, [r3, #52]	; 0x34
 TIM1->CCR2=pwm[1];
 80008d2:	4bae      	ldr	r3, [pc, #696]	; (8000b8c <main+0x320>)
 80008d4:	885a      	ldrh	r2, [r3, #2]
 80008d6:	4bae      	ldr	r3, [pc, #696]	; (8000b90 <main+0x324>)
 80008d8:	639a      	str	r2, [r3, #56]	; 0x38
 TIM8->CCR1=pwm[2];
 80008da:	4bac      	ldr	r3, [pc, #688]	; (8000b8c <main+0x320>)
 80008dc:	889a      	ldrh	r2, [r3, #4]
 80008de:	4bad      	ldr	r3, [pc, #692]	; (8000b94 <main+0x328>)
 80008e0:	635a      	str	r2, [r3, #52]	; 0x34
 TIM15->CCR1=pwm[3];
 80008e2:	4baa      	ldr	r3, [pc, #680]	; (8000b8c <main+0x320>)
 80008e4:	88da      	ldrh	r2, [r3, #6]
 80008e6:	4bac      	ldr	r3, [pc, #688]	; (8000b98 <main+0x32c>)
 80008e8:	635a      	str	r2, [r3, #52]	; 0x34



  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80008ea:	2100      	movs	r1, #0
 80008ec:	48ab      	ldr	r0, [pc, #684]	; (8000b9c <main+0x330>)
 80008ee:	f007 feeb 	bl	80086c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80008f2:	2104      	movs	r1, #4
 80008f4:	48a9      	ldr	r0, [pc, #676]	; (8000b9c <main+0x330>)
 80008f6:	f007 fee7 	bl	80086c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80008fa:	2100      	movs	r1, #0
 80008fc:	48a8      	ldr	r0, [pc, #672]	; (8000ba0 <main+0x334>)
 80008fe:	f007 fee3 	bl	80086c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000902:	2100      	movs	r1, #0
 8000904:	48a7      	ldr	r0, [pc, #668]	; (8000ba4 <main+0x338>)
 8000906:	f007 fedf 	bl	80086c8 <HAL_TIM_PWM_Start>
//  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
//  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
//  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
//  HAL_TIMEx_PWMN_Start(&htim15, TIM_CHANNEL_1);

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800090a:	2100      	movs	r1, #0
 800090c:	48a6      	ldr	r0, [pc, #664]	; (8000ba8 <main+0x33c>)
 800090e:	f008 f8d3 	bl	8008ab8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8000912:	2104      	movs	r1, #4
 8000914:	48a4      	ldr	r0, [pc, #656]	; (8000ba8 <main+0x33c>)
 8000916:	f008 f8cf 	bl	8008ab8 <HAL_TIM_IC_Start_IT>

  PORT1_ON;
 800091a:	2201      	movs	r2, #1
 800091c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000920:	48a2      	ldr	r0, [pc, #648]	; (8000bac <main+0x340>)
 8000922:	f004 fbd7 	bl	80050d4 <HAL_GPIO_WritePin>
  PORT2_ON;
 8000926:	2201      	movs	r2, #1
 8000928:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800092c:	489f      	ldr	r0, [pc, #636]	; (8000bac <main+0x340>)
 800092e:	f004 fbd1 	bl	80050d4 <HAL_GPIO_WritePin>
  PORT3_ON;
 8000932:	2201      	movs	r2, #1
 8000934:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000938:	489c      	ldr	r0, [pc, #624]	; (8000bac <main+0x340>)
 800093a:	f004 fbcb 	bl	80050d4 <HAL_GPIO_WritePin>
  PORT4_ON;
 800093e:	2201      	movs	r2, #1
 8000940:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000944:	4899      	ldr	r0, [pc, #612]	; (8000bac <main+0x340>)
 8000946:	f004 fbc5 	bl	80050d4 <HAL_GPIO_WritePin>

  HAL_ADCEx_Calibration_Start(&hadc2,5);
 800094a:	2105      	movs	r1, #5
 800094c:	4898      	ldr	r0, [pc, #608]	; (8000bb0 <main+0x344>)
 800094e:	f003 f889 	bl	8003a64 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc1,4);
 8000952:	2104      	movs	r1, #4
 8000954:	4897      	ldr	r0, [pc, #604]	; (8000bb4 <main+0x348>)
 8000956:	f003 f885 	bl	8003a64 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc3,2);
 800095a:	2102      	movs	r1, #2
 800095c:	4896      	ldr	r0, [pc, #600]	; (8000bb8 <main+0x34c>)
 800095e:	f003 f881 	bl	8003a64 <HAL_ADCEx_Calibration_Start>

  flag=1;
 8000962:	4b96      	ldr	r3, [pc, #600]	; (8000bbc <main+0x350>)
 8000964:	2201      	movs	r2, #1
 8000966:	701a      	strb	r2, [r3, #0]

  HAL_Delay(100);
 8000968:	2064      	movs	r0, #100	; 0x64
 800096a:	f001 ff99 	bl	80028a0 <HAL_Delay>

 // I2C_Init();



  lcd_init();
 800096e:	f7ff fe7a 	bl	8000666 <lcd_init>
  lcd_clear();
 8000972:	f7ff fef3 	bl	800075c <lcd_clear>
   // char *text = " ";
    char int_to_str[10];

     LED_2_OFF;
 8000976:	2200      	movs	r2, #0
 8000978:	2101      	movs	r1, #1
 800097a:	4883      	ldr	r0, [pc, #524]	; (8000b88 <main+0x31c>)
 800097c:	f004 fbaa 	bl	80050d4 <HAL_GPIO_WritePin>



      I2C_send(0b00110000,0);   // 8ми битный интерфейс
 8000980:	2100      	movs	r1, #0
 8000982:	2030      	movs	r0, #48	; 0x30
 8000984:	f7ff fda0 	bl	80004c8 <I2C_send>
      I2C_send(0b00000010,0);   // установка курсора в начале строки
 8000988:	2100      	movs	r1, #0
 800098a:	2002      	movs	r0, #2
 800098c:	f7ff fd9c 	bl	80004c8 <I2C_send>
      I2C_send(0b00001100,0);   // нормальный режим работы
 8000990:	2100      	movs	r1, #0
 8000992:	200c      	movs	r0, #12
 8000994:	f7ff fd98 	bl	80004c8 <I2C_send>
      I2C_send(0b00000001,0);   // очистка дисплея
 8000998:	2100      	movs	r1, #0
 800099a:	2001      	movs	r0, #1
 800099c:	f7ff fd94 	bl	80004c8 <I2C_send>
      HAL_ADC_Start_DMA(&hadc2, (uint16_t*)hall_sens, 5);
 80009a0:	2205      	movs	r2, #5
 80009a2:	4987      	ldr	r1, [pc, #540]	; (8000bc0 <main+0x354>)
 80009a4:	4882      	ldr	r0, [pc, #520]	; (8000bb0 <main+0x344>)
 80009a6:	f002 fbeb 	bl	8003180 <HAL_ADC_Start_DMA>
	 //	 	HAL_Delay(500);




	  if(flag==1){
 80009aa:	4b84      	ldr	r3, [pc, #528]	; (8000bbc <main+0x350>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d1fa      	bne.n	80009aa <main+0x13e>
		  HAL_ADC_Stop_DMA(&hadc2);
 80009b4:	487e      	ldr	r0, [pc, #504]	; (8000bb0 <main+0x344>)
 80009b6:	f002 fcff 	bl	80033b8 <HAL_ADC_Stop_DMA>
		  current[2]=hall_sens[4];
 80009ba:	4b81      	ldr	r3, [pc, #516]	; (8000bc0 <main+0x354>)
 80009bc:	891a      	ldrh	r2, [r3, #8]
 80009be:	4b81      	ldr	r3, [pc, #516]	; (8000bc4 <main+0x358>)
 80009c0:	809a      	strh	r2, [r3, #4]
		  HAL_ADC_Start(&hadc1);
 80009c2:	487c      	ldr	r0, [pc, #496]	; (8000bb4 <main+0x348>)
 80009c4:	f002 f98e 	bl	8002ce4 <HAL_ADC_Start>
		 	  		  	 HAL_ADC_PollForConversion(&hadc1, 100);
 80009c8:	2164      	movs	r1, #100	; 0x64
 80009ca:	487a      	ldr	r0, [pc, #488]	; (8000bb4 <main+0x348>)
 80009cc:	f002 fad6 	bl	8002f7c <HAL_ADC_PollForConversion>
		 	  		     current[3]=0;
 80009d0:	4b7c      	ldr	r3, [pc, #496]	; (8000bc4 <main+0x358>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	80da      	strh	r2, [r3, #6]
		 	  		  	 current[3]=HAL_ADC_GetValue(&hadc1);
 80009d6:	4877      	ldr	r0, [pc, #476]	; (8000bb4 <main+0x348>)
 80009d8:	f002 fd50 	bl	800347c <HAL_ADC_GetValue>
 80009dc:	4603      	mov	r3, r0
 80009de:	b29a      	uxth	r2, r3
 80009e0:	4b78      	ldr	r3, [pc, #480]	; (8000bc4 <main+0x358>)
 80009e2:	80da      	strh	r2, [r3, #6]
		 	  		  	 HAL_ADC_Stop(&hadc1);
 80009e4:	4873      	ldr	r0, [pc, #460]	; (8000bb4 <main+0x348>)
 80009e6:	f002 fa93 	bl	8002f10 <HAL_ADC_Stop>

		 	  		  ADC_read_1();
 80009ea:	f7ff fc79 	bl	80002e0 <ADC_read_1>
		 	  		  ADC_read_12();
 80009ee:	f7ff fc97 	bl	8000320 <ADC_read_12>

                current_avg=(current[0]+current[1]+current[2]+current[3])/4;
 80009f2:	4b74      	ldr	r3, [pc, #464]	; (8000bc4 <main+0x358>)
 80009f4:	881b      	ldrh	r3, [r3, #0]
 80009f6:	461a      	mov	r2, r3
 80009f8:	4b72      	ldr	r3, [pc, #456]	; (8000bc4 <main+0x358>)
 80009fa:	885b      	ldrh	r3, [r3, #2]
 80009fc:	4413      	add	r3, r2
 80009fe:	4a71      	ldr	r2, [pc, #452]	; (8000bc4 <main+0x358>)
 8000a00:	8892      	ldrh	r2, [r2, #4]
 8000a02:	4413      	add	r3, r2
 8000a04:	4a6f      	ldr	r2, [pc, #444]	; (8000bc4 <main+0x358>)
 8000a06:	88d2      	ldrh	r2, [r2, #6]
 8000a08:	4413      	add	r3, r2
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	da00      	bge.n	8000a10 <main+0x1a4>
 8000a0e:	3303      	adds	r3, #3
 8000a10:	109b      	asrs	r3, r3, #2
 8000a12:	b29a      	uxth	r2, r3
 8000a14:	4b6c      	ldr	r3, [pc, #432]	; (8000bc8 <main+0x35c>)
 8000a16:	801a      	strh	r2, [r3, #0]
                current_sum=current[0]+current[1]+current[2]+current[3];
 8000a18:	4b6a      	ldr	r3, [pc, #424]	; (8000bc4 <main+0x358>)
 8000a1a:	881a      	ldrh	r2, [r3, #0]
 8000a1c:	4b69      	ldr	r3, [pc, #420]	; (8000bc4 <main+0x358>)
 8000a1e:	885b      	ldrh	r3, [r3, #2]
 8000a20:	4413      	add	r3, r2
 8000a22:	b29a      	uxth	r2, r3
 8000a24:	4b67      	ldr	r3, [pc, #412]	; (8000bc4 <main+0x358>)
 8000a26:	889b      	ldrh	r3, [r3, #4]
 8000a28:	4413      	add	r3, r2
 8000a2a:	b29a      	uxth	r2, r3
 8000a2c:	4b65      	ldr	r3, [pc, #404]	; (8000bc4 <main+0x358>)
 8000a2e:	88db      	ldrh	r3, [r3, #6]
 8000a30:	4413      	add	r3, r2
 8000a32:	b29a      	uxth	r2, r3
 8000a34:	4b65      	ldr	r3, [pc, #404]	; (8000bcc <main+0x360>)
 8000a36:	801a      	strh	r2, [r3, #0]
		 	  		  adc_count++;
 8000a38:	4b65      	ldr	r3, [pc, #404]	; (8000bd0 <main+0x364>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	b2da      	uxtb	r2, r3
 8000a40:	4b63      	ldr	r3, [pc, #396]	; (8000bd0 <main+0x364>)
 8000a42:	701a      	strb	r2, [r3, #0]



		 	  	    adc_filter[0]= filter(current[0]);
 8000a44:	4b5f      	ldr	r3, [pc, #380]	; (8000bc4 <main+0x358>)
 8000a46:	881b      	ldrh	r3, [r3, #0]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff fe91 	bl	8000770 <filter>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	b2da      	uxtb	r2, r3
 8000a52:	4b60      	ldr	r3, [pc, #384]	; (8000bd4 <main+0x368>)
 8000a54:	701a      	strb	r2, [r3, #0]
		 	  		adc_filter[1]= filter(current[1]);
 8000a56:	4b5b      	ldr	r3, [pc, #364]	; (8000bc4 <main+0x358>)
 8000a58:	885b      	ldrh	r3, [r3, #2]
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f7ff fe88 	bl	8000770 <filter>
 8000a60:	4603      	mov	r3, r0
 8000a62:	b2da      	uxtb	r2, r3
 8000a64:	4b5b      	ldr	r3, [pc, #364]	; (8000bd4 <main+0x368>)
 8000a66:	705a      	strb	r2, [r3, #1]
		 	  		adc_filter[2]= filter(current[2]);
 8000a68:	4b56      	ldr	r3, [pc, #344]	; (8000bc4 <main+0x358>)
 8000a6a:	889b      	ldrh	r3, [r3, #4]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff fe7f 	bl	8000770 <filter>
 8000a72:	4603      	mov	r3, r0
 8000a74:	b2da      	uxtb	r2, r3
 8000a76:	4b57      	ldr	r3, [pc, #348]	; (8000bd4 <main+0x368>)
 8000a78:	709a      	strb	r2, [r3, #2]
		 	  		adc_filter[3]= filter(current[3]);
 8000a7a:	4b52      	ldr	r3, [pc, #328]	; (8000bc4 <main+0x358>)
 8000a7c:	88db      	ldrh	r3, [r3, #6]
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff fe76 	bl	8000770 <filter>
 8000a84:	4603      	mov	r3, r0
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	4b52      	ldr	r3, [pc, #328]	; (8000bd4 <main+0x368>)
 8000a8a:	70da      	strb	r2, [r3, #3]



		 	  	  if((page_num==0)&&(adc_count==20)){
 8000a8c:	4b52      	ldr	r3, [pc, #328]	; (8000bd8 <main+0x36c>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d149      	bne.n	8000b28 <main+0x2bc>
 8000a94:	4b4e      	ldr	r3, [pc, #312]	; (8000bd0 <main+0x364>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b14      	cmp	r3, #20
 8000a9a:	d145      	bne.n	8000b28 <main+0x2bc>


				 	  		sprintf(int_to_str, "RPM-%05d t/min     ",rpm);
 8000a9c:	4b4f      	ldr	r3, [pc, #316]	; (8000bdc <main+0x370>)
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	494f      	ldr	r1, [pc, #316]	; (8000be0 <main+0x374>)
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f00a fc97 	bl	800b3d8 <siprintf>
				 	  		lcd_set_cursor(1, 0);
 8000aaa:	2100      	movs	r1, #0
 8000aac:	2001      	movs	r0, #1
 8000aae:	f7ff fe1f 	bl	80006f0 <lcd_set_cursor>
				 	  	    lcd_write_string(int_to_str);
 8000ab2:	1d3b      	adds	r3, r7, #4
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff fe05 	bl	80006c4 <lcd_write_string>

				 	  	    sprintf(int_to_str, "PWM_CMD-%05d/%03d%% ",pwm_n,pwm_n/20);
 8000aba:	4b4a      	ldr	r3, [pc, #296]	; (8000be4 <main+0x378>)
 8000abc:	881b      	ldrh	r3, [r3, #0]
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4b48      	ldr	r3, [pc, #288]	; (8000be4 <main+0x378>)
 8000ac2:	881b      	ldrh	r3, [r3, #0]
 8000ac4:	4a48      	ldr	r2, [pc, #288]	; (8000be8 <main+0x37c>)
 8000ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8000aca:	091b      	lsrs	r3, r3, #4
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	1d38      	adds	r0, r7, #4
 8000ad0:	460a      	mov	r2, r1
 8000ad2:	4946      	ldr	r1, [pc, #280]	; (8000bec <main+0x380>)
 8000ad4:	f00a fc80 	bl	800b3d8 <siprintf>
				 	  	 	lcd_set_cursor(2, 0);
 8000ad8:	2100      	movs	r1, #0
 8000ada:	2002      	movs	r0, #2
 8000adc:	f7ff fe08 	bl	80006f0 <lcd_set_cursor>
				 	  	 	lcd_write_string(int_to_str);
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f7ff fdee 	bl	80006c4 <lcd_write_string>

				 	  	    sprintf(int_to_str, "ADC_avg-%05d ",current_avg);
 8000ae8:	4b37      	ldr	r3, [pc, #220]	; (8000bc8 <main+0x35c>)
 8000aea:	881b      	ldrh	r3, [r3, #0]
 8000aec:	461a      	mov	r2, r3
 8000aee:	1d3b      	adds	r3, r7, #4
 8000af0:	493f      	ldr	r1, [pc, #252]	; (8000bf0 <main+0x384>)
 8000af2:	4618      	mov	r0, r3
 8000af4:	f00a fc70 	bl	800b3d8 <siprintf>
				 	  	 	lcd_set_cursor(3, 0);
 8000af8:	2100      	movs	r1, #0
 8000afa:	2003      	movs	r0, #3
 8000afc:	f7ff fdf8 	bl	80006f0 <lcd_set_cursor>
				 	  	 	lcd_write_string(int_to_str);
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff fdde 	bl	80006c4 <lcd_write_string>

				 	    	sprintf(int_to_str, "F=%05dHz ",f);
 8000b08:	4b3a      	ldr	r3, [pc, #232]	; (8000bf4 <main+0x388>)
 8000b0a:	881b      	ldrh	r3, [r3, #0]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	4939      	ldr	r1, [pc, #228]	; (8000bf8 <main+0x38c>)
 8000b12:	4618      	mov	r0, r3
 8000b14:	f00a fc60 	bl	800b3d8 <siprintf>
				 	  	 	lcd_set_cursor(4, 0);
 8000b18:	2100      	movs	r1, #0
 8000b1a:	2004      	movs	r0, #4
 8000b1c:	f7ff fde8 	bl	80006f0 <lcd_set_cursor>
				 	  	 	lcd_write_string(int_to_str);	  }
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff fdce 	bl	80006c4 <lcd_write_string>

		 	  	  if((page_num==2)&&(adc_count==22)){
 8000b28:	4b2b      	ldr	r3, [pc, #172]	; (8000bd8 <main+0x36c>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b02      	cmp	r3, #2
 8000b2e:	f040 8083 	bne.w	8000c38 <main+0x3cc>
 8000b32:	4b27      	ldr	r3, [pc, #156]	; (8000bd0 <main+0x364>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	2b16      	cmp	r3, #22
 8000b38:	d17e      	bne.n	8000c38 <main+0x3cc>

		 	  		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN); // RTC_FORMAT_BIN , RTC_FORMAT_BCD
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	492f      	ldr	r1, [pc, #188]	; (8000bfc <main+0x390>)
 8000b3e:	4830      	ldr	r0, [pc, #192]	; (8000c00 <main+0x394>)
 8000b40:	f007 fb1b 	bl	800817a <HAL_RTC_GetTime>
		 	  	 HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000b44:	2200      	movs	r2, #0
 8000b46:	492f      	ldr	r1, [pc, #188]	; (8000c04 <main+0x398>)
 8000b48:	482d      	ldr	r0, [pc, #180]	; (8000c00 <main+0x394>)
 8000b4a:	f007 fbf8 	bl	800833e <HAL_RTC_GetDate>

		 	  	                            sprintf(int_to_str, "START_TIME:%02d:%02d:%02d",hour,min,sec);
 8000b4e:	4b2e      	ldr	r3, [pc, #184]	; (8000c08 <main+0x39c>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	461a      	mov	r2, r3
 8000b54:	4b2d      	ldr	r3, [pc, #180]	; (8000c0c <main+0x3a0>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4b2d      	ldr	r3, [pc, #180]	; (8000c10 <main+0x3a4>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	1d38      	adds	r0, r7, #4
 8000b60:	9300      	str	r3, [sp, #0]
 8000b62:	460b      	mov	r3, r1
 8000b64:	492b      	ldr	r1, [pc, #172]	; (8000c14 <main+0x3a8>)
 8000b66:	f00a fc37 	bl	800b3d8 <siprintf>
		 	  			 	  				lcd_set_cursor(1, 0);
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	f7ff fdbf 	bl	80006f0 <lcd_set_cursor>
		 	  			 	  			    lcd_write_string(int_to_str);
 8000b72:	1d3b      	adds	r3, r7, #4
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff fda5 	bl	80006c4 <lcd_write_string>

		 	  					 	  		sprintf(int_to_str, "TIME:%02d:%02d:%02d",sTime.Hours,sTime.Minutes,sTime.Seconds);
 8000b7a:	4b20      	ldr	r3, [pc, #128]	; (8000bfc <main+0x390>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	461a      	mov	r2, r3
 8000b80:	4b1e      	ldr	r3, [pc, #120]	; (8000bfc <main+0x390>)
 8000b82:	785b      	ldrb	r3, [r3, #1]
 8000b84:	4619      	mov	r1, r3
 8000b86:	e047      	b.n	8000c18 <main+0x3ac>
 8000b88:	48001400 	.word	0x48001400
 8000b8c:	20000000 	.word	0x20000000
 8000b90:	40012c00 	.word	0x40012c00
 8000b94:	40013400 	.word	0x40013400
 8000b98:	40014000 	.word	0x40014000
 8000b9c:	20000240 	.word	0x20000240
 8000ba0:	20000324 	.word	0x20000324
 8000ba4:	20000370 	.word	0x20000370
 8000ba8:	2000028c 	.word	0x2000028c
 8000bac:	48000400 	.word	0x48000400
 8000bb0:	200000e8 	.word	0x200000e8
 8000bb4:	20000098 	.word	0x20000098
 8000bb8:	20000138 	.word	0x20000138
 8000bbc:	200004eb 	.word	0x200004eb
 8000bc0:	200004d4 	.word	0x200004d4
 8000bc4:	200004cc 	.word	0x200004cc
 8000bc8:	20000502 	.word	0x20000502
 8000bcc:	20000504 	.word	0x20000504
 8000bd0:	200004fa 	.word	0x200004fa
 8000bd4:	200004fc 	.word	0x200004fc
 8000bd8:	20000500 	.word	0x20000500
 8000bdc:	200004f4 	.word	0x200004f4
 8000be0:	0800bccc 	.word	0x0800bccc
 8000be4:	200004e6 	.word	0x200004e6
 8000be8:	cccccccd 	.word	0xcccccccd
 8000bec:	0800bce0 	.word	0x0800bce0
 8000bf0:	0800bcf8 	.word	0x0800bcf8
 8000bf4:	200004f8 	.word	0x200004f8
 8000bf8:	0800bd08 	.word	0x0800bd08
 8000bfc:	2000050c 	.word	0x2000050c
 8000c00:	20000220 	.word	0x20000220
 8000c04:	20000520 	.word	0x20000520
 8000c08:	20000507 	.word	0x20000507
 8000c0c:	20000506 	.word	0x20000506
 8000c10:	20000508 	.word	0x20000508
 8000c14:	0800bd14 	.word	0x0800bd14
 8000c18:	4b6a      	ldr	r3, [pc, #424]	; (8000dc4 <main+0x558>)
 8000c1a:	789b      	ldrb	r3, [r3, #2]
 8000c1c:	1d38      	adds	r0, r7, #4
 8000c1e:	9300      	str	r3, [sp, #0]
 8000c20:	460b      	mov	r3, r1
 8000c22:	4969      	ldr	r1, [pc, #420]	; (8000dc8 <main+0x55c>)
 8000c24:	f00a fbd8 	bl	800b3d8 <siprintf>
		 	  					 	  		lcd_set_cursor(2, 0);
 8000c28:	2100      	movs	r1, #0
 8000c2a:	2002      	movs	r0, #2
 8000c2c:	f7ff fd60 	bl	80006f0 <lcd_set_cursor>
		 	  					 	  	    lcd_write_string(int_to_str);
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff fd46 	bl	80006c4 <lcd_write_string>

		 	  			 	  	  }



		 	  	  if(page_num==1){
 8000c38:	4b64      	ldr	r3, [pc, #400]	; (8000dcc <main+0x560>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	f040 80a3 	bne.w	8000d88 <main+0x51c>
		 	  	                 	if(adc_count==18){
 8000c42:	4b63      	ldr	r3, [pc, #396]	; (8000dd0 <main+0x564>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	2b12      	cmp	r3, #18
 8000c48:	d157      	bne.n	8000cfa <main+0x48e>

		 	  				 	  		sprintf(int_to_str, "PWM-%02d%%/%04d",pwm[0]/20,pwm[0]);
 8000c4a:	4b62      	ldr	r3, [pc, #392]	; (8000dd4 <main+0x568>)
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	4a62      	ldr	r2, [pc, #392]	; (8000dd8 <main+0x56c>)
 8000c50:	fba2 2303 	umull	r2, r3, r2, r3
 8000c54:	091b      	lsrs	r3, r3, #4
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	461a      	mov	r2, r3
 8000c5a:	4b5e      	ldr	r3, [pc, #376]	; (8000dd4 <main+0x568>)
 8000c5c:	881b      	ldrh	r3, [r3, #0]
 8000c5e:	1d38      	adds	r0, r7, #4
 8000c60:	495e      	ldr	r1, [pc, #376]	; (8000ddc <main+0x570>)
 8000c62:	f00a fbb9 	bl	800b3d8 <siprintf>
		 	  				 	  		lcd_set_cursor(1, 0);
 8000c66:	2100      	movs	r1, #0
 8000c68:	2001      	movs	r0, #1
 8000c6a:	f7ff fd41 	bl	80006f0 <lcd_set_cursor>
		 	  				 	  	    lcd_write_string(int_to_str);
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff fd27 	bl	80006c4 <lcd_write_string>

		 	  				 	     	sprintf(int_to_str, "PWM-%02d%%/%04d",pwm[1]/20,pwm[1]);
 8000c76:	4b57      	ldr	r3, [pc, #348]	; (8000dd4 <main+0x568>)
 8000c78:	885b      	ldrh	r3, [r3, #2]
 8000c7a:	4a57      	ldr	r2, [pc, #348]	; (8000dd8 <main+0x56c>)
 8000c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c80:	091b      	lsrs	r3, r3, #4
 8000c82:	b29b      	uxth	r3, r3
 8000c84:	461a      	mov	r2, r3
 8000c86:	4b53      	ldr	r3, [pc, #332]	; (8000dd4 <main+0x568>)
 8000c88:	885b      	ldrh	r3, [r3, #2]
 8000c8a:	1d38      	adds	r0, r7, #4
 8000c8c:	4953      	ldr	r1, [pc, #332]	; (8000ddc <main+0x570>)
 8000c8e:	f00a fba3 	bl	800b3d8 <siprintf>
		 	  				 	  	    lcd_set_cursor(2, 0);
 8000c92:	2100      	movs	r1, #0
 8000c94:	2002      	movs	r0, #2
 8000c96:	f7ff fd2b 	bl	80006f0 <lcd_set_cursor>
		 	  				 	  	    lcd_write_string(int_to_str);
 8000c9a:	1d3b      	adds	r3, r7, #4
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fd11 	bl	80006c4 <lcd_write_string>

		 	  				 	  	    sprintf(int_to_str, "PWM-%02d%%/%04d",pwm[2]/20,pwm[2]);
 8000ca2:	4b4c      	ldr	r3, [pc, #304]	; (8000dd4 <main+0x568>)
 8000ca4:	889b      	ldrh	r3, [r3, #4]
 8000ca6:	4a4c      	ldr	r2, [pc, #304]	; (8000dd8 <main+0x56c>)
 8000ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8000cac:	091b      	lsrs	r3, r3, #4
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4b48      	ldr	r3, [pc, #288]	; (8000dd4 <main+0x568>)
 8000cb4:	889b      	ldrh	r3, [r3, #4]
 8000cb6:	1d38      	adds	r0, r7, #4
 8000cb8:	4948      	ldr	r1, [pc, #288]	; (8000ddc <main+0x570>)
 8000cba:	f00a fb8d 	bl	800b3d8 <siprintf>
		 	  				 	  	    lcd_set_cursor(3, 0);
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	2003      	movs	r0, #3
 8000cc2:	f7ff fd15 	bl	80006f0 <lcd_set_cursor>
		 	  				 	  		lcd_write_string(int_to_str);
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff fcfb 	bl	80006c4 <lcd_write_string>

		 	  				 	    	sprintf(int_to_str, "PWM-%02d%%/%04d",pwm[3]/20,pwm[3]);
 8000cce:	4b41      	ldr	r3, [pc, #260]	; (8000dd4 <main+0x568>)
 8000cd0:	88db      	ldrh	r3, [r3, #6]
 8000cd2:	4a41      	ldr	r2, [pc, #260]	; (8000dd8 <main+0x56c>)
 8000cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd8:	091b      	lsrs	r3, r3, #4
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4b3d      	ldr	r3, [pc, #244]	; (8000dd4 <main+0x568>)
 8000ce0:	88db      	ldrh	r3, [r3, #6]
 8000ce2:	1d38      	adds	r0, r7, #4
 8000ce4:	493d      	ldr	r1, [pc, #244]	; (8000ddc <main+0x570>)
 8000ce6:	f00a fb77 	bl	800b3d8 <siprintf>
		 	  				 	  	    lcd_set_cursor(4, 0);
 8000cea:	2100      	movs	r1, #0
 8000cec:	2004      	movs	r0, #4
 8000cee:	f7ff fcff 	bl	80006f0 <lcd_set_cursor>
		 	  				 	  		lcd_write_string(int_to_str);
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff fce5 	bl	80006c4 <lcd_write_string>

		 	  				 	  		}

		 	  		if(adc_count==180){
 8000cfa:	4b35      	ldr	r3, [pc, #212]	; (8000dd0 <main+0x564>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	2bb4      	cmp	r3, #180	; 0xb4
 8000d00:	d142      	bne.n	8000d88 <main+0x51c>


		 	  			sprintf(int_to_str, "Adc-%03d",current[0]);
 8000d02:	4b37      	ldr	r3, [pc, #220]	; (8000de0 <main+0x574>)
 8000d04:	881b      	ldrh	r3, [r3, #0]
 8000d06:	461a      	mov	r2, r3
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	4936      	ldr	r1, [pc, #216]	; (8000de4 <main+0x578>)
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f00a fb63 	bl	800b3d8 <siprintf>
		 	  			lcd_set_cursor(1, 13);
 8000d12:	210d      	movs	r1, #13
 8000d14:	2001      	movs	r0, #1
 8000d16:	f7ff fceb 	bl	80006f0 <lcd_set_cursor>
		 	  		    lcd_write_string(int_to_str);
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff fcd1 	bl	80006c4 <lcd_write_string>

		 	  		    sprintf(int_to_str, "Adc-%03d",current[1]);
 8000d22:	4b2f      	ldr	r3, [pc, #188]	; (8000de0 <main+0x574>)
 8000d24:	885b      	ldrh	r3, [r3, #2]
 8000d26:	461a      	mov	r2, r3
 8000d28:	1d3b      	adds	r3, r7, #4
 8000d2a:	492e      	ldr	r1, [pc, #184]	; (8000de4 <main+0x578>)
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f00a fb53 	bl	800b3d8 <siprintf>
		 	  		 	lcd_set_cursor(2, 13);
 8000d32:	210d      	movs	r1, #13
 8000d34:	2002      	movs	r0, #2
 8000d36:	f7ff fcdb 	bl	80006f0 <lcd_set_cursor>
		 	  		    lcd_write_string(int_to_str);
 8000d3a:	1d3b      	adds	r3, r7, #4
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff fcc1 	bl	80006c4 <lcd_write_string>

		 	  		    sprintf(int_to_str, "Adc-%03d",current[2]);
 8000d42:	4b27      	ldr	r3, [pc, #156]	; (8000de0 <main+0x574>)
 8000d44:	889b      	ldrh	r3, [r3, #4]
 8000d46:	461a      	mov	r2, r3
 8000d48:	1d3b      	adds	r3, r7, #4
 8000d4a:	4926      	ldr	r1, [pc, #152]	; (8000de4 <main+0x578>)
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f00a fb43 	bl	800b3d8 <siprintf>
		 	  		    lcd_set_cursor(3, 13);
 8000d52:	210d      	movs	r1, #13
 8000d54:	2003      	movs	r0, #3
 8000d56:	f7ff fccb 	bl	80006f0 <lcd_set_cursor>
		 	  		    lcd_write_string(int_to_str);
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fcb1 	bl	80006c4 <lcd_write_string>

		 	  	        sprintf(int_to_str, "Adc-%03d",current[3]);
 8000d62:	4b1f      	ldr	r3, [pc, #124]	; (8000de0 <main+0x574>)
 8000d64:	88db      	ldrh	r3, [r3, #6]
 8000d66:	461a      	mov	r2, r3
 8000d68:	1d3b      	adds	r3, r7, #4
 8000d6a:	491e      	ldr	r1, [pc, #120]	; (8000de4 <main+0x578>)
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f00a fb33 	bl	800b3d8 <siprintf>
		 	  	 		lcd_set_cursor(4, 13);
 8000d72:	210d      	movs	r1, #13
 8000d74:	2004      	movs	r0, #4
 8000d76:	f7ff fcbb 	bl	80006f0 <lcd_set_cursor>
		 	  	 		lcd_write_string(int_to_str);
 8000d7a:	1d3b      	adds	r3, r7, #4
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fca1 	bl	80006c4 <lcd_write_string>

		 	  	    adc_count=0;
 8000d82:	4b13      	ldr	r3, [pc, #76]	; (8000dd0 <main+0x564>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	701a      	strb	r2, [r3, #0]





	  	PWM_correction();
 8000d88:	f7ff faea 	bl	8000360 <PWM_correction>
	  	page();
 8000d8c:	f7ff fd2c 	bl	80007e8 <page>
	  	 TIM1->CCR1=pwm[0];
 8000d90:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <main+0x568>)
 8000d92:	881a      	ldrh	r2, [r3, #0]
 8000d94:	4b14      	ldr	r3, [pc, #80]	; (8000de8 <main+0x57c>)
 8000d96:	635a      	str	r2, [r3, #52]	; 0x34
	  	 TIM1->CCR2=pwm[1];
 8000d98:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <main+0x568>)
 8000d9a:	885a      	ldrh	r2, [r3, #2]
 8000d9c:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <main+0x57c>)
 8000d9e:	639a      	str	r2, [r3, #56]	; 0x38
	  	 TIM8->CCR1=pwm[2];
 8000da0:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <main+0x568>)
 8000da2:	889a      	ldrh	r2, [r3, #4]
 8000da4:	4b11      	ldr	r3, [pc, #68]	; (8000dec <main+0x580>)
 8000da6:	635a      	str	r2, [r3, #52]	; 0x34
	  	 TIM15->CCR1=pwm[3];
 8000da8:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <main+0x568>)
 8000daa:	88da      	ldrh	r2, [r3, #6]
 8000dac:	4b10      	ldr	r3, [pc, #64]	; (8000df0 <main+0x584>)
 8000dae:	635a      	str	r2, [r3, #52]	; 0x34

    //  HAL_I2C_Master_Transmit_DMA(&hi2c1, I2C_SLAVE_ADDRESS, TxData, 6);


	  	flag=0;
 8000db0:	4b10      	ldr	r3, [pc, #64]	; (8000df4 <main+0x588>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	701a      	strb	r2, [r3, #0]
	  	HAL_ADC_Start_DMA(&hadc2, (uint16_t*)hall_sens, 5);
 8000db6:	2205      	movs	r2, #5
 8000db8:	490f      	ldr	r1, [pc, #60]	; (8000df8 <main+0x58c>)
 8000dba:	4810      	ldr	r0, [pc, #64]	; (8000dfc <main+0x590>)
 8000dbc:	f002 f9e0 	bl	8003180 <HAL_ADC_Start_DMA>
	  if(flag==1){
 8000dc0:	e5f3      	b.n	80009aa <main+0x13e>
 8000dc2:	bf00      	nop
 8000dc4:	2000050c 	.word	0x2000050c
 8000dc8:	0800bd30 	.word	0x0800bd30
 8000dcc:	20000500 	.word	0x20000500
 8000dd0:	200004fa 	.word	0x200004fa
 8000dd4:	20000000 	.word	0x20000000
 8000dd8:	cccccccd 	.word	0xcccccccd
 8000ddc:	0800bd44 	.word	0x0800bd44
 8000de0:	200004cc 	.word	0x200004cc
 8000de4:	0800bd54 	.word	0x0800bd54
 8000de8:	40012c00 	.word	0x40012c00
 8000dec:	40013400 	.word	0x40013400
 8000df0:	40014000 	.word	0x40014000
 8000df4:	200004eb 	.word	0x200004eb
 8000df8:	200004d4 	.word	0x200004d4
 8000dfc:	200000e8 	.word	0x200000e8

08000e00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b09e      	sub	sp, #120	; 0x78
 8000e04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e06:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e0a:	2228      	movs	r2, #40	; 0x28
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f00a fada 	bl	800b3c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e14:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e24:	463b      	mov	r3, r7
 8000e26:	223c      	movs	r2, #60	; 0x3c
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f00a facc 	bl	800b3c8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000e30:	230a      	movs	r3, #10
 8000e32:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e34:	2301      	movs	r3, #1
 8000e36:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e38:	2310      	movs	r3, #16
 8000e3a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e40:	2302      	movs	r3, #2
 8000e42:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e44:	2300      	movs	r3, #0
 8000e46:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000e48:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000e4c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e4e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e52:	4618      	mov	r0, r3
 8000e54:	f005 fc50 	bl	80066f8 <HAL_RCC_OscConfig>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000e5e:	f000 fff5 	bl	8001e4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e62:	230f      	movs	r3, #15
 8000e64:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e66:	2302      	movs	r3, #2
 8000e68:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e74:	2300      	movs	r3, #0
 8000e76:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e78:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e7c:	2102      	movs	r1, #2
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f006 fc78 	bl	8007774 <HAL_RCC_ClockConfig>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000e8a:	f000 ffdf 	bl	8001e4c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8000e8e:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <SystemClock_Config+0xd4>)
 8000e90:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM8
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e92:	2300      	movs	r3, #0
 8000e94:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000e9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e9e:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8000ea0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ea4:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000eaa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000eae:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eb8:	463b      	mov	r3, r7
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f006 fe90 	bl	8007be0 <HAL_RCCEx_PeriphCLKConfig>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000ec6:	f000 ffc1 	bl	8001e4c <Error_Handler>
  }
}
 8000eca:	bf00      	nop
 8000ecc:	3778      	adds	r7, #120	; 0x78
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	000131a3 	.word	0x000131a3

08000ed8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08a      	sub	sp, #40	; 0x28
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ede:	f107 031c 	add.w	r3, r7, #28
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
 8000ef8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000efa:	4b2e      	ldr	r3, [pc, #184]	; (8000fb4 <MX_ADC1_Init+0xdc>)
 8000efc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f00:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f02:	4b2c      	ldr	r3, [pc, #176]	; (8000fb4 <MX_ADC1_Init+0xdc>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f08:	4b2a      	ldr	r3, [pc, #168]	; (8000fb4 <MX_ADC1_Init+0xdc>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f0e:	4b29      	ldr	r3, [pc, #164]	; (8000fb4 <MX_ADC1_Init+0xdc>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f14:	4b27      	ldr	r3, [pc, #156]	; (8000fb4 <MX_ADC1_Init+0xdc>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f1a:	4b26      	ldr	r3, [pc, #152]	; (8000fb4 <MX_ADC1_Init+0xdc>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f22:	4b24      	ldr	r3, [pc, #144]	; (8000fb4 <MX_ADC1_Init+0xdc>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f28:	4b22      	ldr	r3, [pc, #136]	; (8000fb4 <MX_ADC1_Init+0xdc>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f2e:	4b21      	ldr	r3, [pc, #132]	; (8000fb4 <MX_ADC1_Init+0xdc>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f34:	4b1f      	ldr	r3, [pc, #124]	; (8000fb4 <MX_ADC1_Init+0xdc>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f3a:	4b1e      	ldr	r3, [pc, #120]	; (8000fb4 <MX_ADC1_Init+0xdc>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f42:	4b1c      	ldr	r3, [pc, #112]	; (8000fb4 <MX_ADC1_Init+0xdc>)
 8000f44:	2204      	movs	r2, #4
 8000f46:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f48:	4b1a      	ldr	r3, [pc, #104]	; (8000fb4 <MX_ADC1_Init+0xdc>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f4e:	4b19      	ldr	r3, [pc, #100]	; (8000fb4 <MX_ADC1_Init+0xdc>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f54:	4817      	ldr	r0, [pc, #92]	; (8000fb4 <MX_ADC1_Init+0xdc>)
 8000f56:	f001 fce5 	bl	8002924 <HAL_ADC_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000f60:	f000 ff74 	bl	8001e4c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f64:	2300      	movs	r3, #0
 8000f66:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f68:	f107 031c 	add.w	r3, r7, #28
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4811      	ldr	r0, [pc, #68]	; (8000fb4 <MX_ADC1_Init+0xdc>)
 8000f70:	f003 f8fe 	bl	8004170 <HAL_ADCEx_MultiModeConfigChannel>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000f7a:	f000 ff67 	bl	8001e4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000f7e:	2304      	movs	r3, #4
 8000f80:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f82:	2301      	movs	r3, #1
 8000f84:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES_5;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4806      	ldr	r0, [pc, #24]	; (8000fb4 <MX_ADC1_Init+0xdc>)
 8000f9c:	f002 fdfc 	bl	8003b98 <HAL_ADC_ConfigChannel>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000fa6:	f000 ff51 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000faa:	bf00      	nop
 8000fac:	3728      	adds	r7, #40	; 0x28
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000098 	.word	0x20000098

08000fb8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fbe:	463b      	mov	r3, r7
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
 8000fcc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000fce:	4b43      	ldr	r3, [pc, #268]	; (80010dc <MX_ADC2_Init+0x124>)
 8000fd0:	4a43      	ldr	r2, [pc, #268]	; (80010e0 <MX_ADC2_Init+0x128>)
 8000fd2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fd4:	4b41      	ldr	r3, [pc, #260]	; (80010dc <MX_ADC2_Init+0x124>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000fda:	4b40      	ldr	r3, [pc, #256]	; (80010dc <MX_ADC2_Init+0x124>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000fe0:	4b3e      	ldr	r3, [pc, #248]	; (80010dc <MX_ADC2_Init+0x124>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000fe6:	4b3d      	ldr	r3, [pc, #244]	; (80010dc <MX_ADC2_Init+0x124>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000fec:	4b3b      	ldr	r3, [pc, #236]	; (80010dc <MX_ADC2_Init+0x124>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ff4:	4b39      	ldr	r3, [pc, #228]	; (80010dc <MX_ADC2_Init+0x124>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ffa:	4b38      	ldr	r3, [pc, #224]	; (80010dc <MX_ADC2_Init+0x124>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001000:	4b36      	ldr	r3, [pc, #216]	; (80010dc <MX_ADC2_Init+0x124>)
 8001002:	2200      	movs	r2, #0
 8001004:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 5;
 8001006:	4b35      	ldr	r3, [pc, #212]	; (80010dc <MX_ADC2_Init+0x124>)
 8001008:	2205      	movs	r2, #5
 800100a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800100c:	4b33      	ldr	r3, [pc, #204]	; (80010dc <MX_ADC2_Init+0x124>)
 800100e:	2200      	movs	r2, #0
 8001010:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001014:	4b31      	ldr	r3, [pc, #196]	; (80010dc <MX_ADC2_Init+0x124>)
 8001016:	2204      	movs	r2, #4
 8001018:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800101a:	4b30      	ldr	r3, [pc, #192]	; (80010dc <MX_ADC2_Init+0x124>)
 800101c:	2200      	movs	r2, #0
 800101e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001020:	4b2e      	ldr	r3, [pc, #184]	; (80010dc <MX_ADC2_Init+0x124>)
 8001022:	2200      	movs	r2, #0
 8001024:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001026:	482d      	ldr	r0, [pc, #180]	; (80010dc <MX_ADC2_Init+0x124>)
 8001028:	f001 fc7c 	bl	8002924 <HAL_ADC_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8001032:	f000 ff0b 	bl	8001e4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001036:	2301      	movs	r3, #1
 8001038:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800103a:	2301      	movs	r3, #1
 800103c:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES_5;
 8001042:	2302      	movs	r3, #2
 8001044:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800104e:	463b      	mov	r3, r7
 8001050:	4619      	mov	r1, r3
 8001052:	4822      	ldr	r0, [pc, #136]	; (80010dc <MX_ADC2_Init+0x124>)
 8001054:	f002 fda0 	bl	8003b98 <HAL_ADC_ConfigChannel>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 800105e:	f000 fef5 	bl	8001e4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001062:	2302      	movs	r3, #2
 8001064:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001066:	2302      	movs	r3, #2
 8001068:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800106a:	463b      	mov	r3, r7
 800106c:	4619      	mov	r1, r3
 800106e:	481b      	ldr	r0, [pc, #108]	; (80010dc <MX_ADC2_Init+0x124>)
 8001070:	f002 fd92 	bl	8003b98 <HAL_ADC_ConfigChannel>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_ADC2_Init+0xc6>
  {
    Error_Handler();
 800107a:	f000 fee7 	bl	8001e4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800107e:	2303      	movs	r3, #3
 8001080:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001082:	2303      	movs	r3, #3
 8001084:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001086:	463b      	mov	r3, r7
 8001088:	4619      	mov	r1, r3
 800108a:	4814      	ldr	r0, [pc, #80]	; (80010dc <MX_ADC2_Init+0x124>)
 800108c:	f002 fd84 	bl	8003b98 <HAL_ADC_ConfigChannel>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_ADC2_Init+0xe2>
  {
    Error_Handler();
 8001096:	f000 fed9 	bl	8001e4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800109a:	2304      	movs	r3, #4
 800109c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800109e:	2304      	movs	r3, #4
 80010a0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010a2:	463b      	mov	r3, r7
 80010a4:	4619      	mov	r1, r3
 80010a6:	480d      	ldr	r0, [pc, #52]	; (80010dc <MX_ADC2_Init+0x124>)
 80010a8:	f002 fd76 	bl	8003b98 <HAL_ADC_ConfigChannel>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_ADC2_Init+0xfe>
  {
    Error_Handler();
 80010b2:	f000 fecb 	bl	8001e4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80010b6:	230c      	movs	r3, #12
 80010b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80010ba:	2305      	movs	r3, #5
 80010bc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010be:	463b      	mov	r3, r7
 80010c0:	4619      	mov	r1, r3
 80010c2:	4806      	ldr	r0, [pc, #24]	; (80010dc <MX_ADC2_Init+0x124>)
 80010c4:	f002 fd68 	bl	8003b98 <HAL_ADC_ConfigChannel>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_ADC2_Init+0x11a>
  {
    Error_Handler();
 80010ce:	f000 febd 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80010d2:	bf00      	nop
 80010d4:	3718      	adds	r7, #24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	200000e8 	.word	0x200000e8
 80010e0:	50000100 	.word	0x50000100

080010e4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08a      	sub	sp, #40	; 0x28
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010ea:	f107 031c 	add.w	r3, r7, #28
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
 8001104:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001106:	4b2d      	ldr	r3, [pc, #180]	; (80011bc <MX_ADC3_Init+0xd8>)
 8001108:	4a2d      	ldr	r2, [pc, #180]	; (80011c0 <MX_ADC3_Init+0xdc>)
 800110a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800110c:	4b2b      	ldr	r3, [pc, #172]	; (80011bc <MX_ADC3_Init+0xd8>)
 800110e:	2200      	movs	r2, #0
 8001110:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001112:	4b2a      	ldr	r3, [pc, #168]	; (80011bc <MX_ADC3_Init+0xd8>)
 8001114:	2200      	movs	r2, #0
 8001116:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001118:	4b28      	ldr	r3, [pc, #160]	; (80011bc <MX_ADC3_Init+0xd8>)
 800111a:	2200      	movs	r2, #0
 800111c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800111e:	4b27      	ldr	r3, [pc, #156]	; (80011bc <MX_ADC3_Init+0xd8>)
 8001120:	2200      	movs	r2, #0
 8001122:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001124:	4b25      	ldr	r3, [pc, #148]	; (80011bc <MX_ADC3_Init+0xd8>)
 8001126:	2200      	movs	r2, #0
 8001128:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800112c:	4b23      	ldr	r3, [pc, #140]	; (80011bc <MX_ADC3_Init+0xd8>)
 800112e:	2200      	movs	r2, #0
 8001130:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001132:	4b22      	ldr	r3, [pc, #136]	; (80011bc <MX_ADC3_Init+0xd8>)
 8001134:	2201      	movs	r2, #1
 8001136:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001138:	4b20      	ldr	r3, [pc, #128]	; (80011bc <MX_ADC3_Init+0xd8>)
 800113a:	2200      	movs	r2, #0
 800113c:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800113e:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <MX_ADC3_Init+0xd8>)
 8001140:	2201      	movs	r2, #1
 8001142:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001144:	4b1d      	ldr	r3, [pc, #116]	; (80011bc <MX_ADC3_Init+0xd8>)
 8001146:	2200      	movs	r2, #0
 8001148:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800114c:	4b1b      	ldr	r3, [pc, #108]	; (80011bc <MX_ADC3_Init+0xd8>)
 800114e:	2204      	movs	r2, #4
 8001150:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001152:	4b1a      	ldr	r3, [pc, #104]	; (80011bc <MX_ADC3_Init+0xd8>)
 8001154:	2200      	movs	r2, #0
 8001156:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001158:	4b18      	ldr	r3, [pc, #96]	; (80011bc <MX_ADC3_Init+0xd8>)
 800115a:	2200      	movs	r2, #0
 800115c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800115e:	4817      	ldr	r0, [pc, #92]	; (80011bc <MX_ADC3_Init+0xd8>)
 8001160:	f001 fbe0 	bl	8002924 <HAL_ADC_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 800116a:	f000 fe6f 	bl	8001e4c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800116e:	2300      	movs	r3, #0
 8001170:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8001172:	f107 031c 	add.w	r3, r7, #28
 8001176:	4619      	mov	r1, r3
 8001178:	4810      	ldr	r0, [pc, #64]	; (80011bc <MX_ADC3_Init+0xd8>)
 800117a:	f002 fff9 	bl	8004170 <HAL_ADCEx_MultiModeConfigChannel>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 8001184:	f000 fe62 	bl	8001e4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001188:	2301      	movs	r3, #1
 800118a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800118c:	2301      	movs	r3, #1
 800118e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001190:	2300      	movs	r3, #0
 8001192:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES_5;
 8001194:	2302      	movs	r3, #2
 8001196:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	4619      	mov	r1, r3
 80011a4:	4805      	ldr	r0, [pc, #20]	; (80011bc <MX_ADC3_Init+0xd8>)
 80011a6:	f002 fcf7 	bl	8003b98 <HAL_ADC_ConfigChannel>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 80011b0:	f000 fe4c 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80011b4:	bf00      	nop
 80011b6:	3728      	adds	r7, #40	; 0x28
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000138 	.word	0x20000138
 80011c0:	50000400 	.word	0x50000400

080011c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011c8:	4b1b      	ldr	r3, [pc, #108]	; (8001238 <MX_I2C1_Init+0x74>)
 80011ca:	4a1c      	ldr	r2, [pc, #112]	; (800123c <MX_I2C1_Init+0x78>)
 80011cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80011ce:	4b1a      	ldr	r3, [pc, #104]	; (8001238 <MX_I2C1_Init+0x74>)
 80011d0:	4a1b      	ldr	r2, [pc, #108]	; (8001240 <MX_I2C1_Init+0x7c>)
 80011d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 36;
 80011d4:	4b18      	ldr	r3, [pc, #96]	; (8001238 <MX_I2C1_Init+0x74>)
 80011d6:	2224      	movs	r2, #36	; 0x24
 80011d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011da:	4b17      	ldr	r3, [pc, #92]	; (8001238 <MX_I2C1_Init+0x74>)
 80011dc:	2201      	movs	r2, #1
 80011de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011e0:	4b15      	ldr	r3, [pc, #84]	; (8001238 <MX_I2C1_Init+0x74>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011e6:	4b14      	ldr	r3, [pc, #80]	; (8001238 <MX_I2C1_Init+0x74>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011ec:	4b12      	ldr	r3, [pc, #72]	; (8001238 <MX_I2C1_Init+0x74>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011f2:	4b11      	ldr	r3, [pc, #68]	; (8001238 <MX_I2C1_Init+0x74>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011f8:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <MX_I2C1_Init+0x74>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011fe:	480e      	ldr	r0, [pc, #56]	; (8001238 <MX_I2C1_Init+0x74>)
 8001200:	f003 ffb2 	bl	8005168 <HAL_I2C_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800120a:	f000 fe1f 	bl	8001e4c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800120e:	2100      	movs	r1, #0
 8001210:	4809      	ldr	r0, [pc, #36]	; (8001238 <MX_I2C1_Init+0x74>)
 8001212:	f005 f9d9 	bl	80065c8 <HAL_I2CEx_ConfigAnalogFilter>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800121c:	f000 fe16 	bl	8001e4c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001220:	2100      	movs	r1, #0
 8001222:	4805      	ldr	r0, [pc, #20]	; (8001238 <MX_I2C1_Init+0x74>)
 8001224:	f005 fa1b 	bl	800665e <HAL_I2CEx_ConfigDigitalFilter>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800122e:	f000 fe0d 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	200001cc 	.word	0x200001cc
 800123c:	40005400 	.word	0x40005400
 8001240:	2000090e 	.word	0x2000090e

08001244 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800124a:	1d3b      	adds	r3, r7, #4
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001258:	2300      	movs	r3, #0
 800125a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800125c:	4b24      	ldr	r3, [pc, #144]	; (80012f0 <MX_RTC_Init+0xac>)
 800125e:	4a25      	ldr	r2, [pc, #148]	; (80012f4 <MX_RTC_Init+0xb0>)
 8001260:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001262:	4b23      	ldr	r3, [pc, #140]	; (80012f0 <MX_RTC_Init+0xac>)
 8001264:	2200      	movs	r2, #0
 8001266:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001268:	4b21      	ldr	r3, [pc, #132]	; (80012f0 <MX_RTC_Init+0xac>)
 800126a:	227f      	movs	r2, #127	; 0x7f
 800126c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 311;
 800126e:	4b20      	ldr	r3, [pc, #128]	; (80012f0 <MX_RTC_Init+0xac>)
 8001270:	f240 1237 	movw	r2, #311	; 0x137
 8001274:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001276:	4b1e      	ldr	r3, [pc, #120]	; (80012f0 <MX_RTC_Init+0xac>)
 8001278:	2200      	movs	r2, #0
 800127a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800127c:	4b1c      	ldr	r3, [pc, #112]	; (80012f0 <MX_RTC_Init+0xac>)
 800127e:	2200      	movs	r2, #0
 8001280:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001282:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <MX_RTC_Init+0xac>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001288:	4819      	ldr	r0, [pc, #100]	; (80012f0 <MX_RTC_Init+0xac>)
 800128a:	f006 fe59 	bl	8007f40 <HAL_RTC_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8001294:	f000 fdda 	bl	8001e4c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x9;
 8001298:	2309      	movs	r3, #9
 800129a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800129c:	2300      	movs	r3, #0
 800129e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80012a4:	2300      	movs	r3, #0
 80012a6:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80012ac:	1d3b      	adds	r3, r7, #4
 80012ae:	2201      	movs	r2, #1
 80012b0:	4619      	mov	r1, r3
 80012b2:	480f      	ldr	r0, [pc, #60]	; (80012f0 <MX_RTC_Init+0xac>)
 80012b4:	f006 fec7 	bl	8008046 <HAL_RTC_SetTime>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 80012be:	f000 fdc5 	bl	8001e4c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80012c2:	2301      	movs	r3, #1
 80012c4:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JUNE;
 80012c6:	2306      	movs	r3, #6
 80012c8:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80012ca:	2301      	movs	r3, #1
 80012cc:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80012d2:	463b      	mov	r3, r7
 80012d4:	2201      	movs	r2, #1
 80012d6:	4619      	mov	r1, r3
 80012d8:	4805      	ldr	r0, [pc, #20]	; (80012f0 <MX_RTC_Init+0xac>)
 80012da:	f006 ffac 	bl	8008236 <HAL_RTC_SetDate>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 80012e4:	f000 fdb2 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80012e8:	bf00      	nop
 80012ea:	3718      	adds	r7, #24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000220 	.word	0x20000220
 80012f4:	40002800 	.word	0x40002800

080012f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b09a      	sub	sp, #104	; 0x68
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800130c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001318:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
 8001328:	615a      	str	r2, [r3, #20]
 800132a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800132c:	1d3b      	adds	r3, r7, #4
 800132e:	222c      	movs	r2, #44	; 0x2c
 8001330:	2100      	movs	r1, #0
 8001332:	4618      	mov	r0, r3
 8001334:	f00a f848 	bl	800b3c8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001338:	4b4a      	ldr	r3, [pc, #296]	; (8001464 <MX_TIM1_Init+0x16c>)
 800133a:	4a4b      	ldr	r2, [pc, #300]	; (8001468 <MX_TIM1_Init+0x170>)
 800133c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800133e:	4b49      	ldr	r3, [pc, #292]	; (8001464 <MX_TIM1_Init+0x16c>)
 8001340:	2200      	movs	r2, #0
 8001342:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001344:	4b47      	ldr	r3, [pc, #284]	; (8001464 <MX_TIM1_Init+0x16c>)
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 800134a:	4b46      	ldr	r3, [pc, #280]	; (8001464 <MX_TIM1_Init+0x16c>)
 800134c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001350:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001352:	4b44      	ldr	r3, [pc, #272]	; (8001464 <MX_TIM1_Init+0x16c>)
 8001354:	2200      	movs	r2, #0
 8001356:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001358:	4b42      	ldr	r3, [pc, #264]	; (8001464 <MX_TIM1_Init+0x16c>)
 800135a:	2200      	movs	r2, #0
 800135c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800135e:	4b41      	ldr	r3, [pc, #260]	; (8001464 <MX_TIM1_Init+0x16c>)
 8001360:	2280      	movs	r2, #128	; 0x80
 8001362:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001364:	483f      	ldr	r0, [pc, #252]	; (8001464 <MX_TIM1_Init+0x16c>)
 8001366:	f007 f8f7 	bl	8008558 <HAL_TIM_Base_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001370:	f000 fd6c 	bl	8001e4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001378:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800137a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800137e:	4619      	mov	r1, r3
 8001380:	4838      	ldr	r0, [pc, #224]	; (8001464 <MX_TIM1_Init+0x16c>)
 8001382:	f007 ffab 	bl	80092dc <HAL_TIM_ConfigClockSource>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800138c:	f000 fd5e 	bl	8001e4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001390:	4834      	ldr	r0, [pc, #208]	; (8001464 <MX_TIM1_Init+0x16c>)
 8001392:	f007 f938 	bl	8008606 <HAL_TIM_PWM_Init>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800139c:	f000 fd56 	bl	8001e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a0:	2300      	movs	r3, #0
 80013a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013a4:	2300      	movs	r3, #0
 80013a6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a8:	2300      	movs	r3, #0
 80013aa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013b0:	4619      	mov	r1, r3
 80013b2:	482c      	ldr	r0, [pc, #176]	; (8001464 <MX_TIM1_Init+0x16c>)
 80013b4:	f008 ff1e 	bl	800a1f4 <HAL_TIMEx_MasterConfigSynchronization>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80013be:	f000 fd45 	bl	8001e4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013c2:	2360      	movs	r3, #96	; 0x60
 80013c4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1000;
 80013c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ca:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013cc:	2300      	movs	r3, #0
 80013ce:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013d0:	2300      	movs	r3, #0
 80013d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80013d4:	2304      	movs	r3, #4
 80013d6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013d8:	2300      	movs	r3, #0
 80013da:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013dc:	2300      	movs	r3, #0
 80013de:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013e4:	2200      	movs	r2, #0
 80013e6:	4619      	mov	r1, r3
 80013e8:	481e      	ldr	r0, [pc, #120]	; (8001464 <MX_TIM1_Init+0x16c>)
 80013ea:	f007 fe63 	bl	80090b4 <HAL_TIM_PWM_ConfigChannel>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80013f4:	f000 fd2a 	bl	8001e4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013fc:	2204      	movs	r2, #4
 80013fe:	4619      	mov	r1, r3
 8001400:	4818      	ldr	r0, [pc, #96]	; (8001464 <MX_TIM1_Init+0x16c>)
 8001402:	f007 fe57 	bl	80090b4 <HAL_TIM_PWM_ConfigChannel>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 800140c:	f000 fd1e 	bl	8001e4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001410:	2300      	movs	r3, #0
 8001412:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001414:	2300      	movs	r3, #0
 8001416:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001418:	2300      	movs	r3, #0
 800141a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 50;
 800141c:	2332      	movs	r3, #50	; 0x32
 800141e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001424:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001428:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800142e:	2300      	movs	r3, #0
 8001430:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001432:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001436:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800143c:	2300      	movs	r3, #0
 800143e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001440:	1d3b      	adds	r3, r7, #4
 8001442:	4619      	mov	r1, r3
 8001444:	4807      	ldr	r0, [pc, #28]	; (8001464 <MX_TIM1_Init+0x16c>)
 8001446:	f008 ff55 	bl	800a2f4 <HAL_TIMEx_ConfigBreakDeadTime>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 8001450:	f000 fcfc 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001454:	4803      	ldr	r0, [pc, #12]	; (8001464 <MX_TIM1_Init+0x16c>)
 8001456:	f000 ff5b 	bl	8002310 <HAL_TIM_MspPostInit>

}
 800145a:	bf00      	nop
 800145c:	3768      	adds	r7, #104	; 0x68
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000240 	.word	0x20000240
 8001468:	40012c00 	.word	0x40012c00

0800146c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08c      	sub	sp, #48	; 0x30
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001472:	f107 0320 	add.w	r3, r7, #32
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]
 800147e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001498:	4b33      	ldr	r3, [pc, #204]	; (8001568 <MX_TIM2_Init+0xfc>)
 800149a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800149e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 80014a0:	4b31      	ldr	r3, [pc, #196]	; (8001568 <MX_TIM2_Init+0xfc>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a6:	4b30      	ldr	r3, [pc, #192]	; (8001568 <MX_TIM2_Init+0xfc>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64000000;
 80014ac:	4b2e      	ldr	r3, [pc, #184]	; (8001568 <MX_TIM2_Init+0xfc>)
 80014ae:	4a2f      	ldr	r2, [pc, #188]	; (800156c <MX_TIM2_Init+0x100>)
 80014b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b2:	4b2d      	ldr	r3, [pc, #180]	; (8001568 <MX_TIM2_Init+0xfc>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014b8:	4b2b      	ldr	r3, [pc, #172]	; (8001568 <MX_TIM2_Init+0xfc>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014be:	482a      	ldr	r0, [pc, #168]	; (8001568 <MX_TIM2_Init+0xfc>)
 80014c0:	f007 f84a 	bl	8008558 <HAL_TIM_Base_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80014ca:	f000 fcbf 	bl	8001e4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014d4:	f107 0320 	add.w	r3, r7, #32
 80014d8:	4619      	mov	r1, r3
 80014da:	4823      	ldr	r0, [pc, #140]	; (8001568 <MX_TIM2_Init+0xfc>)
 80014dc:	f007 fefe 	bl	80092dc <HAL_TIM_ConfigClockSource>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80014e6:	f000 fcb1 	bl	8001e4c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80014ea:	481f      	ldr	r0, [pc, #124]	; (8001568 <MX_TIM2_Init+0xfc>)
 80014ec:	f007 fa82 	bl	80089f4 <HAL_TIM_IC_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80014f6:	f000 fca9 	bl	8001e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014fe:	2300      	movs	r3, #0
 8001500:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001502:	f107 0314 	add.w	r3, r7, #20
 8001506:	4619      	mov	r1, r3
 8001508:	4817      	ldr	r0, [pc, #92]	; (8001568 <MX_TIM2_Init+0xfc>)
 800150a:	f008 fe73 	bl	800a1f4 <HAL_TIMEx_MasterConfigSynchronization>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001514:	f000 fc9a 	bl	8001e4c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001518:	2300      	movs	r3, #0
 800151a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800151c:	2301      	movs	r3, #1
 800151e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001520:	2300      	movs	r3, #0
 8001522:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 12;
 8001524:	230c      	movs	r3, #12
 8001526:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	2200      	movs	r2, #0
 800152c:	4619      	mov	r1, r3
 800152e:	480e      	ldr	r0, [pc, #56]	; (8001568 <MX_TIM2_Init+0xfc>)
 8001530:	f007 fd23 	bl	8008f7a <HAL_TIM_IC_ConfigChannel>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800153a:	f000 fc87 	bl	8001e4c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800153e:	2302      	movs	r3, #2
 8001540:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001542:	2302      	movs	r3, #2
 8001544:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	2204      	movs	r2, #4
 800154e:	4619      	mov	r1, r3
 8001550:	4805      	ldr	r0, [pc, #20]	; (8001568 <MX_TIM2_Init+0xfc>)
 8001552:	f007 fd12 	bl	8008f7a <HAL_TIM_IC_ConfigChannel>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM2_Init+0xf4>
  {
    Error_Handler();
 800155c:	f000 fc76 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001560:	bf00      	nop
 8001562:	3730      	adds	r7, #48	; 0x30
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	2000028c 	.word	0x2000028c
 800156c:	03d09000 	.word	0x03d09000

08001570 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001576:	f107 0310 	add.w	r3, r7, #16
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]
 8001582:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001584:	1d3b      	adds	r3, r7, #4
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800158e:	4b1d      	ldr	r3, [pc, #116]	; (8001604 <MX_TIM3_Init+0x94>)
 8001590:	4a1d      	ldr	r2, [pc, #116]	; (8001608 <MX_TIM3_Init+0x98>)
 8001592:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001594:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <MX_TIM3_Init+0x94>)
 8001596:	2200      	movs	r2, #0
 8001598:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800159a:	4b1a      	ldr	r3, [pc, #104]	; (8001604 <MX_TIM3_Init+0x94>)
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80015a0:	4b18      	ldr	r3, [pc, #96]	; (8001604 <MX_TIM3_Init+0x94>)
 80015a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a8:	4b16      	ldr	r3, [pc, #88]	; (8001604 <MX_TIM3_Init+0x94>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015ae:	4b15      	ldr	r3, [pc, #84]	; (8001604 <MX_TIM3_Init+0x94>)
 80015b0:	2280      	movs	r2, #128	; 0x80
 80015b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015b4:	4813      	ldr	r0, [pc, #76]	; (8001604 <MX_TIM3_Init+0x94>)
 80015b6:	f006 ffcf 	bl	8008558 <HAL_TIM_Base_Init>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80015c0:	f000 fc44 	bl	8001e4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015ca:	f107 0310 	add.w	r3, r7, #16
 80015ce:	4619      	mov	r1, r3
 80015d0:	480c      	ldr	r0, [pc, #48]	; (8001604 <MX_TIM3_Init+0x94>)
 80015d2:	f007 fe83 	bl	80092dc <HAL_TIM_ConfigClockSource>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80015dc:	f000 fc36 	bl	8001e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e0:	2300      	movs	r3, #0
 80015e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015e8:	1d3b      	adds	r3, r7, #4
 80015ea:	4619      	mov	r1, r3
 80015ec:	4805      	ldr	r0, [pc, #20]	; (8001604 <MX_TIM3_Init+0x94>)
 80015ee:	f008 fe01 	bl	800a1f4 <HAL_TIMEx_MasterConfigSynchronization>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80015f8:	f000 fc28 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015fc:	bf00      	nop
 80015fe:	3720      	adds	r7, #32
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	200002d8 	.word	0x200002d8
 8001608:	40000400 	.word	0x40000400

0800160c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b09a      	sub	sp, #104	; 0x68
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001612:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]
 800161c:	609a      	str	r2, [r3, #8]
 800161e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001620:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800162c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	611a      	str	r2, [r3, #16]
 800163c:	615a      	str	r2, [r3, #20]
 800163e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001640:	1d3b      	adds	r3, r7, #4
 8001642:	222c      	movs	r2, #44	; 0x2c
 8001644:	2100      	movs	r1, #0
 8001646:	4618      	mov	r0, r3
 8001648:	f009 febe 	bl	800b3c8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800164c:	4b44      	ldr	r3, [pc, #272]	; (8001760 <MX_TIM8_Init+0x154>)
 800164e:	4a45      	ldr	r2, [pc, #276]	; (8001764 <MX_TIM8_Init+0x158>)
 8001650:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001652:	4b43      	ldr	r3, [pc, #268]	; (8001760 <MX_TIM8_Init+0x154>)
 8001654:	2200      	movs	r2, #0
 8001656:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001658:	4b41      	ldr	r3, [pc, #260]	; (8001760 <MX_TIM8_Init+0x154>)
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 2000;
 800165e:	4b40      	ldr	r3, [pc, #256]	; (8001760 <MX_TIM8_Init+0x154>)
 8001660:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001664:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001666:	4b3e      	ldr	r3, [pc, #248]	; (8001760 <MX_TIM8_Init+0x154>)
 8001668:	2200      	movs	r2, #0
 800166a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800166c:	4b3c      	ldr	r3, [pc, #240]	; (8001760 <MX_TIM8_Init+0x154>)
 800166e:	2200      	movs	r2, #0
 8001670:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001672:	4b3b      	ldr	r3, [pc, #236]	; (8001760 <MX_TIM8_Init+0x154>)
 8001674:	2280      	movs	r2, #128	; 0x80
 8001676:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001678:	4839      	ldr	r0, [pc, #228]	; (8001760 <MX_TIM8_Init+0x154>)
 800167a:	f006 ff6d 	bl	8008558 <HAL_TIM_Base_Init>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001684:	f000 fbe2 	bl	8001e4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800168c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800168e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001692:	4619      	mov	r1, r3
 8001694:	4832      	ldr	r0, [pc, #200]	; (8001760 <MX_TIM8_Init+0x154>)
 8001696:	f007 fe21 	bl	80092dc <HAL_TIM_ConfigClockSource>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80016a0:	f000 fbd4 	bl	8001e4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80016a4:	482e      	ldr	r0, [pc, #184]	; (8001760 <MX_TIM8_Init+0x154>)
 80016a6:	f006 ffae 	bl	8008606 <HAL_TIM_PWM_Init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80016b0:	f000 fbcc 	bl	8001e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016b4:	2300      	movs	r3, #0
 80016b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016b8:	2300      	movs	r3, #0
 80016ba:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016bc:	2300      	movs	r3, #0
 80016be:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80016c0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016c4:	4619      	mov	r1, r3
 80016c6:	4826      	ldr	r0, [pc, #152]	; (8001760 <MX_TIM8_Init+0x154>)
 80016c8:	f008 fd94 	bl	800a1f4 <HAL_TIMEx_MasterConfigSynchronization>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80016d2:	f000 fbbb 	bl	8001e4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016d6:	2360      	movs	r3, #96	; 0x60
 80016d8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1000;
 80016da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016de:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016e0:	2300      	movs	r3, #0
 80016e2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016e4:	2300      	movs	r3, #0
 80016e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016e8:	2300      	movs	r3, #0
 80016ea:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016ec:	2300      	movs	r3, #0
 80016ee:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016f0:	2300      	movs	r3, #0
 80016f2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016f8:	2200      	movs	r2, #0
 80016fa:	4619      	mov	r1, r3
 80016fc:	4818      	ldr	r0, [pc, #96]	; (8001760 <MX_TIM8_Init+0x154>)
 80016fe:	f007 fcd9 	bl	80090b4 <HAL_TIM_PWM_ConfigChannel>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8001708:	f000 fba0 	bl	8001e4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800170c:	2300      	movs	r3, #0
 800170e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001710:	2300      	movs	r3, #0
 8001712:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001714:	2300      	movs	r3, #0
 8001716:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 50;
 8001718:	2332      	movs	r3, #50	; 0x32
 800171a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001720:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001724:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800172a:	2300      	movs	r3, #0
 800172c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800172e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001732:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001734:	2300      	movs	r3, #0
 8001736:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001738:	2300      	movs	r3, #0
 800173a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800173c:	1d3b      	adds	r3, r7, #4
 800173e:	4619      	mov	r1, r3
 8001740:	4807      	ldr	r0, [pc, #28]	; (8001760 <MX_TIM8_Init+0x154>)
 8001742:	f008 fdd7 	bl	800a2f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_TIM8_Init+0x144>
  {
    Error_Handler();
 800174c:	f000 fb7e 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001750:	4803      	ldr	r0, [pc, #12]	; (8001760 <MX_TIM8_Init+0x154>)
 8001752:	f000 fddd 	bl	8002310 <HAL_TIM_MspPostInit>

}
 8001756:	bf00      	nop
 8001758:	3768      	adds	r7, #104	; 0x68
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000324 	.word	0x20000324
 8001764:	40013400 	.word	0x40013400

08001768 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b09a      	sub	sp, #104	; 0x68
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800176e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	605a      	str	r2, [r3, #4]
 8001778:	609a      	str	r2, [r3, #8]
 800177a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800177c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001788:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
 8001798:	615a      	str	r2, [r3, #20]
 800179a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800179c:	1d3b      	adds	r3, r7, #4
 800179e:	222c      	movs	r2, #44	; 0x2c
 80017a0:	2100      	movs	r1, #0
 80017a2:	4618      	mov	r0, r3
 80017a4:	f009 fe10 	bl	800b3c8 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80017a8:	4b3f      	ldr	r3, [pc, #252]	; (80018a8 <MX_TIM15_Init+0x140>)
 80017aa:	4a40      	ldr	r2, [pc, #256]	; (80018ac <MX_TIM15_Init+0x144>)
 80017ac:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80017ae:	4b3e      	ldr	r3, [pc, #248]	; (80018a8 <MX_TIM15_Init+0x140>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b4:	4b3c      	ldr	r3, [pc, #240]	; (80018a8 <MX_TIM15_Init+0x140>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 2000;
 80017ba:	4b3b      	ldr	r3, [pc, #236]	; (80018a8 <MX_TIM15_Init+0x140>)
 80017bc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80017c0:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c2:	4b39      	ldr	r3, [pc, #228]	; (80018a8 <MX_TIM15_Init+0x140>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80017c8:	4b37      	ldr	r3, [pc, #220]	; (80018a8 <MX_TIM15_Init+0x140>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017ce:	4b36      	ldr	r3, [pc, #216]	; (80018a8 <MX_TIM15_Init+0x140>)
 80017d0:	2280      	movs	r2, #128	; 0x80
 80017d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80017d4:	4834      	ldr	r0, [pc, #208]	; (80018a8 <MX_TIM15_Init+0x140>)
 80017d6:	f006 febf 	bl	8008558 <HAL_TIM_Base_Init>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 80017e0:	f000 fb34 	bl	8001e4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80017ea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017ee:	4619      	mov	r1, r3
 80017f0:	482d      	ldr	r0, [pc, #180]	; (80018a8 <MX_TIM15_Init+0x140>)
 80017f2:	f007 fd73 	bl	80092dc <HAL_TIM_ConfigClockSource>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 80017fc:	f000 fb26 	bl	8001e4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001800:	4829      	ldr	r0, [pc, #164]	; (80018a8 <MX_TIM15_Init+0x140>)
 8001802:	f006 ff00 	bl	8008606 <HAL_TIM_PWM_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 800180c:	f000 fb1e 	bl	8001e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001810:	2300      	movs	r3, #0
 8001812:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001814:	2300      	movs	r3, #0
 8001816:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001818:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800181c:	4619      	mov	r1, r3
 800181e:	4822      	ldr	r0, [pc, #136]	; (80018a8 <MX_TIM15_Init+0x140>)
 8001820:	f008 fce8 	bl	800a1f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 800182a:	f000 fb0f 	bl	8001e4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800182e:	2360      	movs	r3, #96	; 0x60
 8001830:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1000;
 8001832:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001836:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001838:	2300      	movs	r3, #0
 800183a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800183c:	2300      	movs	r3, #0
 800183e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001840:	2300      	movs	r3, #0
 8001842:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001844:	2300      	movs	r3, #0
 8001846:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001848:	2300      	movs	r3, #0
 800184a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800184c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001850:	2200      	movs	r2, #0
 8001852:	4619      	mov	r1, r3
 8001854:	4814      	ldr	r0, [pc, #80]	; (80018a8 <MX_TIM15_Init+0x140>)
 8001856:	f007 fc2d 	bl	80090b4 <HAL_TIM_PWM_ConfigChannel>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8001860:	f000 faf4 	bl	8001e4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001864:	2300      	movs	r3, #0
 8001866:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001868:	2300      	movs	r3, #0
 800186a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800186c:	2300      	movs	r3, #0
 800186e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001870:	2300      	movs	r3, #0
 8001872:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001878:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800187c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800187e:	2300      	movs	r3, #0
 8001880:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001882:	2300      	movs	r3, #0
 8001884:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001886:	1d3b      	adds	r3, r7, #4
 8001888:	4619      	mov	r1, r3
 800188a:	4807      	ldr	r0, [pc, #28]	; (80018a8 <MX_TIM15_Init+0x140>)
 800188c:	f008 fd32 	bl	800a2f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8001896:	f000 fad9 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800189a:	4803      	ldr	r0, [pc, #12]	; (80018a8 <MX_TIM15_Init+0x140>)
 800189c:	f000 fd38 	bl	8002310 <HAL_TIM_MspPostInit>

}
 80018a0:	bf00      	nop
 80018a2:	3768      	adds	r7, #104	; 0x68
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20000370 	.word	0x20000370
 80018ac:	40014000 	.word	0x40014000

080018b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018b4:	4b14      	ldr	r3, [pc, #80]	; (8001908 <MX_USART1_UART_Init+0x58>)
 80018b6:	4a15      	ldr	r2, [pc, #84]	; (800190c <MX_USART1_UART_Init+0x5c>)
 80018b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80018ba:	4b13      	ldr	r3, [pc, #76]	; (8001908 <MX_USART1_UART_Init+0x58>)
 80018bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80018c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018c2:	4b11      	ldr	r3, [pc, #68]	; (8001908 <MX_USART1_UART_Init+0x58>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018c8:	4b0f      	ldr	r3, [pc, #60]	; (8001908 <MX_USART1_UART_Init+0x58>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018ce:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <MX_USART1_UART_Init+0x58>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018d4:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <MX_USART1_UART_Init+0x58>)
 80018d6:	220c      	movs	r2, #12
 80018d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018da:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <MX_USART1_UART_Init+0x58>)
 80018dc:	2200      	movs	r2, #0
 80018de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018e0:	4b09      	ldr	r3, [pc, #36]	; (8001908 <MX_USART1_UART_Init+0x58>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018e6:	4b08      	ldr	r3, [pc, #32]	; (8001908 <MX_USART1_UART_Init+0x58>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018ec:	4b06      	ldr	r3, [pc, #24]	; (8001908 <MX_USART1_UART_Init+0x58>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018f2:	4805      	ldr	r0, [pc, #20]	; (8001908 <MX_USART1_UART_Init+0x58>)
 80018f4:	f008 fdbf 	bl	800a476 <HAL_UART_Init>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80018fe:	f000 faa5 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	200003bc 	.word	0x200003bc
 800190c:	40013800 	.word	0x40013800

08001910 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001914:	4b14      	ldr	r3, [pc, #80]	; (8001968 <MX_USART2_UART_Init+0x58>)
 8001916:	4a15      	ldr	r2, [pc, #84]	; (800196c <MX_USART2_UART_Init+0x5c>)
 8001918:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800191a:	4b13      	ldr	r3, [pc, #76]	; (8001968 <MX_USART2_UART_Init+0x58>)
 800191c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001920:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001922:	4b11      	ldr	r3, [pc, #68]	; (8001968 <MX_USART2_UART_Init+0x58>)
 8001924:	2200      	movs	r2, #0
 8001926:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001928:	4b0f      	ldr	r3, [pc, #60]	; (8001968 <MX_USART2_UART_Init+0x58>)
 800192a:	2200      	movs	r2, #0
 800192c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800192e:	4b0e      	ldr	r3, [pc, #56]	; (8001968 <MX_USART2_UART_Init+0x58>)
 8001930:	2200      	movs	r2, #0
 8001932:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001934:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <MX_USART2_UART_Init+0x58>)
 8001936:	220c      	movs	r2, #12
 8001938:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800193a:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <MX_USART2_UART_Init+0x58>)
 800193c:	2200      	movs	r2, #0
 800193e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001940:	4b09      	ldr	r3, [pc, #36]	; (8001968 <MX_USART2_UART_Init+0x58>)
 8001942:	2200      	movs	r2, #0
 8001944:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001946:	4b08      	ldr	r3, [pc, #32]	; (8001968 <MX_USART2_UART_Init+0x58>)
 8001948:	2200      	movs	r2, #0
 800194a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800194c:	4b06      	ldr	r3, [pc, #24]	; (8001968 <MX_USART2_UART_Init+0x58>)
 800194e:	2200      	movs	r2, #0
 8001950:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001952:	4805      	ldr	r0, [pc, #20]	; (8001968 <MX_USART2_UART_Init+0x58>)
 8001954:	f008 fd8f 	bl	800a476 <HAL_UART_Init>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800195e:	f000 fa75 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20000444 	.word	0x20000444
 800196c:	40004400 	.word	0x40004400

08001970 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001976:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <MX_DMA_Init+0x38>)
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	4a0b      	ldr	r2, [pc, #44]	; (80019a8 <MX_DMA_Init+0x38>)
 800197c:	f043 0302 	orr.w	r3, r3, #2
 8001980:	6153      	str	r3, [r2, #20]
 8001982:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <MX_DMA_Init+0x38>)
 8001984:	695b      	ldr	r3, [r3, #20]
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	607b      	str	r3, [r7, #4]
 800198c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 800198e:	2200      	movs	r2, #0
 8001990:	2100      	movs	r1, #0
 8001992:	2038      	movs	r0, #56	; 0x38
 8001994:	f002 ff9f 	bl	80048d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8001998:	2038      	movs	r0, #56	; 0x38
 800199a:	f002 ffb8 	bl	800490e <HAL_NVIC_EnableIRQ>

}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40021000 	.word	0x40021000

080019ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08a      	sub	sp, #40	; 0x28
 80019b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b2:	f107 0314 	add.w	r3, r7, #20
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	605a      	str	r2, [r3, #4]
 80019bc:	609a      	str	r2, [r3, #8]
 80019be:	60da      	str	r2, [r3, #12]
 80019c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c2:	4b60      	ldr	r3, [pc, #384]	; (8001b44 <MX_GPIO_Init+0x198>)
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	4a5f      	ldr	r2, [pc, #380]	; (8001b44 <MX_GPIO_Init+0x198>)
 80019c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80019cc:	6153      	str	r3, [r2, #20]
 80019ce:	4b5d      	ldr	r3, [pc, #372]	; (8001b44 <MX_GPIO_Init+0x198>)
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019d6:	613b      	str	r3, [r7, #16]
 80019d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019da:	4b5a      	ldr	r3, [pc, #360]	; (8001b44 <MX_GPIO_Init+0x198>)
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	4a59      	ldr	r2, [pc, #356]	; (8001b44 <MX_GPIO_Init+0x198>)
 80019e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019e4:	6153      	str	r3, [r2, #20]
 80019e6:	4b57      	ldr	r3, [pc, #348]	; (8001b44 <MX_GPIO_Init+0x198>)
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f2:	4b54      	ldr	r3, [pc, #336]	; (8001b44 <MX_GPIO_Init+0x198>)
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	4a53      	ldr	r2, [pc, #332]	; (8001b44 <MX_GPIO_Init+0x198>)
 80019f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019fc:	6153      	str	r3, [r2, #20]
 80019fe:	4b51      	ldr	r3, [pc, #324]	; (8001b44 <MX_GPIO_Init+0x198>)
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a06:	60bb      	str	r3, [r7, #8]
 8001a08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a0a:	4b4e      	ldr	r3, [pc, #312]	; (8001b44 <MX_GPIO_Init+0x198>)
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	4a4d      	ldr	r2, [pc, #308]	; (8001b44 <MX_GPIO_Init+0x198>)
 8001a10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a14:	6153      	str	r3, [r2, #20]
 8001a16:	4b4b      	ldr	r3, [pc, #300]	; (8001b44 <MX_GPIO_Init+0x198>)
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a1e:	607b      	str	r3, [r7, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8001a22:	2200      	movs	r2, #0
 8001a24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a28:	4847      	ldr	r0, [pc, #284]	; (8001b48 <MX_GPIO_Init+0x19c>)
 8001a2a:	f003 fb53 	bl	80050d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	2103      	movs	r1, #3
 8001a32:	4846      	ldr	r0, [pc, #280]	; (8001b4c <MX_GPIO_Init+0x1a0>)
 8001a34:	f003 fb4e 	bl	80050d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Port_2_Pin|Port_1_Pin|Port_3_Pin|Port_4_Pin, GPIO_PIN_RESET);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 8001a3e:	4844      	ldr	r0, [pc, #272]	; (8001b50 <MX_GPIO_Init+0x1a4>)
 8001a40:	f003 fb48 	bl	80050d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Direct_GPIO_Port, Direct_Pin, GPIO_PIN_RESET);
 8001a44:	2200      	movs	r2, #0
 8001a46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a4e:	f003 fb41 	bl	80050d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : START_Pin STOP_Pin */
  GPIO_InitStruct.Pin = START_Pin|STOP_Pin;
 8001a52:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001a56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001a58:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001a5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a62:	f107 0314 	add.w	r3, r7, #20
 8001a66:	4619      	mov	r1, r3
 8001a68:	4837      	ldr	r0, [pc, #220]	; (8001b48 <MX_GPIO_Init+0x19c>)
 8001a6a:	f003 f9a1 	bl	8004db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_1_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin;
 8001a6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a74:	2301      	movs	r3, #1
 8001a76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 8001a80:	f107 0314 	add.w	r3, r7, #20
 8001a84:	4619      	mov	r1, r3
 8001a86:	4830      	ldr	r0, [pc, #192]	; (8001b48 <MX_GPIO_Init+0x19c>)
 8001a88:	f003 f992 	bl	8004db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_2_Pin LED_3_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin|LED_3_Pin;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a90:	2301      	movs	r3, #1
 8001a92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a9c:	f107 0314 	add.w	r3, r7, #20
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	482a      	ldr	r0, [pc, #168]	; (8001b4c <MX_GPIO_Init+0x1a0>)
 8001aa4:	f003 f984 	bl	8004db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_Pin */
  GPIO_InitStruct.Pin = INT_Pin;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001aac:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001ab0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8001ab6:	f107 0314 	add.w	r3, r7, #20
 8001aba:	4619      	mov	r1, r3
 8001abc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ac0:	f003 f976 	bl	8004db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Port_2_Pin Port_1_Pin Port_3_Pin Port_4_Pin */
  GPIO_InitStruct.Pin = Port_2_Pin|Port_1_Pin|Port_3_Pin|Port_4_Pin;
 8001ac4:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001ac8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aca:	2301      	movs	r3, #1
 8001acc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad6:	f107 0314 	add.w	r3, r7, #20
 8001ada:	4619      	mov	r1, r3
 8001adc:	481c      	ldr	r0, [pc, #112]	; (8001b50 <MX_GPIO_Init+0x1a4>)
 8001ade:	f003 f967 	bl	8004db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Direct_Pin */
  GPIO_InitStruct.Pin = Direct_Pin;
 8001ae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ae6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af0:	2300      	movs	r3, #0
 8001af2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Direct_GPIO_Port, &GPIO_InitStruct);
 8001af4:	f107 0314 	add.w	r3, r7, #20
 8001af8:	4619      	mov	r1, r3
 8001afa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001afe:	f003 f957 	bl	8004db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLEAR_Pin */
  GPIO_InitStruct.Pin = CLEAR_Pin;
 8001b02:	2320      	movs	r3, #32
 8001b04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b06:	2300      	movs	r3, #0
 8001b08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CLEAR_GPIO_Port, &GPIO_InitStruct);
 8001b0e:	f107 0314 	add.w	r3, r7, #20
 8001b12:	4619      	mov	r1, r3
 8001b14:	480e      	ldr	r0, [pc, #56]	; (8001b50 <MX_GPIO_Init+0x1a4>)
 8001b16:	f003 f94b 	bl	8004db0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	2007      	movs	r0, #7
 8001b20:	f002 fed9 	bl	80048d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001b24:	2007      	movs	r0, #7
 8001b26:	f002 fef2 	bl	800490e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	2103      	movs	r1, #3
 8001b2e:	2028      	movs	r0, #40	; 0x28
 8001b30:	f002 fed1 	bl	80048d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b34:	2028      	movs	r0, #40	; 0x28
 8001b36:	f002 feea 	bl	800490e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b3a:	bf00      	nop
 8001b3c:	3728      	adds	r7, #40	; 0x28
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40021000 	.word	0x40021000
 8001b48:	48000800 	.word	0x48000800
 8001b4c:	48001400 	.word	0x48001400
 8001b50:	48000400 	.word	0x48000400

08001b54 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b64:	d174      	bne.n	8001c50 <HAL_TIM_IC_CaptureCallback+0xfc>
    {
        if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	7f1b      	ldrb	r3, [r3, #28]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d144      	bne.n	8001bf8 <HAL_TIM_IC_CaptureCallback+0xa4>
        {

        	TIM3->CNT=0;
 8001b6e:	4b3a      	ldr	r3, [pc, #232]	; (8001c58 <HAL_TIM_IC_CaptureCallback+0x104>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	625a      	str	r2, [r3, #36]	; 0x24
        	 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001b74:	2100      	movs	r1, #0
 8001b76:	4839      	ldr	r0, [pc, #228]	; (8001c5c <HAL_TIM_IC_CaptureCallback+0x108>)
 8001b78:	f006 fea6 	bl	80088c8 <HAL_TIM_PWM_Stop>
        	 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001b7c:	2104      	movs	r1, #4
 8001b7e:	4837      	ldr	r0, [pc, #220]	; (8001c5c <HAL_TIM_IC_CaptureCallback+0x108>)
 8001b80:	f006 fea2 	bl	80088c8 <HAL_TIM_PWM_Stop>
        	 HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8001b84:	2100      	movs	r1, #0
 8001b86:	4836      	ldr	r0, [pc, #216]	; (8001c60 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001b88:	f006 fe9e 	bl	80088c8 <HAL_TIM_PWM_Stop>
        	 HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	4835      	ldr	r0, [pc, #212]	; (8001c64 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001b90:	f006 fe9a 	bl	80088c8 <HAL_TIM_PWM_Stop>




            TIM2->CNT = 0;
 8001b94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b98:	2200      	movs	r2, #0
 8001b9a:	625a      	str	r2, [r3, #36]	; 0x24
            period = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4832      	ldr	r0, [pc, #200]	; (8001c68 <HAL_TIM_IC_CaptureCallback+0x114>)
 8001ba0:	f007 fc66 	bl	8009470 <HAL_TIM_ReadCapturedValue>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	4a31      	ldr	r2, [pc, #196]	; (8001c6c <HAL_TIM_IC_CaptureCallback+0x118>)
 8001ba8:	6013      	str	r3, [r2, #0]
            pulseWidth = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
 8001baa:	2104      	movs	r1, #4
 8001bac:	482e      	ldr	r0, [pc, #184]	; (8001c68 <HAL_TIM_IC_CaptureCallback+0x114>)
 8001bae:	f007 fc5f 	bl	8009470 <HAL_TIM_ReadCapturedValue>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	4b2e      	ldr	r3, [pc, #184]	; (8001c70 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001bb8:	801a      	strh	r2, [r3, #0]
           // LED_1_OFF;
            rpm= 480000000/period;
 8001bba:	4b2c      	ldr	r3, [pc, #176]	; (8001c6c <HAL_TIM_IC_CaptureCallback+0x118>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a2d      	ldr	r2, [pc, #180]	; (8001c74 <HAL_TIM_IC_CaptureCallback+0x120>)
 8001bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc4:	4a2c      	ldr	r2, [pc, #176]	; (8001c78 <HAL_TIM_IC_CaptureCallback+0x124>)
 8001bc6:	6013      	str	r3, [r2, #0]
            f=32000000/period;
 8001bc8:	4b28      	ldr	r3, [pc, #160]	; (8001c6c <HAL_TIM_IC_CaptureCallback+0x118>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a2b      	ldr	r2, [pc, #172]	; (8001c7c <HAL_TIM_IC_CaptureCallback+0x128>)
 8001bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	4b2a      	ldr	r3, [pc, #168]	; (8001c80 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001bd6:	801a      	strh	r2, [r3, #0]


            HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001bd8:	2100      	movs	r1, #0
 8001bda:	4820      	ldr	r0, [pc, #128]	; (8001c5c <HAL_TIM_IC_CaptureCallback+0x108>)
 8001bdc:	f008 f9f8 	bl	8009fd0 <HAL_TIMEx_PWMN_Start>
            HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001be0:	2104      	movs	r1, #4
 8001be2:	481e      	ldr	r0, [pc, #120]	; (8001c5c <HAL_TIM_IC_CaptureCallback+0x108>)
 8001be4:	f008 f9f4 	bl	8009fd0 <HAL_TIMEx_PWMN_Start>
            HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
 8001be8:	2100      	movs	r1, #0
 8001bea:	481d      	ldr	r0, [pc, #116]	; (8001c60 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001bec:	f008 f9f0 	bl	8009fd0 <HAL_TIMEx_PWMN_Start>
            HAL_TIMEx_PWMN_Start(&htim15, TIM_CHANNEL_1);
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	481c      	ldr	r0, [pc, #112]	; (8001c64 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001bf4:	f008 f9ec 	bl	8009fd0 <HAL_TIMEx_PWMN_Start>

        }

        if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	7f1b      	ldrb	r3, [r3, #28]
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d127      	bne.n	8001c50 <HAL_TIM_IC_CaptureCallback+0xfc>
                {

        	  TIM3->CNT=0;
 8001c00:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <HAL_TIM_IC_CaptureCallback+0x104>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	625a      	str	r2, [r3, #36]	; 0x24
        	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8001c06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c0a:	481e      	ldr	r0, [pc, #120]	; (8001c84 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001c0c:	f003 fa7a 	bl	8005104 <HAL_GPIO_TogglePin>


        	  HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8001c10:	2100      	movs	r1, #0
 8001c12:	4812      	ldr	r0, [pc, #72]	; (8001c5c <HAL_TIM_IC_CaptureCallback+0x108>)
 8001c14:	f008 fa90 	bl	800a138 <HAL_TIMEx_PWMN_Stop>
        	  HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8001c18:	2104      	movs	r1, #4
 8001c1a:	4810      	ldr	r0, [pc, #64]	; (8001c5c <HAL_TIM_IC_CaptureCallback+0x108>)
 8001c1c:	f008 fa8c 	bl	800a138 <HAL_TIMEx_PWMN_Stop>
        	  HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_1);
 8001c20:	2100      	movs	r1, #0
 8001c22:	480f      	ldr	r0, [pc, #60]	; (8001c60 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001c24:	f008 fa88 	bl	800a138 <HAL_TIMEx_PWMN_Stop>
        	  HAL_TIMEx_PWMN_Stop(&htim15, TIM_CHANNEL_1);
 8001c28:	2100      	movs	r1, #0
 8001c2a:	480e      	ldr	r0, [pc, #56]	; (8001c64 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001c2c:	f008 fa84 	bl	800a138 <HAL_TIMEx_PWMN_Stop>

        	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001c30:	2100      	movs	r1, #0
 8001c32:	480a      	ldr	r0, [pc, #40]	; (8001c5c <HAL_TIM_IC_CaptureCallback+0x108>)
 8001c34:	f006 fd48 	bl	80086c8 <HAL_TIM_PWM_Start>
        	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001c38:	2104      	movs	r1, #4
 8001c3a:	4808      	ldr	r0, [pc, #32]	; (8001c5c <HAL_TIM_IC_CaptureCallback+0x108>)
 8001c3c:	f006 fd44 	bl	80086c8 <HAL_TIM_PWM_Start>
        	  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001c40:	2100      	movs	r1, #0
 8001c42:	4807      	ldr	r0, [pc, #28]	; (8001c60 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001c44:	f006 fd40 	bl	80086c8 <HAL_TIM_PWM_Start>
        	  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8001c48:	2100      	movs	r1, #0
 8001c4a:	4806      	ldr	r0, [pc, #24]	; (8001c64 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001c4c:	f006 fd3c 	bl	80086c8 <HAL_TIM_PWM_Start>


                }

    }
}
 8001c50:	bf00      	nop
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40000400 	.word	0x40000400
 8001c5c:	20000240 	.word	0x20000240
 8001c60:	20000324 	.word	0x20000324
 8001c64:	20000370 	.word	0x20000370
 8001c68:	2000028c 	.word	0x2000028c
 8001c6c:	200004ec 	.word	0x200004ec
 8001c70:	200004f0 	.word	0x200004f0
 8001c74:	1c9c3800 	.word	0x1c9c3800
 8001c78:	200004f4 	.word	0x200004f4
 8001c7c:	01e84800 	.word	0x01e84800
 8001c80:	200004f8 	.word	0x200004f8
 8001c84:	48000800 	.word	0x48000800

08001c88 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	80fb      	strh	r3, [r7, #6]
   if(GPIO_Pin == GPIO_PIN_13) // если прерывание поступило от ножки PC13
 8001c92:	88fb      	ldrh	r3, [r7, #6]
 8001c94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c98:	d149      	bne.n	8001d2e <HAL_GPIO_EXTI_Callback+0xa6>
   {
      // Переключение в противоположное состояние ножки
      // выхода для управления светодиодом (LED):
      HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8001c9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c9e:	484d      	ldr	r0, [pc, #308]	; (8001dd4 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001ca0:	f003 fa30 	bl	8005104 <HAL_GPIO_TogglePin>
      if (GPIO_PIN_RESET == HAL_GPIO_ReadPin (GPIOC, GPIO_PIN_13)){
 8001ca4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ca8:	484a      	ldr	r0, [pc, #296]	; (8001dd4 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001caa:	f003 f9fb 	bl	80050a4 <HAL_GPIO_ReadPin>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d13c      	bne.n	8001d2e <HAL_GPIO_EXTI_Callback+0xa6>



            if((pwm_cmd>=0)&&(pwm_cmd<=19)&&(status==0)){
 8001cb4:	4b48      	ldr	r3, [pc, #288]	; (8001dd8 <HAL_GPIO_EXTI_Callback+0x150>)
 8001cb6:	881b      	ldrh	r3, [r3, #0]
 8001cb8:	4b47      	ldr	r3, [pc, #284]	; (8001dd8 <HAL_GPIO_EXTI_Callback+0x150>)
 8001cba:	881b      	ldrh	r3, [r3, #0]
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	2b13      	cmp	r3, #19
 8001cc0:	d81c      	bhi.n	8001cfc <HAL_GPIO_EXTI_Callback+0x74>
 8001cc2:	4b46      	ldr	r3, [pc, #280]	; (8001ddc <HAL_GPIO_EXTI_Callback+0x154>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d118      	bne.n	8001cfc <HAL_GPIO_EXTI_Callback+0x74>

            	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN); // RTC_FORMAT_BIN , RTC_FORMAT_BCD
 8001cca:	2200      	movs	r2, #0
 8001ccc:	4944      	ldr	r1, [pc, #272]	; (8001de0 <HAL_GPIO_EXTI_Callback+0x158>)
 8001cce:	4845      	ldr	r0, [pc, #276]	; (8001de4 <HAL_GPIO_EXTI_Callback+0x15c>)
 8001cd0:	f006 fa53 	bl	800817a <HAL_RTC_GetTime>
            	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	4944      	ldr	r1, [pc, #272]	; (8001de8 <HAL_GPIO_EXTI_Callback+0x160>)
 8001cd8:	4842      	ldr	r0, [pc, #264]	; (8001de4 <HAL_GPIO_EXTI_Callback+0x15c>)
 8001cda:	f006 fb30 	bl	800833e <HAL_RTC_GetDate>

            	hour=sTime.Hours;
 8001cde:	4b40      	ldr	r3, [pc, #256]	; (8001de0 <HAL_GPIO_EXTI_Callback+0x158>)
 8001ce0:	781a      	ldrb	r2, [r3, #0]
 8001ce2:	4b42      	ldr	r3, [pc, #264]	; (8001dec <HAL_GPIO_EXTI_Callback+0x164>)
 8001ce4:	701a      	strb	r2, [r3, #0]
            	min=sTime.Minutes;
 8001ce6:	4b3e      	ldr	r3, [pc, #248]	; (8001de0 <HAL_GPIO_EXTI_Callback+0x158>)
 8001ce8:	785a      	ldrb	r2, [r3, #1]
 8001cea:	4b41      	ldr	r3, [pc, #260]	; (8001df0 <HAL_GPIO_EXTI_Callback+0x168>)
 8001cec:	701a      	strb	r2, [r3, #0]
            	sec=sTime.Seconds;
 8001cee:	4b3c      	ldr	r3, [pc, #240]	; (8001de0 <HAL_GPIO_EXTI_Callback+0x158>)
 8001cf0:	789a      	ldrb	r2, [r3, #2]
 8001cf2:	4b40      	ldr	r3, [pc, #256]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x16c>)
 8001cf4:	701a      	strb	r2, [r3, #0]

            	status=1;
 8001cf6:	4b39      	ldr	r3, [pc, #228]	; (8001ddc <HAL_GPIO_EXTI_Callback+0x154>)
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	701a      	strb	r2, [r3, #0]
            }

        		   pwm_cmd=pwm_cmd+10;
 8001cfc:	4b36      	ldr	r3, [pc, #216]	; (8001dd8 <HAL_GPIO_EXTI_Callback+0x150>)
 8001cfe:	881b      	ldrh	r3, [r3, #0]
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	330a      	adds	r3, #10
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	4b34      	ldr	r3, [pc, #208]	; (8001dd8 <HAL_GPIO_EXTI_Callback+0x150>)
 8001d08:	801a      	strh	r2, [r3, #0]
        		   if(pwm_cmd>=1999){pwm_cmd=2000;}
 8001d0a:	4b33      	ldr	r3, [pc, #204]	; (8001dd8 <HAL_GPIO_EXTI_Callback+0x150>)
 8001d0c:	881b      	ldrh	r3, [r3, #0]
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	f240 72ce 	movw	r2, #1998	; 0x7ce
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d903      	bls.n	8001d20 <HAL_GPIO_EXTI_Callback+0x98>
 8001d18:	4b2f      	ldr	r3, [pc, #188]	; (8001dd8 <HAL_GPIO_EXTI_Callback+0x150>)
 8001d1a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001d1e:	801a      	strh	r2, [r3, #0]
        		   pwm_tgr=4;
 8001d20:	4b35      	ldr	r3, [pc, #212]	; (8001df8 <HAL_GPIO_EXTI_Callback+0x170>)
 8001d22:	2204      	movs	r2, #4
 8001d24:	701a      	strb	r2, [r3, #0]

        		   EXTI->PR = EXTI_PR_PR13;
 8001d26:	4b35      	ldr	r3, [pc, #212]	; (8001dfc <HAL_GPIO_EXTI_Callback+0x174>)
 8001d28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d2c:	615a      	str	r2, [r3, #20]


   }


   if(GPIO_Pin == GPIO_PIN_14) // если прерывание поступило от ножки PC14
 8001d2e:	88fb      	ldrh	r3, [r7, #6]
 8001d30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d34:	d149      	bne.n	8001dca <HAL_GPIO_EXTI_Callback+0x142>
     {

	   if (GPIO_PIN_SET == HAL_GPIO_ReadPin (GPIOC, GPIO_PIN_14)){
 8001d36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d3a:	4826      	ldr	r0, [pc, #152]	; (8001dd4 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001d3c:	f003 f9b2 	bl	80050a4 <HAL_GPIO_ReadPin>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d104      	bne.n	8001d50 <HAL_GPIO_EXTI_Callback+0xc8>
        // Переключение в противоположное состояние ножки
        // выхода для управления светодиодом (LED):
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);}
 8001d46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d4a:	4822      	ldr	r0, [pc, #136]	; (8001dd4 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001d4c:	f003 f9da 	bl	8005104 <HAL_GPIO_TogglePin>
	   if (GPIO_PIN_RESET == HAL_GPIO_ReadPin (GPIOC, GPIO_PIN_14)){
 8001d50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d54:	481f      	ldr	r0, [pc, #124]	; (8001dd4 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001d56:	f003 f9a5 	bl	80050a4 <HAL_GPIO_ReadPin>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d134      	bne.n	8001dca <HAL_GPIO_EXTI_Callback+0x142>

		   if((pwm_cmd==0)&&(status==1)){
 8001d60:	4b1d      	ldr	r3, [pc, #116]	; (8001dd8 <HAL_GPIO_EXTI_Callback+0x150>)
 8001d62:	881b      	ldrh	r3, [r3, #0]
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d10f      	bne.n	8001d8a <HAL_GPIO_EXTI_Callback+0x102>
 8001d6a:	4b1c      	ldr	r3, [pc, #112]	; (8001ddc <HAL_GPIO_EXTI_Callback+0x154>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d10b      	bne.n	8001d8a <HAL_GPIO_EXTI_Callback+0x102>
		              	status=0;
 8001d72:	4b1a      	ldr	r3, [pc, #104]	; (8001ddc <HAL_GPIO_EXTI_Callback+0x154>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	701a      	strb	r2, [r3, #0]

		              	hour=0;
 8001d78:	4b1c      	ldr	r3, [pc, #112]	; (8001dec <HAL_GPIO_EXTI_Callback+0x164>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	701a      	strb	r2, [r3, #0]
		              	min=0;
 8001d7e:	4b1c      	ldr	r3, [pc, #112]	; (8001df0 <HAL_GPIO_EXTI_Callback+0x168>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	701a      	strb	r2, [r3, #0]
		              	sec=0;
 8001d84:	4b1b      	ldr	r3, [pc, #108]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x16c>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	701a      	strb	r2, [r3, #0]
		              }


		   pwm_cmd=pwm_cmd-10;
 8001d8a:	4b13      	ldr	r3, [pc, #76]	; (8001dd8 <HAL_GPIO_EXTI_Callback+0x150>)
 8001d8c:	881b      	ldrh	r3, [r3, #0]
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	3b0a      	subs	r3, #10
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <HAL_GPIO_EXTI_Callback+0x150>)
 8001d96:	801a      	strh	r2, [r3, #0]
		   if(pwm_cmd>=2100){pwm_cmd=0;}
 8001d98:	4b0f      	ldr	r3, [pc, #60]	; (8001dd8 <HAL_GPIO_EXTI_Callback+0x150>)
 8001d9a:	881b      	ldrh	r3, [r3, #0]
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	f640 0233 	movw	r2, #2099	; 0x833
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d902      	bls.n	8001dac <HAL_GPIO_EXTI_Callback+0x124>
 8001da6:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <HAL_GPIO_EXTI_Callback+0x150>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	801a      	strh	r2, [r3, #0]
		   if(pwm_cmd<=1){pwm_cmd=0;}
 8001dac:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <HAL_GPIO_EXTI_Callback+0x150>)
 8001dae:	881b      	ldrh	r3, [r3, #0]
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d802      	bhi.n	8001dbc <HAL_GPIO_EXTI_Callback+0x134>
 8001db6:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <HAL_GPIO_EXTI_Callback+0x150>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	801a      	strh	r2, [r3, #0]
		   pwm_tgr=4;
 8001dbc:	4b0e      	ldr	r3, [pc, #56]	; (8001df8 <HAL_GPIO_EXTI_Callback+0x170>)
 8001dbe:	2204      	movs	r2, #4
 8001dc0:	701a      	strb	r2, [r3, #0]
		   EXTI->PR = EXTI_PR_PR14;
 8001dc2:	4b0e      	ldr	r3, [pc, #56]	; (8001dfc <HAL_GPIO_EXTI_Callback+0x174>)
 8001dc4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001dc8:	615a      	str	r2, [r3, #20]
	   }


     }

}
 8001dca:	bf00      	nop
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	48000800 	.word	0x48000800
 8001dd8:	200004e8 	.word	0x200004e8
 8001ddc:	20000509 	.word	0x20000509
 8001de0:	2000050c 	.word	0x2000050c
 8001de4:	20000220 	.word	0x20000220
 8001de8:	20000520 	.word	0x20000520
 8001dec:	20000507 	.word	0x20000507
 8001df0:	20000506 	.word	0x20000506
 8001df4:	20000508 	.word	0x20000508
 8001df8:	200004ea 	.word	0x200004ea
 8001dfc:	40010400 	.word	0x40010400

08001e00 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)

{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]

RX_2;
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e12:	f003 f95f 	bl	80050d4 <HAL_GPIO_WritePin>

}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
	...

08001e20 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC2)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a05      	ldr	r2, [pc, #20]	; (8001e44 <HAL_ADC_ConvCpltCallback+0x24>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d102      	bne.n	8001e38 <HAL_ADC_ConvCpltCallback+0x18>
    {
        flag = 1;
 8001e32:	4b05      	ldr	r3, [pc, #20]	; (8001e48 <HAL_ADC_ConvCpltCallback+0x28>)
 8001e34:	2201      	movs	r2, #1
 8001e36:	701a      	strb	r2, [r3, #0]
    }
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	50000100 	.word	0x50000100
 8001e48:	200004eb 	.word	0x200004eb

08001e4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e50:	b672      	cpsid	i
}
 8001e52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e54:	e7fe      	b.n	8001e54 <Error_Handler+0x8>
	...

08001e58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e5e:	4b12      	ldr	r3, [pc, #72]	; (8001ea8 <HAL_MspInit+0x50>)
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	4a11      	ldr	r2, [pc, #68]	; (8001ea8 <HAL_MspInit+0x50>)
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	6193      	str	r3, [r2, #24]
 8001e6a:	4b0f      	ldr	r3, [pc, #60]	; (8001ea8 <HAL_MspInit+0x50>)
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	607b      	str	r3, [r7, #4]
 8001e74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e76:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <HAL_MspInit+0x50>)
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	4a0b      	ldr	r2, [pc, #44]	; (8001ea8 <HAL_MspInit+0x50>)
 8001e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e80:	61d3      	str	r3, [r2, #28]
 8001e82:	4b09      	ldr	r3, [pc, #36]	; (8001ea8 <HAL_MspInit+0x50>)
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8a:	603b      	str	r3, [r7, #0]
 8001e8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2100      	movs	r1, #0
 8001e92:	2005      	movs	r0, #5
 8001e94:	f002 fd1f 	bl	80048d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001e98:	2005      	movs	r0, #5
 8001e9a:	f002 fd38 	bl	800490e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40021000 	.word	0x40021000

08001eac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b08e      	sub	sp, #56	; 0x38
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	60da      	str	r2, [r3, #12]
 8001ec2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ecc:	d136      	bne.n	8001f3c <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001ece:	4b70      	ldr	r3, [pc, #448]	; (8002090 <HAL_ADC_MspInit+0x1e4>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	4a6e      	ldr	r2, [pc, #440]	; (8002090 <HAL_ADC_MspInit+0x1e4>)
 8001ed6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001ed8:	4b6d      	ldr	r3, [pc, #436]	; (8002090 <HAL_ADC_MspInit+0x1e4>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d10b      	bne.n	8001ef8 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001ee0:	4b6c      	ldr	r3, [pc, #432]	; (8002094 <HAL_ADC_MspInit+0x1e8>)
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	4a6b      	ldr	r2, [pc, #428]	; (8002094 <HAL_ADC_MspInit+0x1e8>)
 8001ee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eea:	6153      	str	r3, [r2, #20]
 8001eec:	4b69      	ldr	r3, [pc, #420]	; (8002094 <HAL_ADC_MspInit+0x1e8>)
 8001eee:	695b      	ldr	r3, [r3, #20]
 8001ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef4:	623b      	str	r3, [r7, #32]
 8001ef6:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef8:	4b66      	ldr	r3, [pc, #408]	; (8002094 <HAL_ADC_MspInit+0x1e8>)
 8001efa:	695b      	ldr	r3, [r3, #20]
 8001efc:	4a65      	ldr	r2, [pc, #404]	; (8002094 <HAL_ADC_MspInit+0x1e8>)
 8001efe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f02:	6153      	str	r3, [r2, #20]
 8001f04:	4b63      	ldr	r3, [pc, #396]	; (8002094 <HAL_ADC_MspInit+0x1e8>)
 8001f06:	695b      	ldr	r3, [r3, #20]
 8001f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0c:	61fb      	str	r3, [r7, #28]
 8001f0e:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = SENS_4_Pin;
 8001f10:	2308      	movs	r3, #8
 8001f12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f14:	2303      	movs	r3, #3
 8001f16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SENS_4_GPIO_Port, &GPIO_InitStruct);
 8001f1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f20:	4619      	mov	r1, r3
 8001f22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f26:	f002 ff43 	bl	8004db0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	2012      	movs	r0, #18
 8001f30:	f002 fcd1 	bl	80048d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001f34:	2012      	movs	r0, #18
 8001f36:	f002 fcea 	bl	800490e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001f3a:	e0a5      	b.n	8002088 <HAL_ADC_MspInit+0x1dc>
  else if(hadc->Instance==ADC2)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a55      	ldr	r2, [pc, #340]	; (8002098 <HAL_ADC_MspInit+0x1ec>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d177      	bne.n	8002036 <HAL_ADC_MspInit+0x18a>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001f46:	4b52      	ldr	r3, [pc, #328]	; (8002090 <HAL_ADC_MspInit+0x1e4>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	4a50      	ldr	r2, [pc, #320]	; (8002090 <HAL_ADC_MspInit+0x1e4>)
 8001f4e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001f50:	4b4f      	ldr	r3, [pc, #316]	; (8002090 <HAL_ADC_MspInit+0x1e4>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d10b      	bne.n	8001f70 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001f58:	4b4e      	ldr	r3, [pc, #312]	; (8002094 <HAL_ADC_MspInit+0x1e8>)
 8001f5a:	695b      	ldr	r3, [r3, #20]
 8001f5c:	4a4d      	ldr	r2, [pc, #308]	; (8002094 <HAL_ADC_MspInit+0x1e8>)
 8001f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f62:	6153      	str	r3, [r2, #20]
 8001f64:	4b4b      	ldr	r3, [pc, #300]	; (8002094 <HAL_ADC_MspInit+0x1e8>)
 8001f66:	695b      	ldr	r3, [r3, #20]
 8001f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6c:	61bb      	str	r3, [r7, #24]
 8001f6e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f70:	4b48      	ldr	r3, [pc, #288]	; (8002094 <HAL_ADC_MspInit+0x1e8>)
 8001f72:	695b      	ldr	r3, [r3, #20]
 8001f74:	4a47      	ldr	r2, [pc, #284]	; (8002094 <HAL_ADC_MspInit+0x1e8>)
 8001f76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f7a:	6153      	str	r3, [r2, #20]
 8001f7c:	4b45      	ldr	r3, [pc, #276]	; (8002094 <HAL_ADC_MspInit+0x1e8>)
 8001f7e:	695b      	ldr	r3, [r3, #20]
 8001f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f84:	617b      	str	r3, [r7, #20]
 8001f86:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f88:	4b42      	ldr	r3, [pc, #264]	; (8002094 <HAL_ADC_MspInit+0x1e8>)
 8001f8a:	695b      	ldr	r3, [r3, #20]
 8001f8c:	4a41      	ldr	r2, [pc, #260]	; (8002094 <HAL_ADC_MspInit+0x1e8>)
 8001f8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f92:	6153      	str	r3, [r2, #20]
 8001f94:	4b3f      	ldr	r3, [pc, #252]	; (8002094 <HAL_ADC_MspInit+0x1e8>)
 8001f96:	695b      	ldr	r3, [r3, #20]
 8001f98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f9c:	613b      	str	r3, [r7, #16]
 8001f9e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = HAL_1_Pin|HAL_2_Pin|HAL_3_Pin|HAL_4_Pin;
 8001fa0:	23f0      	movs	r3, #240	; 0xf0
 8001fa2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fb6:	f002 fefb 	bl	8004db0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SENS_3_Pin;
 8001fba:	2304      	movs	r3, #4
 8001fbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SENS_3_GPIO_Port, &GPIO_InitStruct);
 8001fc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4833      	ldr	r0, [pc, #204]	; (800209c <HAL_ADC_MspInit+0x1f0>)
 8001fce:	f002 feef 	bl	8004db0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 8001fd2:	4b33      	ldr	r3, [pc, #204]	; (80020a0 <HAL_ADC_MspInit+0x1f4>)
 8001fd4:	4a33      	ldr	r2, [pc, #204]	; (80020a4 <HAL_ADC_MspInit+0x1f8>)
 8001fd6:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fd8:	4b31      	ldr	r3, [pc, #196]	; (80020a0 <HAL_ADC_MspInit+0x1f4>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fde:	4b30      	ldr	r3, [pc, #192]	; (80020a0 <HAL_ADC_MspInit+0x1f4>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001fe4:	4b2e      	ldr	r3, [pc, #184]	; (80020a0 <HAL_ADC_MspInit+0x1f4>)
 8001fe6:	2280      	movs	r2, #128	; 0x80
 8001fe8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001fea:	4b2d      	ldr	r3, [pc, #180]	; (80020a0 <HAL_ADC_MspInit+0x1f4>)
 8001fec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ff0:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ff2:	4b2b      	ldr	r3, [pc, #172]	; (80020a0 <HAL_ADC_MspInit+0x1f4>)
 8001ff4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ff8:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8001ffa:	4b29      	ldr	r3, [pc, #164]	; (80020a0 <HAL_ADC_MspInit+0x1f4>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002000:	4b27      	ldr	r3, [pc, #156]	; (80020a0 <HAL_ADC_MspInit+0x1f4>)
 8002002:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002006:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002008:	4825      	ldr	r0, [pc, #148]	; (80020a0 <HAL_ADC_MspInit+0x1f4>)
 800200a:	f002 fc9a 	bl	8004942 <HAL_DMA_Init>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <HAL_ADC_MspInit+0x16c>
      Error_Handler();
 8002014:	f7ff ff1a 	bl	8001e4c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a21      	ldr	r2, [pc, #132]	; (80020a0 <HAL_ADC_MspInit+0x1f4>)
 800201c:	639a      	str	r2, [r3, #56]	; 0x38
 800201e:	4a20      	ldr	r2, [pc, #128]	; (80020a0 <HAL_ADC_MspInit+0x1f4>)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002024:	2200      	movs	r2, #0
 8002026:	2100      	movs	r1, #0
 8002028:	2012      	movs	r0, #18
 800202a:	f002 fc54 	bl	80048d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800202e:	2012      	movs	r0, #18
 8002030:	f002 fc6d 	bl	800490e <HAL_NVIC_EnableIRQ>
}
 8002034:	e028      	b.n	8002088 <HAL_ADC_MspInit+0x1dc>
  else if(hadc->Instance==ADC3)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a1b      	ldr	r2, [pc, #108]	; (80020a8 <HAL_ADC_MspInit+0x1fc>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d123      	bne.n	8002088 <HAL_ADC_MspInit+0x1dc>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8002040:	4b14      	ldr	r3, [pc, #80]	; (8002094 <HAL_ADC_MspInit+0x1e8>)
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	4a13      	ldr	r2, [pc, #76]	; (8002094 <HAL_ADC_MspInit+0x1e8>)
 8002046:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800204a:	6153      	str	r3, [r2, #20]
 800204c:	4b11      	ldr	r3, [pc, #68]	; (8002094 <HAL_ADC_MspInit+0x1e8>)
 800204e:	695b      	ldr	r3, [r3, #20]
 8002050:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002058:	4b0e      	ldr	r3, [pc, #56]	; (8002094 <HAL_ADC_MspInit+0x1e8>)
 800205a:	695b      	ldr	r3, [r3, #20]
 800205c:	4a0d      	ldr	r2, [pc, #52]	; (8002094 <HAL_ADC_MspInit+0x1e8>)
 800205e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002062:	6153      	str	r3, [r2, #20]
 8002064:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <HAL_ADC_MspInit+0x1e8>)
 8002066:	695b      	ldr	r3, [r3, #20]
 8002068:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800206c:	60bb      	str	r3, [r7, #8]
 800206e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SENS_1_Pin|SENS_2_Pin;
 8002070:	2303      	movs	r3, #3
 8002072:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002074:	2303      	movs	r3, #3
 8002076:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002078:	2300      	movs	r3, #0
 800207a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800207c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002080:	4619      	mov	r1, r3
 8002082:	4806      	ldr	r0, [pc, #24]	; (800209c <HAL_ADC_MspInit+0x1f0>)
 8002084:	f002 fe94 	bl	8004db0 <HAL_GPIO_Init>
}
 8002088:	bf00      	nop
 800208a:	3738      	adds	r7, #56	; 0x38
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	2000057c 	.word	0x2000057c
 8002094:	40021000 	.word	0x40021000
 8002098:	50000100 	.word	0x50000100
 800209c:	48000400 	.word	0x48000400
 80020a0:	20000188 	.word	0x20000188
 80020a4:	40020408 	.word	0x40020408
 80020a8:	50000400 	.word	0x50000400

080020ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b08a      	sub	sp, #40	; 0x28
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b4:	f107 0314 	add.w	r3, r7, #20
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	60da      	str	r2, [r3, #12]
 80020c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a1f      	ldr	r2, [pc, #124]	; (8002148 <HAL_I2C_MspInit+0x9c>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d138      	bne.n	8002140 <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ce:	4b1f      	ldr	r3, [pc, #124]	; (800214c <HAL_I2C_MspInit+0xa0>)
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	4a1e      	ldr	r2, [pc, #120]	; (800214c <HAL_I2C_MspInit+0xa0>)
 80020d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020d8:	6153      	str	r3, [r2, #20]
 80020da:	4b1c      	ldr	r3, [pc, #112]	; (800214c <HAL_I2C_MspInit+0xa0>)
 80020dc:	695b      	ldr	r3, [r3, #20]
 80020de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020e2:	613b      	str	r3, [r7, #16]
 80020e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020ec:	2312      	movs	r3, #18
 80020ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020f0:	2301      	movs	r3, #1
 80020f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020f4:	2303      	movs	r3, #3
 80020f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020f8:	2304      	movs	r3, #4
 80020fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020fc:	f107 0314 	add.w	r3, r7, #20
 8002100:	4619      	mov	r1, r3
 8002102:	4813      	ldr	r0, [pc, #76]	; (8002150 <HAL_I2C_MspInit+0xa4>)
 8002104:	f002 fe54 	bl	8004db0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002108:	4b10      	ldr	r3, [pc, #64]	; (800214c <HAL_I2C_MspInit+0xa0>)
 800210a:	69db      	ldr	r3, [r3, #28]
 800210c:	4a0f      	ldr	r2, [pc, #60]	; (800214c <HAL_I2C_MspInit+0xa0>)
 800210e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002112:	61d3      	str	r3, [r2, #28]
 8002114:	4b0d      	ldr	r3, [pc, #52]	; (800214c <HAL_I2C_MspInit+0xa0>)
 8002116:	69db      	ldr	r3, [r3, #28]
 8002118:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002120:	2200      	movs	r2, #0
 8002122:	2100      	movs	r1, #0
 8002124:	201f      	movs	r0, #31
 8002126:	f002 fbd6 	bl	80048d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800212a:	201f      	movs	r0, #31
 800212c:	f002 fbef 	bl	800490e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002130:	2200      	movs	r2, #0
 8002132:	2100      	movs	r1, #0
 8002134:	2020      	movs	r0, #32
 8002136:	f002 fbce 	bl	80048d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800213a:	2020      	movs	r0, #32
 800213c:	f002 fbe7 	bl	800490e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002140:	bf00      	nop
 8002142:	3728      	adds	r7, #40	; 0x28
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40005400 	.word	0x40005400
 800214c:	40021000 	.word	0x40021000
 8002150:	48000400 	.word	0x48000400

08002154 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a0d      	ldr	r2, [pc, #52]	; (8002198 <HAL_RTC_MspInit+0x44>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d111      	bne.n	800218a <HAL_RTC_MspInit+0x36>
 8002166:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800216a:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	fa93 f3a3 	rbit	r3, r3
 8002172:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002174:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002176:	fab3 f383 	clz	r3, r3
 800217a:	b2db      	uxtb	r3, r3
 800217c:	461a      	mov	r2, r3
 800217e:	4b07      	ldr	r3, [pc, #28]	; (800219c <HAL_RTC_MspInit+0x48>)
 8002180:	4413      	add	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	461a      	mov	r2, r3
 8002186:	2301      	movs	r3, #1
 8002188:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800218a:	bf00      	nop
 800218c:	3714      	adds	r7, #20
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	40002800 	.word	0x40002800
 800219c:	10908100 	.word	0x10908100

080021a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b08e      	sub	sp, #56	; 0x38
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	609a      	str	r2, [r3, #8]
 80021b4:	60da      	str	r2, [r3, #12]
 80021b6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a4f      	ldr	r2, [pc, #316]	; (80022fc <HAL_TIM_Base_MspInit+0x15c>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d114      	bne.n	80021ec <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021c2:	4b4f      	ldr	r3, [pc, #316]	; (8002300 <HAL_TIM_Base_MspInit+0x160>)
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	4a4e      	ldr	r2, [pc, #312]	; (8002300 <HAL_TIM_Base_MspInit+0x160>)
 80021c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021cc:	6193      	str	r3, [r2, #24]
 80021ce:	4b4c      	ldr	r3, [pc, #304]	; (8002300 <HAL_TIM_Base_MspInit+0x160>)
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021d6:	623b      	str	r3, [r7, #32]
 80021d8:	6a3b      	ldr	r3, [r7, #32]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80021da:	2200      	movs	r2, #0
 80021dc:	2100      	movs	r1, #0
 80021de:	2018      	movs	r0, #24
 80021e0:	f002 fb79 	bl	80048d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80021e4:	2018      	movs	r0, #24
 80021e6:	f002 fb92 	bl	800490e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80021ea:	e083      	b.n	80022f4 <HAL_TIM_Base_MspInit+0x154>
  else if(htim_base->Instance==TIM2)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021f4:	d131      	bne.n	800225a <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021f6:	4b42      	ldr	r3, [pc, #264]	; (8002300 <HAL_TIM_Base_MspInit+0x160>)
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	4a41      	ldr	r2, [pc, #260]	; (8002300 <HAL_TIM_Base_MspInit+0x160>)
 80021fc:	f043 0301 	orr.w	r3, r3, #1
 8002200:	61d3      	str	r3, [r2, #28]
 8002202:	4b3f      	ldr	r3, [pc, #252]	; (8002300 <HAL_TIM_Base_MspInit+0x160>)
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	61fb      	str	r3, [r7, #28]
 800220c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800220e:	4b3c      	ldr	r3, [pc, #240]	; (8002300 <HAL_TIM_Base_MspInit+0x160>)
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	4a3b      	ldr	r2, [pc, #236]	; (8002300 <HAL_TIM_Base_MspInit+0x160>)
 8002214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002218:	6153      	str	r3, [r2, #20]
 800221a:	4b39      	ldr	r3, [pc, #228]	; (8002300 <HAL_TIM_Base_MspInit+0x160>)
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002222:	61bb      	str	r3, [r7, #24]
 8002224:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002226:	2301      	movs	r3, #1
 8002228:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222a:	2302      	movs	r3, #2
 800222c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222e:	2300      	movs	r3, #0
 8002230:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002232:	2300      	movs	r3, #0
 8002234:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002236:	2301      	movs	r3, #1
 8002238:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800223a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800223e:	4619      	mov	r1, r3
 8002240:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002244:	f002 fdb4 	bl	8004db0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002248:	2200      	movs	r2, #0
 800224a:	2100      	movs	r1, #0
 800224c:	201c      	movs	r0, #28
 800224e:	f002 fb42 	bl	80048d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002252:	201c      	movs	r0, #28
 8002254:	f002 fb5b 	bl	800490e <HAL_NVIC_EnableIRQ>
}
 8002258:	e04c      	b.n	80022f4 <HAL_TIM_Base_MspInit+0x154>
  else if(htim_base->Instance==TIM3)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a29      	ldr	r2, [pc, #164]	; (8002304 <HAL_TIM_Base_MspInit+0x164>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d114      	bne.n	800228e <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002264:	4b26      	ldr	r3, [pc, #152]	; (8002300 <HAL_TIM_Base_MspInit+0x160>)
 8002266:	69db      	ldr	r3, [r3, #28]
 8002268:	4a25      	ldr	r2, [pc, #148]	; (8002300 <HAL_TIM_Base_MspInit+0x160>)
 800226a:	f043 0302 	orr.w	r3, r3, #2
 800226e:	61d3      	str	r3, [r2, #28]
 8002270:	4b23      	ldr	r3, [pc, #140]	; (8002300 <HAL_TIM_Base_MspInit+0x160>)
 8002272:	69db      	ldr	r3, [r3, #28]
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	617b      	str	r3, [r7, #20]
 800227a:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800227c:	2200      	movs	r2, #0
 800227e:	2100      	movs	r1, #0
 8002280:	201d      	movs	r0, #29
 8002282:	f002 fb28 	bl	80048d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002286:	201d      	movs	r0, #29
 8002288:	f002 fb41 	bl	800490e <HAL_NVIC_EnableIRQ>
}
 800228c:	e032      	b.n	80022f4 <HAL_TIM_Base_MspInit+0x154>
  else if(htim_base->Instance==TIM8)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a1d      	ldr	r2, [pc, #116]	; (8002308 <HAL_TIM_Base_MspInit+0x168>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d114      	bne.n	80022c2 <HAL_TIM_Base_MspInit+0x122>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002298:	4b19      	ldr	r3, [pc, #100]	; (8002300 <HAL_TIM_Base_MspInit+0x160>)
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	4a18      	ldr	r2, [pc, #96]	; (8002300 <HAL_TIM_Base_MspInit+0x160>)
 800229e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80022a2:	6193      	str	r3, [r2, #24]
 80022a4:	4b16      	ldr	r3, [pc, #88]	; (8002300 <HAL_TIM_Base_MspInit+0x160>)
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022ac:	613b      	str	r3, [r7, #16]
 80022ae:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_IRQn, 0, 0);
 80022b0:	2200      	movs	r2, #0
 80022b2:	2100      	movs	r1, #0
 80022b4:	202b      	movs	r0, #43	; 0x2b
 80022b6:	f002 fb0e 	bl	80048d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_IRQn);
 80022ba:	202b      	movs	r0, #43	; 0x2b
 80022bc:	f002 fb27 	bl	800490e <HAL_NVIC_EnableIRQ>
}
 80022c0:	e018      	b.n	80022f4 <HAL_TIM_Base_MspInit+0x154>
  else if(htim_base->Instance==TIM15)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a11      	ldr	r2, [pc, #68]	; (800230c <HAL_TIM_Base_MspInit+0x16c>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d113      	bne.n	80022f4 <HAL_TIM_Base_MspInit+0x154>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80022cc:	4b0c      	ldr	r3, [pc, #48]	; (8002300 <HAL_TIM_Base_MspInit+0x160>)
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	4a0b      	ldr	r2, [pc, #44]	; (8002300 <HAL_TIM_Base_MspInit+0x160>)
 80022d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d6:	6193      	str	r3, [r2, #24]
 80022d8:	4b09      	ldr	r3, [pc, #36]	; (8002300 <HAL_TIM_Base_MspInit+0x160>)
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80022e4:	2200      	movs	r2, #0
 80022e6:	2100      	movs	r1, #0
 80022e8:	2018      	movs	r0, #24
 80022ea:	f002 faf4 	bl	80048d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80022ee:	2018      	movs	r0, #24
 80022f0:	f002 fb0d 	bl	800490e <HAL_NVIC_EnableIRQ>
}
 80022f4:	bf00      	nop
 80022f6:	3738      	adds	r7, #56	; 0x38
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40012c00 	.word	0x40012c00
 8002300:	40021000 	.word	0x40021000
 8002304:	40000400 	.word	0x40000400
 8002308:	40013400 	.word	0x40013400
 800230c:	40014000 	.word	0x40014000

08002310 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b08c      	sub	sp, #48	; 0x30
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002318:	f107 031c 	add.w	r3, r7, #28
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	605a      	str	r2, [r3, #4]
 8002322:	609a      	str	r2, [r3, #8]
 8002324:	60da      	str	r2, [r3, #12]
 8002326:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a4c      	ldr	r2, [pc, #304]	; (8002460 <HAL_TIM_MspPostInit+0x150>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d11e      	bne.n	8002370 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002332:	4b4c      	ldr	r3, [pc, #304]	; (8002464 <HAL_TIM_MspPostInit+0x154>)
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	4a4b      	ldr	r2, [pc, #300]	; (8002464 <HAL_TIM_MspPostInit+0x154>)
 8002338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800233c:	6153      	str	r3, [r2, #20]
 800233e:	4b49      	ldr	r3, [pc, #292]	; (8002464 <HAL_TIM_MspPostInit+0x154>)
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002346:	61bb      	str	r3, [r7, #24]
 8002348:	69bb      	ldr	r3, [r7, #24]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 800234a:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 800234e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002350:	2302      	movs	r3, #2
 8002352:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002354:	2300      	movs	r3, #0
 8002356:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002358:	2300      	movs	r3, #0
 800235a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800235c:	2306      	movs	r3, #6
 800235e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002360:	f107 031c 	add.w	r3, r7, #28
 8002364:	4619      	mov	r1, r3
 8002366:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800236a:	f002 fd21 	bl	8004db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800236e:	e072      	b.n	8002456 <HAL_TIM_MspPostInit+0x146>
  else if(htim->Instance==TIM8)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a3c      	ldr	r2, [pc, #240]	; (8002468 <HAL_TIM_MspPostInit+0x158>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d13a      	bne.n	80023f0 <HAL_TIM_MspPostInit+0xe0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800237a:	4b3a      	ldr	r3, [pc, #232]	; (8002464 <HAL_TIM_MspPostInit+0x154>)
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	4a39      	ldr	r2, [pc, #228]	; (8002464 <HAL_TIM_MspPostInit+0x154>)
 8002380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002384:	6153      	str	r3, [r2, #20]
 8002386:	4b37      	ldr	r3, [pc, #220]	; (8002464 <HAL_TIM_MspPostInit+0x154>)
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238e:	617b      	str	r3, [r7, #20]
 8002390:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002392:	4b34      	ldr	r3, [pc, #208]	; (8002464 <HAL_TIM_MspPostInit+0x154>)
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	4a33      	ldr	r2, [pc, #204]	; (8002464 <HAL_TIM_MspPostInit+0x154>)
 8002398:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800239c:	6153      	str	r3, [r2, #20]
 800239e:	4b31      	ldr	r3, [pc, #196]	; (8002464 <HAL_TIM_MspPostInit+0x154>)
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023a6:	613b      	str	r3, [r7, #16]
 80023a8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80023aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b0:	2302      	movs	r3, #2
 80023b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b8:	2300      	movs	r3, #0
 80023ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 80023bc:	2302      	movs	r3, #2
 80023be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c0:	f107 031c 	add.w	r3, r7, #28
 80023c4:	4619      	mov	r1, r3
 80023c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023ca:	f002 fcf1 	bl	8004db0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80023ce:	2308      	movs	r3, #8
 80023d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d2:	2302      	movs	r3, #2
 80023d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023da:	2300      	movs	r3, #0
 80023dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80023de:	2304      	movs	r3, #4
 80023e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023e2:	f107 031c 	add.w	r3, r7, #28
 80023e6:	4619      	mov	r1, r3
 80023e8:	4820      	ldr	r0, [pc, #128]	; (800246c <HAL_TIM_MspPostInit+0x15c>)
 80023ea:	f002 fce1 	bl	8004db0 <HAL_GPIO_Init>
}
 80023ee:	e032      	b.n	8002456 <HAL_TIM_MspPostInit+0x146>
  else if(htim->Instance==TIM15)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a1e      	ldr	r2, [pc, #120]	; (8002470 <HAL_TIM_MspPostInit+0x160>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d12d      	bne.n	8002456 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023fa:	4b1a      	ldr	r3, [pc, #104]	; (8002464 <HAL_TIM_MspPostInit+0x154>)
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	4a19      	ldr	r2, [pc, #100]	; (8002464 <HAL_TIM_MspPostInit+0x154>)
 8002400:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002404:	6153      	str	r3, [r2, #20]
 8002406:	4b17      	ldr	r3, [pc, #92]	; (8002464 <HAL_TIM_MspPostInit+0x154>)
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002412:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002416:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002418:	2302      	movs	r3, #2
 800241a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241c:	2300      	movs	r3, #0
 800241e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002420:	2300      	movs	r3, #0
 8002422:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8002424:	2301      	movs	r3, #1
 8002426:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002428:	f107 031c 	add.w	r3, r7, #28
 800242c:	4619      	mov	r1, r3
 800242e:	480f      	ldr	r0, [pc, #60]	; (800246c <HAL_TIM_MspPostInit+0x15c>)
 8002430:	f002 fcbe 	bl	8004db0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002434:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002438:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243a:	2302      	movs	r3, #2
 800243c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243e:	2300      	movs	r3, #0
 8002440:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002442:	2300      	movs	r3, #0
 8002444:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM15;
 8002446:	2302      	movs	r3, #2
 8002448:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800244a:	f107 031c 	add.w	r3, r7, #28
 800244e:	4619      	mov	r1, r3
 8002450:	4806      	ldr	r0, [pc, #24]	; (800246c <HAL_TIM_MspPostInit+0x15c>)
 8002452:	f002 fcad 	bl	8004db0 <HAL_GPIO_Init>
}
 8002456:	bf00      	nop
 8002458:	3730      	adds	r7, #48	; 0x30
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40012c00 	.word	0x40012c00
 8002464:	40021000 	.word	0x40021000
 8002468:	40013400 	.word	0x40013400
 800246c:	48000400 	.word	0x48000400
 8002470:	40014000 	.word	0x40014000

08002474 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b08c      	sub	sp, #48	; 0x30
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800247c:	f107 031c 	add.w	r3, r7, #28
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	605a      	str	r2, [r3, #4]
 8002486:	609a      	str	r2, [r3, #8]
 8002488:	60da      	str	r2, [r3, #12]
 800248a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a40      	ldr	r2, [pc, #256]	; (8002594 <HAL_UART_MspInit+0x120>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d128      	bne.n	80024e8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002496:	4b40      	ldr	r3, [pc, #256]	; (8002598 <HAL_UART_MspInit+0x124>)
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	4a3f      	ldr	r2, [pc, #252]	; (8002598 <HAL_UART_MspInit+0x124>)
 800249c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024a0:	6193      	str	r3, [r2, #24]
 80024a2:	4b3d      	ldr	r3, [pc, #244]	; (8002598 <HAL_UART_MspInit+0x124>)
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024aa:	61bb      	str	r3, [r7, #24]
 80024ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ae:	4b3a      	ldr	r3, [pc, #232]	; (8002598 <HAL_UART_MspInit+0x124>)
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	4a39      	ldr	r2, [pc, #228]	; (8002598 <HAL_UART_MspInit+0x124>)
 80024b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024b8:	6153      	str	r3, [r2, #20]
 80024ba:	4b37      	ldr	r3, [pc, #220]	; (8002598 <HAL_UART_MspInit+0x124>)
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024c2:	617b      	str	r3, [r7, #20]
 80024c4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024c6:	23c0      	movs	r3, #192	; 0xc0
 80024c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ca:	2302      	movs	r3, #2
 80024cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ce:	2300      	movs	r3, #0
 80024d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024d2:	2303      	movs	r3, #3
 80024d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024d6:	2307      	movs	r3, #7
 80024d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024da:	f107 031c 	add.w	r3, r7, #28
 80024de:	4619      	mov	r1, r3
 80024e0:	482e      	ldr	r0, [pc, #184]	; (800259c <HAL_UART_MspInit+0x128>)
 80024e2:	f002 fc65 	bl	8004db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80024e6:	e051      	b.n	800258c <HAL_UART_MspInit+0x118>
  else if(huart->Instance==USART2)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a2c      	ldr	r2, [pc, #176]	; (80025a0 <HAL_UART_MspInit+0x12c>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d14c      	bne.n	800258c <HAL_UART_MspInit+0x118>
    __HAL_RCC_USART2_CLK_ENABLE();
 80024f2:	4b29      	ldr	r3, [pc, #164]	; (8002598 <HAL_UART_MspInit+0x124>)
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	4a28      	ldr	r2, [pc, #160]	; (8002598 <HAL_UART_MspInit+0x124>)
 80024f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024fc:	61d3      	str	r3, [r2, #28]
 80024fe:	4b26      	ldr	r3, [pc, #152]	; (8002598 <HAL_UART_MspInit+0x124>)
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002506:	613b      	str	r3, [r7, #16]
 8002508:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800250a:	4b23      	ldr	r3, [pc, #140]	; (8002598 <HAL_UART_MspInit+0x124>)
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	4a22      	ldr	r2, [pc, #136]	; (8002598 <HAL_UART_MspInit+0x124>)
 8002510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002514:	6153      	str	r3, [r2, #20]
 8002516:	4b20      	ldr	r3, [pc, #128]	; (8002598 <HAL_UART_MspInit+0x124>)
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002522:	4b1d      	ldr	r3, [pc, #116]	; (8002598 <HAL_UART_MspInit+0x124>)
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	4a1c      	ldr	r2, [pc, #112]	; (8002598 <HAL_UART_MspInit+0x124>)
 8002528:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800252c:	6153      	str	r3, [r2, #20]
 800252e:	4b1a      	ldr	r3, [pc, #104]	; (8002598 <HAL_UART_MspInit+0x124>)
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002536:	60bb      	str	r3, [r7, #8]
 8002538:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800253a:	2304      	movs	r3, #4
 800253c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800253e:	2302      	movs	r3, #2
 8002540:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002542:	2300      	movs	r3, #0
 8002544:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002546:	2303      	movs	r3, #3
 8002548:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800254a:	2307      	movs	r3, #7
 800254c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800254e:	f107 031c 	add.w	r3, r7, #28
 8002552:	4619      	mov	r1, r3
 8002554:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002558:	f002 fc2a 	bl	8004db0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800255c:	2310      	movs	r3, #16
 800255e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002560:	2302      	movs	r3, #2
 8002562:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002564:	2300      	movs	r3, #0
 8002566:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002568:	2303      	movs	r3, #3
 800256a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800256c:	2307      	movs	r3, #7
 800256e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002570:	f107 031c 	add.w	r3, r7, #28
 8002574:	4619      	mov	r1, r3
 8002576:	4809      	ldr	r0, [pc, #36]	; (800259c <HAL_UART_MspInit+0x128>)
 8002578:	f002 fc1a 	bl	8004db0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800257c:	2200      	movs	r2, #0
 800257e:	2100      	movs	r1, #0
 8002580:	2026      	movs	r0, #38	; 0x26
 8002582:	f002 f9a8 	bl	80048d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002586:	2026      	movs	r0, #38	; 0x26
 8002588:	f002 f9c1 	bl	800490e <HAL_NVIC_EnableIRQ>
}
 800258c:	bf00      	nop
 800258e:	3730      	adds	r7, #48	; 0x30
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40013800 	.word	0x40013800
 8002598:	40021000 	.word	0x40021000
 800259c:	48000400 	.word	0x48000400
 80025a0:	40004400 	.word	0x40004400

080025a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025a8:	e7fe      	b.n	80025a8 <NMI_Handler+0x4>

080025aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025aa:	b480      	push	{r7}
 80025ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025ae:	e7fe      	b.n	80025ae <HardFault_Handler+0x4>

080025b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025b4:	e7fe      	b.n	80025b4 <MemManage_Handler+0x4>

080025b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025b6:	b480      	push	{r7}
 80025b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025ba:	e7fe      	b.n	80025ba <BusFault_Handler+0x4>

080025bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025c0:	e7fe      	b.n	80025c0 <UsageFault_Handler+0x4>

080025c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025c2:	b480      	push	{r7}
 80025c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025c6:	bf00      	nop
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025d4:	bf00      	nop
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr

080025de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025de:	b480      	push	{r7}
 80025e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025e2:	bf00      	nop
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025f0:	f000 f936 	bl	8002860 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025f4:	bf00      	nop
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80025fc:	bf00      	nop
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr

08002606 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_Pin);
 800260a:	2002      	movs	r0, #2
 800260c:	f002 fd94 	bl	8005138 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002610:	bf00      	nop
 8002612:	bd80      	pop	{r7, pc}

08002614 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002618:	4803      	ldr	r0, [pc, #12]	; (8002628 <ADC1_2_IRQHandler+0x14>)
 800261a:	f000 ff3d 	bl	8003498 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800261e:	4803      	ldr	r0, [pc, #12]	; (800262c <ADC1_2_IRQHandler+0x18>)
 8002620:	f000 ff3a 	bl	8003498 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002624:	bf00      	nop
 8002626:	bd80      	pop	{r7, pc}
 8002628:	20000098 	.word	0x20000098
 800262c:	200000e8 	.word	0x200000e8

08002630 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002634:	4803      	ldr	r0, [pc, #12]	; (8002644 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8002636:	f006 fb81 	bl	8008d3c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 800263a:	4803      	ldr	r0, [pc, #12]	; (8002648 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 800263c:	f006 fb7e 	bl	8008d3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002640:	bf00      	nop
 8002642:	bd80      	pop	{r7, pc}
 8002644:	20000240 	.word	0x20000240
 8002648:	20000370 	.word	0x20000370

0800264c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002650:	4802      	ldr	r0, [pc, #8]	; (800265c <TIM2_IRQHandler+0x10>)
 8002652:	f006 fb73 	bl	8008d3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	2000028c 	.word	0x2000028c

08002660 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002664:	4802      	ldr	r0, [pc, #8]	; (8002670 <TIM3_IRQHandler+0x10>)
 8002666:	f006 fb69 	bl	8008d3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	200002d8 	.word	0x200002d8

08002674 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002678:	4802      	ldr	r0, [pc, #8]	; (8002684 <I2C1_EV_IRQHandler+0x10>)
 800267a:	f003 f802 	bl	8005682 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800267e:	bf00      	nop
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	200001cc 	.word	0x200001cc

08002688 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800268c:	4802      	ldr	r0, [pc, #8]	; (8002698 <I2C1_ER_IRQHandler+0x10>)
 800268e:	f003 f812 	bl	80056b6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002692:	bf00      	nop
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	200001cc 	.word	0x200001cc

0800269c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80026a0:	4802      	ldr	r0, [pc, #8]	; (80026ac <USART2_IRQHandler+0x10>)
 80026a2:	f007 ff37 	bl	800a514 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80026a6:	bf00      	nop
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	20000444 	.word	0x20000444

080026b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(START_Pin);
 80026b4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80026b8:	f002 fd3e 	bl	8005138 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(STOP_Pin);
 80026bc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80026c0:	f002 fd3a 	bl	8005138 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80026c4:	bf00      	nop
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <TIM8_BRK_IRQHandler>:

/**
  * @brief This function handles TIM8 break global interrupt.
  */
void TIM8_BRK_IRQHandler(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_IRQn 0 */

  /* USER CODE END TIM8_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80026cc:	4802      	ldr	r0, [pc, #8]	; (80026d8 <TIM8_BRK_IRQHandler+0x10>)
 80026ce:	f006 fb35 	bl	8008d3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_IRQn 1 */

  /* USER CODE END TIM8_BRK_IRQn 1 */
}
 80026d2:	bf00      	nop
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	20000324 	.word	0x20000324

080026dc <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80026e0:	4802      	ldr	r0, [pc, #8]	; (80026ec <DMA2_Channel1_IRQHandler+0x10>)
 80026e2:	f002 fa4b 	bl	8004b7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 80026e6:	bf00      	nop
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	20000188 	.word	0x20000188

080026f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026f8:	4a14      	ldr	r2, [pc, #80]	; (800274c <_sbrk+0x5c>)
 80026fa:	4b15      	ldr	r3, [pc, #84]	; (8002750 <_sbrk+0x60>)
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002704:	4b13      	ldr	r3, [pc, #76]	; (8002754 <_sbrk+0x64>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d102      	bne.n	8002712 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800270c:	4b11      	ldr	r3, [pc, #68]	; (8002754 <_sbrk+0x64>)
 800270e:	4a12      	ldr	r2, [pc, #72]	; (8002758 <_sbrk+0x68>)
 8002710:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002712:	4b10      	ldr	r3, [pc, #64]	; (8002754 <_sbrk+0x64>)
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4413      	add	r3, r2
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	429a      	cmp	r2, r3
 800271e:	d207      	bcs.n	8002730 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002720:	f008 fe28 	bl	800b374 <__errno>
 8002724:	4603      	mov	r3, r0
 8002726:	220c      	movs	r2, #12
 8002728:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800272a:	f04f 33ff 	mov.w	r3, #4294967295
 800272e:	e009      	b.n	8002744 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002730:	4b08      	ldr	r3, [pc, #32]	; (8002754 <_sbrk+0x64>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002736:	4b07      	ldr	r3, [pc, #28]	; (8002754 <_sbrk+0x64>)
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4413      	add	r3, r2
 800273e:	4a05      	ldr	r2, [pc, #20]	; (8002754 <_sbrk+0x64>)
 8002740:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002742:	68fb      	ldr	r3, [r7, #12]
}
 8002744:	4618      	mov	r0, r3
 8002746:	3718      	adds	r7, #24
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	2000a000 	.word	0x2000a000
 8002750:	00000400 	.word	0x00000400
 8002754:	20000580 	.word	0x20000580
 8002758:	20000598 	.word	0x20000598

0800275c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002760:	4b06      	ldr	r3, [pc, #24]	; (800277c <SystemInit+0x20>)
 8002762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002766:	4a05      	ldr	r2, [pc, #20]	; (800277c <SystemInit+0x20>)
 8002768:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800276c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002770:	bf00      	nop
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	e000ed00 	.word	0xe000ed00

08002780 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002780:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027b8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002784:	f7ff ffea 	bl	800275c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002788:	480c      	ldr	r0, [pc, #48]	; (80027bc <LoopForever+0x6>)
  ldr r1, =_edata
 800278a:	490d      	ldr	r1, [pc, #52]	; (80027c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800278c:	4a0d      	ldr	r2, [pc, #52]	; (80027c4 <LoopForever+0xe>)
  movs r3, #0
 800278e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002790:	e002      	b.n	8002798 <LoopCopyDataInit>

08002792 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002792:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002794:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002796:	3304      	adds	r3, #4

08002798 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002798:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800279a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800279c:	d3f9      	bcc.n	8002792 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800279e:	4a0a      	ldr	r2, [pc, #40]	; (80027c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80027a0:	4c0a      	ldr	r4, [pc, #40]	; (80027cc <LoopForever+0x16>)
  movs r3, #0
 80027a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027a4:	e001      	b.n	80027aa <LoopFillZerobss>

080027a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027a8:	3204      	adds	r2, #4

080027aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027ac:	d3fb      	bcc.n	80027a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027ae:	f008 fde7 	bl	800b380 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80027b2:	f7fe f85b 	bl	800086c <main>

080027b6 <LoopForever>:

LoopForever:
    b LoopForever
 80027b6:	e7fe      	b.n	80027b6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80027b8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80027bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027c0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80027c4:	0800bdd4 	.word	0x0800bdd4
  ldr r2, =_sbss
 80027c8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80027cc:	20000598 	.word	0x20000598

080027d0 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80027d0:	e7fe      	b.n	80027d0 <ADC3_IRQHandler>
	...

080027d4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027d8:	4b08      	ldr	r3, [pc, #32]	; (80027fc <HAL_Init+0x28>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a07      	ldr	r2, [pc, #28]	; (80027fc <HAL_Init+0x28>)
 80027de:	f043 0310 	orr.w	r3, r3, #16
 80027e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027e4:	2003      	movs	r0, #3
 80027e6:	f002 f86b 	bl	80048c0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027ea:	200f      	movs	r0, #15
 80027ec:	f000 f808 	bl	8002800 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027f0:	f7ff fb32 	bl	8001e58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	40022000 	.word	0x40022000

08002800 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002808:	4b12      	ldr	r3, [pc, #72]	; (8002854 <HAL_InitTick+0x54>)
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	4b12      	ldr	r3, [pc, #72]	; (8002858 <HAL_InitTick+0x58>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	4619      	mov	r1, r3
 8002812:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002816:	fbb3 f3f1 	udiv	r3, r3, r1
 800281a:	fbb2 f3f3 	udiv	r3, r2, r3
 800281e:	4618      	mov	r0, r3
 8002820:	f002 f883 	bl	800492a <HAL_SYSTICK_Config>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e00e      	b.n	800284c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2b0f      	cmp	r3, #15
 8002832:	d80a      	bhi.n	800284a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002834:	2200      	movs	r2, #0
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	f04f 30ff 	mov.w	r0, #4294967295
 800283c:	f002 f84b 	bl	80048d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002840:	4a06      	ldr	r2, [pc, #24]	; (800285c <HAL_InitTick+0x5c>)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002846:	2300      	movs	r3, #0
 8002848:	e000      	b.n	800284c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
}
 800284c:	4618      	mov	r0, r3
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	2000000c 	.word	0x2000000c
 8002858:	20000014 	.word	0x20000014
 800285c:	20000010 	.word	0x20000010

08002860 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002864:	4b06      	ldr	r3, [pc, #24]	; (8002880 <HAL_IncTick+0x20>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	461a      	mov	r2, r3
 800286a:	4b06      	ldr	r3, [pc, #24]	; (8002884 <HAL_IncTick+0x24>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4413      	add	r3, r2
 8002870:	4a04      	ldr	r2, [pc, #16]	; (8002884 <HAL_IncTick+0x24>)
 8002872:	6013      	str	r3, [r2, #0]
}
 8002874:	bf00      	nop
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	20000014 	.word	0x20000014
 8002884:	20000584 	.word	0x20000584

08002888 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  return uwTick;  
 800288c:	4b03      	ldr	r3, [pc, #12]	; (800289c <HAL_GetTick+0x14>)
 800288e:	681b      	ldr	r3, [r3, #0]
}
 8002890:	4618      	mov	r0, r3
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	20000584 	.word	0x20000584

080028a0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028a8:	f7ff ffee 	bl	8002888 <HAL_GetTick>
 80028ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b8:	d005      	beq.n	80028c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028ba:	4b0a      	ldr	r3, [pc, #40]	; (80028e4 <HAL_Delay+0x44>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	461a      	mov	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	4413      	add	r3, r2
 80028c4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80028c6:	bf00      	nop
 80028c8:	f7ff ffde 	bl	8002888 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d8f7      	bhi.n	80028c8 <HAL_Delay+0x28>
  {
  }
}
 80028d8:	bf00      	nop
 80028da:	bf00      	nop
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	20000014 	.word	0x20000014

080028e8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b09a      	sub	sp, #104	; 0x68
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800292c:	2300      	movs	r3, #0
 800292e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002932:	2300      	movs	r3, #0
 8002934:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002936:	2300      	movs	r3, #0
 8002938:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e1c9      	b.n	8002cd8 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	f003 0310 	and.w	r3, r3, #16
 8002952:	2b00      	cmp	r3, #0
 8002954:	d176      	bne.n	8002a44 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	2b00      	cmp	r3, #0
 800295c:	d152      	bne.n	8002a04 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f7ff fa97 	bl	8001eac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d13b      	bne.n	8002a04 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f001 fdab 	bl	80044e8 <ADC_Disable>
 8002992:	4603      	mov	r3, r0
 8002994:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299c:	f003 0310 	and.w	r3, r3, #16
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d12f      	bne.n	8002a04 <HAL_ADC_Init+0xe0>
 80029a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d12b      	bne.n	8002a04 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80029b4:	f023 0302 	bic.w	r3, r3, #2
 80029b8:	f043 0202 	orr.w	r2, r3, #2
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689a      	ldr	r2, [r3, #8]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029ce:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689a      	ldr	r2, [r3, #8]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80029de:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80029e0:	4b86      	ldr	r3, [pc, #536]	; (8002bfc <HAL_ADC_Init+0x2d8>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a86      	ldr	r2, [pc, #536]	; (8002c00 <HAL_ADC_Init+0x2dc>)
 80029e6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ea:	0c9a      	lsrs	r2, r3, #18
 80029ec:	4613      	mov	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029f6:	e002      	b.n	80029fe <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	3b01      	subs	r3, #1
 80029fc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1f9      	bne.n	80029f8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d007      	beq.n	8002a22 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002a1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a20:	d110      	bne.n	8002a44 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	f023 0312 	bic.w	r3, r3, #18
 8002a2a:	f043 0210 	orr.w	r2, r3, #16
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a36:	f043 0201 	orr.w	r2, r3, #1
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a48:	f003 0310 	and.w	r3, r3, #16
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f040 8136 	bne.w	8002cbe <HAL_ADC_Init+0x39a>
 8002a52:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f040 8131 	bne.w	8002cbe <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f040 8129 	bne.w	8002cbe <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a70:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002a74:	f043 0202 	orr.w	r2, r3, #2
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a84:	d004      	beq.n	8002a90 <HAL_ADC_Init+0x16c>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a5e      	ldr	r2, [pc, #376]	; (8002c04 <HAL_ADC_Init+0x2e0>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d101      	bne.n	8002a94 <HAL_ADC_Init+0x170>
 8002a90:	4b5d      	ldr	r3, [pc, #372]	; (8002c08 <HAL_ADC_Init+0x2e4>)
 8002a92:	e000      	b.n	8002a96 <HAL_ADC_Init+0x172>
 8002a94:	4b5d      	ldr	r3, [pc, #372]	; (8002c0c <HAL_ADC_Init+0x2e8>)
 8002a96:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002aa0:	d102      	bne.n	8002aa8 <HAL_ADC_Init+0x184>
 8002aa2:	4b58      	ldr	r3, [pc, #352]	; (8002c04 <HAL_ADC_Init+0x2e0>)
 8002aa4:	60fb      	str	r3, [r7, #12]
 8002aa6:	e01a      	b.n	8002ade <HAL_ADC_Init+0x1ba>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a55      	ldr	r2, [pc, #340]	; (8002c04 <HAL_ADC_Init+0x2e0>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d103      	bne.n	8002aba <HAL_ADC_Init+0x196>
 8002ab2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	e011      	b.n	8002ade <HAL_ADC_Init+0x1ba>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a54      	ldr	r2, [pc, #336]	; (8002c10 <HAL_ADC_Init+0x2ec>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d102      	bne.n	8002aca <HAL_ADC_Init+0x1a6>
 8002ac4:	4b53      	ldr	r3, [pc, #332]	; (8002c14 <HAL_ADC_Init+0x2f0>)
 8002ac6:	60fb      	str	r3, [r7, #12]
 8002ac8:	e009      	b.n	8002ade <HAL_ADC_Init+0x1ba>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a51      	ldr	r2, [pc, #324]	; (8002c14 <HAL_ADC_Init+0x2f0>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d102      	bne.n	8002ada <HAL_ADC_Init+0x1b6>
 8002ad4:	4b4e      	ldr	r3, [pc, #312]	; (8002c10 <HAL_ADC_Init+0x2ec>)
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	e001      	b.n	8002ade <HAL_ADC_Init+0x1ba>
 8002ada:	2300      	movs	r3, #0
 8002adc:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f003 0303 	and.w	r3, r3, #3
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d108      	bne.n	8002afe <HAL_ADC_Init+0x1da>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d101      	bne.n	8002afe <HAL_ADC_Init+0x1da>
 8002afa:	2301      	movs	r3, #1
 8002afc:	e000      	b.n	8002b00 <HAL_ADC_Init+0x1dc>
 8002afe:	2300      	movs	r3, #0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d11c      	bne.n	8002b3e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002b04:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d010      	beq.n	8002b2c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d107      	bne.n	8002b26 <HAL_ADC_Init+0x202>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d101      	bne.n	8002b26 <HAL_ADC_Init+0x202>
 8002b22:	2301      	movs	r3, #1
 8002b24:	e000      	b.n	8002b28 <HAL_ADC_Init+0x204>
 8002b26:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d108      	bne.n	8002b3e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002b2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b3c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	7e5b      	ldrb	r3, [r3, #25]
 8002b42:	035b      	lsls	r3, r3, #13
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b48:	2a01      	cmp	r2, #1
 8002b4a:	d002      	beq.n	8002b52 <HAL_ADC_Init+0x22e>
 8002b4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b50:	e000      	b.n	8002b54 <HAL_ADC_Init+0x230>
 8002b52:	2200      	movs	r2, #0
 8002b54:	431a      	orrs	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b64:	4313      	orrs	r3, r2
 8002b66:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d11b      	bne.n	8002baa <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	7e5b      	ldrb	r3, [r3, #25]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d109      	bne.n	8002b8e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	045a      	lsls	r2, r3, #17
 8002b82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b84:	4313      	orrs	r3, r2
 8002b86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b8a:	663b      	str	r3, [r7, #96]	; 0x60
 8002b8c:	e00d      	b.n	8002baa <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002b96:	f043 0220 	orr.w	r2, r3, #32
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba2:	f043 0201 	orr.w	r2, r3, #1
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d03a      	beq.n	8002c28 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a16      	ldr	r2, [pc, #88]	; (8002c10 <HAL_ADC_Init+0x2ec>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d004      	beq.n	8002bc6 <HAL_ADC_Init+0x2a2>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a14      	ldr	r2, [pc, #80]	; (8002c14 <HAL_ADC_Init+0x2f0>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d128      	bne.n	8002c18 <HAL_ADC_Init+0x2f4>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bca:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8002bce:	d012      	beq.n	8002bf6 <HAL_ADC_Init+0x2d2>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bd8:	d00a      	beq.n	8002bf0 <HAL_ADC_Init+0x2cc>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bde:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8002be2:	d002      	beq.n	8002bea <HAL_ADC_Init+0x2c6>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be8:	e018      	b.n	8002c1c <HAL_ADC_Init+0x2f8>
 8002bea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bee:	e015      	b.n	8002c1c <HAL_ADC_Init+0x2f8>
 8002bf0:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002bf4:	e012      	b.n	8002c1c <HAL_ADC_Init+0x2f8>
 8002bf6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002bfa:	e00f      	b.n	8002c1c <HAL_ADC_Init+0x2f8>
 8002bfc:	2000000c 	.word	0x2000000c
 8002c00:	431bde83 	.word	0x431bde83
 8002c04:	50000100 	.word	0x50000100
 8002c08:	50000300 	.word	0x50000300
 8002c0c:	50000700 	.word	0x50000700
 8002c10:	50000400 	.word	0x50000400
 8002c14:	50000500 	.word	0x50000500
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c20:	4313      	orrs	r3, r2
 8002c22:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002c24:	4313      	orrs	r3, r2
 8002c26:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 030c 	and.w	r3, r3, #12
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d114      	bne.n	8002c60 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	6812      	ldr	r2, [r2, #0]
 8002c40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c44:	f023 0302 	bic.w	r3, r3, #2
 8002c48:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	7e1b      	ldrb	r3, [r3, #24]
 8002c4e:	039a      	lsls	r2, r3, #14
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68da      	ldr	r2, [r3, #12]
 8002c66:	4b1e      	ldr	r3, [pc, #120]	; (8002ce0 <HAL_ADC_Init+0x3bc>)
 8002c68:	4013      	ands	r3, r2
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	6812      	ldr	r2, [r2, #0]
 8002c6e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002c70:	430b      	orrs	r3, r1
 8002c72:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d10c      	bne.n	8002c96 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	f023 010f 	bic.w	r1, r3, #15
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	1e5a      	subs	r2, r3, #1
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	430a      	orrs	r2, r1
 8002c92:	631a      	str	r2, [r3, #48]	; 0x30
 8002c94:	e007      	b.n	8002ca6 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 020f 	bic.w	r2, r2, #15
 8002ca4:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb0:	f023 0303 	bic.w	r3, r3, #3
 8002cb4:	f043 0201 	orr.w	r2, r3, #1
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	641a      	str	r2, [r3, #64]	; 0x40
 8002cbc:	e00a      	b.n	8002cd4 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	f023 0312 	bic.w	r3, r3, #18
 8002cc6:	f043 0210 	orr.w	r2, r3, #16
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002cce:	2301      	movs	r3, #1
 8002cd0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002cd4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3768      	adds	r7, #104	; 0x68
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	fff0c007 	.word	0xfff0c007

08002ce4 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cec:	2300      	movs	r3, #0
 8002cee:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f003 0304 	and.w	r3, r3, #4
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f040 80f9 	bne.w	8002ef2 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d101      	bne.n	8002d0e <HAL_ADC_Start+0x2a>
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	e0f4      	b.n	8002ef8 <HAL_ADC_Start+0x214>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f001 fb82 	bl	8004420 <ADC_Enable>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002d20:	7bfb      	ldrb	r3, [r7, #15]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f040 80e0 	bne.w	8002ee8 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d30:	f023 0301 	bic.w	r3, r3, #1
 8002d34:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d44:	d004      	beq.n	8002d50 <HAL_ADC_Start+0x6c>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a6d      	ldr	r2, [pc, #436]	; (8002f00 <HAL_ADC_Start+0x21c>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d106      	bne.n	8002d5e <HAL_ADC_Start+0x7a>
 8002d50:	4b6c      	ldr	r3, [pc, #432]	; (8002f04 <HAL_ADC_Start+0x220>)
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f003 031f 	and.w	r3, r3, #31
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d010      	beq.n	8002d7e <HAL_ADC_Start+0x9a>
 8002d5c:	e005      	b.n	8002d6a <HAL_ADC_Start+0x86>
 8002d5e:	4b6a      	ldr	r3, [pc, #424]	; (8002f08 <HAL_ADC_Start+0x224>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 031f 	and.w	r3, r3, #31
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d009      	beq.n	8002d7e <HAL_ADC_Start+0x9a>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d72:	d004      	beq.n	8002d7e <HAL_ADC_Start+0x9a>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a64      	ldr	r2, [pc, #400]	; (8002f0c <HAL_ADC_Start+0x228>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d115      	bne.n	8002daa <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d036      	beq.n	8002e06 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002da0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002da8:	e02d      	b.n	8002e06 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dbe:	d004      	beq.n	8002dca <HAL_ADC_Start+0xe6>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a4e      	ldr	r2, [pc, #312]	; (8002f00 <HAL_ADC_Start+0x21c>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d10a      	bne.n	8002de0 <HAL_ADC_Start+0xfc>
 8002dca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	bf14      	ite	ne
 8002dd8:	2301      	movne	r3, #1
 8002dda:	2300      	moveq	r3, #0
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	e008      	b.n	8002df2 <HAL_ADC_Start+0x10e>
 8002de0:	4b4a      	ldr	r3, [pc, #296]	; (8002f0c <HAL_ADC_Start+0x228>)
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	bf14      	ite	ne
 8002dec:	2301      	movne	r3, #1
 8002dee:	2300      	moveq	r3, #0
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d007      	beq.n	8002e06 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002dfe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e12:	d106      	bne.n	8002e22 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e18:	f023 0206 	bic.w	r2, r3, #6
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	645a      	str	r2, [r3, #68]	; 0x44
 8002e20:	e002      	b.n	8002e28 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	221c      	movs	r2, #28
 8002e36:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e40:	d004      	beq.n	8002e4c <HAL_ADC_Start+0x168>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a2e      	ldr	r2, [pc, #184]	; (8002f00 <HAL_ADC_Start+0x21c>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d106      	bne.n	8002e5a <HAL_ADC_Start+0x176>
 8002e4c:	4b2d      	ldr	r3, [pc, #180]	; (8002f04 <HAL_ADC_Start+0x220>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f003 031f 	and.w	r3, r3, #31
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d03e      	beq.n	8002ed6 <HAL_ADC_Start+0x1f2>
 8002e58:	e005      	b.n	8002e66 <HAL_ADC_Start+0x182>
 8002e5a:	4b2b      	ldr	r3, [pc, #172]	; (8002f08 <HAL_ADC_Start+0x224>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f003 031f 	and.w	r3, r3, #31
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d037      	beq.n	8002ed6 <HAL_ADC_Start+0x1f2>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e6e:	d004      	beq.n	8002e7a <HAL_ADC_Start+0x196>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a22      	ldr	r2, [pc, #136]	; (8002f00 <HAL_ADC_Start+0x21c>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d106      	bne.n	8002e88 <HAL_ADC_Start+0x1a4>
 8002e7a:	4b22      	ldr	r3, [pc, #136]	; (8002f04 <HAL_ADC_Start+0x220>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 031f 	and.w	r3, r3, #31
 8002e82:	2b05      	cmp	r3, #5
 8002e84:	d027      	beq.n	8002ed6 <HAL_ADC_Start+0x1f2>
 8002e86:	e005      	b.n	8002e94 <HAL_ADC_Start+0x1b0>
 8002e88:	4b1f      	ldr	r3, [pc, #124]	; (8002f08 <HAL_ADC_Start+0x224>)
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f003 031f 	and.w	r3, r3, #31
 8002e90:	2b05      	cmp	r3, #5
 8002e92:	d020      	beq.n	8002ed6 <HAL_ADC_Start+0x1f2>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e9c:	d004      	beq.n	8002ea8 <HAL_ADC_Start+0x1c4>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a17      	ldr	r2, [pc, #92]	; (8002f00 <HAL_ADC_Start+0x21c>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d106      	bne.n	8002eb6 <HAL_ADC_Start+0x1d2>
 8002ea8:	4b16      	ldr	r3, [pc, #88]	; (8002f04 <HAL_ADC_Start+0x220>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f003 031f 	and.w	r3, r3, #31
 8002eb0:	2b09      	cmp	r3, #9
 8002eb2:	d010      	beq.n	8002ed6 <HAL_ADC_Start+0x1f2>
 8002eb4:	e005      	b.n	8002ec2 <HAL_ADC_Start+0x1de>
 8002eb6:	4b14      	ldr	r3, [pc, #80]	; (8002f08 <HAL_ADC_Start+0x224>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 031f 	and.w	r3, r3, #31
 8002ebe:	2b09      	cmp	r3, #9
 8002ec0:	d009      	beq.n	8002ed6 <HAL_ADC_Start+0x1f2>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002eca:	d004      	beq.n	8002ed6 <HAL_ADC_Start+0x1f2>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a0e      	ldr	r2, [pc, #56]	; (8002f0c <HAL_ADC_Start+0x228>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d10f      	bne.n	8002ef6 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f042 0204 	orr.w	r2, r2, #4
 8002ee4:	609a      	str	r2, [r3, #8]
 8002ee6:	e006      	b.n	8002ef6 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002ef0:	e001      	b.n	8002ef6 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	50000100 	.word	0x50000100
 8002f04:	50000300 	.word	0x50000300
 8002f08:	50000700 	.word	0x50000700
 8002f0c:	50000400 	.word	0x50000400

08002f10 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d101      	bne.n	8002f2a <HAL_ADC_Stop+0x1a>
 8002f26:	2302      	movs	r3, #2
 8002f28:	e023      	b.n	8002f72 <HAL_ADC_Stop+0x62>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002f32:	216c      	movs	r1, #108	; 0x6c
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f001 fb3d 	bl	80045b4 <ADC_ConversionStop>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002f3e:	7bfb      	ldrb	r3, [r7, #15]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d111      	bne.n	8002f68 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f001 facf 	bl	80044e8 <ADC_Disable>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002f4e:	7bfb      	ldrb	r3, [r7, #15]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d109      	bne.n	8002f68 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f58:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f5c:	f023 0301 	bic.w	r3, r3, #1
 8002f60:	f043 0201 	orr.w	r2, r3, #1
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
	...

08002f7c <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002f86:	2300      	movs	r3, #0
 8002f88:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	2b08      	cmp	r3, #8
 8002f90:	d102      	bne.n	8002f98 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002f92:	2308      	movs	r3, #8
 8002f94:	617b      	str	r3, [r7, #20]
 8002f96:	e03a      	b.n	800300e <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fa0:	d004      	beq.n	8002fac <HAL_ADC_PollForConversion+0x30>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a72      	ldr	r2, [pc, #456]	; (8003170 <HAL_ADC_PollForConversion+0x1f4>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d101      	bne.n	8002fb0 <HAL_ADC_PollForConversion+0x34>
 8002fac:	4b71      	ldr	r3, [pc, #452]	; (8003174 <HAL_ADC_PollForConversion+0x1f8>)
 8002fae:	e000      	b.n	8002fb2 <HAL_ADC_PollForConversion+0x36>
 8002fb0:	4b71      	ldr	r3, [pc, #452]	; (8003178 <HAL_ADC_PollForConversion+0x1fc>)
 8002fb2:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f003 031f 	and.w	r3, r3, #31
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d112      	bne.n	8002fe6 <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d11d      	bne.n	800300a <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	f043 0220 	orr.w	r2, r3, #32
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e0bf      	b.n	8003166 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00b      	beq.n	800300a <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	f043 0220 	orr.w	r2, r3, #32
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e0ad      	b.n	8003166 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800300a:	230c      	movs	r3, #12
 800300c:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003016:	d004      	beq.n	8003022 <HAL_ADC_PollForConversion+0xa6>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a54      	ldr	r2, [pc, #336]	; (8003170 <HAL_ADC_PollForConversion+0x1f4>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d106      	bne.n	8003030 <HAL_ADC_PollForConversion+0xb4>
 8003022:	4b54      	ldr	r3, [pc, #336]	; (8003174 <HAL_ADC_PollForConversion+0x1f8>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f003 031f 	and.w	r3, r3, #31
 800302a:	2b00      	cmp	r3, #0
 800302c:	d010      	beq.n	8003050 <HAL_ADC_PollForConversion+0xd4>
 800302e:	e005      	b.n	800303c <HAL_ADC_PollForConversion+0xc0>
 8003030:	4b51      	ldr	r3, [pc, #324]	; (8003178 <HAL_ADC_PollForConversion+0x1fc>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f003 031f 	and.w	r3, r3, #31
 8003038:	2b00      	cmp	r3, #0
 800303a:	d009      	beq.n	8003050 <HAL_ADC_PollForConversion+0xd4>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003044:	d004      	beq.n	8003050 <HAL_ADC_PollForConversion+0xd4>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a4c      	ldr	r2, [pc, #304]	; (800317c <HAL_ADC_PollForConversion+0x200>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d104      	bne.n	800305a <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	613b      	str	r3, [r7, #16]
 8003058:	e00f      	b.n	800307a <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003062:	d004      	beq.n	800306e <HAL_ADC_PollForConversion+0xf2>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a41      	ldr	r2, [pc, #260]	; (8003170 <HAL_ADC_PollForConversion+0x1f4>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d102      	bne.n	8003074 <HAL_ADC_PollForConversion+0xf8>
 800306e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003072:	e000      	b.n	8003076 <HAL_ADC_PollForConversion+0xfa>
 8003074:	4b41      	ldr	r3, [pc, #260]	; (800317c <HAL_ADC_PollForConversion+0x200>)
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 800307a:	f7ff fc05 	bl	8002888 <HAL_GetTick>
 800307e:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003080:	e021      	b.n	80030c6 <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003088:	d01d      	beq.n	80030c6 <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d007      	beq.n	80030a0 <HAL_ADC_PollForConversion+0x124>
 8003090:	f7ff fbfa 	bl	8002888 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	429a      	cmp	r2, r3
 800309e:	d212      	bcs.n	80030c6 <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	4013      	ands	r3, r2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d10b      	bne.n	80030c6 <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	f043 0204 	orr.w	r2, r3, #4
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e04f      	b.n	8003166 <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	4013      	ands	r3, r2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d0d6      	beq.n	8003082 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d131      	bne.n	8003152 <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d12c      	bne.n	8003152 <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0308 	and.w	r3, r3, #8
 8003102:	2b08      	cmp	r3, #8
 8003104:	d125      	bne.n	8003152 <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f003 0304 	and.w	r3, r3, #4
 8003110:	2b00      	cmp	r3, #0
 8003112:	d112      	bne.n	800313a <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003118:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003124:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d112      	bne.n	8003152 <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003130:	f043 0201 	orr.w	r2, r3, #1
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	641a      	str	r2, [r3, #64]	; 0x40
 8003138:	e00b      	b.n	8003152 <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	f043 0220 	orr.w	r2, r3, #32
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314a:	f043 0201 	orr.w	r2, r3, #1
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d103      	bne.n	8003164 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3718      	adds	r7, #24
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	50000100 	.word	0x50000100
 8003174:	50000300 	.word	0x50000300
 8003178:	50000700 	.word	0x50000700
 800317c:	50000400 	.word	0x50000400

08003180 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800318c:	2300      	movs	r3, #0
 800318e:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f003 0304 	and.w	r3, r3, #4
 800319a:	2b00      	cmp	r3, #0
 800319c:	f040 80f7 	bne.w	800338e <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d101      	bne.n	80031ae <HAL_ADC_Start_DMA+0x2e>
 80031aa:	2302      	movs	r3, #2
 80031ac:	e0f2      	b.n	8003394 <HAL_ADC_Start_DMA+0x214>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031be:	d004      	beq.n	80031ca <HAL_ADC_Start_DMA+0x4a>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a75      	ldr	r2, [pc, #468]	; (800339c <HAL_ADC_Start_DMA+0x21c>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d109      	bne.n	80031de <HAL_ADC_Start_DMA+0x5e>
 80031ca:	4b75      	ldr	r3, [pc, #468]	; (80033a0 <HAL_ADC_Start_DMA+0x220>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f003 031f 	and.w	r3, r3, #31
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	bf0c      	ite	eq
 80031d6:	2301      	moveq	r3, #1
 80031d8:	2300      	movne	r3, #0
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	e008      	b.n	80031f0 <HAL_ADC_Start_DMA+0x70>
 80031de:	4b71      	ldr	r3, [pc, #452]	; (80033a4 <HAL_ADC_Start_DMA+0x224>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 031f 	and.w	r3, r3, #31
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	bf0c      	ite	eq
 80031ea:	2301      	moveq	r3, #1
 80031ec:	2300      	movne	r3, #0
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f000 80c5 	beq.w	8003380 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f001 f912 	bl	8004420 <ADC_Enable>
 80031fc:	4603      	mov	r3, r0
 80031fe:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003200:	7dfb      	ldrb	r3, [r7, #23]
 8003202:	2b00      	cmp	r3, #0
 8003204:	f040 80b7 	bne.w	8003376 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003210:	f023 0301 	bic.w	r3, r3, #1
 8003214:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003224:	d004      	beq.n	8003230 <HAL_ADC_Start_DMA+0xb0>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a5c      	ldr	r2, [pc, #368]	; (800339c <HAL_ADC_Start_DMA+0x21c>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d106      	bne.n	800323e <HAL_ADC_Start_DMA+0xbe>
 8003230:	4b5b      	ldr	r3, [pc, #364]	; (80033a0 <HAL_ADC_Start_DMA+0x220>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f003 031f 	and.w	r3, r3, #31
 8003238:	2b00      	cmp	r3, #0
 800323a:	d010      	beq.n	800325e <HAL_ADC_Start_DMA+0xde>
 800323c:	e005      	b.n	800324a <HAL_ADC_Start_DMA+0xca>
 800323e:	4b59      	ldr	r3, [pc, #356]	; (80033a4 <HAL_ADC_Start_DMA+0x224>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 031f 	and.w	r3, r3, #31
 8003246:	2b00      	cmp	r3, #0
 8003248:	d009      	beq.n	800325e <HAL_ADC_Start_DMA+0xde>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003252:	d004      	beq.n	800325e <HAL_ADC_Start_DMA+0xde>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a53      	ldr	r2, [pc, #332]	; (80033a8 <HAL_ADC_Start_DMA+0x228>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d115      	bne.n	800328a <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d036      	beq.n	80032e6 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003280:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003288:	e02d      	b.n	80032e6 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800329e:	d004      	beq.n	80032aa <HAL_ADC_Start_DMA+0x12a>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a3d      	ldr	r2, [pc, #244]	; (800339c <HAL_ADC_Start_DMA+0x21c>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d10a      	bne.n	80032c0 <HAL_ADC_Start_DMA+0x140>
 80032aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	bf14      	ite	ne
 80032b8:	2301      	movne	r3, #1
 80032ba:	2300      	moveq	r3, #0
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	e008      	b.n	80032d2 <HAL_ADC_Start_DMA+0x152>
 80032c0:	4b39      	ldr	r3, [pc, #228]	; (80033a8 <HAL_ADC_Start_DMA+0x228>)
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	bf14      	ite	ne
 80032cc:	2301      	movne	r3, #1
 80032ce:	2300      	moveq	r3, #0
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d007      	beq.n	80032e6 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80032de:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032f2:	d106      	bne.n	8003302 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f8:	f023 0206 	bic.w	r2, r3, #6
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	645a      	str	r2, [r3, #68]	; 0x44
 8003300:	e002      	b.n	8003308 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003314:	4a25      	ldr	r2, [pc, #148]	; (80033ac <HAL_ADC_Start_DMA+0x22c>)
 8003316:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331c:	4a24      	ldr	r2, [pc, #144]	; (80033b0 <HAL_ADC_Start_DMA+0x230>)
 800331e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003324:	4a23      	ldr	r2, [pc, #140]	; (80033b4 <HAL_ADC_Start_DMA+0x234>)
 8003326:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	221c      	movs	r2, #28
 800332e:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	685a      	ldr	r2, [r3, #4]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0210 	orr.w	r2, r2, #16
 800333e:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68da      	ldr	r2, [r3, #12]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 0201 	orr.w	r2, r2, #1
 800334e:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	3340      	adds	r3, #64	; 0x40
 800335a:	4619      	mov	r1, r3
 800335c:	68ba      	ldr	r2, [r7, #8]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f001 fb36 	bl	80049d0 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	689a      	ldr	r2, [r3, #8]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f042 0204 	orr.w	r2, r2, #4
 8003372:	609a      	str	r2, [r3, #8]
 8003374:	e00d      	b.n	8003392 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800337e:	e008      	b.n	8003392 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800338c:	e001      	b.n	8003392 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800338e:	2302      	movs	r3, #2
 8003390:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003392:	7dfb      	ldrb	r3, [r7, #23]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3718      	adds	r7, #24
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	50000100 	.word	0x50000100
 80033a0:	50000300 	.word	0x50000300
 80033a4:	50000700 	.word	0x50000700
 80033a8:	50000400 	.word	0x50000400
 80033ac:	08004355 	.word	0x08004355
 80033b0:	080043cf 	.word	0x080043cf
 80033b4:	080043eb 	.word	0x080043eb

080033b8 <HAL_ADC_Stop_DMA>:
  *         dedicated MultimodeStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033c0:	2300      	movs	r3, #0
 80033c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d101      	bne.n	80033d2 <HAL_ADC_Stop_DMA+0x1a>
 80033ce:	2302      	movs	r3, #2
 80033d0:	e050      	b.n	8003474 <HAL_ADC_Stop_DMA+0xbc>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80033da:	216c      	movs	r1, #108	; 0x6c
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f001 f8e9 	bl	80045b4 <ADC_ConversionStop>
 80033e2:	4603      	mov	r3, r0
 80033e4:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80033e6:	7bfb      	ldrb	r3, [r7, #15]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d13e      	bne.n	800346a <HAL_ADC_Stop_DMA+0xb2>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68da      	ldr	r2, [r3, #12]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 0201 	bic.w	r2, r2, #1
 80033fa:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003400:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003404:	2b02      	cmp	r3, #2
 8003406:	d10f      	bne.n	8003428 <HAL_ADC_Stop_DMA+0x70>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340c:	4618      	mov	r0, r3
 800340e:	f001 fb3e 	bl	8004a8e <HAL_DMA_Abort>
 8003412:	4603      	mov	r3, r0
 8003414:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003416:	7bfb      	ldrb	r3, [r7, #15]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d005      	beq.n	8003428 <HAL_ADC_Stop_DMA+0x70>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003420:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685a      	ldr	r2, [r3, #4]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f022 0210 	bic.w	r2, r2, #16
 8003436:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 8003438:	7bfb      	ldrb	r3, [r7, #15]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d105      	bne.n	800344a <HAL_ADC_Stop_DMA+0x92>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f001 f852 	bl	80044e8 <ADC_Disable>
 8003444:	4603      	mov	r3, r0
 8003446:	73fb      	strb	r3, [r7, #15]
 8003448:	e002      	b.n	8003450 <HAL_ADC_Stop_DMA+0x98>
    }
    else
    {
      ADC_Disable(hadc);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f001 f84c 	bl	80044e8 <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003450:	7bfb      	ldrb	r3, [r7, #15]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d109      	bne.n	800346a <HAL_ADC_Stop_DMA+0xb2>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800345e:	f023 0301 	bic.w	r3, r3, #1
 8003462:	f043 0201 	orr.w	r2, r3, #1
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003472:	7bfb      	ldrb	r3, [r7, #15]
}
 8003474:	4618      	mov	r0, r3
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800348a:	4618      	mov	r0, r3
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
	...

08003498 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b088      	sub	sp, #32
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 80034a0:	2300      	movs	r3, #0
 80034a2:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80034a4:	2300      	movs	r3, #0
 80034a6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 80034a8:	2300      	movs	r3, #0
 80034aa:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	f003 0304 	and.w	r3, r3, #4
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d004      	beq.n	80034d0 <HAL_ADC_IRQHandler+0x38>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f003 0304 	and.w	r3, r3, #4
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d10b      	bne.n	80034e8 <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f000 80bc 	beq.w	8003654 <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f003 0308 	and.w	r3, r3, #8
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f000 80b6 	beq.w	8003654 <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ec:	f003 0310 	and.w	r3, r3, #16
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d105      	bne.n	8003500 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003508:	d004      	beq.n	8003514 <HAL_ADC_IRQHandler+0x7c>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a90      	ldr	r2, [pc, #576]	; (8003750 <HAL_ADC_IRQHandler+0x2b8>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d106      	bne.n	8003522 <HAL_ADC_IRQHandler+0x8a>
 8003514:	4b8f      	ldr	r3, [pc, #572]	; (8003754 <HAL_ADC_IRQHandler+0x2bc>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f003 031f 	and.w	r3, r3, #31
 800351c:	2b00      	cmp	r3, #0
 800351e:	d03e      	beq.n	800359e <HAL_ADC_IRQHandler+0x106>
 8003520:	e005      	b.n	800352e <HAL_ADC_IRQHandler+0x96>
 8003522:	4b8d      	ldr	r3, [pc, #564]	; (8003758 <HAL_ADC_IRQHandler+0x2c0>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f003 031f 	and.w	r3, r3, #31
 800352a:	2b00      	cmp	r3, #0
 800352c:	d037      	beq.n	800359e <HAL_ADC_IRQHandler+0x106>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003536:	d004      	beq.n	8003542 <HAL_ADC_IRQHandler+0xaa>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a84      	ldr	r2, [pc, #528]	; (8003750 <HAL_ADC_IRQHandler+0x2b8>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d106      	bne.n	8003550 <HAL_ADC_IRQHandler+0xb8>
 8003542:	4b84      	ldr	r3, [pc, #528]	; (8003754 <HAL_ADC_IRQHandler+0x2bc>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 031f 	and.w	r3, r3, #31
 800354a:	2b05      	cmp	r3, #5
 800354c:	d027      	beq.n	800359e <HAL_ADC_IRQHandler+0x106>
 800354e:	e005      	b.n	800355c <HAL_ADC_IRQHandler+0xc4>
 8003550:	4b81      	ldr	r3, [pc, #516]	; (8003758 <HAL_ADC_IRQHandler+0x2c0>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f003 031f 	and.w	r3, r3, #31
 8003558:	2b05      	cmp	r3, #5
 800355a:	d020      	beq.n	800359e <HAL_ADC_IRQHandler+0x106>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003564:	d004      	beq.n	8003570 <HAL_ADC_IRQHandler+0xd8>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a79      	ldr	r2, [pc, #484]	; (8003750 <HAL_ADC_IRQHandler+0x2b8>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d106      	bne.n	800357e <HAL_ADC_IRQHandler+0xe6>
 8003570:	4b78      	ldr	r3, [pc, #480]	; (8003754 <HAL_ADC_IRQHandler+0x2bc>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f003 031f 	and.w	r3, r3, #31
 8003578:	2b09      	cmp	r3, #9
 800357a:	d010      	beq.n	800359e <HAL_ADC_IRQHandler+0x106>
 800357c:	e005      	b.n	800358a <HAL_ADC_IRQHandler+0xf2>
 800357e:	4b76      	ldr	r3, [pc, #472]	; (8003758 <HAL_ADC_IRQHandler+0x2c0>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f003 031f 	and.w	r3, r3, #31
 8003586:	2b09      	cmp	r3, #9
 8003588:	d009      	beq.n	800359e <HAL_ADC_IRQHandler+0x106>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003592:	d004      	beq.n	800359e <HAL_ADC_IRQHandler+0x106>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a70      	ldr	r2, [pc, #448]	; (800375c <HAL_ADC_IRQHandler+0x2c4>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d104      	bne.n	80035a8 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	61bb      	str	r3, [r7, #24]
 80035a6:	e00f      	b.n	80035c8 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035b0:	d004      	beq.n	80035bc <HAL_ADC_IRQHandler+0x124>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a66      	ldr	r2, [pc, #408]	; (8003750 <HAL_ADC_IRQHandler+0x2b8>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d102      	bne.n	80035c2 <HAL_ADC_IRQHandler+0x12a>
 80035bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80035c0:	e000      	b.n	80035c4 <HAL_ADC_IRQHandler+0x12c>
 80035c2:	4b66      	ldr	r3, [pc, #408]	; (800375c <HAL_ADC_IRQHandler+0x2c4>)
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d137      	bne.n	8003646 <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d132      	bne.n	8003646 <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	f003 0308 	and.w	r3, r3, #8
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d02d      	beq.n	8003646 <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f003 0304 	and.w	r3, r3, #4
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d11a      	bne.n	800362e <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	685a      	ldr	r2, [r3, #4]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 020c 	bic.w	r2, r2, #12
 8003606:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003618:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d112      	bne.n	8003646 <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003624:	f043 0201 	orr.w	r2, r3, #1
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	641a      	str	r2, [r3, #64]	; 0x40
 800362c:	e00b      	b.n	8003646 <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	f043 0210 	orr.w	r2, r3, #16
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363e:	f043 0201 	orr.w	r2, r3, #1
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f7fe fbea 	bl	8001e20 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	220c      	movs	r2, #12
 8003652:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	f003 0320 	and.w	r3, r3, #32
 800365a:	2b00      	cmp	r3, #0
 800365c:	d004      	beq.n	8003668 <HAL_ADC_IRQHandler+0x1d0>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f003 0320 	and.w	r3, r3, #32
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10b      	bne.n	8003680 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 8138 	beq.w	80038e4 <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367a:	2b00      	cmp	r3, #0
 800367c:	f000 8132 	beq.w	80038e4 <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003684:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003694:	d004      	beq.n	80036a0 <HAL_ADC_IRQHandler+0x208>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a2d      	ldr	r2, [pc, #180]	; (8003750 <HAL_ADC_IRQHandler+0x2b8>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d106      	bne.n	80036ae <HAL_ADC_IRQHandler+0x216>
 80036a0:	4b2c      	ldr	r3, [pc, #176]	; (8003754 <HAL_ADC_IRQHandler+0x2bc>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f003 031f 	and.w	r3, r3, #31
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d03e      	beq.n	800372a <HAL_ADC_IRQHandler+0x292>
 80036ac:	e005      	b.n	80036ba <HAL_ADC_IRQHandler+0x222>
 80036ae:	4b2a      	ldr	r3, [pc, #168]	; (8003758 <HAL_ADC_IRQHandler+0x2c0>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 031f 	and.w	r3, r3, #31
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d037      	beq.n	800372a <HAL_ADC_IRQHandler+0x292>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036c2:	d004      	beq.n	80036ce <HAL_ADC_IRQHandler+0x236>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a21      	ldr	r2, [pc, #132]	; (8003750 <HAL_ADC_IRQHandler+0x2b8>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d106      	bne.n	80036dc <HAL_ADC_IRQHandler+0x244>
 80036ce:	4b21      	ldr	r3, [pc, #132]	; (8003754 <HAL_ADC_IRQHandler+0x2bc>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f003 031f 	and.w	r3, r3, #31
 80036d6:	2b05      	cmp	r3, #5
 80036d8:	d027      	beq.n	800372a <HAL_ADC_IRQHandler+0x292>
 80036da:	e005      	b.n	80036e8 <HAL_ADC_IRQHandler+0x250>
 80036dc:	4b1e      	ldr	r3, [pc, #120]	; (8003758 <HAL_ADC_IRQHandler+0x2c0>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f003 031f 	and.w	r3, r3, #31
 80036e4:	2b05      	cmp	r3, #5
 80036e6:	d020      	beq.n	800372a <HAL_ADC_IRQHandler+0x292>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036f0:	d004      	beq.n	80036fc <HAL_ADC_IRQHandler+0x264>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a16      	ldr	r2, [pc, #88]	; (8003750 <HAL_ADC_IRQHandler+0x2b8>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d106      	bne.n	800370a <HAL_ADC_IRQHandler+0x272>
 80036fc:	4b15      	ldr	r3, [pc, #84]	; (8003754 <HAL_ADC_IRQHandler+0x2bc>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f003 031f 	and.w	r3, r3, #31
 8003704:	2b09      	cmp	r3, #9
 8003706:	d010      	beq.n	800372a <HAL_ADC_IRQHandler+0x292>
 8003708:	e005      	b.n	8003716 <HAL_ADC_IRQHandler+0x27e>
 800370a:	4b13      	ldr	r3, [pc, #76]	; (8003758 <HAL_ADC_IRQHandler+0x2c0>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f003 031f 	and.w	r3, r3, #31
 8003712:	2b09      	cmp	r3, #9
 8003714:	d009      	beq.n	800372a <HAL_ADC_IRQHandler+0x292>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800371e:	d004      	beq.n	800372a <HAL_ADC_IRQHandler+0x292>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a0d      	ldr	r2, [pc, #52]	; (800375c <HAL_ADC_IRQHandler+0x2c4>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d104      	bne.n	8003734 <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	61bb      	str	r3, [r7, #24]
 8003732:	e018      	b.n	8003766 <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800373c:	d004      	beq.n	8003748 <HAL_ADC_IRQHandler+0x2b0>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a03      	ldr	r2, [pc, #12]	; (8003750 <HAL_ADC_IRQHandler+0x2b8>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d10b      	bne.n	8003760 <HAL_ADC_IRQHandler+0x2c8>
 8003748:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800374c:	e009      	b.n	8003762 <HAL_ADC_IRQHandler+0x2ca>
 800374e:	bf00      	nop
 8003750:	50000100 	.word	0x50000100
 8003754:	50000300 	.word	0x50000300
 8003758:	50000700 	.word	0x50000700
 800375c:	50000400 	.word	0x50000400
 8003760:	4b92      	ldr	r3, [pc, #584]	; (80039ac <HAL_ADC_IRQHandler+0x514>)
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800376c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003770:	2b00      	cmp	r3, #0
 8003772:	f040 80b0 	bne.w	80038d6 <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00d      	beq.n	800379c <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800378a:	2b00      	cmp	r3, #0
 800378c:	f040 80a3 	bne.w	80038d6 <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8003796:	2b00      	cmp	r3, #0
 8003798:	f040 809d 	bne.w	80038d6 <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f000 8097 	beq.w	80038d6 <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037b0:	d004      	beq.n	80037bc <HAL_ADC_IRQHandler+0x324>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a7e      	ldr	r2, [pc, #504]	; (80039b0 <HAL_ADC_IRQHandler+0x518>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d106      	bne.n	80037ca <HAL_ADC_IRQHandler+0x332>
 80037bc:	4b7d      	ldr	r3, [pc, #500]	; (80039b4 <HAL_ADC_IRQHandler+0x51c>)
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f003 031f 	and.w	r3, r3, #31
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d03e      	beq.n	8003846 <HAL_ADC_IRQHandler+0x3ae>
 80037c8:	e005      	b.n	80037d6 <HAL_ADC_IRQHandler+0x33e>
 80037ca:	4b7b      	ldr	r3, [pc, #492]	; (80039b8 <HAL_ADC_IRQHandler+0x520>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f003 031f 	and.w	r3, r3, #31
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d037      	beq.n	8003846 <HAL_ADC_IRQHandler+0x3ae>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037de:	d004      	beq.n	80037ea <HAL_ADC_IRQHandler+0x352>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a72      	ldr	r2, [pc, #456]	; (80039b0 <HAL_ADC_IRQHandler+0x518>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d106      	bne.n	80037f8 <HAL_ADC_IRQHandler+0x360>
 80037ea:	4b72      	ldr	r3, [pc, #456]	; (80039b4 <HAL_ADC_IRQHandler+0x51c>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 031f 	and.w	r3, r3, #31
 80037f2:	2b06      	cmp	r3, #6
 80037f4:	d027      	beq.n	8003846 <HAL_ADC_IRQHandler+0x3ae>
 80037f6:	e005      	b.n	8003804 <HAL_ADC_IRQHandler+0x36c>
 80037f8:	4b6f      	ldr	r3, [pc, #444]	; (80039b8 <HAL_ADC_IRQHandler+0x520>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f003 031f 	and.w	r3, r3, #31
 8003800:	2b06      	cmp	r3, #6
 8003802:	d020      	beq.n	8003846 <HAL_ADC_IRQHandler+0x3ae>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800380c:	d004      	beq.n	8003818 <HAL_ADC_IRQHandler+0x380>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a67      	ldr	r2, [pc, #412]	; (80039b0 <HAL_ADC_IRQHandler+0x518>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d106      	bne.n	8003826 <HAL_ADC_IRQHandler+0x38e>
 8003818:	4b66      	ldr	r3, [pc, #408]	; (80039b4 <HAL_ADC_IRQHandler+0x51c>)
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f003 031f 	and.w	r3, r3, #31
 8003820:	2b07      	cmp	r3, #7
 8003822:	d010      	beq.n	8003846 <HAL_ADC_IRQHandler+0x3ae>
 8003824:	e005      	b.n	8003832 <HAL_ADC_IRQHandler+0x39a>
 8003826:	4b64      	ldr	r3, [pc, #400]	; (80039b8 <HAL_ADC_IRQHandler+0x520>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f003 031f 	and.w	r3, r3, #31
 800382e:	2b07      	cmp	r3, #7
 8003830:	d009      	beq.n	8003846 <HAL_ADC_IRQHandler+0x3ae>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800383a:	d004      	beq.n	8003846 <HAL_ADC_IRQHandler+0x3ae>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a5a      	ldr	r2, [pc, #360]	; (80039ac <HAL_ADC_IRQHandler+0x514>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d104      	bne.n	8003850 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	617b      	str	r3, [r7, #20]
 800384e:	e00f      	b.n	8003870 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003858:	d004      	beq.n	8003864 <HAL_ADC_IRQHandler+0x3cc>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a54      	ldr	r2, [pc, #336]	; (80039b0 <HAL_ADC_IRQHandler+0x518>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d102      	bne.n	800386a <HAL_ADC_IRQHandler+0x3d2>
 8003864:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003868:	e000      	b.n	800386c <HAL_ADC_IRQHandler+0x3d4>
 800386a:	4b50      	ldr	r3, [pc, #320]	; (80039ac <HAL_ADC_IRQHandler+0x514>)
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d12d      	bne.n	80038d6 <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f003 0308 	and.w	r3, r3, #8
 8003884:	2b00      	cmp	r3, #0
 8003886:	d11a      	bne.n	80038be <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003896:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d112      	bne.n	80038d6 <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b4:	f043 0201 	orr.w	r2, r3, #1
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	641a      	str	r2, [r3, #64]	; 0x40
 80038bc:	e00b      	b.n	80038d6 <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	f043 0210 	orr.w	r2, r3, #16
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ce:	f043 0201 	orr.w	r2, r3, #1
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 f936 	bl	8003b48 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2260      	movs	r2, #96	; 0x60
 80038e2:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d011      	beq.n	8003912 <HAL_ADC_IRQHandler+0x47a>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00c      	beq.n	8003912 <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f7fe fff9 	bl	80028fc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2280      	movs	r2, #128	; 0x80
 8003910:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003918:	2b00      	cmp	r3, #0
 800391a:	d012      	beq.n	8003942 <HAL_ADC_IRQHandler+0x4aa>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00d      	beq.n	8003942 <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f91c 	bl	8003b70 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003940:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003948:	2b00      	cmp	r3, #0
 800394a:	d012      	beq.n	8003972 <HAL_ADC_IRQHandler+0x4da>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00d      	beq.n	8003972 <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f90e 	bl	8003b84 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003970:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	f003 0310 	and.w	r3, r3, #16
 8003978:	2b00      	cmp	r3, #0
 800397a:	d04f      	beq.n	8003a1c <HAL_ADC_IRQHandler+0x584>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f003 0310 	and.w	r3, r3, #16
 8003982:	2b00      	cmp	r3, #0
 8003984:	d04a      	beq.n	8003a1c <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800398a:	2b01      	cmp	r3, #1
 800398c:	d102      	bne.n	8003994 <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 800398e:	2301      	movs	r3, #1
 8003990:	61fb      	str	r3, [r7, #28]
 8003992:	e02d      	b.n	80039f0 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800399c:	d004      	beq.n	80039a8 <HAL_ADC_IRQHandler+0x510>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a03      	ldr	r2, [pc, #12]	; (80039b0 <HAL_ADC_IRQHandler+0x518>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d109      	bne.n	80039bc <HAL_ADC_IRQHandler+0x524>
 80039a8:	4b02      	ldr	r3, [pc, #8]	; (80039b4 <HAL_ADC_IRQHandler+0x51c>)
 80039aa:	e008      	b.n	80039be <HAL_ADC_IRQHandler+0x526>
 80039ac:	50000400 	.word	0x50000400
 80039b0:	50000100 	.word	0x50000100
 80039b4:	50000300 	.word	0x50000300
 80039b8:	50000700 	.word	0x50000700
 80039bc:	4b28      	ldr	r3, [pc, #160]	; (8003a60 <HAL_ADC_IRQHandler+0x5c8>)
 80039be:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f003 031f 	and.w	r3, r3, #31
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d109      	bne.n	80039e0 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d10a      	bne.n	80039f0 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 80039da:	2301      	movs	r3, #1
 80039dc:	61fb      	str	r3, [r7, #28]
 80039de:	e007      	b.n	80039f0 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d001      	beq.n	80039f0 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 80039ec:	2301      	movs	r3, #1
 80039ee:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d10e      	bne.n	8003a14 <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a06:	f043 0202 	orr.w	r2, r3, #2
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f7fe ff7e 	bl	8002910 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2210      	movs	r2, #16
 8003a1a:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d018      	beq.n	8003a58 <HAL_ADC_IRQHandler+0x5c0>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d013      	beq.n	8003a58 <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a34:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a40:	f043 0208 	orr.w	r2, r3, #8
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a50:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f882 	bl	8003b5c <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8003a58:	bf00      	nop
 8003a5a:	3720      	adds	r7, #32
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	50000700 	.word	0x50000700

08003a64 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d101      	bne.n	8003a80 <HAL_ADCEx_Calibration_Start+0x1c>
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	e05f      	b.n	8003b40 <HAL_ADCEx_Calibration_Start+0xdc>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 fd2d 	bl	80044e8 <ADC_Disable>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003a92:	7bfb      	ldrb	r3, [r7, #15]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d14e      	bne.n	8003b36 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689a      	ldr	r2, [r3, #8]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8003aac:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d107      	bne.n	8003ac4 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689a      	ldr	r2, [r3, #8]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003ac2:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689a      	ldr	r2, [r3, #8]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003ad2:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8003ad4:	f7fe fed8 	bl	8002888 <HAL_GetTick>
 8003ad8:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003ada:	e01c      	b.n	8003b16 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003adc:	f7fe fed4 	bl	8002888 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b0a      	cmp	r3, #10
 8003ae8:	d915      	bls.n	8003b16 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003af4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003af8:	d10d      	bne.n	8003b16 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afe:	f023 0312 	bic.w	r3, r3, #18
 8003b02:	f043 0210 	orr.w	r2, r3, #16
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e014      	b.n	8003b40 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b24:	d0da      	beq.n	8003adc <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	f023 0303 	bic.w	r3, r3, #3
 8003b2e:	f043 0201 	orr.w	r2, r3, #1
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b09b      	sub	sp, #108	; 0x6c
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d101      	bne.n	8003bba <HAL_ADC_ConfigChannel+0x22>
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	e2ca      	b.n	8004150 <HAL_ADC_ConfigChannel+0x5b8>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f040 82ae 	bne.w	800412e <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	d81c      	bhi.n	8003c14 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685a      	ldr	r2, [r3, #4]
 8003be4:	4613      	mov	r3, r2
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	4413      	add	r3, r2
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	461a      	mov	r2, r3
 8003bee:	231f      	movs	r3, #31
 8003bf0:	4093      	lsls	r3, r2
 8003bf2:	43db      	mvns	r3, r3
 8003bf4:	4019      	ands	r1, r3
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	6818      	ldr	r0, [r3, #0]
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	4413      	add	r3, r2
 8003c04:	005b      	lsls	r3, r3, #1
 8003c06:	fa00 f203 	lsl.w	r2, r0, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	631a      	str	r2, [r3, #48]	; 0x30
 8003c12:	e063      	b.n	8003cdc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	2b09      	cmp	r3, #9
 8003c1a:	d81e      	bhi.n	8003c5a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	685a      	ldr	r2, [r3, #4]
 8003c26:	4613      	mov	r3, r2
 8003c28:	005b      	lsls	r3, r3, #1
 8003c2a:	4413      	add	r3, r2
 8003c2c:	005b      	lsls	r3, r3, #1
 8003c2e:	3b1e      	subs	r3, #30
 8003c30:	221f      	movs	r2, #31
 8003c32:	fa02 f303 	lsl.w	r3, r2, r3
 8003c36:	43db      	mvns	r3, r3
 8003c38:	4019      	ands	r1, r3
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	6818      	ldr	r0, [r3, #0]
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685a      	ldr	r2, [r3, #4]
 8003c42:	4613      	mov	r3, r2
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	4413      	add	r3, r2
 8003c48:	005b      	lsls	r3, r3, #1
 8003c4a:	3b1e      	subs	r3, #30
 8003c4c:	fa00 f203 	lsl.w	r2, r0, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	430a      	orrs	r2, r1
 8003c56:	635a      	str	r2, [r3, #52]	; 0x34
 8003c58:	e040      	b.n	8003cdc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2b0e      	cmp	r3, #14
 8003c60:	d81e      	bhi.n	8003ca0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685a      	ldr	r2, [r3, #4]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	005b      	lsls	r3, r3, #1
 8003c70:	4413      	add	r3, r2
 8003c72:	005b      	lsls	r3, r3, #1
 8003c74:	3b3c      	subs	r3, #60	; 0x3c
 8003c76:	221f      	movs	r2, #31
 8003c78:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7c:	43db      	mvns	r3, r3
 8003c7e:	4019      	ands	r1, r3
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	6818      	ldr	r0, [r3, #0]
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	685a      	ldr	r2, [r3, #4]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	4413      	add	r3, r2
 8003c8e:	005b      	lsls	r3, r3, #1
 8003c90:	3b3c      	subs	r3, #60	; 0x3c
 8003c92:	fa00 f203 	lsl.w	r2, r0, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	639a      	str	r2, [r3, #56]	; 0x38
 8003c9e:	e01d      	b.n	8003cdc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685a      	ldr	r2, [r3, #4]
 8003caa:	4613      	mov	r3, r2
 8003cac:	005b      	lsls	r3, r3, #1
 8003cae:	4413      	add	r3, r2
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	3b5a      	subs	r3, #90	; 0x5a
 8003cb4:	221f      	movs	r2, #31
 8003cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cba:	43db      	mvns	r3, r3
 8003cbc:	4019      	ands	r1, r3
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	6818      	ldr	r0, [r3, #0]
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	685a      	ldr	r2, [r3, #4]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	4413      	add	r3, r2
 8003ccc:	005b      	lsls	r3, r3, #1
 8003cce:	3b5a      	subs	r3, #90	; 0x5a
 8003cd0:	fa00 f203 	lsl.w	r2, r0, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f003 030c 	and.w	r3, r3, #12
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f040 80e5 	bne.w	8003eb6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2b09      	cmp	r3, #9
 8003cf2:	d91c      	bls.n	8003d2e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	6999      	ldr	r1, [r3, #24]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	4413      	add	r3, r2
 8003d04:	3b1e      	subs	r3, #30
 8003d06:	2207      	movs	r2, #7
 8003d08:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0c:	43db      	mvns	r3, r3
 8003d0e:	4019      	ands	r1, r3
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	6898      	ldr	r0, [r3, #8]
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	4413      	add	r3, r2
 8003d1e:	3b1e      	subs	r3, #30
 8003d20:	fa00 f203 	lsl.w	r2, r0, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	619a      	str	r2, [r3, #24]
 8003d2c:	e019      	b.n	8003d62 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	6959      	ldr	r1, [r3, #20]
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	4413      	add	r3, r2
 8003d3e:	2207      	movs	r2, #7
 8003d40:	fa02 f303 	lsl.w	r3, r2, r3
 8003d44:	43db      	mvns	r3, r3
 8003d46:	4019      	ands	r1, r3
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	6898      	ldr	r0, [r3, #8]
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	4613      	mov	r3, r2
 8003d52:	005b      	lsls	r3, r3, #1
 8003d54:	4413      	add	r3, r2
 8003d56:	fa00 f203 	lsl.w	r2, r0, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	695a      	ldr	r2, [r3, #20]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	08db      	lsrs	r3, r3, #3
 8003d6e:	f003 0303 	and.w	r3, r3, #3
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	fa02 f303 	lsl.w	r3, r2, r3
 8003d78:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	2b03      	cmp	r3, #3
 8003d82:	d84f      	bhi.n	8003e24 <HAL_ADC_ConfigChannel+0x28c>
 8003d84:	a201      	add	r2, pc, #4	; (adr r2, 8003d8c <HAL_ADC_ConfigChannel+0x1f4>)
 8003d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8a:	bf00      	nop
 8003d8c:	08003d9d 	.word	0x08003d9d
 8003d90:	08003dbf 	.word	0x08003dbf
 8003d94:	08003de1 	.word	0x08003de1
 8003d98:	08003e03 	.word	0x08003e03
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003da2:	4b9a      	ldr	r3, [pc, #616]	; (800400c <HAL_ADC_ConfigChannel+0x474>)
 8003da4:	4013      	ands	r3, r2
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	6812      	ldr	r2, [r2, #0]
 8003daa:	0691      	lsls	r1, r2, #26
 8003dac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003dae:	430a      	orrs	r2, r1
 8003db0:	431a      	orrs	r2, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003dba:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003dbc:	e07e      	b.n	8003ebc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003dc4:	4b91      	ldr	r3, [pc, #580]	; (800400c <HAL_ADC_ConfigChannel+0x474>)
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	6812      	ldr	r2, [r2, #0]
 8003dcc:	0691      	lsls	r1, r2, #26
 8003dce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003ddc:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003dde:	e06d      	b.n	8003ebc <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003de6:	4b89      	ldr	r3, [pc, #548]	; (800400c <HAL_ADC_ConfigChannel+0x474>)
 8003de8:	4013      	ands	r3, r2
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	6812      	ldr	r2, [r2, #0]
 8003dee:	0691      	lsls	r1, r2, #26
 8003df0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003df2:	430a      	orrs	r2, r1
 8003df4:	431a      	orrs	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003dfe:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003e00:	e05c      	b.n	8003ebc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003e08:	4b80      	ldr	r3, [pc, #512]	; (800400c <HAL_ADC_ConfigChannel+0x474>)
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	683a      	ldr	r2, [r7, #0]
 8003e0e:	6812      	ldr	r2, [r2, #0]
 8003e10:	0691      	lsls	r1, r2, #26
 8003e12:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003e14:	430a      	orrs	r2, r1
 8003e16:	431a      	orrs	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003e20:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003e22:	e04b      	b.n	8003ebc <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e2a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	069b      	lsls	r3, r3, #26
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d107      	bne.n	8003e48 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003e46:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e4e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	069b      	lsls	r3, r3, #26
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d107      	bne.n	8003e6c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003e6a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e72:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	069b      	lsls	r3, r3, #26
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d107      	bne.n	8003e90 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003e8e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	069b      	lsls	r3, r3, #26
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d10a      	bne.n	8003eba <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003eb2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8003eb4:	e001      	b.n	8003eba <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8003eb6:	bf00      	nop
 8003eb8:	e000      	b.n	8003ebc <HAL_ADC_ConfigChannel+0x324>
      break;
 8003eba:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f003 0303 	and.w	r3, r3, #3
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d108      	bne.n	8003edc <HAL_ADC_ConfigChannel+0x344>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d101      	bne.n	8003edc <HAL_ADC_ConfigChannel+0x344>
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e000      	b.n	8003ede <HAL_ADC_ConfigChannel+0x346>
 8003edc:	2300      	movs	r3, #0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	f040 8130 	bne.w	8004144 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d00f      	beq.n	8003f0c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	fa02 f303 	lsl.w	r3, r2, r3
 8003efe:	43da      	mvns	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	400a      	ands	r2, r1
 8003f06:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8003f0a:	e049      	b.n	8003fa0 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	409a      	lsls	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	430a      	orrs	r2, r1
 8003f22:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2b09      	cmp	r3, #9
 8003f2c:	d91c      	bls.n	8003f68 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	6999      	ldr	r1, [r3, #24]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	005b      	lsls	r3, r3, #1
 8003f3c:	4413      	add	r3, r2
 8003f3e:	3b1b      	subs	r3, #27
 8003f40:	2207      	movs	r2, #7
 8003f42:	fa02 f303 	lsl.w	r3, r2, r3
 8003f46:	43db      	mvns	r3, r3
 8003f48:	4019      	ands	r1, r3
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	6898      	ldr	r0, [r3, #8]
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	4613      	mov	r3, r2
 8003f54:	005b      	lsls	r3, r3, #1
 8003f56:	4413      	add	r3, r2
 8003f58:	3b1b      	subs	r3, #27
 8003f5a:	fa00 f203 	lsl.w	r2, r0, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	430a      	orrs	r2, r1
 8003f64:	619a      	str	r2, [r3, #24]
 8003f66:	e01b      	b.n	8003fa0 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6959      	ldr	r1, [r3, #20]
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	1c5a      	adds	r2, r3, #1
 8003f74:	4613      	mov	r3, r2
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	4413      	add	r3, r2
 8003f7a:	2207      	movs	r2, #7
 8003f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f80:	43db      	mvns	r3, r3
 8003f82:	4019      	ands	r1, r3
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	6898      	ldr	r0, [r3, #8]
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	1c5a      	adds	r2, r3, #1
 8003f8e:	4613      	mov	r3, r2
 8003f90:	005b      	lsls	r3, r3, #1
 8003f92:	4413      	add	r3, r2
 8003f94:	fa00 f203 	lsl.w	r2, r0, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fa8:	d004      	beq.n	8003fb4 <HAL_ADC_ConfigChannel+0x41c>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a18      	ldr	r2, [pc, #96]	; (8004010 <HAL_ADC_ConfigChannel+0x478>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d101      	bne.n	8003fb8 <HAL_ADC_ConfigChannel+0x420>
 8003fb4:	4b17      	ldr	r3, [pc, #92]	; (8004014 <HAL_ADC_ConfigChannel+0x47c>)
 8003fb6:	e000      	b.n	8003fba <HAL_ADC_ConfigChannel+0x422>
 8003fb8:	4b17      	ldr	r3, [pc, #92]	; (8004018 <HAL_ADC_ConfigChannel+0x480>)
 8003fba:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2b10      	cmp	r3, #16
 8003fc2:	d105      	bne.n	8003fd0 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003fc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d015      	beq.n	8003ffc <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003fd4:	2b11      	cmp	r3, #17
 8003fd6:	d105      	bne.n	8003fe4 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003fd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00b      	beq.n	8003ffc <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003fe8:	2b12      	cmp	r3, #18
 8003fea:	f040 80ab 	bne.w	8004144 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003fee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f040 80a4 	bne.w	8004144 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004004:	d10a      	bne.n	800401c <HAL_ADC_ConfigChannel+0x484>
 8004006:	4b02      	ldr	r3, [pc, #8]	; (8004010 <HAL_ADC_ConfigChannel+0x478>)
 8004008:	60fb      	str	r3, [r7, #12]
 800400a:	e022      	b.n	8004052 <HAL_ADC_ConfigChannel+0x4ba>
 800400c:	83fff000 	.word	0x83fff000
 8004010:	50000100 	.word	0x50000100
 8004014:	50000300 	.word	0x50000300
 8004018:	50000700 	.word	0x50000700
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a4e      	ldr	r2, [pc, #312]	; (800415c <HAL_ADC_ConfigChannel+0x5c4>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d103      	bne.n	800402e <HAL_ADC_ConfigChannel+0x496>
 8004026:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800402a:	60fb      	str	r3, [r7, #12]
 800402c:	e011      	b.n	8004052 <HAL_ADC_ConfigChannel+0x4ba>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a4b      	ldr	r2, [pc, #300]	; (8004160 <HAL_ADC_ConfigChannel+0x5c8>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d102      	bne.n	800403e <HAL_ADC_ConfigChannel+0x4a6>
 8004038:	4b4a      	ldr	r3, [pc, #296]	; (8004164 <HAL_ADC_ConfigChannel+0x5cc>)
 800403a:	60fb      	str	r3, [r7, #12]
 800403c:	e009      	b.n	8004052 <HAL_ADC_ConfigChannel+0x4ba>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a48      	ldr	r2, [pc, #288]	; (8004164 <HAL_ADC_ConfigChannel+0x5cc>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d102      	bne.n	800404e <HAL_ADC_ConfigChannel+0x4b6>
 8004048:	4b45      	ldr	r3, [pc, #276]	; (8004160 <HAL_ADC_ConfigChannel+0x5c8>)
 800404a:	60fb      	str	r3, [r7, #12]
 800404c:	e001      	b.n	8004052 <HAL_ADC_ConfigChannel+0x4ba>
 800404e:	2300      	movs	r3, #0
 8004050:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f003 0303 	and.w	r3, r3, #3
 800405c:	2b01      	cmp	r3, #1
 800405e:	d108      	bne.n	8004072 <HAL_ADC_ConfigChannel+0x4da>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b01      	cmp	r3, #1
 800406c:	d101      	bne.n	8004072 <HAL_ADC_ConfigChannel+0x4da>
 800406e:	2301      	movs	r3, #1
 8004070:	e000      	b.n	8004074 <HAL_ADC_ConfigChannel+0x4dc>
 8004072:	2300      	movs	r3, #0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d150      	bne.n	800411a <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004078:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800407a:	2b00      	cmp	r3, #0
 800407c:	d010      	beq.n	80040a0 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f003 0303 	and.w	r3, r3, #3
 8004086:	2b01      	cmp	r3, #1
 8004088:	d107      	bne.n	800409a <HAL_ADC_ConfigChannel+0x502>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b01      	cmp	r3, #1
 8004094:	d101      	bne.n	800409a <HAL_ADC_ConfigChannel+0x502>
 8004096:	2301      	movs	r3, #1
 8004098:	e000      	b.n	800409c <HAL_ADC_ConfigChannel+0x504>
 800409a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800409c:	2b00      	cmp	r3, #0
 800409e:	d13c      	bne.n	800411a <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2b10      	cmp	r3, #16
 80040a6:	d11d      	bne.n	80040e4 <HAL_ADC_ConfigChannel+0x54c>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040b0:	d118      	bne.n	80040e4 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80040b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80040ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040bc:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80040be:	4b2a      	ldr	r3, [pc, #168]	; (8004168 <HAL_ADC_ConfigChannel+0x5d0>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a2a      	ldr	r2, [pc, #168]	; (800416c <HAL_ADC_ConfigChannel+0x5d4>)
 80040c4:	fba2 2303 	umull	r2, r3, r2, r3
 80040c8:	0c9a      	lsrs	r2, r3, #18
 80040ca:	4613      	mov	r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	4413      	add	r3, r2
 80040d0:	005b      	lsls	r3, r3, #1
 80040d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80040d4:	e002      	b.n	80040dc <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	3b01      	subs	r3, #1
 80040da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1f9      	bne.n	80040d6 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80040e2:	e02e      	b.n	8004142 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2b11      	cmp	r3, #17
 80040ea:	d10b      	bne.n	8004104 <HAL_ADC_ConfigChannel+0x56c>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040f4:	d106      	bne.n	8004104 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80040f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80040fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004100:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004102:	e01e      	b.n	8004142 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2b12      	cmp	r3, #18
 800410a:	d11a      	bne.n	8004142 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800410c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004114:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004116:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004118:	e013      	b.n	8004142 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411e:	f043 0220 	orr.w	r2, r3, #32
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800412c:	e00a      	b.n	8004144 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004132:	f043 0220 	orr.w	r2, r3, #32
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004140:	e000      	b.n	8004144 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004142:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800414c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004150:	4618      	mov	r0, r3
 8004152:	376c      	adds	r7, #108	; 0x6c
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr
 800415c:	50000100 	.word	0x50000100
 8004160:	50000400 	.word	0x50000400
 8004164:	50000500 	.word	0x50000500
 8004168:	2000000c 	.word	0x2000000c
 800416c:	431bde83 	.word	0x431bde83

08004170 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8004170:	b480      	push	{r7}
 8004172:	b099      	sub	sp, #100	; 0x64
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800417a:	2300      	movs	r3, #0
 800417c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004188:	d102      	bne.n	8004190 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800418a:	4b6d      	ldr	r3, [pc, #436]	; (8004340 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800418c:	60bb      	str	r3, [r7, #8]
 800418e:	e01a      	b.n	80041c6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a6a      	ldr	r2, [pc, #424]	; (8004340 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d103      	bne.n	80041a2 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800419a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800419e:	60bb      	str	r3, [r7, #8]
 80041a0:	e011      	b.n	80041c6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a67      	ldr	r2, [pc, #412]	; (8004344 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d102      	bne.n	80041b2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80041ac:	4b66      	ldr	r3, [pc, #408]	; (8004348 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80041ae:	60bb      	str	r3, [r7, #8]
 80041b0:	e009      	b.n	80041c6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a64      	ldr	r2, [pc, #400]	; (8004348 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d102      	bne.n	80041c2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80041bc:	4b61      	ldr	r3, [pc, #388]	; (8004344 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80041be:	60bb      	str	r3, [r7, #8]
 80041c0:	e001      	b.n	80041c6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80041c2:	2300      	movs	r3, #0
 80041c4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d101      	bne.n	80041d0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e0b0      	b.n	8004332 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d101      	bne.n	80041de <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80041da:	2302      	movs	r3, #2
 80041dc:	e0a9      	b.n	8004332 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f003 0304 	and.w	r3, r3, #4
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	f040 808d 	bne.w	8004310 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f003 0304 	and.w	r3, r3, #4
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f040 8086 	bne.w	8004310 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800420c:	d004      	beq.n	8004218 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a4b      	ldr	r2, [pc, #300]	; (8004340 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d101      	bne.n	800421c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004218:	4b4c      	ldr	r3, [pc, #304]	; (800434c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800421a:	e000      	b.n	800421e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800421c:	4b4c      	ldr	r3, [pc, #304]	; (8004350 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800421e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d040      	beq.n	80042aa <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004228:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	6859      	ldr	r1, [r3, #4]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800423a:	035b      	lsls	r3, r3, #13
 800423c:	430b      	orrs	r3, r1
 800423e:	431a      	orrs	r2, r3
 8004240:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004242:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f003 0303 	and.w	r3, r3, #3
 800424e:	2b01      	cmp	r3, #1
 8004250:	d108      	bne.n	8004264 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0301 	and.w	r3, r3, #1
 800425c:	2b01      	cmp	r3, #1
 800425e:	d101      	bne.n	8004264 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8004260:	2301      	movs	r3, #1
 8004262:	e000      	b.n	8004266 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8004264:	2300      	movs	r3, #0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d15c      	bne.n	8004324 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f003 0303 	and.w	r3, r3, #3
 8004272:	2b01      	cmp	r3, #1
 8004274:	d107      	bne.n	8004286 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b01      	cmp	r3, #1
 8004280:	d101      	bne.n	8004286 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8004282:	2301      	movs	r3, #1
 8004284:	e000      	b.n	8004288 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8004286:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004288:	2b00      	cmp	r3, #0
 800428a:	d14b      	bne.n	8004324 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800428c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004294:	f023 030f 	bic.w	r3, r3, #15
 8004298:	683a      	ldr	r2, [r7, #0]
 800429a:	6811      	ldr	r1, [r2, #0]
 800429c:	683a      	ldr	r2, [r7, #0]
 800429e:	6892      	ldr	r2, [r2, #8]
 80042a0:	430a      	orrs	r2, r1
 80042a2:	431a      	orrs	r2, r3
 80042a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042a6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80042a8:	e03c      	b.n	8004324 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80042aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042b4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f003 0303 	and.w	r3, r3, #3
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d108      	bne.n	80042d6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d101      	bne.n	80042d6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80042d2:	2301      	movs	r3, #1
 80042d4:	e000      	b.n	80042d8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80042d6:	2300      	movs	r3, #0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d123      	bne.n	8004324 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f003 0303 	and.w	r3, r3, #3
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d107      	bne.n	80042f8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0301 	and.w	r3, r3, #1
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d101      	bne.n	80042f8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80042f4:	2301      	movs	r3, #1
 80042f6:	e000      	b.n	80042fa <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80042f8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d112      	bne.n	8004324 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80042fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004306:	f023 030f 	bic.w	r3, r3, #15
 800430a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800430c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800430e:	e009      	b.n	8004324 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004314:	f043 0220 	orr.w	r2, r3, #32
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004322:	e000      	b.n	8004326 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004324:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800432e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8004332:	4618      	mov	r0, r3
 8004334:	3764      	adds	r7, #100	; 0x64
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	50000100 	.word	0x50000100
 8004344:	50000400 	.word	0x50000400
 8004348:	50000500 	.word	0x50000500
 800434c:	50000300 	.word	0x50000300
 8004350:	50000700 	.word	0x50000700

08004354 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004360:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800436a:	2b00      	cmp	r3, #0
 800436c:	d126      	bne.n	80043bc <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004372:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004384:	2b00      	cmp	r3, #0
 8004386:	d115      	bne.n	80043b4 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800438c:	2b00      	cmp	r3, #0
 800438e:	d111      	bne.n	80043b4 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004394:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d105      	bne.n	80043b4 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ac:	f043 0201 	orr.w	r2, r3, #1
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f7fd fd33 	bl	8001e20 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80043ba:	e004      	b.n	80043c6 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	4798      	blx	r3
}
 80043c6:	bf00      	nop
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80043ce:	b580      	push	{r7, lr}
 80043d0:	b084      	sub	sp, #16
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043da:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	f7fe fa83 	bl	80028e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80043e2:	bf00      	nop
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b084      	sub	sp, #16
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004408:	f043 0204 	orr.w	r2, r3, #4
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f7fe fa7d 	bl	8002910 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004416:	bf00      	nop
 8004418:	3710      	adds	r7, #16
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
	...

08004420 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004428:	2300      	movs	r3, #0
 800442a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f003 0303 	and.w	r3, r3, #3
 8004436:	2b01      	cmp	r3, #1
 8004438:	d108      	bne.n	800444c <ADC_Enable+0x2c>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0301 	and.w	r3, r3, #1
 8004444:	2b01      	cmp	r3, #1
 8004446:	d101      	bne.n	800444c <ADC_Enable+0x2c>
 8004448:	2301      	movs	r3, #1
 800444a:	e000      	b.n	800444e <ADC_Enable+0x2e>
 800444c:	2300      	movs	r3, #0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d143      	bne.n	80044da <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	689a      	ldr	r2, [r3, #8]
 8004458:	4b22      	ldr	r3, [pc, #136]	; (80044e4 <ADC_Enable+0xc4>)
 800445a:	4013      	ands	r3, r2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d00d      	beq.n	800447c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004464:	f043 0210 	orr.w	r2, r3, #16
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004470:	f043 0201 	orr.w	r2, r3, #1
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e02f      	b.n	80044dc <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	689a      	ldr	r2, [r3, #8]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f042 0201 	orr.w	r2, r2, #1
 800448a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800448c:	f7fe f9fc 	bl	8002888 <HAL_GetTick>
 8004490:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004492:	e01b      	b.n	80044cc <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004494:	f7fe f9f8 	bl	8002888 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d914      	bls.n	80044cc <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0301 	and.w	r3, r3, #1
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d00d      	beq.n	80044cc <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b4:	f043 0210 	orr.w	r2, r3, #16
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c0:	f043 0201 	orr.w	r2, r3, #1
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e007      	b.n	80044dc <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d1dc      	bne.n	8004494 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	8000003f 	.word	0x8000003f

080044e8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044f0:	2300      	movs	r3, #0
 80044f2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f003 0303 	and.w	r3, r3, #3
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d108      	bne.n	8004514 <ADC_Disable+0x2c>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b01      	cmp	r3, #1
 800450e:	d101      	bne.n	8004514 <ADC_Disable+0x2c>
 8004510:	2301      	movs	r3, #1
 8004512:	e000      	b.n	8004516 <ADC_Disable+0x2e>
 8004514:	2300      	movs	r3, #0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d047      	beq.n	80045aa <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f003 030d 	and.w	r3, r3, #13
 8004524:	2b01      	cmp	r3, #1
 8004526:	d10f      	bne.n	8004548 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	689a      	ldr	r2, [r3, #8]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f042 0202 	orr.w	r2, r2, #2
 8004536:	609a      	str	r2, [r3, #8]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2203      	movs	r2, #3
 800453e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8004540:	f7fe f9a2 	bl	8002888 <HAL_GetTick>
 8004544:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004546:	e029      	b.n	800459c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454c:	f043 0210 	orr.w	r2, r3, #16
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004558:	f043 0201 	orr.w	r2, r3, #1
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e023      	b.n	80045ac <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004564:	f7fe f990 	bl	8002888 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d914      	bls.n	800459c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f003 0301 	and.w	r3, r3, #1
 800457c:	2b01      	cmp	r3, #1
 800457e:	d10d      	bne.n	800459c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004584:	f043 0210 	orr.w	r2, r3, #16
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004590:	f043 0201 	orr.w	r2, r3, #1
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e007      	b.n	80045ac <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d0dc      	beq.n	8004564 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 80045be:	2300      	movs	r3, #0
 80045c0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80045c2:	2300      	movs	r3, #0
 80045c4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80045c6:	2300      	movs	r3, #0
 80045c8:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	f003 030c 	and.w	r3, r3, #12
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	f000 809b 	beq.w	8004710 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045e8:	d12a      	bne.n	8004640 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d126      	bne.n	8004640 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d122      	bne.n	8004640 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 80045fa:	230c      	movs	r3, #12
 80045fc:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80045fe:	e014      	b.n	800462a <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	4a46      	ldr	r2, [pc, #280]	; (800471c <ADC_ConversionStop+0x168>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d90d      	bls.n	8004624 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460c:	f043 0210 	orr.w	r2, r3, #16
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004618:	f043 0201 	orr.w	r2, r3, #1
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e076      	b.n	8004712 <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	3301      	adds	r3, #1
 8004628:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004634:	2b40      	cmp	r3, #64	; 0x40
 8004636:	d1e3      	bne.n	8004600 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2240      	movs	r2, #64	; 0x40
 800463e:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	2b60      	cmp	r3, #96	; 0x60
 8004644:	d015      	beq.n	8004672 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f003 0304 	and.w	r3, r3, #4
 8004650:	2b04      	cmp	r3, #4
 8004652:	d10e      	bne.n	8004672 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800465e:	2b00      	cmp	r3, #0
 8004660:	d107      	bne.n	8004672 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	689a      	ldr	r2, [r3, #8]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f042 0210 	orr.w	r2, r2, #16
 8004670:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	2b0c      	cmp	r3, #12
 8004676:	d015      	beq.n	80046a4 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f003 0308 	and.w	r3, r3, #8
 8004682:	2b08      	cmp	r3, #8
 8004684:	d10e      	bne.n	80046a4 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8004690:	2b00      	cmp	r3, #0
 8004692:	d107      	bne.n	80046a4 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	689a      	ldr	r2, [r3, #8]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f042 0220 	orr.w	r2, r2, #32
 80046a2:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	2b60      	cmp	r3, #96	; 0x60
 80046a8:	d005      	beq.n	80046b6 <ADC_ConversionStop+0x102>
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	2b6c      	cmp	r3, #108	; 0x6c
 80046ae:	d105      	bne.n	80046bc <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80046b0:	230c      	movs	r3, #12
 80046b2:	617b      	str	r3, [r7, #20]
        break;
 80046b4:	e005      	b.n	80046c2 <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80046b6:	2308      	movs	r3, #8
 80046b8:	617b      	str	r3, [r7, #20]
        break;
 80046ba:	e002      	b.n	80046c2 <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80046bc:	2304      	movs	r3, #4
 80046be:	617b      	str	r3, [r7, #20]
        break;
 80046c0:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80046c2:	f7fe f8e1 	bl	8002888 <HAL_GetTick>
 80046c6:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80046c8:	e01b      	b.n	8004702 <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80046ca:	f7fe f8dd 	bl	8002888 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	2b0b      	cmp	r3, #11
 80046d6:	d914      	bls.n	8004702 <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689a      	ldr	r2, [r3, #8]
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	4013      	ands	r3, r2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00d      	beq.n	8004702 <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	f043 0210 	orr.w	r2, r3, #16
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f6:	f043 0201 	orr.w	r2, r3, #1
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e007      	b.n	8004712 <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	689a      	ldr	r2, [r3, #8]
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	4013      	ands	r3, r2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1dc      	bne.n	80046ca <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3718      	adds	r7, #24
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	000993ff 	.word	0x000993ff

08004720 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f003 0307 	and.w	r3, r3, #7
 800472e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004730:	4b0c      	ldr	r3, [pc, #48]	; (8004764 <__NVIC_SetPriorityGrouping+0x44>)
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004736:	68ba      	ldr	r2, [r7, #8]
 8004738:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800473c:	4013      	ands	r3, r2
 800473e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004748:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800474c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004750:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004752:	4a04      	ldr	r2, [pc, #16]	; (8004764 <__NVIC_SetPriorityGrouping+0x44>)
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	60d3      	str	r3, [r2, #12]
}
 8004758:	bf00      	nop
 800475a:	3714      	adds	r7, #20
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr
 8004764:	e000ed00 	.word	0xe000ed00

08004768 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004768:	b480      	push	{r7}
 800476a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800476c:	4b04      	ldr	r3, [pc, #16]	; (8004780 <__NVIC_GetPriorityGrouping+0x18>)
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	0a1b      	lsrs	r3, r3, #8
 8004772:	f003 0307 	and.w	r3, r3, #7
}
 8004776:	4618      	mov	r0, r3
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr
 8004780:	e000ed00 	.word	0xe000ed00

08004784 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	4603      	mov	r3, r0
 800478c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800478e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004792:	2b00      	cmp	r3, #0
 8004794:	db0b      	blt.n	80047ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004796:	79fb      	ldrb	r3, [r7, #7]
 8004798:	f003 021f 	and.w	r2, r3, #31
 800479c:	4907      	ldr	r1, [pc, #28]	; (80047bc <__NVIC_EnableIRQ+0x38>)
 800479e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047a2:	095b      	lsrs	r3, r3, #5
 80047a4:	2001      	movs	r0, #1
 80047a6:	fa00 f202 	lsl.w	r2, r0, r2
 80047aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80047ae:	bf00      	nop
 80047b0:	370c      	adds	r7, #12
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	e000e100 	.word	0xe000e100

080047c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	4603      	mov	r3, r0
 80047c8:	6039      	str	r1, [r7, #0]
 80047ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	db0a      	blt.n	80047ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	b2da      	uxtb	r2, r3
 80047d8:	490c      	ldr	r1, [pc, #48]	; (800480c <__NVIC_SetPriority+0x4c>)
 80047da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047de:	0112      	lsls	r2, r2, #4
 80047e0:	b2d2      	uxtb	r2, r2
 80047e2:	440b      	add	r3, r1
 80047e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047e8:	e00a      	b.n	8004800 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	b2da      	uxtb	r2, r3
 80047ee:	4908      	ldr	r1, [pc, #32]	; (8004810 <__NVIC_SetPriority+0x50>)
 80047f0:	79fb      	ldrb	r3, [r7, #7]
 80047f2:	f003 030f 	and.w	r3, r3, #15
 80047f6:	3b04      	subs	r3, #4
 80047f8:	0112      	lsls	r2, r2, #4
 80047fa:	b2d2      	uxtb	r2, r2
 80047fc:	440b      	add	r3, r1
 80047fe:	761a      	strb	r2, [r3, #24]
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr
 800480c:	e000e100 	.word	0xe000e100
 8004810:	e000ed00 	.word	0xe000ed00

08004814 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004814:	b480      	push	{r7}
 8004816:	b089      	sub	sp, #36	; 0x24
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f003 0307 	and.w	r3, r3, #7
 8004826:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	f1c3 0307 	rsb	r3, r3, #7
 800482e:	2b04      	cmp	r3, #4
 8004830:	bf28      	it	cs
 8004832:	2304      	movcs	r3, #4
 8004834:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	3304      	adds	r3, #4
 800483a:	2b06      	cmp	r3, #6
 800483c:	d902      	bls.n	8004844 <NVIC_EncodePriority+0x30>
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	3b03      	subs	r3, #3
 8004842:	e000      	b.n	8004846 <NVIC_EncodePriority+0x32>
 8004844:	2300      	movs	r3, #0
 8004846:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004848:	f04f 32ff 	mov.w	r2, #4294967295
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	fa02 f303 	lsl.w	r3, r2, r3
 8004852:	43da      	mvns	r2, r3
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	401a      	ands	r2, r3
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800485c:	f04f 31ff 	mov.w	r1, #4294967295
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	fa01 f303 	lsl.w	r3, r1, r3
 8004866:	43d9      	mvns	r1, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800486c:	4313      	orrs	r3, r2
         );
}
 800486e:	4618      	mov	r0, r3
 8004870:	3724      	adds	r7, #36	; 0x24
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
	...

0800487c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	3b01      	subs	r3, #1
 8004888:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800488c:	d301      	bcc.n	8004892 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800488e:	2301      	movs	r3, #1
 8004890:	e00f      	b.n	80048b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004892:	4a0a      	ldr	r2, [pc, #40]	; (80048bc <SysTick_Config+0x40>)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	3b01      	subs	r3, #1
 8004898:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800489a:	210f      	movs	r1, #15
 800489c:	f04f 30ff 	mov.w	r0, #4294967295
 80048a0:	f7ff ff8e 	bl	80047c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048a4:	4b05      	ldr	r3, [pc, #20]	; (80048bc <SysTick_Config+0x40>)
 80048a6:	2200      	movs	r2, #0
 80048a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048aa:	4b04      	ldr	r3, [pc, #16]	; (80048bc <SysTick_Config+0x40>)
 80048ac:	2207      	movs	r2, #7
 80048ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3708      	adds	r7, #8
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	e000e010 	.word	0xe000e010

080048c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f7ff ff29 	bl	8004720 <__NVIC_SetPriorityGrouping>
}
 80048ce:	bf00      	nop
 80048d0:	3708      	adds	r7, #8
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}

080048d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048d6:	b580      	push	{r7, lr}
 80048d8:	b086      	sub	sp, #24
 80048da:	af00      	add	r7, sp, #0
 80048dc:	4603      	mov	r3, r0
 80048de:	60b9      	str	r1, [r7, #8]
 80048e0:	607a      	str	r2, [r7, #4]
 80048e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80048e4:	2300      	movs	r3, #0
 80048e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80048e8:	f7ff ff3e 	bl	8004768 <__NVIC_GetPriorityGrouping>
 80048ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	68b9      	ldr	r1, [r7, #8]
 80048f2:	6978      	ldr	r0, [r7, #20]
 80048f4:	f7ff ff8e 	bl	8004814 <NVIC_EncodePriority>
 80048f8:	4602      	mov	r2, r0
 80048fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048fe:	4611      	mov	r1, r2
 8004900:	4618      	mov	r0, r3
 8004902:	f7ff ff5d 	bl	80047c0 <__NVIC_SetPriority>
}
 8004906:	bf00      	nop
 8004908:	3718      	adds	r7, #24
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800490e:	b580      	push	{r7, lr}
 8004910:	b082      	sub	sp, #8
 8004912:	af00      	add	r7, sp, #0
 8004914:	4603      	mov	r3, r0
 8004916:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800491c:	4618      	mov	r0, r3
 800491e:	f7ff ff31 	bl	8004784 <__NVIC_EnableIRQ>
}
 8004922:	bf00      	nop
 8004924:	3708      	adds	r7, #8
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b082      	sub	sp, #8
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f7ff ffa2 	bl	800487c <SysTick_Config>
 8004938:	4603      	mov	r3, r0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3708      	adds	r7, #8
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}

08004942 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8004942:	b580      	push	{r7, lr}
 8004944:	b084      	sub	sp, #16
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800494a:	2300      	movs	r3, #0
 800494c:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d101      	bne.n	8004958 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e037      	b.n	80049c8 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2202      	movs	r2, #2
 800495c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800496e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004972:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800497c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004988:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004994:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	69db      	ldr	r3, [r3, #28]
 800499a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	4313      	orrs	r3, r2
 80049a0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 f9c4 	bl	8004d38 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2201      	movs	r2, #1
 80049ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80049c6:	2300      	movs	r3, #0
}  
 80049c8:	4618      	mov	r0, r3
 80049ca:	3710      	adds	r7, #16
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b086      	sub	sp, #24
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	607a      	str	r2, [r7, #4]
 80049dc:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80049de:	2300      	movs	r3, #0
 80049e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d101      	bne.n	80049f0 <HAL_DMA_Start_IT+0x20>
 80049ec:	2302      	movs	r3, #2
 80049ee:	e04a      	b.n	8004a86 <HAL_DMA_Start_IT+0xb6>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d13a      	bne.n	8004a78 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2202      	movs	r2, #2
 8004a06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f022 0201 	bic.w	r2, r2, #1
 8004a1e:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	68b9      	ldr	r1, [r7, #8]
 8004a26:	68f8      	ldr	r0, [r7, #12]
 8004a28:	f000 f958 	bl	8004cdc <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d008      	beq.n	8004a46 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f042 020e 	orr.w	r2, r2, #14
 8004a42:	601a      	str	r2, [r3, #0]
 8004a44:	e00f      	b.n	8004a66 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f042 020a 	orr.w	r2, r2, #10
 8004a54:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 0204 	bic.w	r2, r2, #4
 8004a64:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f042 0201 	orr.w	r2, r2, #1
 8004a74:	601a      	str	r2, [r3, #0]
 8004a76:	e005      	b.n	8004a84 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8004a80:	2302      	movs	r3, #2
 8004a82:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8004a84:	7dfb      	ldrb	r3, [r7, #23]
} 
 8004a86:	4618      	mov	r0, r3
 8004a88:	3718      	adds	r7, #24
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b083      	sub	sp, #12
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d008      	beq.n	8004ab2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2204      	movs	r2, #4
 8004aa4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e020      	b.n	8004af4 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f022 020e 	bic.w	r2, r2, #14
 8004ac0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f022 0201 	bic.w	r2, r2, #1
 8004ad0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ada:	2101      	movs	r1, #1
 8004adc:	fa01 f202 	lsl.w	r2, r1, r2
 8004ae0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d005      	beq.n	8004b22 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2204      	movs	r2, #4
 8004b1a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	73fb      	strb	r3, [r7, #15]
 8004b20:	e027      	b.n	8004b72 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f022 020e 	bic.w	r2, r2, #14
 8004b30:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f022 0201 	bic.w	r2, r2, #1
 8004b40:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b4a:	2101      	movs	r1, #1
 8004b4c:	fa01 f202 	lsl.w	r2, r1, r2
 8004b50:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2201      	movs	r2, #1
 8004b56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d003      	beq.n	8004b72 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	4798      	blx	r3
    } 
  }
  return status;
 8004b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3710      	adds	r7, #16
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b98:	2204      	movs	r2, #4
 8004b9a:	409a      	lsls	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d024      	beq.n	8004bee <HAL_DMA_IRQHandler+0x72>
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	f003 0304 	and.w	r3, r3, #4
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d01f      	beq.n	8004bee <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0320 	and.w	r3, r3, #32
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d107      	bne.n	8004bcc <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f022 0204 	bic.w	r2, r2, #4
 8004bca:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd4:	2104      	movs	r1, #4
 8004bd6:	fa01 f202 	lsl.w	r2, r1, r2
 8004bda:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d06a      	beq.n	8004cba <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8004bec:	e065      	b.n	8004cba <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	409a      	lsls	r2, r3
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d02c      	beq.n	8004c58 <HAL_DMA_IRQHandler+0xdc>
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	f003 0302 	and.w	r3, r3, #2
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d027      	beq.n	8004c58 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0320 	and.w	r3, r3, #32
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10b      	bne.n	8004c2e <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f022 020a 	bic.w	r2, r2, #10
 8004c24:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c36:	2102      	movs	r1, #2
 8004c38:	fa01 f202 	lsl.w	r2, r1, r2
 8004c3c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d035      	beq.n	8004cba <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8004c56:	e030      	b.n	8004cba <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5c:	2208      	movs	r2, #8
 8004c5e:	409a      	lsls	r2, r3
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	4013      	ands	r3, r2
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d028      	beq.n	8004cba <HAL_DMA_IRQHandler+0x13e>
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	f003 0308 	and.w	r3, r3, #8
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d023      	beq.n	8004cba <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f022 020e 	bic.w	r2, r2, #14
 8004c80:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c8a:	2101      	movs	r1, #1
 8004c8c:	fa01 f202 	lsl.w	r2, r1, r2
 8004c90:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2201      	movs	r2, #1
 8004c96:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d004      	beq.n	8004cba <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	4798      	blx	r3
    }
  }
}  
 8004cb8:	e7ff      	b.n	8004cba <HAL_DMA_IRQHandler+0x13e>
 8004cba:	bf00      	nop
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b083      	sub	sp, #12
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
 8004ce8:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf2:	2101      	movs	r1, #1
 8004cf4:	fa01 f202 	lsl.w	r2, r1, r2
 8004cf8:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	683a      	ldr	r2, [r7, #0]
 8004d00:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	2b10      	cmp	r3, #16
 8004d08:	d108      	bne.n	8004d1c <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004d1a:	e007      	b.n	8004d2c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68ba      	ldr	r2, [r7, #8]
 8004d22:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	60da      	str	r2, [r3, #12]
}
 8004d2c:	bf00      	nop
 8004d2e:	3714      	adds	r7, #20
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	461a      	mov	r2, r3
 8004d46:	4b14      	ldr	r3, [pc, #80]	; (8004d98 <DMA_CalcBaseAndBitshift+0x60>)
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d80f      	bhi.n	8004d6c <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	461a      	mov	r2, r3
 8004d52:	4b12      	ldr	r3, [pc, #72]	; (8004d9c <DMA_CalcBaseAndBitshift+0x64>)
 8004d54:	4413      	add	r3, r2
 8004d56:	4a12      	ldr	r2, [pc, #72]	; (8004da0 <DMA_CalcBaseAndBitshift+0x68>)
 8004d58:	fba2 2303 	umull	r2, r3, r2, r3
 8004d5c:	091b      	lsrs	r3, r3, #4
 8004d5e:	009a      	lsls	r2, r3, #2
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a0f      	ldr	r2, [pc, #60]	; (8004da4 <DMA_CalcBaseAndBitshift+0x6c>)
 8004d68:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8004d6a:	e00e      	b.n	8004d8a <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	461a      	mov	r2, r3
 8004d72:	4b0d      	ldr	r3, [pc, #52]	; (8004da8 <DMA_CalcBaseAndBitshift+0x70>)
 8004d74:	4413      	add	r3, r2
 8004d76:	4a0a      	ldr	r2, [pc, #40]	; (8004da0 <DMA_CalcBaseAndBitshift+0x68>)
 8004d78:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7c:	091b      	lsrs	r3, r3, #4
 8004d7e:	009a      	lsls	r2, r3, #2
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a09      	ldr	r2, [pc, #36]	; (8004dac <DMA_CalcBaseAndBitshift+0x74>)
 8004d88:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004d8a:	bf00      	nop
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	40020407 	.word	0x40020407
 8004d9c:	bffdfff8 	.word	0xbffdfff8
 8004da0:	cccccccd 	.word	0xcccccccd
 8004da4:	40020000 	.word	0x40020000
 8004da8:	bffdfbf8 	.word	0xbffdfbf8
 8004dac:	40020400 	.word	0x40020400

08004db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b087      	sub	sp, #28
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004dbe:	e154      	b.n	800506a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	2101      	movs	r1, #1
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dcc:	4013      	ands	r3, r2
 8004dce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f000 8146 	beq.w	8005064 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f003 0303 	and.w	r3, r3, #3
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d005      	beq.n	8004df0 <HAL_GPIO_Init+0x40>
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f003 0303 	and.w	r3, r3, #3
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d130      	bne.n	8004e52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	005b      	lsls	r3, r3, #1
 8004dfa:	2203      	movs	r2, #3
 8004dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004e00:	43db      	mvns	r3, r3
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	4013      	ands	r3, r2
 8004e06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	68da      	ldr	r2, [r3, #12]
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	005b      	lsls	r3, r3, #1
 8004e10:	fa02 f303 	lsl.w	r3, r2, r3
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e26:	2201      	movs	r2, #1
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2e:	43db      	mvns	r3, r3
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	4013      	ands	r3, r2
 8004e34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	091b      	lsrs	r3, r3, #4
 8004e3c:	f003 0201 	and.w	r2, r3, #1
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	fa02 f303 	lsl.w	r3, r2, r3
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	693a      	ldr	r2, [r7, #16]
 8004e50:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f003 0303 	and.w	r3, r3, #3
 8004e5a:	2b03      	cmp	r3, #3
 8004e5c:	d017      	beq.n	8004e8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	005b      	lsls	r3, r3, #1
 8004e68:	2203      	movs	r2, #3
 8004e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6e:	43db      	mvns	r3, r3
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	4013      	ands	r3, r2
 8004e74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	689a      	ldr	r2, [r3, #8]
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	005b      	lsls	r3, r3, #1
 8004e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f003 0303 	and.w	r3, r3, #3
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d123      	bne.n	8004ee2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	08da      	lsrs	r2, r3, #3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	3208      	adds	r2, #8
 8004ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	f003 0307 	and.w	r3, r3, #7
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	220f      	movs	r2, #15
 8004eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb6:	43db      	mvns	r3, r3
 8004eb8:	693a      	ldr	r2, [r7, #16]
 8004eba:	4013      	ands	r3, r2
 8004ebc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	691a      	ldr	r2, [r3, #16]
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	f003 0307 	and.w	r3, r3, #7
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	fa02 f303 	lsl.w	r3, r2, r3
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	08da      	lsrs	r2, r3, #3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	3208      	adds	r2, #8
 8004edc:	6939      	ldr	r1, [r7, #16]
 8004ede:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	005b      	lsls	r3, r3, #1
 8004eec:	2203      	movs	r2, #3
 8004eee:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef2:	43db      	mvns	r3, r3
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f003 0203 	and.w	r2, r3, #3
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	005b      	lsls	r3, r3, #1
 8004f06:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0a:	693a      	ldr	r2, [r7, #16]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	693a      	ldr	r2, [r7, #16]
 8004f14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	f000 80a0 	beq.w	8005064 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f24:	4b58      	ldr	r3, [pc, #352]	; (8005088 <HAL_GPIO_Init+0x2d8>)
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	4a57      	ldr	r2, [pc, #348]	; (8005088 <HAL_GPIO_Init+0x2d8>)
 8004f2a:	f043 0301 	orr.w	r3, r3, #1
 8004f2e:	6193      	str	r3, [r2, #24]
 8004f30:	4b55      	ldr	r3, [pc, #340]	; (8005088 <HAL_GPIO_Init+0x2d8>)
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	60bb      	str	r3, [r7, #8]
 8004f3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004f3c:	4a53      	ldr	r2, [pc, #332]	; (800508c <HAL_GPIO_Init+0x2dc>)
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	089b      	lsrs	r3, r3, #2
 8004f42:	3302      	adds	r3, #2
 8004f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	f003 0303 	and.w	r3, r3, #3
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	220f      	movs	r2, #15
 8004f54:	fa02 f303 	lsl.w	r3, r2, r3
 8004f58:	43db      	mvns	r3, r3
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004f66:	d019      	beq.n	8004f9c <HAL_GPIO_Init+0x1ec>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a49      	ldr	r2, [pc, #292]	; (8005090 <HAL_GPIO_Init+0x2e0>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d013      	beq.n	8004f98 <HAL_GPIO_Init+0x1e8>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a48      	ldr	r2, [pc, #288]	; (8005094 <HAL_GPIO_Init+0x2e4>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d00d      	beq.n	8004f94 <HAL_GPIO_Init+0x1e4>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a47      	ldr	r2, [pc, #284]	; (8005098 <HAL_GPIO_Init+0x2e8>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d007      	beq.n	8004f90 <HAL_GPIO_Init+0x1e0>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a46      	ldr	r2, [pc, #280]	; (800509c <HAL_GPIO_Init+0x2ec>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d101      	bne.n	8004f8c <HAL_GPIO_Init+0x1dc>
 8004f88:	2304      	movs	r3, #4
 8004f8a:	e008      	b.n	8004f9e <HAL_GPIO_Init+0x1ee>
 8004f8c:	2305      	movs	r3, #5
 8004f8e:	e006      	b.n	8004f9e <HAL_GPIO_Init+0x1ee>
 8004f90:	2303      	movs	r3, #3
 8004f92:	e004      	b.n	8004f9e <HAL_GPIO_Init+0x1ee>
 8004f94:	2302      	movs	r3, #2
 8004f96:	e002      	b.n	8004f9e <HAL_GPIO_Init+0x1ee>
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e000      	b.n	8004f9e <HAL_GPIO_Init+0x1ee>
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	697a      	ldr	r2, [r7, #20]
 8004fa0:	f002 0203 	and.w	r2, r2, #3
 8004fa4:	0092      	lsls	r2, r2, #2
 8004fa6:	4093      	lsls	r3, r2
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004fae:	4937      	ldr	r1, [pc, #220]	; (800508c <HAL_GPIO_Init+0x2dc>)
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	089b      	lsrs	r3, r3, #2
 8004fb4:	3302      	adds	r3, #2
 8004fb6:	693a      	ldr	r2, [r7, #16]
 8004fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004fbc:	4b38      	ldr	r3, [pc, #224]	; (80050a0 <HAL_GPIO_Init+0x2f0>)
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	43db      	mvns	r3, r3
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	4013      	ands	r3, r2
 8004fca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d003      	beq.n	8004fe0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004fd8:	693a      	ldr	r2, [r7, #16]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004fe0:	4a2f      	ldr	r2, [pc, #188]	; (80050a0 <HAL_GPIO_Init+0x2f0>)
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004fe6:	4b2e      	ldr	r3, [pc, #184]	; (80050a0 <HAL_GPIO_Init+0x2f0>)
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	43db      	mvns	r3, r3
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d003      	beq.n	800500a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8005002:	693a      	ldr	r2, [r7, #16]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	4313      	orrs	r3, r2
 8005008:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800500a:	4a25      	ldr	r2, [pc, #148]	; (80050a0 <HAL_GPIO_Init+0x2f0>)
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005010:	4b23      	ldr	r3, [pc, #140]	; (80050a0 <HAL_GPIO_Init+0x2f0>)
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	43db      	mvns	r3, r3
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	4013      	ands	r3, r2
 800501e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d003      	beq.n	8005034 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	4313      	orrs	r3, r2
 8005032:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005034:	4a1a      	ldr	r2, [pc, #104]	; (80050a0 <HAL_GPIO_Init+0x2f0>)
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800503a:	4b19      	ldr	r3, [pc, #100]	; (80050a0 <HAL_GPIO_Init+0x2f0>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	43db      	mvns	r3, r3
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	4013      	ands	r3, r2
 8005048:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d003      	beq.n	800505e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	4313      	orrs	r3, r2
 800505c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800505e:	4a10      	ldr	r2, [pc, #64]	; (80050a0 <HAL_GPIO_Init+0x2f0>)
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	3301      	adds	r3, #1
 8005068:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	fa22 f303 	lsr.w	r3, r2, r3
 8005074:	2b00      	cmp	r3, #0
 8005076:	f47f aea3 	bne.w	8004dc0 <HAL_GPIO_Init+0x10>
  }
}
 800507a:	bf00      	nop
 800507c:	bf00      	nop
 800507e:	371c      	adds	r7, #28
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr
 8005088:	40021000 	.word	0x40021000
 800508c:	40010000 	.word	0x40010000
 8005090:	48000400 	.word	0x48000400
 8005094:	48000800 	.word	0x48000800
 8005098:	48000c00 	.word	0x48000c00
 800509c:	48001000 	.word	0x48001000
 80050a0:	40010400 	.word	0x40010400

080050a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	460b      	mov	r3, r1
 80050ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	691a      	ldr	r2, [r3, #16]
 80050b4:	887b      	ldrh	r3, [r7, #2]
 80050b6:	4013      	ands	r3, r2
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d002      	beq.n	80050c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80050bc:	2301      	movs	r3, #1
 80050be:	73fb      	strb	r3, [r7, #15]
 80050c0:	e001      	b.n	80050c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80050c2:	2300      	movs	r3, #0
 80050c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80050c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3714      	adds	r7, #20
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	460b      	mov	r3, r1
 80050de:	807b      	strh	r3, [r7, #2]
 80050e0:	4613      	mov	r3, r2
 80050e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80050e4:	787b      	ldrb	r3, [r7, #1]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d003      	beq.n	80050f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80050ea:	887a      	ldrh	r2, [r7, #2]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80050f0:	e002      	b.n	80050f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80050f2:	887a      	ldrh	r2, [r7, #2]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80050f8:	bf00      	nop
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	460b      	mov	r3, r1
 800510e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	695b      	ldr	r3, [r3, #20]
 8005114:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005116:	887a      	ldrh	r2, [r7, #2]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	4013      	ands	r3, r2
 800511c:	041a      	lsls	r2, r3, #16
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	43d9      	mvns	r1, r3
 8005122:	887b      	ldrh	r3, [r7, #2]
 8005124:	400b      	ands	r3, r1
 8005126:	431a      	orrs	r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	619a      	str	r2, [r3, #24]
}
 800512c:	bf00      	nop
 800512e:	3714      	adds	r7, #20
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
 800513e:	4603      	mov	r3, r0
 8005140:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005142:	4b08      	ldr	r3, [pc, #32]	; (8005164 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005144:	695a      	ldr	r2, [r3, #20]
 8005146:	88fb      	ldrh	r3, [r7, #6]
 8005148:	4013      	ands	r3, r2
 800514a:	2b00      	cmp	r3, #0
 800514c:	d006      	beq.n	800515c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800514e:	4a05      	ldr	r2, [pc, #20]	; (8005164 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005150:	88fb      	ldrh	r3, [r7, #6]
 8005152:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005154:	88fb      	ldrh	r3, [r7, #6]
 8005156:	4618      	mov	r0, r3
 8005158:	f7fc fd96 	bl	8001c88 <HAL_GPIO_EXTI_Callback>
  }
}
 800515c:	bf00      	nop
 800515e:	3708      	adds	r7, #8
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	40010400 	.word	0x40010400

08005168 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d101      	bne.n	800517a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e081      	b.n	800527e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005180:	b2db      	uxtb	r3, r3
 8005182:	2b00      	cmp	r3, #0
 8005184:	d106      	bne.n	8005194 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f7fc ff8c 	bl	80020ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2224      	movs	r2, #36	; 0x24
 8005198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f022 0201 	bic.w	r2, r2, #1
 80051aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685a      	ldr	r2, [r3, #4]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80051b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	689a      	ldr	r2, [r3, #8]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80051c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d107      	bne.n	80051e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	689a      	ldr	r2, [r3, #8]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051de:	609a      	str	r2, [r3, #8]
 80051e0:	e006      	b.n	80051f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	689a      	ldr	r2, [r3, #8]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80051ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d104      	bne.n	8005202 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005200:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	6812      	ldr	r2, [r2, #0]
 800520c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005210:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005214:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68da      	ldr	r2, [r3, #12]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005224:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	691a      	ldr	r2, [r3, #16]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	699b      	ldr	r3, [r3, #24]
 8005236:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	430a      	orrs	r2, r1
 800523e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	69d9      	ldr	r1, [r3, #28]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a1a      	ldr	r2, [r3, #32]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	430a      	orrs	r2, r1
 800524e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f042 0201 	orr.w	r2, r2, #1
 800525e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2220      	movs	r2, #32
 800526a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3708      	adds	r7, #8
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
	...

08005288 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b088      	sub	sp, #32
 800528c:	af02      	add	r7, sp, #8
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	607a      	str	r2, [r7, #4]
 8005292:	461a      	mov	r2, r3
 8005294:	460b      	mov	r3, r1
 8005296:	817b      	strh	r3, [r7, #10]
 8005298:	4613      	mov	r3, r2
 800529a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2b20      	cmp	r3, #32
 80052a6:	f040 80da 	bne.w	800545e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d101      	bne.n	80052b8 <HAL_I2C_Master_Transmit+0x30>
 80052b4:	2302      	movs	r3, #2
 80052b6:	e0d3      	b.n	8005460 <HAL_I2C_Master_Transmit+0x1d8>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80052c0:	f7fd fae2 	bl	8002888 <HAL_GetTick>
 80052c4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	9300      	str	r3, [sp, #0]
 80052ca:	2319      	movs	r3, #25
 80052cc:	2201      	movs	r2, #1
 80052ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f000 ff2f 	bl	8006136 <I2C_WaitOnFlagUntilTimeout>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d001      	beq.n	80052e2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e0be      	b.n	8005460 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2221      	movs	r2, #33	; 0x21
 80052e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2210      	movs	r2, #16
 80052ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	893a      	ldrh	r2, [r7, #8]
 8005302:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800530e:	b29b      	uxth	r3, r3
 8005310:	2bff      	cmp	r3, #255	; 0xff
 8005312:	d90e      	bls.n	8005332 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	22ff      	movs	r2, #255	; 0xff
 8005318:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800531e:	b2da      	uxtb	r2, r3
 8005320:	8979      	ldrh	r1, [r7, #10]
 8005322:	4b51      	ldr	r3, [pc, #324]	; (8005468 <HAL_I2C_Master_Transmit+0x1e0>)
 8005324:	9300      	str	r3, [sp, #0]
 8005326:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800532a:	68f8      	ldr	r0, [r7, #12]
 800532c:	f001 f8bc 	bl	80064a8 <I2C_TransferConfig>
 8005330:	e06c      	b.n	800540c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005336:	b29a      	uxth	r2, r3
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005340:	b2da      	uxtb	r2, r3
 8005342:	8979      	ldrh	r1, [r7, #10]
 8005344:	4b48      	ldr	r3, [pc, #288]	; (8005468 <HAL_I2C_Master_Transmit+0x1e0>)
 8005346:	9300      	str	r3, [sp, #0]
 8005348:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800534c:	68f8      	ldr	r0, [r7, #12]
 800534e:	f001 f8ab 	bl	80064a8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005352:	e05b      	b.n	800540c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	6a39      	ldr	r1, [r7, #32]
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	f000 ff3b 	bl	80061d4 <I2C_WaitOnTXISFlagUntilTimeout>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d001      	beq.n	8005368 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e07b      	b.n	8005460 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536c:	781a      	ldrb	r2, [r3, #0]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005378:	1c5a      	adds	r2, r3, #1
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005382:	b29b      	uxth	r3, r3
 8005384:	3b01      	subs	r3, #1
 8005386:	b29a      	uxth	r2, r3
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005390:	3b01      	subs	r3, #1
 8005392:	b29a      	uxth	r2, r3
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800539c:	b29b      	uxth	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d034      	beq.n	800540c <HAL_I2C_Master_Transmit+0x184>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d130      	bne.n	800540c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	9300      	str	r3, [sp, #0]
 80053ae:	6a3b      	ldr	r3, [r7, #32]
 80053b0:	2200      	movs	r2, #0
 80053b2:	2180      	movs	r1, #128	; 0x80
 80053b4:	68f8      	ldr	r0, [r7, #12]
 80053b6:	f000 febe 	bl	8006136 <I2C_WaitOnFlagUntilTimeout>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d001      	beq.n	80053c4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e04d      	b.n	8005460 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	2bff      	cmp	r3, #255	; 0xff
 80053cc:	d90e      	bls.n	80053ec <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	22ff      	movs	r2, #255	; 0xff
 80053d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053d8:	b2da      	uxtb	r2, r3
 80053da:	8979      	ldrh	r1, [r7, #10]
 80053dc:	2300      	movs	r3, #0
 80053de:	9300      	str	r3, [sp, #0]
 80053e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f001 f85f 	bl	80064a8 <I2C_TransferConfig>
 80053ea:	e00f      	b.n	800540c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053f0:	b29a      	uxth	r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053fa:	b2da      	uxtb	r2, r3
 80053fc:	8979      	ldrh	r1, [r7, #10]
 80053fe:	2300      	movs	r3, #0
 8005400:	9300      	str	r3, [sp, #0]
 8005402:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005406:	68f8      	ldr	r0, [r7, #12]
 8005408:	f001 f84e 	bl	80064a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005410:	b29b      	uxth	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d19e      	bne.n	8005354 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	6a39      	ldr	r1, [r7, #32]
 800541a:	68f8      	ldr	r0, [r7, #12]
 800541c:	f000 ff21 	bl	8006262 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d001      	beq.n	800542a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e01a      	b.n	8005460 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2220      	movs	r2, #32
 8005430:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	6859      	ldr	r1, [r3, #4]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	4b0b      	ldr	r3, [pc, #44]	; (800546c <HAL_I2C_Master_Transmit+0x1e4>)
 800543e:	400b      	ands	r3, r1
 8005440:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2220      	movs	r2, #32
 8005446:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800545a:	2300      	movs	r3, #0
 800545c:	e000      	b.n	8005460 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800545e:	2302      	movs	r3, #2
  }
}
 8005460:	4618      	mov	r0, r3
 8005462:	3718      	adds	r7, #24
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}
 8005468:	80002000 	.word	0x80002000
 800546c:	fe00e800 	.word	0xfe00e800

08005470 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b08a      	sub	sp, #40	; 0x28
 8005474:	af02      	add	r7, sp, #8
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	607a      	str	r2, [r7, #4]
 800547a:	603b      	str	r3, [r7, #0]
 800547c:	460b      	mov	r3, r1
 800547e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005480:	2300      	movs	r3, #0
 8005482:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800548a:	b2db      	uxtb	r3, r3
 800548c:	2b20      	cmp	r3, #32
 800548e:	f040 80f3 	bne.w	8005678 <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	699b      	ldr	r3, [r3, #24]
 8005498:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800549c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054a0:	d101      	bne.n	80054a6 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80054a2:	2302      	movs	r3, #2
 80054a4:	e0e9      	b.n	800567a <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d101      	bne.n	80054b4 <HAL_I2C_IsDeviceReady+0x44>
 80054b0:	2302      	movs	r3, #2
 80054b2:	e0e2      	b.n	800567a <HAL_I2C_IsDeviceReady+0x20a>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2224      	movs	r2, #36	; 0x24
 80054c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d107      	bne.n	80054e2 <HAL_I2C_IsDeviceReady+0x72>
 80054d2:	897b      	ldrh	r3, [r7, #10]
 80054d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80054dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80054e0:	e006      	b.n	80054f0 <HAL_I2C_IsDeviceReady+0x80>
 80054e2:	897b      	ldrh	r3, [r7, #10]
 80054e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80054ec:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	6812      	ldr	r2, [r2, #0]
 80054f4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80054f6:	f7fd f9c7 	bl	8002888 <HAL_GetTick>
 80054fa:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	f003 0320 	and.w	r3, r3, #32
 8005506:	2b20      	cmp	r3, #32
 8005508:	bf0c      	ite	eq
 800550a:	2301      	moveq	r3, #1
 800550c:	2300      	movne	r3, #0
 800550e:	b2db      	uxtb	r3, r3
 8005510:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	f003 0310 	and.w	r3, r3, #16
 800551c:	2b10      	cmp	r3, #16
 800551e:	bf0c      	ite	eq
 8005520:	2301      	moveq	r3, #1
 8005522:	2300      	movne	r3, #0
 8005524:	b2db      	uxtb	r3, r3
 8005526:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005528:	e034      	b.n	8005594 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005530:	d01a      	beq.n	8005568 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005532:	f7fd f9a9 	bl	8002888 <HAL_GetTick>
 8005536:	4602      	mov	r2, r0
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	683a      	ldr	r2, [r7, #0]
 800553e:	429a      	cmp	r2, r3
 8005540:	d302      	bcc.n	8005548 <HAL_I2C_IsDeviceReady+0xd8>
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d10f      	bne.n	8005568 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2220      	movs	r2, #32
 800554c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005554:	f043 0220 	orr.w	r2, r3, #32
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e088      	b.n	800567a <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	f003 0320 	and.w	r3, r3, #32
 8005572:	2b20      	cmp	r3, #32
 8005574:	bf0c      	ite	eq
 8005576:	2301      	moveq	r3, #1
 8005578:	2300      	movne	r3, #0
 800557a:	b2db      	uxtb	r3, r3
 800557c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	699b      	ldr	r3, [r3, #24]
 8005584:	f003 0310 	and.w	r3, r3, #16
 8005588:	2b10      	cmp	r3, #16
 800558a:	bf0c      	ite	eq
 800558c:	2301      	moveq	r3, #1
 800558e:	2300      	movne	r3, #0
 8005590:	b2db      	uxtb	r3, r3
 8005592:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005594:	7ffb      	ldrb	r3, [r7, #31]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d102      	bne.n	80055a0 <HAL_I2C_IsDeviceReady+0x130>
 800559a:	7fbb      	ldrb	r3, [r7, #30]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d0c4      	beq.n	800552a <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	f003 0310 	and.w	r3, r3, #16
 80055aa:	2b10      	cmp	r3, #16
 80055ac:	d01a      	beq.n	80055e4 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	9300      	str	r3, [sp, #0]
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	2200      	movs	r2, #0
 80055b6:	2120      	movs	r1, #32
 80055b8:	68f8      	ldr	r0, [r7, #12]
 80055ba:	f000 fdbc 	bl	8006136 <I2C_WaitOnFlagUntilTimeout>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d001      	beq.n	80055c8 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e058      	b.n	800567a <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2220      	movs	r2, #32
 80055ce:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2220      	movs	r2, #32
 80055d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80055e0:	2300      	movs	r3, #0
 80055e2:	e04a      	b.n	800567a <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	9300      	str	r3, [sp, #0]
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	2200      	movs	r2, #0
 80055ec:	2120      	movs	r1, #32
 80055ee:	68f8      	ldr	r0, [r7, #12]
 80055f0:	f000 fda1 	bl	8006136 <I2C_WaitOnFlagUntilTimeout>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d001      	beq.n	80055fe <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e03d      	b.n	800567a <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2210      	movs	r2, #16
 8005604:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2220      	movs	r2, #32
 800560c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	429a      	cmp	r2, r3
 8005614:	d118      	bne.n	8005648 <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	685a      	ldr	r2, [r3, #4]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005624:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	9300      	str	r3, [sp, #0]
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	2200      	movs	r2, #0
 800562e:	2120      	movs	r1, #32
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f000 fd80 	bl	8006136 <I2C_WaitOnFlagUntilTimeout>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d001      	beq.n	8005640 <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e01c      	b.n	800567a <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2220      	movs	r2, #32
 8005646:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	3301      	adds	r3, #1
 800564c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	429a      	cmp	r2, r3
 8005654:	f63f af39 	bhi.w	80054ca <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2220      	movs	r2, #32
 800565c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005664:	f043 0220 	orr.w	r2, r3, #32
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e000      	b.n	800567a <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8005678:	2302      	movs	r3, #2
  }
}
 800567a:	4618      	mov	r0, r3
 800567c:	3720      	adds	r7, #32
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b084      	sub	sp, #16
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d005      	beq.n	80056ae <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	68f9      	ldr	r1, [r7, #12]
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	4798      	blx	r3
  }
}
 80056ae:	bf00      	nop
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80056b6:	b580      	push	{r7, lr}
 80056b8:	b086      	sub	sp, #24
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	0a1b      	lsrs	r3, r3, #8
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d010      	beq.n	80056fc <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	09db      	lsrs	r3, r3, #7
 80056de:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00a      	beq.n	80056fc <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ea:	f043 0201 	orr.w	r2, r3, #1
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056fa:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	0a9b      	lsrs	r3, r3, #10
 8005700:	f003 0301 	and.w	r3, r3, #1
 8005704:	2b00      	cmp	r3, #0
 8005706:	d010      	beq.n	800572a <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	09db      	lsrs	r3, r3, #7
 800570c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00a      	beq.n	800572a <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005718:	f043 0208 	orr.w	r2, r3, #8
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005728:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	0a5b      	lsrs	r3, r3, #9
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	2b00      	cmp	r3, #0
 8005734:	d010      	beq.n	8005758 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	09db      	lsrs	r3, r3, #7
 800573a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00a      	beq.n	8005758 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005746:	f043 0202 	orr.w	r2, r3, #2
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005756:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800575c:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f003 030b 	and.w	r3, r3, #11
 8005764:	2b00      	cmp	r3, #0
 8005766:	d003      	beq.n	8005770 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8005768:	68f9      	ldr	r1, [r7, #12]
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 fb8a 	bl	8005e84 <I2C_ITError>
  }
}
 8005770:	bf00      	nop
 8005772:	3718      	adds	r7, #24
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005780:	bf00      	nop
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005794:	bf00      	nop
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	460b      	mov	r3, r1
 80057aa:	70fb      	strb	r3, [r7, #3]
 80057ac:	4613      	mov	r3, r2
 80057ae:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80057b0:	bf00      	nop
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80057c4:	bf00      	nop
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80057ec:	bf00      	nop
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b086      	sub	sp, #24
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005808:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005814:	2b01      	cmp	r3, #1
 8005816:	d101      	bne.n	800581c <I2C_Slave_ISR_IT+0x24>
 8005818:	2302      	movs	r3, #2
 800581a:	e0ec      	b.n	80059f6 <I2C_Slave_ISR_IT+0x1fe>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	095b      	lsrs	r3, r3, #5
 8005828:	f003 0301 	and.w	r3, r3, #1
 800582c:	2b00      	cmp	r3, #0
 800582e:	d009      	beq.n	8005844 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	095b      	lsrs	r3, r3, #5
 8005834:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005838:	2b00      	cmp	r3, #0
 800583a:	d003      	beq.n	8005844 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800583c:	6939      	ldr	r1, [r7, #16]
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f000 f9c0 	bl	8005bc4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	091b      	lsrs	r3, r3, #4
 8005848:	f003 0301 	and.w	r3, r3, #1
 800584c:	2b00      	cmp	r3, #0
 800584e:	d04d      	beq.n	80058ec <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	091b      	lsrs	r3, r3, #4
 8005854:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005858:	2b00      	cmp	r3, #0
 800585a:	d047      	beq.n	80058ec <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005860:	b29b      	uxth	r3, r3
 8005862:	2b00      	cmp	r3, #0
 8005864:	d128      	bne.n	80058b8 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b28      	cmp	r3, #40	; 0x28
 8005870:	d108      	bne.n	8005884 <I2C_Slave_ISR_IT+0x8c>
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005878:	d104      	bne.n	8005884 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800587a:	6939      	ldr	r1, [r7, #16]
 800587c:	68f8      	ldr	r0, [r7, #12]
 800587e:	f000 faab 	bl	8005dd8 <I2C_ITListenCplt>
 8005882:	e032      	b.n	80058ea <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800588a:	b2db      	uxtb	r3, r3
 800588c:	2b29      	cmp	r3, #41	; 0x29
 800588e:	d10e      	bne.n	80058ae <I2C_Slave_ISR_IT+0xb6>
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005896:	d00a      	beq.n	80058ae <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2210      	movs	r2, #16
 800589e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80058a0:	68f8      	ldr	r0, [r7, #12]
 80058a2:	f000 fc06 	bl	80060b2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80058a6:	68f8      	ldr	r0, [r7, #12]
 80058a8:	f000 f92d 	bl	8005b06 <I2C_ITSlaveSeqCplt>
 80058ac:	e01d      	b.n	80058ea <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2210      	movs	r2, #16
 80058b4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80058b6:	e096      	b.n	80059e6 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2210      	movs	r2, #16
 80058be:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058c4:	f043 0204 	orr.w	r2, r3, #4
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d004      	beq.n	80058dc <I2C_Slave_ISR_IT+0xe4>
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80058d8:	f040 8085 	bne.w	80059e6 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058e0:	4619      	mov	r1, r3
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	f000 face 	bl	8005e84 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80058e8:	e07d      	b.n	80059e6 <I2C_Slave_ISR_IT+0x1ee>
 80058ea:	e07c      	b.n	80059e6 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	089b      	lsrs	r3, r3, #2
 80058f0:	f003 0301 	and.w	r3, r3, #1
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d030      	beq.n	800595a <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	089b      	lsrs	r3, r3, #2
 80058fc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005900:	2b00      	cmp	r3, #0
 8005902:	d02a      	beq.n	800595a <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005908:	b29b      	uxth	r3, r3
 800590a:	2b00      	cmp	r3, #0
 800590c:	d018      	beq.n	8005940 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005918:	b2d2      	uxtb	r2, r2
 800591a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005920:	1c5a      	adds	r2, r3, #1
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800592a:	3b01      	subs	r3, #1
 800592c:	b29a      	uxth	r2, r3
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005936:	b29b      	uxth	r3, r3
 8005938:	3b01      	subs	r3, #1
 800593a:	b29a      	uxth	r2, r3
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005944:	b29b      	uxth	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d14f      	bne.n	80059ea <I2C_Slave_ISR_IT+0x1f2>
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005950:	d04b      	beq.n	80059ea <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005952:	68f8      	ldr	r0, [r7, #12]
 8005954:	f000 f8d7 	bl	8005b06 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005958:	e047      	b.n	80059ea <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	08db      	lsrs	r3, r3, #3
 800595e:	f003 0301 	and.w	r3, r3, #1
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00a      	beq.n	800597c <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	08db      	lsrs	r3, r3, #3
 800596a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800596e:	2b00      	cmp	r3, #0
 8005970:	d004      	beq.n	800597c <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005972:	6939      	ldr	r1, [r7, #16]
 8005974:	68f8      	ldr	r0, [r7, #12]
 8005976:	f000 f842 	bl	80059fe <I2C_ITAddrCplt>
 800597a:	e037      	b.n	80059ec <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	085b      	lsrs	r3, r3, #1
 8005980:	f003 0301 	and.w	r3, r3, #1
 8005984:	2b00      	cmp	r3, #0
 8005986:	d031      	beq.n	80059ec <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	085b      	lsrs	r3, r3, #1
 800598c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005990:	2b00      	cmp	r3, #0
 8005992:	d02b      	beq.n	80059ec <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005998:	b29b      	uxth	r3, r3
 800599a:	2b00      	cmp	r3, #0
 800599c:	d018      	beq.n	80059d0 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a2:	781a      	ldrb	r2, [r3, #0]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ae:	1c5a      	adds	r2, r3, #1
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	3b01      	subs	r3, #1
 80059bc:	b29a      	uxth	r2, r3
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059c6:	3b01      	subs	r3, #1
 80059c8:	b29a      	uxth	r2, r3
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	851a      	strh	r2, [r3, #40]	; 0x28
 80059ce:	e00d      	b.n	80059ec <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80059d6:	d002      	beq.n	80059de <I2C_Slave_ISR_IT+0x1e6>
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d106      	bne.n	80059ec <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80059de:	68f8      	ldr	r0, [r7, #12]
 80059e0:	f000 f891 	bl	8005b06 <I2C_ITSlaveSeqCplt>
 80059e4:	e002      	b.n	80059ec <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80059e6:	bf00      	nop
 80059e8:	e000      	b.n	80059ec <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80059ea:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3718      	adds	r7, #24
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}

080059fe <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80059fe:	b580      	push	{r7, lr}
 8005a00:	b084      	sub	sp, #16
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
 8005a06:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005a14:	2b28      	cmp	r3, #40	; 0x28
 8005a16:	d16a      	bne.n	8005aee <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	0c1b      	lsrs	r3, r3, #16
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	0c1b      	lsrs	r3, r3, #16
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005a36:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a44:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005a52:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d138      	bne.n	8005ace <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005a5c:	897b      	ldrh	r3, [r7, #10]
 8005a5e:	09db      	lsrs	r3, r3, #7
 8005a60:	b29a      	uxth	r2, r3
 8005a62:	89bb      	ldrh	r3, [r7, #12]
 8005a64:	4053      	eors	r3, r2
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	f003 0306 	and.w	r3, r3, #6
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d11c      	bne.n	8005aaa <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005a70:	897b      	ldrh	r3, [r7, #10]
 8005a72:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a78:	1c5a      	adds	r2, r3, #1
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d13b      	bne.n	8005afe <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2208      	movs	r2, #8
 8005a92:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005a9c:	89ba      	ldrh	r2, [r7, #12]
 8005a9e:	7bfb      	ldrb	r3, [r7, #15]
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f7ff fe7c 	bl	80057a0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005aa8:	e029      	b.n	8005afe <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005aaa:	893b      	ldrh	r3, [r7, #8]
 8005aac:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005aae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 fd2a 	bl	800650c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005ac0:	89ba      	ldrh	r2, [r7, #12]
 8005ac2:	7bfb      	ldrb	r3, [r7, #15]
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f7ff fe6a 	bl	80057a0 <HAL_I2C_AddrCallback>
}
 8005acc:	e017      	b.n	8005afe <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005ace:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 fd1a 	bl	800650c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005ae0:	89ba      	ldrh	r2, [r7, #12]
 8005ae2:	7bfb      	ldrb	r3, [r7, #15]
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f7ff fe5a 	bl	80057a0 <HAL_I2C_AddrCallback>
}
 8005aec:	e007      	b.n	8005afe <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2208      	movs	r2, #8
 8005af4:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8005afe:	bf00      	nop
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b084      	sub	sp, #16
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	0b9b      	lsrs	r3, r3, #14
 8005b22:	f003 0301 	and.w	r3, r3, #1
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d008      	beq.n	8005b3c <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005b38:	601a      	str	r2, [r3, #0]
 8005b3a:	e00d      	b.n	8005b58 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	0bdb      	lsrs	r3, r3, #15
 8005b40:	f003 0301 	and.w	r3, r3, #1
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d007      	beq.n	8005b58 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b56:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	2b29      	cmp	r3, #41	; 0x29
 8005b62:	d112      	bne.n	8005b8a <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2228      	movs	r2, #40	; 0x28
 8005b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2221      	movs	r2, #33	; 0x21
 8005b70:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005b72:	2101      	movs	r1, #1
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 fcc9 	bl	800650c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f7ff fdf8 	bl	8005778 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005b88:	e017      	b.n	8005bba <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	2b2a      	cmp	r3, #42	; 0x2a
 8005b94:	d111      	bne.n	8005bba <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2228      	movs	r2, #40	; 0x28
 8005b9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2222      	movs	r2, #34	; 0x22
 8005ba2:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005ba4:	2102      	movs	r1, #2
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 fcb0 	bl	800650c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f7ff fde9 	bl	800578c <HAL_I2C_SlaveRxCpltCallback>
}
 8005bba:	bf00      	nop
 8005bbc:	3710      	adds	r7, #16
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
	...

08005bc4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b086      	sub	sp, #24
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005be0:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	2220      	movs	r2, #32
 8005be8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005bea:	7bfb      	ldrb	r3, [r7, #15]
 8005bec:	2b21      	cmp	r3, #33	; 0x21
 8005bee:	d002      	beq.n	8005bf6 <I2C_ITSlaveCplt+0x32>
 8005bf0:	7bfb      	ldrb	r3, [r7, #15]
 8005bf2:	2b29      	cmp	r3, #41	; 0x29
 8005bf4:	d108      	bne.n	8005c08 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005bf6:	f248 0101 	movw	r1, #32769	; 0x8001
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 fc86 	bl	800650c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2221      	movs	r2, #33	; 0x21
 8005c04:	631a      	str	r2, [r3, #48]	; 0x30
 8005c06:	e00d      	b.n	8005c24 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005c08:	7bfb      	ldrb	r3, [r7, #15]
 8005c0a:	2b22      	cmp	r3, #34	; 0x22
 8005c0c:	d002      	beq.n	8005c14 <I2C_ITSlaveCplt+0x50>
 8005c0e:	7bfb      	ldrb	r3, [r7, #15]
 8005c10:	2b2a      	cmp	r3, #42	; 0x2a
 8005c12:	d107      	bne.n	8005c24 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005c14:	f248 0102 	movw	r1, #32770	; 0x8002
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 fc77 	bl	800650c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2222      	movs	r2, #34	; 0x22
 8005c22:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	685a      	ldr	r2, [r3, #4]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c32:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	6859      	ldr	r1, [r3, #4]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	4b64      	ldr	r3, [pc, #400]	; (8005dd0 <I2C_ITSlaveCplt+0x20c>)
 8005c40:	400b      	ands	r3, r1
 8005c42:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 fa34 	bl	80060b2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	0b9b      	lsrs	r3, r3, #14
 8005c4e:	f003 0301 	and.w	r3, r3, #1
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d013      	beq.n	8005c7e <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005c64:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d020      	beq.n	8005cb0 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	b29a      	uxth	r2, r3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c7c:	e018      	b.n	8005cb0 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	0bdb      	lsrs	r3, r3, #15
 8005c82:	f003 0301 	and.w	r3, r3, #1
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d012      	beq.n	8005cb0 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c98:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d006      	beq.n	8005cb0 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	b29a      	uxth	r2, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	089b      	lsrs	r3, r3, #2
 8005cb4:	f003 0301 	and.w	r3, r3, #1
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d020      	beq.n	8005cfe <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	f023 0304 	bic.w	r3, r3, #4
 8005cc2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cce:	b2d2      	uxtb	r2, r2
 8005cd0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd6:	1c5a      	adds	r2, r3, #1
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00c      	beq.n	8005cfe <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ce8:	3b01      	subs	r3, #1
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	b29a      	uxth	r2, r3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d005      	beq.n	8005d14 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d0c:	f043 0204 	orr.w	r2, r3, #4
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d010      	beq.n	8005d4c <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d2e:	4619      	mov	r1, r3
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 f8a7 	bl	8005e84 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	2b28      	cmp	r3, #40	; 0x28
 8005d40:	d141      	bne.n	8005dc6 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005d42:	6979      	ldr	r1, [r7, #20]
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 f847 	bl	8005dd8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005d4a:	e03c      	b.n	8005dc6 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d54:	d014      	beq.n	8005d80 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f7ff fed5 	bl	8005b06 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a1d      	ldr	r2, [pc, #116]	; (8005dd4 <I2C_ITSlaveCplt+0x210>)
 8005d60:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2220      	movs	r2, #32
 8005d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f7ff fd1f 	bl	80057bc <HAL_I2C_ListenCpltCallback>
}
 8005d7e:	e022      	b.n	8005dc6 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	2b22      	cmp	r3, #34	; 0x22
 8005d8a:	d10e      	bne.n	8005daa <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2220      	movs	r2, #32
 8005d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f7ff fcf2 	bl	800578c <HAL_I2C_SlaveRxCpltCallback>
}
 8005da8:	e00d      	b.n	8005dc6 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2220      	movs	r2, #32
 8005dae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f7ff fcd9 	bl	8005778 <HAL_I2C_SlaveTxCpltCallback>
}
 8005dc6:	bf00      	nop
 8005dc8:	3718      	adds	r7, #24
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	fe00e800 	.word	0xfe00e800
 8005dd4:	ffff0000 	.word	0xffff0000

08005dd8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a26      	ldr	r2, [pc, #152]	; (8005e80 <I2C_ITListenCplt+0xa8>)
 8005de6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2220      	movs	r2, #32
 8005df2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	089b      	lsrs	r3, r3, #2
 8005e08:	f003 0301 	and.w	r3, r3, #1
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d022      	beq.n	8005e56 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1a:	b2d2      	uxtb	r2, r2
 8005e1c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e22:	1c5a      	adds	r2, r3, #1
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d012      	beq.n	8005e56 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e34:	3b01      	subs	r3, #1
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	3b01      	subs	r3, #1
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e4e:	f043 0204 	orr.w	r2, r3, #4
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005e56:	f248 0103 	movw	r1, #32771	; 0x8003
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 fb56 	bl	800650c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2210      	movs	r2, #16
 8005e66:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f7ff fca3 	bl	80057bc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005e76:	bf00      	nop
 8005e78:	3708      	adds	r7, #8
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	ffff0000 	.word	0xffff0000

08005e84 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e94:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a6d      	ldr	r2, [pc, #436]	; (8006058 <I2C_ITError+0x1d4>)
 8005ea2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	431a      	orrs	r2, r3
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005eb6:	7bfb      	ldrb	r3, [r7, #15]
 8005eb8:	2b28      	cmp	r3, #40	; 0x28
 8005eba:	d005      	beq.n	8005ec8 <I2C_ITError+0x44>
 8005ebc:	7bfb      	ldrb	r3, [r7, #15]
 8005ebe:	2b29      	cmp	r3, #41	; 0x29
 8005ec0:	d002      	beq.n	8005ec8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005ec2:	7bfb      	ldrb	r3, [r7, #15]
 8005ec4:	2b2a      	cmp	r3, #42	; 0x2a
 8005ec6:	d10b      	bne.n	8005ee0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005ec8:	2103      	movs	r1, #3
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 fb1e 	bl	800650c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2228      	movs	r2, #40	; 0x28
 8005ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a60      	ldr	r2, [pc, #384]	; (800605c <I2C_ITError+0x1d8>)
 8005edc:	635a      	str	r2, [r3, #52]	; 0x34
 8005ede:	e030      	b.n	8005f42 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005ee0:	f248 0103 	movw	r1, #32771	; 0x8003
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 fb11 	bl	800650c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 f8e1 	bl	80060b2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	2b60      	cmp	r3, #96	; 0x60
 8005efa:	d01f      	beq.n	8005f3c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2220      	movs	r2, #32
 8005f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	f003 0320 	and.w	r3, r3, #32
 8005f0e:	2b20      	cmp	r3, #32
 8005f10:	d114      	bne.n	8005f3c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	699b      	ldr	r3, [r3, #24]
 8005f18:	f003 0310 	and.w	r3, r3, #16
 8005f1c:	2b10      	cmp	r3, #16
 8005f1e:	d109      	bne.n	8005f34 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2210      	movs	r2, #16
 8005f26:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f2c:	f043 0204 	orr.w	r2, r3, #4
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2220      	movs	r2, #32
 8005f3a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f46:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d039      	beq.n	8005fc4 <I2C_ITError+0x140>
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	2b11      	cmp	r3, #17
 8005f54:	d002      	beq.n	8005f5c <I2C_ITError+0xd8>
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	2b21      	cmp	r3, #33	; 0x21
 8005f5a:	d133      	bne.n	8005fc4 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f6a:	d107      	bne.n	8005f7c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005f7a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7fe fe9e 	bl	8004cc2 <HAL_DMA_GetState>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d017      	beq.n	8005fbc <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f90:	4a33      	ldr	r2, [pc, #204]	; (8006060 <I2C_ITError+0x1dc>)
 8005f92:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f7fe fdad 	bl	8004b00 <HAL_DMA_Abort_IT>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d04d      	beq.n	8006048 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005fb6:	4610      	mov	r0, r2
 8005fb8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005fba:	e045      	b.n	8006048 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f000 f851 	bl	8006064 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005fc2:	e041      	b.n	8006048 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d039      	beq.n	8006040 <I2C_ITError+0x1bc>
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	2b12      	cmp	r3, #18
 8005fd0:	d002      	beq.n	8005fd8 <I2C_ITError+0x154>
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	2b22      	cmp	r3, #34	; 0x22
 8005fd6:	d133      	bne.n	8006040 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fe2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fe6:	d107      	bne.n	8005ff8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ff6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7fe fe60 	bl	8004cc2 <HAL_DMA_GetState>
 8006002:	4603      	mov	r3, r0
 8006004:	2b01      	cmp	r3, #1
 8006006:	d017      	beq.n	8006038 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800600c:	4a14      	ldr	r2, [pc, #80]	; (8006060 <I2C_ITError+0x1dc>)
 800600e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800601c:	4618      	mov	r0, r3
 800601e:	f7fe fd6f 	bl	8004b00 <HAL_DMA_Abort_IT>
 8006022:	4603      	mov	r3, r0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d011      	beq.n	800604c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800602c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006032:	4610      	mov	r0, r2
 8006034:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006036:	e009      	b.n	800604c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 f813 	bl	8006064 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800603e:	e005      	b.n	800604c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 f80f 	bl	8006064 <I2C_TreatErrorCallback>
  }
}
 8006046:	e002      	b.n	800604e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006048:	bf00      	nop
 800604a:	e000      	b.n	800604e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800604c:	bf00      	nop
}
 800604e:	bf00      	nop
 8006050:	3710      	adds	r7, #16
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	ffff0000 	.word	0xffff0000
 800605c:	080057f9 	.word	0x080057f9
 8006060:	080060fb 	.word	0x080060fb

08006064 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006072:	b2db      	uxtb	r3, r3
 8006074:	2b60      	cmp	r3, #96	; 0x60
 8006076:	d10e      	bne.n	8006096 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2220      	movs	r2, #32
 800607c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f7ff fba8 	bl	80057e4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006094:	e009      	b.n	80060aa <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f7ff fb93 	bl	80057d0 <HAL_I2C_ErrorCallback>
}
 80060aa:	bf00      	nop
 80060ac:	3708      	adds	r7, #8
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80060b2:	b480      	push	{r7}
 80060b4:	b083      	sub	sp, #12
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	699b      	ldr	r3, [r3, #24]
 80060c0:	f003 0302 	and.w	r3, r3, #2
 80060c4:	2b02      	cmp	r3, #2
 80060c6:	d103      	bne.n	80060d0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2200      	movs	r2, #0
 80060ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	699b      	ldr	r3, [r3, #24]
 80060d6:	f003 0301 	and.w	r3, r3, #1
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d007      	beq.n	80060ee <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	699a      	ldr	r2, [r3, #24]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f042 0201 	orr.w	r2, r2, #1
 80060ec:	619a      	str	r2, [r3, #24]
  }
}
 80060ee:	bf00      	nop
 80060f0:	370c      	adds	r7, #12
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr

080060fa <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b084      	sub	sp, #16
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006106:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800610c:	2b00      	cmp	r3, #0
 800610e:	d003      	beq.n	8006118 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006114:	2200      	movs	r2, #0
 8006116:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800611c:	2b00      	cmp	r3, #0
 800611e:	d003      	beq.n	8006128 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006124:	2200      	movs	r2, #0
 8006126:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8006128:	68f8      	ldr	r0, [r7, #12]
 800612a:	f7ff ff9b 	bl	8006064 <I2C_TreatErrorCallback>
}
 800612e:	bf00      	nop
 8006130:	3710      	adds	r7, #16
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}

08006136 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006136:	b580      	push	{r7, lr}
 8006138:	b084      	sub	sp, #16
 800613a:	af00      	add	r7, sp, #0
 800613c:	60f8      	str	r0, [r7, #12]
 800613e:	60b9      	str	r1, [r7, #8]
 8006140:	603b      	str	r3, [r7, #0]
 8006142:	4613      	mov	r3, r2
 8006144:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006146:	e031      	b.n	80061ac <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800614e:	d02d      	beq.n	80061ac <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006150:	f7fc fb9a 	bl	8002888 <HAL_GetTick>
 8006154:	4602      	mov	r2, r0
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	683a      	ldr	r2, [r7, #0]
 800615c:	429a      	cmp	r2, r3
 800615e:	d302      	bcc.n	8006166 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d122      	bne.n	80061ac <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	699a      	ldr	r2, [r3, #24]
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	4013      	ands	r3, r2
 8006170:	68ba      	ldr	r2, [r7, #8]
 8006172:	429a      	cmp	r2, r3
 8006174:	bf0c      	ite	eq
 8006176:	2301      	moveq	r3, #1
 8006178:	2300      	movne	r3, #0
 800617a:	b2db      	uxtb	r3, r3
 800617c:	461a      	mov	r2, r3
 800617e:	79fb      	ldrb	r3, [r7, #7]
 8006180:	429a      	cmp	r2, r3
 8006182:	d113      	bne.n	80061ac <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006188:	f043 0220 	orr.w	r2, r3, #32
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2220      	movs	r2, #32
 8006194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e00f      	b.n	80061cc <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	699a      	ldr	r2, [r3, #24]
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	4013      	ands	r3, r2
 80061b6:	68ba      	ldr	r2, [r7, #8]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	bf0c      	ite	eq
 80061bc:	2301      	moveq	r3, #1
 80061be:	2300      	movne	r3, #0
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	461a      	mov	r2, r3
 80061c4:	79fb      	ldrb	r3, [r7, #7]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d0be      	beq.n	8006148 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061ca:	2300      	movs	r3, #0
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3710      	adds	r7, #16
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80061e0:	e033      	b.n	800624a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	68b9      	ldr	r1, [r7, #8]
 80061e6:	68f8      	ldr	r0, [r7, #12]
 80061e8:	f000 f87e 	bl	80062e8 <I2C_IsErrorOccurred>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d001      	beq.n	80061f6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	e031      	b.n	800625a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061fc:	d025      	beq.n	800624a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061fe:	f7fc fb43 	bl	8002888 <HAL_GetTick>
 8006202:	4602      	mov	r2, r0
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	68ba      	ldr	r2, [r7, #8]
 800620a:	429a      	cmp	r2, r3
 800620c:	d302      	bcc.n	8006214 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d11a      	bne.n	800624a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	699b      	ldr	r3, [r3, #24]
 800621a:	f003 0302 	and.w	r3, r3, #2
 800621e:	2b02      	cmp	r3, #2
 8006220:	d013      	beq.n	800624a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006226:	f043 0220 	orr.w	r2, r3, #32
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2220      	movs	r2, #32
 8006232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2200      	movs	r2, #0
 800623a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e007      	b.n	800625a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	699b      	ldr	r3, [r3, #24]
 8006250:	f003 0302 	and.w	r3, r3, #2
 8006254:	2b02      	cmp	r3, #2
 8006256:	d1c4      	bne.n	80061e2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3710      	adds	r7, #16
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006262:	b580      	push	{r7, lr}
 8006264:	b084      	sub	sp, #16
 8006266:	af00      	add	r7, sp, #0
 8006268:	60f8      	str	r0, [r7, #12]
 800626a:	60b9      	str	r1, [r7, #8]
 800626c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800626e:	e02f      	b.n	80062d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	68b9      	ldr	r1, [r7, #8]
 8006274:	68f8      	ldr	r0, [r7, #12]
 8006276:	f000 f837 	bl	80062e8 <I2C_IsErrorOccurred>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d001      	beq.n	8006284 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	e02d      	b.n	80062e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006284:	f7fc fb00 	bl	8002888 <HAL_GetTick>
 8006288:	4602      	mov	r2, r0
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	1ad3      	subs	r3, r2, r3
 800628e:	68ba      	ldr	r2, [r7, #8]
 8006290:	429a      	cmp	r2, r3
 8006292:	d302      	bcc.n	800629a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d11a      	bne.n	80062d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	699b      	ldr	r3, [r3, #24]
 80062a0:	f003 0320 	and.w	r3, r3, #32
 80062a4:	2b20      	cmp	r3, #32
 80062a6:	d013      	beq.n	80062d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ac:	f043 0220 	orr.w	r2, r3, #32
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2220      	movs	r2, #32
 80062b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2200      	movs	r2, #0
 80062c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	e007      	b.n	80062e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	699b      	ldr	r3, [r3, #24]
 80062d6:	f003 0320 	and.w	r3, r3, #32
 80062da:	2b20      	cmp	r3, #32
 80062dc:	d1c8      	bne.n	8006270 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3710      	adds	r7, #16
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b08a      	sub	sp, #40	; 0x28
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062f4:	2300      	movs	r3, #0
 80062f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	699b      	ldr	r3, [r3, #24]
 8006300:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006302:	2300      	movs	r3, #0
 8006304:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	f003 0310 	and.w	r3, r3, #16
 8006310:	2b00      	cmp	r3, #0
 8006312:	d068      	beq.n	80063e6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	2210      	movs	r2, #16
 800631a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800631c:	e049      	b.n	80063b2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006324:	d045      	beq.n	80063b2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006326:	f7fc faaf 	bl	8002888 <HAL_GetTick>
 800632a:	4602      	mov	r2, r0
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	68ba      	ldr	r2, [r7, #8]
 8006332:	429a      	cmp	r2, r3
 8006334:	d302      	bcc.n	800633c <I2C_IsErrorOccurred+0x54>
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d13a      	bne.n	80063b2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006346:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800634e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800635a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800635e:	d121      	bne.n	80063a4 <I2C_IsErrorOccurred+0xbc>
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006366:	d01d      	beq.n	80063a4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006368:	7cfb      	ldrb	r3, [r7, #19]
 800636a:	2b20      	cmp	r3, #32
 800636c:	d01a      	beq.n	80063a4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	685a      	ldr	r2, [r3, #4]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800637c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800637e:	f7fc fa83 	bl	8002888 <HAL_GetTick>
 8006382:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006384:	e00e      	b.n	80063a4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006386:	f7fc fa7f 	bl	8002888 <HAL_GetTick>
 800638a:	4602      	mov	r2, r0
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	2b19      	cmp	r3, #25
 8006392:	d907      	bls.n	80063a4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006394:	6a3b      	ldr	r3, [r7, #32]
 8006396:	f043 0320 	orr.w	r3, r3, #32
 800639a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80063a2:	e006      	b.n	80063b2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	699b      	ldr	r3, [r3, #24]
 80063aa:	f003 0320 	and.w	r3, r3, #32
 80063ae:	2b20      	cmp	r3, #32
 80063b0:	d1e9      	bne.n	8006386 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	699b      	ldr	r3, [r3, #24]
 80063b8:	f003 0320 	and.w	r3, r3, #32
 80063bc:	2b20      	cmp	r3, #32
 80063be:	d003      	beq.n	80063c8 <I2C_IsErrorOccurred+0xe0>
 80063c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d0aa      	beq.n	800631e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80063c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d103      	bne.n	80063d8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2220      	movs	r2, #32
 80063d6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80063d8:	6a3b      	ldr	r3, [r7, #32]
 80063da:	f043 0304 	orr.w	r3, r3, #4
 80063de:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	699b      	ldr	r3, [r3, #24]
 80063ec:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00b      	beq.n	8006410 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80063f8:	6a3b      	ldr	r3, [r7, #32]
 80063fa:	f043 0301 	orr.w	r3, r3, #1
 80063fe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006408:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006416:	2b00      	cmp	r3, #0
 8006418:	d00b      	beq.n	8006432 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800641a:	6a3b      	ldr	r3, [r7, #32]
 800641c:	f043 0308 	orr.w	r3, r3, #8
 8006420:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800642a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00b      	beq.n	8006454 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800643c:	6a3b      	ldr	r3, [r7, #32]
 800643e:	f043 0302 	orr.w	r3, r3, #2
 8006442:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f44f 7200 	mov.w	r2, #512	; 0x200
 800644c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006454:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006458:	2b00      	cmp	r3, #0
 800645a:	d01c      	beq.n	8006496 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800645c:	68f8      	ldr	r0, [r7, #12]
 800645e:	f7ff fe28 	bl	80060b2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	6859      	ldr	r1, [r3, #4]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	4b0d      	ldr	r3, [pc, #52]	; (80064a4 <I2C_IsErrorOccurred+0x1bc>)
 800646e:	400b      	ands	r3, r1
 8006470:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006476:	6a3b      	ldr	r3, [r7, #32]
 8006478:	431a      	orrs	r2, r3
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2220      	movs	r2, #32
 8006482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2200      	movs	r2, #0
 8006492:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006496:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800649a:	4618      	mov	r0, r3
 800649c:	3728      	adds	r7, #40	; 0x28
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	fe00e800 	.word	0xfe00e800

080064a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b087      	sub	sp, #28
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	607b      	str	r3, [r7, #4]
 80064b2:	460b      	mov	r3, r1
 80064b4:	817b      	strh	r3, [r7, #10]
 80064b6:	4613      	mov	r3, r2
 80064b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80064ba:	897b      	ldrh	r3, [r7, #10]
 80064bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80064c0:	7a7b      	ldrb	r3, [r7, #9]
 80064c2:	041b      	lsls	r3, r3, #16
 80064c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80064c8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80064ce:	6a3b      	ldr	r3, [r7, #32]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064d6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	685a      	ldr	r2, [r3, #4]
 80064de:	6a3b      	ldr	r3, [r7, #32]
 80064e0:	0d5b      	lsrs	r3, r3, #21
 80064e2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80064e6:	4b08      	ldr	r3, [pc, #32]	; (8006508 <I2C_TransferConfig+0x60>)
 80064e8:	430b      	orrs	r3, r1
 80064ea:	43db      	mvns	r3, r3
 80064ec:	ea02 0103 	and.w	r1, r2, r3
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	697a      	ldr	r2, [r7, #20]
 80064f6:	430a      	orrs	r2, r1
 80064f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80064fa:	bf00      	nop
 80064fc:	371c      	adds	r7, #28
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop
 8006508:	03ff63ff 	.word	0x03ff63ff

0800650c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800650c:	b480      	push	{r7}
 800650e:	b085      	sub	sp, #20
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	460b      	mov	r3, r1
 8006516:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006518:	2300      	movs	r3, #0
 800651a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800651c:	887b      	ldrh	r3, [r7, #2]
 800651e:	f003 0301 	and.w	r3, r3, #1
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00f      	beq.n	8006546 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800652c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006534:	b2db      	uxtb	r3, r3
 8006536:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800653a:	2b28      	cmp	r3, #40	; 0x28
 800653c:	d003      	beq.n	8006546 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8006544:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006546:	887b      	ldrh	r3, [r7, #2]
 8006548:	f003 0302 	and.w	r3, r3, #2
 800654c:	2b00      	cmp	r3, #0
 800654e:	d00f      	beq.n	8006570 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8006556:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800655e:	b2db      	uxtb	r3, r3
 8006560:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006564:	2b28      	cmp	r3, #40	; 0x28
 8006566:	d003      	beq.n	8006570 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800656e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006570:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006574:	2b00      	cmp	r3, #0
 8006576:	da03      	bge.n	8006580 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800657e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006580:	887b      	ldrh	r3, [r7, #2]
 8006582:	2b10      	cmp	r3, #16
 8006584:	d103      	bne.n	800658e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800658c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800658e:	887b      	ldrh	r3, [r7, #2]
 8006590:	2b20      	cmp	r3, #32
 8006592:	d103      	bne.n	800659c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f043 0320 	orr.w	r3, r3, #32
 800659a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800659c:	887b      	ldrh	r3, [r7, #2]
 800659e:	2b40      	cmp	r3, #64	; 0x40
 80065a0:	d103      	bne.n	80065aa <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065a8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	6819      	ldr	r1, [r3, #0]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	43da      	mvns	r2, r3
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	400a      	ands	r2, r1
 80065ba:	601a      	str	r2, [r3, #0]
}
 80065bc:	bf00      	nop
 80065be:	3714      	adds	r7, #20
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	2b20      	cmp	r3, #32
 80065dc:	d138      	bne.n	8006650 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d101      	bne.n	80065ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80065e8:	2302      	movs	r3, #2
 80065ea:	e032      	b.n	8006652 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2224      	movs	r2, #36	; 0x24
 80065f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f022 0201 	bic.w	r2, r2, #1
 800660a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800661a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	6819      	ldr	r1, [r3, #0]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	683a      	ldr	r2, [r7, #0]
 8006628:	430a      	orrs	r2, r1
 800662a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f042 0201 	orr.w	r2, r2, #1
 800663a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2220      	movs	r2, #32
 8006640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800664c:	2300      	movs	r3, #0
 800664e:	e000      	b.n	8006652 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006650:	2302      	movs	r3, #2
  }
}
 8006652:	4618      	mov	r0, r3
 8006654:	370c      	adds	r7, #12
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr

0800665e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800665e:	b480      	push	{r7}
 8006660:	b085      	sub	sp, #20
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
 8006666:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800666e:	b2db      	uxtb	r3, r3
 8006670:	2b20      	cmp	r3, #32
 8006672:	d139      	bne.n	80066e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800667a:	2b01      	cmp	r3, #1
 800667c:	d101      	bne.n	8006682 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800667e:	2302      	movs	r3, #2
 8006680:	e033      	b.n	80066ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2201      	movs	r2, #1
 8006686:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2224      	movs	r2, #36	; 0x24
 800668e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f022 0201 	bic.w	r2, r2, #1
 80066a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80066b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	021b      	lsls	r3, r3, #8
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68fa      	ldr	r2, [r7, #12]
 80066c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f042 0201 	orr.w	r2, r2, #1
 80066d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2220      	movs	r2, #32
 80066d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80066e4:	2300      	movs	r3, #0
 80066e6:	e000      	b.n	80066ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80066e8:	2302      	movs	r3, #2
  }
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3714      	adds	r7, #20
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr
	...

080066f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80066fe:	af00      	add	r7, sp, #0
 8006700:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006704:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006708:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800670a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800670e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d102      	bne.n	800671e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	f001 b823 	b.w	8007764 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800671e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006722:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f003 0301 	and.w	r3, r3, #1
 800672e:	2b00      	cmp	r3, #0
 8006730:	f000 817d 	beq.w	8006a2e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8006734:	4bbc      	ldr	r3, [pc, #752]	; (8006a28 <HAL_RCC_OscConfig+0x330>)
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	f003 030c 	and.w	r3, r3, #12
 800673c:	2b04      	cmp	r3, #4
 800673e:	d00c      	beq.n	800675a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006740:	4bb9      	ldr	r3, [pc, #740]	; (8006a28 <HAL_RCC_OscConfig+0x330>)
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	f003 030c 	and.w	r3, r3, #12
 8006748:	2b08      	cmp	r3, #8
 800674a:	d15c      	bne.n	8006806 <HAL_RCC_OscConfig+0x10e>
 800674c:	4bb6      	ldr	r3, [pc, #728]	; (8006a28 <HAL_RCC_OscConfig+0x330>)
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006758:	d155      	bne.n	8006806 <HAL_RCC_OscConfig+0x10e>
 800675a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800675e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006762:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8006766:	fa93 f3a3 	rbit	r3, r3
 800676a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 800676e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006772:	fab3 f383 	clz	r3, r3
 8006776:	b2db      	uxtb	r3, r3
 8006778:	095b      	lsrs	r3, r3, #5
 800677a:	b2db      	uxtb	r3, r3
 800677c:	f043 0301 	orr.w	r3, r3, #1
 8006780:	b2db      	uxtb	r3, r3
 8006782:	2b01      	cmp	r3, #1
 8006784:	d102      	bne.n	800678c <HAL_RCC_OscConfig+0x94>
 8006786:	4ba8      	ldr	r3, [pc, #672]	; (8006a28 <HAL_RCC_OscConfig+0x330>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	e015      	b.n	80067b8 <HAL_RCC_OscConfig+0xc0>
 800678c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006790:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006794:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8006798:	fa93 f3a3 	rbit	r3, r3
 800679c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80067a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80067a4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80067a8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80067ac:	fa93 f3a3 	rbit	r3, r3
 80067b0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80067b4:	4b9c      	ldr	r3, [pc, #624]	; (8006a28 <HAL_RCC_OscConfig+0x330>)
 80067b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80067bc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80067c0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80067c4:	fa92 f2a2 	rbit	r2, r2
 80067c8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80067cc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80067d0:	fab2 f282 	clz	r2, r2
 80067d4:	b2d2      	uxtb	r2, r2
 80067d6:	f042 0220 	orr.w	r2, r2, #32
 80067da:	b2d2      	uxtb	r2, r2
 80067dc:	f002 021f 	and.w	r2, r2, #31
 80067e0:	2101      	movs	r1, #1
 80067e2:	fa01 f202 	lsl.w	r2, r1, r2
 80067e6:	4013      	ands	r3, r2
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	f000 811f 	beq.w	8006a2c <HAL_RCC_OscConfig+0x334>
 80067ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80067f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	f040 8116 	bne.w	8006a2c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	f000 bfaf 	b.w	8007764 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006806:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800680a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006816:	d106      	bne.n	8006826 <HAL_RCC_OscConfig+0x12e>
 8006818:	4b83      	ldr	r3, [pc, #524]	; (8006a28 <HAL_RCC_OscConfig+0x330>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a82      	ldr	r2, [pc, #520]	; (8006a28 <HAL_RCC_OscConfig+0x330>)
 800681e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006822:	6013      	str	r3, [r2, #0]
 8006824:	e036      	b.n	8006894 <HAL_RCC_OscConfig+0x19c>
 8006826:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800682a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d10c      	bne.n	8006850 <HAL_RCC_OscConfig+0x158>
 8006836:	4b7c      	ldr	r3, [pc, #496]	; (8006a28 <HAL_RCC_OscConfig+0x330>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a7b      	ldr	r2, [pc, #492]	; (8006a28 <HAL_RCC_OscConfig+0x330>)
 800683c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006840:	6013      	str	r3, [r2, #0]
 8006842:	4b79      	ldr	r3, [pc, #484]	; (8006a28 <HAL_RCC_OscConfig+0x330>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a78      	ldr	r2, [pc, #480]	; (8006a28 <HAL_RCC_OscConfig+0x330>)
 8006848:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800684c:	6013      	str	r3, [r2, #0]
 800684e:	e021      	b.n	8006894 <HAL_RCC_OscConfig+0x19c>
 8006850:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006854:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006860:	d10c      	bne.n	800687c <HAL_RCC_OscConfig+0x184>
 8006862:	4b71      	ldr	r3, [pc, #452]	; (8006a28 <HAL_RCC_OscConfig+0x330>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a70      	ldr	r2, [pc, #448]	; (8006a28 <HAL_RCC_OscConfig+0x330>)
 8006868:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800686c:	6013      	str	r3, [r2, #0]
 800686e:	4b6e      	ldr	r3, [pc, #440]	; (8006a28 <HAL_RCC_OscConfig+0x330>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a6d      	ldr	r2, [pc, #436]	; (8006a28 <HAL_RCC_OscConfig+0x330>)
 8006874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006878:	6013      	str	r3, [r2, #0]
 800687a:	e00b      	b.n	8006894 <HAL_RCC_OscConfig+0x19c>
 800687c:	4b6a      	ldr	r3, [pc, #424]	; (8006a28 <HAL_RCC_OscConfig+0x330>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a69      	ldr	r2, [pc, #420]	; (8006a28 <HAL_RCC_OscConfig+0x330>)
 8006882:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006886:	6013      	str	r3, [r2, #0]
 8006888:	4b67      	ldr	r3, [pc, #412]	; (8006a28 <HAL_RCC_OscConfig+0x330>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a66      	ldr	r2, [pc, #408]	; (8006a28 <HAL_RCC_OscConfig+0x330>)
 800688e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006892:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006894:	4b64      	ldr	r3, [pc, #400]	; (8006a28 <HAL_RCC_OscConfig+0x330>)
 8006896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006898:	f023 020f 	bic.w	r2, r3, #15
 800689c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80068a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	495f      	ldr	r1, [pc, #380]	; (8006a28 <HAL_RCC_OscConfig+0x330>)
 80068aa:	4313      	orrs	r3, r2
 80068ac:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80068ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80068b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d059      	beq.n	8006972 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068be:	f7fb ffe3 	bl	8002888 <HAL_GetTick>
 80068c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068c6:	e00a      	b.n	80068de <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068c8:	f7fb ffde 	bl	8002888 <HAL_GetTick>
 80068cc:	4602      	mov	r2, r0
 80068ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80068d2:	1ad3      	subs	r3, r2, r3
 80068d4:	2b64      	cmp	r3, #100	; 0x64
 80068d6:	d902      	bls.n	80068de <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80068d8:	2303      	movs	r3, #3
 80068da:	f000 bf43 	b.w	8007764 <HAL_RCC_OscConfig+0x106c>
 80068de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80068e2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068e6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80068ea:	fa93 f3a3 	rbit	r3, r3
 80068ee:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80068f2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068f6:	fab3 f383 	clz	r3, r3
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	095b      	lsrs	r3, r3, #5
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	f043 0301 	orr.w	r3, r3, #1
 8006904:	b2db      	uxtb	r3, r3
 8006906:	2b01      	cmp	r3, #1
 8006908:	d102      	bne.n	8006910 <HAL_RCC_OscConfig+0x218>
 800690a:	4b47      	ldr	r3, [pc, #284]	; (8006a28 <HAL_RCC_OscConfig+0x330>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	e015      	b.n	800693c <HAL_RCC_OscConfig+0x244>
 8006910:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006914:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006918:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800691c:	fa93 f3a3 	rbit	r3, r3
 8006920:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8006924:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006928:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800692c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8006930:	fa93 f3a3 	rbit	r3, r3
 8006934:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8006938:	4b3b      	ldr	r3, [pc, #236]	; (8006a28 <HAL_RCC_OscConfig+0x330>)
 800693a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006940:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8006944:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8006948:	fa92 f2a2 	rbit	r2, r2
 800694c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8006950:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8006954:	fab2 f282 	clz	r2, r2
 8006958:	b2d2      	uxtb	r2, r2
 800695a:	f042 0220 	orr.w	r2, r2, #32
 800695e:	b2d2      	uxtb	r2, r2
 8006960:	f002 021f 	and.w	r2, r2, #31
 8006964:	2101      	movs	r1, #1
 8006966:	fa01 f202 	lsl.w	r2, r1, r2
 800696a:	4013      	ands	r3, r2
 800696c:	2b00      	cmp	r3, #0
 800696e:	d0ab      	beq.n	80068c8 <HAL_RCC_OscConfig+0x1d0>
 8006970:	e05d      	b.n	8006a2e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006972:	f7fb ff89 	bl	8002888 <HAL_GetTick>
 8006976:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800697a:	e00a      	b.n	8006992 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800697c:	f7fb ff84 	bl	8002888 <HAL_GetTick>
 8006980:	4602      	mov	r2, r0
 8006982:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006986:	1ad3      	subs	r3, r2, r3
 8006988:	2b64      	cmp	r3, #100	; 0x64
 800698a:	d902      	bls.n	8006992 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800698c:	2303      	movs	r3, #3
 800698e:	f000 bee9 	b.w	8007764 <HAL_RCC_OscConfig+0x106c>
 8006992:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006996:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800699a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800699e:	fa93 f3a3 	rbit	r3, r3
 80069a2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80069a6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069aa:	fab3 f383 	clz	r3, r3
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	095b      	lsrs	r3, r3, #5
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	f043 0301 	orr.w	r3, r3, #1
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d102      	bne.n	80069c4 <HAL_RCC_OscConfig+0x2cc>
 80069be:	4b1a      	ldr	r3, [pc, #104]	; (8006a28 <HAL_RCC_OscConfig+0x330>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	e015      	b.n	80069f0 <HAL_RCC_OscConfig+0x2f8>
 80069c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80069c8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069cc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80069d0:	fa93 f3a3 	rbit	r3, r3
 80069d4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80069d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80069dc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80069e0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80069e4:	fa93 f3a3 	rbit	r3, r3
 80069e8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80069ec:	4b0e      	ldr	r3, [pc, #56]	; (8006a28 <HAL_RCC_OscConfig+0x330>)
 80069ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80069f4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80069f8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80069fc:	fa92 f2a2 	rbit	r2, r2
 8006a00:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8006a04:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8006a08:	fab2 f282 	clz	r2, r2
 8006a0c:	b2d2      	uxtb	r2, r2
 8006a0e:	f042 0220 	orr.w	r2, r2, #32
 8006a12:	b2d2      	uxtb	r2, r2
 8006a14:	f002 021f 	and.w	r2, r2, #31
 8006a18:	2101      	movs	r1, #1
 8006a1a:	fa01 f202 	lsl.w	r2, r1, r2
 8006a1e:	4013      	ands	r3, r2
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d1ab      	bne.n	800697c <HAL_RCC_OscConfig+0x284>
 8006a24:	e003      	b.n	8006a2e <HAL_RCC_OscConfig+0x336>
 8006a26:	bf00      	nop
 8006a28:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 0302 	and.w	r3, r3, #2
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	f000 817d 	beq.w	8006d3e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006a44:	4ba6      	ldr	r3, [pc, #664]	; (8006ce0 <HAL_RCC_OscConfig+0x5e8>)
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	f003 030c 	and.w	r3, r3, #12
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00b      	beq.n	8006a68 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006a50:	4ba3      	ldr	r3, [pc, #652]	; (8006ce0 <HAL_RCC_OscConfig+0x5e8>)
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	f003 030c 	and.w	r3, r3, #12
 8006a58:	2b08      	cmp	r3, #8
 8006a5a:	d172      	bne.n	8006b42 <HAL_RCC_OscConfig+0x44a>
 8006a5c:	4ba0      	ldr	r3, [pc, #640]	; (8006ce0 <HAL_RCC_OscConfig+0x5e8>)
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d16c      	bne.n	8006b42 <HAL_RCC_OscConfig+0x44a>
 8006a68:	2302      	movs	r3, #2
 8006a6a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a6e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8006a72:	fa93 f3a3 	rbit	r3, r3
 8006a76:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8006a7a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a7e:	fab3 f383 	clz	r3, r3
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	095b      	lsrs	r3, r3, #5
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	f043 0301 	orr.w	r3, r3, #1
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d102      	bne.n	8006a98 <HAL_RCC_OscConfig+0x3a0>
 8006a92:	4b93      	ldr	r3, [pc, #588]	; (8006ce0 <HAL_RCC_OscConfig+0x5e8>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	e013      	b.n	8006ac0 <HAL_RCC_OscConfig+0x3c8>
 8006a98:	2302      	movs	r3, #2
 8006a9a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a9e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8006aa2:	fa93 f3a3 	rbit	r3, r3
 8006aa6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8006aaa:	2302      	movs	r3, #2
 8006aac:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8006ab0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8006ab4:	fa93 f3a3 	rbit	r3, r3
 8006ab8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8006abc:	4b88      	ldr	r3, [pc, #544]	; (8006ce0 <HAL_RCC_OscConfig+0x5e8>)
 8006abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac0:	2202      	movs	r2, #2
 8006ac2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8006ac6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8006aca:	fa92 f2a2 	rbit	r2, r2
 8006ace:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8006ad2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8006ad6:	fab2 f282 	clz	r2, r2
 8006ada:	b2d2      	uxtb	r2, r2
 8006adc:	f042 0220 	orr.w	r2, r2, #32
 8006ae0:	b2d2      	uxtb	r2, r2
 8006ae2:	f002 021f 	and.w	r2, r2, #31
 8006ae6:	2101      	movs	r1, #1
 8006ae8:	fa01 f202 	lsl.w	r2, r1, r2
 8006aec:	4013      	ands	r3, r2
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d00a      	beq.n	8006b08 <HAL_RCC_OscConfig+0x410>
 8006af2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006af6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d002      	beq.n	8006b08 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	f000 be2e 	b.w	8007764 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b08:	4b75      	ldr	r3, [pc, #468]	; (8006ce0 <HAL_RCC_OscConfig+0x5e8>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b14:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	695b      	ldr	r3, [r3, #20]
 8006b1c:	21f8      	movs	r1, #248	; 0xf8
 8006b1e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b22:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8006b26:	fa91 f1a1 	rbit	r1, r1
 8006b2a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8006b2e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8006b32:	fab1 f181 	clz	r1, r1
 8006b36:	b2c9      	uxtb	r1, r1
 8006b38:	408b      	lsls	r3, r1
 8006b3a:	4969      	ldr	r1, [pc, #420]	; (8006ce0 <HAL_RCC_OscConfig+0x5e8>)
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b40:	e0fd      	b.n	8006d3e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	f000 8088 	beq.w	8006c64 <HAL_RCC_OscConfig+0x56c>
 8006b54:	2301      	movs	r3, #1
 8006b56:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b5a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8006b5e:	fa93 f3a3 	rbit	r3, r3
 8006b62:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8006b66:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b6a:	fab3 f383 	clz	r3, r3
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006b74:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b80:	f7fb fe82 	bl	8002888 <HAL_GetTick>
 8006b84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b88:	e00a      	b.n	8006ba0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b8a:	f7fb fe7d 	bl	8002888 <HAL_GetTick>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	d902      	bls.n	8006ba0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	f000 bde2 	b.w	8007764 <HAL_RCC_OscConfig+0x106c>
 8006ba0:	2302      	movs	r3, #2
 8006ba2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ba6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8006baa:	fa93 f3a3 	rbit	r3, r3
 8006bae:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8006bb2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bb6:	fab3 f383 	clz	r3, r3
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	095b      	lsrs	r3, r3, #5
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	f043 0301 	orr.w	r3, r3, #1
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d102      	bne.n	8006bd0 <HAL_RCC_OscConfig+0x4d8>
 8006bca:	4b45      	ldr	r3, [pc, #276]	; (8006ce0 <HAL_RCC_OscConfig+0x5e8>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	e013      	b.n	8006bf8 <HAL_RCC_OscConfig+0x500>
 8006bd0:	2302      	movs	r3, #2
 8006bd2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bd6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8006bda:	fa93 f3a3 	rbit	r3, r3
 8006bde:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8006be2:	2302      	movs	r3, #2
 8006be4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8006be8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006bec:	fa93 f3a3 	rbit	r3, r3
 8006bf0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8006bf4:	4b3a      	ldr	r3, [pc, #232]	; (8006ce0 <HAL_RCC_OscConfig+0x5e8>)
 8006bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf8:	2202      	movs	r2, #2
 8006bfa:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8006bfe:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8006c02:	fa92 f2a2 	rbit	r2, r2
 8006c06:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8006c0a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8006c0e:	fab2 f282 	clz	r2, r2
 8006c12:	b2d2      	uxtb	r2, r2
 8006c14:	f042 0220 	orr.w	r2, r2, #32
 8006c18:	b2d2      	uxtb	r2, r2
 8006c1a:	f002 021f 	and.w	r2, r2, #31
 8006c1e:	2101      	movs	r1, #1
 8006c20:	fa01 f202 	lsl.w	r2, r1, r2
 8006c24:	4013      	ands	r3, r2
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d0af      	beq.n	8006b8a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c2a:	4b2d      	ldr	r3, [pc, #180]	; (8006ce0 <HAL_RCC_OscConfig+0x5e8>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	695b      	ldr	r3, [r3, #20]
 8006c3e:	21f8      	movs	r1, #248	; 0xf8
 8006c40:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c44:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006c48:	fa91 f1a1 	rbit	r1, r1
 8006c4c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8006c50:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8006c54:	fab1 f181 	clz	r1, r1
 8006c58:	b2c9      	uxtb	r1, r1
 8006c5a:	408b      	lsls	r3, r1
 8006c5c:	4920      	ldr	r1, [pc, #128]	; (8006ce0 <HAL_RCC_OscConfig+0x5e8>)
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	600b      	str	r3, [r1, #0]
 8006c62:	e06c      	b.n	8006d3e <HAL_RCC_OscConfig+0x646>
 8006c64:	2301      	movs	r3, #1
 8006c66:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c6a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006c6e:	fa93 f3a3 	rbit	r3, r3
 8006c72:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8006c76:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c7a:	fab3 f383 	clz	r3, r3
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006c84:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c90:	f7fb fdfa 	bl	8002888 <HAL_GetTick>
 8006c94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c98:	e00a      	b.n	8006cb0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c9a:	f7fb fdf5 	bl	8002888 <HAL_GetTick>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	2b02      	cmp	r3, #2
 8006ca8:	d902      	bls.n	8006cb0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8006caa:	2303      	movs	r3, #3
 8006cac:	f000 bd5a 	b.w	8007764 <HAL_RCC_OscConfig+0x106c>
 8006cb0:	2302      	movs	r3, #2
 8006cb2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cb6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006cba:	fa93 f3a3 	rbit	r3, r3
 8006cbe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8006cc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cc6:	fab3 f383 	clz	r3, r3
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	095b      	lsrs	r3, r3, #5
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	f043 0301 	orr.w	r3, r3, #1
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d104      	bne.n	8006ce4 <HAL_RCC_OscConfig+0x5ec>
 8006cda:	4b01      	ldr	r3, [pc, #4]	; (8006ce0 <HAL_RCC_OscConfig+0x5e8>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	e015      	b.n	8006d0c <HAL_RCC_OscConfig+0x614>
 8006ce0:	40021000 	.word	0x40021000
 8006ce4:	2302      	movs	r3, #2
 8006ce6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006cee:	fa93 f3a3 	rbit	r3, r3
 8006cf2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006cf6:	2302      	movs	r3, #2
 8006cf8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006cfc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006d00:	fa93 f3a3 	rbit	r3, r3
 8006d04:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006d08:	4bc8      	ldr	r3, [pc, #800]	; (800702c <HAL_RCC_OscConfig+0x934>)
 8006d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0c:	2202      	movs	r2, #2
 8006d0e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8006d12:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006d16:	fa92 f2a2 	rbit	r2, r2
 8006d1a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8006d1e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8006d22:	fab2 f282 	clz	r2, r2
 8006d26:	b2d2      	uxtb	r2, r2
 8006d28:	f042 0220 	orr.w	r2, r2, #32
 8006d2c:	b2d2      	uxtb	r2, r2
 8006d2e:	f002 021f 	and.w	r2, r2, #31
 8006d32:	2101      	movs	r1, #1
 8006d34:	fa01 f202 	lsl.w	r2, r1, r2
 8006d38:	4013      	ands	r3, r2
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d1ad      	bne.n	8006c9a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f003 0308 	and.w	r3, r3, #8
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	f000 8110 	beq.w	8006f74 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006d54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d58:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	699b      	ldr	r3, [r3, #24]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d079      	beq.n	8006e58 <HAL_RCC_OscConfig+0x760>
 8006d64:	2301      	movs	r3, #1
 8006d66:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d6a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006d6e:	fa93 f3a3 	rbit	r3, r3
 8006d72:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8006d76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d7a:	fab3 f383 	clz	r3, r3
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	461a      	mov	r2, r3
 8006d82:	4bab      	ldr	r3, [pc, #684]	; (8007030 <HAL_RCC_OscConfig+0x938>)
 8006d84:	4413      	add	r3, r2
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	461a      	mov	r2, r3
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d8e:	f7fb fd7b 	bl	8002888 <HAL_GetTick>
 8006d92:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d96:	e00a      	b.n	8006dae <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d98:	f7fb fd76 	bl	8002888 <HAL_GetTick>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006da2:	1ad3      	subs	r3, r2, r3
 8006da4:	2b02      	cmp	r3, #2
 8006da6:	d902      	bls.n	8006dae <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8006da8:	2303      	movs	r3, #3
 8006daa:	f000 bcdb 	b.w	8007764 <HAL_RCC_OscConfig+0x106c>
 8006dae:	2302      	movs	r3, #2
 8006db0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006db4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006db8:	fa93 f3a3 	rbit	r3, r3
 8006dbc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006dc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006dc4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006dc8:	2202      	movs	r2, #2
 8006dca:	601a      	str	r2, [r3, #0]
 8006dcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006dd0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	fa93 f2a3 	rbit	r2, r3
 8006dda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006dde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006de2:	601a      	str	r2, [r3, #0]
 8006de4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006de8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dec:	2202      	movs	r2, #2
 8006dee:	601a      	str	r2, [r3, #0]
 8006df0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006df4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	fa93 f2a3 	rbit	r2, r3
 8006dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e02:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006e06:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e08:	4b88      	ldr	r3, [pc, #544]	; (800702c <HAL_RCC_OscConfig+0x934>)
 8006e0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e10:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006e14:	2102      	movs	r1, #2
 8006e16:	6019      	str	r1, [r3, #0]
 8006e18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e1c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	fa93 f1a3 	rbit	r1, r3
 8006e26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e2a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006e2e:	6019      	str	r1, [r3, #0]
  return result;
 8006e30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e34:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	fab3 f383 	clz	r3, r3
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	f003 031f 	and.w	r3, r3, #31
 8006e4a:	2101      	movs	r1, #1
 8006e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8006e50:	4013      	ands	r3, r2
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d0a0      	beq.n	8006d98 <HAL_RCC_OscConfig+0x6a0>
 8006e56:	e08d      	b.n	8006f74 <HAL_RCC_OscConfig+0x87c>
 8006e58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e5c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006e60:	2201      	movs	r2, #1
 8006e62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e68:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	fa93 f2a3 	rbit	r2, r3
 8006e72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e76:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006e7a:	601a      	str	r2, [r3, #0]
  return result;
 8006e7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e80:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006e84:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e86:	fab3 f383 	clz	r3, r3
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	4b68      	ldr	r3, [pc, #416]	; (8007030 <HAL_RCC_OscConfig+0x938>)
 8006e90:	4413      	add	r3, r2
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	461a      	mov	r2, r3
 8006e96:	2300      	movs	r3, #0
 8006e98:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e9a:	f7fb fcf5 	bl	8002888 <HAL_GetTick>
 8006e9e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ea2:	e00a      	b.n	8006eba <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ea4:	f7fb fcf0 	bl	8002888 <HAL_GetTick>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d902      	bls.n	8006eba <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8006eb4:	2303      	movs	r3, #3
 8006eb6:	f000 bc55 	b.w	8007764 <HAL_RCC_OscConfig+0x106c>
 8006eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ebe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006ec2:	2202      	movs	r2, #2
 8006ec4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ec6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006eca:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	fa93 f2a3 	rbit	r2, r3
 8006ed4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ed8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006edc:	601a      	str	r2, [r3, #0]
 8006ede:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ee2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006ee6:	2202      	movs	r2, #2
 8006ee8:	601a      	str	r2, [r3, #0]
 8006eea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006eee:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	fa93 f2a3 	rbit	r2, r3
 8006ef8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006efc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f00:	601a      	str	r2, [r3, #0]
 8006f02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f0a:	2202      	movs	r2, #2
 8006f0c:	601a      	str	r2, [r3, #0]
 8006f0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	fa93 f2a3 	rbit	r2, r3
 8006f1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f20:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006f24:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f26:	4b41      	ldr	r3, [pc, #260]	; (800702c <HAL_RCC_OscConfig+0x934>)
 8006f28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f2e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8006f32:	2102      	movs	r1, #2
 8006f34:	6019      	str	r1, [r3, #0]
 8006f36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f3a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	fa93 f1a3 	rbit	r1, r3
 8006f44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f48:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8006f4c:	6019      	str	r1, [r3, #0]
  return result;
 8006f4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f52:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	fab3 f383 	clz	r3, r3
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	f003 031f 	and.w	r3, r3, #31
 8006f68:	2101      	movs	r1, #1
 8006f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8006f6e:	4013      	ands	r3, r2
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d197      	bne.n	8006ea4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f78:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 0304 	and.w	r3, r3, #4
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	f000 81a1 	beq.w	80072cc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f90:	4b26      	ldr	r3, [pc, #152]	; (800702c <HAL_RCC_OscConfig+0x934>)
 8006f92:	69db      	ldr	r3, [r3, #28]
 8006f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d116      	bne.n	8006fca <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f9c:	4b23      	ldr	r3, [pc, #140]	; (800702c <HAL_RCC_OscConfig+0x934>)
 8006f9e:	69db      	ldr	r3, [r3, #28]
 8006fa0:	4a22      	ldr	r2, [pc, #136]	; (800702c <HAL_RCC_OscConfig+0x934>)
 8006fa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fa6:	61d3      	str	r3, [r2, #28]
 8006fa8:	4b20      	ldr	r3, [pc, #128]	; (800702c <HAL_RCC_OscConfig+0x934>)
 8006faa:	69db      	ldr	r3, [r3, #28]
 8006fac:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8006fb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006fb4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8006fb8:	601a      	str	r2, [r3, #0]
 8006fba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006fbe:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8006fc2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fca:	4b1a      	ldr	r3, [pc, #104]	; (8007034 <HAL_RCC_OscConfig+0x93c>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d11a      	bne.n	800700c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006fd6:	4b17      	ldr	r3, [pc, #92]	; (8007034 <HAL_RCC_OscConfig+0x93c>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a16      	ldr	r2, [pc, #88]	; (8007034 <HAL_RCC_OscConfig+0x93c>)
 8006fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fe0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006fe2:	f7fb fc51 	bl	8002888 <HAL_GetTick>
 8006fe6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fea:	e009      	b.n	8007000 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fec:	f7fb fc4c 	bl	8002888 <HAL_GetTick>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006ff6:	1ad3      	subs	r3, r2, r3
 8006ff8:	2b64      	cmp	r3, #100	; 0x64
 8006ffa:	d901      	bls.n	8007000 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8006ffc:	2303      	movs	r3, #3
 8006ffe:	e3b1      	b.n	8007764 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007000:	4b0c      	ldr	r3, [pc, #48]	; (8007034 <HAL_RCC_OscConfig+0x93c>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007008:	2b00      	cmp	r3, #0
 800700a:	d0ef      	beq.n	8006fec <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800700c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007010:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	2b01      	cmp	r3, #1
 800701a:	d10d      	bne.n	8007038 <HAL_RCC_OscConfig+0x940>
 800701c:	4b03      	ldr	r3, [pc, #12]	; (800702c <HAL_RCC_OscConfig+0x934>)
 800701e:	6a1b      	ldr	r3, [r3, #32]
 8007020:	4a02      	ldr	r2, [pc, #8]	; (800702c <HAL_RCC_OscConfig+0x934>)
 8007022:	f043 0301 	orr.w	r3, r3, #1
 8007026:	6213      	str	r3, [r2, #32]
 8007028:	e03c      	b.n	80070a4 <HAL_RCC_OscConfig+0x9ac>
 800702a:	bf00      	nop
 800702c:	40021000 	.word	0x40021000
 8007030:	10908120 	.word	0x10908120
 8007034:	40007000 	.word	0x40007000
 8007038:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800703c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d10c      	bne.n	8007062 <HAL_RCC_OscConfig+0x96a>
 8007048:	4bc1      	ldr	r3, [pc, #772]	; (8007350 <HAL_RCC_OscConfig+0xc58>)
 800704a:	6a1b      	ldr	r3, [r3, #32]
 800704c:	4ac0      	ldr	r2, [pc, #768]	; (8007350 <HAL_RCC_OscConfig+0xc58>)
 800704e:	f023 0301 	bic.w	r3, r3, #1
 8007052:	6213      	str	r3, [r2, #32]
 8007054:	4bbe      	ldr	r3, [pc, #760]	; (8007350 <HAL_RCC_OscConfig+0xc58>)
 8007056:	6a1b      	ldr	r3, [r3, #32]
 8007058:	4abd      	ldr	r2, [pc, #756]	; (8007350 <HAL_RCC_OscConfig+0xc58>)
 800705a:	f023 0304 	bic.w	r3, r3, #4
 800705e:	6213      	str	r3, [r2, #32]
 8007060:	e020      	b.n	80070a4 <HAL_RCC_OscConfig+0x9ac>
 8007062:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007066:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	2b05      	cmp	r3, #5
 8007070:	d10c      	bne.n	800708c <HAL_RCC_OscConfig+0x994>
 8007072:	4bb7      	ldr	r3, [pc, #732]	; (8007350 <HAL_RCC_OscConfig+0xc58>)
 8007074:	6a1b      	ldr	r3, [r3, #32]
 8007076:	4ab6      	ldr	r2, [pc, #728]	; (8007350 <HAL_RCC_OscConfig+0xc58>)
 8007078:	f043 0304 	orr.w	r3, r3, #4
 800707c:	6213      	str	r3, [r2, #32]
 800707e:	4bb4      	ldr	r3, [pc, #720]	; (8007350 <HAL_RCC_OscConfig+0xc58>)
 8007080:	6a1b      	ldr	r3, [r3, #32]
 8007082:	4ab3      	ldr	r2, [pc, #716]	; (8007350 <HAL_RCC_OscConfig+0xc58>)
 8007084:	f043 0301 	orr.w	r3, r3, #1
 8007088:	6213      	str	r3, [r2, #32]
 800708a:	e00b      	b.n	80070a4 <HAL_RCC_OscConfig+0x9ac>
 800708c:	4bb0      	ldr	r3, [pc, #704]	; (8007350 <HAL_RCC_OscConfig+0xc58>)
 800708e:	6a1b      	ldr	r3, [r3, #32]
 8007090:	4aaf      	ldr	r2, [pc, #700]	; (8007350 <HAL_RCC_OscConfig+0xc58>)
 8007092:	f023 0301 	bic.w	r3, r3, #1
 8007096:	6213      	str	r3, [r2, #32]
 8007098:	4bad      	ldr	r3, [pc, #692]	; (8007350 <HAL_RCC_OscConfig+0xc58>)
 800709a:	6a1b      	ldr	r3, [r3, #32]
 800709c:	4aac      	ldr	r2, [pc, #688]	; (8007350 <HAL_RCC_OscConfig+0xc58>)
 800709e:	f023 0304 	bic.w	r3, r3, #4
 80070a2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80070a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80070a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f000 8081 	beq.w	80071b8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070b6:	f7fb fbe7 	bl	8002888 <HAL_GetTick>
 80070ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070be:	e00b      	b.n	80070d8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070c0:	f7fb fbe2 	bl	8002888 <HAL_GetTick>
 80070c4:	4602      	mov	r2, r0
 80070c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80070ca:	1ad3      	subs	r3, r2, r3
 80070cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d901      	bls.n	80070d8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80070d4:	2303      	movs	r3, #3
 80070d6:	e345      	b.n	8007764 <HAL_RCC_OscConfig+0x106c>
 80070d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80070dc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80070e0:	2202      	movs	r2, #2
 80070e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80070e8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	fa93 f2a3 	rbit	r2, r3
 80070f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80070f6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80070fa:	601a      	str	r2, [r3, #0]
 80070fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007100:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007104:	2202      	movs	r2, #2
 8007106:	601a      	str	r2, [r3, #0]
 8007108:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800710c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	fa93 f2a3 	rbit	r2, r3
 8007116:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800711a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800711e:	601a      	str	r2, [r3, #0]
  return result;
 8007120:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007124:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8007128:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800712a:	fab3 f383 	clz	r3, r3
 800712e:	b2db      	uxtb	r3, r3
 8007130:	095b      	lsrs	r3, r3, #5
 8007132:	b2db      	uxtb	r3, r3
 8007134:	f043 0302 	orr.w	r3, r3, #2
 8007138:	b2db      	uxtb	r3, r3
 800713a:	2b02      	cmp	r3, #2
 800713c:	d102      	bne.n	8007144 <HAL_RCC_OscConfig+0xa4c>
 800713e:	4b84      	ldr	r3, [pc, #528]	; (8007350 <HAL_RCC_OscConfig+0xc58>)
 8007140:	6a1b      	ldr	r3, [r3, #32]
 8007142:	e013      	b.n	800716c <HAL_RCC_OscConfig+0xa74>
 8007144:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007148:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800714c:	2202      	movs	r2, #2
 800714e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007150:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007154:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	fa93 f2a3 	rbit	r2, r3
 800715e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007162:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8007166:	601a      	str	r2, [r3, #0]
 8007168:	4b79      	ldr	r3, [pc, #484]	; (8007350 <HAL_RCC_OscConfig+0xc58>)
 800716a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007170:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8007174:	2102      	movs	r1, #2
 8007176:	6011      	str	r1, [r2, #0]
 8007178:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800717c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8007180:	6812      	ldr	r2, [r2, #0]
 8007182:	fa92 f1a2 	rbit	r1, r2
 8007186:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800718a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800718e:	6011      	str	r1, [r2, #0]
  return result;
 8007190:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007194:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8007198:	6812      	ldr	r2, [r2, #0]
 800719a:	fab2 f282 	clz	r2, r2
 800719e:	b2d2      	uxtb	r2, r2
 80071a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071a4:	b2d2      	uxtb	r2, r2
 80071a6:	f002 021f 	and.w	r2, r2, #31
 80071aa:	2101      	movs	r1, #1
 80071ac:	fa01 f202 	lsl.w	r2, r1, r2
 80071b0:	4013      	ands	r3, r2
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d084      	beq.n	80070c0 <HAL_RCC_OscConfig+0x9c8>
 80071b6:	e07f      	b.n	80072b8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071b8:	f7fb fb66 	bl	8002888 <HAL_GetTick>
 80071bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071c0:	e00b      	b.n	80071da <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80071c2:	f7fb fb61 	bl	8002888 <HAL_GetTick>
 80071c6:	4602      	mov	r2, r0
 80071c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80071cc:	1ad3      	subs	r3, r2, r3
 80071ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d901      	bls.n	80071da <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80071d6:	2303      	movs	r3, #3
 80071d8:	e2c4      	b.n	8007764 <HAL_RCC_OscConfig+0x106c>
 80071da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80071de:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80071e2:	2202      	movs	r2, #2
 80071e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80071ea:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	fa93 f2a3 	rbit	r2, r3
 80071f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80071f8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80071fc:	601a      	str	r2, [r3, #0]
 80071fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007202:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8007206:	2202      	movs	r2, #2
 8007208:	601a      	str	r2, [r3, #0]
 800720a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800720e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	fa93 f2a3 	rbit	r2, r3
 8007218:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800721c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8007220:	601a      	str	r2, [r3, #0]
  return result;
 8007222:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007226:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800722a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800722c:	fab3 f383 	clz	r3, r3
 8007230:	b2db      	uxtb	r3, r3
 8007232:	095b      	lsrs	r3, r3, #5
 8007234:	b2db      	uxtb	r3, r3
 8007236:	f043 0302 	orr.w	r3, r3, #2
 800723a:	b2db      	uxtb	r3, r3
 800723c:	2b02      	cmp	r3, #2
 800723e:	d102      	bne.n	8007246 <HAL_RCC_OscConfig+0xb4e>
 8007240:	4b43      	ldr	r3, [pc, #268]	; (8007350 <HAL_RCC_OscConfig+0xc58>)
 8007242:	6a1b      	ldr	r3, [r3, #32]
 8007244:	e013      	b.n	800726e <HAL_RCC_OscConfig+0xb76>
 8007246:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800724a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800724e:	2202      	movs	r2, #2
 8007250:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007252:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007256:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	fa93 f2a3 	rbit	r2, r3
 8007260:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007264:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8007268:	601a      	str	r2, [r3, #0]
 800726a:	4b39      	ldr	r3, [pc, #228]	; (8007350 <HAL_RCC_OscConfig+0xc58>)
 800726c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007272:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8007276:	2102      	movs	r1, #2
 8007278:	6011      	str	r1, [r2, #0]
 800727a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800727e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8007282:	6812      	ldr	r2, [r2, #0]
 8007284:	fa92 f1a2 	rbit	r1, r2
 8007288:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800728c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8007290:	6011      	str	r1, [r2, #0]
  return result;
 8007292:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007296:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800729a:	6812      	ldr	r2, [r2, #0]
 800729c:	fab2 f282 	clz	r2, r2
 80072a0:	b2d2      	uxtb	r2, r2
 80072a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072a6:	b2d2      	uxtb	r2, r2
 80072a8:	f002 021f 	and.w	r2, r2, #31
 80072ac:	2101      	movs	r1, #1
 80072ae:	fa01 f202 	lsl.w	r2, r1, r2
 80072b2:	4013      	ands	r3, r2
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d184      	bne.n	80071c2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80072b8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d105      	bne.n	80072cc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072c0:	4b23      	ldr	r3, [pc, #140]	; (8007350 <HAL_RCC_OscConfig+0xc58>)
 80072c2:	69db      	ldr	r3, [r3, #28]
 80072c4:	4a22      	ldr	r2, [pc, #136]	; (8007350 <HAL_RCC_OscConfig+0xc58>)
 80072c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072ca:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80072cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80072d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	69db      	ldr	r3, [r3, #28]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	f000 8242 	beq.w	8007762 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80072de:	4b1c      	ldr	r3, [pc, #112]	; (8007350 <HAL_RCC_OscConfig+0xc58>)
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	f003 030c 	and.w	r3, r3, #12
 80072e6:	2b08      	cmp	r3, #8
 80072e8:	f000 8213 	beq.w	8007712 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80072ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80072f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	69db      	ldr	r3, [r3, #28]
 80072f8:	2b02      	cmp	r3, #2
 80072fa:	f040 8162 	bne.w	80075c2 <HAL_RCC_OscConfig+0xeca>
 80072fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007302:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8007306:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800730a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800730c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007310:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	fa93 f2a3 	rbit	r2, r3
 800731a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800731e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8007322:	601a      	str	r2, [r3, #0]
  return result;
 8007324:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007328:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800732c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800732e:	fab3 f383 	clz	r3, r3
 8007332:	b2db      	uxtb	r3, r3
 8007334:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007338:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800733c:	009b      	lsls	r3, r3, #2
 800733e:	461a      	mov	r2, r3
 8007340:	2300      	movs	r3, #0
 8007342:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007344:	f7fb faa0 	bl	8002888 <HAL_GetTick>
 8007348:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800734c:	e00c      	b.n	8007368 <HAL_RCC_OscConfig+0xc70>
 800734e:	bf00      	nop
 8007350:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007354:	f7fb fa98 	bl	8002888 <HAL_GetTick>
 8007358:	4602      	mov	r2, r0
 800735a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800735e:	1ad3      	subs	r3, r2, r3
 8007360:	2b02      	cmp	r3, #2
 8007362:	d901      	bls.n	8007368 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8007364:	2303      	movs	r3, #3
 8007366:	e1fd      	b.n	8007764 <HAL_RCC_OscConfig+0x106c>
 8007368:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800736c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8007370:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007374:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007376:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800737a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	fa93 f2a3 	rbit	r2, r3
 8007384:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007388:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800738c:	601a      	str	r2, [r3, #0]
  return result;
 800738e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007392:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8007396:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007398:	fab3 f383 	clz	r3, r3
 800739c:	b2db      	uxtb	r3, r3
 800739e:	095b      	lsrs	r3, r3, #5
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	f043 0301 	orr.w	r3, r3, #1
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d102      	bne.n	80073b2 <HAL_RCC_OscConfig+0xcba>
 80073ac:	4bb0      	ldr	r3, [pc, #704]	; (8007670 <HAL_RCC_OscConfig+0xf78>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	e027      	b.n	8007402 <HAL_RCC_OscConfig+0xd0a>
 80073b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073b6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80073ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80073be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073c4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	fa93 f2a3 	rbit	r2, r3
 80073ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073d2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80073d6:	601a      	str	r2, [r3, #0]
 80073d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073dc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80073e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80073e4:	601a      	str	r2, [r3, #0]
 80073e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073ea:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	fa93 f2a3 	rbit	r2, r3
 80073f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073f8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80073fc:	601a      	str	r2, [r3, #0]
 80073fe:	4b9c      	ldr	r3, [pc, #624]	; (8007670 <HAL_RCC_OscConfig+0xf78>)
 8007400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007402:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007406:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800740a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800740e:	6011      	str	r1, [r2, #0]
 8007410:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007414:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8007418:	6812      	ldr	r2, [r2, #0]
 800741a:	fa92 f1a2 	rbit	r1, r2
 800741e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007422:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8007426:	6011      	str	r1, [r2, #0]
  return result;
 8007428:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800742c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8007430:	6812      	ldr	r2, [r2, #0]
 8007432:	fab2 f282 	clz	r2, r2
 8007436:	b2d2      	uxtb	r2, r2
 8007438:	f042 0220 	orr.w	r2, r2, #32
 800743c:	b2d2      	uxtb	r2, r2
 800743e:	f002 021f 	and.w	r2, r2, #31
 8007442:	2101      	movs	r1, #1
 8007444:	fa01 f202 	lsl.w	r2, r1, r2
 8007448:	4013      	ands	r3, r2
 800744a:	2b00      	cmp	r3, #0
 800744c:	d182      	bne.n	8007354 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800744e:	4b88      	ldr	r3, [pc, #544]	; (8007670 <HAL_RCC_OscConfig+0xf78>)
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800745a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007462:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007466:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	6a1b      	ldr	r3, [r3, #32]
 800746e:	430b      	orrs	r3, r1
 8007470:	497f      	ldr	r1, [pc, #508]	; (8007670 <HAL_RCC_OscConfig+0xf78>)
 8007472:	4313      	orrs	r3, r2
 8007474:	604b      	str	r3, [r1, #4]
 8007476:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800747a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800747e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007482:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007484:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007488:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	fa93 f2a3 	rbit	r2, r3
 8007492:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007496:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800749a:	601a      	str	r2, [r3, #0]
  return result;
 800749c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074a0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80074a4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074a6:	fab3 f383 	clz	r3, r3
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80074b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	461a      	mov	r2, r3
 80074b8:	2301      	movs	r3, #1
 80074ba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074bc:	f7fb f9e4 	bl	8002888 <HAL_GetTick>
 80074c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80074c4:	e009      	b.n	80074da <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074c6:	f7fb f9df 	bl	8002888 <HAL_GetTick>
 80074ca:	4602      	mov	r2, r0
 80074cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80074d0:	1ad3      	subs	r3, r2, r3
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	d901      	bls.n	80074da <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80074d6:	2303      	movs	r3, #3
 80074d8:	e144      	b.n	8007764 <HAL_RCC_OscConfig+0x106c>
 80074da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074de:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80074e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80074e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074ec:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	fa93 f2a3 	rbit	r2, r3
 80074f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074fa:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80074fe:	601a      	str	r2, [r3, #0]
  return result;
 8007500:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007504:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8007508:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800750a:	fab3 f383 	clz	r3, r3
 800750e:	b2db      	uxtb	r3, r3
 8007510:	095b      	lsrs	r3, r3, #5
 8007512:	b2db      	uxtb	r3, r3
 8007514:	f043 0301 	orr.w	r3, r3, #1
 8007518:	b2db      	uxtb	r3, r3
 800751a:	2b01      	cmp	r3, #1
 800751c:	d102      	bne.n	8007524 <HAL_RCC_OscConfig+0xe2c>
 800751e:	4b54      	ldr	r3, [pc, #336]	; (8007670 <HAL_RCC_OscConfig+0xf78>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	e027      	b.n	8007574 <HAL_RCC_OscConfig+0xe7c>
 8007524:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007528:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800752c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007530:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007536:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	fa93 f2a3 	rbit	r2, r3
 8007540:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007544:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8007548:	601a      	str	r2, [r3, #0]
 800754a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800754e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8007552:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007556:	601a      	str	r2, [r3, #0]
 8007558:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800755c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	fa93 f2a3 	rbit	r2, r3
 8007566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800756a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800756e:	601a      	str	r2, [r3, #0]
 8007570:	4b3f      	ldr	r3, [pc, #252]	; (8007670 <HAL_RCC_OscConfig+0xf78>)
 8007572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007574:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007578:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800757c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007580:	6011      	str	r1, [r2, #0]
 8007582:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007586:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800758a:	6812      	ldr	r2, [r2, #0]
 800758c:	fa92 f1a2 	rbit	r1, r2
 8007590:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007594:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8007598:	6011      	str	r1, [r2, #0]
  return result;
 800759a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800759e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80075a2:	6812      	ldr	r2, [r2, #0]
 80075a4:	fab2 f282 	clz	r2, r2
 80075a8:	b2d2      	uxtb	r2, r2
 80075aa:	f042 0220 	orr.w	r2, r2, #32
 80075ae:	b2d2      	uxtb	r2, r2
 80075b0:	f002 021f 	and.w	r2, r2, #31
 80075b4:	2101      	movs	r1, #1
 80075b6:	fa01 f202 	lsl.w	r2, r1, r2
 80075ba:	4013      	ands	r3, r2
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d082      	beq.n	80074c6 <HAL_RCC_OscConfig+0xdce>
 80075c0:	e0cf      	b.n	8007762 <HAL_RCC_OscConfig+0x106a>
 80075c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075c6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80075ca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80075ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075d4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	fa93 f2a3 	rbit	r2, r3
 80075de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075e2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80075e6:	601a      	str	r2, [r3, #0]
  return result;
 80075e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075ec:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80075f0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075f2:	fab3 f383 	clz	r3, r3
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80075fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	461a      	mov	r2, r3
 8007604:	2300      	movs	r3, #0
 8007606:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007608:	f7fb f93e 	bl	8002888 <HAL_GetTick>
 800760c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007610:	e009      	b.n	8007626 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007612:	f7fb f939 	bl	8002888 <HAL_GetTick>
 8007616:	4602      	mov	r2, r0
 8007618:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	2b02      	cmp	r3, #2
 8007620:	d901      	bls.n	8007626 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8007622:	2303      	movs	r3, #3
 8007624:	e09e      	b.n	8007764 <HAL_RCC_OscConfig+0x106c>
 8007626:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800762a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800762e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007632:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007634:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007638:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	fa93 f2a3 	rbit	r2, r3
 8007642:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007646:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800764a:	601a      	str	r2, [r3, #0]
  return result;
 800764c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007650:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8007654:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007656:	fab3 f383 	clz	r3, r3
 800765a:	b2db      	uxtb	r3, r3
 800765c:	095b      	lsrs	r3, r3, #5
 800765e:	b2db      	uxtb	r3, r3
 8007660:	f043 0301 	orr.w	r3, r3, #1
 8007664:	b2db      	uxtb	r3, r3
 8007666:	2b01      	cmp	r3, #1
 8007668:	d104      	bne.n	8007674 <HAL_RCC_OscConfig+0xf7c>
 800766a:	4b01      	ldr	r3, [pc, #4]	; (8007670 <HAL_RCC_OscConfig+0xf78>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	e029      	b.n	80076c4 <HAL_RCC_OscConfig+0xfcc>
 8007670:	40021000 	.word	0x40021000
 8007674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007678:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800767c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007680:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007682:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007686:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	fa93 f2a3 	rbit	r2, r3
 8007690:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007694:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8007698:	601a      	str	r2, [r3, #0]
 800769a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800769e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80076a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80076a6:	601a      	str	r2, [r3, #0]
 80076a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076ac:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	fa93 f2a3 	rbit	r2, r3
 80076b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076ba:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80076be:	601a      	str	r2, [r3, #0]
 80076c0:	4b2b      	ldr	r3, [pc, #172]	; (8007770 <HAL_RCC_OscConfig+0x1078>)
 80076c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80076c8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80076cc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80076d0:	6011      	str	r1, [r2, #0]
 80076d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80076d6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80076da:	6812      	ldr	r2, [r2, #0]
 80076dc:	fa92 f1a2 	rbit	r1, r2
 80076e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80076e4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80076e8:	6011      	str	r1, [r2, #0]
  return result;
 80076ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80076ee:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80076f2:	6812      	ldr	r2, [r2, #0]
 80076f4:	fab2 f282 	clz	r2, r2
 80076f8:	b2d2      	uxtb	r2, r2
 80076fa:	f042 0220 	orr.w	r2, r2, #32
 80076fe:	b2d2      	uxtb	r2, r2
 8007700:	f002 021f 	and.w	r2, r2, #31
 8007704:	2101      	movs	r1, #1
 8007706:	fa01 f202 	lsl.w	r2, r1, r2
 800770a:	4013      	ands	r3, r2
 800770c:	2b00      	cmp	r3, #0
 800770e:	d180      	bne.n	8007612 <HAL_RCC_OscConfig+0xf1a>
 8007710:	e027      	b.n	8007762 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007712:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007716:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	69db      	ldr	r3, [r3, #28]
 800771e:	2b01      	cmp	r3, #1
 8007720:	d101      	bne.n	8007726 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	e01e      	b.n	8007764 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007726:	4b12      	ldr	r3, [pc, #72]	; (8007770 <HAL_RCC_OscConfig+0x1078>)
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800772e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8007732:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007736:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800773a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	6a1b      	ldr	r3, [r3, #32]
 8007742:	429a      	cmp	r2, r3
 8007744:	d10b      	bne.n	800775e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8007746:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800774a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800774e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007752:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800775a:	429a      	cmp	r2, r3
 800775c:	d001      	beq.n	8007762 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	e000      	b.n	8007764 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	40021000 	.word	0x40021000

08007774 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b09e      	sub	sp, #120	; 0x78
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800777e:	2300      	movs	r3, #0
 8007780:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d101      	bne.n	800778c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007788:	2301      	movs	r3, #1
 800778a:	e162      	b.n	8007a52 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800778c:	4b90      	ldr	r3, [pc, #576]	; (80079d0 <HAL_RCC_ClockConfig+0x25c>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f003 0307 	and.w	r3, r3, #7
 8007794:	683a      	ldr	r2, [r7, #0]
 8007796:	429a      	cmp	r2, r3
 8007798:	d910      	bls.n	80077bc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800779a:	4b8d      	ldr	r3, [pc, #564]	; (80079d0 <HAL_RCC_ClockConfig+0x25c>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f023 0207 	bic.w	r2, r3, #7
 80077a2:	498b      	ldr	r1, [pc, #556]	; (80079d0 <HAL_RCC_ClockConfig+0x25c>)
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80077aa:	4b89      	ldr	r3, [pc, #548]	; (80079d0 <HAL_RCC_ClockConfig+0x25c>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f003 0307 	and.w	r3, r3, #7
 80077b2:	683a      	ldr	r2, [r7, #0]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d001      	beq.n	80077bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80077b8:	2301      	movs	r3, #1
 80077ba:	e14a      	b.n	8007a52 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f003 0302 	and.w	r3, r3, #2
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d008      	beq.n	80077da <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077c8:	4b82      	ldr	r3, [pc, #520]	; (80079d4 <HAL_RCC_ClockConfig+0x260>)
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	497f      	ldr	r1, [pc, #508]	; (80079d4 <HAL_RCC_ClockConfig+0x260>)
 80077d6:	4313      	orrs	r3, r2
 80077d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f003 0301 	and.w	r3, r3, #1
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	f000 80dc 	beq.w	80079a0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d13c      	bne.n	800786a <HAL_RCC_ClockConfig+0xf6>
 80077f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80077f4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80077f8:	fa93 f3a3 	rbit	r3, r3
 80077fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80077fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007800:	fab3 f383 	clz	r3, r3
 8007804:	b2db      	uxtb	r3, r3
 8007806:	095b      	lsrs	r3, r3, #5
 8007808:	b2db      	uxtb	r3, r3
 800780a:	f043 0301 	orr.w	r3, r3, #1
 800780e:	b2db      	uxtb	r3, r3
 8007810:	2b01      	cmp	r3, #1
 8007812:	d102      	bne.n	800781a <HAL_RCC_ClockConfig+0xa6>
 8007814:	4b6f      	ldr	r3, [pc, #444]	; (80079d4 <HAL_RCC_ClockConfig+0x260>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	e00f      	b.n	800783a <HAL_RCC_ClockConfig+0xc6>
 800781a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800781e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007820:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007822:	fa93 f3a3 	rbit	r3, r3
 8007826:	667b      	str	r3, [r7, #100]	; 0x64
 8007828:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800782c:	663b      	str	r3, [r7, #96]	; 0x60
 800782e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007830:	fa93 f3a3 	rbit	r3, r3
 8007834:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007836:	4b67      	ldr	r3, [pc, #412]	; (80079d4 <HAL_RCC_ClockConfig+0x260>)
 8007838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800783e:	65ba      	str	r2, [r7, #88]	; 0x58
 8007840:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007842:	fa92 f2a2 	rbit	r2, r2
 8007846:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8007848:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800784a:	fab2 f282 	clz	r2, r2
 800784e:	b2d2      	uxtb	r2, r2
 8007850:	f042 0220 	orr.w	r2, r2, #32
 8007854:	b2d2      	uxtb	r2, r2
 8007856:	f002 021f 	and.w	r2, r2, #31
 800785a:	2101      	movs	r1, #1
 800785c:	fa01 f202 	lsl.w	r2, r1, r2
 8007860:	4013      	ands	r3, r2
 8007862:	2b00      	cmp	r3, #0
 8007864:	d17b      	bne.n	800795e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	e0f3      	b.n	8007a52 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	2b02      	cmp	r3, #2
 8007870:	d13c      	bne.n	80078ec <HAL_RCC_ClockConfig+0x178>
 8007872:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007876:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007878:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800787a:	fa93 f3a3 	rbit	r3, r3
 800787e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8007880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007882:	fab3 f383 	clz	r3, r3
 8007886:	b2db      	uxtb	r3, r3
 8007888:	095b      	lsrs	r3, r3, #5
 800788a:	b2db      	uxtb	r3, r3
 800788c:	f043 0301 	orr.w	r3, r3, #1
 8007890:	b2db      	uxtb	r3, r3
 8007892:	2b01      	cmp	r3, #1
 8007894:	d102      	bne.n	800789c <HAL_RCC_ClockConfig+0x128>
 8007896:	4b4f      	ldr	r3, [pc, #316]	; (80079d4 <HAL_RCC_ClockConfig+0x260>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	e00f      	b.n	80078bc <HAL_RCC_ClockConfig+0x148>
 800789c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80078a0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078a4:	fa93 f3a3 	rbit	r3, r3
 80078a8:	647b      	str	r3, [r7, #68]	; 0x44
 80078aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80078ae:	643b      	str	r3, [r7, #64]	; 0x40
 80078b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078b2:	fa93 f3a3 	rbit	r3, r3
 80078b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078b8:	4b46      	ldr	r3, [pc, #280]	; (80079d4 <HAL_RCC_ClockConfig+0x260>)
 80078ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80078c0:	63ba      	str	r2, [r7, #56]	; 0x38
 80078c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078c4:	fa92 f2a2 	rbit	r2, r2
 80078c8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80078ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078cc:	fab2 f282 	clz	r2, r2
 80078d0:	b2d2      	uxtb	r2, r2
 80078d2:	f042 0220 	orr.w	r2, r2, #32
 80078d6:	b2d2      	uxtb	r2, r2
 80078d8:	f002 021f 	and.w	r2, r2, #31
 80078dc:	2101      	movs	r1, #1
 80078de:	fa01 f202 	lsl.w	r2, r1, r2
 80078e2:	4013      	ands	r3, r2
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d13a      	bne.n	800795e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	e0b2      	b.n	8007a52 <HAL_RCC_ClockConfig+0x2de>
 80078ec:	2302      	movs	r3, #2
 80078ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f2:	fa93 f3a3 	rbit	r3, r3
 80078f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80078f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078fa:	fab3 f383 	clz	r3, r3
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	095b      	lsrs	r3, r3, #5
 8007902:	b2db      	uxtb	r3, r3
 8007904:	f043 0301 	orr.w	r3, r3, #1
 8007908:	b2db      	uxtb	r3, r3
 800790a:	2b01      	cmp	r3, #1
 800790c:	d102      	bne.n	8007914 <HAL_RCC_ClockConfig+0x1a0>
 800790e:	4b31      	ldr	r3, [pc, #196]	; (80079d4 <HAL_RCC_ClockConfig+0x260>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	e00d      	b.n	8007930 <HAL_RCC_ClockConfig+0x1bc>
 8007914:	2302      	movs	r3, #2
 8007916:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800791a:	fa93 f3a3 	rbit	r3, r3
 800791e:	627b      	str	r3, [r7, #36]	; 0x24
 8007920:	2302      	movs	r3, #2
 8007922:	623b      	str	r3, [r7, #32]
 8007924:	6a3b      	ldr	r3, [r7, #32]
 8007926:	fa93 f3a3 	rbit	r3, r3
 800792a:	61fb      	str	r3, [r7, #28]
 800792c:	4b29      	ldr	r3, [pc, #164]	; (80079d4 <HAL_RCC_ClockConfig+0x260>)
 800792e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007930:	2202      	movs	r2, #2
 8007932:	61ba      	str	r2, [r7, #24]
 8007934:	69ba      	ldr	r2, [r7, #24]
 8007936:	fa92 f2a2 	rbit	r2, r2
 800793a:	617a      	str	r2, [r7, #20]
  return result;
 800793c:	697a      	ldr	r2, [r7, #20]
 800793e:	fab2 f282 	clz	r2, r2
 8007942:	b2d2      	uxtb	r2, r2
 8007944:	f042 0220 	orr.w	r2, r2, #32
 8007948:	b2d2      	uxtb	r2, r2
 800794a:	f002 021f 	and.w	r2, r2, #31
 800794e:	2101      	movs	r1, #1
 8007950:	fa01 f202 	lsl.w	r2, r1, r2
 8007954:	4013      	ands	r3, r2
 8007956:	2b00      	cmp	r3, #0
 8007958:	d101      	bne.n	800795e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	e079      	b.n	8007a52 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800795e:	4b1d      	ldr	r3, [pc, #116]	; (80079d4 <HAL_RCC_ClockConfig+0x260>)
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	f023 0203 	bic.w	r2, r3, #3
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	491a      	ldr	r1, [pc, #104]	; (80079d4 <HAL_RCC_ClockConfig+0x260>)
 800796c:	4313      	orrs	r3, r2
 800796e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007970:	f7fa ff8a 	bl	8002888 <HAL_GetTick>
 8007974:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007976:	e00a      	b.n	800798e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007978:	f7fa ff86 	bl	8002888 <HAL_GetTick>
 800797c:	4602      	mov	r2, r0
 800797e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007980:	1ad3      	subs	r3, r2, r3
 8007982:	f241 3288 	movw	r2, #5000	; 0x1388
 8007986:	4293      	cmp	r3, r2
 8007988:	d901      	bls.n	800798e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800798a:	2303      	movs	r3, #3
 800798c:	e061      	b.n	8007a52 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800798e:	4b11      	ldr	r3, [pc, #68]	; (80079d4 <HAL_RCC_ClockConfig+0x260>)
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	f003 020c 	and.w	r2, r3, #12
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	009b      	lsls	r3, r3, #2
 800799c:	429a      	cmp	r2, r3
 800799e:	d1eb      	bne.n	8007978 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80079a0:	4b0b      	ldr	r3, [pc, #44]	; (80079d0 <HAL_RCC_ClockConfig+0x25c>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f003 0307 	and.w	r3, r3, #7
 80079a8:	683a      	ldr	r2, [r7, #0]
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d214      	bcs.n	80079d8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079ae:	4b08      	ldr	r3, [pc, #32]	; (80079d0 <HAL_RCC_ClockConfig+0x25c>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f023 0207 	bic.w	r2, r3, #7
 80079b6:	4906      	ldr	r1, [pc, #24]	; (80079d0 <HAL_RCC_ClockConfig+0x25c>)
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	4313      	orrs	r3, r2
 80079bc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80079be:	4b04      	ldr	r3, [pc, #16]	; (80079d0 <HAL_RCC_ClockConfig+0x25c>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f003 0307 	and.w	r3, r3, #7
 80079c6:	683a      	ldr	r2, [r7, #0]
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d005      	beq.n	80079d8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	e040      	b.n	8007a52 <HAL_RCC_ClockConfig+0x2de>
 80079d0:	40022000 	.word	0x40022000
 80079d4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f003 0304 	and.w	r3, r3, #4
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d008      	beq.n	80079f6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80079e4:	4b1d      	ldr	r3, [pc, #116]	; (8007a5c <HAL_RCC_ClockConfig+0x2e8>)
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	68db      	ldr	r3, [r3, #12]
 80079f0:	491a      	ldr	r1, [pc, #104]	; (8007a5c <HAL_RCC_ClockConfig+0x2e8>)
 80079f2:	4313      	orrs	r3, r2
 80079f4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f003 0308 	and.w	r3, r3, #8
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d009      	beq.n	8007a16 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007a02:	4b16      	ldr	r3, [pc, #88]	; (8007a5c <HAL_RCC_ClockConfig+0x2e8>)
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	691b      	ldr	r3, [r3, #16]
 8007a0e:	00db      	lsls	r3, r3, #3
 8007a10:	4912      	ldr	r1, [pc, #72]	; (8007a5c <HAL_RCC_ClockConfig+0x2e8>)
 8007a12:	4313      	orrs	r3, r2
 8007a14:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8007a16:	f000 f829 	bl	8007a6c <HAL_RCC_GetSysClockFreq>
 8007a1a:	4601      	mov	r1, r0
 8007a1c:	4b0f      	ldr	r3, [pc, #60]	; (8007a5c <HAL_RCC_ClockConfig+0x2e8>)
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a24:	22f0      	movs	r2, #240	; 0xf0
 8007a26:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a28:	693a      	ldr	r2, [r7, #16]
 8007a2a:	fa92 f2a2 	rbit	r2, r2
 8007a2e:	60fa      	str	r2, [r7, #12]
  return result;
 8007a30:	68fa      	ldr	r2, [r7, #12]
 8007a32:	fab2 f282 	clz	r2, r2
 8007a36:	b2d2      	uxtb	r2, r2
 8007a38:	40d3      	lsrs	r3, r2
 8007a3a:	4a09      	ldr	r2, [pc, #36]	; (8007a60 <HAL_RCC_ClockConfig+0x2ec>)
 8007a3c:	5cd3      	ldrb	r3, [r2, r3]
 8007a3e:	fa21 f303 	lsr.w	r3, r1, r3
 8007a42:	4a08      	ldr	r2, [pc, #32]	; (8007a64 <HAL_RCC_ClockConfig+0x2f0>)
 8007a44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8007a46:	4b08      	ldr	r3, [pc, #32]	; (8007a68 <HAL_RCC_ClockConfig+0x2f4>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f7fa fed8 	bl	8002800 <HAL_InitTick>
  
  return HAL_OK;
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3778      	adds	r7, #120	; 0x78
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	bf00      	nop
 8007a5c:	40021000 	.word	0x40021000
 8007a60:	0800bd60 	.word	0x0800bd60
 8007a64:	2000000c 	.word	0x2000000c
 8007a68:	20000010 	.word	0x20000010

08007a6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b08b      	sub	sp, #44	; 0x2c
 8007a70:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007a72:	2300      	movs	r3, #0
 8007a74:	61fb      	str	r3, [r7, #28]
 8007a76:	2300      	movs	r3, #0
 8007a78:	61bb      	str	r3, [r7, #24]
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8007a7e:	2300      	movs	r3, #0
 8007a80:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007a82:	2300      	movs	r3, #0
 8007a84:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8007a86:	4b29      	ldr	r3, [pc, #164]	; (8007b2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	f003 030c 	and.w	r3, r3, #12
 8007a92:	2b04      	cmp	r3, #4
 8007a94:	d002      	beq.n	8007a9c <HAL_RCC_GetSysClockFreq+0x30>
 8007a96:	2b08      	cmp	r3, #8
 8007a98:	d003      	beq.n	8007aa2 <HAL_RCC_GetSysClockFreq+0x36>
 8007a9a:	e03c      	b.n	8007b16 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007a9c:	4b24      	ldr	r3, [pc, #144]	; (8007b30 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007a9e:	623b      	str	r3, [r7, #32]
      break;
 8007aa0:	e03c      	b.n	8007b1c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8007aa8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8007aac:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007aae:	68ba      	ldr	r2, [r7, #8]
 8007ab0:	fa92 f2a2 	rbit	r2, r2
 8007ab4:	607a      	str	r2, [r7, #4]
  return result;
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	fab2 f282 	clz	r2, r2
 8007abc:	b2d2      	uxtb	r2, r2
 8007abe:	40d3      	lsrs	r3, r2
 8007ac0:	4a1c      	ldr	r2, [pc, #112]	; (8007b34 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007ac2:	5cd3      	ldrb	r3, [r2, r3]
 8007ac4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8007ac6:	4b19      	ldr	r3, [pc, #100]	; (8007b2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8007ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aca:	f003 030f 	and.w	r3, r3, #15
 8007ace:	220f      	movs	r2, #15
 8007ad0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ad2:	693a      	ldr	r2, [r7, #16]
 8007ad4:	fa92 f2a2 	rbit	r2, r2
 8007ad8:	60fa      	str	r2, [r7, #12]
  return result;
 8007ada:	68fa      	ldr	r2, [r7, #12]
 8007adc:	fab2 f282 	clz	r2, r2
 8007ae0:	b2d2      	uxtb	r2, r2
 8007ae2:	40d3      	lsrs	r3, r2
 8007ae4:	4a14      	ldr	r2, [pc, #80]	; (8007b38 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007ae6:	5cd3      	ldrb	r3, [r2, r3]
 8007ae8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8007aea:	69fb      	ldr	r3, [r7, #28]
 8007aec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d008      	beq.n	8007b06 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007af4:	4a0e      	ldr	r2, [pc, #56]	; (8007b30 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007af6:	69bb      	ldr	r3, [r7, #24]
 8007af8:	fbb2 f2f3 	udiv	r2, r2, r3
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	fb02 f303 	mul.w	r3, r2, r3
 8007b02:	627b      	str	r3, [r7, #36]	; 0x24
 8007b04:	e004      	b.n	8007b10 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	4a0c      	ldr	r2, [pc, #48]	; (8007b3c <HAL_RCC_GetSysClockFreq+0xd0>)
 8007b0a:	fb02 f303 	mul.w	r3, r2, r3
 8007b0e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8007b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b12:	623b      	str	r3, [r7, #32]
      break;
 8007b14:	e002      	b.n	8007b1c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007b16:	4b06      	ldr	r3, [pc, #24]	; (8007b30 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007b18:	623b      	str	r3, [r7, #32]
      break;
 8007b1a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b1c:	6a3b      	ldr	r3, [r7, #32]
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	372c      	adds	r7, #44	; 0x2c
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr
 8007b2a:	bf00      	nop
 8007b2c:	40021000 	.word	0x40021000
 8007b30:	007a1200 	.word	0x007a1200
 8007b34:	0800bd78 	.word	0x0800bd78
 8007b38:	0800bd88 	.word	0x0800bd88
 8007b3c:	003d0900 	.word	0x003d0900

08007b40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b40:	b480      	push	{r7}
 8007b42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b44:	4b03      	ldr	r3, [pc, #12]	; (8007b54 <HAL_RCC_GetHCLKFreq+0x14>)
 8007b46:	681b      	ldr	r3, [r3, #0]
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr
 8007b52:	bf00      	nop
 8007b54:	2000000c 	.word	0x2000000c

08007b58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8007b5e:	f7ff ffef 	bl	8007b40 <HAL_RCC_GetHCLKFreq>
 8007b62:	4601      	mov	r1, r0
 8007b64:	4b0b      	ldr	r3, [pc, #44]	; (8007b94 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007b6c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007b70:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	fa92 f2a2 	rbit	r2, r2
 8007b78:	603a      	str	r2, [r7, #0]
  return result;
 8007b7a:	683a      	ldr	r2, [r7, #0]
 8007b7c:	fab2 f282 	clz	r2, r2
 8007b80:	b2d2      	uxtb	r2, r2
 8007b82:	40d3      	lsrs	r3, r2
 8007b84:	4a04      	ldr	r2, [pc, #16]	; (8007b98 <HAL_RCC_GetPCLK1Freq+0x40>)
 8007b86:	5cd3      	ldrb	r3, [r2, r3]
 8007b88:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3708      	adds	r7, #8
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	40021000 	.word	0x40021000
 8007b98:	0800bd70 	.word	0x0800bd70

08007b9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b082      	sub	sp, #8
 8007ba0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8007ba2:	f7ff ffcd 	bl	8007b40 <HAL_RCC_GetHCLKFreq>
 8007ba6:	4601      	mov	r1, r0
 8007ba8:	4b0b      	ldr	r3, [pc, #44]	; (8007bd8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8007bb0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007bb4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bb6:	687a      	ldr	r2, [r7, #4]
 8007bb8:	fa92 f2a2 	rbit	r2, r2
 8007bbc:	603a      	str	r2, [r7, #0]
  return result;
 8007bbe:	683a      	ldr	r2, [r7, #0]
 8007bc0:	fab2 f282 	clz	r2, r2
 8007bc4:	b2d2      	uxtb	r2, r2
 8007bc6:	40d3      	lsrs	r3, r2
 8007bc8:	4a04      	ldr	r2, [pc, #16]	; (8007bdc <HAL_RCC_GetPCLK2Freq+0x40>)
 8007bca:	5cd3      	ldrb	r3, [r2, r3]
 8007bcc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3708      	adds	r7, #8
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}
 8007bd8:	40021000 	.word	0x40021000
 8007bdc:	0800bd70 	.word	0x0800bd70

08007be0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b092      	sub	sp, #72	; 0x48
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007be8:	2300      	movs	r3, #0
 8007bea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8007bec:	2300      	movs	r3, #0
 8007bee:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	f000 80d4 	beq.w	8007dac <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c04:	4b4e      	ldr	r3, [pc, #312]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c06:	69db      	ldr	r3, [r3, #28]
 8007c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d10e      	bne.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c10:	4b4b      	ldr	r3, [pc, #300]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c12:	69db      	ldr	r3, [r3, #28]
 8007c14:	4a4a      	ldr	r2, [pc, #296]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c1a:	61d3      	str	r3, [r2, #28]
 8007c1c:	4b48      	ldr	r3, [pc, #288]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c1e:	69db      	ldr	r3, [r3, #28]
 8007c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c24:	60bb      	str	r3, [r7, #8]
 8007c26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c2e:	4b45      	ldr	r3, [pc, #276]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d118      	bne.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007c3a:	4b42      	ldr	r3, [pc, #264]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a41      	ldr	r2, [pc, #260]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c44:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c46:	f7fa fe1f 	bl	8002888 <HAL_GetTick>
 8007c4a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c4c:	e008      	b.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c4e:	f7fa fe1b 	bl	8002888 <HAL_GetTick>
 8007c52:	4602      	mov	r2, r0
 8007c54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c56:	1ad3      	subs	r3, r2, r3
 8007c58:	2b64      	cmp	r3, #100	; 0x64
 8007c5a:	d901      	bls.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8007c5c:	2303      	movs	r3, #3
 8007c5e:	e169      	b.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c60:	4b38      	ldr	r3, [pc, #224]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d0f0      	beq.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007c6c:	4b34      	ldr	r3, [pc, #208]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c6e:	6a1b      	ldr	r3, [r3, #32]
 8007c70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c74:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	f000 8084 	beq.w	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d07c      	beq.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007c8c:	4b2c      	ldr	r3, [pc, #176]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c8e:	6a1b      	ldr	r3, [r3, #32]
 8007c90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007c9a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c9e:	fa93 f3a3 	rbit	r3, r3
 8007ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007ca6:	fab3 f383 	clz	r3, r3
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	461a      	mov	r2, r3
 8007cae:	4b26      	ldr	r3, [pc, #152]	; (8007d48 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007cb0:	4413      	add	r3, r2
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	6013      	str	r3, [r2, #0]
 8007cba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007cbe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc2:	fa93 f3a3 	rbit	r3, r3
 8007cc6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8007cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007cca:	fab3 f383 	clz	r3, r3
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	4b1d      	ldr	r3, [pc, #116]	; (8007d48 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007cd4:	4413      	add	r3, r2
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	461a      	mov	r2, r3
 8007cda:	2300      	movs	r3, #0
 8007cdc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007cde:	4a18      	ldr	r2, [pc, #96]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ce2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ce6:	f003 0301 	and.w	r3, r3, #1
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d04b      	beq.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cee:	f7fa fdcb 	bl	8002888 <HAL_GetTick>
 8007cf2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cf4:	e00a      	b.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cf6:	f7fa fdc7 	bl	8002888 <HAL_GetTick>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cfe:	1ad3      	subs	r3, r2, r3
 8007d00:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d901      	bls.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8007d08:	2303      	movs	r3, #3
 8007d0a:	e113      	b.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8007d0c:	2302      	movs	r3, #2
 8007d0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d12:	fa93 f3a3 	rbit	r3, r3
 8007d16:	627b      	str	r3, [r7, #36]	; 0x24
 8007d18:	2302      	movs	r3, #2
 8007d1a:	623b      	str	r3, [r7, #32]
 8007d1c:	6a3b      	ldr	r3, [r7, #32]
 8007d1e:	fa93 f3a3 	rbit	r3, r3
 8007d22:	61fb      	str	r3, [r7, #28]
  return result;
 8007d24:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d26:	fab3 f383 	clz	r3, r3
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	095b      	lsrs	r3, r3, #5
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	f043 0302 	orr.w	r3, r3, #2
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	2b02      	cmp	r3, #2
 8007d38:	d108      	bne.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8007d3a:	4b01      	ldr	r3, [pc, #4]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d3c:	6a1b      	ldr	r3, [r3, #32]
 8007d3e:	e00d      	b.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8007d40:	40021000 	.word	0x40021000
 8007d44:	40007000 	.word	0x40007000
 8007d48:	10908100 	.word	0x10908100
 8007d4c:	2302      	movs	r3, #2
 8007d4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d50:	69bb      	ldr	r3, [r7, #24]
 8007d52:	fa93 f3a3 	rbit	r3, r3
 8007d56:	617b      	str	r3, [r7, #20]
 8007d58:	4b78      	ldr	r3, [pc, #480]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5c:	2202      	movs	r2, #2
 8007d5e:	613a      	str	r2, [r7, #16]
 8007d60:	693a      	ldr	r2, [r7, #16]
 8007d62:	fa92 f2a2 	rbit	r2, r2
 8007d66:	60fa      	str	r2, [r7, #12]
  return result;
 8007d68:	68fa      	ldr	r2, [r7, #12]
 8007d6a:	fab2 f282 	clz	r2, r2
 8007d6e:	b2d2      	uxtb	r2, r2
 8007d70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d74:	b2d2      	uxtb	r2, r2
 8007d76:	f002 021f 	and.w	r2, r2, #31
 8007d7a:	2101      	movs	r1, #1
 8007d7c:	fa01 f202 	lsl.w	r2, r1, r2
 8007d80:	4013      	ands	r3, r2
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d0b7      	beq.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8007d86:	4b6d      	ldr	r3, [pc, #436]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007d88:	6a1b      	ldr	r3, [r3, #32]
 8007d8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	496a      	ldr	r1, [pc, #424]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007d94:	4313      	orrs	r3, r2
 8007d96:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007d98:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d105      	bne.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007da0:	4b66      	ldr	r3, [pc, #408]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007da2:	69db      	ldr	r3, [r3, #28]
 8007da4:	4a65      	ldr	r2, [pc, #404]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007da6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007daa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f003 0301 	and.w	r3, r3, #1
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d008      	beq.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007db8:	4b60      	ldr	r3, [pc, #384]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dbc:	f023 0203 	bic.w	r2, r3, #3
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	495d      	ldr	r1, [pc, #372]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f003 0302 	and.w	r3, r3, #2
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d008      	beq.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007dd6:	4b59      	ldr	r3, [pc, #356]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dda:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	68db      	ldr	r3, [r3, #12]
 8007de2:	4956      	ldr	r1, [pc, #344]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007de4:	4313      	orrs	r3, r2
 8007de6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f003 0304 	and.w	r3, r3, #4
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d008      	beq.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007df4:	4b51      	ldr	r3, [pc, #324]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007df8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	691b      	ldr	r3, [r3, #16]
 8007e00:	494e      	ldr	r1, [pc, #312]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e02:	4313      	orrs	r3, r2
 8007e04:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 0320 	and.w	r3, r3, #32
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d008      	beq.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007e12:	4b4a      	ldr	r3, [pc, #296]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e16:	f023 0210 	bic.w	r2, r3, #16
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	69db      	ldr	r3, [r3, #28]
 8007e1e:	4947      	ldr	r1, [pc, #284]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e20:	4313      	orrs	r3, r2
 8007e22:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d008      	beq.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8007e30:	4b42      	ldr	r3, [pc, #264]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e3c:	493f      	ldr	r1, [pc, #252]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d008      	beq.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007e4e:	4b3b      	ldr	r3, [pc, #236]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e52:	f023 0220 	bic.w	r2, r3, #32
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6a1b      	ldr	r3, [r3, #32]
 8007e5a:	4938      	ldr	r1, [pc, #224]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f003 0308 	and.w	r3, r3, #8
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d008      	beq.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007e6c:	4b33      	ldr	r3, [pc, #204]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	695b      	ldr	r3, [r3, #20]
 8007e78:	4930      	ldr	r1, [pc, #192]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f003 0310 	and.w	r3, r3, #16
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d008      	beq.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007e8a:	4b2c      	ldr	r3, [pc, #176]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e8e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	699b      	ldr	r3, [r3, #24]
 8007e96:	4929      	ldr	r1, [pc, #164]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d008      	beq.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007ea8:	4b24      	ldr	r3, [pc, #144]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb4:	4921      	ldr	r1, [pc, #132]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d008      	beq.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007ec6:	4b1d      	ldr	r3, [pc, #116]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eca:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed2:	491a      	ldr	r1, [pc, #104]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d008      	beq.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8007ee4:	4b15      	ldr	r3, [pc, #84]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee8:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef0:	4912      	ldr	r1, [pc, #72]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d008      	beq.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007f02:	4b0e      	ldr	r3, [pc, #56]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f0e:	490b      	ldr	r1, [pc, #44]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007f10:	4313      	orrs	r3, r2
 8007f12:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d008      	beq.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8007f20:	4b06      	ldr	r3, [pc, #24]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f24:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f2c:	4903      	ldr	r1, [pc, #12]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8007f32:	2300      	movs	r3, #0
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3748      	adds	r7, #72	; 0x48
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}
 8007f3c:	40021000 	.word	0x40021000

08007f40 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b084      	sub	sp, #16
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d101      	bne.n	8007f56 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8007f52:	2301      	movs	r3, #1
 8007f54:	e073      	b.n	800803e <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	7f5b      	ldrb	r3, [r3, #29]
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d105      	bne.n	8007f6c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2200      	movs	r2, #0
 8007f64:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f7fa f8f4 	bl	8002154 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2202      	movs	r2, #2
 8007f70:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	68db      	ldr	r3, [r3, #12]
 8007f78:	f003 0310 	and.w	r3, r3, #16
 8007f7c:	2b10      	cmp	r3, #16
 8007f7e:	d055      	beq.n	800802c <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	22ca      	movs	r2, #202	; 0xca
 8007f86:	625a      	str	r2, [r3, #36]	; 0x24
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	2253      	movs	r2, #83	; 0x53
 8007f8e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 fa49 	bl	8008428 <RTC_EnterInitMode>
 8007f96:	4603      	mov	r3, r0
 8007f98:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8007f9a:	7bfb      	ldrb	r3, [r7, #15]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d12c      	bne.n	8007ffa <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	6812      	ldr	r2, [r2, #0]
 8007faa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007fae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fb2:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	6899      	ldr	r1, [r3, #8]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	685a      	ldr	r2, [r3, #4]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	691b      	ldr	r3, [r3, #16]
 8007fc2:	431a      	orrs	r2, r3
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	695b      	ldr	r3, [r3, #20]
 8007fc8:	431a      	orrs	r2, r3
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	430a      	orrs	r2, r1
 8007fd0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	68d2      	ldr	r2, [r2, #12]
 8007fda:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	6919      	ldr	r1, [r3, #16]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	041a      	lsls	r2, r3, #16
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	430a      	orrs	r2, r1
 8007fee:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 fa50 	bl	8008496 <RTC_ExitInitMode>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007ffa:	7bfb      	ldrb	r3, [r7, #15]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d110      	bne.n	8008022 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800800e:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	699a      	ldr	r2, [r3, #24]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	430a      	orrs	r2, r1
 8008020:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	22ff      	movs	r2, #255	; 0xff
 8008028:	625a      	str	r2, [r3, #36]	; 0x24
 800802a:	e001      	b.n	8008030 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800802c:	2300      	movs	r3, #0
 800802e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008030:	7bfb      	ldrb	r3, [r7, #15]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d102      	bne.n	800803c <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2201      	movs	r2, #1
 800803a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800803c:	7bfb      	ldrb	r3, [r7, #15]
}
 800803e:	4618      	mov	r0, r3
 8008040:	3710      	adds	r7, #16
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}

08008046 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008046:	b590      	push	{r4, r7, lr}
 8008048:	b087      	sub	sp, #28
 800804a:	af00      	add	r7, sp, #0
 800804c:	60f8      	str	r0, [r7, #12]
 800804e:	60b9      	str	r1, [r7, #8]
 8008050:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008052:	2300      	movs	r3, #0
 8008054:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	7f1b      	ldrb	r3, [r3, #28]
 800805a:	2b01      	cmp	r3, #1
 800805c:	d101      	bne.n	8008062 <HAL_RTC_SetTime+0x1c>
 800805e:	2302      	movs	r3, #2
 8008060:	e087      	b.n	8008172 <HAL_RTC_SetTime+0x12c>
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2201      	movs	r2, #1
 8008066:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2202      	movs	r2, #2
 800806c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d126      	bne.n	80080c2 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800807e:	2b00      	cmp	r3, #0
 8008080:	d102      	bne.n	8008088 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	2200      	movs	r2, #0
 8008086:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	4618      	mov	r0, r3
 800808e:	f000 fa27 	bl	80084e0 <RTC_ByteToBcd2>
 8008092:	4603      	mov	r3, r0
 8008094:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	785b      	ldrb	r3, [r3, #1]
 800809a:	4618      	mov	r0, r3
 800809c:	f000 fa20 	bl	80084e0 <RTC_ByteToBcd2>
 80080a0:	4603      	mov	r3, r0
 80080a2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80080a4:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	789b      	ldrb	r3, [r3, #2]
 80080aa:	4618      	mov	r0, r3
 80080ac:	f000 fa18 	bl	80084e0 <RTC_ByteToBcd2>
 80080b0:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80080b2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	78db      	ldrb	r3, [r3, #3]
 80080ba:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80080bc:	4313      	orrs	r3, r2
 80080be:	617b      	str	r3, [r7, #20]
 80080c0:	e018      	b.n	80080f4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d102      	bne.n	80080d6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	2200      	movs	r2, #0
 80080d4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	785b      	ldrb	r3, [r3, #1]
 80080e0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80080e2:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80080e4:	68ba      	ldr	r2, [r7, #8]
 80080e6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80080e8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	78db      	ldrb	r3, [r3, #3]
 80080ee:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80080f0:	4313      	orrs	r3, r2
 80080f2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	22ca      	movs	r2, #202	; 0xca
 80080fa:	625a      	str	r2, [r3, #36]	; 0x24
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	2253      	movs	r2, #83	; 0x53
 8008102:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008104:	68f8      	ldr	r0, [r7, #12]
 8008106:	f000 f98f 	bl	8008428 <RTC_EnterInitMode>
 800810a:	4603      	mov	r3, r0
 800810c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800810e:	7cfb      	ldrb	r3, [r7, #19]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d120      	bne.n	8008156 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681a      	ldr	r2, [r3, #0]
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800811e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008122:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	689a      	ldr	r2, [r3, #8]
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008132:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	6899      	ldr	r1, [r3, #8]
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	68da      	ldr	r2, [r3, #12]
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	691b      	ldr	r3, [r3, #16]
 8008142:	431a      	orrs	r2, r3
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	430a      	orrs	r2, r1
 800814a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800814c:	68f8      	ldr	r0, [r7, #12]
 800814e:	f000 f9a2 	bl	8008496 <RTC_ExitInitMode>
 8008152:	4603      	mov	r3, r0
 8008154:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008156:	7cfb      	ldrb	r3, [r7, #19]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d102      	bne.n	8008162 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2201      	movs	r2, #1
 8008160:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	22ff      	movs	r2, #255	; 0xff
 8008168:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2200      	movs	r2, #0
 800816e:	771a      	strb	r2, [r3, #28]

  return status;
 8008170:	7cfb      	ldrb	r3, [r7, #19]
}
 8008172:	4618      	mov	r0, r3
 8008174:	371c      	adds	r7, #28
 8008176:	46bd      	mov	sp, r7
 8008178:	bd90      	pop	{r4, r7, pc}

0800817a <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800817a:	b580      	push	{r7, lr}
 800817c:	b086      	sub	sp, #24
 800817e:	af00      	add	r7, sp, #0
 8008180:	60f8      	str	r0, [r7, #12]
 8008182:	60b9      	str	r1, [r7, #8]
 8008184:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008186:	2300      	movs	r3, #0
 8008188:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	691b      	ldr	r3, [r3, #16]
 800819a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80081ac:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80081b0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	0c1b      	lsrs	r3, r3, #16
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081bc:	b2da      	uxtb	r2, r3
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	0a1b      	lsrs	r3, r3, #8
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081cc:	b2da      	uxtb	r2, r3
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081da:	b2da      	uxtb	r2, r3
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	0d9b      	lsrs	r3, r3, #22
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	f003 0301 	and.w	r3, r3, #1
 80081ea:	b2da      	uxtb	r2, r3
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d11a      	bne.n	800822c <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	4618      	mov	r0, r3
 80081fc:	f000 f98e 	bl	800851c <RTC_Bcd2ToByte>
 8008200:	4603      	mov	r3, r0
 8008202:	461a      	mov	r2, r3
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	785b      	ldrb	r3, [r3, #1]
 800820c:	4618      	mov	r0, r3
 800820e:	f000 f985 	bl	800851c <RTC_Bcd2ToByte>
 8008212:	4603      	mov	r3, r0
 8008214:	461a      	mov	r2, r3
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	789b      	ldrb	r3, [r3, #2]
 800821e:	4618      	mov	r0, r3
 8008220:	f000 f97c 	bl	800851c <RTC_Bcd2ToByte>
 8008224:	4603      	mov	r3, r0
 8008226:	461a      	mov	r2, r3
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800822c:	2300      	movs	r3, #0
}
 800822e:	4618      	mov	r0, r3
 8008230:	3718      	adds	r7, #24
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}

08008236 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008236:	b590      	push	{r4, r7, lr}
 8008238:	b087      	sub	sp, #28
 800823a:	af00      	add	r7, sp, #0
 800823c:	60f8      	str	r0, [r7, #12]
 800823e:	60b9      	str	r1, [r7, #8]
 8008240:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008242:	2300      	movs	r3, #0
 8008244:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	7f1b      	ldrb	r3, [r3, #28]
 800824a:	2b01      	cmp	r3, #1
 800824c:	d101      	bne.n	8008252 <HAL_RTC_SetDate+0x1c>
 800824e:	2302      	movs	r3, #2
 8008250:	e071      	b.n	8008336 <HAL_RTC_SetDate+0x100>
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2201      	movs	r2, #1
 8008256:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2202      	movs	r2, #2
 800825c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d10e      	bne.n	8008282 <HAL_RTC_SetDate+0x4c>
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	785b      	ldrb	r3, [r3, #1]
 8008268:	f003 0310 	and.w	r3, r3, #16
 800826c:	2b00      	cmp	r3, #0
 800826e:	d008      	beq.n	8008282 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	785b      	ldrb	r3, [r3, #1]
 8008274:	f023 0310 	bic.w	r3, r3, #16
 8008278:	b2db      	uxtb	r3, r3
 800827a:	330a      	adds	r3, #10
 800827c:	b2da      	uxtb	r2, r3
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d11c      	bne.n	80082c2 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	78db      	ldrb	r3, [r3, #3]
 800828c:	4618      	mov	r0, r3
 800828e:	f000 f927 	bl	80084e0 <RTC_ByteToBcd2>
 8008292:	4603      	mov	r3, r0
 8008294:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	785b      	ldrb	r3, [r3, #1]
 800829a:	4618      	mov	r0, r3
 800829c:	f000 f920 	bl	80084e0 <RTC_ByteToBcd2>
 80082a0:	4603      	mov	r3, r0
 80082a2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80082a4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	789b      	ldrb	r3, [r3, #2]
 80082aa:	4618      	mov	r0, r3
 80082ac:	f000 f918 	bl	80084e0 <RTC_ByteToBcd2>
 80082b0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80082b2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80082bc:	4313      	orrs	r3, r2
 80082be:	617b      	str	r3, [r7, #20]
 80082c0:	e00e      	b.n	80082e0 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	78db      	ldrb	r3, [r3, #3]
 80082c6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	785b      	ldrb	r3, [r3, #1]
 80082cc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80082ce:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80082d0:	68ba      	ldr	r2, [r7, #8]
 80082d2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80082d4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80082dc:	4313      	orrs	r3, r2
 80082de:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	22ca      	movs	r2, #202	; 0xca
 80082e6:	625a      	str	r2, [r3, #36]	; 0x24
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	2253      	movs	r2, #83	; 0x53
 80082ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80082f0:	68f8      	ldr	r0, [r7, #12]
 80082f2:	f000 f899 	bl	8008428 <RTC_EnterInitMode>
 80082f6:	4603      	mov	r3, r0
 80082f8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80082fa:	7cfb      	ldrb	r3, [r7, #19]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d10c      	bne.n	800831a <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681a      	ldr	r2, [r3, #0]
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800830a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800830e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008310:	68f8      	ldr	r0, [r7, #12]
 8008312:	f000 f8c0 	bl	8008496 <RTC_ExitInitMode>
 8008316:	4603      	mov	r3, r0
 8008318:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800831a:	7cfb      	ldrb	r3, [r7, #19]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d102      	bne.n	8008326 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2201      	movs	r2, #1
 8008324:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	22ff      	movs	r2, #255	; 0xff
 800832c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2200      	movs	r2, #0
 8008332:	771a      	strb	r2, [r3, #28]

  return status;
 8008334:	7cfb      	ldrb	r3, [r7, #19]
}
 8008336:	4618      	mov	r0, r3
 8008338:	371c      	adds	r7, #28
 800833a:	46bd      	mov	sp, r7
 800833c:	bd90      	pop	{r4, r7, pc}

0800833e <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800833e:	b580      	push	{r7, lr}
 8008340:	b086      	sub	sp, #24
 8008342:	af00      	add	r7, sp, #0
 8008344:	60f8      	str	r0, [r7, #12]
 8008346:	60b9      	str	r1, [r7, #8]
 8008348:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800834a:	2300      	movs	r3, #0
 800834c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008358:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800835c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	0c1b      	lsrs	r3, r3, #16
 8008362:	b2da      	uxtb	r2, r3
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	0a1b      	lsrs	r3, r3, #8
 800836c:	b2db      	uxtb	r3, r3
 800836e:	f003 031f 	and.w	r3, r3, #31
 8008372:	b2da      	uxtb	r2, r3
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	b2db      	uxtb	r3, r3
 800837c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008380:	b2da      	uxtb	r2, r3
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	0b5b      	lsrs	r3, r3, #13
 800838a:	b2db      	uxtb	r3, r3
 800838c:	f003 0307 	and.w	r3, r3, #7
 8008390:	b2da      	uxtb	r2, r3
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d11a      	bne.n	80083d2 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	78db      	ldrb	r3, [r3, #3]
 80083a0:	4618      	mov	r0, r3
 80083a2:	f000 f8bb 	bl	800851c <RTC_Bcd2ToByte>
 80083a6:	4603      	mov	r3, r0
 80083a8:	461a      	mov	r2, r3
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	785b      	ldrb	r3, [r3, #1]
 80083b2:	4618      	mov	r0, r3
 80083b4:	f000 f8b2 	bl	800851c <RTC_Bcd2ToByte>
 80083b8:	4603      	mov	r3, r0
 80083ba:	461a      	mov	r2, r3
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	789b      	ldrb	r3, [r3, #2]
 80083c4:	4618      	mov	r0, r3
 80083c6:	f000 f8a9 	bl	800851c <RTC_Bcd2ToByte>
 80083ca:	4603      	mov	r3, r0
 80083cc:	461a      	mov	r2, r3
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80083d2:	2300      	movs	r3, #0
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3718      	adds	r7, #24
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80083e4:	2300      	movs	r3, #0
 80083e6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a0d      	ldr	r2, [pc, #52]	; (8008424 <HAL_RTC_WaitForSynchro+0x48>)
 80083ee:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80083f0:	f7fa fa4a 	bl	8002888 <HAL_GetTick>
 80083f4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80083f6:	e009      	b.n	800840c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80083f8:	f7fa fa46 	bl	8002888 <HAL_GetTick>
 80083fc:	4602      	mov	r2, r0
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	1ad3      	subs	r3, r2, r3
 8008402:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008406:	d901      	bls.n	800840c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8008408:	2303      	movs	r3, #3
 800840a:	e007      	b.n	800841c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	68db      	ldr	r3, [r3, #12]
 8008412:	f003 0320 	and.w	r3, r3, #32
 8008416:	2b00      	cmp	r3, #0
 8008418:	d0ee      	beq.n	80083f8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800841a:	2300      	movs	r3, #0
}
 800841c:	4618      	mov	r0, r3
 800841e:	3710      	adds	r7, #16
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}
 8008424:	0001ff5f 	.word	0x0001ff5f

08008428 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b084      	sub	sp, #16
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008430:	2300      	movs	r3, #0
 8008432:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008434:	2300      	movs	r3, #0
 8008436:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	68db      	ldr	r3, [r3, #12]
 800843e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008442:	2b00      	cmp	r3, #0
 8008444:	d122      	bne.n	800848c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	68da      	ldr	r2, [r3, #12]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008454:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008456:	f7fa fa17 	bl	8002888 <HAL_GetTick>
 800845a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800845c:	e00c      	b.n	8008478 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800845e:	f7fa fa13 	bl	8002888 <HAL_GetTick>
 8008462:	4602      	mov	r2, r0
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	1ad3      	subs	r3, r2, r3
 8008468:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800846c:	d904      	bls.n	8008478 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2204      	movs	r2, #4
 8008472:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8008474:	2301      	movs	r3, #1
 8008476:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	68db      	ldr	r3, [r3, #12]
 800847e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008482:	2b00      	cmp	r3, #0
 8008484:	d102      	bne.n	800848c <RTC_EnterInitMode+0x64>
 8008486:	7bfb      	ldrb	r3, [r7, #15]
 8008488:	2b01      	cmp	r3, #1
 800848a:	d1e8      	bne.n	800845e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800848c:	7bfb      	ldrb	r3, [r7, #15]
}
 800848e:	4618      	mov	r0, r3
 8008490:	3710      	adds	r7, #16
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}

08008496 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008496:	b580      	push	{r7, lr}
 8008498:	b084      	sub	sp, #16
 800849a:	af00      	add	r7, sp, #0
 800849c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800849e:	2300      	movs	r3, #0
 80084a0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	68da      	ldr	r2, [r3, #12]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80084b0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	689b      	ldr	r3, [r3, #8]
 80084b8:	f003 0320 	and.w	r3, r3, #32
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d10a      	bne.n	80084d6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f7ff ff8b 	bl	80083dc <HAL_RTC_WaitForSynchro>
 80084c6:	4603      	mov	r3, r0
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d004      	beq.n	80084d6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2204      	movs	r2, #4
 80084d0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80084d2:	2301      	movs	r3, #1
 80084d4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80084d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3710      	adds	r7, #16
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b085      	sub	sp, #20
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	4603      	mov	r3, r0
 80084e8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80084ea:	2300      	movs	r3, #0
 80084ec:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80084ee:	e005      	b.n	80084fc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	3301      	adds	r3, #1
 80084f4:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80084f6:	79fb      	ldrb	r3, [r7, #7]
 80084f8:	3b0a      	subs	r3, #10
 80084fa:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80084fc:	79fb      	ldrb	r3, [r7, #7]
 80084fe:	2b09      	cmp	r3, #9
 8008500:	d8f6      	bhi.n	80084f0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	b2db      	uxtb	r3, r3
 8008506:	011b      	lsls	r3, r3, #4
 8008508:	b2da      	uxtb	r2, r3
 800850a:	79fb      	ldrb	r3, [r7, #7]
 800850c:	4313      	orrs	r3, r2
 800850e:	b2db      	uxtb	r3, r3
}
 8008510:	4618      	mov	r0, r3
 8008512:	3714      	adds	r7, #20
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800851c:	b480      	push	{r7}
 800851e:	b085      	sub	sp, #20
 8008520:	af00      	add	r7, sp, #0
 8008522:	4603      	mov	r3, r0
 8008524:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8008526:	2300      	movs	r3, #0
 8008528:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800852a:	79fb      	ldrb	r3, [r7, #7]
 800852c:	091b      	lsrs	r3, r3, #4
 800852e:	b2db      	uxtb	r3, r3
 8008530:	461a      	mov	r2, r3
 8008532:	4613      	mov	r3, r2
 8008534:	009b      	lsls	r3, r3, #2
 8008536:	4413      	add	r3, r2
 8008538:	005b      	lsls	r3, r3, #1
 800853a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	b2da      	uxtb	r2, r3
 8008540:	79fb      	ldrb	r3, [r7, #7]
 8008542:	f003 030f 	and.w	r3, r3, #15
 8008546:	b2db      	uxtb	r3, r3
 8008548:	4413      	add	r3, r2
 800854a:	b2db      	uxtb	r3, r3
}
 800854c:	4618      	mov	r0, r3
 800854e:	3714      	adds	r7, #20
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b082      	sub	sp, #8
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d101      	bne.n	800856a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008566:	2301      	movs	r3, #1
 8008568:	e049      	b.n	80085fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008570:	b2db      	uxtb	r3, r3
 8008572:	2b00      	cmp	r3, #0
 8008574:	d106      	bne.n	8008584 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2200      	movs	r2, #0
 800857a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f7f9 fe0e 	bl	80021a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2202      	movs	r2, #2
 8008588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681a      	ldr	r2, [r3, #0]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	3304      	adds	r3, #4
 8008594:	4619      	mov	r1, r3
 8008596:	4610      	mov	r0, r2
 8008598:	f000 ffd6 	bl	8009548 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2201      	movs	r2, #1
 80085a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2201      	movs	r2, #1
 80085a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2201      	movs	r2, #1
 80085b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2201      	movs	r2, #1
 80085b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2201      	movs	r2, #1
 80085c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2201      	movs	r2, #1
 80085c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2201      	movs	r2, #1
 80085d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2201      	movs	r2, #1
 80085d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2201      	movs	r2, #1
 80085e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2201      	movs	r2, #1
 80085e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2201      	movs	r2, #1
 80085f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80085fc:	2300      	movs	r3, #0
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3708      	adds	r7, #8
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}

08008606 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008606:	b580      	push	{r7, lr}
 8008608:	b082      	sub	sp, #8
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d101      	bne.n	8008618 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008614:	2301      	movs	r3, #1
 8008616:	e049      	b.n	80086ac <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800861e:	b2db      	uxtb	r3, r3
 8008620:	2b00      	cmp	r3, #0
 8008622:	d106      	bne.n	8008632 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2200      	movs	r2, #0
 8008628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f000 f841 	bl	80086b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2202      	movs	r2, #2
 8008636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681a      	ldr	r2, [r3, #0]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	3304      	adds	r3, #4
 8008642:	4619      	mov	r1, r3
 8008644:	4610      	mov	r0, r2
 8008646:	f000 ff7f 	bl	8009548 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2201      	movs	r2, #1
 800864e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2201      	movs	r2, #1
 8008656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2201      	movs	r2, #1
 800865e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2201      	movs	r2, #1
 8008666:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2201      	movs	r2, #1
 800866e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2201      	movs	r2, #1
 8008676:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2201      	movs	r2, #1
 800867e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2201      	movs	r2, #1
 8008686:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2201      	movs	r2, #1
 800868e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2201      	movs	r2, #1
 8008696:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2201      	movs	r2, #1
 800869e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2201      	movs	r2, #1
 80086a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80086aa:	2300      	movs	r3, #0
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3708      	adds	r7, #8
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80086bc:	bf00      	nop
 80086be:	370c      	adds	r7, #12
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b084      	sub	sp, #16
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d109      	bne.n	80086ec <HAL_TIM_PWM_Start+0x24>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80086de:	b2db      	uxtb	r3, r3
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	bf14      	ite	ne
 80086e4:	2301      	movne	r3, #1
 80086e6:	2300      	moveq	r3, #0
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	e03c      	b.n	8008766 <HAL_TIM_PWM_Start+0x9e>
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	2b04      	cmp	r3, #4
 80086f0:	d109      	bne.n	8008706 <HAL_TIM_PWM_Start+0x3e>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80086f8:	b2db      	uxtb	r3, r3
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	bf14      	ite	ne
 80086fe:	2301      	movne	r3, #1
 8008700:	2300      	moveq	r3, #0
 8008702:	b2db      	uxtb	r3, r3
 8008704:	e02f      	b.n	8008766 <HAL_TIM_PWM_Start+0x9e>
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	2b08      	cmp	r3, #8
 800870a:	d109      	bne.n	8008720 <HAL_TIM_PWM_Start+0x58>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008712:	b2db      	uxtb	r3, r3
 8008714:	2b01      	cmp	r3, #1
 8008716:	bf14      	ite	ne
 8008718:	2301      	movne	r3, #1
 800871a:	2300      	moveq	r3, #0
 800871c:	b2db      	uxtb	r3, r3
 800871e:	e022      	b.n	8008766 <HAL_TIM_PWM_Start+0x9e>
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	2b0c      	cmp	r3, #12
 8008724:	d109      	bne.n	800873a <HAL_TIM_PWM_Start+0x72>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800872c:	b2db      	uxtb	r3, r3
 800872e:	2b01      	cmp	r3, #1
 8008730:	bf14      	ite	ne
 8008732:	2301      	movne	r3, #1
 8008734:	2300      	moveq	r3, #0
 8008736:	b2db      	uxtb	r3, r3
 8008738:	e015      	b.n	8008766 <HAL_TIM_PWM_Start+0x9e>
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	2b10      	cmp	r3, #16
 800873e:	d109      	bne.n	8008754 <HAL_TIM_PWM_Start+0x8c>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008746:	b2db      	uxtb	r3, r3
 8008748:	2b01      	cmp	r3, #1
 800874a:	bf14      	ite	ne
 800874c:	2301      	movne	r3, #1
 800874e:	2300      	moveq	r3, #0
 8008750:	b2db      	uxtb	r3, r3
 8008752:	e008      	b.n	8008766 <HAL_TIM_PWM_Start+0x9e>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800875a:	b2db      	uxtb	r3, r3
 800875c:	2b01      	cmp	r3, #1
 800875e:	bf14      	ite	ne
 8008760:	2301      	movne	r3, #1
 8008762:	2300      	moveq	r3, #0
 8008764:	b2db      	uxtb	r3, r3
 8008766:	2b00      	cmp	r3, #0
 8008768:	d001      	beq.n	800876e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800876a:	2301      	movs	r3, #1
 800876c:	e097      	b.n	800889e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d104      	bne.n	800877e <HAL_TIM_PWM_Start+0xb6>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2202      	movs	r2, #2
 8008778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800877c:	e023      	b.n	80087c6 <HAL_TIM_PWM_Start+0xfe>
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	2b04      	cmp	r3, #4
 8008782:	d104      	bne.n	800878e <HAL_TIM_PWM_Start+0xc6>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2202      	movs	r2, #2
 8008788:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800878c:	e01b      	b.n	80087c6 <HAL_TIM_PWM_Start+0xfe>
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	2b08      	cmp	r3, #8
 8008792:	d104      	bne.n	800879e <HAL_TIM_PWM_Start+0xd6>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2202      	movs	r2, #2
 8008798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800879c:	e013      	b.n	80087c6 <HAL_TIM_PWM_Start+0xfe>
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	2b0c      	cmp	r3, #12
 80087a2:	d104      	bne.n	80087ae <HAL_TIM_PWM_Start+0xe6>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2202      	movs	r2, #2
 80087a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80087ac:	e00b      	b.n	80087c6 <HAL_TIM_PWM_Start+0xfe>
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	2b10      	cmp	r3, #16
 80087b2:	d104      	bne.n	80087be <HAL_TIM_PWM_Start+0xf6>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2202      	movs	r2, #2
 80087b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80087bc:	e003      	b.n	80087c6 <HAL_TIM_PWM_Start+0xfe>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2202      	movs	r2, #2
 80087c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	2201      	movs	r2, #1
 80087cc:	6839      	ldr	r1, [r7, #0]
 80087ce:	4618      	mov	r0, r3
 80087d0:	f001 fbd8 	bl	8009f84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a33      	ldr	r2, [pc, #204]	; (80088a8 <HAL_TIM_PWM_Start+0x1e0>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d013      	beq.n	8008806 <HAL_TIM_PWM_Start+0x13e>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4a32      	ldr	r2, [pc, #200]	; (80088ac <HAL_TIM_PWM_Start+0x1e4>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d00e      	beq.n	8008806 <HAL_TIM_PWM_Start+0x13e>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a30      	ldr	r2, [pc, #192]	; (80088b0 <HAL_TIM_PWM_Start+0x1e8>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d009      	beq.n	8008806 <HAL_TIM_PWM_Start+0x13e>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4a2f      	ldr	r2, [pc, #188]	; (80088b4 <HAL_TIM_PWM_Start+0x1ec>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d004      	beq.n	8008806 <HAL_TIM_PWM_Start+0x13e>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a2d      	ldr	r2, [pc, #180]	; (80088b8 <HAL_TIM_PWM_Start+0x1f0>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d101      	bne.n	800880a <HAL_TIM_PWM_Start+0x142>
 8008806:	2301      	movs	r3, #1
 8008808:	e000      	b.n	800880c <HAL_TIM_PWM_Start+0x144>
 800880a:	2300      	movs	r3, #0
 800880c:	2b00      	cmp	r3, #0
 800880e:	d007      	beq.n	8008820 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800881e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4a20      	ldr	r2, [pc, #128]	; (80088a8 <HAL_TIM_PWM_Start+0x1e0>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d018      	beq.n	800885c <HAL_TIM_PWM_Start+0x194>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008832:	d013      	beq.n	800885c <HAL_TIM_PWM_Start+0x194>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a20      	ldr	r2, [pc, #128]	; (80088bc <HAL_TIM_PWM_Start+0x1f4>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d00e      	beq.n	800885c <HAL_TIM_PWM_Start+0x194>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4a1f      	ldr	r2, [pc, #124]	; (80088c0 <HAL_TIM_PWM_Start+0x1f8>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d009      	beq.n	800885c <HAL_TIM_PWM_Start+0x194>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a17      	ldr	r2, [pc, #92]	; (80088ac <HAL_TIM_PWM_Start+0x1e4>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d004      	beq.n	800885c <HAL_TIM_PWM_Start+0x194>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4a16      	ldr	r2, [pc, #88]	; (80088b0 <HAL_TIM_PWM_Start+0x1e8>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d115      	bne.n	8008888 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	689a      	ldr	r2, [r3, #8]
 8008862:	4b18      	ldr	r3, [pc, #96]	; (80088c4 <HAL_TIM_PWM_Start+0x1fc>)
 8008864:	4013      	ands	r3, r2
 8008866:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2b06      	cmp	r3, #6
 800886c:	d015      	beq.n	800889a <HAL_TIM_PWM_Start+0x1d2>
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008874:	d011      	beq.n	800889a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f042 0201 	orr.w	r2, r2, #1
 8008884:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008886:	e008      	b.n	800889a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	681a      	ldr	r2, [r3, #0]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f042 0201 	orr.w	r2, r2, #1
 8008896:	601a      	str	r2, [r3, #0]
 8008898:	e000      	b.n	800889c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800889a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800889c:	2300      	movs	r3, #0
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3710      	adds	r7, #16
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	bf00      	nop
 80088a8:	40012c00 	.word	0x40012c00
 80088ac:	40013400 	.word	0x40013400
 80088b0:	40014000 	.word	0x40014000
 80088b4:	40014400 	.word	0x40014400
 80088b8:	40014800 	.word	0x40014800
 80088bc:	40000400 	.word	0x40000400
 80088c0:	40000800 	.word	0x40000800
 80088c4:	00010007 	.word	0x00010007

080088c8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b082      	sub	sp, #8
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	2200      	movs	r2, #0
 80088d8:	6839      	ldr	r1, [r7, #0]
 80088da:	4618      	mov	r0, r3
 80088dc:	f001 fb52 	bl	8009f84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a3e      	ldr	r2, [pc, #248]	; (80089e0 <HAL_TIM_PWM_Stop+0x118>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d013      	beq.n	8008912 <HAL_TIM_PWM_Stop+0x4a>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a3d      	ldr	r2, [pc, #244]	; (80089e4 <HAL_TIM_PWM_Stop+0x11c>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d00e      	beq.n	8008912 <HAL_TIM_PWM_Stop+0x4a>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a3b      	ldr	r2, [pc, #236]	; (80089e8 <HAL_TIM_PWM_Stop+0x120>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d009      	beq.n	8008912 <HAL_TIM_PWM_Stop+0x4a>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a3a      	ldr	r2, [pc, #232]	; (80089ec <HAL_TIM_PWM_Stop+0x124>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d004      	beq.n	8008912 <HAL_TIM_PWM_Stop+0x4a>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a38      	ldr	r2, [pc, #224]	; (80089f0 <HAL_TIM_PWM_Stop+0x128>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d101      	bne.n	8008916 <HAL_TIM_PWM_Stop+0x4e>
 8008912:	2301      	movs	r3, #1
 8008914:	e000      	b.n	8008918 <HAL_TIM_PWM_Stop+0x50>
 8008916:	2300      	movs	r3, #0
 8008918:	2b00      	cmp	r3, #0
 800891a:	d017      	beq.n	800894c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	6a1a      	ldr	r2, [r3, #32]
 8008922:	f241 1311 	movw	r3, #4369	; 0x1111
 8008926:	4013      	ands	r3, r2
 8008928:	2b00      	cmp	r3, #0
 800892a:	d10f      	bne.n	800894c <HAL_TIM_PWM_Stop+0x84>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	6a1a      	ldr	r2, [r3, #32]
 8008932:	f240 4344 	movw	r3, #1092	; 0x444
 8008936:	4013      	ands	r3, r2
 8008938:	2b00      	cmp	r3, #0
 800893a:	d107      	bne.n	800894c <HAL_TIM_PWM_Stop+0x84>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800894a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	6a1a      	ldr	r2, [r3, #32]
 8008952:	f241 1311 	movw	r3, #4369	; 0x1111
 8008956:	4013      	ands	r3, r2
 8008958:	2b00      	cmp	r3, #0
 800895a:	d10f      	bne.n	800897c <HAL_TIM_PWM_Stop+0xb4>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	6a1a      	ldr	r2, [r3, #32]
 8008962:	f240 4344 	movw	r3, #1092	; 0x444
 8008966:	4013      	ands	r3, r2
 8008968:	2b00      	cmp	r3, #0
 800896a:	d107      	bne.n	800897c <HAL_TIM_PWM_Stop+0xb4>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	681a      	ldr	r2, [r3, #0]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f022 0201 	bic.w	r2, r2, #1
 800897a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d104      	bne.n	800898c <HAL_TIM_PWM_Stop+0xc4>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2201      	movs	r2, #1
 8008986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800898a:	e023      	b.n	80089d4 <HAL_TIM_PWM_Stop+0x10c>
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	2b04      	cmp	r3, #4
 8008990:	d104      	bne.n	800899c <HAL_TIM_PWM_Stop+0xd4>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2201      	movs	r2, #1
 8008996:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800899a:	e01b      	b.n	80089d4 <HAL_TIM_PWM_Stop+0x10c>
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	2b08      	cmp	r3, #8
 80089a0:	d104      	bne.n	80089ac <HAL_TIM_PWM_Stop+0xe4>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2201      	movs	r2, #1
 80089a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80089aa:	e013      	b.n	80089d4 <HAL_TIM_PWM_Stop+0x10c>
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	2b0c      	cmp	r3, #12
 80089b0:	d104      	bne.n	80089bc <HAL_TIM_PWM_Stop+0xf4>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2201      	movs	r2, #1
 80089b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80089ba:	e00b      	b.n	80089d4 <HAL_TIM_PWM_Stop+0x10c>
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	2b10      	cmp	r3, #16
 80089c0:	d104      	bne.n	80089cc <HAL_TIM_PWM_Stop+0x104>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2201      	movs	r2, #1
 80089c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80089ca:	e003      	b.n	80089d4 <HAL_TIM_PWM_Stop+0x10c>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2201      	movs	r2, #1
 80089d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80089d4:	2300      	movs	r3, #0
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3708      	adds	r7, #8
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	bf00      	nop
 80089e0:	40012c00 	.word	0x40012c00
 80089e4:	40013400 	.word	0x40013400
 80089e8:	40014000 	.word	0x40014000
 80089ec:	40014400 	.word	0x40014400
 80089f0:	40014800 	.word	0x40014800

080089f4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b082      	sub	sp, #8
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d101      	bne.n	8008a06 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	e049      	b.n	8008a9a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a0c:	b2db      	uxtb	r3, r3
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d106      	bne.n	8008a20 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2200      	movs	r2, #0
 8008a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 f841 	bl	8008aa2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2202      	movs	r2, #2
 8008a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	3304      	adds	r3, #4
 8008a30:	4619      	mov	r1, r3
 8008a32:	4610      	mov	r0, r2
 8008a34:	f000 fd88 	bl	8009548 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2201      	movs	r2, #1
 8008a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2201      	movs	r2, #1
 8008a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2201      	movs	r2, #1
 8008a64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2201      	movs	r2, #1
 8008a74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2201      	movs	r2, #1
 8008a84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2201      	movs	r2, #1
 8008a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a98:	2300      	movs	r3, #0
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3708      	adds	r7, #8
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}

08008aa2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008aa2:	b480      	push	{r7}
 8008aa4:	b083      	sub	sp, #12
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008aaa:	bf00      	nop
 8008aac:	370c      	adds	r7, #12
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab4:	4770      	bx	lr
	...

08008ab8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b084      	sub	sp, #16
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d104      	bne.n	8008ad6 <HAL_TIM_IC_Start_IT+0x1e>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ad2:	b2db      	uxtb	r3, r3
 8008ad4:	e023      	b.n	8008b1e <HAL_TIM_IC_Start_IT+0x66>
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	2b04      	cmp	r3, #4
 8008ada:	d104      	bne.n	8008ae6 <HAL_TIM_IC_Start_IT+0x2e>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	e01b      	b.n	8008b1e <HAL_TIM_IC_Start_IT+0x66>
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	2b08      	cmp	r3, #8
 8008aea:	d104      	bne.n	8008af6 <HAL_TIM_IC_Start_IT+0x3e>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008af2:	b2db      	uxtb	r3, r3
 8008af4:	e013      	b.n	8008b1e <HAL_TIM_IC_Start_IT+0x66>
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	2b0c      	cmp	r3, #12
 8008afa:	d104      	bne.n	8008b06 <HAL_TIM_IC_Start_IT+0x4e>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	e00b      	b.n	8008b1e <HAL_TIM_IC_Start_IT+0x66>
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	2b10      	cmp	r3, #16
 8008b0a:	d104      	bne.n	8008b16 <HAL_TIM_IC_Start_IT+0x5e>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008b12:	b2db      	uxtb	r3, r3
 8008b14:	e003      	b.n	8008b1e <HAL_TIM_IC_Start_IT+0x66>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008b1c:	b2db      	uxtb	r3, r3
 8008b1e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d104      	bne.n	8008b30 <HAL_TIM_IC_Start_IT+0x78>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	e013      	b.n	8008b58 <HAL_TIM_IC_Start_IT+0xa0>
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	2b04      	cmp	r3, #4
 8008b34:	d104      	bne.n	8008b40 <HAL_TIM_IC_Start_IT+0x88>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b3c:	b2db      	uxtb	r3, r3
 8008b3e:	e00b      	b.n	8008b58 <HAL_TIM_IC_Start_IT+0xa0>
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	2b08      	cmp	r3, #8
 8008b44:	d104      	bne.n	8008b50 <HAL_TIM_IC_Start_IT+0x98>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008b4c:	b2db      	uxtb	r3, r3
 8008b4e:	e003      	b.n	8008b58 <HAL_TIM_IC_Start_IT+0xa0>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8008b56:	b2db      	uxtb	r3, r3
 8008b58:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008b5a:	7bbb      	ldrb	r3, [r7, #14]
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d102      	bne.n	8008b66 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008b60:	7b7b      	ldrb	r3, [r7, #13]
 8008b62:	2b01      	cmp	r3, #1
 8008b64:	d001      	beq.n	8008b6a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8008b66:	2301      	movs	r3, #1
 8008b68:	e0d8      	b.n	8008d1c <HAL_TIM_IC_Start_IT+0x264>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d104      	bne.n	8008b7a <HAL_TIM_IC_Start_IT+0xc2>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2202      	movs	r2, #2
 8008b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b78:	e023      	b.n	8008bc2 <HAL_TIM_IC_Start_IT+0x10a>
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	2b04      	cmp	r3, #4
 8008b7e:	d104      	bne.n	8008b8a <HAL_TIM_IC_Start_IT+0xd2>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2202      	movs	r2, #2
 8008b84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b88:	e01b      	b.n	8008bc2 <HAL_TIM_IC_Start_IT+0x10a>
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	2b08      	cmp	r3, #8
 8008b8e:	d104      	bne.n	8008b9a <HAL_TIM_IC_Start_IT+0xe2>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2202      	movs	r2, #2
 8008b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b98:	e013      	b.n	8008bc2 <HAL_TIM_IC_Start_IT+0x10a>
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	2b0c      	cmp	r3, #12
 8008b9e:	d104      	bne.n	8008baa <HAL_TIM_IC_Start_IT+0xf2>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2202      	movs	r2, #2
 8008ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008ba8:	e00b      	b.n	8008bc2 <HAL_TIM_IC_Start_IT+0x10a>
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	2b10      	cmp	r3, #16
 8008bae:	d104      	bne.n	8008bba <HAL_TIM_IC_Start_IT+0x102>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2202      	movs	r2, #2
 8008bb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008bb8:	e003      	b.n	8008bc2 <HAL_TIM_IC_Start_IT+0x10a>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2202      	movs	r2, #2
 8008bbe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d104      	bne.n	8008bd2 <HAL_TIM_IC_Start_IT+0x11a>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2202      	movs	r2, #2
 8008bcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008bd0:	e013      	b.n	8008bfa <HAL_TIM_IC_Start_IT+0x142>
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	2b04      	cmp	r3, #4
 8008bd6:	d104      	bne.n	8008be2 <HAL_TIM_IC_Start_IT+0x12a>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2202      	movs	r2, #2
 8008bdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008be0:	e00b      	b.n	8008bfa <HAL_TIM_IC_Start_IT+0x142>
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	2b08      	cmp	r3, #8
 8008be6:	d104      	bne.n	8008bf2 <HAL_TIM_IC_Start_IT+0x13a>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2202      	movs	r2, #2
 8008bec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008bf0:	e003      	b.n	8008bfa <HAL_TIM_IC_Start_IT+0x142>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2202      	movs	r2, #2
 8008bf6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	2b0c      	cmp	r3, #12
 8008bfe:	d841      	bhi.n	8008c84 <HAL_TIM_IC_Start_IT+0x1cc>
 8008c00:	a201      	add	r2, pc, #4	; (adr r2, 8008c08 <HAL_TIM_IC_Start_IT+0x150>)
 8008c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c06:	bf00      	nop
 8008c08:	08008c3d 	.word	0x08008c3d
 8008c0c:	08008c85 	.word	0x08008c85
 8008c10:	08008c85 	.word	0x08008c85
 8008c14:	08008c85 	.word	0x08008c85
 8008c18:	08008c4f 	.word	0x08008c4f
 8008c1c:	08008c85 	.word	0x08008c85
 8008c20:	08008c85 	.word	0x08008c85
 8008c24:	08008c85 	.word	0x08008c85
 8008c28:	08008c61 	.word	0x08008c61
 8008c2c:	08008c85 	.word	0x08008c85
 8008c30:	08008c85 	.word	0x08008c85
 8008c34:	08008c85 	.word	0x08008c85
 8008c38:	08008c73 	.word	0x08008c73
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	68da      	ldr	r2, [r3, #12]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f042 0202 	orr.w	r2, r2, #2
 8008c4a:	60da      	str	r2, [r3, #12]
      break;
 8008c4c:	e01d      	b.n	8008c8a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	68da      	ldr	r2, [r3, #12]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f042 0204 	orr.w	r2, r2, #4
 8008c5c:	60da      	str	r2, [r3, #12]
      break;
 8008c5e:	e014      	b.n	8008c8a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	68da      	ldr	r2, [r3, #12]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f042 0208 	orr.w	r2, r2, #8
 8008c6e:	60da      	str	r2, [r3, #12]
      break;
 8008c70:	e00b      	b.n	8008c8a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	68da      	ldr	r2, [r3, #12]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f042 0210 	orr.w	r2, r2, #16
 8008c80:	60da      	str	r2, [r3, #12]
      break;
 8008c82:	e002      	b.n	8008c8a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8008c84:	2301      	movs	r3, #1
 8008c86:	73fb      	strb	r3, [r7, #15]
      break;
 8008c88:	bf00      	nop
  }

  if (status == HAL_OK)
 8008c8a:	7bfb      	ldrb	r3, [r7, #15]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d144      	bne.n	8008d1a <HAL_TIM_IC_Start_IT+0x262>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	2201      	movs	r2, #1
 8008c96:	6839      	ldr	r1, [r7, #0]
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f001 f973 	bl	8009f84 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4a20      	ldr	r2, [pc, #128]	; (8008d24 <HAL_TIM_IC_Start_IT+0x26c>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d018      	beq.n	8008cda <HAL_TIM_IC_Start_IT+0x222>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cb0:	d013      	beq.n	8008cda <HAL_TIM_IC_Start_IT+0x222>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4a1c      	ldr	r2, [pc, #112]	; (8008d28 <HAL_TIM_IC_Start_IT+0x270>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d00e      	beq.n	8008cda <HAL_TIM_IC_Start_IT+0x222>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a1a      	ldr	r2, [pc, #104]	; (8008d2c <HAL_TIM_IC_Start_IT+0x274>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d009      	beq.n	8008cda <HAL_TIM_IC_Start_IT+0x222>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a19      	ldr	r2, [pc, #100]	; (8008d30 <HAL_TIM_IC_Start_IT+0x278>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d004      	beq.n	8008cda <HAL_TIM_IC_Start_IT+0x222>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a17      	ldr	r2, [pc, #92]	; (8008d34 <HAL_TIM_IC_Start_IT+0x27c>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d115      	bne.n	8008d06 <HAL_TIM_IC_Start_IT+0x24e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	689a      	ldr	r2, [r3, #8]
 8008ce0:	4b15      	ldr	r3, [pc, #84]	; (8008d38 <HAL_TIM_IC_Start_IT+0x280>)
 8008ce2:	4013      	ands	r3, r2
 8008ce4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	2b06      	cmp	r3, #6
 8008cea:	d015      	beq.n	8008d18 <HAL_TIM_IC_Start_IT+0x260>
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cf2:	d011      	beq.n	8008d18 <HAL_TIM_IC_Start_IT+0x260>
      {
        __HAL_TIM_ENABLE(htim);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f042 0201 	orr.w	r2, r2, #1
 8008d02:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d04:	e008      	b.n	8008d18 <HAL_TIM_IC_Start_IT+0x260>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	681a      	ldr	r2, [r3, #0]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f042 0201 	orr.w	r2, r2, #1
 8008d14:	601a      	str	r2, [r3, #0]
 8008d16:	e000      	b.n	8008d1a <HAL_TIM_IC_Start_IT+0x262>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d18:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8008d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3710      	adds	r7, #16
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}
 8008d24:	40012c00 	.word	0x40012c00
 8008d28:	40000400 	.word	0x40000400
 8008d2c:	40000800 	.word	0x40000800
 8008d30:	40013400 	.word	0x40013400
 8008d34:	40014000 	.word	0x40014000
 8008d38:	00010007 	.word	0x00010007

08008d3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	691b      	ldr	r3, [r3, #16]
 8008d4a:	f003 0302 	and.w	r3, r3, #2
 8008d4e:	2b02      	cmp	r3, #2
 8008d50:	d122      	bne.n	8008d98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	68db      	ldr	r3, [r3, #12]
 8008d58:	f003 0302 	and.w	r3, r3, #2
 8008d5c:	2b02      	cmp	r3, #2
 8008d5e:	d11b      	bne.n	8008d98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f06f 0202 	mvn.w	r2, #2
 8008d68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	699b      	ldr	r3, [r3, #24]
 8008d76:	f003 0303 	and.w	r3, r3, #3
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d003      	beq.n	8008d86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f7f8 fee8 	bl	8001b54 <HAL_TIM_IC_CaptureCallback>
 8008d84:	e005      	b.n	8008d92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 fbc0 	bl	800950c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 fbc7 	bl	8009520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2200      	movs	r2, #0
 8008d96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	691b      	ldr	r3, [r3, #16]
 8008d9e:	f003 0304 	and.w	r3, r3, #4
 8008da2:	2b04      	cmp	r3, #4
 8008da4:	d122      	bne.n	8008dec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	68db      	ldr	r3, [r3, #12]
 8008dac:	f003 0304 	and.w	r3, r3, #4
 8008db0:	2b04      	cmp	r3, #4
 8008db2:	d11b      	bne.n	8008dec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f06f 0204 	mvn.w	r2, #4
 8008dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2202      	movs	r2, #2
 8008dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	699b      	ldr	r3, [r3, #24]
 8008dca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d003      	beq.n	8008dda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f7f8 febe 	bl	8001b54 <HAL_TIM_IC_CaptureCallback>
 8008dd8:	e005      	b.n	8008de6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 fb96 	bl	800950c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f000 fb9d 	bl	8009520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2200      	movs	r2, #0
 8008dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	691b      	ldr	r3, [r3, #16]
 8008df2:	f003 0308 	and.w	r3, r3, #8
 8008df6:	2b08      	cmp	r3, #8
 8008df8:	d122      	bne.n	8008e40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	68db      	ldr	r3, [r3, #12]
 8008e00:	f003 0308 	and.w	r3, r3, #8
 8008e04:	2b08      	cmp	r3, #8
 8008e06:	d11b      	bne.n	8008e40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f06f 0208 	mvn.w	r2, #8
 8008e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2204      	movs	r2, #4
 8008e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	69db      	ldr	r3, [r3, #28]
 8008e1e:	f003 0303 	and.w	r3, r3, #3
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d003      	beq.n	8008e2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f7f8 fe94 	bl	8001b54 <HAL_TIM_IC_CaptureCallback>
 8008e2c:	e005      	b.n	8008e3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 fb6c 	bl	800950c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f000 fb73 	bl	8009520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	691b      	ldr	r3, [r3, #16]
 8008e46:	f003 0310 	and.w	r3, r3, #16
 8008e4a:	2b10      	cmp	r3, #16
 8008e4c:	d122      	bne.n	8008e94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	68db      	ldr	r3, [r3, #12]
 8008e54:	f003 0310 	and.w	r3, r3, #16
 8008e58:	2b10      	cmp	r3, #16
 8008e5a:	d11b      	bne.n	8008e94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f06f 0210 	mvn.w	r2, #16
 8008e64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2208      	movs	r2, #8
 8008e6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	69db      	ldr	r3, [r3, #28]
 8008e72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d003      	beq.n	8008e82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f7f8 fe6a 	bl	8001b54 <HAL_TIM_IC_CaptureCallback>
 8008e80:	e005      	b.n	8008e8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 fb42 	bl	800950c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f000 fb49 	bl	8009520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2200      	movs	r2, #0
 8008e92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	691b      	ldr	r3, [r3, #16]
 8008e9a:	f003 0301 	and.w	r3, r3, #1
 8008e9e:	2b01      	cmp	r3, #1
 8008ea0:	d10e      	bne.n	8008ec0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	68db      	ldr	r3, [r3, #12]
 8008ea8:	f003 0301 	and.w	r3, r3, #1
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d107      	bne.n	8008ec0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f06f 0201 	mvn.w	r2, #1
 8008eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 fb1c 	bl	80094f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	691b      	ldr	r3, [r3, #16]
 8008ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eca:	2b80      	cmp	r3, #128	; 0x80
 8008ecc:	d10e      	bne.n	8008eec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	68db      	ldr	r3, [r3, #12]
 8008ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ed8:	2b80      	cmp	r3, #128	; 0x80
 8008eda:	d107      	bne.n	8008eec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f001 fa8c 	bl	800a404 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	691b      	ldr	r3, [r3, #16]
 8008ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ef6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008efa:	d10e      	bne.n	8008f1a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	68db      	ldr	r3, [r3, #12]
 8008f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f06:	2b80      	cmp	r3, #128	; 0x80
 8008f08:	d107      	bne.n	8008f1a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008f12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f001 fa7f 	bl	800a418 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	691b      	ldr	r3, [r3, #16]
 8008f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f24:	2b40      	cmp	r3, #64	; 0x40
 8008f26:	d10e      	bne.n	8008f46 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	68db      	ldr	r3, [r3, #12]
 8008f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f32:	2b40      	cmp	r3, #64	; 0x40
 8008f34:	d107      	bne.n	8008f46 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008f3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f000 faf7 	bl	8009534 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	691b      	ldr	r3, [r3, #16]
 8008f4c:	f003 0320 	and.w	r3, r3, #32
 8008f50:	2b20      	cmp	r3, #32
 8008f52:	d10e      	bne.n	8008f72 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	68db      	ldr	r3, [r3, #12]
 8008f5a:	f003 0320 	and.w	r3, r3, #32
 8008f5e:	2b20      	cmp	r3, #32
 8008f60:	d107      	bne.n	8008f72 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f06f 0220 	mvn.w	r2, #32
 8008f6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f001 fa3f 	bl	800a3f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008f72:	bf00      	nop
 8008f74:	3708      	adds	r7, #8
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}

08008f7a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008f7a:	b580      	push	{r7, lr}
 8008f7c:	b086      	sub	sp, #24
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	60f8      	str	r0, [r7, #12]
 8008f82:	60b9      	str	r1, [r7, #8]
 8008f84:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f86:	2300      	movs	r3, #0
 8008f88:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d101      	bne.n	8008f98 <HAL_TIM_IC_ConfigChannel+0x1e>
 8008f94:	2302      	movs	r3, #2
 8008f96:	e088      	b.n	80090aa <HAL_TIM_IC_ConfigChannel+0x130>
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d11b      	bne.n	8008fde <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	6818      	ldr	r0, [r3, #0]
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	6819      	ldr	r1, [r3, #0]
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	685a      	ldr	r2, [r3, #4]
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	68db      	ldr	r3, [r3, #12]
 8008fb6:	f000 fe2d 	bl	8009c14 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	699a      	ldr	r2, [r3, #24]
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f022 020c 	bic.w	r2, r2, #12
 8008fc8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	6999      	ldr	r1, [r3, #24]
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	689a      	ldr	r2, [r3, #8]
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	430a      	orrs	r2, r1
 8008fda:	619a      	str	r2, [r3, #24]
 8008fdc:	e060      	b.n	80090a0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2b04      	cmp	r3, #4
 8008fe2:	d11c      	bne.n	800901e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	6818      	ldr	r0, [r3, #0]
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	6819      	ldr	r1, [r3, #0]
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	685a      	ldr	r2, [r3, #4]
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	68db      	ldr	r3, [r3, #12]
 8008ff4:	f000 fea5 	bl	8009d42 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	699a      	ldr	r2, [r3, #24]
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009006:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	6999      	ldr	r1, [r3, #24]
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	689b      	ldr	r3, [r3, #8]
 8009012:	021a      	lsls	r2, r3, #8
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	430a      	orrs	r2, r1
 800901a:	619a      	str	r2, [r3, #24]
 800901c:	e040      	b.n	80090a0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2b08      	cmp	r3, #8
 8009022:	d11b      	bne.n	800905c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	6818      	ldr	r0, [r3, #0]
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	6819      	ldr	r1, [r3, #0]
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	685a      	ldr	r2, [r3, #4]
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	f000 fef2 	bl	8009e1c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	69da      	ldr	r2, [r3, #28]
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f022 020c 	bic.w	r2, r2, #12
 8009046:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	69d9      	ldr	r1, [r3, #28]
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	689a      	ldr	r2, [r3, #8]
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	430a      	orrs	r2, r1
 8009058:	61da      	str	r2, [r3, #28]
 800905a:	e021      	b.n	80090a0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2b0c      	cmp	r3, #12
 8009060:	d11c      	bne.n	800909c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	6818      	ldr	r0, [r3, #0]
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	6819      	ldr	r1, [r3, #0]
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	685a      	ldr	r2, [r3, #4]
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	68db      	ldr	r3, [r3, #12]
 8009072:	f000 ff0f 	bl	8009e94 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	69da      	ldr	r2, [r3, #28]
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009084:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	69d9      	ldr	r1, [r3, #28]
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	689b      	ldr	r3, [r3, #8]
 8009090:	021a      	lsls	r2, r3, #8
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	430a      	orrs	r2, r1
 8009098:	61da      	str	r2, [r3, #28]
 800909a:	e001      	b.n	80090a0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800909c:	2301      	movs	r3, #1
 800909e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2200      	movs	r2, #0
 80090a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80090a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3718      	adds	r7, #24
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}
	...

080090b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b086      	sub	sp, #24
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	60f8      	str	r0, [r7, #12]
 80090bc:	60b9      	str	r1, [r7, #8]
 80090be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80090c0:	2300      	movs	r3, #0
 80090c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	d101      	bne.n	80090d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80090ce:	2302      	movs	r3, #2
 80090d0:	e0ff      	b.n	80092d2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2201      	movs	r2, #1
 80090d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2b14      	cmp	r3, #20
 80090de:	f200 80f0 	bhi.w	80092c2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80090e2:	a201      	add	r2, pc, #4	; (adr r2, 80090e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80090e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090e8:	0800913d 	.word	0x0800913d
 80090ec:	080092c3 	.word	0x080092c3
 80090f0:	080092c3 	.word	0x080092c3
 80090f4:	080092c3 	.word	0x080092c3
 80090f8:	0800917d 	.word	0x0800917d
 80090fc:	080092c3 	.word	0x080092c3
 8009100:	080092c3 	.word	0x080092c3
 8009104:	080092c3 	.word	0x080092c3
 8009108:	080091bf 	.word	0x080091bf
 800910c:	080092c3 	.word	0x080092c3
 8009110:	080092c3 	.word	0x080092c3
 8009114:	080092c3 	.word	0x080092c3
 8009118:	080091ff 	.word	0x080091ff
 800911c:	080092c3 	.word	0x080092c3
 8009120:	080092c3 	.word	0x080092c3
 8009124:	080092c3 	.word	0x080092c3
 8009128:	08009241 	.word	0x08009241
 800912c:	080092c3 	.word	0x080092c3
 8009130:	080092c3 	.word	0x080092c3
 8009134:	080092c3 	.word	0x080092c3
 8009138:	08009281 	.word	0x08009281
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	68b9      	ldr	r1, [r7, #8]
 8009142:	4618      	mov	r0, r3
 8009144:	f000 fa90 	bl	8009668 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	699a      	ldr	r2, [r3, #24]
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f042 0208 	orr.w	r2, r2, #8
 8009156:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	699a      	ldr	r2, [r3, #24]
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f022 0204 	bic.w	r2, r2, #4
 8009166:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	6999      	ldr	r1, [r3, #24]
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	691a      	ldr	r2, [r3, #16]
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	430a      	orrs	r2, r1
 8009178:	619a      	str	r2, [r3, #24]
      break;
 800917a:	e0a5      	b.n	80092c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	68b9      	ldr	r1, [r7, #8]
 8009182:	4618      	mov	r0, r3
 8009184:	f000 fb00 	bl	8009788 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	699a      	ldr	r2, [r3, #24]
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009196:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	699a      	ldr	r2, [r3, #24]
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	6999      	ldr	r1, [r3, #24]
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	691b      	ldr	r3, [r3, #16]
 80091b2:	021a      	lsls	r2, r3, #8
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	430a      	orrs	r2, r1
 80091ba:	619a      	str	r2, [r3, #24]
      break;
 80091bc:	e084      	b.n	80092c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	68b9      	ldr	r1, [r7, #8]
 80091c4:	4618      	mov	r0, r3
 80091c6:	f000 fb69 	bl	800989c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	69da      	ldr	r2, [r3, #28]
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f042 0208 	orr.w	r2, r2, #8
 80091d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	69da      	ldr	r2, [r3, #28]
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f022 0204 	bic.w	r2, r2, #4
 80091e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	69d9      	ldr	r1, [r3, #28]
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	691a      	ldr	r2, [r3, #16]
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	430a      	orrs	r2, r1
 80091fa:	61da      	str	r2, [r3, #28]
      break;
 80091fc:	e064      	b.n	80092c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	68b9      	ldr	r1, [r7, #8]
 8009204:	4618      	mov	r0, r3
 8009206:	f000 fbd1 	bl	80099ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	69da      	ldr	r2, [r3, #28]
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009218:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	69da      	ldr	r2, [r3, #28]
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009228:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	69d9      	ldr	r1, [r3, #28]
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	691b      	ldr	r3, [r3, #16]
 8009234:	021a      	lsls	r2, r3, #8
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	430a      	orrs	r2, r1
 800923c:	61da      	str	r2, [r3, #28]
      break;
 800923e:	e043      	b.n	80092c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	68b9      	ldr	r1, [r7, #8]
 8009246:	4618      	mov	r0, r3
 8009248:	f000 fc1a 	bl	8009a80 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f042 0208 	orr.w	r2, r2, #8
 800925a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f022 0204 	bic.w	r2, r2, #4
 800926a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	691a      	ldr	r2, [r3, #16]
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	430a      	orrs	r2, r1
 800927c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800927e:	e023      	b.n	80092c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	68b9      	ldr	r1, [r7, #8]
 8009286:	4618      	mov	r0, r3
 8009288:	f000 fc5e 	bl	8009b48 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800929a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	691b      	ldr	r3, [r3, #16]
 80092b6:	021a      	lsls	r2, r3, #8
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	430a      	orrs	r2, r1
 80092be:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80092c0:	e002      	b.n	80092c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80092c2:	2301      	movs	r3, #1
 80092c4:	75fb      	strb	r3, [r7, #23]
      break;
 80092c6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2200      	movs	r2, #0
 80092cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80092d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3718      	adds	r7, #24
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}
 80092da:	bf00      	nop

080092dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b084      	sub	sp, #16
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80092e6:	2300      	movs	r3, #0
 80092e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092f0:	2b01      	cmp	r3, #1
 80092f2:	d101      	bne.n	80092f8 <HAL_TIM_ConfigClockSource+0x1c>
 80092f4:	2302      	movs	r3, #2
 80092f6:	e0b6      	b.n	8009466 <HAL_TIM_ConfigClockSource+0x18a>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2201      	movs	r2, #1
 80092fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2202      	movs	r2, #2
 8009304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	689b      	ldr	r3, [r3, #8]
 800930e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009316:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800931a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009322:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	68ba      	ldr	r2, [r7, #8]
 800932a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009334:	d03e      	beq.n	80093b4 <HAL_TIM_ConfigClockSource+0xd8>
 8009336:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800933a:	f200 8087 	bhi.w	800944c <HAL_TIM_ConfigClockSource+0x170>
 800933e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009342:	f000 8086 	beq.w	8009452 <HAL_TIM_ConfigClockSource+0x176>
 8009346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800934a:	d87f      	bhi.n	800944c <HAL_TIM_ConfigClockSource+0x170>
 800934c:	2b70      	cmp	r3, #112	; 0x70
 800934e:	d01a      	beq.n	8009386 <HAL_TIM_ConfigClockSource+0xaa>
 8009350:	2b70      	cmp	r3, #112	; 0x70
 8009352:	d87b      	bhi.n	800944c <HAL_TIM_ConfigClockSource+0x170>
 8009354:	2b60      	cmp	r3, #96	; 0x60
 8009356:	d050      	beq.n	80093fa <HAL_TIM_ConfigClockSource+0x11e>
 8009358:	2b60      	cmp	r3, #96	; 0x60
 800935a:	d877      	bhi.n	800944c <HAL_TIM_ConfigClockSource+0x170>
 800935c:	2b50      	cmp	r3, #80	; 0x50
 800935e:	d03c      	beq.n	80093da <HAL_TIM_ConfigClockSource+0xfe>
 8009360:	2b50      	cmp	r3, #80	; 0x50
 8009362:	d873      	bhi.n	800944c <HAL_TIM_ConfigClockSource+0x170>
 8009364:	2b40      	cmp	r3, #64	; 0x40
 8009366:	d058      	beq.n	800941a <HAL_TIM_ConfigClockSource+0x13e>
 8009368:	2b40      	cmp	r3, #64	; 0x40
 800936a:	d86f      	bhi.n	800944c <HAL_TIM_ConfigClockSource+0x170>
 800936c:	2b30      	cmp	r3, #48	; 0x30
 800936e:	d064      	beq.n	800943a <HAL_TIM_ConfigClockSource+0x15e>
 8009370:	2b30      	cmp	r3, #48	; 0x30
 8009372:	d86b      	bhi.n	800944c <HAL_TIM_ConfigClockSource+0x170>
 8009374:	2b20      	cmp	r3, #32
 8009376:	d060      	beq.n	800943a <HAL_TIM_ConfigClockSource+0x15e>
 8009378:	2b20      	cmp	r3, #32
 800937a:	d867      	bhi.n	800944c <HAL_TIM_ConfigClockSource+0x170>
 800937c:	2b00      	cmp	r3, #0
 800937e:	d05c      	beq.n	800943a <HAL_TIM_ConfigClockSource+0x15e>
 8009380:	2b10      	cmp	r3, #16
 8009382:	d05a      	beq.n	800943a <HAL_TIM_ConfigClockSource+0x15e>
 8009384:	e062      	b.n	800944c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6818      	ldr	r0, [r3, #0]
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	6899      	ldr	r1, [r3, #8]
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	685a      	ldr	r2, [r3, #4]
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	68db      	ldr	r3, [r3, #12]
 8009396:	f000 fdd5 	bl	8009f44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	689b      	ldr	r3, [r3, #8]
 80093a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80093a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	68ba      	ldr	r2, [r7, #8]
 80093b0:	609a      	str	r2, [r3, #8]
      break;
 80093b2:	e04f      	b.n	8009454 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6818      	ldr	r0, [r3, #0]
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	6899      	ldr	r1, [r3, #8]
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	685a      	ldr	r2, [r3, #4]
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	68db      	ldr	r3, [r3, #12]
 80093c4:	f000 fdbe 	bl	8009f44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	689a      	ldr	r2, [r3, #8]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80093d6:	609a      	str	r2, [r3, #8]
      break;
 80093d8:	e03c      	b.n	8009454 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6818      	ldr	r0, [r3, #0]
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	6859      	ldr	r1, [r3, #4]
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	68db      	ldr	r3, [r3, #12]
 80093e6:	461a      	mov	r2, r3
 80093e8:	f000 fc7c 	bl	8009ce4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	2150      	movs	r1, #80	; 0x50
 80093f2:	4618      	mov	r0, r3
 80093f4:	f000 fd8b 	bl	8009f0e <TIM_ITRx_SetConfig>
      break;
 80093f8:	e02c      	b.n	8009454 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6818      	ldr	r0, [r3, #0]
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	6859      	ldr	r1, [r3, #4]
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	68db      	ldr	r3, [r3, #12]
 8009406:	461a      	mov	r2, r3
 8009408:	f000 fcd8 	bl	8009dbc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	2160      	movs	r1, #96	; 0x60
 8009412:	4618      	mov	r0, r3
 8009414:	f000 fd7b 	bl	8009f0e <TIM_ITRx_SetConfig>
      break;
 8009418:	e01c      	b.n	8009454 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6818      	ldr	r0, [r3, #0]
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	6859      	ldr	r1, [r3, #4]
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	68db      	ldr	r3, [r3, #12]
 8009426:	461a      	mov	r2, r3
 8009428:	f000 fc5c 	bl	8009ce4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	2140      	movs	r1, #64	; 0x40
 8009432:	4618      	mov	r0, r3
 8009434:	f000 fd6b 	bl	8009f0e <TIM_ITRx_SetConfig>
      break;
 8009438:	e00c      	b.n	8009454 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681a      	ldr	r2, [r3, #0]
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4619      	mov	r1, r3
 8009444:	4610      	mov	r0, r2
 8009446:	f000 fd62 	bl	8009f0e <TIM_ITRx_SetConfig>
      break;
 800944a:	e003      	b.n	8009454 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800944c:	2301      	movs	r3, #1
 800944e:	73fb      	strb	r3, [r7, #15]
      break;
 8009450:	e000      	b.n	8009454 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8009452:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2201      	movs	r2, #1
 8009458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2200      	movs	r2, #0
 8009460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009464:	7bfb      	ldrb	r3, [r7, #15]
}
 8009466:	4618      	mov	r0, r3
 8009468:	3710      	adds	r7, #16
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}
	...

08009470 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009470:	b480      	push	{r7}
 8009472:	b085      	sub	sp, #20
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800947a:	2300      	movs	r3, #0
 800947c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	2b0c      	cmp	r3, #12
 8009482:	d831      	bhi.n	80094e8 <HAL_TIM_ReadCapturedValue+0x78>
 8009484:	a201      	add	r2, pc, #4	; (adr r2, 800948c <HAL_TIM_ReadCapturedValue+0x1c>)
 8009486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800948a:	bf00      	nop
 800948c:	080094c1 	.word	0x080094c1
 8009490:	080094e9 	.word	0x080094e9
 8009494:	080094e9 	.word	0x080094e9
 8009498:	080094e9 	.word	0x080094e9
 800949c:	080094cb 	.word	0x080094cb
 80094a0:	080094e9 	.word	0x080094e9
 80094a4:	080094e9 	.word	0x080094e9
 80094a8:	080094e9 	.word	0x080094e9
 80094ac:	080094d5 	.word	0x080094d5
 80094b0:	080094e9 	.word	0x080094e9
 80094b4:	080094e9 	.word	0x080094e9
 80094b8:	080094e9 	.word	0x080094e9
 80094bc:	080094df 	.word	0x080094df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094c6:	60fb      	str	r3, [r7, #12]

      break;
 80094c8:	e00f      	b.n	80094ea <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094d0:	60fb      	str	r3, [r7, #12]

      break;
 80094d2:	e00a      	b.n	80094ea <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094da:	60fb      	str	r3, [r7, #12]

      break;
 80094dc:	e005      	b.n	80094ea <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094e4:	60fb      	str	r3, [r7, #12]

      break;
 80094e6:	e000      	b.n	80094ea <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80094e8:	bf00      	nop
  }

  return tmpreg;
 80094ea:	68fb      	ldr	r3, [r7, #12]
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3714      	adds	r7, #20
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr

080094f8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b083      	sub	sp, #12
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009500:	bf00      	nop
 8009502:	370c      	adds	r7, #12
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr

0800950c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800950c:	b480      	push	{r7}
 800950e:	b083      	sub	sp, #12
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009514:	bf00      	nop
 8009516:	370c      	adds	r7, #12
 8009518:	46bd      	mov	sp, r7
 800951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951e:	4770      	bx	lr

08009520 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009520:	b480      	push	{r7}
 8009522:	b083      	sub	sp, #12
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009528:	bf00      	nop
 800952a:	370c      	adds	r7, #12
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr

08009534 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009534:	b480      	push	{r7}
 8009536:	b083      	sub	sp, #12
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800953c:	bf00      	nop
 800953e:	370c      	adds	r7, #12
 8009540:	46bd      	mov	sp, r7
 8009542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009546:	4770      	bx	lr

08009548 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009548:	b480      	push	{r7}
 800954a:	b085      	sub	sp, #20
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	4a3c      	ldr	r2, [pc, #240]	; (800964c <TIM_Base_SetConfig+0x104>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d00f      	beq.n	8009580 <TIM_Base_SetConfig+0x38>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009566:	d00b      	beq.n	8009580 <TIM_Base_SetConfig+0x38>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	4a39      	ldr	r2, [pc, #228]	; (8009650 <TIM_Base_SetConfig+0x108>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d007      	beq.n	8009580 <TIM_Base_SetConfig+0x38>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	4a38      	ldr	r2, [pc, #224]	; (8009654 <TIM_Base_SetConfig+0x10c>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d003      	beq.n	8009580 <TIM_Base_SetConfig+0x38>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	4a37      	ldr	r2, [pc, #220]	; (8009658 <TIM_Base_SetConfig+0x110>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d108      	bne.n	8009592 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009586:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	685b      	ldr	r3, [r3, #4]
 800958c:	68fa      	ldr	r2, [r7, #12]
 800958e:	4313      	orrs	r3, r2
 8009590:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	4a2d      	ldr	r2, [pc, #180]	; (800964c <TIM_Base_SetConfig+0x104>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d01b      	beq.n	80095d2 <TIM_Base_SetConfig+0x8a>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095a0:	d017      	beq.n	80095d2 <TIM_Base_SetConfig+0x8a>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	4a2a      	ldr	r2, [pc, #168]	; (8009650 <TIM_Base_SetConfig+0x108>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d013      	beq.n	80095d2 <TIM_Base_SetConfig+0x8a>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	4a29      	ldr	r2, [pc, #164]	; (8009654 <TIM_Base_SetConfig+0x10c>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d00f      	beq.n	80095d2 <TIM_Base_SetConfig+0x8a>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	4a28      	ldr	r2, [pc, #160]	; (8009658 <TIM_Base_SetConfig+0x110>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d00b      	beq.n	80095d2 <TIM_Base_SetConfig+0x8a>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	4a27      	ldr	r2, [pc, #156]	; (800965c <TIM_Base_SetConfig+0x114>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d007      	beq.n	80095d2 <TIM_Base_SetConfig+0x8a>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	4a26      	ldr	r2, [pc, #152]	; (8009660 <TIM_Base_SetConfig+0x118>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d003      	beq.n	80095d2 <TIM_Base_SetConfig+0x8a>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	4a25      	ldr	r2, [pc, #148]	; (8009664 <TIM_Base_SetConfig+0x11c>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d108      	bne.n	80095e4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	68db      	ldr	r3, [r3, #12]
 80095de:	68fa      	ldr	r2, [r7, #12]
 80095e0:	4313      	orrs	r3, r2
 80095e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	695b      	ldr	r3, [r3, #20]
 80095ee:	4313      	orrs	r3, r2
 80095f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	68fa      	ldr	r2, [r7, #12]
 80095f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	689a      	ldr	r2, [r3, #8]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	681a      	ldr	r2, [r3, #0]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	4a10      	ldr	r2, [pc, #64]	; (800964c <TIM_Base_SetConfig+0x104>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d00f      	beq.n	8009630 <TIM_Base_SetConfig+0xe8>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	4a11      	ldr	r2, [pc, #68]	; (8009658 <TIM_Base_SetConfig+0x110>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d00b      	beq.n	8009630 <TIM_Base_SetConfig+0xe8>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	4a10      	ldr	r2, [pc, #64]	; (800965c <TIM_Base_SetConfig+0x114>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d007      	beq.n	8009630 <TIM_Base_SetConfig+0xe8>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	4a0f      	ldr	r2, [pc, #60]	; (8009660 <TIM_Base_SetConfig+0x118>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d003      	beq.n	8009630 <TIM_Base_SetConfig+0xe8>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	4a0e      	ldr	r2, [pc, #56]	; (8009664 <TIM_Base_SetConfig+0x11c>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d103      	bne.n	8009638 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	691a      	ldr	r2, [r3, #16]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2201      	movs	r2, #1
 800963c:	615a      	str	r2, [r3, #20]
}
 800963e:	bf00      	nop
 8009640:	3714      	adds	r7, #20
 8009642:	46bd      	mov	sp, r7
 8009644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009648:	4770      	bx	lr
 800964a:	bf00      	nop
 800964c:	40012c00 	.word	0x40012c00
 8009650:	40000400 	.word	0x40000400
 8009654:	40000800 	.word	0x40000800
 8009658:	40013400 	.word	0x40013400
 800965c:	40014000 	.word	0x40014000
 8009660:	40014400 	.word	0x40014400
 8009664:	40014800 	.word	0x40014800

08009668 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009668:	b480      	push	{r7}
 800966a:	b087      	sub	sp, #28
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6a1b      	ldr	r3, [r3, #32]
 8009676:	f023 0201 	bic.w	r2, r3, #1
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6a1b      	ldr	r3, [r3, #32]
 8009682:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	685b      	ldr	r3, [r3, #4]
 8009688:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	699b      	ldr	r3, [r3, #24]
 800968e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800969a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	f023 0303 	bic.w	r3, r3, #3
 80096a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	68fa      	ldr	r2, [r7, #12]
 80096aa:	4313      	orrs	r3, r2
 80096ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	f023 0302 	bic.w	r3, r3, #2
 80096b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	689b      	ldr	r3, [r3, #8]
 80096ba:	697a      	ldr	r2, [r7, #20]
 80096bc:	4313      	orrs	r3, r2
 80096be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	4a2c      	ldr	r2, [pc, #176]	; (8009774 <TIM_OC1_SetConfig+0x10c>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d00f      	beq.n	80096e8 <TIM_OC1_SetConfig+0x80>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	4a2b      	ldr	r2, [pc, #172]	; (8009778 <TIM_OC1_SetConfig+0x110>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d00b      	beq.n	80096e8 <TIM_OC1_SetConfig+0x80>
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	4a2a      	ldr	r2, [pc, #168]	; (800977c <TIM_OC1_SetConfig+0x114>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d007      	beq.n	80096e8 <TIM_OC1_SetConfig+0x80>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	4a29      	ldr	r2, [pc, #164]	; (8009780 <TIM_OC1_SetConfig+0x118>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d003      	beq.n	80096e8 <TIM_OC1_SetConfig+0x80>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	4a28      	ldr	r2, [pc, #160]	; (8009784 <TIM_OC1_SetConfig+0x11c>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d10c      	bne.n	8009702 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	f023 0308 	bic.w	r3, r3, #8
 80096ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	68db      	ldr	r3, [r3, #12]
 80096f4:	697a      	ldr	r2, [r7, #20]
 80096f6:	4313      	orrs	r3, r2
 80096f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	f023 0304 	bic.w	r3, r3, #4
 8009700:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	4a1b      	ldr	r2, [pc, #108]	; (8009774 <TIM_OC1_SetConfig+0x10c>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d00f      	beq.n	800972a <TIM_OC1_SetConfig+0xc2>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	4a1a      	ldr	r2, [pc, #104]	; (8009778 <TIM_OC1_SetConfig+0x110>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d00b      	beq.n	800972a <TIM_OC1_SetConfig+0xc2>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	4a19      	ldr	r2, [pc, #100]	; (800977c <TIM_OC1_SetConfig+0x114>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d007      	beq.n	800972a <TIM_OC1_SetConfig+0xc2>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	4a18      	ldr	r2, [pc, #96]	; (8009780 <TIM_OC1_SetConfig+0x118>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d003      	beq.n	800972a <TIM_OC1_SetConfig+0xc2>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	4a17      	ldr	r2, [pc, #92]	; (8009784 <TIM_OC1_SetConfig+0x11c>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d111      	bne.n	800974e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009730:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009738:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	695b      	ldr	r3, [r3, #20]
 800973e:	693a      	ldr	r2, [r7, #16]
 8009740:	4313      	orrs	r3, r2
 8009742:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	699b      	ldr	r3, [r3, #24]
 8009748:	693a      	ldr	r2, [r7, #16]
 800974a:	4313      	orrs	r3, r2
 800974c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	693a      	ldr	r2, [r7, #16]
 8009752:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	68fa      	ldr	r2, [r7, #12]
 8009758:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	685a      	ldr	r2, [r3, #4]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	697a      	ldr	r2, [r7, #20]
 8009766:	621a      	str	r2, [r3, #32]
}
 8009768:	bf00      	nop
 800976a:	371c      	adds	r7, #28
 800976c:	46bd      	mov	sp, r7
 800976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009772:	4770      	bx	lr
 8009774:	40012c00 	.word	0x40012c00
 8009778:	40013400 	.word	0x40013400
 800977c:	40014000 	.word	0x40014000
 8009780:	40014400 	.word	0x40014400
 8009784:	40014800 	.word	0x40014800

08009788 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009788:	b480      	push	{r7}
 800978a:	b087      	sub	sp, #28
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6a1b      	ldr	r3, [r3, #32]
 8009796:	f023 0210 	bic.w	r2, r3, #16
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6a1b      	ldr	r3, [r3, #32]
 80097a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	685b      	ldr	r3, [r3, #4]
 80097a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	699b      	ldr	r3, [r3, #24]
 80097ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80097b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	021b      	lsls	r3, r3, #8
 80097ca:	68fa      	ldr	r2, [r7, #12]
 80097cc:	4313      	orrs	r3, r2
 80097ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	f023 0320 	bic.w	r3, r3, #32
 80097d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	011b      	lsls	r3, r3, #4
 80097de:	697a      	ldr	r2, [r7, #20]
 80097e0:	4313      	orrs	r3, r2
 80097e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	4a28      	ldr	r2, [pc, #160]	; (8009888 <TIM_OC2_SetConfig+0x100>)
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d003      	beq.n	80097f4 <TIM_OC2_SetConfig+0x6c>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	4a27      	ldr	r2, [pc, #156]	; (800988c <TIM_OC2_SetConfig+0x104>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d10d      	bne.n	8009810 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	68db      	ldr	r3, [r3, #12]
 8009800:	011b      	lsls	r3, r3, #4
 8009802:	697a      	ldr	r2, [r7, #20]
 8009804:	4313      	orrs	r3, r2
 8009806:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800980e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	4a1d      	ldr	r2, [pc, #116]	; (8009888 <TIM_OC2_SetConfig+0x100>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d00f      	beq.n	8009838 <TIM_OC2_SetConfig+0xb0>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	4a1c      	ldr	r2, [pc, #112]	; (800988c <TIM_OC2_SetConfig+0x104>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d00b      	beq.n	8009838 <TIM_OC2_SetConfig+0xb0>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	4a1b      	ldr	r2, [pc, #108]	; (8009890 <TIM_OC2_SetConfig+0x108>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d007      	beq.n	8009838 <TIM_OC2_SetConfig+0xb0>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	4a1a      	ldr	r2, [pc, #104]	; (8009894 <TIM_OC2_SetConfig+0x10c>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d003      	beq.n	8009838 <TIM_OC2_SetConfig+0xb0>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	4a19      	ldr	r2, [pc, #100]	; (8009898 <TIM_OC2_SetConfig+0x110>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d113      	bne.n	8009860 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800983e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009846:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	695b      	ldr	r3, [r3, #20]
 800984c:	009b      	lsls	r3, r3, #2
 800984e:	693a      	ldr	r2, [r7, #16]
 8009850:	4313      	orrs	r3, r2
 8009852:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	699b      	ldr	r3, [r3, #24]
 8009858:	009b      	lsls	r3, r3, #2
 800985a:	693a      	ldr	r2, [r7, #16]
 800985c:	4313      	orrs	r3, r2
 800985e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	693a      	ldr	r2, [r7, #16]
 8009864:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	68fa      	ldr	r2, [r7, #12]
 800986a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	685a      	ldr	r2, [r3, #4]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	697a      	ldr	r2, [r7, #20]
 8009878:	621a      	str	r2, [r3, #32]
}
 800987a:	bf00      	nop
 800987c:	371c      	adds	r7, #28
 800987e:	46bd      	mov	sp, r7
 8009880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009884:	4770      	bx	lr
 8009886:	bf00      	nop
 8009888:	40012c00 	.word	0x40012c00
 800988c:	40013400 	.word	0x40013400
 8009890:	40014000 	.word	0x40014000
 8009894:	40014400 	.word	0x40014400
 8009898:	40014800 	.word	0x40014800

0800989c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800989c:	b480      	push	{r7}
 800989e:	b087      	sub	sp, #28
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
 80098a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6a1b      	ldr	r3, [r3, #32]
 80098aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6a1b      	ldr	r3, [r3, #32]
 80098b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	685b      	ldr	r3, [r3, #4]
 80098bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	69db      	ldr	r3, [r3, #28]
 80098c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80098ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	f023 0303 	bic.w	r3, r3, #3
 80098d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	68fa      	ldr	r2, [r7, #12]
 80098de:	4313      	orrs	r3, r2
 80098e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80098e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	689b      	ldr	r3, [r3, #8]
 80098ee:	021b      	lsls	r3, r3, #8
 80098f0:	697a      	ldr	r2, [r7, #20]
 80098f2:	4313      	orrs	r3, r2
 80098f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	4a27      	ldr	r2, [pc, #156]	; (8009998 <TIM_OC3_SetConfig+0xfc>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d003      	beq.n	8009906 <TIM_OC3_SetConfig+0x6a>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	4a26      	ldr	r2, [pc, #152]	; (800999c <TIM_OC3_SetConfig+0x100>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d10d      	bne.n	8009922 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800990c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	68db      	ldr	r3, [r3, #12]
 8009912:	021b      	lsls	r3, r3, #8
 8009914:	697a      	ldr	r2, [r7, #20]
 8009916:	4313      	orrs	r3, r2
 8009918:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009920:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	4a1c      	ldr	r2, [pc, #112]	; (8009998 <TIM_OC3_SetConfig+0xfc>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d00f      	beq.n	800994a <TIM_OC3_SetConfig+0xae>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	4a1b      	ldr	r2, [pc, #108]	; (800999c <TIM_OC3_SetConfig+0x100>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d00b      	beq.n	800994a <TIM_OC3_SetConfig+0xae>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	4a1a      	ldr	r2, [pc, #104]	; (80099a0 <TIM_OC3_SetConfig+0x104>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d007      	beq.n	800994a <TIM_OC3_SetConfig+0xae>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	4a19      	ldr	r2, [pc, #100]	; (80099a4 <TIM_OC3_SetConfig+0x108>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d003      	beq.n	800994a <TIM_OC3_SetConfig+0xae>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	4a18      	ldr	r2, [pc, #96]	; (80099a8 <TIM_OC3_SetConfig+0x10c>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d113      	bne.n	8009972 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009950:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009958:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	695b      	ldr	r3, [r3, #20]
 800995e:	011b      	lsls	r3, r3, #4
 8009960:	693a      	ldr	r2, [r7, #16]
 8009962:	4313      	orrs	r3, r2
 8009964:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	699b      	ldr	r3, [r3, #24]
 800996a:	011b      	lsls	r3, r3, #4
 800996c:	693a      	ldr	r2, [r7, #16]
 800996e:	4313      	orrs	r3, r2
 8009970:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	693a      	ldr	r2, [r7, #16]
 8009976:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	68fa      	ldr	r2, [r7, #12]
 800997c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	685a      	ldr	r2, [r3, #4]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	697a      	ldr	r2, [r7, #20]
 800998a:	621a      	str	r2, [r3, #32]
}
 800998c:	bf00      	nop
 800998e:	371c      	adds	r7, #28
 8009990:	46bd      	mov	sp, r7
 8009992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009996:	4770      	bx	lr
 8009998:	40012c00 	.word	0x40012c00
 800999c:	40013400 	.word	0x40013400
 80099a0:	40014000 	.word	0x40014000
 80099a4:	40014400 	.word	0x40014400
 80099a8:	40014800 	.word	0x40014800

080099ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80099ac:	b480      	push	{r7}
 80099ae:	b087      	sub	sp, #28
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
 80099b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6a1b      	ldr	r3, [r3, #32]
 80099ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6a1b      	ldr	r3, [r3, #32]
 80099c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	685b      	ldr	r3, [r3, #4]
 80099cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	69db      	ldr	r3, [r3, #28]
 80099d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80099da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	021b      	lsls	r3, r3, #8
 80099ee:	68fa      	ldr	r2, [r7, #12]
 80099f0:	4313      	orrs	r3, r2
 80099f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80099fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	689b      	ldr	r3, [r3, #8]
 8009a00:	031b      	lsls	r3, r3, #12
 8009a02:	693a      	ldr	r2, [r7, #16]
 8009a04:	4313      	orrs	r3, r2
 8009a06:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	4a18      	ldr	r2, [pc, #96]	; (8009a6c <TIM_OC4_SetConfig+0xc0>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d00f      	beq.n	8009a30 <TIM_OC4_SetConfig+0x84>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	4a17      	ldr	r2, [pc, #92]	; (8009a70 <TIM_OC4_SetConfig+0xc4>)
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d00b      	beq.n	8009a30 <TIM_OC4_SetConfig+0x84>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	4a16      	ldr	r2, [pc, #88]	; (8009a74 <TIM_OC4_SetConfig+0xc8>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d007      	beq.n	8009a30 <TIM_OC4_SetConfig+0x84>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	4a15      	ldr	r2, [pc, #84]	; (8009a78 <TIM_OC4_SetConfig+0xcc>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d003      	beq.n	8009a30 <TIM_OC4_SetConfig+0x84>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	4a14      	ldr	r2, [pc, #80]	; (8009a7c <TIM_OC4_SetConfig+0xd0>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d109      	bne.n	8009a44 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009a30:	697b      	ldr	r3, [r7, #20]
 8009a32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	695b      	ldr	r3, [r3, #20]
 8009a3c:	019b      	lsls	r3, r3, #6
 8009a3e:	697a      	ldr	r2, [r7, #20]
 8009a40:	4313      	orrs	r3, r2
 8009a42:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	697a      	ldr	r2, [r7, #20]
 8009a48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	68fa      	ldr	r2, [r7, #12]
 8009a4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	685a      	ldr	r2, [r3, #4]
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	693a      	ldr	r2, [r7, #16]
 8009a5c:	621a      	str	r2, [r3, #32]
}
 8009a5e:	bf00      	nop
 8009a60:	371c      	adds	r7, #28
 8009a62:	46bd      	mov	sp, r7
 8009a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a68:	4770      	bx	lr
 8009a6a:	bf00      	nop
 8009a6c:	40012c00 	.word	0x40012c00
 8009a70:	40013400 	.word	0x40013400
 8009a74:	40014000 	.word	0x40014000
 8009a78:	40014400 	.word	0x40014400
 8009a7c:	40014800 	.word	0x40014800

08009a80 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b087      	sub	sp, #28
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6a1b      	ldr	r3, [r3, #32]
 8009a8e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6a1b      	ldr	r3, [r3, #32]
 8009a9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ab2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	68fa      	ldr	r2, [r7, #12]
 8009aba:	4313      	orrs	r3, r2
 8009abc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009ac4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	689b      	ldr	r3, [r3, #8]
 8009aca:	041b      	lsls	r3, r3, #16
 8009acc:	693a      	ldr	r2, [r7, #16]
 8009ace:	4313      	orrs	r3, r2
 8009ad0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	4a17      	ldr	r2, [pc, #92]	; (8009b34 <TIM_OC5_SetConfig+0xb4>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d00f      	beq.n	8009afa <TIM_OC5_SetConfig+0x7a>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	4a16      	ldr	r2, [pc, #88]	; (8009b38 <TIM_OC5_SetConfig+0xb8>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d00b      	beq.n	8009afa <TIM_OC5_SetConfig+0x7a>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	4a15      	ldr	r2, [pc, #84]	; (8009b3c <TIM_OC5_SetConfig+0xbc>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d007      	beq.n	8009afa <TIM_OC5_SetConfig+0x7a>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	4a14      	ldr	r2, [pc, #80]	; (8009b40 <TIM_OC5_SetConfig+0xc0>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d003      	beq.n	8009afa <TIM_OC5_SetConfig+0x7a>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	4a13      	ldr	r2, [pc, #76]	; (8009b44 <TIM_OC5_SetConfig+0xc4>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d109      	bne.n	8009b0e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b00:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	695b      	ldr	r3, [r3, #20]
 8009b06:	021b      	lsls	r3, r3, #8
 8009b08:	697a      	ldr	r2, [r7, #20]
 8009b0a:	4313      	orrs	r3, r2
 8009b0c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	697a      	ldr	r2, [r7, #20]
 8009b12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	68fa      	ldr	r2, [r7, #12]
 8009b18:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	685a      	ldr	r2, [r3, #4]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	693a      	ldr	r2, [r7, #16]
 8009b26:	621a      	str	r2, [r3, #32]
}
 8009b28:	bf00      	nop
 8009b2a:	371c      	adds	r7, #28
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b32:	4770      	bx	lr
 8009b34:	40012c00 	.word	0x40012c00
 8009b38:	40013400 	.word	0x40013400
 8009b3c:	40014000 	.word	0x40014000
 8009b40:	40014400 	.word	0x40014400
 8009b44:	40014800 	.word	0x40014800

08009b48 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b087      	sub	sp, #28
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6a1b      	ldr	r3, [r3, #32]
 8009b56:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6a1b      	ldr	r3, [r3, #32]
 8009b62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	685b      	ldr	r3, [r3, #4]
 8009b68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009b76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	021b      	lsls	r3, r3, #8
 8009b82:	68fa      	ldr	r2, [r7, #12]
 8009b84:	4313      	orrs	r3, r2
 8009b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009b8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	689b      	ldr	r3, [r3, #8]
 8009b94:	051b      	lsls	r3, r3, #20
 8009b96:	693a      	ldr	r2, [r7, #16]
 8009b98:	4313      	orrs	r3, r2
 8009b9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	4a18      	ldr	r2, [pc, #96]	; (8009c00 <TIM_OC6_SetConfig+0xb8>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d00f      	beq.n	8009bc4 <TIM_OC6_SetConfig+0x7c>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	4a17      	ldr	r2, [pc, #92]	; (8009c04 <TIM_OC6_SetConfig+0xbc>)
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d00b      	beq.n	8009bc4 <TIM_OC6_SetConfig+0x7c>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	4a16      	ldr	r2, [pc, #88]	; (8009c08 <TIM_OC6_SetConfig+0xc0>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d007      	beq.n	8009bc4 <TIM_OC6_SetConfig+0x7c>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	4a15      	ldr	r2, [pc, #84]	; (8009c0c <TIM_OC6_SetConfig+0xc4>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d003      	beq.n	8009bc4 <TIM_OC6_SetConfig+0x7c>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	4a14      	ldr	r2, [pc, #80]	; (8009c10 <TIM_OC6_SetConfig+0xc8>)
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d109      	bne.n	8009bd8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009bca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	695b      	ldr	r3, [r3, #20]
 8009bd0:	029b      	lsls	r3, r3, #10
 8009bd2:	697a      	ldr	r2, [r7, #20]
 8009bd4:	4313      	orrs	r3, r2
 8009bd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	697a      	ldr	r2, [r7, #20]
 8009bdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	68fa      	ldr	r2, [r7, #12]
 8009be2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	685a      	ldr	r2, [r3, #4]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	693a      	ldr	r2, [r7, #16]
 8009bf0:	621a      	str	r2, [r3, #32]
}
 8009bf2:	bf00      	nop
 8009bf4:	371c      	adds	r7, #28
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfc:	4770      	bx	lr
 8009bfe:	bf00      	nop
 8009c00:	40012c00 	.word	0x40012c00
 8009c04:	40013400 	.word	0x40013400
 8009c08:	40014000 	.word	0x40014000
 8009c0c:	40014400 	.word	0x40014400
 8009c10:	40014800 	.word	0x40014800

08009c14 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b087      	sub	sp, #28
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	60f8      	str	r0, [r7, #12]
 8009c1c:	60b9      	str	r1, [r7, #8]
 8009c1e:	607a      	str	r2, [r7, #4]
 8009c20:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	6a1b      	ldr	r3, [r3, #32]
 8009c26:	f023 0201 	bic.w	r2, r3, #1
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	699b      	ldr	r3, [r3, #24]
 8009c32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	6a1b      	ldr	r3, [r3, #32]
 8009c38:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	4a24      	ldr	r2, [pc, #144]	; (8009cd0 <TIM_TI1_SetConfig+0xbc>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d013      	beq.n	8009c6a <TIM_TI1_SetConfig+0x56>
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c48:	d00f      	beq.n	8009c6a <TIM_TI1_SetConfig+0x56>
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	4a21      	ldr	r2, [pc, #132]	; (8009cd4 <TIM_TI1_SetConfig+0xc0>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d00b      	beq.n	8009c6a <TIM_TI1_SetConfig+0x56>
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	4a20      	ldr	r2, [pc, #128]	; (8009cd8 <TIM_TI1_SetConfig+0xc4>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d007      	beq.n	8009c6a <TIM_TI1_SetConfig+0x56>
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	4a1f      	ldr	r2, [pc, #124]	; (8009cdc <TIM_TI1_SetConfig+0xc8>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d003      	beq.n	8009c6a <TIM_TI1_SetConfig+0x56>
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	4a1e      	ldr	r2, [pc, #120]	; (8009ce0 <TIM_TI1_SetConfig+0xcc>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d101      	bne.n	8009c6e <TIM_TI1_SetConfig+0x5a>
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	e000      	b.n	8009c70 <TIM_TI1_SetConfig+0x5c>
 8009c6e:	2300      	movs	r3, #0
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d008      	beq.n	8009c86 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	f023 0303 	bic.w	r3, r3, #3
 8009c7a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009c7c:	697a      	ldr	r2, [r7, #20]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	4313      	orrs	r3, r2
 8009c82:	617b      	str	r3, [r7, #20]
 8009c84:	e003      	b.n	8009c8e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	f043 0301 	orr.w	r3, r3, #1
 8009c8c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009c94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	011b      	lsls	r3, r3, #4
 8009c9a:	b2db      	uxtb	r3, r3
 8009c9c:	697a      	ldr	r2, [r7, #20]
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	f023 030a 	bic.w	r3, r3, #10
 8009ca8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	f003 030a 	and.w	r3, r3, #10
 8009cb0:	693a      	ldr	r2, [r7, #16]
 8009cb2:	4313      	orrs	r3, r2
 8009cb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	697a      	ldr	r2, [r7, #20]
 8009cba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	693a      	ldr	r2, [r7, #16]
 8009cc0:	621a      	str	r2, [r3, #32]
}
 8009cc2:	bf00      	nop
 8009cc4:	371c      	adds	r7, #28
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ccc:	4770      	bx	lr
 8009cce:	bf00      	nop
 8009cd0:	40012c00 	.word	0x40012c00
 8009cd4:	40000400 	.word	0x40000400
 8009cd8:	40000800 	.word	0x40000800
 8009cdc:	40013400 	.word	0x40013400
 8009ce0:	40014000 	.word	0x40014000

08009ce4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b087      	sub	sp, #28
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	60f8      	str	r0, [r7, #12]
 8009cec:	60b9      	str	r1, [r7, #8]
 8009cee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	6a1b      	ldr	r3, [r3, #32]
 8009cf4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	6a1b      	ldr	r3, [r3, #32]
 8009cfa:	f023 0201 	bic.w	r2, r3, #1
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	699b      	ldr	r3, [r3, #24]
 8009d06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009d0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	011b      	lsls	r3, r3, #4
 8009d14:	693a      	ldr	r2, [r7, #16]
 8009d16:	4313      	orrs	r3, r2
 8009d18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	f023 030a 	bic.w	r3, r3, #10
 8009d20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009d22:	697a      	ldr	r2, [r7, #20]
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	4313      	orrs	r3, r2
 8009d28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	693a      	ldr	r2, [r7, #16]
 8009d2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	697a      	ldr	r2, [r7, #20]
 8009d34:	621a      	str	r2, [r3, #32]
}
 8009d36:	bf00      	nop
 8009d38:	371c      	adds	r7, #28
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d40:	4770      	bx	lr

08009d42 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009d42:	b480      	push	{r7}
 8009d44:	b087      	sub	sp, #28
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	60f8      	str	r0, [r7, #12]
 8009d4a:	60b9      	str	r1, [r7, #8]
 8009d4c:	607a      	str	r2, [r7, #4]
 8009d4e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	6a1b      	ldr	r3, [r3, #32]
 8009d54:	f023 0210 	bic.w	r2, r3, #16
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	699b      	ldr	r3, [r3, #24]
 8009d60:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	6a1b      	ldr	r3, [r3, #32]
 8009d66:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d6e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	021b      	lsls	r3, r3, #8
 8009d74:	697a      	ldr	r2, [r7, #20]
 8009d76:	4313      	orrs	r3, r2
 8009d78:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009d80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	031b      	lsls	r3, r3, #12
 8009d86:	b29b      	uxth	r3, r3
 8009d88:	697a      	ldr	r2, [r7, #20]
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009d94:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	011b      	lsls	r3, r3, #4
 8009d9a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009d9e:	693a      	ldr	r2, [r7, #16]
 8009da0:	4313      	orrs	r3, r2
 8009da2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	697a      	ldr	r2, [r7, #20]
 8009da8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	693a      	ldr	r2, [r7, #16]
 8009dae:	621a      	str	r2, [r3, #32]
}
 8009db0:	bf00      	nop
 8009db2:	371c      	adds	r7, #28
 8009db4:	46bd      	mov	sp, r7
 8009db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dba:	4770      	bx	lr

08009dbc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b087      	sub	sp, #28
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	60f8      	str	r0, [r7, #12]
 8009dc4:	60b9      	str	r1, [r7, #8]
 8009dc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	6a1b      	ldr	r3, [r3, #32]
 8009dcc:	f023 0210 	bic.w	r2, r3, #16
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	699b      	ldr	r3, [r3, #24]
 8009dd8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	6a1b      	ldr	r3, [r3, #32]
 8009dde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009de6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	031b      	lsls	r3, r3, #12
 8009dec:	697a      	ldr	r2, [r7, #20]
 8009dee:	4313      	orrs	r3, r2
 8009df0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009df2:	693b      	ldr	r3, [r7, #16]
 8009df4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009df8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	011b      	lsls	r3, r3, #4
 8009dfe:	693a      	ldr	r2, [r7, #16]
 8009e00:	4313      	orrs	r3, r2
 8009e02:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	697a      	ldr	r2, [r7, #20]
 8009e08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	693a      	ldr	r2, [r7, #16]
 8009e0e:	621a      	str	r2, [r3, #32]
}
 8009e10:	bf00      	nop
 8009e12:	371c      	adds	r7, #28
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr

08009e1c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b087      	sub	sp, #28
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	60f8      	str	r0, [r7, #12]
 8009e24:	60b9      	str	r1, [r7, #8]
 8009e26:	607a      	str	r2, [r7, #4]
 8009e28:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	6a1b      	ldr	r3, [r3, #32]
 8009e2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	69db      	ldr	r3, [r3, #28]
 8009e3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	6a1b      	ldr	r3, [r3, #32]
 8009e40:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	f023 0303 	bic.w	r3, r3, #3
 8009e48:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009e4a:	697a      	ldr	r2, [r7, #20]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009e58:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	011b      	lsls	r3, r3, #4
 8009e5e:	b2db      	uxtb	r3, r3
 8009e60:	697a      	ldr	r2, [r7, #20]
 8009e62:	4313      	orrs	r3, r2
 8009e64:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009e66:	693b      	ldr	r3, [r7, #16]
 8009e68:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8009e6c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	021b      	lsls	r3, r3, #8
 8009e72:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8009e76:	693a      	ldr	r2, [r7, #16]
 8009e78:	4313      	orrs	r3, r2
 8009e7a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	697a      	ldr	r2, [r7, #20]
 8009e80:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	693a      	ldr	r2, [r7, #16]
 8009e86:	621a      	str	r2, [r3, #32]
}
 8009e88:	bf00      	nop
 8009e8a:	371c      	adds	r7, #28
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e92:	4770      	bx	lr

08009e94 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009e94:	b480      	push	{r7}
 8009e96:	b087      	sub	sp, #28
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	60f8      	str	r0, [r7, #12]
 8009e9c:	60b9      	str	r1, [r7, #8]
 8009e9e:	607a      	str	r2, [r7, #4]
 8009ea0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	6a1b      	ldr	r3, [r3, #32]
 8009ea6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	69db      	ldr	r3, [r3, #28]
 8009eb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	6a1b      	ldr	r3, [r3, #32]
 8009eb8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ec0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	021b      	lsls	r3, r3, #8
 8009ec6:	697a      	ldr	r2, [r7, #20]
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009ed2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	031b      	lsls	r3, r3, #12
 8009ed8:	b29b      	uxth	r3, r3
 8009eda:	697a      	ldr	r2, [r7, #20]
 8009edc:	4313      	orrs	r3, r2
 8009ede:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8009ee6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	031b      	lsls	r3, r3, #12
 8009eec:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009ef0:	693a      	ldr	r2, [r7, #16]
 8009ef2:	4313      	orrs	r3, r2
 8009ef4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	697a      	ldr	r2, [r7, #20]
 8009efa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	693a      	ldr	r2, [r7, #16]
 8009f00:	621a      	str	r2, [r3, #32]
}
 8009f02:	bf00      	nop
 8009f04:	371c      	adds	r7, #28
 8009f06:	46bd      	mov	sp, r7
 8009f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0c:	4770      	bx	lr

08009f0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009f0e:	b480      	push	{r7}
 8009f10:	b085      	sub	sp, #20
 8009f12:	af00      	add	r7, sp, #0
 8009f14:	6078      	str	r0, [r7, #4]
 8009f16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	689b      	ldr	r3, [r3, #8]
 8009f1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009f26:	683a      	ldr	r2, [r7, #0]
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	f043 0307 	orr.w	r3, r3, #7
 8009f30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	68fa      	ldr	r2, [r7, #12]
 8009f36:	609a      	str	r2, [r3, #8]
}
 8009f38:	bf00      	nop
 8009f3a:	3714      	adds	r7, #20
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f42:	4770      	bx	lr

08009f44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b087      	sub	sp, #28
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	60f8      	str	r0, [r7, #12]
 8009f4c:	60b9      	str	r1, [r7, #8]
 8009f4e:	607a      	str	r2, [r7, #4]
 8009f50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	689b      	ldr	r3, [r3, #8]
 8009f56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	021a      	lsls	r2, r3, #8
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	431a      	orrs	r2, r3
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	697a      	ldr	r2, [r7, #20]
 8009f6e:	4313      	orrs	r3, r2
 8009f70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	697a      	ldr	r2, [r7, #20]
 8009f76:	609a      	str	r2, [r3, #8]
}
 8009f78:	bf00      	nop
 8009f7a:	371c      	adds	r7, #28
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f82:	4770      	bx	lr

08009f84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b087      	sub	sp, #28
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	60f8      	str	r0, [r7, #12]
 8009f8c:	60b9      	str	r1, [r7, #8]
 8009f8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	f003 031f 	and.w	r3, r3, #31
 8009f96:	2201      	movs	r2, #1
 8009f98:	fa02 f303 	lsl.w	r3, r2, r3
 8009f9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	6a1a      	ldr	r2, [r3, #32]
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	43db      	mvns	r3, r3
 8009fa6:	401a      	ands	r2, r3
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	6a1a      	ldr	r2, [r3, #32]
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	f003 031f 	and.w	r3, r3, #31
 8009fb6:	6879      	ldr	r1, [r7, #4]
 8009fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8009fbc:	431a      	orrs	r2, r3
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	621a      	str	r2, [r3, #32]
}
 8009fc2:	bf00      	nop
 8009fc4:	371c      	adds	r7, #28
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fcc:	4770      	bx	lr
	...

08009fd0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b084      	sub	sp, #16
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d109      	bne.n	8009ff4 <HAL_TIMEx_PWMN_Start+0x24>
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009fe6:	b2db      	uxtb	r3, r3
 8009fe8:	2b01      	cmp	r3, #1
 8009fea:	bf14      	ite	ne
 8009fec:	2301      	movne	r3, #1
 8009fee:	2300      	moveq	r3, #0
 8009ff0:	b2db      	uxtb	r3, r3
 8009ff2:	e022      	b.n	800a03a <HAL_TIMEx_PWMN_Start+0x6a>
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	2b04      	cmp	r3, #4
 8009ff8:	d109      	bne.n	800a00e <HAL_TIMEx_PWMN_Start+0x3e>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a000:	b2db      	uxtb	r3, r3
 800a002:	2b01      	cmp	r3, #1
 800a004:	bf14      	ite	ne
 800a006:	2301      	movne	r3, #1
 800a008:	2300      	moveq	r3, #0
 800a00a:	b2db      	uxtb	r3, r3
 800a00c:	e015      	b.n	800a03a <HAL_TIMEx_PWMN_Start+0x6a>
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	2b08      	cmp	r3, #8
 800a012:	d109      	bne.n	800a028 <HAL_TIMEx_PWMN_Start+0x58>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a01a:	b2db      	uxtb	r3, r3
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	bf14      	ite	ne
 800a020:	2301      	movne	r3, #1
 800a022:	2300      	moveq	r3, #0
 800a024:	b2db      	uxtb	r3, r3
 800a026:	e008      	b.n	800a03a <HAL_TIMEx_PWMN_Start+0x6a>
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800a02e:	b2db      	uxtb	r3, r3
 800a030:	2b01      	cmp	r3, #1
 800a032:	bf14      	ite	ne
 800a034:	2301      	movne	r3, #1
 800a036:	2300      	moveq	r3, #0
 800a038:	b2db      	uxtb	r3, r3
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d001      	beq.n	800a042 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800a03e:	2301      	movs	r3, #1
 800a040:	e069      	b.n	800a116 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d104      	bne.n	800a052 <HAL_TIMEx_PWMN_Start+0x82>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2202      	movs	r2, #2
 800a04c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a050:	e013      	b.n	800a07a <HAL_TIMEx_PWMN_Start+0xaa>
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	2b04      	cmp	r3, #4
 800a056:	d104      	bne.n	800a062 <HAL_TIMEx_PWMN_Start+0x92>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2202      	movs	r2, #2
 800a05c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a060:	e00b      	b.n	800a07a <HAL_TIMEx_PWMN_Start+0xaa>
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	2b08      	cmp	r3, #8
 800a066:	d104      	bne.n	800a072 <HAL_TIMEx_PWMN_Start+0xa2>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2202      	movs	r2, #2
 800a06c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a070:	e003      	b.n	800a07a <HAL_TIMEx_PWMN_Start+0xaa>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2202      	movs	r2, #2
 800a076:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	2204      	movs	r2, #4
 800a080:	6839      	ldr	r1, [r7, #0]
 800a082:	4618      	mov	r0, r3
 800a084:	f000 f9d2 	bl	800a42c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a096:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	4a20      	ldr	r2, [pc, #128]	; (800a120 <HAL_TIMEx_PWMN_Start+0x150>)
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d018      	beq.n	800a0d4 <HAL_TIMEx_PWMN_Start+0x104>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0aa:	d013      	beq.n	800a0d4 <HAL_TIMEx_PWMN_Start+0x104>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4a1c      	ldr	r2, [pc, #112]	; (800a124 <HAL_TIMEx_PWMN_Start+0x154>)
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d00e      	beq.n	800a0d4 <HAL_TIMEx_PWMN_Start+0x104>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	4a1b      	ldr	r2, [pc, #108]	; (800a128 <HAL_TIMEx_PWMN_Start+0x158>)
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d009      	beq.n	800a0d4 <HAL_TIMEx_PWMN_Start+0x104>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	4a19      	ldr	r2, [pc, #100]	; (800a12c <HAL_TIMEx_PWMN_Start+0x15c>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d004      	beq.n	800a0d4 <HAL_TIMEx_PWMN_Start+0x104>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	4a18      	ldr	r2, [pc, #96]	; (800a130 <HAL_TIMEx_PWMN_Start+0x160>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d115      	bne.n	800a100 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	689a      	ldr	r2, [r3, #8]
 800a0da:	4b16      	ldr	r3, [pc, #88]	; (800a134 <HAL_TIMEx_PWMN_Start+0x164>)
 800a0dc:	4013      	ands	r3, r2
 800a0de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	2b06      	cmp	r3, #6
 800a0e4:	d015      	beq.n	800a112 <HAL_TIMEx_PWMN_Start+0x142>
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0ec:	d011      	beq.n	800a112 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	681a      	ldr	r2, [r3, #0]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f042 0201 	orr.w	r2, r2, #1
 800a0fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0fe:	e008      	b.n	800a112 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	681a      	ldr	r2, [r3, #0]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f042 0201 	orr.w	r2, r2, #1
 800a10e:	601a      	str	r2, [r3, #0]
 800a110:	e000      	b.n	800a114 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a112:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a114:	2300      	movs	r3, #0
}
 800a116:	4618      	mov	r0, r3
 800a118:	3710      	adds	r7, #16
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
 800a11e:	bf00      	nop
 800a120:	40012c00 	.word	0x40012c00
 800a124:	40000400 	.word	0x40000400
 800a128:	40000800 	.word	0x40000800
 800a12c:	40013400 	.word	0x40013400
 800a130:	40014000 	.word	0x40014000
 800a134:	00010007 	.word	0x00010007

0800a138 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b082      	sub	sp, #8
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	2200      	movs	r2, #0
 800a148:	6839      	ldr	r1, [r7, #0]
 800a14a:	4618      	mov	r0, r3
 800a14c:	f000 f96e 	bl	800a42c <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	6a1a      	ldr	r2, [r3, #32]
 800a156:	f241 1311 	movw	r3, #4369	; 0x1111
 800a15a:	4013      	ands	r3, r2
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d10f      	bne.n	800a180 <HAL_TIMEx_PWMN_Stop+0x48>
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	6a1a      	ldr	r2, [r3, #32]
 800a166:	f240 4344 	movw	r3, #1092	; 0x444
 800a16a:	4013      	ands	r3, r2
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d107      	bne.n	800a180 <HAL_TIMEx_PWMN_Stop+0x48>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a17e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	6a1a      	ldr	r2, [r3, #32]
 800a186:	f241 1311 	movw	r3, #4369	; 0x1111
 800a18a:	4013      	ands	r3, r2
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d10f      	bne.n	800a1b0 <HAL_TIMEx_PWMN_Stop+0x78>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	6a1a      	ldr	r2, [r3, #32]
 800a196:	f240 4344 	movw	r3, #1092	; 0x444
 800a19a:	4013      	ands	r3, r2
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d107      	bne.n	800a1b0 <HAL_TIMEx_PWMN_Stop+0x78>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	681a      	ldr	r2, [r3, #0]
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f022 0201 	bic.w	r2, r2, #1
 800a1ae:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d104      	bne.n	800a1c0 <HAL_TIMEx_PWMN_Stop+0x88>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2201      	movs	r2, #1
 800a1ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a1be:	e013      	b.n	800a1e8 <HAL_TIMEx_PWMN_Stop+0xb0>
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	2b04      	cmp	r3, #4
 800a1c4:	d104      	bne.n	800a1d0 <HAL_TIMEx_PWMN_Stop+0x98>
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2201      	movs	r2, #1
 800a1ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a1ce:	e00b      	b.n	800a1e8 <HAL_TIMEx_PWMN_Stop+0xb0>
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	2b08      	cmp	r3, #8
 800a1d4:	d104      	bne.n	800a1e0 <HAL_TIMEx_PWMN_Stop+0xa8>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2201      	movs	r2, #1
 800a1da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a1de:	e003      	b.n	800a1e8 <HAL_TIMEx_PWMN_Stop+0xb0>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 800a1e8:	2300      	movs	r3, #0
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3708      	adds	r7, #8
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}
	...

0800a1f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b085      	sub	sp, #20
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a204:	2b01      	cmp	r3, #1
 800a206:	d101      	bne.n	800a20c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a208:	2302      	movs	r3, #2
 800a20a:	e063      	b.n	800a2d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2201      	movs	r2, #1
 800a210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2202      	movs	r2, #2
 800a218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	685b      	ldr	r3, [r3, #4]
 800a222:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	689b      	ldr	r3, [r3, #8]
 800a22a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	4a2b      	ldr	r2, [pc, #172]	; (800a2e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d004      	beq.n	800a240 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4a2a      	ldr	r2, [pc, #168]	; (800a2e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a23c:	4293      	cmp	r3, r2
 800a23e:	d108      	bne.n	800a252 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a246:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	685b      	ldr	r3, [r3, #4]
 800a24c:	68fa      	ldr	r2, [r7, #12]
 800a24e:	4313      	orrs	r3, r2
 800a250:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a258:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	68fa      	ldr	r2, [r7, #12]
 800a260:	4313      	orrs	r3, r2
 800a262:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	68fa      	ldr	r2, [r7, #12]
 800a26a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	4a1b      	ldr	r2, [pc, #108]	; (800a2e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a272:	4293      	cmp	r3, r2
 800a274:	d018      	beq.n	800a2a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a27e:	d013      	beq.n	800a2a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	4a18      	ldr	r2, [pc, #96]	; (800a2e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a286:	4293      	cmp	r3, r2
 800a288:	d00e      	beq.n	800a2a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	4a17      	ldr	r2, [pc, #92]	; (800a2ec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a290:	4293      	cmp	r3, r2
 800a292:	d009      	beq.n	800a2a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	4a12      	ldr	r2, [pc, #72]	; (800a2e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d004      	beq.n	800a2a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	4a13      	ldr	r2, [pc, #76]	; (800a2f0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	d10c      	bne.n	800a2c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a2ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	689b      	ldr	r3, [r3, #8]
 800a2b4:	68ba      	ldr	r2, [r7, #8]
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	68ba      	ldr	r2, [r7, #8]
 800a2c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2201      	movs	r2, #1
 800a2c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a2d2:	2300      	movs	r3, #0
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3714      	adds	r7, #20
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr
 800a2e0:	40012c00 	.word	0x40012c00
 800a2e4:	40013400 	.word	0x40013400
 800a2e8:	40000400 	.word	0x40000400
 800a2ec:	40000800 	.word	0x40000800
 800a2f0:	40014000 	.word	0x40014000

0800a2f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b085      	sub	sp, #20
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a2fe:	2300      	movs	r3, #0
 800a300:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a308:	2b01      	cmp	r3, #1
 800a30a:	d101      	bne.n	800a310 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a30c:	2302      	movs	r3, #2
 800a30e:	e065      	b.n	800a3dc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2201      	movs	r2, #1
 800a314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	68db      	ldr	r3, [r3, #12]
 800a322:	4313      	orrs	r3, r2
 800a324:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	689b      	ldr	r3, [r3, #8]
 800a330:	4313      	orrs	r3, r2
 800a332:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	4313      	orrs	r3, r2
 800a340:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	4313      	orrs	r3, r2
 800a34e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	691b      	ldr	r3, [r3, #16]
 800a35a:	4313      	orrs	r3, r2
 800a35c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	695b      	ldr	r3, [r3, #20]
 800a368:	4313      	orrs	r3, r2
 800a36a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a376:	4313      	orrs	r3, r2
 800a378:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	699b      	ldr	r3, [r3, #24]
 800a384:	041b      	lsls	r3, r3, #16
 800a386:	4313      	orrs	r3, r2
 800a388:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	4a16      	ldr	r2, [pc, #88]	; (800a3e8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a390:	4293      	cmp	r3, r2
 800a392:	d004      	beq.n	800a39e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4a14      	ldr	r2, [pc, #80]	; (800a3ec <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d115      	bne.n	800a3ca <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a8:	051b      	lsls	r3, r3, #20
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	69db      	ldr	r3, [r3, #28]
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	6a1b      	ldr	r3, [r3, #32]
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	68fa      	ldr	r2, [r7, #12]
 800a3d0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a3da:	2300      	movs	r3, #0
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3714      	adds	r7, #20
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e6:	4770      	bx	lr
 800a3e8:	40012c00 	.word	0x40012c00
 800a3ec:	40013400 	.word	0x40013400

0800a3f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b083      	sub	sp, #12
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a3f8:	bf00      	nop
 800a3fa:	370c      	adds	r7, #12
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a402:	4770      	bx	lr

0800a404 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a404:	b480      	push	{r7}
 800a406:	b083      	sub	sp, #12
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a40c:	bf00      	nop
 800a40e:	370c      	adds	r7, #12
 800a410:	46bd      	mov	sp, r7
 800a412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a416:	4770      	bx	lr

0800a418 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a418:	b480      	push	{r7}
 800a41a:	b083      	sub	sp, #12
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a420:	bf00      	nop
 800a422:	370c      	adds	r7, #12
 800a424:	46bd      	mov	sp, r7
 800a426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42a:	4770      	bx	lr

0800a42c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b087      	sub	sp, #28
 800a430:	af00      	add	r7, sp, #0
 800a432:	60f8      	str	r0, [r7, #12]
 800a434:	60b9      	str	r1, [r7, #8]
 800a436:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	f003 031f 	and.w	r3, r3, #31
 800a43e:	2204      	movs	r2, #4
 800a440:	fa02 f303 	lsl.w	r3, r2, r3
 800a444:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	6a1a      	ldr	r2, [r3, #32]
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	43db      	mvns	r3, r3
 800a44e:	401a      	ands	r2, r3
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	6a1a      	ldr	r2, [r3, #32]
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	f003 031f 	and.w	r3, r3, #31
 800a45e:	6879      	ldr	r1, [r7, #4]
 800a460:	fa01 f303 	lsl.w	r3, r1, r3
 800a464:	431a      	orrs	r2, r3
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	621a      	str	r2, [r3, #32]
}
 800a46a:	bf00      	nop
 800a46c:	371c      	adds	r7, #28
 800a46e:	46bd      	mov	sp, r7
 800a470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a474:	4770      	bx	lr

0800a476 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a476:	b580      	push	{r7, lr}
 800a478:	b082      	sub	sp, #8
 800a47a:	af00      	add	r7, sp, #0
 800a47c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d101      	bne.n	800a488 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a484:	2301      	movs	r3, #1
 800a486:	e040      	b.n	800a50a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d106      	bne.n	800a49e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2200      	movs	r2, #0
 800a494:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f7f7 ffeb 	bl	8002474 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2224      	movs	r2, #36	; 0x24
 800a4a2:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	681a      	ldr	r2, [r3, #0]
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f022 0201 	bic.w	r2, r2, #1
 800a4b2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f000 fb29 	bl	800ab0c <UART_SetConfig>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	2b01      	cmp	r3, #1
 800a4be:	d101      	bne.n	800a4c4 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	e022      	b.n	800a50a <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d002      	beq.n	800a4d2 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f000 fcf1 	bl	800aeb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	685a      	ldr	r2, [r3, #4]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a4e0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	689a      	ldr	r2, [r3, #8]
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a4f0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	681a      	ldr	r2, [r3, #0]
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f042 0201 	orr.w	r2, r2, #1
 800a500:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f000 fd78 	bl	800aff8 <UART_CheckIdleState>
 800a508:	4603      	mov	r3, r0
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3708      	adds	r7, #8
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}
	...

0800a514 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b0ba      	sub	sp, #232	; 0xe8
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	69db      	ldr	r3, [r3, #28]
 800a522:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	689b      	ldr	r3, [r3, #8]
 800a536:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a53a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a53e:	f640 030f 	movw	r3, #2063	; 0x80f
 800a542:	4013      	ands	r3, r2
 800a544:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a548:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d115      	bne.n	800a57c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a554:	f003 0320 	and.w	r3, r3, #32
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d00f      	beq.n	800a57c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a55c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a560:	f003 0320 	and.w	r3, r3, #32
 800a564:	2b00      	cmp	r3, #0
 800a566:	d009      	beq.n	800a57c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	f000 82ab 	beq.w	800aac8 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	4798      	blx	r3
      }
      return;
 800a57a:	e2a5      	b.n	800aac8 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a57c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a580:	2b00      	cmp	r3, #0
 800a582:	f000 8117 	beq.w	800a7b4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a586:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a58a:	f003 0301 	and.w	r3, r3, #1
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d106      	bne.n	800a5a0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a592:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a596:	4b85      	ldr	r3, [pc, #532]	; (800a7ac <HAL_UART_IRQHandler+0x298>)
 800a598:	4013      	ands	r3, r2
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	f000 810a 	beq.w	800a7b4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a5a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5a4:	f003 0301 	and.w	r3, r3, #1
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d011      	beq.n	800a5d0 <HAL_UART_IRQHandler+0xbc>
 800a5ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d00b      	beq.n	800a5d0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	2201      	movs	r2, #1
 800a5be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a5c6:	f043 0201 	orr.w	r2, r3, #1
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a5d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5d4:	f003 0302 	and.w	r3, r3, #2
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d011      	beq.n	800a600 <HAL_UART_IRQHandler+0xec>
 800a5dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a5e0:	f003 0301 	and.w	r3, r3, #1
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d00b      	beq.n	800a600 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	2202      	movs	r2, #2
 800a5ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a5f6:	f043 0204 	orr.w	r2, r3, #4
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a604:	f003 0304 	and.w	r3, r3, #4
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d011      	beq.n	800a630 <HAL_UART_IRQHandler+0x11c>
 800a60c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a610:	f003 0301 	and.w	r3, r3, #1
 800a614:	2b00      	cmp	r3, #0
 800a616:	d00b      	beq.n	800a630 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	2204      	movs	r2, #4
 800a61e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a626:	f043 0202 	orr.w	r2, r3, #2
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a634:	f003 0308 	and.w	r3, r3, #8
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d017      	beq.n	800a66c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a63c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a640:	f003 0320 	and.w	r3, r3, #32
 800a644:	2b00      	cmp	r3, #0
 800a646:	d105      	bne.n	800a654 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a648:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a64c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a650:	2b00      	cmp	r3, #0
 800a652:	d00b      	beq.n	800a66c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	2208      	movs	r2, #8
 800a65a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a662:	f043 0208 	orr.w	r2, r3, #8
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a66c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a670:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a674:	2b00      	cmp	r3, #0
 800a676:	d012      	beq.n	800a69e <HAL_UART_IRQHandler+0x18a>
 800a678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a67c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a680:	2b00      	cmp	r3, #0
 800a682:	d00c      	beq.n	800a69e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a68c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a694:	f043 0220 	orr.w	r2, r3, #32
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	f000 8211 	beq.w	800aacc <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a6aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6ae:	f003 0320 	and.w	r3, r3, #32
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d00d      	beq.n	800a6d2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a6b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6ba:	f003 0320 	and.w	r3, r3, #32
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d007      	beq.n	800a6d2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d003      	beq.n	800a6d2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a6d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	689b      	ldr	r3, [r3, #8]
 800a6e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6e6:	2b40      	cmp	r3, #64	; 0x40
 800a6e8:	d005      	beq.n	800a6f6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a6ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a6ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d04f      	beq.n	800a796 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f000 fd8d 	bl	800b216 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	689b      	ldr	r3, [r3, #8]
 800a702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a706:	2b40      	cmp	r3, #64	; 0x40
 800a708:	d141      	bne.n	800a78e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	3308      	adds	r3, #8
 800a710:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a714:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a718:	e853 3f00 	ldrex	r3, [r3]
 800a71c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a720:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a724:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a728:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	3308      	adds	r3, #8
 800a732:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a736:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a73a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a73e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a742:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a746:	e841 2300 	strex	r3, r2, [r1]
 800a74a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a74e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a752:	2b00      	cmp	r3, #0
 800a754:	d1d9      	bne.n	800a70a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d013      	beq.n	800a786 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a762:	4a13      	ldr	r2, [pc, #76]	; (800a7b0 <HAL_UART_IRQHandler+0x29c>)
 800a764:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a76a:	4618      	mov	r0, r3
 800a76c:	f7fa f9c8 	bl	8004b00 <HAL_DMA_Abort_IT>
 800a770:	4603      	mov	r3, r0
 800a772:	2b00      	cmp	r3, #0
 800a774:	d017      	beq.n	800a7a6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a77a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a77c:	687a      	ldr	r2, [r7, #4]
 800a77e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a780:	4610      	mov	r0, r2
 800a782:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a784:	e00f      	b.n	800a7a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f000 f9aa 	bl	800aae0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a78c:	e00b      	b.n	800a7a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f000 f9a6 	bl	800aae0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a794:	e007      	b.n	800a7a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f000 f9a2 	bl	800aae0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800a7a4:	e192      	b.n	800aacc <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7a6:	bf00      	nop
    return;
 800a7a8:	e190      	b.n	800aacc <HAL_UART_IRQHandler+0x5b8>
 800a7aa:	bf00      	nop
 800a7ac:	04000120 	.word	0x04000120
 800a7b0:	0800b2df 	.word	0x0800b2df

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7b8:	2b01      	cmp	r3, #1
 800a7ba:	f040 814b 	bne.w	800aa54 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a7be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7c2:	f003 0310 	and.w	r3, r3, #16
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	f000 8144 	beq.w	800aa54 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a7cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7d0:	f003 0310 	and.w	r3, r3, #16
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	f000 813d 	beq.w	800aa54 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	2210      	movs	r2, #16
 800a7e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	689b      	ldr	r3, [r3, #8]
 800a7e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7ec:	2b40      	cmp	r3, #64	; 0x40
 800a7ee:	f040 80b5 	bne.w	800a95c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	685b      	ldr	r3, [r3, #4]
 800a7fa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a7fe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a802:	2b00      	cmp	r3, #0
 800a804:	f000 8164 	beq.w	800aad0 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a80e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a812:	429a      	cmp	r2, r3
 800a814:	f080 815c 	bcs.w	800aad0 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a81e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a826:	699b      	ldr	r3, [r3, #24]
 800a828:	2b20      	cmp	r3, #32
 800a82a:	f000 8086 	beq.w	800a93a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a836:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a83a:	e853 3f00 	ldrex	r3, [r3]
 800a83e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a842:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a846:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a84a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	461a      	mov	r2, r3
 800a854:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a858:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a85c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a860:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a864:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a868:	e841 2300 	strex	r3, r2, [r1]
 800a86c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a870:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a874:	2b00      	cmp	r3, #0
 800a876:	d1da      	bne.n	800a82e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	3308      	adds	r3, #8
 800a87e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a880:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a882:	e853 3f00 	ldrex	r3, [r3]
 800a886:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a888:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a88a:	f023 0301 	bic.w	r3, r3, #1
 800a88e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	3308      	adds	r3, #8
 800a898:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a89c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a8a0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8a2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a8a4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a8a8:	e841 2300 	strex	r3, r2, [r1]
 800a8ac:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a8ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d1e1      	bne.n	800a878 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	3308      	adds	r3, #8
 800a8ba:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a8be:	e853 3f00 	ldrex	r3, [r3]
 800a8c2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a8c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a8c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a8ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	3308      	adds	r3, #8
 800a8d4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a8d8:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a8da:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8dc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a8de:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a8e0:	e841 2300 	strex	r3, r2, [r1]
 800a8e4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a8e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d1e3      	bne.n	800a8b4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2220      	movs	r2, #32
 800a8f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a900:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a902:	e853 3f00 	ldrex	r3, [r3]
 800a906:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a908:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a90a:	f023 0310 	bic.w	r3, r3, #16
 800a90e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	461a      	mov	r2, r3
 800a918:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a91c:	65bb      	str	r3, [r7, #88]	; 0x58
 800a91e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a920:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a922:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a924:	e841 2300 	strex	r3, r2, [r1]
 800a928:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a92a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d1e4      	bne.n	800a8fa <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a934:	4618      	mov	r0, r3
 800a936:	f7fa f8aa 	bl	8004a8e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2202      	movs	r2, #2
 800a93e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a94c:	b29b      	uxth	r3, r3
 800a94e:	1ad3      	subs	r3, r2, r3
 800a950:	b29b      	uxth	r3, r3
 800a952:	4619      	mov	r1, r3
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f000 f8cd 	bl	800aaf4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a95a:	e0b9      	b.n	800aad0 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a968:	b29b      	uxth	r3, r3
 800a96a:	1ad3      	subs	r3, r2, r3
 800a96c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a976:	b29b      	uxth	r3, r3
 800a978:	2b00      	cmp	r3, #0
 800a97a:	f000 80ab 	beq.w	800aad4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800a97e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a982:	2b00      	cmp	r3, #0
 800a984:	f000 80a6 	beq.w	800aad4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a990:	e853 3f00 	ldrex	r3, [r3]
 800a994:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a998:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a99c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	461a      	mov	r2, r3
 800a9a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a9aa:	647b      	str	r3, [r7, #68]	; 0x44
 800a9ac:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a9b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a9b2:	e841 2300 	strex	r3, r2, [r1]
 800a9b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a9b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d1e4      	bne.n	800a988 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	3308      	adds	r3, #8
 800a9c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c8:	e853 3f00 	ldrex	r3, [r3]
 800a9cc:	623b      	str	r3, [r7, #32]
   return(result);
 800a9ce:	6a3b      	ldr	r3, [r7, #32]
 800a9d0:	f023 0301 	bic.w	r3, r3, #1
 800a9d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	3308      	adds	r3, #8
 800a9de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a9e2:	633a      	str	r2, [r7, #48]	; 0x30
 800a9e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a9e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9ea:	e841 2300 	strex	r3, r2, [r1]
 800a9ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d1e3      	bne.n	800a9be <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2220      	movs	r2, #32
 800a9fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2200      	movs	r2, #0
 800aa02:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2200      	movs	r2, #0
 800aa08:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	e853 3f00 	ldrex	r3, [r3]
 800aa16:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	f023 0310 	bic.w	r3, r3, #16
 800aa1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	461a      	mov	r2, r3
 800aa28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800aa2c:	61fb      	str	r3, [r7, #28]
 800aa2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa30:	69b9      	ldr	r1, [r7, #24]
 800aa32:	69fa      	ldr	r2, [r7, #28]
 800aa34:	e841 2300 	strex	r3, r2, [r1]
 800aa38:	617b      	str	r3, [r7, #20]
   return(result);
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d1e4      	bne.n	800aa0a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2202      	movs	r2, #2
 800aa44:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800aa46:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800aa4a:	4619      	mov	r1, r3
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f000 f851 	bl	800aaf4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800aa52:	e03f      	b.n	800aad4 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800aa54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d00e      	beq.n	800aa7e <HAL_UART_IRQHandler+0x56a>
 800aa60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aa64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d008      	beq.n	800aa7e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800aa74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f000 fc71 	bl	800b35e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aa7c:	e02d      	b.n	800aada <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800aa7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d00e      	beq.n	800aaa8 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800aa8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d008      	beq.n	800aaa8 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d01c      	beq.n	800aad8 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	4798      	blx	r3
    }
    return;
 800aaa6:	e017      	b.n	800aad8 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800aaa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aaac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d012      	beq.n	800aada <HAL_UART_IRQHandler+0x5c6>
 800aab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d00c      	beq.n	800aada <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f000 fc22 	bl	800b30a <UART_EndTransmit_IT>
    return;
 800aac6:	e008      	b.n	800aada <HAL_UART_IRQHandler+0x5c6>
      return;
 800aac8:	bf00      	nop
 800aaca:	e006      	b.n	800aada <HAL_UART_IRQHandler+0x5c6>
    return;
 800aacc:	bf00      	nop
 800aace:	e004      	b.n	800aada <HAL_UART_IRQHandler+0x5c6>
      return;
 800aad0:	bf00      	nop
 800aad2:	e002      	b.n	800aada <HAL_UART_IRQHandler+0x5c6>
      return;
 800aad4:	bf00      	nop
 800aad6:	e000      	b.n	800aada <HAL_UART_IRQHandler+0x5c6>
    return;
 800aad8:	bf00      	nop
  }

}
 800aada:	37e8      	adds	r7, #232	; 0xe8
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}

0800aae0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aae0:	b480      	push	{r7}
 800aae2:	b083      	sub	sp, #12
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800aae8:	bf00      	nop
 800aaea:	370c      	adds	r7, #12
 800aaec:	46bd      	mov	sp, r7
 800aaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf2:	4770      	bx	lr

0800aaf4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b083      	sub	sp, #12
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
 800aafc:	460b      	mov	r3, r1
 800aafe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ab00:	bf00      	nop
 800ab02:	370c      	adds	r7, #12
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr

0800ab0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b088      	sub	sp, #32
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ab14:	2300      	movs	r3, #0
 800ab16:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	689a      	ldr	r2, [r3, #8]
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	691b      	ldr	r3, [r3, #16]
 800ab20:	431a      	orrs	r2, r3
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	695b      	ldr	r3, [r3, #20]
 800ab26:	431a      	orrs	r2, r3
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	69db      	ldr	r3, [r3, #28]
 800ab2c:	4313      	orrs	r3, r2
 800ab2e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800ab3a:	f023 030c 	bic.w	r3, r3, #12
 800ab3e:	687a      	ldr	r2, [r7, #4]
 800ab40:	6812      	ldr	r2, [r2, #0]
 800ab42:	6979      	ldr	r1, [r7, #20]
 800ab44:	430b      	orrs	r3, r1
 800ab46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	685b      	ldr	r3, [r3, #4]
 800ab4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	68da      	ldr	r2, [r3, #12]
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	430a      	orrs	r2, r1
 800ab5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	699b      	ldr	r3, [r3, #24]
 800ab62:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6a1b      	ldr	r3, [r3, #32]
 800ab68:	697a      	ldr	r2, [r7, #20]
 800ab6a:	4313      	orrs	r3, r2
 800ab6c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	689b      	ldr	r3, [r3, #8]
 800ab74:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	697a      	ldr	r2, [r7, #20]
 800ab7e:	430a      	orrs	r2, r1
 800ab80:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	4aa7      	ldr	r2, [pc, #668]	; (800ae24 <UART_SetConfig+0x318>)
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d120      	bne.n	800abce <UART_SetConfig+0xc2>
 800ab8c:	4ba6      	ldr	r3, [pc, #664]	; (800ae28 <UART_SetConfig+0x31c>)
 800ab8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab90:	f003 0303 	and.w	r3, r3, #3
 800ab94:	2b03      	cmp	r3, #3
 800ab96:	d817      	bhi.n	800abc8 <UART_SetConfig+0xbc>
 800ab98:	a201      	add	r2, pc, #4	; (adr r2, 800aba0 <UART_SetConfig+0x94>)
 800ab9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab9e:	bf00      	nop
 800aba0:	0800abb1 	.word	0x0800abb1
 800aba4:	0800abbd 	.word	0x0800abbd
 800aba8:	0800abc3 	.word	0x0800abc3
 800abac:	0800abb7 	.word	0x0800abb7
 800abb0:	2301      	movs	r3, #1
 800abb2:	77fb      	strb	r3, [r7, #31]
 800abb4:	e0b5      	b.n	800ad22 <UART_SetConfig+0x216>
 800abb6:	2302      	movs	r3, #2
 800abb8:	77fb      	strb	r3, [r7, #31]
 800abba:	e0b2      	b.n	800ad22 <UART_SetConfig+0x216>
 800abbc:	2304      	movs	r3, #4
 800abbe:	77fb      	strb	r3, [r7, #31]
 800abc0:	e0af      	b.n	800ad22 <UART_SetConfig+0x216>
 800abc2:	2308      	movs	r3, #8
 800abc4:	77fb      	strb	r3, [r7, #31]
 800abc6:	e0ac      	b.n	800ad22 <UART_SetConfig+0x216>
 800abc8:	2310      	movs	r3, #16
 800abca:	77fb      	strb	r3, [r7, #31]
 800abcc:	e0a9      	b.n	800ad22 <UART_SetConfig+0x216>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	4a96      	ldr	r2, [pc, #600]	; (800ae2c <UART_SetConfig+0x320>)
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d124      	bne.n	800ac22 <UART_SetConfig+0x116>
 800abd8:	4b93      	ldr	r3, [pc, #588]	; (800ae28 <UART_SetConfig+0x31c>)
 800abda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abdc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800abe0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800abe4:	d011      	beq.n	800ac0a <UART_SetConfig+0xfe>
 800abe6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800abea:	d817      	bhi.n	800ac1c <UART_SetConfig+0x110>
 800abec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800abf0:	d011      	beq.n	800ac16 <UART_SetConfig+0x10a>
 800abf2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800abf6:	d811      	bhi.n	800ac1c <UART_SetConfig+0x110>
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d003      	beq.n	800ac04 <UART_SetConfig+0xf8>
 800abfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac00:	d006      	beq.n	800ac10 <UART_SetConfig+0x104>
 800ac02:	e00b      	b.n	800ac1c <UART_SetConfig+0x110>
 800ac04:	2300      	movs	r3, #0
 800ac06:	77fb      	strb	r3, [r7, #31]
 800ac08:	e08b      	b.n	800ad22 <UART_SetConfig+0x216>
 800ac0a:	2302      	movs	r3, #2
 800ac0c:	77fb      	strb	r3, [r7, #31]
 800ac0e:	e088      	b.n	800ad22 <UART_SetConfig+0x216>
 800ac10:	2304      	movs	r3, #4
 800ac12:	77fb      	strb	r3, [r7, #31]
 800ac14:	e085      	b.n	800ad22 <UART_SetConfig+0x216>
 800ac16:	2308      	movs	r3, #8
 800ac18:	77fb      	strb	r3, [r7, #31]
 800ac1a:	e082      	b.n	800ad22 <UART_SetConfig+0x216>
 800ac1c:	2310      	movs	r3, #16
 800ac1e:	77fb      	strb	r3, [r7, #31]
 800ac20:	e07f      	b.n	800ad22 <UART_SetConfig+0x216>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	4a82      	ldr	r2, [pc, #520]	; (800ae30 <UART_SetConfig+0x324>)
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d124      	bne.n	800ac76 <UART_SetConfig+0x16a>
 800ac2c:	4b7e      	ldr	r3, [pc, #504]	; (800ae28 <UART_SetConfig+0x31c>)
 800ac2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac30:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800ac34:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800ac38:	d011      	beq.n	800ac5e <UART_SetConfig+0x152>
 800ac3a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800ac3e:	d817      	bhi.n	800ac70 <UART_SetConfig+0x164>
 800ac40:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ac44:	d011      	beq.n	800ac6a <UART_SetConfig+0x15e>
 800ac46:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ac4a:	d811      	bhi.n	800ac70 <UART_SetConfig+0x164>
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d003      	beq.n	800ac58 <UART_SetConfig+0x14c>
 800ac50:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ac54:	d006      	beq.n	800ac64 <UART_SetConfig+0x158>
 800ac56:	e00b      	b.n	800ac70 <UART_SetConfig+0x164>
 800ac58:	2300      	movs	r3, #0
 800ac5a:	77fb      	strb	r3, [r7, #31]
 800ac5c:	e061      	b.n	800ad22 <UART_SetConfig+0x216>
 800ac5e:	2302      	movs	r3, #2
 800ac60:	77fb      	strb	r3, [r7, #31]
 800ac62:	e05e      	b.n	800ad22 <UART_SetConfig+0x216>
 800ac64:	2304      	movs	r3, #4
 800ac66:	77fb      	strb	r3, [r7, #31]
 800ac68:	e05b      	b.n	800ad22 <UART_SetConfig+0x216>
 800ac6a:	2308      	movs	r3, #8
 800ac6c:	77fb      	strb	r3, [r7, #31]
 800ac6e:	e058      	b.n	800ad22 <UART_SetConfig+0x216>
 800ac70:	2310      	movs	r3, #16
 800ac72:	77fb      	strb	r3, [r7, #31]
 800ac74:	e055      	b.n	800ad22 <UART_SetConfig+0x216>
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	4a6e      	ldr	r2, [pc, #440]	; (800ae34 <UART_SetConfig+0x328>)
 800ac7c:	4293      	cmp	r3, r2
 800ac7e:	d124      	bne.n	800acca <UART_SetConfig+0x1be>
 800ac80:	4b69      	ldr	r3, [pc, #420]	; (800ae28 <UART_SetConfig+0x31c>)
 800ac82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac84:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800ac88:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ac8c:	d011      	beq.n	800acb2 <UART_SetConfig+0x1a6>
 800ac8e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ac92:	d817      	bhi.n	800acc4 <UART_SetConfig+0x1b8>
 800ac94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ac98:	d011      	beq.n	800acbe <UART_SetConfig+0x1b2>
 800ac9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ac9e:	d811      	bhi.n	800acc4 <UART_SetConfig+0x1b8>
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d003      	beq.n	800acac <UART_SetConfig+0x1a0>
 800aca4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aca8:	d006      	beq.n	800acb8 <UART_SetConfig+0x1ac>
 800acaa:	e00b      	b.n	800acc4 <UART_SetConfig+0x1b8>
 800acac:	2300      	movs	r3, #0
 800acae:	77fb      	strb	r3, [r7, #31]
 800acb0:	e037      	b.n	800ad22 <UART_SetConfig+0x216>
 800acb2:	2302      	movs	r3, #2
 800acb4:	77fb      	strb	r3, [r7, #31]
 800acb6:	e034      	b.n	800ad22 <UART_SetConfig+0x216>
 800acb8:	2304      	movs	r3, #4
 800acba:	77fb      	strb	r3, [r7, #31]
 800acbc:	e031      	b.n	800ad22 <UART_SetConfig+0x216>
 800acbe:	2308      	movs	r3, #8
 800acc0:	77fb      	strb	r3, [r7, #31]
 800acc2:	e02e      	b.n	800ad22 <UART_SetConfig+0x216>
 800acc4:	2310      	movs	r3, #16
 800acc6:	77fb      	strb	r3, [r7, #31]
 800acc8:	e02b      	b.n	800ad22 <UART_SetConfig+0x216>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	4a5a      	ldr	r2, [pc, #360]	; (800ae38 <UART_SetConfig+0x32c>)
 800acd0:	4293      	cmp	r3, r2
 800acd2:	d124      	bne.n	800ad1e <UART_SetConfig+0x212>
 800acd4:	4b54      	ldr	r3, [pc, #336]	; (800ae28 <UART_SetConfig+0x31c>)
 800acd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acd8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800acdc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800ace0:	d011      	beq.n	800ad06 <UART_SetConfig+0x1fa>
 800ace2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800ace6:	d817      	bhi.n	800ad18 <UART_SetConfig+0x20c>
 800ace8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800acec:	d011      	beq.n	800ad12 <UART_SetConfig+0x206>
 800acee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800acf2:	d811      	bhi.n	800ad18 <UART_SetConfig+0x20c>
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d003      	beq.n	800ad00 <UART_SetConfig+0x1f4>
 800acf8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800acfc:	d006      	beq.n	800ad0c <UART_SetConfig+0x200>
 800acfe:	e00b      	b.n	800ad18 <UART_SetConfig+0x20c>
 800ad00:	2300      	movs	r3, #0
 800ad02:	77fb      	strb	r3, [r7, #31]
 800ad04:	e00d      	b.n	800ad22 <UART_SetConfig+0x216>
 800ad06:	2302      	movs	r3, #2
 800ad08:	77fb      	strb	r3, [r7, #31]
 800ad0a:	e00a      	b.n	800ad22 <UART_SetConfig+0x216>
 800ad0c:	2304      	movs	r3, #4
 800ad0e:	77fb      	strb	r3, [r7, #31]
 800ad10:	e007      	b.n	800ad22 <UART_SetConfig+0x216>
 800ad12:	2308      	movs	r3, #8
 800ad14:	77fb      	strb	r3, [r7, #31]
 800ad16:	e004      	b.n	800ad22 <UART_SetConfig+0x216>
 800ad18:	2310      	movs	r3, #16
 800ad1a:	77fb      	strb	r3, [r7, #31]
 800ad1c:	e001      	b.n	800ad22 <UART_SetConfig+0x216>
 800ad1e:	2310      	movs	r3, #16
 800ad20:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	69db      	ldr	r3, [r3, #28]
 800ad26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad2a:	d15b      	bne.n	800ade4 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 800ad2c:	7ffb      	ldrb	r3, [r7, #31]
 800ad2e:	2b08      	cmp	r3, #8
 800ad30:	d827      	bhi.n	800ad82 <UART_SetConfig+0x276>
 800ad32:	a201      	add	r2, pc, #4	; (adr r2, 800ad38 <UART_SetConfig+0x22c>)
 800ad34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad38:	0800ad5d 	.word	0x0800ad5d
 800ad3c:	0800ad65 	.word	0x0800ad65
 800ad40:	0800ad6d 	.word	0x0800ad6d
 800ad44:	0800ad83 	.word	0x0800ad83
 800ad48:	0800ad73 	.word	0x0800ad73
 800ad4c:	0800ad83 	.word	0x0800ad83
 800ad50:	0800ad83 	.word	0x0800ad83
 800ad54:	0800ad83 	.word	0x0800ad83
 800ad58:	0800ad7b 	.word	0x0800ad7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad5c:	f7fc fefc 	bl	8007b58 <HAL_RCC_GetPCLK1Freq>
 800ad60:	61b8      	str	r0, [r7, #24]
        break;
 800ad62:	e013      	b.n	800ad8c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ad64:	f7fc ff1a 	bl	8007b9c <HAL_RCC_GetPCLK2Freq>
 800ad68:	61b8      	str	r0, [r7, #24]
        break;
 800ad6a:	e00f      	b.n	800ad8c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ad6c:	4b33      	ldr	r3, [pc, #204]	; (800ae3c <UART_SetConfig+0x330>)
 800ad6e:	61bb      	str	r3, [r7, #24]
        break;
 800ad70:	e00c      	b.n	800ad8c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ad72:	f7fc fe7b 	bl	8007a6c <HAL_RCC_GetSysClockFreq>
 800ad76:	61b8      	str	r0, [r7, #24]
        break;
 800ad78:	e008      	b.n	800ad8c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad7e:	61bb      	str	r3, [r7, #24]
        break;
 800ad80:	e004      	b.n	800ad8c <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800ad82:	2300      	movs	r3, #0
 800ad84:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ad86:	2301      	movs	r3, #1
 800ad88:	77bb      	strb	r3, [r7, #30]
        break;
 800ad8a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ad8c:	69bb      	ldr	r3, [r7, #24]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	f000 8082 	beq.w	800ae98 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ad94:	69bb      	ldr	r3, [r7, #24]
 800ad96:	005a      	lsls	r2, r3, #1
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	685b      	ldr	r3, [r3, #4]
 800ad9c:	085b      	lsrs	r3, r3, #1
 800ad9e:	441a      	add	r2, r3
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	685b      	ldr	r3, [r3, #4]
 800ada4:	fbb2 f3f3 	udiv	r3, r2, r3
 800ada8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	2b0f      	cmp	r3, #15
 800adae:	d916      	bls.n	800adde <UART_SetConfig+0x2d2>
 800adb0:	693b      	ldr	r3, [r7, #16]
 800adb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800adb6:	d212      	bcs.n	800adde <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	b29b      	uxth	r3, r3
 800adbc:	f023 030f 	bic.w	r3, r3, #15
 800adc0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800adc2:	693b      	ldr	r3, [r7, #16]
 800adc4:	085b      	lsrs	r3, r3, #1
 800adc6:	b29b      	uxth	r3, r3
 800adc8:	f003 0307 	and.w	r3, r3, #7
 800adcc:	b29a      	uxth	r2, r3
 800adce:	89fb      	ldrh	r3, [r7, #14]
 800add0:	4313      	orrs	r3, r2
 800add2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	89fa      	ldrh	r2, [r7, #14]
 800adda:	60da      	str	r2, [r3, #12]
 800addc:	e05c      	b.n	800ae98 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800adde:	2301      	movs	r3, #1
 800ade0:	77bb      	strb	r3, [r7, #30]
 800ade2:	e059      	b.n	800ae98 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ade4:	7ffb      	ldrb	r3, [r7, #31]
 800ade6:	2b08      	cmp	r3, #8
 800ade8:	d835      	bhi.n	800ae56 <UART_SetConfig+0x34a>
 800adea:	a201      	add	r2, pc, #4	; (adr r2, 800adf0 <UART_SetConfig+0x2e4>)
 800adec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adf0:	0800ae15 	.word	0x0800ae15
 800adf4:	0800ae1d 	.word	0x0800ae1d
 800adf8:	0800ae41 	.word	0x0800ae41
 800adfc:	0800ae57 	.word	0x0800ae57
 800ae00:	0800ae47 	.word	0x0800ae47
 800ae04:	0800ae57 	.word	0x0800ae57
 800ae08:	0800ae57 	.word	0x0800ae57
 800ae0c:	0800ae57 	.word	0x0800ae57
 800ae10:	0800ae4f 	.word	0x0800ae4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae14:	f7fc fea0 	bl	8007b58 <HAL_RCC_GetPCLK1Freq>
 800ae18:	61b8      	str	r0, [r7, #24]
        break;
 800ae1a:	e021      	b.n	800ae60 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae1c:	f7fc febe 	bl	8007b9c <HAL_RCC_GetPCLK2Freq>
 800ae20:	61b8      	str	r0, [r7, #24]
        break;
 800ae22:	e01d      	b.n	800ae60 <UART_SetConfig+0x354>
 800ae24:	40013800 	.word	0x40013800
 800ae28:	40021000 	.word	0x40021000
 800ae2c:	40004400 	.word	0x40004400
 800ae30:	40004800 	.word	0x40004800
 800ae34:	40004c00 	.word	0x40004c00
 800ae38:	40005000 	.word	0x40005000
 800ae3c:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ae40:	4b1b      	ldr	r3, [pc, #108]	; (800aeb0 <UART_SetConfig+0x3a4>)
 800ae42:	61bb      	str	r3, [r7, #24]
        break;
 800ae44:	e00c      	b.n	800ae60 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ae46:	f7fc fe11 	bl	8007a6c <HAL_RCC_GetSysClockFreq>
 800ae4a:	61b8      	str	r0, [r7, #24]
        break;
 800ae4c:	e008      	b.n	800ae60 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae52:	61bb      	str	r3, [r7, #24]
        break;
 800ae54:	e004      	b.n	800ae60 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800ae56:	2300      	movs	r3, #0
 800ae58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	77bb      	strb	r3, [r7, #30]
        break;
 800ae5e:	bf00      	nop
    }

    if (pclk != 0U)
 800ae60:	69bb      	ldr	r3, [r7, #24]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d018      	beq.n	800ae98 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	685b      	ldr	r3, [r3, #4]
 800ae6a:	085a      	lsrs	r2, r3, #1
 800ae6c:	69bb      	ldr	r3, [r7, #24]
 800ae6e:	441a      	add	r2, r3
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	685b      	ldr	r3, [r3, #4]
 800ae74:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae78:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	2b0f      	cmp	r3, #15
 800ae7e:	d909      	bls.n	800ae94 <UART_SetConfig+0x388>
 800ae80:	693b      	ldr	r3, [r7, #16]
 800ae82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae86:	d205      	bcs.n	800ae94 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	b29a      	uxth	r2, r3
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	60da      	str	r2, [r3, #12]
 800ae92:	e001      	b.n	800ae98 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800ae94:	2301      	movs	r3, #1
 800ae96:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2200      	movs	r2, #0
 800aea2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800aea4:	7fbb      	ldrb	r3, [r7, #30]
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3720      	adds	r7, #32
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}
 800aeae:	bf00      	nop
 800aeb0:	007a1200 	.word	0x007a1200

0800aeb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b083      	sub	sp, #12
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aec0:	f003 0301 	and.w	r3, r3, #1
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d00a      	beq.n	800aede <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	685b      	ldr	r3, [r3, #4]
 800aece:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	430a      	orrs	r2, r1
 800aedc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aee2:	f003 0302 	and.w	r3, r3, #2
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d00a      	beq.n	800af00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	685b      	ldr	r3, [r3, #4]
 800aef0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	430a      	orrs	r2, r1
 800aefe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af04:	f003 0304 	and.w	r3, r3, #4
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d00a      	beq.n	800af22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	685b      	ldr	r3, [r3, #4]
 800af12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	430a      	orrs	r2, r1
 800af20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af26:	f003 0308 	and.w	r3, r3, #8
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d00a      	beq.n	800af44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	685b      	ldr	r3, [r3, #4]
 800af34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	430a      	orrs	r2, r1
 800af42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af48:	f003 0310 	and.w	r3, r3, #16
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d00a      	beq.n	800af66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	689b      	ldr	r3, [r3, #8]
 800af56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	430a      	orrs	r2, r1
 800af64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af6a:	f003 0320 	and.w	r3, r3, #32
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d00a      	beq.n	800af88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	689b      	ldr	r3, [r3, #8]
 800af78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	430a      	orrs	r2, r1
 800af86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af90:	2b00      	cmp	r3, #0
 800af92:	d01a      	beq.n	800afca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	685b      	ldr	r3, [r3, #4]
 800af9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	430a      	orrs	r2, r1
 800afa8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800afb2:	d10a      	bne.n	800afca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	685b      	ldr	r3, [r3, #4]
 800afba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	430a      	orrs	r2, r1
 800afc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d00a      	beq.n	800afec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	685b      	ldr	r3, [r3, #4]
 800afdc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	430a      	orrs	r2, r1
 800afea:	605a      	str	r2, [r3, #4]
  }
}
 800afec:	bf00      	nop
 800afee:	370c      	adds	r7, #12
 800aff0:	46bd      	mov	sp, r7
 800aff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff6:	4770      	bx	lr

0800aff8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b098      	sub	sp, #96	; 0x60
 800affc:	af02      	add	r7, sp, #8
 800affe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2200      	movs	r2, #0
 800b004:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b008:	f7f7 fc3e 	bl	8002888 <HAL_GetTick>
 800b00c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f003 0308 	and.w	r3, r3, #8
 800b018:	2b08      	cmp	r3, #8
 800b01a:	d12e      	bne.n	800b07a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b01c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b020:	9300      	str	r3, [sp, #0]
 800b022:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b024:	2200      	movs	r2, #0
 800b026:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f000 f88c 	bl	800b148 <UART_WaitOnFlagUntilTimeout>
 800b030:	4603      	mov	r3, r0
 800b032:	2b00      	cmp	r3, #0
 800b034:	d021      	beq.n	800b07a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b03e:	e853 3f00 	ldrex	r3, [r3]
 800b042:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b046:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b04a:	653b      	str	r3, [r7, #80]	; 0x50
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	461a      	mov	r2, r3
 800b052:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b054:	647b      	str	r3, [r7, #68]	; 0x44
 800b056:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b058:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b05a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b05c:	e841 2300 	strex	r3, r2, [r1]
 800b060:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b064:	2b00      	cmp	r3, #0
 800b066:	d1e6      	bne.n	800b036 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2220      	movs	r2, #32
 800b06c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2200      	movs	r2, #0
 800b072:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b076:	2303      	movs	r3, #3
 800b078:	e062      	b.n	800b140 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f003 0304 	and.w	r3, r3, #4
 800b084:	2b04      	cmp	r3, #4
 800b086:	d149      	bne.n	800b11c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b088:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b08c:	9300      	str	r3, [sp, #0]
 800b08e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b090:	2200      	movs	r2, #0
 800b092:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f000 f856 	bl	800b148 <UART_WaitOnFlagUntilTimeout>
 800b09c:	4603      	mov	r3, r0
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d03c      	beq.n	800b11c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0aa:	e853 3f00 	ldrex	r3, [r3]
 800b0ae:	623b      	str	r3, [r7, #32]
   return(result);
 800b0b0:	6a3b      	ldr	r3, [r7, #32]
 800b0b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b0b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	461a      	mov	r2, r3
 800b0be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0c0:	633b      	str	r3, [r7, #48]	; 0x30
 800b0c2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b0c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0c8:	e841 2300 	strex	r3, r2, [r1]
 800b0cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d1e6      	bne.n	800b0a2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	3308      	adds	r3, #8
 800b0da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	e853 3f00 	ldrex	r3, [r3]
 800b0e2:	60fb      	str	r3, [r7, #12]
   return(result);
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	f023 0301 	bic.w	r3, r3, #1
 800b0ea:	64bb      	str	r3, [r7, #72]	; 0x48
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	3308      	adds	r3, #8
 800b0f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b0f4:	61fa      	str	r2, [r7, #28]
 800b0f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0f8:	69b9      	ldr	r1, [r7, #24]
 800b0fa:	69fa      	ldr	r2, [r7, #28]
 800b0fc:	e841 2300 	strex	r3, r2, [r1]
 800b100:	617b      	str	r3, [r7, #20]
   return(result);
 800b102:	697b      	ldr	r3, [r7, #20]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d1e5      	bne.n	800b0d4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2220      	movs	r2, #32
 800b10c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2200      	movs	r2, #0
 800b114:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b118:	2303      	movs	r3, #3
 800b11a:	e011      	b.n	800b140 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2220      	movs	r2, #32
 800b120:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2220      	movs	r2, #32
 800b126:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2200      	movs	r2, #0
 800b12e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2200      	movs	r2, #0
 800b134:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2200      	movs	r2, #0
 800b13a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800b13e:	2300      	movs	r3, #0
}
 800b140:	4618      	mov	r0, r3
 800b142:	3758      	adds	r7, #88	; 0x58
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}

0800b148 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b084      	sub	sp, #16
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	60f8      	str	r0, [r7, #12]
 800b150:	60b9      	str	r1, [r7, #8]
 800b152:	603b      	str	r3, [r7, #0]
 800b154:	4613      	mov	r3, r2
 800b156:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b158:	e049      	b.n	800b1ee <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b15a:	69bb      	ldr	r3, [r7, #24]
 800b15c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b160:	d045      	beq.n	800b1ee <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b162:	f7f7 fb91 	bl	8002888 <HAL_GetTick>
 800b166:	4602      	mov	r2, r0
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	1ad3      	subs	r3, r2, r3
 800b16c:	69ba      	ldr	r2, [r7, #24]
 800b16e:	429a      	cmp	r2, r3
 800b170:	d302      	bcc.n	800b178 <UART_WaitOnFlagUntilTimeout+0x30>
 800b172:	69bb      	ldr	r3, [r7, #24]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d101      	bne.n	800b17c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b178:	2303      	movs	r3, #3
 800b17a:	e048      	b.n	800b20e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	f003 0304 	and.w	r3, r3, #4
 800b186:	2b00      	cmp	r3, #0
 800b188:	d031      	beq.n	800b1ee <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	69db      	ldr	r3, [r3, #28]
 800b190:	f003 0308 	and.w	r3, r3, #8
 800b194:	2b08      	cmp	r3, #8
 800b196:	d110      	bne.n	800b1ba <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	2208      	movs	r2, #8
 800b19e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800b1a0:	68f8      	ldr	r0, [r7, #12]
 800b1a2:	f000 f838 	bl	800b216 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	2208      	movs	r2, #8
 800b1aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	e029      	b.n	800b20e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	69db      	ldr	r3, [r3, #28]
 800b1c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b1c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b1c8:	d111      	bne.n	800b1ee <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b1d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b1d4:	68f8      	ldr	r0, [r7, #12]
 800b1d6:	f000 f81e 	bl	800b216 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	2220      	movs	r2, #32
 800b1de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800b1ea:	2303      	movs	r3, #3
 800b1ec:	e00f      	b.n	800b20e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	69da      	ldr	r2, [r3, #28]
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	4013      	ands	r3, r2
 800b1f8:	68ba      	ldr	r2, [r7, #8]
 800b1fa:	429a      	cmp	r2, r3
 800b1fc:	bf0c      	ite	eq
 800b1fe:	2301      	moveq	r3, #1
 800b200:	2300      	movne	r3, #0
 800b202:	b2db      	uxtb	r3, r3
 800b204:	461a      	mov	r2, r3
 800b206:	79fb      	ldrb	r3, [r7, #7]
 800b208:	429a      	cmp	r2, r3
 800b20a:	d0a6      	beq.n	800b15a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b20c:	2300      	movs	r3, #0
}
 800b20e:	4618      	mov	r0, r3
 800b210:	3710      	adds	r7, #16
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}

0800b216 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b216:	b480      	push	{r7}
 800b218:	b095      	sub	sp, #84	; 0x54
 800b21a:	af00      	add	r7, sp, #0
 800b21c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b226:	e853 3f00 	ldrex	r3, [r3]
 800b22a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b22c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b22e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b232:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	461a      	mov	r2, r3
 800b23a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b23c:	643b      	str	r3, [r7, #64]	; 0x40
 800b23e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b240:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b242:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b244:	e841 2300 	strex	r3, r2, [r1]
 800b248:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b24a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d1e6      	bne.n	800b21e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	3308      	adds	r3, #8
 800b256:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b258:	6a3b      	ldr	r3, [r7, #32]
 800b25a:	e853 3f00 	ldrex	r3, [r3]
 800b25e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b260:	69fb      	ldr	r3, [r7, #28]
 800b262:	f023 0301 	bic.w	r3, r3, #1
 800b266:	64bb      	str	r3, [r7, #72]	; 0x48
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	3308      	adds	r3, #8
 800b26e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b270:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b272:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b274:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b276:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b278:	e841 2300 	strex	r3, r2, [r1]
 800b27c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b280:	2b00      	cmp	r3, #0
 800b282:	d1e5      	bne.n	800b250 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b288:	2b01      	cmp	r3, #1
 800b28a:	d118      	bne.n	800b2be <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	e853 3f00 	ldrex	r3, [r3]
 800b298:	60bb      	str	r3, [r7, #8]
   return(result);
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	f023 0310 	bic.w	r3, r3, #16
 800b2a0:	647b      	str	r3, [r7, #68]	; 0x44
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	461a      	mov	r2, r3
 800b2a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2aa:	61bb      	str	r3, [r7, #24]
 800b2ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2ae:	6979      	ldr	r1, [r7, #20]
 800b2b0:	69ba      	ldr	r2, [r7, #24]
 800b2b2:	e841 2300 	strex	r3, r2, [r1]
 800b2b6:	613b      	str	r3, [r7, #16]
   return(result);
 800b2b8:	693b      	ldr	r3, [r7, #16]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d1e6      	bne.n	800b28c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2220      	movs	r2, #32
 800b2c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	669a      	str	r2, [r3, #104]	; 0x68
}
 800b2d2:	bf00      	nop
 800b2d4:	3754      	adds	r7, #84	; 0x54
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2dc:	4770      	bx	lr

0800b2de <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b2de:	b580      	push	{r7, lr}
 800b2e0:	b084      	sub	sp, #16
 800b2e2:	af00      	add	r7, sp, #0
 800b2e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b2fc:	68f8      	ldr	r0, [r7, #12]
 800b2fe:	f7ff fbef 	bl	800aae0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b302:	bf00      	nop
 800b304:	3710      	adds	r7, #16
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}

0800b30a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b30a:	b580      	push	{r7, lr}
 800b30c:	b088      	sub	sp, #32
 800b30e:	af00      	add	r7, sp, #0
 800b310:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	e853 3f00 	ldrex	r3, [r3]
 800b31e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b326:	61fb      	str	r3, [r7, #28]
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	461a      	mov	r2, r3
 800b32e:	69fb      	ldr	r3, [r7, #28]
 800b330:	61bb      	str	r3, [r7, #24]
 800b332:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b334:	6979      	ldr	r1, [r7, #20]
 800b336:	69ba      	ldr	r2, [r7, #24]
 800b338:	e841 2300 	strex	r3, r2, [r1]
 800b33c:	613b      	str	r3, [r7, #16]
   return(result);
 800b33e:	693b      	ldr	r3, [r7, #16]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d1e6      	bne.n	800b312 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2220      	movs	r2, #32
 800b348:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2200      	movs	r2, #0
 800b34e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f7f6 fd55 	bl	8001e00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b356:	bf00      	nop
 800b358:	3720      	adds	r7, #32
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}

0800b35e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b35e:	b480      	push	{r7}
 800b360:	b083      	sub	sp, #12
 800b362:	af00      	add	r7, sp, #0
 800b364:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b366:	bf00      	nop
 800b368:	370c      	adds	r7, #12
 800b36a:	46bd      	mov	sp, r7
 800b36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b370:	4770      	bx	lr
	...

0800b374 <__errno>:
 800b374:	4b01      	ldr	r3, [pc, #4]	; (800b37c <__errno+0x8>)
 800b376:	6818      	ldr	r0, [r3, #0]
 800b378:	4770      	bx	lr
 800b37a:	bf00      	nop
 800b37c:	20000018 	.word	0x20000018

0800b380 <__libc_init_array>:
 800b380:	b570      	push	{r4, r5, r6, lr}
 800b382:	4d0d      	ldr	r5, [pc, #52]	; (800b3b8 <__libc_init_array+0x38>)
 800b384:	4c0d      	ldr	r4, [pc, #52]	; (800b3bc <__libc_init_array+0x3c>)
 800b386:	1b64      	subs	r4, r4, r5
 800b388:	10a4      	asrs	r4, r4, #2
 800b38a:	2600      	movs	r6, #0
 800b38c:	42a6      	cmp	r6, r4
 800b38e:	d109      	bne.n	800b3a4 <__libc_init_array+0x24>
 800b390:	4d0b      	ldr	r5, [pc, #44]	; (800b3c0 <__libc_init_array+0x40>)
 800b392:	4c0c      	ldr	r4, [pc, #48]	; (800b3c4 <__libc_init_array+0x44>)
 800b394:	f000 fc8e 	bl	800bcb4 <_init>
 800b398:	1b64      	subs	r4, r4, r5
 800b39a:	10a4      	asrs	r4, r4, #2
 800b39c:	2600      	movs	r6, #0
 800b39e:	42a6      	cmp	r6, r4
 800b3a0:	d105      	bne.n	800b3ae <__libc_init_array+0x2e>
 800b3a2:	bd70      	pop	{r4, r5, r6, pc}
 800b3a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3a8:	4798      	blx	r3
 800b3aa:	3601      	adds	r6, #1
 800b3ac:	e7ee      	b.n	800b38c <__libc_init_array+0xc>
 800b3ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3b2:	4798      	blx	r3
 800b3b4:	3601      	adds	r6, #1
 800b3b6:	e7f2      	b.n	800b39e <__libc_init_array+0x1e>
 800b3b8:	0800bdcc 	.word	0x0800bdcc
 800b3bc:	0800bdcc 	.word	0x0800bdcc
 800b3c0:	0800bdcc 	.word	0x0800bdcc
 800b3c4:	0800bdd0 	.word	0x0800bdd0

0800b3c8 <memset>:
 800b3c8:	4402      	add	r2, r0
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	d100      	bne.n	800b3d2 <memset+0xa>
 800b3d0:	4770      	bx	lr
 800b3d2:	f803 1b01 	strb.w	r1, [r3], #1
 800b3d6:	e7f9      	b.n	800b3cc <memset+0x4>

0800b3d8 <siprintf>:
 800b3d8:	b40e      	push	{r1, r2, r3}
 800b3da:	b500      	push	{lr}
 800b3dc:	b09c      	sub	sp, #112	; 0x70
 800b3de:	ab1d      	add	r3, sp, #116	; 0x74
 800b3e0:	9002      	str	r0, [sp, #8]
 800b3e2:	9006      	str	r0, [sp, #24]
 800b3e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b3e8:	4809      	ldr	r0, [pc, #36]	; (800b410 <siprintf+0x38>)
 800b3ea:	9107      	str	r1, [sp, #28]
 800b3ec:	9104      	str	r1, [sp, #16]
 800b3ee:	4909      	ldr	r1, [pc, #36]	; (800b414 <siprintf+0x3c>)
 800b3f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3f4:	9105      	str	r1, [sp, #20]
 800b3f6:	6800      	ldr	r0, [r0, #0]
 800b3f8:	9301      	str	r3, [sp, #4]
 800b3fa:	a902      	add	r1, sp, #8
 800b3fc:	f000 f868 	bl	800b4d0 <_svfiprintf_r>
 800b400:	9b02      	ldr	r3, [sp, #8]
 800b402:	2200      	movs	r2, #0
 800b404:	701a      	strb	r2, [r3, #0]
 800b406:	b01c      	add	sp, #112	; 0x70
 800b408:	f85d eb04 	ldr.w	lr, [sp], #4
 800b40c:	b003      	add	sp, #12
 800b40e:	4770      	bx	lr
 800b410:	20000018 	.word	0x20000018
 800b414:	ffff0208 	.word	0xffff0208

0800b418 <__ssputs_r>:
 800b418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b41c:	688e      	ldr	r6, [r1, #8]
 800b41e:	429e      	cmp	r6, r3
 800b420:	4682      	mov	sl, r0
 800b422:	460c      	mov	r4, r1
 800b424:	4690      	mov	r8, r2
 800b426:	461f      	mov	r7, r3
 800b428:	d838      	bhi.n	800b49c <__ssputs_r+0x84>
 800b42a:	898a      	ldrh	r2, [r1, #12]
 800b42c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b430:	d032      	beq.n	800b498 <__ssputs_r+0x80>
 800b432:	6825      	ldr	r5, [r4, #0]
 800b434:	6909      	ldr	r1, [r1, #16]
 800b436:	eba5 0901 	sub.w	r9, r5, r1
 800b43a:	6965      	ldr	r5, [r4, #20]
 800b43c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b440:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b444:	3301      	adds	r3, #1
 800b446:	444b      	add	r3, r9
 800b448:	106d      	asrs	r5, r5, #1
 800b44a:	429d      	cmp	r5, r3
 800b44c:	bf38      	it	cc
 800b44e:	461d      	movcc	r5, r3
 800b450:	0553      	lsls	r3, r2, #21
 800b452:	d531      	bpl.n	800b4b8 <__ssputs_r+0xa0>
 800b454:	4629      	mov	r1, r5
 800b456:	f000 fb63 	bl	800bb20 <_malloc_r>
 800b45a:	4606      	mov	r6, r0
 800b45c:	b950      	cbnz	r0, 800b474 <__ssputs_r+0x5c>
 800b45e:	230c      	movs	r3, #12
 800b460:	f8ca 3000 	str.w	r3, [sl]
 800b464:	89a3      	ldrh	r3, [r4, #12]
 800b466:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b46a:	81a3      	strh	r3, [r4, #12]
 800b46c:	f04f 30ff 	mov.w	r0, #4294967295
 800b470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b474:	6921      	ldr	r1, [r4, #16]
 800b476:	464a      	mov	r2, r9
 800b478:	f000 fabe 	bl	800b9f8 <memcpy>
 800b47c:	89a3      	ldrh	r3, [r4, #12]
 800b47e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b486:	81a3      	strh	r3, [r4, #12]
 800b488:	6126      	str	r6, [r4, #16]
 800b48a:	6165      	str	r5, [r4, #20]
 800b48c:	444e      	add	r6, r9
 800b48e:	eba5 0509 	sub.w	r5, r5, r9
 800b492:	6026      	str	r6, [r4, #0]
 800b494:	60a5      	str	r5, [r4, #8]
 800b496:	463e      	mov	r6, r7
 800b498:	42be      	cmp	r6, r7
 800b49a:	d900      	bls.n	800b49e <__ssputs_r+0x86>
 800b49c:	463e      	mov	r6, r7
 800b49e:	6820      	ldr	r0, [r4, #0]
 800b4a0:	4632      	mov	r2, r6
 800b4a2:	4641      	mov	r1, r8
 800b4a4:	f000 fab6 	bl	800ba14 <memmove>
 800b4a8:	68a3      	ldr	r3, [r4, #8]
 800b4aa:	1b9b      	subs	r3, r3, r6
 800b4ac:	60a3      	str	r3, [r4, #8]
 800b4ae:	6823      	ldr	r3, [r4, #0]
 800b4b0:	4433      	add	r3, r6
 800b4b2:	6023      	str	r3, [r4, #0]
 800b4b4:	2000      	movs	r0, #0
 800b4b6:	e7db      	b.n	800b470 <__ssputs_r+0x58>
 800b4b8:	462a      	mov	r2, r5
 800b4ba:	f000 fba5 	bl	800bc08 <_realloc_r>
 800b4be:	4606      	mov	r6, r0
 800b4c0:	2800      	cmp	r0, #0
 800b4c2:	d1e1      	bne.n	800b488 <__ssputs_r+0x70>
 800b4c4:	6921      	ldr	r1, [r4, #16]
 800b4c6:	4650      	mov	r0, sl
 800b4c8:	f000 fabe 	bl	800ba48 <_free_r>
 800b4cc:	e7c7      	b.n	800b45e <__ssputs_r+0x46>
	...

0800b4d0 <_svfiprintf_r>:
 800b4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4d4:	4698      	mov	r8, r3
 800b4d6:	898b      	ldrh	r3, [r1, #12]
 800b4d8:	061b      	lsls	r3, r3, #24
 800b4da:	b09d      	sub	sp, #116	; 0x74
 800b4dc:	4607      	mov	r7, r0
 800b4de:	460d      	mov	r5, r1
 800b4e0:	4614      	mov	r4, r2
 800b4e2:	d50e      	bpl.n	800b502 <_svfiprintf_r+0x32>
 800b4e4:	690b      	ldr	r3, [r1, #16]
 800b4e6:	b963      	cbnz	r3, 800b502 <_svfiprintf_r+0x32>
 800b4e8:	2140      	movs	r1, #64	; 0x40
 800b4ea:	f000 fb19 	bl	800bb20 <_malloc_r>
 800b4ee:	6028      	str	r0, [r5, #0]
 800b4f0:	6128      	str	r0, [r5, #16]
 800b4f2:	b920      	cbnz	r0, 800b4fe <_svfiprintf_r+0x2e>
 800b4f4:	230c      	movs	r3, #12
 800b4f6:	603b      	str	r3, [r7, #0]
 800b4f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b4fc:	e0d1      	b.n	800b6a2 <_svfiprintf_r+0x1d2>
 800b4fe:	2340      	movs	r3, #64	; 0x40
 800b500:	616b      	str	r3, [r5, #20]
 800b502:	2300      	movs	r3, #0
 800b504:	9309      	str	r3, [sp, #36]	; 0x24
 800b506:	2320      	movs	r3, #32
 800b508:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b50c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b510:	2330      	movs	r3, #48	; 0x30
 800b512:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b6bc <_svfiprintf_r+0x1ec>
 800b516:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b51a:	f04f 0901 	mov.w	r9, #1
 800b51e:	4623      	mov	r3, r4
 800b520:	469a      	mov	sl, r3
 800b522:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b526:	b10a      	cbz	r2, 800b52c <_svfiprintf_r+0x5c>
 800b528:	2a25      	cmp	r2, #37	; 0x25
 800b52a:	d1f9      	bne.n	800b520 <_svfiprintf_r+0x50>
 800b52c:	ebba 0b04 	subs.w	fp, sl, r4
 800b530:	d00b      	beq.n	800b54a <_svfiprintf_r+0x7a>
 800b532:	465b      	mov	r3, fp
 800b534:	4622      	mov	r2, r4
 800b536:	4629      	mov	r1, r5
 800b538:	4638      	mov	r0, r7
 800b53a:	f7ff ff6d 	bl	800b418 <__ssputs_r>
 800b53e:	3001      	adds	r0, #1
 800b540:	f000 80aa 	beq.w	800b698 <_svfiprintf_r+0x1c8>
 800b544:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b546:	445a      	add	r2, fp
 800b548:	9209      	str	r2, [sp, #36]	; 0x24
 800b54a:	f89a 3000 	ldrb.w	r3, [sl]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	f000 80a2 	beq.w	800b698 <_svfiprintf_r+0x1c8>
 800b554:	2300      	movs	r3, #0
 800b556:	f04f 32ff 	mov.w	r2, #4294967295
 800b55a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b55e:	f10a 0a01 	add.w	sl, sl, #1
 800b562:	9304      	str	r3, [sp, #16]
 800b564:	9307      	str	r3, [sp, #28]
 800b566:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b56a:	931a      	str	r3, [sp, #104]	; 0x68
 800b56c:	4654      	mov	r4, sl
 800b56e:	2205      	movs	r2, #5
 800b570:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b574:	4851      	ldr	r0, [pc, #324]	; (800b6bc <_svfiprintf_r+0x1ec>)
 800b576:	f7f4 fe2b 	bl	80001d0 <memchr>
 800b57a:	9a04      	ldr	r2, [sp, #16]
 800b57c:	b9d8      	cbnz	r0, 800b5b6 <_svfiprintf_r+0xe6>
 800b57e:	06d0      	lsls	r0, r2, #27
 800b580:	bf44      	itt	mi
 800b582:	2320      	movmi	r3, #32
 800b584:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b588:	0711      	lsls	r1, r2, #28
 800b58a:	bf44      	itt	mi
 800b58c:	232b      	movmi	r3, #43	; 0x2b
 800b58e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b592:	f89a 3000 	ldrb.w	r3, [sl]
 800b596:	2b2a      	cmp	r3, #42	; 0x2a
 800b598:	d015      	beq.n	800b5c6 <_svfiprintf_r+0xf6>
 800b59a:	9a07      	ldr	r2, [sp, #28]
 800b59c:	4654      	mov	r4, sl
 800b59e:	2000      	movs	r0, #0
 800b5a0:	f04f 0c0a 	mov.w	ip, #10
 800b5a4:	4621      	mov	r1, r4
 800b5a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5aa:	3b30      	subs	r3, #48	; 0x30
 800b5ac:	2b09      	cmp	r3, #9
 800b5ae:	d94e      	bls.n	800b64e <_svfiprintf_r+0x17e>
 800b5b0:	b1b0      	cbz	r0, 800b5e0 <_svfiprintf_r+0x110>
 800b5b2:	9207      	str	r2, [sp, #28]
 800b5b4:	e014      	b.n	800b5e0 <_svfiprintf_r+0x110>
 800b5b6:	eba0 0308 	sub.w	r3, r0, r8
 800b5ba:	fa09 f303 	lsl.w	r3, r9, r3
 800b5be:	4313      	orrs	r3, r2
 800b5c0:	9304      	str	r3, [sp, #16]
 800b5c2:	46a2      	mov	sl, r4
 800b5c4:	e7d2      	b.n	800b56c <_svfiprintf_r+0x9c>
 800b5c6:	9b03      	ldr	r3, [sp, #12]
 800b5c8:	1d19      	adds	r1, r3, #4
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	9103      	str	r1, [sp, #12]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	bfbb      	ittet	lt
 800b5d2:	425b      	neglt	r3, r3
 800b5d4:	f042 0202 	orrlt.w	r2, r2, #2
 800b5d8:	9307      	strge	r3, [sp, #28]
 800b5da:	9307      	strlt	r3, [sp, #28]
 800b5dc:	bfb8      	it	lt
 800b5de:	9204      	strlt	r2, [sp, #16]
 800b5e0:	7823      	ldrb	r3, [r4, #0]
 800b5e2:	2b2e      	cmp	r3, #46	; 0x2e
 800b5e4:	d10c      	bne.n	800b600 <_svfiprintf_r+0x130>
 800b5e6:	7863      	ldrb	r3, [r4, #1]
 800b5e8:	2b2a      	cmp	r3, #42	; 0x2a
 800b5ea:	d135      	bne.n	800b658 <_svfiprintf_r+0x188>
 800b5ec:	9b03      	ldr	r3, [sp, #12]
 800b5ee:	1d1a      	adds	r2, r3, #4
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	9203      	str	r2, [sp, #12]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	bfb8      	it	lt
 800b5f8:	f04f 33ff 	movlt.w	r3, #4294967295
 800b5fc:	3402      	adds	r4, #2
 800b5fe:	9305      	str	r3, [sp, #20]
 800b600:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b6cc <_svfiprintf_r+0x1fc>
 800b604:	7821      	ldrb	r1, [r4, #0]
 800b606:	2203      	movs	r2, #3
 800b608:	4650      	mov	r0, sl
 800b60a:	f7f4 fde1 	bl	80001d0 <memchr>
 800b60e:	b140      	cbz	r0, 800b622 <_svfiprintf_r+0x152>
 800b610:	2340      	movs	r3, #64	; 0x40
 800b612:	eba0 000a 	sub.w	r0, r0, sl
 800b616:	fa03 f000 	lsl.w	r0, r3, r0
 800b61a:	9b04      	ldr	r3, [sp, #16]
 800b61c:	4303      	orrs	r3, r0
 800b61e:	3401      	adds	r4, #1
 800b620:	9304      	str	r3, [sp, #16]
 800b622:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b626:	4826      	ldr	r0, [pc, #152]	; (800b6c0 <_svfiprintf_r+0x1f0>)
 800b628:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b62c:	2206      	movs	r2, #6
 800b62e:	f7f4 fdcf 	bl	80001d0 <memchr>
 800b632:	2800      	cmp	r0, #0
 800b634:	d038      	beq.n	800b6a8 <_svfiprintf_r+0x1d8>
 800b636:	4b23      	ldr	r3, [pc, #140]	; (800b6c4 <_svfiprintf_r+0x1f4>)
 800b638:	bb1b      	cbnz	r3, 800b682 <_svfiprintf_r+0x1b2>
 800b63a:	9b03      	ldr	r3, [sp, #12]
 800b63c:	3307      	adds	r3, #7
 800b63e:	f023 0307 	bic.w	r3, r3, #7
 800b642:	3308      	adds	r3, #8
 800b644:	9303      	str	r3, [sp, #12]
 800b646:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b648:	4433      	add	r3, r6
 800b64a:	9309      	str	r3, [sp, #36]	; 0x24
 800b64c:	e767      	b.n	800b51e <_svfiprintf_r+0x4e>
 800b64e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b652:	460c      	mov	r4, r1
 800b654:	2001      	movs	r0, #1
 800b656:	e7a5      	b.n	800b5a4 <_svfiprintf_r+0xd4>
 800b658:	2300      	movs	r3, #0
 800b65a:	3401      	adds	r4, #1
 800b65c:	9305      	str	r3, [sp, #20]
 800b65e:	4619      	mov	r1, r3
 800b660:	f04f 0c0a 	mov.w	ip, #10
 800b664:	4620      	mov	r0, r4
 800b666:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b66a:	3a30      	subs	r2, #48	; 0x30
 800b66c:	2a09      	cmp	r2, #9
 800b66e:	d903      	bls.n	800b678 <_svfiprintf_r+0x1a8>
 800b670:	2b00      	cmp	r3, #0
 800b672:	d0c5      	beq.n	800b600 <_svfiprintf_r+0x130>
 800b674:	9105      	str	r1, [sp, #20]
 800b676:	e7c3      	b.n	800b600 <_svfiprintf_r+0x130>
 800b678:	fb0c 2101 	mla	r1, ip, r1, r2
 800b67c:	4604      	mov	r4, r0
 800b67e:	2301      	movs	r3, #1
 800b680:	e7f0      	b.n	800b664 <_svfiprintf_r+0x194>
 800b682:	ab03      	add	r3, sp, #12
 800b684:	9300      	str	r3, [sp, #0]
 800b686:	462a      	mov	r2, r5
 800b688:	4b0f      	ldr	r3, [pc, #60]	; (800b6c8 <_svfiprintf_r+0x1f8>)
 800b68a:	a904      	add	r1, sp, #16
 800b68c:	4638      	mov	r0, r7
 800b68e:	f3af 8000 	nop.w
 800b692:	1c42      	adds	r2, r0, #1
 800b694:	4606      	mov	r6, r0
 800b696:	d1d6      	bne.n	800b646 <_svfiprintf_r+0x176>
 800b698:	89ab      	ldrh	r3, [r5, #12]
 800b69a:	065b      	lsls	r3, r3, #25
 800b69c:	f53f af2c 	bmi.w	800b4f8 <_svfiprintf_r+0x28>
 800b6a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b6a2:	b01d      	add	sp, #116	; 0x74
 800b6a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6a8:	ab03      	add	r3, sp, #12
 800b6aa:	9300      	str	r3, [sp, #0]
 800b6ac:	462a      	mov	r2, r5
 800b6ae:	4b06      	ldr	r3, [pc, #24]	; (800b6c8 <_svfiprintf_r+0x1f8>)
 800b6b0:	a904      	add	r1, sp, #16
 800b6b2:	4638      	mov	r0, r7
 800b6b4:	f000 f87a 	bl	800b7ac <_printf_i>
 800b6b8:	e7eb      	b.n	800b692 <_svfiprintf_r+0x1c2>
 800b6ba:	bf00      	nop
 800b6bc:	0800bd98 	.word	0x0800bd98
 800b6c0:	0800bda2 	.word	0x0800bda2
 800b6c4:	00000000 	.word	0x00000000
 800b6c8:	0800b419 	.word	0x0800b419
 800b6cc:	0800bd9e 	.word	0x0800bd9e

0800b6d0 <_printf_common>:
 800b6d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6d4:	4616      	mov	r6, r2
 800b6d6:	4699      	mov	r9, r3
 800b6d8:	688a      	ldr	r2, [r1, #8]
 800b6da:	690b      	ldr	r3, [r1, #16]
 800b6dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b6e0:	4293      	cmp	r3, r2
 800b6e2:	bfb8      	it	lt
 800b6e4:	4613      	movlt	r3, r2
 800b6e6:	6033      	str	r3, [r6, #0]
 800b6e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b6ec:	4607      	mov	r7, r0
 800b6ee:	460c      	mov	r4, r1
 800b6f0:	b10a      	cbz	r2, 800b6f6 <_printf_common+0x26>
 800b6f2:	3301      	adds	r3, #1
 800b6f4:	6033      	str	r3, [r6, #0]
 800b6f6:	6823      	ldr	r3, [r4, #0]
 800b6f8:	0699      	lsls	r1, r3, #26
 800b6fa:	bf42      	ittt	mi
 800b6fc:	6833      	ldrmi	r3, [r6, #0]
 800b6fe:	3302      	addmi	r3, #2
 800b700:	6033      	strmi	r3, [r6, #0]
 800b702:	6825      	ldr	r5, [r4, #0]
 800b704:	f015 0506 	ands.w	r5, r5, #6
 800b708:	d106      	bne.n	800b718 <_printf_common+0x48>
 800b70a:	f104 0a19 	add.w	sl, r4, #25
 800b70e:	68e3      	ldr	r3, [r4, #12]
 800b710:	6832      	ldr	r2, [r6, #0]
 800b712:	1a9b      	subs	r3, r3, r2
 800b714:	42ab      	cmp	r3, r5
 800b716:	dc26      	bgt.n	800b766 <_printf_common+0x96>
 800b718:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b71c:	1e13      	subs	r3, r2, #0
 800b71e:	6822      	ldr	r2, [r4, #0]
 800b720:	bf18      	it	ne
 800b722:	2301      	movne	r3, #1
 800b724:	0692      	lsls	r2, r2, #26
 800b726:	d42b      	bmi.n	800b780 <_printf_common+0xb0>
 800b728:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b72c:	4649      	mov	r1, r9
 800b72e:	4638      	mov	r0, r7
 800b730:	47c0      	blx	r8
 800b732:	3001      	adds	r0, #1
 800b734:	d01e      	beq.n	800b774 <_printf_common+0xa4>
 800b736:	6823      	ldr	r3, [r4, #0]
 800b738:	68e5      	ldr	r5, [r4, #12]
 800b73a:	6832      	ldr	r2, [r6, #0]
 800b73c:	f003 0306 	and.w	r3, r3, #6
 800b740:	2b04      	cmp	r3, #4
 800b742:	bf08      	it	eq
 800b744:	1aad      	subeq	r5, r5, r2
 800b746:	68a3      	ldr	r3, [r4, #8]
 800b748:	6922      	ldr	r2, [r4, #16]
 800b74a:	bf0c      	ite	eq
 800b74c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b750:	2500      	movne	r5, #0
 800b752:	4293      	cmp	r3, r2
 800b754:	bfc4      	itt	gt
 800b756:	1a9b      	subgt	r3, r3, r2
 800b758:	18ed      	addgt	r5, r5, r3
 800b75a:	2600      	movs	r6, #0
 800b75c:	341a      	adds	r4, #26
 800b75e:	42b5      	cmp	r5, r6
 800b760:	d11a      	bne.n	800b798 <_printf_common+0xc8>
 800b762:	2000      	movs	r0, #0
 800b764:	e008      	b.n	800b778 <_printf_common+0xa8>
 800b766:	2301      	movs	r3, #1
 800b768:	4652      	mov	r2, sl
 800b76a:	4649      	mov	r1, r9
 800b76c:	4638      	mov	r0, r7
 800b76e:	47c0      	blx	r8
 800b770:	3001      	adds	r0, #1
 800b772:	d103      	bne.n	800b77c <_printf_common+0xac>
 800b774:	f04f 30ff 	mov.w	r0, #4294967295
 800b778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b77c:	3501      	adds	r5, #1
 800b77e:	e7c6      	b.n	800b70e <_printf_common+0x3e>
 800b780:	18e1      	adds	r1, r4, r3
 800b782:	1c5a      	adds	r2, r3, #1
 800b784:	2030      	movs	r0, #48	; 0x30
 800b786:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b78a:	4422      	add	r2, r4
 800b78c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b790:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b794:	3302      	adds	r3, #2
 800b796:	e7c7      	b.n	800b728 <_printf_common+0x58>
 800b798:	2301      	movs	r3, #1
 800b79a:	4622      	mov	r2, r4
 800b79c:	4649      	mov	r1, r9
 800b79e:	4638      	mov	r0, r7
 800b7a0:	47c0      	blx	r8
 800b7a2:	3001      	adds	r0, #1
 800b7a4:	d0e6      	beq.n	800b774 <_printf_common+0xa4>
 800b7a6:	3601      	adds	r6, #1
 800b7a8:	e7d9      	b.n	800b75e <_printf_common+0x8e>
	...

0800b7ac <_printf_i>:
 800b7ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b7b0:	7e0f      	ldrb	r7, [r1, #24]
 800b7b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b7b4:	2f78      	cmp	r7, #120	; 0x78
 800b7b6:	4691      	mov	r9, r2
 800b7b8:	4680      	mov	r8, r0
 800b7ba:	460c      	mov	r4, r1
 800b7bc:	469a      	mov	sl, r3
 800b7be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b7c2:	d807      	bhi.n	800b7d4 <_printf_i+0x28>
 800b7c4:	2f62      	cmp	r7, #98	; 0x62
 800b7c6:	d80a      	bhi.n	800b7de <_printf_i+0x32>
 800b7c8:	2f00      	cmp	r7, #0
 800b7ca:	f000 80d8 	beq.w	800b97e <_printf_i+0x1d2>
 800b7ce:	2f58      	cmp	r7, #88	; 0x58
 800b7d0:	f000 80a3 	beq.w	800b91a <_printf_i+0x16e>
 800b7d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b7d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b7dc:	e03a      	b.n	800b854 <_printf_i+0xa8>
 800b7de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b7e2:	2b15      	cmp	r3, #21
 800b7e4:	d8f6      	bhi.n	800b7d4 <_printf_i+0x28>
 800b7e6:	a101      	add	r1, pc, #4	; (adr r1, 800b7ec <_printf_i+0x40>)
 800b7e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b7ec:	0800b845 	.word	0x0800b845
 800b7f0:	0800b859 	.word	0x0800b859
 800b7f4:	0800b7d5 	.word	0x0800b7d5
 800b7f8:	0800b7d5 	.word	0x0800b7d5
 800b7fc:	0800b7d5 	.word	0x0800b7d5
 800b800:	0800b7d5 	.word	0x0800b7d5
 800b804:	0800b859 	.word	0x0800b859
 800b808:	0800b7d5 	.word	0x0800b7d5
 800b80c:	0800b7d5 	.word	0x0800b7d5
 800b810:	0800b7d5 	.word	0x0800b7d5
 800b814:	0800b7d5 	.word	0x0800b7d5
 800b818:	0800b965 	.word	0x0800b965
 800b81c:	0800b889 	.word	0x0800b889
 800b820:	0800b947 	.word	0x0800b947
 800b824:	0800b7d5 	.word	0x0800b7d5
 800b828:	0800b7d5 	.word	0x0800b7d5
 800b82c:	0800b987 	.word	0x0800b987
 800b830:	0800b7d5 	.word	0x0800b7d5
 800b834:	0800b889 	.word	0x0800b889
 800b838:	0800b7d5 	.word	0x0800b7d5
 800b83c:	0800b7d5 	.word	0x0800b7d5
 800b840:	0800b94f 	.word	0x0800b94f
 800b844:	682b      	ldr	r3, [r5, #0]
 800b846:	1d1a      	adds	r2, r3, #4
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	602a      	str	r2, [r5, #0]
 800b84c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b850:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b854:	2301      	movs	r3, #1
 800b856:	e0a3      	b.n	800b9a0 <_printf_i+0x1f4>
 800b858:	6820      	ldr	r0, [r4, #0]
 800b85a:	6829      	ldr	r1, [r5, #0]
 800b85c:	0606      	lsls	r6, r0, #24
 800b85e:	f101 0304 	add.w	r3, r1, #4
 800b862:	d50a      	bpl.n	800b87a <_printf_i+0xce>
 800b864:	680e      	ldr	r6, [r1, #0]
 800b866:	602b      	str	r3, [r5, #0]
 800b868:	2e00      	cmp	r6, #0
 800b86a:	da03      	bge.n	800b874 <_printf_i+0xc8>
 800b86c:	232d      	movs	r3, #45	; 0x2d
 800b86e:	4276      	negs	r6, r6
 800b870:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b874:	485e      	ldr	r0, [pc, #376]	; (800b9f0 <_printf_i+0x244>)
 800b876:	230a      	movs	r3, #10
 800b878:	e019      	b.n	800b8ae <_printf_i+0x102>
 800b87a:	680e      	ldr	r6, [r1, #0]
 800b87c:	602b      	str	r3, [r5, #0]
 800b87e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b882:	bf18      	it	ne
 800b884:	b236      	sxthne	r6, r6
 800b886:	e7ef      	b.n	800b868 <_printf_i+0xbc>
 800b888:	682b      	ldr	r3, [r5, #0]
 800b88a:	6820      	ldr	r0, [r4, #0]
 800b88c:	1d19      	adds	r1, r3, #4
 800b88e:	6029      	str	r1, [r5, #0]
 800b890:	0601      	lsls	r1, r0, #24
 800b892:	d501      	bpl.n	800b898 <_printf_i+0xec>
 800b894:	681e      	ldr	r6, [r3, #0]
 800b896:	e002      	b.n	800b89e <_printf_i+0xf2>
 800b898:	0646      	lsls	r6, r0, #25
 800b89a:	d5fb      	bpl.n	800b894 <_printf_i+0xe8>
 800b89c:	881e      	ldrh	r6, [r3, #0]
 800b89e:	4854      	ldr	r0, [pc, #336]	; (800b9f0 <_printf_i+0x244>)
 800b8a0:	2f6f      	cmp	r7, #111	; 0x6f
 800b8a2:	bf0c      	ite	eq
 800b8a4:	2308      	moveq	r3, #8
 800b8a6:	230a      	movne	r3, #10
 800b8a8:	2100      	movs	r1, #0
 800b8aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b8ae:	6865      	ldr	r5, [r4, #4]
 800b8b0:	60a5      	str	r5, [r4, #8]
 800b8b2:	2d00      	cmp	r5, #0
 800b8b4:	bfa2      	ittt	ge
 800b8b6:	6821      	ldrge	r1, [r4, #0]
 800b8b8:	f021 0104 	bicge.w	r1, r1, #4
 800b8bc:	6021      	strge	r1, [r4, #0]
 800b8be:	b90e      	cbnz	r6, 800b8c4 <_printf_i+0x118>
 800b8c0:	2d00      	cmp	r5, #0
 800b8c2:	d04d      	beq.n	800b960 <_printf_i+0x1b4>
 800b8c4:	4615      	mov	r5, r2
 800b8c6:	fbb6 f1f3 	udiv	r1, r6, r3
 800b8ca:	fb03 6711 	mls	r7, r3, r1, r6
 800b8ce:	5dc7      	ldrb	r7, [r0, r7]
 800b8d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b8d4:	4637      	mov	r7, r6
 800b8d6:	42bb      	cmp	r3, r7
 800b8d8:	460e      	mov	r6, r1
 800b8da:	d9f4      	bls.n	800b8c6 <_printf_i+0x11a>
 800b8dc:	2b08      	cmp	r3, #8
 800b8de:	d10b      	bne.n	800b8f8 <_printf_i+0x14c>
 800b8e0:	6823      	ldr	r3, [r4, #0]
 800b8e2:	07de      	lsls	r6, r3, #31
 800b8e4:	d508      	bpl.n	800b8f8 <_printf_i+0x14c>
 800b8e6:	6923      	ldr	r3, [r4, #16]
 800b8e8:	6861      	ldr	r1, [r4, #4]
 800b8ea:	4299      	cmp	r1, r3
 800b8ec:	bfde      	ittt	le
 800b8ee:	2330      	movle	r3, #48	; 0x30
 800b8f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b8f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b8f8:	1b52      	subs	r2, r2, r5
 800b8fa:	6122      	str	r2, [r4, #16]
 800b8fc:	f8cd a000 	str.w	sl, [sp]
 800b900:	464b      	mov	r3, r9
 800b902:	aa03      	add	r2, sp, #12
 800b904:	4621      	mov	r1, r4
 800b906:	4640      	mov	r0, r8
 800b908:	f7ff fee2 	bl	800b6d0 <_printf_common>
 800b90c:	3001      	adds	r0, #1
 800b90e:	d14c      	bne.n	800b9aa <_printf_i+0x1fe>
 800b910:	f04f 30ff 	mov.w	r0, #4294967295
 800b914:	b004      	add	sp, #16
 800b916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b91a:	4835      	ldr	r0, [pc, #212]	; (800b9f0 <_printf_i+0x244>)
 800b91c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b920:	6829      	ldr	r1, [r5, #0]
 800b922:	6823      	ldr	r3, [r4, #0]
 800b924:	f851 6b04 	ldr.w	r6, [r1], #4
 800b928:	6029      	str	r1, [r5, #0]
 800b92a:	061d      	lsls	r5, r3, #24
 800b92c:	d514      	bpl.n	800b958 <_printf_i+0x1ac>
 800b92e:	07df      	lsls	r7, r3, #31
 800b930:	bf44      	itt	mi
 800b932:	f043 0320 	orrmi.w	r3, r3, #32
 800b936:	6023      	strmi	r3, [r4, #0]
 800b938:	b91e      	cbnz	r6, 800b942 <_printf_i+0x196>
 800b93a:	6823      	ldr	r3, [r4, #0]
 800b93c:	f023 0320 	bic.w	r3, r3, #32
 800b940:	6023      	str	r3, [r4, #0]
 800b942:	2310      	movs	r3, #16
 800b944:	e7b0      	b.n	800b8a8 <_printf_i+0xfc>
 800b946:	6823      	ldr	r3, [r4, #0]
 800b948:	f043 0320 	orr.w	r3, r3, #32
 800b94c:	6023      	str	r3, [r4, #0]
 800b94e:	2378      	movs	r3, #120	; 0x78
 800b950:	4828      	ldr	r0, [pc, #160]	; (800b9f4 <_printf_i+0x248>)
 800b952:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b956:	e7e3      	b.n	800b920 <_printf_i+0x174>
 800b958:	0659      	lsls	r1, r3, #25
 800b95a:	bf48      	it	mi
 800b95c:	b2b6      	uxthmi	r6, r6
 800b95e:	e7e6      	b.n	800b92e <_printf_i+0x182>
 800b960:	4615      	mov	r5, r2
 800b962:	e7bb      	b.n	800b8dc <_printf_i+0x130>
 800b964:	682b      	ldr	r3, [r5, #0]
 800b966:	6826      	ldr	r6, [r4, #0]
 800b968:	6961      	ldr	r1, [r4, #20]
 800b96a:	1d18      	adds	r0, r3, #4
 800b96c:	6028      	str	r0, [r5, #0]
 800b96e:	0635      	lsls	r5, r6, #24
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	d501      	bpl.n	800b978 <_printf_i+0x1cc>
 800b974:	6019      	str	r1, [r3, #0]
 800b976:	e002      	b.n	800b97e <_printf_i+0x1d2>
 800b978:	0670      	lsls	r0, r6, #25
 800b97a:	d5fb      	bpl.n	800b974 <_printf_i+0x1c8>
 800b97c:	8019      	strh	r1, [r3, #0]
 800b97e:	2300      	movs	r3, #0
 800b980:	6123      	str	r3, [r4, #16]
 800b982:	4615      	mov	r5, r2
 800b984:	e7ba      	b.n	800b8fc <_printf_i+0x150>
 800b986:	682b      	ldr	r3, [r5, #0]
 800b988:	1d1a      	adds	r2, r3, #4
 800b98a:	602a      	str	r2, [r5, #0]
 800b98c:	681d      	ldr	r5, [r3, #0]
 800b98e:	6862      	ldr	r2, [r4, #4]
 800b990:	2100      	movs	r1, #0
 800b992:	4628      	mov	r0, r5
 800b994:	f7f4 fc1c 	bl	80001d0 <memchr>
 800b998:	b108      	cbz	r0, 800b99e <_printf_i+0x1f2>
 800b99a:	1b40      	subs	r0, r0, r5
 800b99c:	6060      	str	r0, [r4, #4]
 800b99e:	6863      	ldr	r3, [r4, #4]
 800b9a0:	6123      	str	r3, [r4, #16]
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b9a8:	e7a8      	b.n	800b8fc <_printf_i+0x150>
 800b9aa:	6923      	ldr	r3, [r4, #16]
 800b9ac:	462a      	mov	r2, r5
 800b9ae:	4649      	mov	r1, r9
 800b9b0:	4640      	mov	r0, r8
 800b9b2:	47d0      	blx	sl
 800b9b4:	3001      	adds	r0, #1
 800b9b6:	d0ab      	beq.n	800b910 <_printf_i+0x164>
 800b9b8:	6823      	ldr	r3, [r4, #0]
 800b9ba:	079b      	lsls	r3, r3, #30
 800b9bc:	d413      	bmi.n	800b9e6 <_printf_i+0x23a>
 800b9be:	68e0      	ldr	r0, [r4, #12]
 800b9c0:	9b03      	ldr	r3, [sp, #12]
 800b9c2:	4298      	cmp	r0, r3
 800b9c4:	bfb8      	it	lt
 800b9c6:	4618      	movlt	r0, r3
 800b9c8:	e7a4      	b.n	800b914 <_printf_i+0x168>
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	4632      	mov	r2, r6
 800b9ce:	4649      	mov	r1, r9
 800b9d0:	4640      	mov	r0, r8
 800b9d2:	47d0      	blx	sl
 800b9d4:	3001      	adds	r0, #1
 800b9d6:	d09b      	beq.n	800b910 <_printf_i+0x164>
 800b9d8:	3501      	adds	r5, #1
 800b9da:	68e3      	ldr	r3, [r4, #12]
 800b9dc:	9903      	ldr	r1, [sp, #12]
 800b9de:	1a5b      	subs	r3, r3, r1
 800b9e0:	42ab      	cmp	r3, r5
 800b9e2:	dcf2      	bgt.n	800b9ca <_printf_i+0x21e>
 800b9e4:	e7eb      	b.n	800b9be <_printf_i+0x212>
 800b9e6:	2500      	movs	r5, #0
 800b9e8:	f104 0619 	add.w	r6, r4, #25
 800b9ec:	e7f5      	b.n	800b9da <_printf_i+0x22e>
 800b9ee:	bf00      	nop
 800b9f0:	0800bda9 	.word	0x0800bda9
 800b9f4:	0800bdba 	.word	0x0800bdba

0800b9f8 <memcpy>:
 800b9f8:	440a      	add	r2, r1
 800b9fa:	4291      	cmp	r1, r2
 800b9fc:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba00:	d100      	bne.n	800ba04 <memcpy+0xc>
 800ba02:	4770      	bx	lr
 800ba04:	b510      	push	{r4, lr}
 800ba06:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba0e:	4291      	cmp	r1, r2
 800ba10:	d1f9      	bne.n	800ba06 <memcpy+0xe>
 800ba12:	bd10      	pop	{r4, pc}

0800ba14 <memmove>:
 800ba14:	4288      	cmp	r0, r1
 800ba16:	b510      	push	{r4, lr}
 800ba18:	eb01 0402 	add.w	r4, r1, r2
 800ba1c:	d902      	bls.n	800ba24 <memmove+0x10>
 800ba1e:	4284      	cmp	r4, r0
 800ba20:	4623      	mov	r3, r4
 800ba22:	d807      	bhi.n	800ba34 <memmove+0x20>
 800ba24:	1e43      	subs	r3, r0, #1
 800ba26:	42a1      	cmp	r1, r4
 800ba28:	d008      	beq.n	800ba3c <memmove+0x28>
 800ba2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ba32:	e7f8      	b.n	800ba26 <memmove+0x12>
 800ba34:	4402      	add	r2, r0
 800ba36:	4601      	mov	r1, r0
 800ba38:	428a      	cmp	r2, r1
 800ba3a:	d100      	bne.n	800ba3e <memmove+0x2a>
 800ba3c:	bd10      	pop	{r4, pc}
 800ba3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ba42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ba46:	e7f7      	b.n	800ba38 <memmove+0x24>

0800ba48 <_free_r>:
 800ba48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba4a:	2900      	cmp	r1, #0
 800ba4c:	d044      	beq.n	800bad8 <_free_r+0x90>
 800ba4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba52:	9001      	str	r0, [sp, #4]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	f1a1 0404 	sub.w	r4, r1, #4
 800ba5a:	bfb8      	it	lt
 800ba5c:	18e4      	addlt	r4, r4, r3
 800ba5e:	f000 f913 	bl	800bc88 <__malloc_lock>
 800ba62:	4a1e      	ldr	r2, [pc, #120]	; (800badc <_free_r+0x94>)
 800ba64:	9801      	ldr	r0, [sp, #4]
 800ba66:	6813      	ldr	r3, [r2, #0]
 800ba68:	b933      	cbnz	r3, 800ba78 <_free_r+0x30>
 800ba6a:	6063      	str	r3, [r4, #4]
 800ba6c:	6014      	str	r4, [r2, #0]
 800ba6e:	b003      	add	sp, #12
 800ba70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ba74:	f000 b90e 	b.w	800bc94 <__malloc_unlock>
 800ba78:	42a3      	cmp	r3, r4
 800ba7a:	d908      	bls.n	800ba8e <_free_r+0x46>
 800ba7c:	6825      	ldr	r5, [r4, #0]
 800ba7e:	1961      	adds	r1, r4, r5
 800ba80:	428b      	cmp	r3, r1
 800ba82:	bf01      	itttt	eq
 800ba84:	6819      	ldreq	r1, [r3, #0]
 800ba86:	685b      	ldreq	r3, [r3, #4]
 800ba88:	1949      	addeq	r1, r1, r5
 800ba8a:	6021      	streq	r1, [r4, #0]
 800ba8c:	e7ed      	b.n	800ba6a <_free_r+0x22>
 800ba8e:	461a      	mov	r2, r3
 800ba90:	685b      	ldr	r3, [r3, #4]
 800ba92:	b10b      	cbz	r3, 800ba98 <_free_r+0x50>
 800ba94:	42a3      	cmp	r3, r4
 800ba96:	d9fa      	bls.n	800ba8e <_free_r+0x46>
 800ba98:	6811      	ldr	r1, [r2, #0]
 800ba9a:	1855      	adds	r5, r2, r1
 800ba9c:	42a5      	cmp	r5, r4
 800ba9e:	d10b      	bne.n	800bab8 <_free_r+0x70>
 800baa0:	6824      	ldr	r4, [r4, #0]
 800baa2:	4421      	add	r1, r4
 800baa4:	1854      	adds	r4, r2, r1
 800baa6:	42a3      	cmp	r3, r4
 800baa8:	6011      	str	r1, [r2, #0]
 800baaa:	d1e0      	bne.n	800ba6e <_free_r+0x26>
 800baac:	681c      	ldr	r4, [r3, #0]
 800baae:	685b      	ldr	r3, [r3, #4]
 800bab0:	6053      	str	r3, [r2, #4]
 800bab2:	4421      	add	r1, r4
 800bab4:	6011      	str	r1, [r2, #0]
 800bab6:	e7da      	b.n	800ba6e <_free_r+0x26>
 800bab8:	d902      	bls.n	800bac0 <_free_r+0x78>
 800baba:	230c      	movs	r3, #12
 800babc:	6003      	str	r3, [r0, #0]
 800babe:	e7d6      	b.n	800ba6e <_free_r+0x26>
 800bac0:	6825      	ldr	r5, [r4, #0]
 800bac2:	1961      	adds	r1, r4, r5
 800bac4:	428b      	cmp	r3, r1
 800bac6:	bf04      	itt	eq
 800bac8:	6819      	ldreq	r1, [r3, #0]
 800baca:	685b      	ldreq	r3, [r3, #4]
 800bacc:	6063      	str	r3, [r4, #4]
 800bace:	bf04      	itt	eq
 800bad0:	1949      	addeq	r1, r1, r5
 800bad2:	6021      	streq	r1, [r4, #0]
 800bad4:	6054      	str	r4, [r2, #4]
 800bad6:	e7ca      	b.n	800ba6e <_free_r+0x26>
 800bad8:	b003      	add	sp, #12
 800bada:	bd30      	pop	{r4, r5, pc}
 800badc:	20000588 	.word	0x20000588

0800bae0 <sbrk_aligned>:
 800bae0:	b570      	push	{r4, r5, r6, lr}
 800bae2:	4e0e      	ldr	r6, [pc, #56]	; (800bb1c <sbrk_aligned+0x3c>)
 800bae4:	460c      	mov	r4, r1
 800bae6:	6831      	ldr	r1, [r6, #0]
 800bae8:	4605      	mov	r5, r0
 800baea:	b911      	cbnz	r1, 800baf2 <sbrk_aligned+0x12>
 800baec:	f000 f8bc 	bl	800bc68 <_sbrk_r>
 800baf0:	6030      	str	r0, [r6, #0]
 800baf2:	4621      	mov	r1, r4
 800baf4:	4628      	mov	r0, r5
 800baf6:	f000 f8b7 	bl	800bc68 <_sbrk_r>
 800bafa:	1c43      	adds	r3, r0, #1
 800bafc:	d00a      	beq.n	800bb14 <sbrk_aligned+0x34>
 800bafe:	1cc4      	adds	r4, r0, #3
 800bb00:	f024 0403 	bic.w	r4, r4, #3
 800bb04:	42a0      	cmp	r0, r4
 800bb06:	d007      	beq.n	800bb18 <sbrk_aligned+0x38>
 800bb08:	1a21      	subs	r1, r4, r0
 800bb0a:	4628      	mov	r0, r5
 800bb0c:	f000 f8ac 	bl	800bc68 <_sbrk_r>
 800bb10:	3001      	adds	r0, #1
 800bb12:	d101      	bne.n	800bb18 <sbrk_aligned+0x38>
 800bb14:	f04f 34ff 	mov.w	r4, #4294967295
 800bb18:	4620      	mov	r0, r4
 800bb1a:	bd70      	pop	{r4, r5, r6, pc}
 800bb1c:	2000058c 	.word	0x2000058c

0800bb20 <_malloc_r>:
 800bb20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb24:	1ccd      	adds	r5, r1, #3
 800bb26:	f025 0503 	bic.w	r5, r5, #3
 800bb2a:	3508      	adds	r5, #8
 800bb2c:	2d0c      	cmp	r5, #12
 800bb2e:	bf38      	it	cc
 800bb30:	250c      	movcc	r5, #12
 800bb32:	2d00      	cmp	r5, #0
 800bb34:	4607      	mov	r7, r0
 800bb36:	db01      	blt.n	800bb3c <_malloc_r+0x1c>
 800bb38:	42a9      	cmp	r1, r5
 800bb3a:	d905      	bls.n	800bb48 <_malloc_r+0x28>
 800bb3c:	230c      	movs	r3, #12
 800bb3e:	603b      	str	r3, [r7, #0]
 800bb40:	2600      	movs	r6, #0
 800bb42:	4630      	mov	r0, r6
 800bb44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb48:	4e2e      	ldr	r6, [pc, #184]	; (800bc04 <_malloc_r+0xe4>)
 800bb4a:	f000 f89d 	bl	800bc88 <__malloc_lock>
 800bb4e:	6833      	ldr	r3, [r6, #0]
 800bb50:	461c      	mov	r4, r3
 800bb52:	bb34      	cbnz	r4, 800bba2 <_malloc_r+0x82>
 800bb54:	4629      	mov	r1, r5
 800bb56:	4638      	mov	r0, r7
 800bb58:	f7ff ffc2 	bl	800bae0 <sbrk_aligned>
 800bb5c:	1c43      	adds	r3, r0, #1
 800bb5e:	4604      	mov	r4, r0
 800bb60:	d14d      	bne.n	800bbfe <_malloc_r+0xde>
 800bb62:	6834      	ldr	r4, [r6, #0]
 800bb64:	4626      	mov	r6, r4
 800bb66:	2e00      	cmp	r6, #0
 800bb68:	d140      	bne.n	800bbec <_malloc_r+0xcc>
 800bb6a:	6823      	ldr	r3, [r4, #0]
 800bb6c:	4631      	mov	r1, r6
 800bb6e:	4638      	mov	r0, r7
 800bb70:	eb04 0803 	add.w	r8, r4, r3
 800bb74:	f000 f878 	bl	800bc68 <_sbrk_r>
 800bb78:	4580      	cmp	r8, r0
 800bb7a:	d13a      	bne.n	800bbf2 <_malloc_r+0xd2>
 800bb7c:	6821      	ldr	r1, [r4, #0]
 800bb7e:	3503      	adds	r5, #3
 800bb80:	1a6d      	subs	r5, r5, r1
 800bb82:	f025 0503 	bic.w	r5, r5, #3
 800bb86:	3508      	adds	r5, #8
 800bb88:	2d0c      	cmp	r5, #12
 800bb8a:	bf38      	it	cc
 800bb8c:	250c      	movcc	r5, #12
 800bb8e:	4629      	mov	r1, r5
 800bb90:	4638      	mov	r0, r7
 800bb92:	f7ff ffa5 	bl	800bae0 <sbrk_aligned>
 800bb96:	3001      	adds	r0, #1
 800bb98:	d02b      	beq.n	800bbf2 <_malloc_r+0xd2>
 800bb9a:	6823      	ldr	r3, [r4, #0]
 800bb9c:	442b      	add	r3, r5
 800bb9e:	6023      	str	r3, [r4, #0]
 800bba0:	e00e      	b.n	800bbc0 <_malloc_r+0xa0>
 800bba2:	6822      	ldr	r2, [r4, #0]
 800bba4:	1b52      	subs	r2, r2, r5
 800bba6:	d41e      	bmi.n	800bbe6 <_malloc_r+0xc6>
 800bba8:	2a0b      	cmp	r2, #11
 800bbaa:	d916      	bls.n	800bbda <_malloc_r+0xba>
 800bbac:	1961      	adds	r1, r4, r5
 800bbae:	42a3      	cmp	r3, r4
 800bbb0:	6025      	str	r5, [r4, #0]
 800bbb2:	bf18      	it	ne
 800bbb4:	6059      	strne	r1, [r3, #4]
 800bbb6:	6863      	ldr	r3, [r4, #4]
 800bbb8:	bf08      	it	eq
 800bbba:	6031      	streq	r1, [r6, #0]
 800bbbc:	5162      	str	r2, [r4, r5]
 800bbbe:	604b      	str	r3, [r1, #4]
 800bbc0:	4638      	mov	r0, r7
 800bbc2:	f104 060b 	add.w	r6, r4, #11
 800bbc6:	f000 f865 	bl	800bc94 <__malloc_unlock>
 800bbca:	f026 0607 	bic.w	r6, r6, #7
 800bbce:	1d23      	adds	r3, r4, #4
 800bbd0:	1af2      	subs	r2, r6, r3
 800bbd2:	d0b6      	beq.n	800bb42 <_malloc_r+0x22>
 800bbd4:	1b9b      	subs	r3, r3, r6
 800bbd6:	50a3      	str	r3, [r4, r2]
 800bbd8:	e7b3      	b.n	800bb42 <_malloc_r+0x22>
 800bbda:	6862      	ldr	r2, [r4, #4]
 800bbdc:	42a3      	cmp	r3, r4
 800bbde:	bf0c      	ite	eq
 800bbe0:	6032      	streq	r2, [r6, #0]
 800bbe2:	605a      	strne	r2, [r3, #4]
 800bbe4:	e7ec      	b.n	800bbc0 <_malloc_r+0xa0>
 800bbe6:	4623      	mov	r3, r4
 800bbe8:	6864      	ldr	r4, [r4, #4]
 800bbea:	e7b2      	b.n	800bb52 <_malloc_r+0x32>
 800bbec:	4634      	mov	r4, r6
 800bbee:	6876      	ldr	r6, [r6, #4]
 800bbf0:	e7b9      	b.n	800bb66 <_malloc_r+0x46>
 800bbf2:	230c      	movs	r3, #12
 800bbf4:	603b      	str	r3, [r7, #0]
 800bbf6:	4638      	mov	r0, r7
 800bbf8:	f000 f84c 	bl	800bc94 <__malloc_unlock>
 800bbfc:	e7a1      	b.n	800bb42 <_malloc_r+0x22>
 800bbfe:	6025      	str	r5, [r4, #0]
 800bc00:	e7de      	b.n	800bbc0 <_malloc_r+0xa0>
 800bc02:	bf00      	nop
 800bc04:	20000588 	.word	0x20000588

0800bc08 <_realloc_r>:
 800bc08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc0c:	4680      	mov	r8, r0
 800bc0e:	4614      	mov	r4, r2
 800bc10:	460e      	mov	r6, r1
 800bc12:	b921      	cbnz	r1, 800bc1e <_realloc_r+0x16>
 800bc14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc18:	4611      	mov	r1, r2
 800bc1a:	f7ff bf81 	b.w	800bb20 <_malloc_r>
 800bc1e:	b92a      	cbnz	r2, 800bc2c <_realloc_r+0x24>
 800bc20:	f7ff ff12 	bl	800ba48 <_free_r>
 800bc24:	4625      	mov	r5, r4
 800bc26:	4628      	mov	r0, r5
 800bc28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc2c:	f000 f838 	bl	800bca0 <_malloc_usable_size_r>
 800bc30:	4284      	cmp	r4, r0
 800bc32:	4607      	mov	r7, r0
 800bc34:	d802      	bhi.n	800bc3c <_realloc_r+0x34>
 800bc36:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bc3a:	d812      	bhi.n	800bc62 <_realloc_r+0x5a>
 800bc3c:	4621      	mov	r1, r4
 800bc3e:	4640      	mov	r0, r8
 800bc40:	f7ff ff6e 	bl	800bb20 <_malloc_r>
 800bc44:	4605      	mov	r5, r0
 800bc46:	2800      	cmp	r0, #0
 800bc48:	d0ed      	beq.n	800bc26 <_realloc_r+0x1e>
 800bc4a:	42bc      	cmp	r4, r7
 800bc4c:	4622      	mov	r2, r4
 800bc4e:	4631      	mov	r1, r6
 800bc50:	bf28      	it	cs
 800bc52:	463a      	movcs	r2, r7
 800bc54:	f7ff fed0 	bl	800b9f8 <memcpy>
 800bc58:	4631      	mov	r1, r6
 800bc5a:	4640      	mov	r0, r8
 800bc5c:	f7ff fef4 	bl	800ba48 <_free_r>
 800bc60:	e7e1      	b.n	800bc26 <_realloc_r+0x1e>
 800bc62:	4635      	mov	r5, r6
 800bc64:	e7df      	b.n	800bc26 <_realloc_r+0x1e>
	...

0800bc68 <_sbrk_r>:
 800bc68:	b538      	push	{r3, r4, r5, lr}
 800bc6a:	4d06      	ldr	r5, [pc, #24]	; (800bc84 <_sbrk_r+0x1c>)
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	4604      	mov	r4, r0
 800bc70:	4608      	mov	r0, r1
 800bc72:	602b      	str	r3, [r5, #0]
 800bc74:	f7f6 fd3c 	bl	80026f0 <_sbrk>
 800bc78:	1c43      	adds	r3, r0, #1
 800bc7a:	d102      	bne.n	800bc82 <_sbrk_r+0x1a>
 800bc7c:	682b      	ldr	r3, [r5, #0]
 800bc7e:	b103      	cbz	r3, 800bc82 <_sbrk_r+0x1a>
 800bc80:	6023      	str	r3, [r4, #0]
 800bc82:	bd38      	pop	{r3, r4, r5, pc}
 800bc84:	20000590 	.word	0x20000590

0800bc88 <__malloc_lock>:
 800bc88:	4801      	ldr	r0, [pc, #4]	; (800bc90 <__malloc_lock+0x8>)
 800bc8a:	f000 b811 	b.w	800bcb0 <__retarget_lock_acquire_recursive>
 800bc8e:	bf00      	nop
 800bc90:	20000594 	.word	0x20000594

0800bc94 <__malloc_unlock>:
 800bc94:	4801      	ldr	r0, [pc, #4]	; (800bc9c <__malloc_unlock+0x8>)
 800bc96:	f000 b80c 	b.w	800bcb2 <__retarget_lock_release_recursive>
 800bc9a:	bf00      	nop
 800bc9c:	20000594 	.word	0x20000594

0800bca0 <_malloc_usable_size_r>:
 800bca0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bca4:	1f18      	subs	r0, r3, #4
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	bfbc      	itt	lt
 800bcaa:	580b      	ldrlt	r3, [r1, r0]
 800bcac:	18c0      	addlt	r0, r0, r3
 800bcae:	4770      	bx	lr

0800bcb0 <__retarget_lock_acquire_recursive>:
 800bcb0:	4770      	bx	lr

0800bcb2 <__retarget_lock_release_recursive>:
 800bcb2:	4770      	bx	lr

0800bcb4 <_init>:
 800bcb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcb6:	bf00      	nop
 800bcb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcba:	bc08      	pop	{r3}
 800bcbc:	469e      	mov	lr, r3
 800bcbe:	4770      	bx	lr

0800bcc0 <_fini>:
 800bcc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcc2:	bf00      	nop
 800bcc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcc6:	bc08      	pop	{r3}
 800bcc8:	469e      	mov	lr, r3
 800bcca:	4770      	bx	lr
