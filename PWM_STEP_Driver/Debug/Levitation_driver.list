
Levitation_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009124  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  080092b4  080092b4  000192b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009394  08009394  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08009394  08009394  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009394  08009394  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009394  08009394  00019394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009398  08009398  00019398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800939c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000052c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000059c  2000059c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017e6a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b1a  00000000  00000000  00037f0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013e8  00000000  00000000  0003aa28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012d0  00000000  00000000  0003be10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000205ae  00000000  00000000  0003d0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019b18  00000000  00000000  0005d68e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c817d  00000000  00000000  000771a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013f323  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000591c  00000000  00000000  0013f374  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800929c 	.word	0x0800929c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800929c 	.word	0x0800929c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <ADC_Select_CH1>:
		              HAL_ADC_ConfigChannel(&hadc3, &sConfig);
}


void ADC_Select_CH1 (void)
	     {
 8000270:	b580      	push	{r7, lr}
 8000272:	b086      	sub	sp, #24
 8000274:	af00      	add	r7, sp, #0
	     	ADC_ChannelConfTypeDef sConfig = {0};
 8000276:	463b      	mov	r3, r7
 8000278:	2200      	movs	r2, #0
 800027a:	601a      	str	r2, [r3, #0]
 800027c:	605a      	str	r2, [r3, #4]
 800027e:	609a      	str	r2, [r3, #8]
 8000280:	60da      	str	r2, [r3, #12]
 8000282:	611a      	str	r2, [r3, #16]
 8000284:	615a      	str	r2, [r3, #20]
	     	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	     	  */
	     	  sConfig.Channel = ADC_CHANNEL_1;
 8000286:	2301      	movs	r3, #1
 8000288:	603b      	str	r3, [r7, #0]
	     	  sConfig.Rank = 1;
 800028a:	2301      	movs	r3, #1
 800028c:	607b      	str	r3, [r7, #4]
	     	  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800028e:	2303      	movs	r3, #3
 8000290:	60bb      	str	r3, [r7, #8]
	     	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8000292:	463b      	mov	r3, r7
 8000294:	4619      	mov	r1, r3
 8000296:	4803      	ldr	r0, [pc, #12]	; (80002a4 <ADC_Select_CH1+0x34>)
 8000298:	f002 fb6e 	bl	8002978 <HAL_ADC_ConfigChannel>
	     }
 800029c:	bf00      	nop
 800029e:	3718      	adds	r7, #24
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	2000012c 	.word	0x2000012c

080002a8 <ADC_Select_CH12>:

void ADC_Select_CH12 (void)
	     {
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b086      	sub	sp, #24
 80002ac:	af00      	add	r7, sp, #0
	     	ADC_ChannelConfTypeDef sConfig = {0};
 80002ae:	463b      	mov	r3, r7
 80002b0:	2200      	movs	r2, #0
 80002b2:	601a      	str	r2, [r3, #0]
 80002b4:	605a      	str	r2, [r3, #4]
 80002b6:	609a      	str	r2, [r3, #8]
 80002b8:	60da      	str	r2, [r3, #12]
 80002ba:	611a      	str	r2, [r3, #16]
 80002bc:	615a      	str	r2, [r3, #20]
	     	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	     	  */
	     	  sConfig.Channel = ADC_CHANNEL_12;
 80002be:	230c      	movs	r3, #12
 80002c0:	603b      	str	r3, [r7, #0]
	     	  sConfig.Rank = 1;
 80002c2:	2301      	movs	r3, #1
 80002c4:	607b      	str	r3, [r7, #4]
	     	  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80002c6:	2303      	movs	r3, #3
 80002c8:	60bb      	str	r3, [r7, #8]
	     	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 80002ca:	463b      	mov	r3, r7
 80002cc:	4619      	mov	r1, r3
 80002ce:	4803      	ldr	r0, [pc, #12]	; (80002dc <ADC_Select_CH12+0x34>)
 80002d0:	f002 fb52 	bl	8002978 <HAL_ADC_ConfigChannel>
	     }
 80002d4:	bf00      	nop
 80002d6:	3718      	adds	r7, #24
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	2000012c 	.word	0x2000012c

080002e0 <ADC_read_1>:



uint16_t ADC_read_1(void)

	  {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
//	ADC_reset_ch();
	ADC_Select_CH1 ();
 80002e4:	f7ff ffc4 	bl	8000270 <ADC_Select_CH1>
	current[1]=0;
 80002e8:	4b0b      	ldr	r3, [pc, #44]	; (8000318 <ADC_read_1+0x38>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	805a      	strh	r2, [r3, #2]
	HAL_ADC_Start(&hadc3);
 80002ee:	480b      	ldr	r0, [pc, #44]	; (800031c <ADC_read_1+0x3c>)
 80002f0:	f001 fef6 	bl	80020e0 <HAL_ADC_Start>

	 		  HAL_ADC_PollForConversion(&hadc3, 100);
 80002f4:	2164      	movs	r1, #100	; 0x64
 80002f6:	4809      	ldr	r0, [pc, #36]	; (800031c <ADC_read_1+0x3c>)
 80002f8:	f002 f83e 	bl	8002378 <HAL_ADC_PollForConversion>
	 		  current[1] = HAL_ADC_GetValue(&hadc3);
 80002fc:	4807      	ldr	r0, [pc, #28]	; (800031c <ADC_read_1+0x3c>)
 80002fe:	f002 fabb 	bl	8002878 <HAL_ADC_GetValue>
 8000302:	4603      	mov	r3, r0
 8000304:	b29a      	uxth	r2, r3
 8000306:	4b04      	ldr	r3, [pc, #16]	; (8000318 <ADC_read_1+0x38>)
 8000308:	805a      	strh	r2, [r3, #2]
	 		  HAL_ADC_Stop(&hadc3);
 800030a:	4804      	ldr	r0, [pc, #16]	; (800031c <ADC_read_1+0x3c>)
 800030c:	f001 fffe 	bl	800230c <HAL_ADC_Stop>


	 		  return current[1];
 8000310:	4b01      	ldr	r3, [pc, #4]	; (8000318 <ADC_read_1+0x38>)
 8000312:	885b      	ldrh	r3, [r3, #2]
	  }
 8000314:	4618      	mov	r0, r3
 8000316:	bd80      	pop	{r7, pc}
 8000318:	2000056c 	.word	0x2000056c
 800031c:	2000012c 	.word	0x2000012c

08000320 <ADC_read_12>:

uint16_t ADC_read_12(void)

	  {
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
//	ADC_reset_ch();
	ADC_Select_CH12 ();
 8000324:	f7ff ffc0 	bl	80002a8 <ADC_Select_CH12>
	current[0]=0;
 8000328:	4b0b      	ldr	r3, [pc, #44]	; (8000358 <ADC_read_12+0x38>)
 800032a:	2200      	movs	r2, #0
 800032c:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Start(&hadc3);
 800032e:	480b      	ldr	r0, [pc, #44]	; (800035c <ADC_read_12+0x3c>)
 8000330:	f001 fed6 	bl	80020e0 <HAL_ADC_Start>

	 		  HAL_ADC_PollForConversion(&hadc3, 100);
 8000334:	2164      	movs	r1, #100	; 0x64
 8000336:	4809      	ldr	r0, [pc, #36]	; (800035c <ADC_read_12+0x3c>)
 8000338:	f002 f81e 	bl	8002378 <HAL_ADC_PollForConversion>
	 		  current[0] = HAL_ADC_GetValue(&hadc3);
 800033c:	4807      	ldr	r0, [pc, #28]	; (800035c <ADC_read_12+0x3c>)
 800033e:	f002 fa9b 	bl	8002878 <HAL_ADC_GetValue>
 8000342:	4603      	mov	r3, r0
 8000344:	b29a      	uxth	r2, r3
 8000346:	4b04      	ldr	r3, [pc, #16]	; (8000358 <ADC_read_12+0x38>)
 8000348:	801a      	strh	r2, [r3, #0]
	 		  HAL_ADC_Stop(&hadc3);
 800034a:	4804      	ldr	r0, [pc, #16]	; (800035c <ADC_read_12+0x3c>)
 800034c:	f001 ffde 	bl	800230c <HAL_ADC_Stop>


	 		  return current[0];
 8000350:	4b01      	ldr	r3, [pc, #4]	; (8000358 <ADC_read_12+0x38>)
 8000352:	881b      	ldrh	r3, [r3, #0]
	  }
 8000354:	4618      	mov	r0, r3
 8000356:	bd80      	pop	{r7, pc}
 8000358:	2000056c 	.word	0x2000056c
 800035c:	2000012c 	.word	0x2000012c

08000360 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000362:	b089      	sub	sp, #36	; 0x24
 8000364:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000366:	f001 fc3d 	bl	8001be4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800036a:	f000 f921 	bl	80005b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800036e:	f000 fea3 	bl	80010b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000372:	f000 fe67 	bl	8001044 <MX_DMA_Init>
  MX_ADC2_Init();
 8000376:	f000 f9f7 	bl	8000768 <MX_ADC2_Init>
  MX_TIM1_Init();
 800037a:	f000 fb97 	bl	8000aac <MX_TIM1_Init>
  MX_TIM2_Init();
 800037e:	f000 fc4f 	bl	8000c20 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000382:	f000 fdff 	bl	8000f84 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000386:	f000 fe2d 	bl	8000fe4 <MX_USART2_UART_Init>
  MX_TIM8_Init();
 800038a:	f000 fca9 	bl	8000ce0 <MX_TIM8_Init>
  MX_I2C1_Init();
 800038e:	f000 faf3 	bl	8000978 <MX_I2C1_Init>
  MX_RTC_Init();
 8000392:	f000 fb31 	bl	80009f8 <MX_RTC_Init>
  MX_TIM15_Init();
 8000396:	f000 fd51 	bl	8000e3c <MX_TIM15_Init>
  MX_ADC1_Init();
 800039a:	f000 f975 	bl	8000688 <MX_ADC1_Init>
  MX_ADC3_Init();
 800039e:	f000 fa7b 	bl	8000898 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
//	TX_2;

  HAL_ADCEx_Calibration_Start(&hadc2,5);
 80003a2:	2105      	movs	r1, #5
 80003a4:	4874      	ldr	r0, [pc, #464]	; (8000578 <main+0x218>)
 80003a6:	f002 fa74 	bl	8002892 <HAL_ADCEx_Calibration_Start>

  HAL_ADC_Start_DMA(&hadc2, (uint16_t*)hall_sens, 5);
 80003aa:	2205      	movs	r2, #5
 80003ac:	4973      	ldr	r1, [pc, #460]	; (800057c <main+0x21c>)
 80003ae:	4872      	ldr	r0, [pc, #456]	; (8000578 <main+0x218>)
 80003b0:	f002 f8e4 	bl	800257c <HAL_ADC_Start_DMA>



  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80003b4:	2100      	movs	r1, #0
 80003b6:	4872      	ldr	r0, [pc, #456]	; (8000580 <main+0x220>)
 80003b8:	f005 fdb4 	bl	8005f24 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80003bc:	2104      	movs	r1, #4
 80003be:	4870      	ldr	r0, [pc, #448]	; (8000580 <main+0x220>)
 80003c0:	f005 fdb0 	bl	8005f24 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80003c4:	2100      	movs	r1, #0
 80003c6:	486e      	ldr	r0, [pc, #440]	; (8000580 <main+0x220>)
 80003c8:	f007 f812 	bl	80073f0 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80003cc:	2104      	movs	r1, #4
 80003ce:	486c      	ldr	r0, [pc, #432]	; (8000580 <main+0x220>)
 80003d0:	f007 f80e 	bl	80073f0 <HAL_TIMEx_PWMN_Start>

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80003d4:	2100      	movs	r1, #0
 80003d6:	486b      	ldr	r0, [pc, #428]	; (8000584 <main+0x224>)
 80003d8:	f005 fda4 	bl	8005f24 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
 80003dc:	2100      	movs	r1, #0
 80003de:	4869      	ldr	r0, [pc, #420]	; (8000584 <main+0x224>)
 80003e0:	f007 f806 	bl	80073f0 <HAL_TIMEx_PWMN_Start>

  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80003e4:	2100      	movs	r1, #0
 80003e6:	4868      	ldr	r0, [pc, #416]	; (8000588 <main+0x228>)
 80003e8:	f005 fd9c 	bl	8005f24 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim15, TIM_CHANNEL_1);
 80003ec:	2100      	movs	r1, #0
 80003ee:	4866      	ldr	r0, [pc, #408]	; (8000588 <main+0x228>)
 80003f0:	f006 fffe 	bl	80073f0 <HAL_TIMEx_PWMN_Start>

  PORT1_ON;
 80003f4:	2201      	movs	r2, #1
 80003f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003fa:	4864      	ldr	r0, [pc, #400]	; (800058c <main+0x22c>)
 80003fc:	f003 fd36 	bl	8003e6c <HAL_GPIO_WritePin>
  PORT2_ON;
 8000400:	2201      	movs	r2, #1
 8000402:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000406:	4861      	ldr	r0, [pc, #388]	; (800058c <main+0x22c>)
 8000408:	f003 fd30 	bl	8003e6c <HAL_GPIO_WritePin>
  PORT3_ON;
 800040c:	2201      	movs	r2, #1
 800040e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000412:	485e      	ldr	r0, [pc, #376]	; (800058c <main+0x22c>)
 8000414:	f003 fd2a 	bl	8003e6c <HAL_GPIO_WritePin>
  PORT4_ON;
 8000418:	2201      	movs	r2, #1
 800041a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800041e:	485b      	ldr	r0, [pc, #364]	; (800058c <main+0x22c>)
 8000420:	f003 fd24 	bl	8003e6c <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  sprintf(str, "\n\r Crnt_1-%04d, Crnt_2-%04d, Crnt_3-%04d, Crnt_4-%04d, Hall_1-%04d,Hall_2-%04d,Hall_3-%04d,Hall_4-%04d,PWM-%04d\n\r",current[0],current[1],current[2],current[3],hall_sens[0],hall_sens[1],hall_sens[2],hall_sens[3],PWM);
 8000424:	4b5a      	ldr	r3, [pc, #360]	; (8000590 <main+0x230>)
 8000426:	881b      	ldrh	r3, [r3, #0]
 8000428:	469c      	mov	ip, r3
 800042a:	4b59      	ldr	r3, [pc, #356]	; (8000590 <main+0x230>)
 800042c:	885b      	ldrh	r3, [r3, #2]
 800042e:	469e      	mov	lr, r3
 8000430:	4b57      	ldr	r3, [pc, #348]	; (8000590 <main+0x230>)
 8000432:	889b      	ldrh	r3, [r3, #4]
 8000434:	461a      	mov	r2, r3
 8000436:	4b56      	ldr	r3, [pc, #344]	; (8000590 <main+0x230>)
 8000438:	88db      	ldrh	r3, [r3, #6]
 800043a:	4619      	mov	r1, r3
 800043c:	4b4f      	ldr	r3, [pc, #316]	; (800057c <main+0x21c>)
 800043e:	881b      	ldrh	r3, [r3, #0]
 8000440:	4618      	mov	r0, r3
 8000442:	4b4e      	ldr	r3, [pc, #312]	; (800057c <main+0x21c>)
 8000444:	885b      	ldrh	r3, [r3, #2]
 8000446:	461c      	mov	r4, r3
 8000448:	4b4c      	ldr	r3, [pc, #304]	; (800057c <main+0x21c>)
 800044a:	889b      	ldrh	r3, [r3, #4]
 800044c:	461d      	mov	r5, r3
 800044e:	4b4b      	ldr	r3, [pc, #300]	; (800057c <main+0x21c>)
 8000450:	88db      	ldrh	r3, [r3, #6]
 8000452:	461e      	mov	r6, r3
 8000454:	4b4f      	ldr	r3, [pc, #316]	; (8000594 <main+0x234>)
 8000456:	881b      	ldrh	r3, [r3, #0]
 8000458:	9306      	str	r3, [sp, #24]
 800045a:	9605      	str	r6, [sp, #20]
 800045c:	9504      	str	r5, [sp, #16]
 800045e:	9403      	str	r4, [sp, #12]
 8000460:	9002      	str	r0, [sp, #8]
 8000462:	9101      	str	r1, [sp, #4]
 8000464:	9200      	str	r2, [sp, #0]
 8000466:	4673      	mov	r3, lr
 8000468:	4662      	mov	r2, ip
 800046a:	494b      	ldr	r1, [pc, #300]	; (8000598 <main+0x238>)
 800046c:	484b      	ldr	r0, [pc, #300]	; (800059c <main+0x23c>)
 800046e:	f008 faa7 	bl	80089c0 <siprintf>


	  if(flag==1){
 8000472:	4b4b      	ldr	r3, [pc, #300]	; (80005a0 <main+0x240>)
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	b2db      	uxtb	r3, r3
 8000478:	2b01      	cmp	r3, #1
 800047a:	d11e      	bne.n	80004ba <main+0x15a>
		  HAL_ADC_Stop_DMA(&hadc2);
 800047c:	483e      	ldr	r0, [pc, #248]	; (8000578 <main+0x218>)
 800047e:	f002 f999 	bl	80027b4 <HAL_ADC_Stop_DMA>
		  current[2]=hall_sens[4];
 8000482:	4b3e      	ldr	r3, [pc, #248]	; (800057c <main+0x21c>)
 8000484:	891a      	ldrh	r2, [r3, #8]
 8000486:	4b42      	ldr	r3, [pc, #264]	; (8000590 <main+0x230>)
 8000488:	809a      	strh	r2, [r3, #4]
	  TX_2;
 800048a:	2201      	movs	r2, #1
 800048c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000490:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000494:	f003 fcea 	bl	8003e6c <HAL_GPIO_WritePin>
	  	 HAL_UART_Transmit_DMA(&huart2, str, sizeof(str));
 8000498:	2270      	movs	r2, #112	; 0x70
 800049a:	4940      	ldr	r1, [pc, #256]	; (800059c <main+0x23c>)
 800049c:	4841      	ldr	r0, [pc, #260]	; (80005a4 <main+0x244>)
 800049e:	f007 f9eb 	bl	8007878 <HAL_UART_Transmit_DMA>
	  	HAL_Delay(500);
 80004a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004a6:	f001 fc03 	bl	8001cb0 <HAL_Delay>
	  	flag=0;
 80004aa:	4b3d      	ldr	r3, [pc, #244]	; (80005a0 <main+0x240>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	701a      	strb	r2, [r3, #0]
	  //	ADC_read_12_2();
	  	HAL_ADC_Start_DMA(&hadc2, (uint16_t*)hall_sens, 5);
 80004b0:	2205      	movs	r2, #5
 80004b2:	4932      	ldr	r1, [pc, #200]	; (800057c <main+0x21c>)
 80004b4:	4830      	ldr	r0, [pc, #192]	; (8000578 <main+0x218>)
 80004b6:	f002 f861 	bl	800257c <HAL_ADC_Start_DMA>

	  }

	  if((hall_sens[0]<=1330)&&(hall_sens[0]>=1285)){TIM1->CCR1=3000;TIM1->CCR2=3000;}
 80004ba:	4b30      	ldr	r3, [pc, #192]	; (800057c <main+0x21c>)
 80004bc:	881b      	ldrh	r3, [r3, #0]
 80004be:	f240 5232 	movw	r2, #1330	; 0x532
 80004c2:	4293      	cmp	r3, r2
 80004c4:	d80d      	bhi.n	80004e2 <main+0x182>
 80004c6:	4b2d      	ldr	r3, [pc, #180]	; (800057c <main+0x21c>)
 80004c8:	881b      	ldrh	r3, [r3, #0]
 80004ca:	f240 5204 	movw	r2, #1284	; 0x504
 80004ce:	4293      	cmp	r3, r2
 80004d0:	d907      	bls.n	80004e2 <main+0x182>
 80004d2:	4b35      	ldr	r3, [pc, #212]	; (80005a8 <main+0x248>)
 80004d4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80004d8:	635a      	str	r2, [r3, #52]	; 0x34
 80004da:	4b33      	ldr	r3, [pc, #204]	; (80005a8 <main+0x248>)
 80004dc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80004e0:	639a      	str	r2, [r3, #56]	; 0x38
      if(hall_sens[0]>1330){PWM=PWM+10;}
 80004e2:	4b26      	ldr	r3, [pc, #152]	; (800057c <main+0x21c>)
 80004e4:	881b      	ldrh	r3, [r3, #0]
 80004e6:	f240 5232 	movw	r2, #1330	; 0x532
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d905      	bls.n	80004fa <main+0x19a>
 80004ee:	4b29      	ldr	r3, [pc, #164]	; (8000594 <main+0x234>)
 80004f0:	881b      	ldrh	r3, [r3, #0]
 80004f2:	330a      	adds	r3, #10
 80004f4:	b29a      	uxth	r2, r3
 80004f6:	4b27      	ldr	r3, [pc, #156]	; (8000594 <main+0x234>)
 80004f8:	801a      	strh	r2, [r3, #0]
      if(hall_sens[0]<1285){PWM=PWM-10;}
 80004fa:	4b20      	ldr	r3, [pc, #128]	; (800057c <main+0x21c>)
 80004fc:	881b      	ldrh	r3, [r3, #0]
 80004fe:	f240 5204 	movw	r2, #1284	; 0x504
 8000502:	4293      	cmp	r3, r2
 8000504:	d805      	bhi.n	8000512 <main+0x1b2>
 8000506:	4b23      	ldr	r3, [pc, #140]	; (8000594 <main+0x234>)
 8000508:	881b      	ldrh	r3, [r3, #0]
 800050a:	3b0a      	subs	r3, #10
 800050c:	b29a      	uxth	r2, r3
 800050e:	4b21      	ldr	r3, [pc, #132]	; (8000594 <main+0x234>)
 8000510:	801a      	strh	r2, [r3, #0]
      if(PWM>=6000){PWM=5999;}
 8000512:	4b20      	ldr	r3, [pc, #128]	; (8000594 <main+0x234>)
 8000514:	881b      	ldrh	r3, [r3, #0]
 8000516:	f241 726f 	movw	r2, #5999	; 0x176f
 800051a:	4293      	cmp	r3, r2
 800051c:	d903      	bls.n	8000526 <main+0x1c6>
 800051e:	4b1d      	ldr	r3, [pc, #116]	; (8000594 <main+0x234>)
 8000520:	f241 726f 	movw	r2, #5999	; 0x176f
 8000524:	801a      	strh	r2, [r3, #0]
      if(PWM<=2){PWM=2;}
 8000526:	4b1b      	ldr	r3, [pc, #108]	; (8000594 <main+0x234>)
 8000528:	881b      	ldrh	r3, [r3, #0]
 800052a:	2b02      	cmp	r3, #2
 800052c:	d802      	bhi.n	8000534 <main+0x1d4>
 800052e:	4b19      	ldr	r3, [pc, #100]	; (8000594 <main+0x234>)
 8000530:	2202      	movs	r2, #2
 8000532:	801a      	strh	r2, [r3, #0]
      TIM1->CCR1=PWM;
 8000534:	4b17      	ldr	r3, [pc, #92]	; (8000594 <main+0x234>)
 8000536:	881a      	ldrh	r2, [r3, #0]
 8000538:	4b1b      	ldr	r3, [pc, #108]	; (80005a8 <main+0x248>)
 800053a:	635a      	str	r2, [r3, #52]	; 0x34
      TIM1->CCR2=6000-PWM;
 800053c:	4b15      	ldr	r3, [pc, #84]	; (8000594 <main+0x234>)
 800053e:	881b      	ldrh	r3, [r3, #0]
 8000540:	f5c3 53bb 	rsb	r3, r3, #5984	; 0x1760
 8000544:	3310      	adds	r3, #16
 8000546:	4a18      	ldr	r2, [pc, #96]	; (80005a8 <main+0x248>)
 8000548:	6393      	str	r3, [r2, #56]	; 0x38
	     HAL_ADC_Start(&hadc1);
 800054a:	4818      	ldr	r0, [pc, #96]	; (80005ac <main+0x24c>)
 800054c:	f001 fdc8 	bl	80020e0 <HAL_ADC_Start>
	  	 HAL_ADC_PollForConversion(&hadc1, 50);
 8000550:	2132      	movs	r1, #50	; 0x32
 8000552:	4816      	ldr	r0, [pc, #88]	; (80005ac <main+0x24c>)
 8000554:	f001 ff10 	bl	8002378 <HAL_ADC_PollForConversion>
	  	 current[3]=HAL_ADC_GetValue(&hadc1);
 8000558:	4814      	ldr	r0, [pc, #80]	; (80005ac <main+0x24c>)
 800055a:	f002 f98d 	bl	8002878 <HAL_ADC_GetValue>
 800055e:	4603      	mov	r3, r0
 8000560:	b29a      	uxth	r2, r3
 8000562:	4b0b      	ldr	r3, [pc, #44]	; (8000590 <main+0x230>)
 8000564:	80da      	strh	r2, [r3, #6]
	  	 HAL_ADC_Stop(&hadc1);
 8000566:	4811      	ldr	r0, [pc, #68]	; (80005ac <main+0x24c>)
 8000568:	f001 fed0 	bl	800230c <HAL_ADC_Stop>

	  ADC_read_1();
 800056c:	f7ff feb8 	bl	80002e0 <ADC_read_1>
	  ADC_read_12();
 8000570:	f7ff fed6 	bl	8000320 <ADC_read_12>
	  sprintf(str, "\n\r Crnt_1-%04d, Crnt_2-%04d, Crnt_3-%04d, Crnt_4-%04d, Hall_1-%04d,Hall_2-%04d,Hall_3-%04d,Hall_4-%04d,PWM-%04d\n\r",current[0],current[1],current[2],current[3],hall_sens[0],hall_sens[1],hall_sens[2],hall_sens[3],PWM);
 8000574:	e756      	b.n	8000424 <main+0xc4>
 8000576:	bf00      	nop
 8000578:	200000dc 	.word	0x200000dc
 800057c:	20000574 	.word	0x20000574
 8000580:	20000234 	.word	0x20000234
 8000584:	200002cc 	.word	0x200002cc
 8000588:	20000318 	.word	0x20000318
 800058c:	48000400 	.word	0x48000400
 8000590:	2000056c 	.word	0x2000056c
 8000594:	2000057c 	.word	0x2000057c
 8000598:	080092b4 	.word	0x080092b4
 800059c:	200004fc 	.word	0x200004fc
 80005a0:	2000057e 	.word	0x2000057e
 80005a4:	200003ec 	.word	0x200003ec
 80005a8:	40012c00 	.word	0x40012c00
 80005ac:	2000008c 	.word	0x2000008c

080005b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b09e      	sub	sp, #120	; 0x78
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80005ba:	2228      	movs	r2, #40	; 0x28
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f008 f9f6 	bl	80089b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005d4:	463b      	mov	r3, r7
 80005d6:	223c      	movs	r2, #60	; 0x3c
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f008 f9e8 	bl	80089b0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80005e0:	230a      	movs	r3, #10
 80005e2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e4:	2301      	movs	r3, #1
 80005e6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e8:	2310      	movs	r3, #16
 80005ea:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005ec:	2301      	movs	r3, #1
 80005ee:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f0:	2302      	movs	r3, #2
 80005f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005f4:	2300      	movs	r3, #0
 80005f6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80005f8:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80005fc:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000602:	4618      	mov	r0, r3
 8000604:	f003 fd70 	bl	80040e8 <HAL_RCC_OscConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800060e:	f000 fe3d 	bl	800128c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000612:	230f      	movs	r3, #15
 8000614:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000616:	2302      	movs	r3, #2
 8000618:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061a:	2300      	movs	r3, #0
 800061c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800061e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000622:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000628:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800062c:	2102      	movs	r1, #2
 800062e:	4618      	mov	r0, r3
 8000630:	f004 fd98 	bl	8005164 <HAL_RCC_ClockConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800063a:	f000 fe27 	bl	800128c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800063e:	4b11      	ldr	r3, [pc, #68]	; (8000684 <SystemClock_Config+0xd4>)
 8000640:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM8
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000642:	2300      	movs	r3, #0
 8000644:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000646:	2300      	movs	r3, #0
 8000648:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800064a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800064e:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8000650:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000654:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000656:	2300      	movs	r3, #0
 8000658:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800065a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800065e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000660:	2300      	movs	r3, #0
 8000662:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 8000664:	2300      	movs	r3, #0
 8000666:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000668:	463b      	mov	r3, r7
 800066a:	4618      	mov	r0, r3
 800066c:	f004 ffb0 	bl	80055d0 <HAL_RCCEx_PeriphCLKConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000676:	f000 fe09 	bl	800128c <Error_Handler>
  }
}
 800067a:	bf00      	nop
 800067c:	3778      	adds	r7, #120	; 0x78
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	000131a3 	.word	0x000131a3

08000688 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08a      	sub	sp, #40	; 0x28
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800068e:	f107 031c 	add.w	r3, r7, #28
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
 80006a8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006aa:	4b2e      	ldr	r3, [pc, #184]	; (8000764 <MX_ADC1_Init+0xdc>)
 80006ac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80006b0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006b2:	4b2c      	ldr	r3, [pc, #176]	; (8000764 <MX_ADC1_Init+0xdc>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006b8:	4b2a      	ldr	r3, [pc, #168]	; (8000764 <MX_ADC1_Init+0xdc>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006be:	4b29      	ldr	r3, [pc, #164]	; (8000764 <MX_ADC1_Init+0xdc>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006c4:	4b27      	ldr	r3, [pc, #156]	; (8000764 <MX_ADC1_Init+0xdc>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ca:	4b26      	ldr	r3, [pc, #152]	; (8000764 <MX_ADC1_Init+0xdc>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006d2:	4b24      	ldr	r3, [pc, #144]	; (8000764 <MX_ADC1_Init+0xdc>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006d8:	4b22      	ldr	r3, [pc, #136]	; (8000764 <MX_ADC1_Init+0xdc>)
 80006da:	2201      	movs	r2, #1
 80006dc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006de:	4b21      	ldr	r3, [pc, #132]	; (8000764 <MX_ADC1_Init+0xdc>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006e4:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <MX_ADC1_Init+0xdc>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006ea:	4b1e      	ldr	r3, [pc, #120]	; (8000764 <MX_ADC1_Init+0xdc>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006f2:	4b1c      	ldr	r3, [pc, #112]	; (8000764 <MX_ADC1_Init+0xdc>)
 80006f4:	2204      	movs	r2, #4
 80006f6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006f8:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <MX_ADC1_Init+0xdc>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80006fe:	4b19      	ldr	r3, [pc, #100]	; (8000764 <MX_ADC1_Init+0xdc>)
 8000700:	2200      	movs	r2, #0
 8000702:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000704:	4817      	ldr	r0, [pc, #92]	; (8000764 <MX_ADC1_Init+0xdc>)
 8000706:	f001 fb0b 	bl	8001d20 <HAL_ADC_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000710:	f000 fdbc 	bl	800128c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000714:	2300      	movs	r3, #0
 8000716:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000718:	f107 031c 	add.w	r3, r7, #28
 800071c:	4619      	mov	r1, r3
 800071e:	4811      	ldr	r0, [pc, #68]	; (8000764 <MX_ADC1_Init+0xdc>)
 8000720:	f002 fc16 	bl	8002f50 <HAL_ADCEx_MultiModeConfigChannel>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800072a:	f000 fdaf 	bl	800128c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800072e:	2304      	movs	r3, #4
 8000730:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000732:	2301      	movs	r3, #1
 8000734:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800073a:	2303      	movs	r3, #3
 800073c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800073e:	2300      	movs	r3, #0
 8000740:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000742:	2300      	movs	r3, #0
 8000744:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	4619      	mov	r1, r3
 800074a:	4806      	ldr	r0, [pc, #24]	; (8000764 <MX_ADC1_Init+0xdc>)
 800074c:	f002 f914 	bl	8002978 <HAL_ADC_ConfigChannel>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000756:	f000 fd99 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	3728      	adds	r7, #40	; 0x28
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	2000008c 	.word	0x2000008c

08000768 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b086      	sub	sp, #24
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800076e:	463b      	mov	r3, r7
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]
 800077c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800077e:	4b44      	ldr	r3, [pc, #272]	; (8000890 <MX_ADC2_Init+0x128>)
 8000780:	4a44      	ldr	r2, [pc, #272]	; (8000894 <MX_ADC2_Init+0x12c>)
 8000782:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000784:	4b42      	ldr	r3, [pc, #264]	; (8000890 <MX_ADC2_Init+0x128>)
 8000786:	2200      	movs	r2, #0
 8000788:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800078a:	4b41      	ldr	r3, [pc, #260]	; (8000890 <MX_ADC2_Init+0x128>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000790:	4b3f      	ldr	r3, [pc, #252]	; (8000890 <MX_ADC2_Init+0x128>)
 8000792:	2201      	movs	r2, #1
 8000794:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000796:	4b3e      	ldr	r3, [pc, #248]	; (8000890 <MX_ADC2_Init+0x128>)
 8000798:	2201      	movs	r2, #1
 800079a:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800079c:	4b3c      	ldr	r3, [pc, #240]	; (8000890 <MX_ADC2_Init+0x128>)
 800079e:	2200      	movs	r2, #0
 80007a0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007a4:	4b3a      	ldr	r3, [pc, #232]	; (8000890 <MX_ADC2_Init+0x128>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007aa:	4b39      	ldr	r3, [pc, #228]	; (8000890 <MX_ADC2_Init+0x128>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007b0:	4b37      	ldr	r3, [pc, #220]	; (8000890 <MX_ADC2_Init+0x128>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 5;
 80007b6:	4b36      	ldr	r3, [pc, #216]	; (8000890 <MX_ADC2_Init+0x128>)
 80007b8:	2205      	movs	r2, #5
 80007ba:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80007bc:	4b34      	ldr	r3, [pc, #208]	; (8000890 <MX_ADC2_Init+0x128>)
 80007be:	2200      	movs	r2, #0
 80007c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007c4:	4b32      	ldr	r3, [pc, #200]	; (8000890 <MX_ADC2_Init+0x128>)
 80007c6:	2204      	movs	r2, #4
 80007c8:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80007ca:	4b31      	ldr	r3, [pc, #196]	; (8000890 <MX_ADC2_Init+0x128>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80007d0:	4b2f      	ldr	r3, [pc, #188]	; (8000890 <MX_ADC2_Init+0x128>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80007d6:	482e      	ldr	r0, [pc, #184]	; (8000890 <MX_ADC2_Init+0x128>)
 80007d8:	f001 faa2 	bl	8001d20 <HAL_ADC_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 80007e2:	f000 fd53 	bl	800128c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007e6:	2301      	movs	r3, #1
 80007e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007ea:	2301      	movs	r3, #1
 80007ec:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 80007f2:	2305      	movs	r3, #5
 80007f4:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007f6:	2300      	movs	r3, #0
 80007f8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007fe:	463b      	mov	r3, r7
 8000800:	4619      	mov	r1, r3
 8000802:	4823      	ldr	r0, [pc, #140]	; (8000890 <MX_ADC2_Init+0x128>)
 8000804:	f002 f8b8 	bl	8002978 <HAL_ADC_ConfigChannel>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 800080e:	f000 fd3d 	bl	800128c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000812:	2302      	movs	r3, #2
 8000814:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000816:	2302      	movs	r3, #2
 8000818:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800081a:	463b      	mov	r3, r7
 800081c:	4619      	mov	r1, r3
 800081e:	481c      	ldr	r0, [pc, #112]	; (8000890 <MX_ADC2_Init+0x128>)
 8000820:	f002 f8aa 	bl	8002978 <HAL_ADC_ConfigChannel>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_ADC2_Init+0xc6>
  {
    Error_Handler();
 800082a:	f000 fd2f 	bl	800128c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800082e:	2303      	movs	r3, #3
 8000830:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000832:	2303      	movs	r3, #3
 8000834:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000836:	463b      	mov	r3, r7
 8000838:	4619      	mov	r1, r3
 800083a:	4815      	ldr	r0, [pc, #84]	; (8000890 <MX_ADC2_Init+0x128>)
 800083c:	f002 f89c 	bl	8002978 <HAL_ADC_ConfigChannel>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_ADC2_Init+0xe2>
  {
    Error_Handler();
 8000846:	f000 fd21 	bl	800128c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800084a:	2304      	movs	r3, #4
 800084c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800084e:	2304      	movs	r3, #4
 8000850:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000852:	463b      	mov	r3, r7
 8000854:	4619      	mov	r1, r3
 8000856:	480e      	ldr	r0, [pc, #56]	; (8000890 <MX_ADC2_Init+0x128>)
 8000858:	f002 f88e 	bl	8002978 <HAL_ADC_ConfigChannel>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_ADC2_Init+0xfe>
  {
    Error_Handler();
 8000862:	f000 fd13 	bl	800128c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000866:	230c      	movs	r3, #12
 8000868:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800086a:	2305      	movs	r3, #5
 800086c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 800086e:	2304      	movs	r3, #4
 8000870:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000872:	463b      	mov	r3, r7
 8000874:	4619      	mov	r1, r3
 8000876:	4806      	ldr	r0, [pc, #24]	; (8000890 <MX_ADC2_Init+0x128>)
 8000878:	f002 f87e 	bl	8002978 <HAL_ADC_ConfigChannel>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_ADC2_Init+0x11e>
  {
    Error_Handler();
 8000882:	f000 fd03 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	3718      	adds	r7, #24
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	200000dc 	.word	0x200000dc
 8000894:	50000100 	.word	0x50000100

08000898 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08a      	sub	sp, #40	; 0x28
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
 80008b8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80008ba:	4b2d      	ldr	r3, [pc, #180]	; (8000970 <MX_ADC3_Init+0xd8>)
 80008bc:	4a2d      	ldr	r2, [pc, #180]	; (8000974 <MX_ADC3_Init+0xdc>)
 80008be:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008c0:	4b2b      	ldr	r3, [pc, #172]	; (8000970 <MX_ADC3_Init+0xd8>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80008c6:	4b2a      	ldr	r3, [pc, #168]	; (8000970 <MX_ADC3_Init+0xd8>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008cc:	4b28      	ldr	r3, [pc, #160]	; (8000970 <MX_ADC3_Init+0xd8>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80008d2:	4b27      	ldr	r3, [pc, #156]	; (8000970 <MX_ADC3_Init+0xd8>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80008d8:	4b25      	ldr	r3, [pc, #148]	; (8000970 <MX_ADC3_Init+0xd8>)
 80008da:	2200      	movs	r2, #0
 80008dc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008e0:	4b23      	ldr	r3, [pc, #140]	; (8000970 <MX_ADC3_Init+0xd8>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008e6:	4b22      	ldr	r3, [pc, #136]	; (8000970 <MX_ADC3_Init+0xd8>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008ec:	4b20      	ldr	r3, [pc, #128]	; (8000970 <MX_ADC3_Init+0xd8>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80008f2:	4b1f      	ldr	r3, [pc, #124]	; (8000970 <MX_ADC3_Init+0xd8>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80008f8:	4b1d      	ldr	r3, [pc, #116]	; (8000970 <MX_ADC3_Init+0xd8>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000900:	4b1b      	ldr	r3, [pc, #108]	; (8000970 <MX_ADC3_Init+0xd8>)
 8000902:	2204      	movs	r2, #4
 8000904:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000906:	4b1a      	ldr	r3, [pc, #104]	; (8000970 <MX_ADC3_Init+0xd8>)
 8000908:	2200      	movs	r2, #0
 800090a:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800090c:	4b18      	ldr	r3, [pc, #96]	; (8000970 <MX_ADC3_Init+0xd8>)
 800090e:	2200      	movs	r2, #0
 8000910:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000912:	4817      	ldr	r0, [pc, #92]	; (8000970 <MX_ADC3_Init+0xd8>)
 8000914:	f001 fa04 	bl	8001d20 <HAL_ADC_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 800091e:	f000 fcb5 	bl	800128c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000922:	2300      	movs	r3, #0
 8000924:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	4619      	mov	r1, r3
 800092c:	4810      	ldr	r0, [pc, #64]	; (8000970 <MX_ADC3_Init+0xd8>)
 800092e:	f002 fb0f 	bl	8002f50 <HAL_ADCEx_MultiModeConfigChannel>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 8000938:	f000 fca8 	bl	800128c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800093c:	2301      	movs	r3, #1
 800093e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000940:	2301      	movs	r3, #1
 8000942:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000944:	2300      	movs	r3, #0
 8000946:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8000948:	2303      	movs	r3, #3
 800094a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800094c:	2300      	movs	r3, #0
 800094e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000950:	2300      	movs	r3, #0
 8000952:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	4619      	mov	r1, r3
 8000958:	4805      	ldr	r0, [pc, #20]	; (8000970 <MX_ADC3_Init+0xd8>)
 800095a:	f002 f80d 	bl	8002978 <HAL_ADC_ConfigChannel>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8000964:	f000 fc92 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000968:	bf00      	nop
 800096a:	3728      	adds	r7, #40	; 0x28
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	2000012c 	.word	0x2000012c
 8000974:	50000400 	.word	0x50000400

08000978 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800097c:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <MX_I2C1_Init+0x74>)
 800097e:	4a1c      	ldr	r2, [pc, #112]	; (80009f0 <MX_I2C1_Init+0x78>)
 8000980:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000982:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <MX_I2C1_Init+0x74>)
 8000984:	4a1b      	ldr	r2, [pc, #108]	; (80009f4 <MX_I2C1_Init+0x7c>)
 8000986:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000988:	4b18      	ldr	r3, [pc, #96]	; (80009ec <MX_I2C1_Init+0x74>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800098e:	4b17      	ldr	r3, [pc, #92]	; (80009ec <MX_I2C1_Init+0x74>)
 8000990:	2201      	movs	r2, #1
 8000992:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000994:	4b15      	ldr	r3, [pc, #84]	; (80009ec <MX_I2C1_Init+0x74>)
 8000996:	2200      	movs	r2, #0
 8000998:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800099a:	4b14      	ldr	r3, [pc, #80]	; (80009ec <MX_I2C1_Init+0x74>)
 800099c:	2200      	movs	r2, #0
 800099e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009a0:	4b12      	ldr	r3, [pc, #72]	; (80009ec <MX_I2C1_Init+0x74>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009a6:	4b11      	ldr	r3, [pc, #68]	; (80009ec <MX_I2C1_Init+0x74>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009ac:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <MX_I2C1_Init+0x74>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009b2:	480e      	ldr	r0, [pc, #56]	; (80009ec <MX_I2C1_Init+0x74>)
 80009b4:	f003 fa72 	bl	8003e9c <HAL_I2C_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009be:	f000 fc65 	bl	800128c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009c2:	2100      	movs	r1, #0
 80009c4:	4809      	ldr	r0, [pc, #36]	; (80009ec <MX_I2C1_Init+0x74>)
 80009c6:	f003 faf8 	bl	8003fba <HAL_I2CEx_ConfigAnalogFilter>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009d0:	f000 fc5c 	bl	800128c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009d4:	2100      	movs	r1, #0
 80009d6:	4805      	ldr	r0, [pc, #20]	; (80009ec <MX_I2C1_Init+0x74>)
 80009d8:	f003 fb3a 	bl	8004050 <HAL_I2CEx_ConfigDigitalFilter>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009e2:	f000 fc53 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	200001c0 	.word	0x200001c0
 80009f0:	40005400 	.word	0x40005400
 80009f4:	2000090e 	.word	0x2000090e

080009f8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a10:	4b24      	ldr	r3, [pc, #144]	; (8000aa4 <MX_RTC_Init+0xac>)
 8000a12:	4a25      	ldr	r2, [pc, #148]	; (8000aa8 <MX_RTC_Init+0xb0>)
 8000a14:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a16:	4b23      	ldr	r3, [pc, #140]	; (8000aa4 <MX_RTC_Init+0xac>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a1c:	4b21      	ldr	r3, [pc, #132]	; (8000aa4 <MX_RTC_Init+0xac>)
 8000a1e:	227f      	movs	r2, #127	; 0x7f
 8000a20:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a22:	4b20      	ldr	r3, [pc, #128]	; (8000aa4 <MX_RTC_Init+0xac>)
 8000a24:	22ff      	movs	r2, #255	; 0xff
 8000a26:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a28:	4b1e      	ldr	r3, [pc, #120]	; (8000aa4 <MX_RTC_Init+0xac>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a2e:	4b1d      	ldr	r3, [pc, #116]	; (8000aa4 <MX_RTC_Init+0xac>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a34:	4b1b      	ldr	r3, [pc, #108]	; (8000aa4 <MX_RTC_Init+0xac>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a3a:	481a      	ldr	r0, [pc, #104]	; (8000aa4 <MX_RTC_Init+0xac>)
 8000a3c:	f004 ff78 	bl	8005930 <HAL_RTC_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000a46:	f000 fc21 	bl	800128c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a56:	2300      	movs	r3, #0
 8000a58:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	2201      	movs	r2, #1
 8000a62:	4619      	mov	r1, r3
 8000a64:	480f      	ldr	r0, [pc, #60]	; (8000aa4 <MX_RTC_Init+0xac>)
 8000a66:	f004 ffe6 	bl	8005a36 <HAL_RTC_SetTime>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000a70:	f000 fc0c 	bl	800128c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000a74:	2301      	movs	r3, #1
 8000a76:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JUNE;
 8000a78:	2306      	movs	r3, #6
 8000a7a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000a84:	463b      	mov	r3, r7
 8000a86:	2201      	movs	r2, #1
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4806      	ldr	r0, [pc, #24]	; (8000aa4 <MX_RTC_Init+0xac>)
 8000a8c:	f005 f86d 	bl	8005b6a <HAL_RTC_SetDate>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000a96:	f000 fbf9 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a9a:	bf00      	nop
 8000a9c:	3718      	adds	r7, #24
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20000214 	.word	0x20000214
 8000aa8:	40002800 	.word	0x40002800

08000aac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b09a      	sub	sp, #104	; 0x68
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ab2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000acc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
 8000adc:	615a      	str	r2, [r3, #20]
 8000ade:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	222c      	movs	r2, #44	; 0x2c
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f007 ff62 	bl	80089b0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000aec:	4b4a      	ldr	r3, [pc, #296]	; (8000c18 <MX_TIM1_Init+0x16c>)
 8000aee:	4a4b      	ldr	r2, [pc, #300]	; (8000c1c <MX_TIM1_Init+0x170>)
 8000af0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000af2:	4b49      	ldr	r3, [pc, #292]	; (8000c18 <MX_TIM1_Init+0x16c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af8:	4b47      	ldr	r3, [pc, #284]	; (8000c18 <MX_TIM1_Init+0x16c>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 6000;
 8000afe:	4b46      	ldr	r3, [pc, #280]	; (8000c18 <MX_TIM1_Init+0x16c>)
 8000b00:	f241 7270 	movw	r2, #6000	; 0x1770
 8000b04:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b06:	4b44      	ldr	r3, [pc, #272]	; (8000c18 <MX_TIM1_Init+0x16c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b0c:	4b42      	ldr	r3, [pc, #264]	; (8000c18 <MX_TIM1_Init+0x16c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b12:	4b41      	ldr	r3, [pc, #260]	; (8000c18 <MX_TIM1_Init+0x16c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b18:	483f      	ldr	r0, [pc, #252]	; (8000c18 <MX_TIM1_Init+0x16c>)
 8000b1a:	f005 f94b 	bl	8005db4 <HAL_TIM_Base_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000b24:	f000 fbb2 	bl	800128c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b2c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b2e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000b32:	4619      	mov	r1, r3
 8000b34:	4838      	ldr	r0, [pc, #224]	; (8000c18 <MX_TIM1_Init+0x16c>)
 8000b36:	f005 fe1b 	bl	8006770 <HAL_TIM_ConfigClockSource>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000b40:	f000 fba4 	bl	800128c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b44:	4834      	ldr	r0, [pc, #208]	; (8000c18 <MX_TIM1_Init+0x16c>)
 8000b46:	f005 f98c 	bl	8005e62 <HAL_TIM_PWM_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000b50:	f000 fb9c 	bl	800128c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b54:	2300      	movs	r3, #0
 8000b56:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b60:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b64:	4619      	mov	r1, r3
 8000b66:	482c      	ldr	r0, [pc, #176]	; (8000c18 <MX_TIM1_Init+0x16c>)
 8000b68:	f006 fcf6 	bl	8007558 <HAL_TIMEx_MasterConfigSynchronization>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000b72:	f000 fb8b 	bl	800128c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b76:	2360      	movs	r3, #96	; 0x60
 8000b78:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 3000;
 8000b7a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000b7e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b80:	2300      	movs	r3, #0
 8000b82:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b84:	2300      	movs	r3, #0
 8000b86:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b90:	2300      	movs	r3, #0
 8000b92:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b98:	2200      	movs	r2, #0
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	481e      	ldr	r0, [pc, #120]	; (8000c18 <MX_TIM1_Init+0x16c>)
 8000b9e:	f005 fcd3 	bl	8006548 <HAL_TIM_PWM_ConfigChannel>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000ba8:	f000 fb70 	bl	800128c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bb0:	2204      	movs	r2, #4
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4818      	ldr	r0, [pc, #96]	; (8000c18 <MX_TIM1_Init+0x16c>)
 8000bb6:	f005 fcc7 	bl	8006548 <HAL_TIM_PWM_ConfigChannel>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8000bc0:	f000 fb64 	bl	800128c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bdc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000be2:	2300      	movs	r3, #0
 8000be4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000be6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bf4:	1d3b      	adds	r3, r7, #4
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4807      	ldr	r0, [pc, #28]	; (8000c18 <MX_TIM1_Init+0x16c>)
 8000bfa:	f006 fd2d 	bl	8007658 <HAL_TIMEx_ConfigBreakDeadTime>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 8000c04:	f000 fb42 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c08:	4803      	ldr	r0, [pc, #12]	; (8000c18 <MX_TIM1_Init+0x16c>)
 8000c0a:	f000 fd67 	bl	80016dc <HAL_TIM_MspPostInit>

}
 8000c0e:	bf00      	nop
 8000c10:	3768      	adds	r7, #104	; 0x68
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000234 	.word	0x20000234
 8000c1c:	40012c00 	.word	0x40012c00

08000c20 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b088      	sub	sp, #32
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000c32:	1d3b      	adds	r3, r7, #4
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c3e:	4b27      	ldr	r3, [pc, #156]	; (8000cdc <MX_TIM2_Init+0xbc>)
 8000c40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c44:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c46:	4b25      	ldr	r3, [pc, #148]	; (8000cdc <MX_TIM2_Init+0xbc>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c4c:	4b23      	ldr	r3, [pc, #140]	; (8000cdc <MX_TIM2_Init+0xbc>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000c52:	4b22      	ldr	r3, [pc, #136]	; (8000cdc <MX_TIM2_Init+0xbc>)
 8000c54:	f04f 32ff 	mov.w	r2, #4294967295
 8000c58:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c5a:	4b20      	ldr	r3, [pc, #128]	; (8000cdc <MX_TIM2_Init+0xbc>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c60:	4b1e      	ldr	r3, [pc, #120]	; (8000cdc <MX_TIM2_Init+0xbc>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000c66:	481d      	ldr	r0, [pc, #116]	; (8000cdc <MX_TIM2_Init+0xbc>)
 8000c68:	f005 fa5c 	bl	8006124 <HAL_TIM_IC_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000c72:	f000 fb0b 	bl	800128c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c76:	2300      	movs	r3, #0
 8000c78:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c7e:	f107 0314 	add.w	r3, r7, #20
 8000c82:	4619      	mov	r1, r3
 8000c84:	4815      	ldr	r0, [pc, #84]	; (8000cdc <MX_TIM2_Init+0xbc>)
 8000c86:	f006 fc67 	bl	8007558 <HAL_TIMEx_MasterConfigSynchronization>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000c90:	f000 fafc 	bl	800128c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c94:	2300      	movs	r3, #0
 8000c96:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000ca4:	1d3b      	adds	r3, r7, #4
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	4619      	mov	r1, r3
 8000caa:	480c      	ldr	r0, [pc, #48]	; (8000cdc <MX_TIM2_Init+0xbc>)
 8000cac:	f005 fbb0 	bl	8006410 <HAL_TIM_IC_ConfigChannel>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000cb6:	f000 fae9 	bl	800128c <Error_Handler>
  }
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000cbe:	1d3b      	adds	r3, r7, #4
 8000cc0:	2204      	movs	r2, #4
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4805      	ldr	r0, [pc, #20]	; (8000cdc <MX_TIM2_Init+0xbc>)
 8000cc6:	f005 fba3 	bl	8006410 <HAL_TIM_IC_ConfigChannel>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000cd0:	f000 fadc 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cd4:	bf00      	nop
 8000cd6:	3720      	adds	r7, #32
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000280 	.word	0x20000280

08000ce0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b09a      	sub	sp, #104	; 0x68
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ce6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	609a      	str	r2, [r3, #8]
 8000cf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
 8000d10:	615a      	str	r2, [r3, #20]
 8000d12:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	222c      	movs	r2, #44	; 0x2c
 8000d18:	2100      	movs	r1, #0
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f007 fe48 	bl	80089b0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000d20:	4b44      	ldr	r3, [pc, #272]	; (8000e34 <MX_TIM8_Init+0x154>)
 8000d22:	4a45      	ldr	r2, [pc, #276]	; (8000e38 <MX_TIM8_Init+0x158>)
 8000d24:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000d26:	4b43      	ldr	r3, [pc, #268]	; (8000e34 <MX_TIM8_Init+0x154>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d2c:	4b41      	ldr	r3, [pc, #260]	; (8000e34 <MX_TIM8_Init+0x154>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 6000;
 8000d32:	4b40      	ldr	r3, [pc, #256]	; (8000e34 <MX_TIM8_Init+0x154>)
 8000d34:	f241 7270 	movw	r2, #6000	; 0x1770
 8000d38:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d3a:	4b3e      	ldr	r3, [pc, #248]	; (8000e34 <MX_TIM8_Init+0x154>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000d40:	4b3c      	ldr	r3, [pc, #240]	; (8000e34 <MX_TIM8_Init+0x154>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d46:	4b3b      	ldr	r3, [pc, #236]	; (8000e34 <MX_TIM8_Init+0x154>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000d4c:	4839      	ldr	r0, [pc, #228]	; (8000e34 <MX_TIM8_Init+0x154>)
 8000d4e:	f005 f831 	bl	8005db4 <HAL_TIM_Base_Init>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8000d58:	f000 fa98 	bl	800128c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d60:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000d62:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d66:	4619      	mov	r1, r3
 8000d68:	4832      	ldr	r0, [pc, #200]	; (8000e34 <MX_TIM8_Init+0x154>)
 8000d6a:	f005 fd01 	bl	8006770 <HAL_TIM_ConfigClockSource>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8000d74:	f000 fa8a 	bl	800128c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000d78:	482e      	ldr	r0, [pc, #184]	; (8000e34 <MX_TIM8_Init+0x154>)
 8000d7a:	f005 f872 	bl	8005e62 <HAL_TIM_PWM_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8000d84:	f000 fa82 	bl	800128c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d90:	2300      	movs	r3, #0
 8000d92:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000d94:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4826      	ldr	r0, [pc, #152]	; (8000e34 <MX_TIM8_Init+0x154>)
 8000d9c:	f006 fbdc 	bl	8007558 <HAL_TIMEx_MasterConfigSynchronization>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8000da6:	f000 fa71 	bl	800128c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000daa:	2360      	movs	r3, #96	; 0x60
 8000dac:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 3000;
 8000dae:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000db2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000db4:	2300      	movs	r3, #0
 8000db6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000db8:	2300      	movs	r3, #0
 8000dba:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dc8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4818      	ldr	r0, [pc, #96]	; (8000e34 <MX_TIM8_Init+0x154>)
 8000dd2:	f005 fbb9 	bl	8006548 <HAL_TIM_PWM_ConfigChannel>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8000ddc:	f000 fa56 	bl	800128c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000de0:	2300      	movs	r3, #0
 8000de2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000de4:	2300      	movs	r3, #0
 8000de6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000de8:	2300      	movs	r3, #0
 8000dea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000df4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000df8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e06:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000e10:	1d3b      	adds	r3, r7, #4
 8000e12:	4619      	mov	r1, r3
 8000e14:	4807      	ldr	r0, [pc, #28]	; (8000e34 <MX_TIM8_Init+0x154>)
 8000e16:	f006 fc1f 	bl	8007658 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_TIM8_Init+0x144>
  {
    Error_Handler();
 8000e20:	f000 fa34 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000e24:	4803      	ldr	r0, [pc, #12]	; (8000e34 <MX_TIM8_Init+0x154>)
 8000e26:	f000 fc59 	bl	80016dc <HAL_TIM_MspPostInit>

}
 8000e2a:	bf00      	nop
 8000e2c:	3768      	adds	r7, #104	; 0x68
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	200002cc 	.word	0x200002cc
 8000e38:	40013400 	.word	0x40013400

08000e3c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b09a      	sub	sp, #104	; 0x68
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e42:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e50:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e5c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]
 8000e6c:	615a      	str	r2, [r3, #20]
 8000e6e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e70:	1d3b      	adds	r3, r7, #4
 8000e72:	222c      	movs	r2, #44	; 0x2c
 8000e74:	2100      	movs	r1, #0
 8000e76:	4618      	mov	r0, r3
 8000e78:	f007 fd9a 	bl	80089b0 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000e7c:	4b3f      	ldr	r3, [pc, #252]	; (8000f7c <MX_TIM15_Init+0x140>)
 8000e7e:	4a40      	ldr	r2, [pc, #256]	; (8000f80 <MX_TIM15_Init+0x144>)
 8000e80:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000e82:	4b3e      	ldr	r3, [pc, #248]	; (8000f7c <MX_TIM15_Init+0x140>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e88:	4b3c      	ldr	r3, [pc, #240]	; (8000f7c <MX_TIM15_Init+0x140>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 6000;
 8000e8e:	4b3b      	ldr	r3, [pc, #236]	; (8000f7c <MX_TIM15_Init+0x140>)
 8000e90:	f241 7270 	movw	r2, #6000	; 0x1770
 8000e94:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e96:	4b39      	ldr	r3, [pc, #228]	; (8000f7c <MX_TIM15_Init+0x140>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000e9c:	4b37      	ldr	r3, [pc, #220]	; (8000f7c <MX_TIM15_Init+0x140>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea2:	4b36      	ldr	r3, [pc, #216]	; (8000f7c <MX_TIM15_Init+0x140>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000ea8:	4834      	ldr	r0, [pc, #208]	; (8000f7c <MX_TIM15_Init+0x140>)
 8000eaa:	f004 ff83 	bl	8005db4 <HAL_TIM_Base_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8000eb4:	f000 f9ea 	bl	800128c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ebc:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000ebe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	482d      	ldr	r0, [pc, #180]	; (8000f7c <MX_TIM15_Init+0x140>)
 8000ec6:	f005 fc53 	bl	8006770 <HAL_TIM_ConfigClockSource>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8000ed0:	f000 f9dc 	bl	800128c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000ed4:	4829      	ldr	r0, [pc, #164]	; (8000f7c <MX_TIM15_Init+0x140>)
 8000ed6:	f004 ffc4 	bl	8005e62 <HAL_TIM_PWM_Init>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8000ee0:	f000 f9d4 	bl	800128c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000eec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4822      	ldr	r0, [pc, #136]	; (8000f7c <MX_TIM15_Init+0x140>)
 8000ef4:	f006 fb30 	bl	8007558 <HAL_TIMEx_MasterConfigSynchronization>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8000efe:	f000 f9c5 	bl	800128c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f02:	2360      	movs	r3, #96	; 0x60
 8000f04:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 3000;
 8000f06:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000f0a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f10:	2300      	movs	r3, #0
 8000f12:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f14:	2300      	movs	r3, #0
 8000f16:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f20:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f24:	2200      	movs	r2, #0
 8000f26:	4619      	mov	r1, r3
 8000f28:	4814      	ldr	r0, [pc, #80]	; (8000f7c <MX_TIM15_Init+0x140>)
 8000f2a:	f005 fb0d 	bl	8006548 <HAL_TIM_PWM_ConfigChannel>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8000f34:	f000 f9aa 	bl	800128c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f40:	2300      	movs	r3, #0
 8000f42:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f44:	2300      	movs	r3, #0
 8000f46:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f50:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f56:	2300      	movs	r3, #0
 8000f58:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4807      	ldr	r0, [pc, #28]	; (8000f7c <MX_TIM15_Init+0x140>)
 8000f60:	f006 fb7a 	bl	8007658 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8000f6a:	f000 f98f 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000f6e:	4803      	ldr	r0, [pc, #12]	; (8000f7c <MX_TIM15_Init+0x140>)
 8000f70:	f000 fbb4 	bl	80016dc <HAL_TIM_MspPostInit>

}
 8000f74:	bf00      	nop
 8000f76:	3768      	adds	r7, #104	; 0x68
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000318 	.word	0x20000318
 8000f80:	40014000 	.word	0x40014000

08000f84 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f88:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <MX_USART1_UART_Init+0x58>)
 8000f8a:	4a15      	ldr	r2, [pc, #84]	; (8000fe0 <MX_USART1_UART_Init+0x5c>)
 8000f8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000f8e:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <MX_USART1_UART_Init+0x58>)
 8000f90:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f96:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <MX_USART1_UART_Init+0x58>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <MX_USART1_UART_Init+0x58>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <MX_USART1_UART_Init+0x58>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <MX_USART1_UART_Init+0x58>)
 8000faa:	220c      	movs	r2, #12
 8000fac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fae:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <MX_USART1_UART_Init+0x58>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb4:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <MX_USART1_UART_Init+0x58>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fba:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <MX_USART1_UART_Init+0x58>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <MX_USART1_UART_Init+0x58>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fc6:	4805      	ldr	r0, [pc, #20]	; (8000fdc <MX_USART1_UART_Init+0x58>)
 8000fc8:	f006 fc07 	bl	80077da <HAL_UART_Init>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000fd2:	f000 f95b 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000364 	.word	0x20000364
 8000fe0:	40013800 	.word	0x40013800

08000fe4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fe8:	4b14      	ldr	r3, [pc, #80]	; (800103c <MX_USART2_UART_Init+0x58>)
 8000fea:	4a15      	ldr	r2, [pc, #84]	; (8001040 <MX_USART2_UART_Init+0x5c>)
 8000fec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000fee:	4b13      	ldr	r3, [pc, #76]	; (800103c <MX_USART2_UART_Init+0x58>)
 8000ff0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000ff4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ff6:	4b11      	ldr	r3, [pc, #68]	; (800103c <MX_USART2_UART_Init+0x58>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	; (800103c <MX_USART2_UART_Init+0x58>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001002:	4b0e      	ldr	r3, [pc, #56]	; (800103c <MX_USART2_UART_Init+0x58>)
 8001004:	2200      	movs	r2, #0
 8001006:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001008:	4b0c      	ldr	r3, [pc, #48]	; (800103c <MX_USART2_UART_Init+0x58>)
 800100a:	220c      	movs	r2, #12
 800100c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800100e:	4b0b      	ldr	r3, [pc, #44]	; (800103c <MX_USART2_UART_Init+0x58>)
 8001010:	2200      	movs	r2, #0
 8001012:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001014:	4b09      	ldr	r3, [pc, #36]	; (800103c <MX_USART2_UART_Init+0x58>)
 8001016:	2200      	movs	r2, #0
 8001018:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800101a:	4b08      	ldr	r3, [pc, #32]	; (800103c <MX_USART2_UART_Init+0x58>)
 800101c:	2200      	movs	r2, #0
 800101e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <MX_USART2_UART_Init+0x58>)
 8001022:	2200      	movs	r2, #0
 8001024:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001026:	4805      	ldr	r0, [pc, #20]	; (800103c <MX_USART2_UART_Init+0x58>)
 8001028:	f006 fbd7 	bl	80077da <HAL_UART_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001032:	f000 f92b 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200003ec 	.word	0x200003ec
 8001040:	40004400 	.word	0x40004400

08001044 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800104a:	4b1a      	ldr	r3, [pc, #104]	; (80010b4 <MX_DMA_Init+0x70>)
 800104c:	695b      	ldr	r3, [r3, #20]
 800104e:	4a19      	ldr	r2, [pc, #100]	; (80010b4 <MX_DMA_Init+0x70>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	6153      	str	r3, [r2, #20]
 8001056:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <MX_DMA_Init+0x70>)
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001062:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <MX_DMA_Init+0x70>)
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	4a13      	ldr	r2, [pc, #76]	; (80010b4 <MX_DMA_Init+0x70>)
 8001068:	f043 0302 	orr.w	r3, r3, #2
 800106c:	6153      	str	r3, [r2, #20]
 800106e:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <MX_DMA_Init+0x70>)
 8001070:	695b      	ldr	r3, [r3, #20]
 8001072:	f003 0302 	and.w	r3, r3, #2
 8001076:	603b      	str	r3, [r7, #0]
 8001078:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800107a:	2200      	movs	r2, #0
 800107c:	2100      	movs	r1, #0
 800107e:	2010      	movs	r0, #16
 8001080:	f002 fb19 	bl	80036b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001084:	2010      	movs	r0, #16
 8001086:	f002 fb32 	bl	80036ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800108a:	2200      	movs	r2, #0
 800108c:	2100      	movs	r1, #0
 800108e:	2011      	movs	r0, #17
 8001090:	f002 fb11 	bl	80036b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001094:	2011      	movs	r0, #17
 8001096:	f002 fb2a 	bl	80036ee <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 800109a:	2200      	movs	r2, #0
 800109c:	2100      	movs	r1, #0
 800109e:	2038      	movs	r0, #56	; 0x38
 80010a0:	f002 fb09 	bl	80036b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80010a4:	2038      	movs	r0, #56	; 0x38
 80010a6:	f002 fb22 	bl	80036ee <HAL_NVIC_EnableIRQ>

}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40021000 	.word	0x40021000

080010b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08a      	sub	sp, #40	; 0x28
 80010bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010be:	f107 0314 	add.w	r3, r7, #20
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]
 80010ca:	60da      	str	r2, [r3, #12]
 80010cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ce:	4b58      	ldr	r3, [pc, #352]	; (8001230 <MX_GPIO_Init+0x178>)
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	4a57      	ldr	r2, [pc, #348]	; (8001230 <MX_GPIO_Init+0x178>)
 80010d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80010d8:	6153      	str	r3, [r2, #20]
 80010da:	4b55      	ldr	r3, [pc, #340]	; (8001230 <MX_GPIO_Init+0x178>)
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010e6:	4b52      	ldr	r3, [pc, #328]	; (8001230 <MX_GPIO_Init+0x178>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	4a51      	ldr	r2, [pc, #324]	; (8001230 <MX_GPIO_Init+0x178>)
 80010ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010f0:	6153      	str	r3, [r2, #20]
 80010f2:	4b4f      	ldr	r3, [pc, #316]	; (8001230 <MX_GPIO_Init+0x178>)
 80010f4:	695b      	ldr	r3, [r3, #20]
 80010f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fe:	4b4c      	ldr	r3, [pc, #304]	; (8001230 <MX_GPIO_Init+0x178>)
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	4a4b      	ldr	r2, [pc, #300]	; (8001230 <MX_GPIO_Init+0x178>)
 8001104:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001108:	6153      	str	r3, [r2, #20]
 800110a:	4b49      	ldr	r3, [pc, #292]	; (8001230 <MX_GPIO_Init+0x178>)
 800110c:	695b      	ldr	r3, [r3, #20]
 800110e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001116:	4b46      	ldr	r3, [pc, #280]	; (8001230 <MX_GPIO_Init+0x178>)
 8001118:	695b      	ldr	r3, [r3, #20]
 800111a:	4a45      	ldr	r2, [pc, #276]	; (8001230 <MX_GPIO_Init+0x178>)
 800111c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001120:	6153      	str	r3, [r2, #20]
 8001122:	4b43      	ldr	r3, [pc, #268]	; (8001230 <MX_GPIO_Init+0x178>)
 8001124:	695b      	ldr	r3, [r3, #20]
 8001126:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 800112e:	2200      	movs	r2, #0
 8001130:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001134:	483f      	ldr	r0, [pc, #252]	; (8001234 <MX_GPIO_Init+0x17c>)
 8001136:	f002 fe99 	bl	8003e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 800113a:	2200      	movs	r2, #0
 800113c:	2103      	movs	r1, #3
 800113e:	483e      	ldr	r0, [pc, #248]	; (8001238 <MX_GPIO_Init+0x180>)
 8001140:	f002 fe94 	bl	8003e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Port_2_Pin|Port_1_Pin|Port_3_Pin|Port_4_Pin, GPIO_PIN_RESET);
 8001144:	2200      	movs	r2, #0
 8001146:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 800114a:	483c      	ldr	r0, [pc, #240]	; (800123c <MX_GPIO_Init+0x184>)
 800114c:	f002 fe8e 	bl	8003e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Direct_GPIO_Port, Direct_Pin, GPIO_PIN_RESET);
 8001150:	2200      	movs	r2, #0
 8001152:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001156:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800115a:	f002 fe87 	bl	8003e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : START_Pin STOP_Pin */
  GPIO_InitStruct.Pin = START_Pin|STOP_Pin;
 800115e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001162:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001164:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001168:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800116e:	f107 0314 	add.w	r3, r7, #20
 8001172:	4619      	mov	r1, r3
 8001174:	482f      	ldr	r0, [pc, #188]	; (8001234 <MX_GPIO_Init+0x17c>)
 8001176:	f002 fcff 	bl	8003b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_1_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin;
 800117a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800117e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001180:	2301      	movs	r3, #1
 8001182:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001188:	2300      	movs	r3, #0
 800118a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	4619      	mov	r1, r3
 8001192:	4828      	ldr	r0, [pc, #160]	; (8001234 <MX_GPIO_Init+0x17c>)
 8001194:	f002 fcf0 	bl	8003b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_2_Pin LED_3_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin|LED_3_Pin;
 8001198:	2303      	movs	r3, #3
 800119a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119c:	2301      	movs	r3, #1
 800119e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a4:	2300      	movs	r3, #0
 80011a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	4619      	mov	r1, r3
 80011ae:	4822      	ldr	r0, [pc, #136]	; (8001238 <MX_GPIO_Init+0x180>)
 80011b0:	f002 fce2 	bl	8003b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80011b4:	2302      	movs	r3, #2
 80011b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011b8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c2:	f107 0314 	add.w	r3, r7, #20
 80011c6:	4619      	mov	r1, r3
 80011c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011cc:	f002 fcd4 	bl	8003b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : Port_2_Pin Port_1_Pin Port_3_Pin Port_4_Pin */
  GPIO_InitStruct.Pin = Port_2_Pin|Port_1_Pin|Port_3_Pin|Port_4_Pin;
 80011d0:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80011d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d6:	2301      	movs	r3, #1
 80011d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011de:	2300      	movs	r3, #0
 80011e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	4619      	mov	r1, r3
 80011e8:	4814      	ldr	r0, [pc, #80]	; (800123c <MX_GPIO_Init+0x184>)
 80011ea:	f002 fcc5 	bl	8003b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : Direct_Pin */
  GPIO_InitStruct.Pin = Direct_Pin;
 80011ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f4:	2301      	movs	r3, #1
 80011f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fc:	2300      	movs	r3, #0
 80011fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Direct_GPIO_Port, &GPIO_InitStruct);
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	4619      	mov	r1, r3
 8001206:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800120a:	f002 fcb5 	bl	8003b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLEAR_Pin */
  GPIO_InitStruct.Pin = CLEAR_Pin;
 800120e:	2320      	movs	r3, #32
 8001210:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001212:	2300      	movs	r3, #0
 8001214:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CLEAR_GPIO_Port, &GPIO_InitStruct);
 800121a:	f107 0314 	add.w	r3, r7, #20
 800121e:	4619      	mov	r1, r3
 8001220:	4806      	ldr	r0, [pc, #24]	; (800123c <MX_GPIO_Init+0x184>)
 8001222:	f002 fca9 	bl	8003b78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001226:	bf00      	nop
 8001228:	3728      	adds	r7, #40	; 0x28
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40021000 	.word	0x40021000
 8001234:	48000800 	.word	0x48000800
 8001238:	48001400 	.word	0x48001400
 800123c:	48000400 	.word	0x48000400

08001240 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)

{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]

RX_2;
 8001248:	2200      	movs	r2, #0
 800124a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800124e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001252:	f002 fe0b 	bl	8003e6c <HAL_GPIO_WritePin>

}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC2)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a05      	ldr	r2, [pc, #20]	; (8001284 <HAL_ADC_ConvCpltCallback+0x24>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d102      	bne.n	8001278 <HAL_ADC_ConvCpltCallback+0x18>
    {
        flag = 1;
 8001272:	4b05      	ldr	r3, [pc, #20]	; (8001288 <HAL_ADC_ConvCpltCallback+0x28>)
 8001274:	2201      	movs	r2, #1
 8001276:	701a      	strb	r2, [r3, #0]
    }
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	50000100 	.word	0x50000100
 8001288:	2000057e 	.word	0x2000057e

0800128c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001290:	b672      	cpsid	i
}
 8001292:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001294:	e7fe      	b.n	8001294 <Error_Handler+0x8>
	...

08001298 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129e:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <HAL_MspInit+0x50>)
 80012a0:	699b      	ldr	r3, [r3, #24]
 80012a2:	4a11      	ldr	r2, [pc, #68]	; (80012e8 <HAL_MspInit+0x50>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	6193      	str	r3, [r2, #24]
 80012aa:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <HAL_MspInit+0x50>)
 80012ac:	699b      	ldr	r3, [r3, #24]
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b6:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <HAL_MspInit+0x50>)
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	4a0b      	ldr	r2, [pc, #44]	; (80012e8 <HAL_MspInit+0x50>)
 80012bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c0:	61d3      	str	r3, [r2, #28]
 80012c2:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <HAL_MspInit+0x50>)
 80012c4:	69db      	ldr	r3, [r3, #28]
 80012c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ca:	603b      	str	r3, [r7, #0]
 80012cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80012ce:	2200      	movs	r2, #0
 80012d0:	2100      	movs	r1, #0
 80012d2:	2005      	movs	r0, #5
 80012d4:	f002 f9ef 	bl	80036b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80012d8:	2005      	movs	r0, #5
 80012da:	f002 fa08 	bl	80036ee <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40021000 	.word	0x40021000

080012ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08e      	sub	sp, #56	; 0x38
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800130c:	d12e      	bne.n	800136c <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800130e:	4b68      	ldr	r3, [pc, #416]	; (80014b0 <HAL_ADC_MspInit+0x1c4>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	3301      	adds	r3, #1
 8001314:	4a66      	ldr	r2, [pc, #408]	; (80014b0 <HAL_ADC_MspInit+0x1c4>)
 8001316:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001318:	4b65      	ldr	r3, [pc, #404]	; (80014b0 <HAL_ADC_MspInit+0x1c4>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d10b      	bne.n	8001338 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001320:	4b64      	ldr	r3, [pc, #400]	; (80014b4 <HAL_ADC_MspInit+0x1c8>)
 8001322:	695b      	ldr	r3, [r3, #20]
 8001324:	4a63      	ldr	r2, [pc, #396]	; (80014b4 <HAL_ADC_MspInit+0x1c8>)
 8001326:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800132a:	6153      	str	r3, [r2, #20]
 800132c:	4b61      	ldr	r3, [pc, #388]	; (80014b4 <HAL_ADC_MspInit+0x1c8>)
 800132e:	695b      	ldr	r3, [r3, #20]
 8001330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001334:	623b      	str	r3, [r7, #32]
 8001336:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001338:	4b5e      	ldr	r3, [pc, #376]	; (80014b4 <HAL_ADC_MspInit+0x1c8>)
 800133a:	695b      	ldr	r3, [r3, #20]
 800133c:	4a5d      	ldr	r2, [pc, #372]	; (80014b4 <HAL_ADC_MspInit+0x1c8>)
 800133e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001342:	6153      	str	r3, [r2, #20]
 8001344:	4b5b      	ldr	r3, [pc, #364]	; (80014b4 <HAL_ADC_MspInit+0x1c8>)
 8001346:	695b      	ldr	r3, [r3, #20]
 8001348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134c:	61fb      	str	r3, [r7, #28]
 800134e:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = SENS_4_Pin;
 8001350:	2308      	movs	r3, #8
 8001352:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001354:	2303      	movs	r3, #3
 8001356:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SENS_4_GPIO_Port, &GPIO_InitStruct);
 800135c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001360:	4619      	mov	r1, r3
 8001362:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001366:	f002 fc07 	bl	8003b78 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800136a:	e09d      	b.n	80014a8 <HAL_ADC_MspInit+0x1bc>
  else if(hadc->Instance==ADC2)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a51      	ldr	r2, [pc, #324]	; (80014b8 <HAL_ADC_MspInit+0x1cc>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d16f      	bne.n	8001456 <HAL_ADC_MspInit+0x16a>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001376:	4b4e      	ldr	r3, [pc, #312]	; (80014b0 <HAL_ADC_MspInit+0x1c4>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	3301      	adds	r3, #1
 800137c:	4a4c      	ldr	r2, [pc, #304]	; (80014b0 <HAL_ADC_MspInit+0x1c4>)
 800137e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001380:	4b4b      	ldr	r3, [pc, #300]	; (80014b0 <HAL_ADC_MspInit+0x1c4>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d10b      	bne.n	80013a0 <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001388:	4b4a      	ldr	r3, [pc, #296]	; (80014b4 <HAL_ADC_MspInit+0x1c8>)
 800138a:	695b      	ldr	r3, [r3, #20]
 800138c:	4a49      	ldr	r2, [pc, #292]	; (80014b4 <HAL_ADC_MspInit+0x1c8>)
 800138e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001392:	6153      	str	r3, [r2, #20]
 8001394:	4b47      	ldr	r3, [pc, #284]	; (80014b4 <HAL_ADC_MspInit+0x1c8>)
 8001396:	695b      	ldr	r3, [r3, #20]
 8001398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139c:	61bb      	str	r3, [r7, #24]
 800139e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a0:	4b44      	ldr	r3, [pc, #272]	; (80014b4 <HAL_ADC_MspInit+0x1c8>)
 80013a2:	695b      	ldr	r3, [r3, #20]
 80013a4:	4a43      	ldr	r2, [pc, #268]	; (80014b4 <HAL_ADC_MspInit+0x1c8>)
 80013a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013aa:	6153      	str	r3, [r2, #20]
 80013ac:	4b41      	ldr	r3, [pc, #260]	; (80014b4 <HAL_ADC_MspInit+0x1c8>)
 80013ae:	695b      	ldr	r3, [r3, #20]
 80013b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b8:	4b3e      	ldr	r3, [pc, #248]	; (80014b4 <HAL_ADC_MspInit+0x1c8>)
 80013ba:	695b      	ldr	r3, [r3, #20]
 80013bc:	4a3d      	ldr	r2, [pc, #244]	; (80014b4 <HAL_ADC_MspInit+0x1c8>)
 80013be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013c2:	6153      	str	r3, [r2, #20]
 80013c4:	4b3b      	ldr	r3, [pc, #236]	; (80014b4 <HAL_ADC_MspInit+0x1c8>)
 80013c6:	695b      	ldr	r3, [r3, #20]
 80013c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = HAL_1_Pin|HAL_2_Pin|HAL_3_Pin|HAL_4_Pin;
 80013d0:	23f0      	movs	r3, #240	; 0xf0
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013d4:	2303      	movs	r3, #3
 80013d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e0:	4619      	mov	r1, r3
 80013e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e6:	f002 fbc7 	bl	8003b78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SENS_3_Pin;
 80013ea:	2304      	movs	r3, #4
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ee:	2303      	movs	r3, #3
 80013f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SENS_3_GPIO_Port, &GPIO_InitStruct);
 80013f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fa:	4619      	mov	r1, r3
 80013fc:	482f      	ldr	r0, [pc, #188]	; (80014bc <HAL_ADC_MspInit+0x1d0>)
 80013fe:	f002 fbbb 	bl	8003b78 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 8001402:	4b2f      	ldr	r3, [pc, #188]	; (80014c0 <HAL_ADC_MspInit+0x1d4>)
 8001404:	4a2f      	ldr	r2, [pc, #188]	; (80014c4 <HAL_ADC_MspInit+0x1d8>)
 8001406:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001408:	4b2d      	ldr	r3, [pc, #180]	; (80014c0 <HAL_ADC_MspInit+0x1d4>)
 800140a:	2200      	movs	r2, #0
 800140c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800140e:	4b2c      	ldr	r3, [pc, #176]	; (80014c0 <HAL_ADC_MspInit+0x1d4>)
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001414:	4b2a      	ldr	r3, [pc, #168]	; (80014c0 <HAL_ADC_MspInit+0x1d4>)
 8001416:	2280      	movs	r2, #128	; 0x80
 8001418:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800141a:	4b29      	ldr	r3, [pc, #164]	; (80014c0 <HAL_ADC_MspInit+0x1d4>)
 800141c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001420:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001422:	4b27      	ldr	r3, [pc, #156]	; (80014c0 <HAL_ADC_MspInit+0x1d4>)
 8001424:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001428:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 800142a:	4b25      	ldr	r3, [pc, #148]	; (80014c0 <HAL_ADC_MspInit+0x1d4>)
 800142c:	2200      	movs	r2, #0
 800142e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001430:	4b23      	ldr	r3, [pc, #140]	; (80014c0 <HAL_ADC_MspInit+0x1d4>)
 8001432:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001436:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001438:	4821      	ldr	r0, [pc, #132]	; (80014c0 <HAL_ADC_MspInit+0x1d4>)
 800143a:	f002 f972 	bl	8003722 <HAL_DMA_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <HAL_ADC_MspInit+0x15c>
      Error_Handler();
 8001444:	f7ff ff22 	bl	800128c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4a1d      	ldr	r2, [pc, #116]	; (80014c0 <HAL_ADC_MspInit+0x1d4>)
 800144c:	639a      	str	r2, [r3, #56]	; 0x38
 800144e:	4a1c      	ldr	r2, [pc, #112]	; (80014c0 <HAL_ADC_MspInit+0x1d4>)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001454:	e028      	b.n	80014a8 <HAL_ADC_MspInit+0x1bc>
  else if(hadc->Instance==ADC3)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a1b      	ldr	r2, [pc, #108]	; (80014c8 <HAL_ADC_MspInit+0x1dc>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d123      	bne.n	80014a8 <HAL_ADC_MspInit+0x1bc>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8001460:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <HAL_ADC_MspInit+0x1c8>)
 8001462:	695b      	ldr	r3, [r3, #20]
 8001464:	4a13      	ldr	r2, [pc, #76]	; (80014b4 <HAL_ADC_MspInit+0x1c8>)
 8001466:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800146a:	6153      	str	r3, [r2, #20]
 800146c:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <HAL_ADC_MspInit+0x1c8>)
 800146e:	695b      	ldr	r3, [r3, #20]
 8001470:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001478:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <HAL_ADC_MspInit+0x1c8>)
 800147a:	695b      	ldr	r3, [r3, #20]
 800147c:	4a0d      	ldr	r2, [pc, #52]	; (80014b4 <HAL_ADC_MspInit+0x1c8>)
 800147e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001482:	6153      	str	r3, [r2, #20]
 8001484:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <HAL_ADC_MspInit+0x1c8>)
 8001486:	695b      	ldr	r3, [r3, #20]
 8001488:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800148c:	60bb      	str	r3, [r7, #8]
 800148e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SENS_1_Pin|SENS_2_Pin;
 8001490:	2303      	movs	r3, #3
 8001492:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001494:	2303      	movs	r3, #3
 8001496:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a0:	4619      	mov	r1, r3
 80014a2:	4806      	ldr	r0, [pc, #24]	; (80014bc <HAL_ADC_MspInit+0x1d0>)
 80014a4:	f002 fb68 	bl	8003b78 <HAL_GPIO_Init>
}
 80014a8:	bf00      	nop
 80014aa:	3738      	adds	r7, #56	; 0x38
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000580 	.word	0x20000580
 80014b4:	40021000 	.word	0x40021000
 80014b8:	50000100 	.word	0x50000100
 80014bc:	48000400 	.word	0x48000400
 80014c0:	2000017c 	.word	0x2000017c
 80014c4:	40020408 	.word	0x40020408
 80014c8:	50000400 	.word	0x50000400

080014cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08a      	sub	sp, #40	; 0x28
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a17      	ldr	r2, [pc, #92]	; (8001548 <HAL_I2C_MspInit+0x7c>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d128      	bne.n	8001540 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ee:	4b17      	ldr	r3, [pc, #92]	; (800154c <HAL_I2C_MspInit+0x80>)
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	4a16      	ldr	r2, [pc, #88]	; (800154c <HAL_I2C_MspInit+0x80>)
 80014f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014f8:	6153      	str	r3, [r2, #20]
 80014fa:	4b14      	ldr	r3, [pc, #80]	; (800154c <HAL_I2C_MspInit+0x80>)
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001502:	613b      	str	r3, [r7, #16]
 8001504:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001506:	f44f 7340 	mov.w	r3, #768	; 0x300
 800150a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800150c:	2312      	movs	r3, #18
 800150e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001514:	2303      	movs	r3, #3
 8001516:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001518:	2304      	movs	r3, #4
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	4619      	mov	r1, r3
 8001522:	480b      	ldr	r0, [pc, #44]	; (8001550 <HAL_I2C_MspInit+0x84>)
 8001524:	f002 fb28 	bl	8003b78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001528:	4b08      	ldr	r3, [pc, #32]	; (800154c <HAL_I2C_MspInit+0x80>)
 800152a:	69db      	ldr	r3, [r3, #28]
 800152c:	4a07      	ldr	r2, [pc, #28]	; (800154c <HAL_I2C_MspInit+0x80>)
 800152e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001532:	61d3      	str	r3, [r2, #28]
 8001534:	4b05      	ldr	r3, [pc, #20]	; (800154c <HAL_I2C_MspInit+0x80>)
 8001536:	69db      	ldr	r3, [r3, #28]
 8001538:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001540:	bf00      	nop
 8001542:	3728      	adds	r7, #40	; 0x28
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40005400 	.word	0x40005400
 800154c:	40021000 	.word	0x40021000
 8001550:	48000400 	.word	0x48000400

08001554 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a0d      	ldr	r2, [pc, #52]	; (8001598 <HAL_RTC_MspInit+0x44>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d111      	bne.n	800158a <HAL_RTC_MspInit+0x36>
 8001566:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800156a:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	fa93 f3a3 	rbit	r3, r3
 8001572:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001574:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001576:	fab3 f383 	clz	r3, r3
 800157a:	b2db      	uxtb	r3, r3
 800157c:	461a      	mov	r2, r3
 800157e:	4b07      	ldr	r3, [pc, #28]	; (800159c <HAL_RTC_MspInit+0x48>)
 8001580:	4413      	add	r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	461a      	mov	r2, r3
 8001586:	2301      	movs	r3, #1
 8001588:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800158a:	bf00      	nop
 800158c:	3714      	adds	r7, #20
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	40002800 	.word	0x40002800
 800159c:	10908100 	.word	0x10908100

080015a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a23      	ldr	r2, [pc, #140]	; (800163c <HAL_TIM_Base_MspInit+0x9c>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d114      	bne.n	80015dc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015b2:	4b23      	ldr	r3, [pc, #140]	; (8001640 <HAL_TIM_Base_MspInit+0xa0>)
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	4a22      	ldr	r2, [pc, #136]	; (8001640 <HAL_TIM_Base_MspInit+0xa0>)
 80015b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015bc:	6193      	str	r3, [r2, #24]
 80015be:	4b20      	ldr	r3, [pc, #128]	; (8001640 <HAL_TIM_Base_MspInit+0xa0>)
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80015ca:	2200      	movs	r2, #0
 80015cc:	2100      	movs	r1, #0
 80015ce:	2018      	movs	r0, #24
 80015d0:	f002 f871 	bl	80036b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80015d4:	2018      	movs	r0, #24
 80015d6:	f002 f88a 	bl	80036ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80015da:	e02a      	b.n	8001632 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM8)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a18      	ldr	r2, [pc, #96]	; (8001644 <HAL_TIM_Base_MspInit+0xa4>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d10c      	bne.n	8001600 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80015e6:	4b16      	ldr	r3, [pc, #88]	; (8001640 <HAL_TIM_Base_MspInit+0xa0>)
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	4a15      	ldr	r2, [pc, #84]	; (8001640 <HAL_TIM_Base_MspInit+0xa0>)
 80015ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015f0:	6193      	str	r3, [r2, #24]
 80015f2:	4b13      	ldr	r3, [pc, #76]	; (8001640 <HAL_TIM_Base_MspInit+0xa0>)
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015fa:	613b      	str	r3, [r7, #16]
 80015fc:	693b      	ldr	r3, [r7, #16]
}
 80015fe:	e018      	b.n	8001632 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM15)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a10      	ldr	r2, [pc, #64]	; (8001648 <HAL_TIM_Base_MspInit+0xa8>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d113      	bne.n	8001632 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800160a:	4b0d      	ldr	r3, [pc, #52]	; (8001640 <HAL_TIM_Base_MspInit+0xa0>)
 800160c:	699b      	ldr	r3, [r3, #24]
 800160e:	4a0c      	ldr	r2, [pc, #48]	; (8001640 <HAL_TIM_Base_MspInit+0xa0>)
 8001610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001614:	6193      	str	r3, [r2, #24]
 8001616:	4b0a      	ldr	r3, [pc, #40]	; (8001640 <HAL_TIM_Base_MspInit+0xa0>)
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001622:	2200      	movs	r2, #0
 8001624:	2100      	movs	r1, #0
 8001626:	2018      	movs	r0, #24
 8001628:	f002 f845 	bl	80036b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800162c:	2018      	movs	r0, #24
 800162e:	f002 f85e 	bl	80036ee <HAL_NVIC_EnableIRQ>
}
 8001632:	bf00      	nop
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40012c00 	.word	0x40012c00
 8001640:	40021000 	.word	0x40021000
 8001644:	40013400 	.word	0x40013400
 8001648:	40014000 	.word	0x40014000

0800164c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08a      	sub	sp, #40	; 0x28
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800166c:	d130      	bne.n	80016d0 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800166e:	4b1a      	ldr	r3, [pc, #104]	; (80016d8 <HAL_TIM_IC_MspInit+0x8c>)
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	4a19      	ldr	r2, [pc, #100]	; (80016d8 <HAL_TIM_IC_MspInit+0x8c>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	61d3      	str	r3, [r2, #28]
 800167a:	4b17      	ldr	r3, [pc, #92]	; (80016d8 <HAL_TIM_IC_MspInit+0x8c>)
 800167c:	69db      	ldr	r3, [r3, #28]
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	613b      	str	r3, [r7, #16]
 8001684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001686:	4b14      	ldr	r3, [pc, #80]	; (80016d8 <HAL_TIM_IC_MspInit+0x8c>)
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	4a13      	ldr	r2, [pc, #76]	; (80016d8 <HAL_TIM_IC_MspInit+0x8c>)
 800168c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001690:	6153      	str	r3, [r2, #20]
 8001692:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <HAL_TIM_IC_MspInit+0x8c>)
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800169e:	2301      	movs	r3, #1
 80016a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a2:	2302      	movs	r3, #2
 80016a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016aa:	2300      	movs	r3, #0
 80016ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016ae:	2301      	movs	r3, #1
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b2:	f107 0314 	add.w	r3, r7, #20
 80016b6:	4619      	mov	r1, r3
 80016b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016bc:	f002 fa5c 	bl	8003b78 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016c0:	2200      	movs	r2, #0
 80016c2:	2100      	movs	r1, #0
 80016c4:	201c      	movs	r0, #28
 80016c6:	f001 fff6 	bl	80036b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016ca:	201c      	movs	r0, #28
 80016cc:	f002 f80f 	bl	80036ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016d0:	bf00      	nop
 80016d2:	3728      	adds	r7, #40	; 0x28
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40021000 	.word	0x40021000

080016dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08c      	sub	sp, #48	; 0x30
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e4:	f107 031c 	add.w	r3, r7, #28
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a4c      	ldr	r2, [pc, #304]	; (800182c <HAL_TIM_MspPostInit+0x150>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d11e      	bne.n	800173c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fe:	4b4c      	ldr	r3, [pc, #304]	; (8001830 <HAL_TIM_MspPostInit+0x154>)
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	4a4b      	ldr	r2, [pc, #300]	; (8001830 <HAL_TIM_MspPostInit+0x154>)
 8001704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001708:	6153      	str	r3, [r2, #20]
 800170a:	4b49      	ldr	r3, [pc, #292]	; (8001830 <HAL_TIM_MspPostInit+0x154>)
 800170c:	695b      	ldr	r3, [r3, #20]
 800170e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001712:	61bb      	str	r3, [r7, #24]
 8001714:	69bb      	ldr	r3, [r7, #24]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 8001716:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 800171a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171c:	2302      	movs	r3, #2
 800171e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001724:	2300      	movs	r3, #0
 8001726:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001728:	2306      	movs	r3, #6
 800172a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172c:	f107 031c 	add.w	r3, r7, #28
 8001730:	4619      	mov	r1, r3
 8001732:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001736:	f002 fa1f 	bl	8003b78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800173a:	e072      	b.n	8001822 <HAL_TIM_MspPostInit+0x146>
  else if(htim->Instance==TIM8)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a3c      	ldr	r2, [pc, #240]	; (8001834 <HAL_TIM_MspPostInit+0x158>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d13a      	bne.n	80017bc <HAL_TIM_MspPostInit+0xe0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001746:	4b3a      	ldr	r3, [pc, #232]	; (8001830 <HAL_TIM_MspPostInit+0x154>)
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	4a39      	ldr	r2, [pc, #228]	; (8001830 <HAL_TIM_MspPostInit+0x154>)
 800174c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001750:	6153      	str	r3, [r2, #20]
 8001752:	4b37      	ldr	r3, [pc, #220]	; (8001830 <HAL_TIM_MspPostInit+0x154>)
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175a:	617b      	str	r3, [r7, #20]
 800175c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800175e:	4b34      	ldr	r3, [pc, #208]	; (8001830 <HAL_TIM_MspPostInit+0x154>)
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	4a33      	ldr	r2, [pc, #204]	; (8001830 <HAL_TIM_MspPostInit+0x154>)
 8001764:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001768:	6153      	str	r3, [r2, #20]
 800176a:	4b31      	ldr	r3, [pc, #196]	; (8001830 <HAL_TIM_MspPostInit+0x154>)
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001772:	613b      	str	r3, [r7, #16]
 8001774:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001776:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800177a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177c:	2302      	movs	r3, #2
 800177e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001784:	2300      	movs	r3, #0
 8001786:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8001788:	2302      	movs	r3, #2
 800178a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178c:	f107 031c 	add.w	r3, r7, #28
 8001790:	4619      	mov	r1, r3
 8001792:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001796:	f002 f9ef 	bl	8003b78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800179a:	2308      	movs	r3, #8
 800179c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179e:	2302      	movs	r3, #2
 80017a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a6:	2300      	movs	r3, #0
 80017a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80017aa:	2304      	movs	r3, #4
 80017ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ae:	f107 031c 	add.w	r3, r7, #28
 80017b2:	4619      	mov	r1, r3
 80017b4:	4820      	ldr	r0, [pc, #128]	; (8001838 <HAL_TIM_MspPostInit+0x15c>)
 80017b6:	f002 f9df 	bl	8003b78 <HAL_GPIO_Init>
}
 80017ba:	e032      	b.n	8001822 <HAL_TIM_MspPostInit+0x146>
  else if(htim->Instance==TIM15)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a1e      	ldr	r2, [pc, #120]	; (800183c <HAL_TIM_MspPostInit+0x160>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d12d      	bne.n	8001822 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c6:	4b1a      	ldr	r3, [pc, #104]	; (8001830 <HAL_TIM_MspPostInit+0x154>)
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	4a19      	ldr	r2, [pc, #100]	; (8001830 <HAL_TIM_MspPostInit+0x154>)
 80017cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017d0:	6153      	str	r3, [r2, #20]
 80017d2:	4b17      	ldr	r3, [pc, #92]	; (8001830 <HAL_TIM_MspPostInit+0x154>)
 80017d4:	695b      	ldr	r3, [r3, #20]
 80017d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80017de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e4:	2302      	movs	r3, #2
 80017e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ec:	2300      	movs	r3, #0
 80017ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 80017f0:	2301      	movs	r3, #1
 80017f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f4:	f107 031c 	add.w	r3, r7, #28
 80017f8:	4619      	mov	r1, r3
 80017fa:	480f      	ldr	r0, [pc, #60]	; (8001838 <HAL_TIM_MspPostInit+0x15c>)
 80017fc:	f002 f9bc 	bl	8003b78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001800:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001806:	2302      	movs	r3, #2
 8001808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180e:	2300      	movs	r3, #0
 8001810:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM15;
 8001812:	2302      	movs	r3, #2
 8001814:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001816:	f107 031c 	add.w	r3, r7, #28
 800181a:	4619      	mov	r1, r3
 800181c:	4806      	ldr	r0, [pc, #24]	; (8001838 <HAL_TIM_MspPostInit+0x15c>)
 800181e:	f002 f9ab 	bl	8003b78 <HAL_GPIO_Init>
}
 8001822:	bf00      	nop
 8001824:	3730      	adds	r7, #48	; 0x30
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40012c00 	.word	0x40012c00
 8001830:	40021000 	.word	0x40021000
 8001834:	40013400 	.word	0x40013400
 8001838:	48000400 	.word	0x48000400
 800183c:	40014000 	.word	0x40014000

08001840 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08c      	sub	sp, #48	; 0x30
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	f107 031c 	add.w	r3, r7, #28
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a67      	ldr	r2, [pc, #412]	; (80019fc <HAL_UART_MspInit+0x1bc>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d128      	bne.n	80018b4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001862:	4b67      	ldr	r3, [pc, #412]	; (8001a00 <HAL_UART_MspInit+0x1c0>)
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	4a66      	ldr	r2, [pc, #408]	; (8001a00 <HAL_UART_MspInit+0x1c0>)
 8001868:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800186c:	6193      	str	r3, [r2, #24]
 800186e:	4b64      	ldr	r3, [pc, #400]	; (8001a00 <HAL_UART_MspInit+0x1c0>)
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001876:	61bb      	str	r3, [r7, #24]
 8001878:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800187a:	4b61      	ldr	r3, [pc, #388]	; (8001a00 <HAL_UART_MspInit+0x1c0>)
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	4a60      	ldr	r2, [pc, #384]	; (8001a00 <HAL_UART_MspInit+0x1c0>)
 8001880:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001884:	6153      	str	r3, [r2, #20]
 8001886:	4b5e      	ldr	r3, [pc, #376]	; (8001a00 <HAL_UART_MspInit+0x1c0>)
 8001888:	695b      	ldr	r3, [r3, #20]
 800188a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800188e:	617b      	str	r3, [r7, #20]
 8001890:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001892:	23c0      	movs	r3, #192	; 0xc0
 8001894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001896:	2302      	movs	r3, #2
 8001898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800189e:	2303      	movs	r3, #3
 80018a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018a2:	2307      	movs	r3, #7
 80018a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a6:	f107 031c 	add.w	r3, r7, #28
 80018aa:	4619      	mov	r1, r3
 80018ac:	4855      	ldr	r0, [pc, #340]	; (8001a04 <HAL_UART_MspInit+0x1c4>)
 80018ae:	f002 f963 	bl	8003b78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018b2:	e09f      	b.n	80019f4 <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==USART2)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a53      	ldr	r2, [pc, #332]	; (8001a08 <HAL_UART_MspInit+0x1c8>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	f040 809a 	bne.w	80019f4 <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART2_CLK_ENABLE();
 80018c0:	4b4f      	ldr	r3, [pc, #316]	; (8001a00 <HAL_UART_MspInit+0x1c0>)
 80018c2:	69db      	ldr	r3, [r3, #28]
 80018c4:	4a4e      	ldr	r2, [pc, #312]	; (8001a00 <HAL_UART_MspInit+0x1c0>)
 80018c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018ca:	61d3      	str	r3, [r2, #28]
 80018cc:	4b4c      	ldr	r3, [pc, #304]	; (8001a00 <HAL_UART_MspInit+0x1c0>)
 80018ce:	69db      	ldr	r3, [r3, #28]
 80018d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d4:	613b      	str	r3, [r7, #16]
 80018d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d8:	4b49      	ldr	r3, [pc, #292]	; (8001a00 <HAL_UART_MspInit+0x1c0>)
 80018da:	695b      	ldr	r3, [r3, #20]
 80018dc:	4a48      	ldr	r2, [pc, #288]	; (8001a00 <HAL_UART_MspInit+0x1c0>)
 80018de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018e2:	6153      	str	r3, [r2, #20]
 80018e4:	4b46      	ldr	r3, [pc, #280]	; (8001a00 <HAL_UART_MspInit+0x1c0>)
 80018e6:	695b      	ldr	r3, [r3, #20]
 80018e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f0:	4b43      	ldr	r3, [pc, #268]	; (8001a00 <HAL_UART_MspInit+0x1c0>)
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	4a42      	ldr	r2, [pc, #264]	; (8001a00 <HAL_UART_MspInit+0x1c0>)
 80018f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018fa:	6153      	str	r3, [r2, #20]
 80018fc:	4b40      	ldr	r3, [pc, #256]	; (8001a00 <HAL_UART_MspInit+0x1c0>)
 80018fe:	695b      	ldr	r3, [r3, #20]
 8001900:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001908:	2304      	movs	r3, #4
 800190a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190c:	2302      	movs	r3, #2
 800190e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001914:	2303      	movs	r3, #3
 8001916:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001918:	2307      	movs	r3, #7
 800191a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191c:	f107 031c 	add.w	r3, r7, #28
 8001920:	4619      	mov	r1, r3
 8001922:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001926:	f002 f927 	bl	8003b78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800192a:	2310      	movs	r3, #16
 800192c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192e:	2302      	movs	r3, #2
 8001930:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001936:	2303      	movs	r3, #3
 8001938:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800193a:	2307      	movs	r3, #7
 800193c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800193e:	f107 031c 	add.w	r3, r7, #28
 8001942:	4619      	mov	r1, r3
 8001944:	482f      	ldr	r0, [pc, #188]	; (8001a04 <HAL_UART_MspInit+0x1c4>)
 8001946:	f002 f917 	bl	8003b78 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800194a:	4b30      	ldr	r3, [pc, #192]	; (8001a0c <HAL_UART_MspInit+0x1cc>)
 800194c:	4a30      	ldr	r2, [pc, #192]	; (8001a10 <HAL_UART_MspInit+0x1d0>)
 800194e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001950:	4b2e      	ldr	r3, [pc, #184]	; (8001a0c <HAL_UART_MspInit+0x1cc>)
 8001952:	2210      	movs	r2, #16
 8001954:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001956:	4b2d      	ldr	r3, [pc, #180]	; (8001a0c <HAL_UART_MspInit+0x1cc>)
 8001958:	2200      	movs	r2, #0
 800195a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800195c:	4b2b      	ldr	r3, [pc, #172]	; (8001a0c <HAL_UART_MspInit+0x1cc>)
 800195e:	2280      	movs	r2, #128	; 0x80
 8001960:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001962:	4b2a      	ldr	r3, [pc, #168]	; (8001a0c <HAL_UART_MspInit+0x1cc>)
 8001964:	2200      	movs	r2, #0
 8001966:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001968:	4b28      	ldr	r3, [pc, #160]	; (8001a0c <HAL_UART_MspInit+0x1cc>)
 800196a:	2200      	movs	r2, #0
 800196c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800196e:	4b27      	ldr	r3, [pc, #156]	; (8001a0c <HAL_UART_MspInit+0x1cc>)
 8001970:	2200      	movs	r2, #0
 8001972:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001974:	4b25      	ldr	r3, [pc, #148]	; (8001a0c <HAL_UART_MspInit+0x1cc>)
 8001976:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800197a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800197c:	4823      	ldr	r0, [pc, #140]	; (8001a0c <HAL_UART_MspInit+0x1cc>)
 800197e:	f001 fed0 	bl	8003722 <HAL_DMA_Init>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <HAL_UART_MspInit+0x14c>
      Error_Handler();
 8001988:	f7ff fc80 	bl	800128c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a1f      	ldr	r2, [pc, #124]	; (8001a0c <HAL_UART_MspInit+0x1cc>)
 8001990:	671a      	str	r2, [r3, #112]	; 0x70
 8001992:	4a1e      	ldr	r2, [pc, #120]	; (8001a0c <HAL_UART_MspInit+0x1cc>)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001998:	4b1e      	ldr	r3, [pc, #120]	; (8001a14 <HAL_UART_MspInit+0x1d4>)
 800199a:	4a1f      	ldr	r2, [pc, #124]	; (8001a18 <HAL_UART_MspInit+0x1d8>)
 800199c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800199e:	4b1d      	ldr	r3, [pc, #116]	; (8001a14 <HAL_UART_MspInit+0x1d4>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019a4:	4b1b      	ldr	r3, [pc, #108]	; (8001a14 <HAL_UART_MspInit+0x1d4>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019aa:	4b1a      	ldr	r3, [pc, #104]	; (8001a14 <HAL_UART_MspInit+0x1d4>)
 80019ac:	2280      	movs	r2, #128	; 0x80
 80019ae:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019b0:	4b18      	ldr	r3, [pc, #96]	; (8001a14 <HAL_UART_MspInit+0x1d4>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019b6:	4b17      	ldr	r3, [pc, #92]	; (8001a14 <HAL_UART_MspInit+0x1d4>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80019bc:	4b15      	ldr	r3, [pc, #84]	; (8001a14 <HAL_UART_MspInit+0x1d4>)
 80019be:	2200      	movs	r2, #0
 80019c0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80019c2:	4b14      	ldr	r3, [pc, #80]	; (8001a14 <HAL_UART_MspInit+0x1d4>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80019c8:	4812      	ldr	r0, [pc, #72]	; (8001a14 <HAL_UART_MspInit+0x1d4>)
 80019ca:	f001 feaa 	bl	8003722 <HAL_DMA_Init>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <HAL_UART_MspInit+0x198>
      Error_Handler();
 80019d4:	f7ff fc5a 	bl	800128c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4a0e      	ldr	r2, [pc, #56]	; (8001a14 <HAL_UART_MspInit+0x1d4>)
 80019dc:	675a      	str	r2, [r3, #116]	; 0x74
 80019de:	4a0d      	ldr	r2, [pc, #52]	; (8001a14 <HAL_UART_MspInit+0x1d4>)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80019e4:	2200      	movs	r2, #0
 80019e6:	2100      	movs	r1, #0
 80019e8:	2026      	movs	r0, #38	; 0x26
 80019ea:	f001 fe64 	bl	80036b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019ee:	2026      	movs	r0, #38	; 0x26
 80019f0:	f001 fe7d 	bl	80036ee <HAL_NVIC_EnableIRQ>
}
 80019f4:	bf00      	nop
 80019f6:	3730      	adds	r7, #48	; 0x30
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40013800 	.word	0x40013800
 8001a00:	40021000 	.word	0x40021000
 8001a04:	48000400 	.word	0x48000400
 8001a08:	40004400 	.word	0x40004400
 8001a0c:	20000474 	.word	0x20000474
 8001a10:	40020080 	.word	0x40020080
 8001a14:	200004b8 	.word	0x200004b8
 8001a18:	4002006c 	.word	0x4002006c

08001a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a20:	e7fe      	b.n	8001a20 <NMI_Handler+0x4>

08001a22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a22:	b480      	push	{r7}
 8001a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a26:	e7fe      	b.n	8001a26 <HardFault_Handler+0x4>

08001a28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a2c:	e7fe      	b.n	8001a2c <MemManage_Handler+0x4>

08001a2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a32:	e7fe      	b.n	8001a32 <BusFault_Handler+0x4>

08001a34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a38:	e7fe      	b.n	8001a38 <UsageFault_Handler+0x4>

08001a3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a68:	f000 f902 	bl	8001c70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a6c:	bf00      	nop
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
	...

08001a80 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001a84:	4802      	ldr	r0, [pc, #8]	; (8001a90 <DMA1_Channel6_IRQHandler+0x10>)
 8001a86:	f001 ff69 	bl	800395c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	200004b8 	.word	0x200004b8

08001a94 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001a98:	4802      	ldr	r0, [pc, #8]	; (8001aa4 <DMA1_Channel7_IRQHandler+0x10>)
 8001a9a:	f001 ff5f 	bl	800395c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000474 	.word	0x20000474

08001aa8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001aac:	4803      	ldr	r0, [pc, #12]	; (8001abc <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8001aae:	f004 fb90 	bl	80061d2 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8001ab2:	4803      	ldr	r0, [pc, #12]	; (8001ac0 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8001ab4:	f004 fb8d 	bl	80061d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001ab8:	bf00      	nop
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	20000234 	.word	0x20000234
 8001ac0:	20000318 	.word	0x20000318

08001ac4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ac8:	4802      	ldr	r0, [pc, #8]	; (8001ad4 <TIM2_IRQHandler+0x10>)
 8001aca:	f004 fb82 	bl	80061d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000280 	.word	0x20000280

08001ad8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001adc:	4802      	ldr	r0, [pc, #8]	; (8001ae8 <USART2_IRQHandler+0x10>)
 8001ade:	f005 ff47 	bl	8007970 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	200003ec 	.word	0x200003ec

08001aec <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001af0:	4802      	ldr	r0, [pc, #8]	; (8001afc <DMA2_Channel1_IRQHandler+0x10>)
 8001af2:	f001 ff33 	bl	800395c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	2000017c 	.word	0x2000017c

08001b00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b08:	4a14      	ldr	r2, [pc, #80]	; (8001b5c <_sbrk+0x5c>)
 8001b0a:	4b15      	ldr	r3, [pc, #84]	; (8001b60 <_sbrk+0x60>)
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b14:	4b13      	ldr	r3, [pc, #76]	; (8001b64 <_sbrk+0x64>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d102      	bne.n	8001b22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b1c:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <_sbrk+0x64>)
 8001b1e:	4a12      	ldr	r2, [pc, #72]	; (8001b68 <_sbrk+0x68>)
 8001b20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b22:	4b10      	ldr	r3, [pc, #64]	; (8001b64 <_sbrk+0x64>)
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4413      	add	r3, r2
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d207      	bcs.n	8001b40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b30:	f006 ff14 	bl	800895c <__errno>
 8001b34:	4603      	mov	r3, r0
 8001b36:	220c      	movs	r2, #12
 8001b38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b3e:	e009      	b.n	8001b54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b40:	4b08      	ldr	r3, [pc, #32]	; (8001b64 <_sbrk+0x64>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b46:	4b07      	ldr	r3, [pc, #28]	; (8001b64 <_sbrk+0x64>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	4a05      	ldr	r2, [pc, #20]	; (8001b64 <_sbrk+0x64>)
 8001b50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b52:	68fb      	ldr	r3, [r7, #12]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3718      	adds	r7, #24
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	2000a000 	.word	0x2000a000
 8001b60:	00000400 	.word	0x00000400
 8001b64:	20000584 	.word	0x20000584
 8001b68:	200005a0 	.word	0x200005a0

08001b6c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b70:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <SystemInit+0x20>)
 8001b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b76:	4a05      	ldr	r2, [pc, #20]	; (8001b8c <SystemInit+0x20>)
 8001b78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bc8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b94:	f7ff ffea 	bl	8001b6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b98:	480c      	ldr	r0, [pc, #48]	; (8001bcc <LoopForever+0x6>)
  ldr r1, =_edata
 8001b9a:	490d      	ldr	r1, [pc, #52]	; (8001bd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b9c:	4a0d      	ldr	r2, [pc, #52]	; (8001bd4 <LoopForever+0xe>)
  movs r3, #0
 8001b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ba0:	e002      	b.n	8001ba8 <LoopCopyDataInit>

08001ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ba6:	3304      	adds	r3, #4

08001ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bac:	d3f9      	bcc.n	8001ba2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bae:	4a0a      	ldr	r2, [pc, #40]	; (8001bd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bb0:	4c0a      	ldr	r4, [pc, #40]	; (8001bdc <LoopForever+0x16>)
  movs r3, #0
 8001bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb4:	e001      	b.n	8001bba <LoopFillZerobss>

08001bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bb8:	3204      	adds	r2, #4

08001bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bbc:	d3fb      	bcc.n	8001bb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bbe:	f006 fed3 	bl	8008968 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bc2:	f7fe fbcd 	bl	8000360 <main>

08001bc6 <LoopForever>:

LoopForever:
    b LoopForever
 8001bc6:	e7fe      	b.n	8001bc6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001bc8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001bcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bd0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001bd4:	0800939c 	.word	0x0800939c
  ldr r2, =_sbss
 8001bd8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001bdc:	2000059c 	.word	0x2000059c

08001be0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001be0:	e7fe      	b.n	8001be0 <ADC1_2_IRQHandler>
	...

08001be4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001be8:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <HAL_Init+0x28>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a07      	ldr	r2, [pc, #28]	; (8001c0c <HAL_Init+0x28>)
 8001bee:	f043 0310 	orr.w	r3, r3, #16
 8001bf2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bf4:	2003      	movs	r0, #3
 8001bf6:	f001 fd53 	bl	80036a0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bfa:	200f      	movs	r0, #15
 8001bfc:	f000 f808 	bl	8001c10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c00:	f7ff fb4a 	bl	8001298 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40022000 	.word	0x40022000

08001c10 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c18:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <HAL_InitTick+0x54>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <HAL_InitTick+0x58>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	4619      	mov	r1, r3
 8001c22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f001 fd6b 	bl	800370a <HAL_SYSTICK_Config>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e00e      	b.n	8001c5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2b0f      	cmp	r3, #15
 8001c42:	d80a      	bhi.n	8001c5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c44:	2200      	movs	r2, #0
 8001c46:	6879      	ldr	r1, [r7, #4]
 8001c48:	f04f 30ff 	mov.w	r0, #4294967295
 8001c4c:	f001 fd33 	bl	80036b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c50:	4a06      	ldr	r2, [pc, #24]	; (8001c6c <HAL_InitTick+0x5c>)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
 8001c58:	e000      	b.n	8001c5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20000000 	.word	0x20000000
 8001c68:	20000008 	.word	0x20000008
 8001c6c:	20000004 	.word	0x20000004

08001c70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c74:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <HAL_IncTick+0x20>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <HAL_IncTick+0x24>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4413      	add	r3, r2
 8001c80:	4a04      	ldr	r2, [pc, #16]	; (8001c94 <HAL_IncTick+0x24>)
 8001c82:	6013      	str	r3, [r2, #0]
}
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	20000008 	.word	0x20000008
 8001c94:	20000588 	.word	0x20000588

08001c98 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return uwTick;  
 8001c9c:	4b03      	ldr	r3, [pc, #12]	; (8001cac <HAL_GetTick+0x14>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	20000588 	.word	0x20000588

08001cb0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cb8:	f7ff ffee 	bl	8001c98 <HAL_GetTick>
 8001cbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc8:	d005      	beq.n	8001cd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cca:	4b0a      	ldr	r3, [pc, #40]	; (8001cf4 <HAL_Delay+0x44>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	461a      	mov	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001cd6:	bf00      	nop
 8001cd8:	f7ff ffde 	bl	8001c98 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d8f7      	bhi.n	8001cd8 <HAL_Delay+0x28>
  {
  }
}
 8001ce8:	bf00      	nop
 8001cea:	bf00      	nop
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20000008 	.word	0x20000008

08001cf8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b09a      	sub	sp, #104	; 0x68
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001d32:	2300      	movs	r3, #0
 8001d34:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d101      	bne.n	8001d40 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e1c9      	b.n	80020d4 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	f003 0310 	and.w	r3, r3, #16
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d176      	bne.n	8001e40 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d152      	bne.n	8001e00 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f7ff fab9 	bl	80012ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d13b      	bne.n	8001e00 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f001 fa9d 	bl	80032c8 <ADC_Disable>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d98:	f003 0310 	and.w	r3, r3, #16
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d12f      	bne.n	8001e00 <HAL_ADC_Init+0xe0>
 8001da0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d12b      	bne.n	8001e00 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001db0:	f023 0302 	bic.w	r3, r3, #2
 8001db4:	f043 0202 	orr.w	r2, r3, #2
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	689a      	ldr	r2, [r3, #8]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001dca:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	689a      	ldr	r2, [r3, #8]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001dda:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ddc:	4b86      	ldr	r3, [pc, #536]	; (8001ff8 <HAL_ADC_Init+0x2d8>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a86      	ldr	r2, [pc, #536]	; (8001ffc <HAL_ADC_Init+0x2dc>)
 8001de2:	fba2 2303 	umull	r2, r3, r2, r3
 8001de6:	0c9a      	lsrs	r2, r3, #18
 8001de8:	4613      	mov	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001df2:	e002      	b.n	8001dfa <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	3b01      	subs	r3, #1
 8001df8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d1f9      	bne.n	8001df4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d007      	beq.n	8001e1e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001e18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e1c:	d110      	bne.n	8001e40 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	f023 0312 	bic.w	r3, r3, #18
 8001e26:	f043 0210 	orr.w	r2, r3, #16
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e32:	f043 0201 	orr.w	r2, r3, #1
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e44:	f003 0310 	and.w	r3, r3, #16
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	f040 8136 	bne.w	80020ba <HAL_ADC_Init+0x39a>
 8001e4e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f040 8131 	bne.w	80020ba <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f040 8129 	bne.w	80020ba <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001e70:	f043 0202 	orr.w	r2, r3, #2
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e80:	d004      	beq.n	8001e8c <HAL_ADC_Init+0x16c>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a5e      	ldr	r2, [pc, #376]	; (8002000 <HAL_ADC_Init+0x2e0>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d101      	bne.n	8001e90 <HAL_ADC_Init+0x170>
 8001e8c:	4b5d      	ldr	r3, [pc, #372]	; (8002004 <HAL_ADC_Init+0x2e4>)
 8001e8e:	e000      	b.n	8001e92 <HAL_ADC_Init+0x172>
 8001e90:	4b5d      	ldr	r3, [pc, #372]	; (8002008 <HAL_ADC_Init+0x2e8>)
 8001e92:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e9c:	d102      	bne.n	8001ea4 <HAL_ADC_Init+0x184>
 8001e9e:	4b58      	ldr	r3, [pc, #352]	; (8002000 <HAL_ADC_Init+0x2e0>)
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	e01a      	b.n	8001eda <HAL_ADC_Init+0x1ba>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a55      	ldr	r2, [pc, #340]	; (8002000 <HAL_ADC_Init+0x2e0>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d103      	bne.n	8001eb6 <HAL_ADC_Init+0x196>
 8001eae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	e011      	b.n	8001eda <HAL_ADC_Init+0x1ba>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a54      	ldr	r2, [pc, #336]	; (800200c <HAL_ADC_Init+0x2ec>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d102      	bne.n	8001ec6 <HAL_ADC_Init+0x1a6>
 8001ec0:	4b53      	ldr	r3, [pc, #332]	; (8002010 <HAL_ADC_Init+0x2f0>)
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	e009      	b.n	8001eda <HAL_ADC_Init+0x1ba>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a51      	ldr	r2, [pc, #324]	; (8002010 <HAL_ADC_Init+0x2f0>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d102      	bne.n	8001ed6 <HAL_ADC_Init+0x1b6>
 8001ed0:	4b4e      	ldr	r3, [pc, #312]	; (800200c <HAL_ADC_Init+0x2ec>)
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	e001      	b.n	8001eda <HAL_ADC_Init+0x1ba>
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f003 0303 	and.w	r3, r3, #3
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d108      	bne.n	8001efa <HAL_ADC_Init+0x1da>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d101      	bne.n	8001efa <HAL_ADC_Init+0x1da>
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e000      	b.n	8001efc <HAL_ADC_Init+0x1dc>
 8001efa:	2300      	movs	r3, #0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d11c      	bne.n	8001f3a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001f00:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d010      	beq.n	8001f28 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 0303 	and.w	r3, r3, #3
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d107      	bne.n	8001f22 <HAL_ADC_Init+0x202>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d101      	bne.n	8001f22 <HAL_ADC_Init+0x202>
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e000      	b.n	8001f24 <HAL_ADC_Init+0x204>
 8001f22:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d108      	bne.n	8001f3a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001f28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	431a      	orrs	r2, r3
 8001f36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f38:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	7e5b      	ldrb	r3, [r3, #25]
 8001f3e:	035b      	lsls	r3, r3, #13
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f44:	2a01      	cmp	r2, #1
 8001f46:	d002      	beq.n	8001f4e <HAL_ADC_Init+0x22e>
 8001f48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f4c:	e000      	b.n	8001f50 <HAL_ADC_Init+0x230>
 8001f4e:	2200      	movs	r2, #0
 8001f50:	431a      	orrs	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	431a      	orrs	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f60:	4313      	orrs	r3, r2
 8001f62:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d11b      	bne.n	8001fa6 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	7e5b      	ldrb	r3, [r3, #25]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d109      	bne.n	8001f8a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	045a      	lsls	r2, r3, #17
 8001f7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f80:	4313      	orrs	r3, r2
 8001f82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f86:	663b      	str	r3, [r7, #96]	; 0x60
 8001f88:	e00d      	b.n	8001fa6 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001f92:	f043 0220 	orr.w	r2, r3, #32
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9e:	f043 0201 	orr.w	r2, r3, #1
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d03a      	beq.n	8002024 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a16      	ldr	r2, [pc, #88]	; (800200c <HAL_ADC_Init+0x2ec>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d004      	beq.n	8001fc2 <HAL_ADC_Init+0x2a2>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a14      	ldr	r2, [pc, #80]	; (8002010 <HAL_ADC_Init+0x2f0>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d128      	bne.n	8002014 <HAL_ADC_Init+0x2f4>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc6:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001fca:	d012      	beq.n	8001ff2 <HAL_ADC_Init+0x2d2>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fd4:	d00a      	beq.n	8001fec <HAL_ADC_Init+0x2cc>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fda:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001fde:	d002      	beq.n	8001fe6 <HAL_ADC_Init+0x2c6>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe4:	e018      	b.n	8002018 <HAL_ADC_Init+0x2f8>
 8001fe6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fea:	e015      	b.n	8002018 <HAL_ADC_Init+0x2f8>
 8001fec:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001ff0:	e012      	b.n	8002018 <HAL_ADC_Init+0x2f8>
 8001ff2:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001ff6:	e00f      	b.n	8002018 <HAL_ADC_Init+0x2f8>
 8001ff8:	20000000 	.word	0x20000000
 8001ffc:	431bde83 	.word	0x431bde83
 8002000:	50000100 	.word	0x50000100
 8002004:	50000300 	.word	0x50000300
 8002008:	50000700 	.word	0x50000700
 800200c:	50000400 	.word	0x50000400
 8002010:	50000500 	.word	0x50000500
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800201c:	4313      	orrs	r3, r2
 800201e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002020:	4313      	orrs	r3, r2
 8002022:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f003 030c 	and.w	r3, r3, #12
 800202e:	2b00      	cmp	r3, #0
 8002030:	d114      	bne.n	800205c <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	6812      	ldr	r2, [r2, #0]
 800203c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002040:	f023 0302 	bic.w	r3, r3, #2
 8002044:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	7e1b      	ldrb	r3, [r3, #24]
 800204a:	039a      	lsls	r2, r3, #14
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	4313      	orrs	r3, r2
 8002056:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002058:	4313      	orrs	r3, r2
 800205a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68da      	ldr	r2, [r3, #12]
 8002062:	4b1e      	ldr	r3, [pc, #120]	; (80020dc <HAL_ADC_Init+0x3bc>)
 8002064:	4013      	ands	r3, r2
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	6812      	ldr	r2, [r2, #0]
 800206a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800206c:	430b      	orrs	r3, r1
 800206e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d10c      	bne.n	8002092 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	f023 010f 	bic.w	r1, r3, #15
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	1e5a      	subs	r2, r3, #1
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	430a      	orrs	r2, r1
 800208e:	631a      	str	r2, [r3, #48]	; 0x30
 8002090:	e007      	b.n	80020a2 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 020f 	bic.w	r2, r2, #15
 80020a0:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ac:	f023 0303 	bic.w	r3, r3, #3
 80020b0:	f043 0201 	orr.w	r2, r3, #1
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	641a      	str	r2, [r3, #64]	; 0x40
 80020b8:	e00a      	b.n	80020d0 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	f023 0312 	bic.w	r3, r3, #18
 80020c2:	f043 0210 	orr.w	r2, r3, #16
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80020ca:	2301      	movs	r3, #1
 80020cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80020d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3768      	adds	r7, #104	; 0x68
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	fff0c007 	.word	0xfff0c007

080020e0 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020e8:	2300      	movs	r3, #0
 80020ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f003 0304 	and.w	r3, r3, #4
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f040 80f9 	bne.w	80022ee <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002102:	2b01      	cmp	r3, #1
 8002104:	d101      	bne.n	800210a <HAL_ADC_Start+0x2a>
 8002106:	2302      	movs	r3, #2
 8002108:	e0f4      	b.n	80022f4 <HAL_ADC_Start+0x214>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f001 f874 	bl	8003200 <ADC_Enable>
 8002118:	4603      	mov	r3, r0
 800211a:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800211c:	7bfb      	ldrb	r3, [r7, #15]
 800211e:	2b00      	cmp	r3, #0
 8002120:	f040 80e0 	bne.w	80022e4 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002128:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800212c:	f023 0301 	bic.w	r3, r3, #1
 8002130:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002140:	d004      	beq.n	800214c <HAL_ADC_Start+0x6c>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a6d      	ldr	r2, [pc, #436]	; (80022fc <HAL_ADC_Start+0x21c>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d106      	bne.n	800215a <HAL_ADC_Start+0x7a>
 800214c:	4b6c      	ldr	r3, [pc, #432]	; (8002300 <HAL_ADC_Start+0x220>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f003 031f 	and.w	r3, r3, #31
 8002154:	2b00      	cmp	r3, #0
 8002156:	d010      	beq.n	800217a <HAL_ADC_Start+0x9a>
 8002158:	e005      	b.n	8002166 <HAL_ADC_Start+0x86>
 800215a:	4b6a      	ldr	r3, [pc, #424]	; (8002304 <HAL_ADC_Start+0x224>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 031f 	and.w	r3, r3, #31
 8002162:	2b00      	cmp	r3, #0
 8002164:	d009      	beq.n	800217a <HAL_ADC_Start+0x9a>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800216e:	d004      	beq.n	800217a <HAL_ADC_Start+0x9a>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a64      	ldr	r2, [pc, #400]	; (8002308 <HAL_ADC_Start+0x228>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d115      	bne.n	80021a6 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d036      	beq.n	8002202 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002198:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800219c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80021a4:	e02d      	b.n	8002202 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021ba:	d004      	beq.n	80021c6 <HAL_ADC_Start+0xe6>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a4e      	ldr	r2, [pc, #312]	; (80022fc <HAL_ADC_Start+0x21c>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d10a      	bne.n	80021dc <HAL_ADC_Start+0xfc>
 80021c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	bf14      	ite	ne
 80021d4:	2301      	movne	r3, #1
 80021d6:	2300      	moveq	r3, #0
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	e008      	b.n	80021ee <HAL_ADC_Start+0x10e>
 80021dc:	4b4a      	ldr	r3, [pc, #296]	; (8002308 <HAL_ADC_Start+0x228>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	bf14      	ite	ne
 80021e8:	2301      	movne	r3, #1
 80021ea:	2300      	moveq	r3, #0
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d007      	beq.n	8002202 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80021fa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800220a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800220e:	d106      	bne.n	800221e <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002214:	f023 0206 	bic.w	r2, r3, #6
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	645a      	str	r2, [r3, #68]	; 0x44
 800221c:	e002      	b.n	8002224 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	221c      	movs	r2, #28
 8002232:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800223c:	d004      	beq.n	8002248 <HAL_ADC_Start+0x168>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a2e      	ldr	r2, [pc, #184]	; (80022fc <HAL_ADC_Start+0x21c>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d106      	bne.n	8002256 <HAL_ADC_Start+0x176>
 8002248:	4b2d      	ldr	r3, [pc, #180]	; (8002300 <HAL_ADC_Start+0x220>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 031f 	and.w	r3, r3, #31
 8002250:	2b00      	cmp	r3, #0
 8002252:	d03e      	beq.n	80022d2 <HAL_ADC_Start+0x1f2>
 8002254:	e005      	b.n	8002262 <HAL_ADC_Start+0x182>
 8002256:	4b2b      	ldr	r3, [pc, #172]	; (8002304 <HAL_ADC_Start+0x224>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 031f 	and.w	r3, r3, #31
 800225e:	2b00      	cmp	r3, #0
 8002260:	d037      	beq.n	80022d2 <HAL_ADC_Start+0x1f2>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800226a:	d004      	beq.n	8002276 <HAL_ADC_Start+0x196>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a22      	ldr	r2, [pc, #136]	; (80022fc <HAL_ADC_Start+0x21c>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d106      	bne.n	8002284 <HAL_ADC_Start+0x1a4>
 8002276:	4b22      	ldr	r3, [pc, #136]	; (8002300 <HAL_ADC_Start+0x220>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f003 031f 	and.w	r3, r3, #31
 800227e:	2b05      	cmp	r3, #5
 8002280:	d027      	beq.n	80022d2 <HAL_ADC_Start+0x1f2>
 8002282:	e005      	b.n	8002290 <HAL_ADC_Start+0x1b0>
 8002284:	4b1f      	ldr	r3, [pc, #124]	; (8002304 <HAL_ADC_Start+0x224>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f003 031f 	and.w	r3, r3, #31
 800228c:	2b05      	cmp	r3, #5
 800228e:	d020      	beq.n	80022d2 <HAL_ADC_Start+0x1f2>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002298:	d004      	beq.n	80022a4 <HAL_ADC_Start+0x1c4>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a17      	ldr	r2, [pc, #92]	; (80022fc <HAL_ADC_Start+0x21c>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d106      	bne.n	80022b2 <HAL_ADC_Start+0x1d2>
 80022a4:	4b16      	ldr	r3, [pc, #88]	; (8002300 <HAL_ADC_Start+0x220>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 031f 	and.w	r3, r3, #31
 80022ac:	2b09      	cmp	r3, #9
 80022ae:	d010      	beq.n	80022d2 <HAL_ADC_Start+0x1f2>
 80022b0:	e005      	b.n	80022be <HAL_ADC_Start+0x1de>
 80022b2:	4b14      	ldr	r3, [pc, #80]	; (8002304 <HAL_ADC_Start+0x224>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f003 031f 	and.w	r3, r3, #31
 80022ba:	2b09      	cmp	r3, #9
 80022bc:	d009      	beq.n	80022d2 <HAL_ADC_Start+0x1f2>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022c6:	d004      	beq.n	80022d2 <HAL_ADC_Start+0x1f2>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a0e      	ldr	r2, [pc, #56]	; (8002308 <HAL_ADC_Start+0x228>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d10f      	bne.n	80022f2 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f042 0204 	orr.w	r2, r2, #4
 80022e0:	609a      	str	r2, [r3, #8]
 80022e2:	e006      	b.n	80022f2 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80022ec:	e001      	b.n	80022f2 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80022ee:	2302      	movs	r3, #2
 80022f0:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80022f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	50000100 	.word	0x50000100
 8002300:	50000300 	.word	0x50000300
 8002304:	50000700 	.word	0x50000700
 8002308:	50000400 	.word	0x50000400

0800230c <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002314:	2300      	movs	r3, #0
 8002316:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800231e:	2b01      	cmp	r3, #1
 8002320:	d101      	bne.n	8002326 <HAL_ADC_Stop+0x1a>
 8002322:	2302      	movs	r3, #2
 8002324:	e023      	b.n	800236e <HAL_ADC_Stop+0x62>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800232e:	216c      	movs	r1, #108	; 0x6c
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f001 f82f 	bl	8003394 <ADC_ConversionStop>
 8002336:	4603      	mov	r3, r0
 8002338:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800233a:	7bfb      	ldrb	r3, [r7, #15]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d111      	bne.n	8002364 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 ffc1 	bl	80032c8 <ADC_Disable>
 8002346:	4603      	mov	r3, r0
 8002348:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800234a:	7bfb      	ldrb	r3, [r7, #15]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d109      	bne.n	8002364 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002354:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002358:	f023 0301 	bic.w	r3, r3, #1
 800235c:	f043 0201 	orr.w	r2, r3, #1
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800236c:	7bfb      	ldrb	r3, [r7, #15]
}
 800236e:	4618      	mov	r0, r3
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
	...

08002378 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002382:	2300      	movs	r3, #0
 8002384:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	2b08      	cmp	r3, #8
 800238c:	d102      	bne.n	8002394 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800238e:	2308      	movs	r3, #8
 8002390:	617b      	str	r3, [r7, #20]
 8002392:	e03a      	b.n	800240a <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800239c:	d004      	beq.n	80023a8 <HAL_ADC_PollForConversion+0x30>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a72      	ldr	r2, [pc, #456]	; (800256c <HAL_ADC_PollForConversion+0x1f4>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d101      	bne.n	80023ac <HAL_ADC_PollForConversion+0x34>
 80023a8:	4b71      	ldr	r3, [pc, #452]	; (8002570 <HAL_ADC_PollForConversion+0x1f8>)
 80023aa:	e000      	b.n	80023ae <HAL_ADC_PollForConversion+0x36>
 80023ac:	4b71      	ldr	r3, [pc, #452]	; (8002574 <HAL_ADC_PollForConversion+0x1fc>)
 80023ae:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f003 031f 	and.w	r3, r3, #31
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d112      	bne.n	80023e2 <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d11d      	bne.n	8002406 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	f043 0220 	orr.w	r2, r3, #32
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e0bf      	b.n	8002562 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00b      	beq.n	8002406 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	f043 0220 	orr.w	r2, r3, #32
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e0ad      	b.n	8002562 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002406:	230c      	movs	r3, #12
 8002408:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002412:	d004      	beq.n	800241e <HAL_ADC_PollForConversion+0xa6>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a54      	ldr	r2, [pc, #336]	; (800256c <HAL_ADC_PollForConversion+0x1f4>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d106      	bne.n	800242c <HAL_ADC_PollForConversion+0xb4>
 800241e:	4b54      	ldr	r3, [pc, #336]	; (8002570 <HAL_ADC_PollForConversion+0x1f8>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f003 031f 	and.w	r3, r3, #31
 8002426:	2b00      	cmp	r3, #0
 8002428:	d010      	beq.n	800244c <HAL_ADC_PollForConversion+0xd4>
 800242a:	e005      	b.n	8002438 <HAL_ADC_PollForConversion+0xc0>
 800242c:	4b51      	ldr	r3, [pc, #324]	; (8002574 <HAL_ADC_PollForConversion+0x1fc>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f003 031f 	and.w	r3, r3, #31
 8002434:	2b00      	cmp	r3, #0
 8002436:	d009      	beq.n	800244c <HAL_ADC_PollForConversion+0xd4>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002440:	d004      	beq.n	800244c <HAL_ADC_PollForConversion+0xd4>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a4c      	ldr	r2, [pc, #304]	; (8002578 <HAL_ADC_PollForConversion+0x200>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d104      	bne.n	8002456 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	613b      	str	r3, [r7, #16]
 8002454:	e00f      	b.n	8002476 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800245e:	d004      	beq.n	800246a <HAL_ADC_PollForConversion+0xf2>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a41      	ldr	r2, [pc, #260]	; (800256c <HAL_ADC_PollForConversion+0x1f4>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d102      	bne.n	8002470 <HAL_ADC_PollForConversion+0xf8>
 800246a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800246e:	e000      	b.n	8002472 <HAL_ADC_PollForConversion+0xfa>
 8002470:	4b41      	ldr	r3, [pc, #260]	; (8002578 <HAL_ADC_PollForConversion+0x200>)
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8002476:	f7ff fc0f 	bl	8001c98 <HAL_GetTick>
 800247a:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800247c:	e021      	b.n	80024c2 <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002484:	d01d      	beq.n	80024c2 <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d007      	beq.n	800249c <HAL_ADC_PollForConversion+0x124>
 800248c:	f7ff fc04 	bl	8001c98 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	429a      	cmp	r2, r3
 800249a:	d212      	bcs.n	80024c2 <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	4013      	ands	r3, r2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10b      	bne.n	80024c2 <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	f043 0204 	orr.w	r2, r3, #4
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e04f      	b.n	8002562 <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	4013      	ands	r3, r2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0d6      	beq.n	800247e <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d131      	bne.n	800254e <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d12c      	bne.n	800254e <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0308 	and.w	r3, r3, #8
 80024fe:	2b08      	cmp	r3, #8
 8002500:	d125      	bne.n	800254e <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b00      	cmp	r3, #0
 800250e:	d112      	bne.n	8002536 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002514:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002520:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d112      	bne.n	800254e <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252c:	f043 0201 	orr.w	r2, r3, #1
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	641a      	str	r2, [r3, #64]	; 0x40
 8002534:	e00b      	b.n	800254e <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	f043 0220 	orr.w	r2, r3, #32
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002546:	f043 0201 	orr.w	r2, r3, #1
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d103      	bne.n	8002560 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3718      	adds	r7, #24
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	50000100 	.word	0x50000100
 8002570:	50000300 	.word	0x50000300
 8002574:	50000700 	.word	0x50000700
 8002578:	50000400 	.word	0x50000400

0800257c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002588:	2300      	movs	r3, #0
 800258a:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f003 0304 	and.w	r3, r3, #4
 8002596:	2b00      	cmp	r3, #0
 8002598:	f040 80f7 	bne.w	800278a <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d101      	bne.n	80025aa <HAL_ADC_Start_DMA+0x2e>
 80025a6:	2302      	movs	r3, #2
 80025a8:	e0f2      	b.n	8002790 <HAL_ADC_Start_DMA+0x214>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025ba:	d004      	beq.n	80025c6 <HAL_ADC_Start_DMA+0x4a>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a75      	ldr	r2, [pc, #468]	; (8002798 <HAL_ADC_Start_DMA+0x21c>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d109      	bne.n	80025da <HAL_ADC_Start_DMA+0x5e>
 80025c6:	4b75      	ldr	r3, [pc, #468]	; (800279c <HAL_ADC_Start_DMA+0x220>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 031f 	and.w	r3, r3, #31
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	bf0c      	ite	eq
 80025d2:	2301      	moveq	r3, #1
 80025d4:	2300      	movne	r3, #0
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	e008      	b.n	80025ec <HAL_ADC_Start_DMA+0x70>
 80025da:	4b71      	ldr	r3, [pc, #452]	; (80027a0 <HAL_ADC_Start_DMA+0x224>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 031f 	and.w	r3, r3, #31
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	bf0c      	ite	eq
 80025e6:	2301      	moveq	r3, #1
 80025e8:	2300      	movne	r3, #0
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f000 80c5 	beq.w	800277c <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	f000 fe04 	bl	8003200 <ADC_Enable>
 80025f8:	4603      	mov	r3, r0
 80025fa:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80025fc:	7dfb      	ldrb	r3, [r7, #23]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f040 80b7 	bne.w	8002772 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002608:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800260c:	f023 0301 	bic.w	r3, r3, #1
 8002610:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002620:	d004      	beq.n	800262c <HAL_ADC_Start_DMA+0xb0>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a5c      	ldr	r2, [pc, #368]	; (8002798 <HAL_ADC_Start_DMA+0x21c>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d106      	bne.n	800263a <HAL_ADC_Start_DMA+0xbe>
 800262c:	4b5b      	ldr	r3, [pc, #364]	; (800279c <HAL_ADC_Start_DMA+0x220>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 031f 	and.w	r3, r3, #31
 8002634:	2b00      	cmp	r3, #0
 8002636:	d010      	beq.n	800265a <HAL_ADC_Start_DMA+0xde>
 8002638:	e005      	b.n	8002646 <HAL_ADC_Start_DMA+0xca>
 800263a:	4b59      	ldr	r3, [pc, #356]	; (80027a0 <HAL_ADC_Start_DMA+0x224>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 031f 	and.w	r3, r3, #31
 8002642:	2b00      	cmp	r3, #0
 8002644:	d009      	beq.n	800265a <HAL_ADC_Start_DMA+0xde>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800264e:	d004      	beq.n	800265a <HAL_ADC_Start_DMA+0xde>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a53      	ldr	r2, [pc, #332]	; (80027a4 <HAL_ADC_Start_DMA+0x228>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d115      	bne.n	8002686 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d036      	beq.n	80026e2 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002678:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800267c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002684:	e02d      	b.n	80026e2 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800269a:	d004      	beq.n	80026a6 <HAL_ADC_Start_DMA+0x12a>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a3d      	ldr	r2, [pc, #244]	; (8002798 <HAL_ADC_Start_DMA+0x21c>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d10a      	bne.n	80026bc <HAL_ADC_Start_DMA+0x140>
 80026a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	bf14      	ite	ne
 80026b4:	2301      	movne	r3, #1
 80026b6:	2300      	moveq	r3, #0
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	e008      	b.n	80026ce <HAL_ADC_Start_DMA+0x152>
 80026bc:	4b39      	ldr	r3, [pc, #228]	; (80027a4 <HAL_ADC_Start_DMA+0x228>)
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	bf14      	ite	ne
 80026c8:	2301      	movne	r3, #1
 80026ca:	2300      	moveq	r3, #0
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d007      	beq.n	80026e2 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026da:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026ee:	d106      	bne.n	80026fe <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f4:	f023 0206 	bic.w	r2, r3, #6
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	645a      	str	r2, [r3, #68]	; 0x44
 80026fc:	e002      	b.n	8002704 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002710:	4a25      	ldr	r2, [pc, #148]	; (80027a8 <HAL_ADC_Start_DMA+0x22c>)
 8002712:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002718:	4a24      	ldr	r2, [pc, #144]	; (80027ac <HAL_ADC_Start_DMA+0x230>)
 800271a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002720:	4a23      	ldr	r2, [pc, #140]	; (80027b0 <HAL_ADC_Start_DMA+0x234>)
 8002722:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	221c      	movs	r2, #28
 800272a:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	685a      	ldr	r2, [r3, #4]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f042 0210 	orr.w	r2, r2, #16
 800273a:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68da      	ldr	r2, [r3, #12]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f042 0201 	orr.w	r2, r2, #1
 800274a:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	3340      	adds	r3, #64	; 0x40
 8002756:	4619      	mov	r1, r3
 8002758:	68ba      	ldr	r2, [r7, #8]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f001 f828 	bl	80037b0 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f042 0204 	orr.w	r2, r2, #4
 800276e:	609a      	str	r2, [r3, #8]
 8002770:	e00d      	b.n	800278e <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800277a:	e008      	b.n	800278e <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002788:	e001      	b.n	800278e <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800278a:	2302      	movs	r3, #2
 800278c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800278e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002790:	4618      	mov	r0, r3
 8002792:	3718      	adds	r7, #24
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	50000100 	.word	0x50000100
 800279c:	50000300 	.word	0x50000300
 80027a0:	50000700 	.word	0x50000700
 80027a4:	50000400 	.word	0x50000400
 80027a8:	08003135 	.word	0x08003135
 80027ac:	080031af 	.word	0x080031af
 80027b0:	080031cb 	.word	0x080031cb

080027b4 <HAL_ADC_Stop_DMA>:
  *         dedicated MultimodeStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027bc:	2300      	movs	r3, #0
 80027be:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d101      	bne.n	80027ce <HAL_ADC_Stop_DMA+0x1a>
 80027ca:	2302      	movs	r3, #2
 80027cc:	e050      	b.n	8002870 <HAL_ADC_Stop_DMA+0xbc>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80027d6:	216c      	movs	r1, #108	; 0x6c
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 fddb 	bl	8003394 <ADC_ConversionStop>
 80027de:	4603      	mov	r3, r0
 80027e0:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80027e2:	7bfb      	ldrb	r3, [r7, #15]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d13e      	bne.n	8002866 <HAL_ADC_Stop_DMA+0xb2>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68da      	ldr	r2, [r3, #12]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 0201 	bic.w	r2, r2, #1
 80027f6:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002800:	2b02      	cmp	r3, #2
 8002802:	d10f      	bne.n	8002824 <HAL_ADC_Stop_DMA+0x70>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002808:	4618      	mov	r0, r3
 800280a:	f001 f830 	bl	800386e <HAL_DMA_Abort>
 800280e:	4603      	mov	r3, r0
 8002810:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002812:	7bfb      	ldrb	r3, [r7, #15]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d005      	beq.n	8002824 <HAL_ADC_Stop_DMA+0x70>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	685a      	ldr	r2, [r3, #4]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 0210 	bic.w	r2, r2, #16
 8002832:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 8002834:	7bfb      	ldrb	r3, [r7, #15]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d105      	bne.n	8002846 <HAL_ADC_Stop_DMA+0x92>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 fd44 	bl	80032c8 <ADC_Disable>
 8002840:	4603      	mov	r3, r0
 8002842:	73fb      	strb	r3, [r7, #15]
 8002844:	e002      	b.n	800284c <HAL_ADC_Stop_DMA+0x98>
    }
    else
    {
      ADC_Disable(hadc);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 fd3e 	bl	80032c8 <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800284c:	7bfb      	ldrb	r3, [r7, #15]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d109      	bne.n	8002866 <HAL_ADC_Stop_DMA+0xb2>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800285a:	f023 0301 	bic.w	r3, r3, #1
 800285e:	f043 0201 	orr.w	r2, r3, #1
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800286e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002870:	4618      	mov	r0, r3
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002886:	4618      	mov	r0, r3
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b084      	sub	sp, #16
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
 800289a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800289c:	2300      	movs	r3, #0
 800289e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d101      	bne.n	80028ae <HAL_ADCEx_Calibration_Start+0x1c>
 80028aa:	2302      	movs	r3, #2
 80028ac:	e05f      	b.n	800296e <HAL_ADCEx_Calibration_Start+0xdc>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 fd06 	bl	80032c8 <ADC_Disable>
 80028bc:	4603      	mov	r3, r0
 80028be:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80028c0:	7bfb      	ldrb	r3, [r7, #15]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d14e      	bne.n	8002964 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2201      	movs	r2, #1
 80028ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	689a      	ldr	r2, [r3, #8]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80028da:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d107      	bne.n	80028f2 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80028f0:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002900:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8002902:	f7ff f9c9 	bl	8001c98 <HAL_GetTick>
 8002906:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002908:	e01c      	b.n	8002944 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800290a:	f7ff f9c5 	bl	8001c98 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b0a      	cmp	r3, #10
 8002916:	d915      	bls.n	8002944 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002922:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002926:	d10d      	bne.n	8002944 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292c:	f023 0312 	bic.w	r3, r3, #18
 8002930:	f043 0210 	orr.w	r2, r3, #16
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e014      	b.n	800296e <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800294e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002952:	d0da      	beq.n	800290a <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002958:	f023 0303 	bic.w	r3, r3, #3
 800295c:	f043 0201 	orr.w	r2, r3, #1
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800296c:	7bfb      	ldrb	r3, [r7, #15]
}
 800296e:	4618      	mov	r0, r3
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
	...

08002978 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002978:	b480      	push	{r7}
 800297a:	b09b      	sub	sp, #108	; 0x6c
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002982:	2300      	movs	r3, #0
 8002984:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002988:	2300      	movs	r3, #0
 800298a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002992:	2b01      	cmp	r3, #1
 8002994:	d101      	bne.n	800299a <HAL_ADC_ConfigChannel+0x22>
 8002996:	2302      	movs	r3, #2
 8002998:	e2ca      	b.n	8002f30 <HAL_ADC_ConfigChannel+0x5b8>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f003 0304 	and.w	r3, r3, #4
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f040 82ae 	bne.w	8002f0e <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	d81c      	bhi.n	80029f4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	4613      	mov	r3, r2
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	4413      	add	r3, r2
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	461a      	mov	r2, r3
 80029ce:	231f      	movs	r3, #31
 80029d0:	4093      	lsls	r3, r2
 80029d2:	43db      	mvns	r3, r3
 80029d4:	4019      	ands	r1, r3
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	6818      	ldr	r0, [r3, #0]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685a      	ldr	r2, [r3, #4]
 80029de:	4613      	mov	r3, r2
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	4413      	add	r3, r2
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	fa00 f203 	lsl.w	r2, r0, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	430a      	orrs	r2, r1
 80029f0:	631a      	str	r2, [r3, #48]	; 0x30
 80029f2:	e063      	b.n	8002abc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	2b09      	cmp	r3, #9
 80029fa:	d81e      	bhi.n	8002a3a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685a      	ldr	r2, [r3, #4]
 8002a06:	4613      	mov	r3, r2
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	4413      	add	r3, r2
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	3b1e      	subs	r3, #30
 8002a10:	221f      	movs	r2, #31
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	43db      	mvns	r3, r3
 8002a18:	4019      	ands	r1, r3
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	6818      	ldr	r0, [r3, #0]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	4613      	mov	r3, r2
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	4413      	add	r3, r2
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	3b1e      	subs	r3, #30
 8002a2c:	fa00 f203 	lsl.w	r2, r0, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	430a      	orrs	r2, r1
 8002a36:	635a      	str	r2, [r3, #52]	; 0x34
 8002a38:	e040      	b.n	8002abc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	2b0e      	cmp	r3, #14
 8002a40:	d81e      	bhi.n	8002a80 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	4413      	add	r3, r2
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	3b3c      	subs	r3, #60	; 0x3c
 8002a56:	221f      	movs	r2, #31
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	4019      	ands	r1, r3
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	6818      	ldr	r0, [r3, #0]
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685a      	ldr	r2, [r3, #4]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	4413      	add	r3, r2
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	3b3c      	subs	r3, #60	; 0x3c
 8002a72:	fa00 f203 	lsl.w	r2, r0, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	639a      	str	r2, [r3, #56]	; 0x38
 8002a7e:	e01d      	b.n	8002abc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685a      	ldr	r2, [r3, #4]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	4413      	add	r3, r2
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	3b5a      	subs	r3, #90	; 0x5a
 8002a94:	221f      	movs	r2, #31
 8002a96:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	4019      	ands	r1, r3
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	6818      	ldr	r0, [r3, #0]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	4413      	add	r3, r2
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	3b5a      	subs	r3, #90	; 0x5a
 8002ab0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 030c 	and.w	r3, r3, #12
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f040 80e5 	bne.w	8002c96 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2b09      	cmp	r3, #9
 8002ad2:	d91c      	bls.n	8002b0e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6999      	ldr	r1, [r3, #24]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	4413      	add	r3, r2
 8002ae4:	3b1e      	subs	r3, #30
 8002ae6:	2207      	movs	r2, #7
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	43db      	mvns	r3, r3
 8002aee:	4019      	ands	r1, r3
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	6898      	ldr	r0, [r3, #8]
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	4613      	mov	r3, r2
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	4413      	add	r3, r2
 8002afe:	3b1e      	subs	r3, #30
 8002b00:	fa00 f203 	lsl.w	r2, r0, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	619a      	str	r2, [r3, #24]
 8002b0c:	e019      	b.n	8002b42 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6959      	ldr	r1, [r3, #20]
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	4413      	add	r3, r2
 8002b1e:	2207      	movs	r2, #7
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	43db      	mvns	r3, r3
 8002b26:	4019      	ands	r1, r3
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	6898      	ldr	r0, [r3, #8]
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	4613      	mov	r3, r2
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	4413      	add	r3, r2
 8002b36:	fa00 f203 	lsl.w	r2, r0, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	695a      	ldr	r2, [r3, #20]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	08db      	lsrs	r3, r3, #3
 8002b4e:	f003 0303 	and.w	r3, r3, #3
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	2b03      	cmp	r3, #3
 8002b62:	d84f      	bhi.n	8002c04 <HAL_ADC_ConfigChannel+0x28c>
 8002b64:	a201      	add	r2, pc, #4	; (adr r2, 8002b6c <HAL_ADC_ConfigChannel+0x1f4>)
 8002b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b6a:	bf00      	nop
 8002b6c:	08002b7d 	.word	0x08002b7d
 8002b70:	08002b9f 	.word	0x08002b9f
 8002b74:	08002bc1 	.word	0x08002bc1
 8002b78:	08002be3 	.word	0x08002be3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b82:	4b9a      	ldr	r3, [pc, #616]	; (8002dec <HAL_ADC_ConfigChannel+0x474>)
 8002b84:	4013      	ands	r3, r2
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	6812      	ldr	r2, [r2, #0]
 8002b8a:	0691      	lsls	r1, r2, #26
 8002b8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	431a      	orrs	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002b9a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002b9c:	e07e      	b.n	8002c9c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002ba4:	4b91      	ldr	r3, [pc, #580]	; (8002dec <HAL_ADC_ConfigChannel+0x474>)
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	6812      	ldr	r2, [r2, #0]
 8002bac:	0691      	lsls	r1, r2, #26
 8002bae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002bbc:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002bbe:	e06d      	b.n	8002c9c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002bc6:	4b89      	ldr	r3, [pc, #548]	; (8002dec <HAL_ADC_ConfigChannel+0x474>)
 8002bc8:	4013      	ands	r3, r2
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	6812      	ldr	r2, [r2, #0]
 8002bce:	0691      	lsls	r1, r2, #26
 8002bd0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002bde:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002be0:	e05c      	b.n	8002c9c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002be8:	4b80      	ldr	r3, [pc, #512]	; (8002dec <HAL_ADC_ConfigChannel+0x474>)
 8002bea:	4013      	ands	r3, r2
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	6812      	ldr	r2, [r2, #0]
 8002bf0:	0691      	lsls	r1, r2, #26
 8002bf2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002c00:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002c02:	e04b      	b.n	8002c9c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	069b      	lsls	r3, r3, #26
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d107      	bne.n	8002c28 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c26:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	069b      	lsls	r3, r3, #26
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d107      	bne.n	8002c4c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c4a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	069b      	lsls	r3, r3, #26
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d107      	bne.n	8002c70 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c6e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	069b      	lsls	r3, r3, #26
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d10a      	bne.n	8002c9a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c92:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002c94:	e001      	b.n	8002c9a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002c96:	bf00      	nop
 8002c98:	e000      	b.n	8002c9c <HAL_ADC_ConfigChannel+0x324>
      break;
 8002c9a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 0303 	and.w	r3, r3, #3
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d108      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x344>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d101      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x344>
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e000      	b.n	8002cbe <HAL_ADC_ConfigChannel+0x346>
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f040 8130 	bne.w	8002f24 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d00f      	beq.n	8002cec <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	43da      	mvns	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	400a      	ands	r2, r1
 8002ce6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002cea:	e049      	b.n	8002d80 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	409a      	lsls	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	430a      	orrs	r2, r1
 8002d02:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2b09      	cmp	r3, #9
 8002d0c:	d91c      	bls.n	8002d48 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6999      	ldr	r1, [r3, #24]
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	4413      	add	r3, r2
 8002d1e:	3b1b      	subs	r3, #27
 8002d20:	2207      	movs	r2, #7
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	43db      	mvns	r3, r3
 8002d28:	4019      	ands	r1, r3
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	6898      	ldr	r0, [r3, #8]
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	4613      	mov	r3, r2
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	4413      	add	r3, r2
 8002d38:	3b1b      	subs	r3, #27
 8002d3a:	fa00 f203 	lsl.w	r2, r0, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	430a      	orrs	r2, r1
 8002d44:	619a      	str	r2, [r3, #24]
 8002d46:	e01b      	b.n	8002d80 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	6959      	ldr	r1, [r3, #20]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	1c5a      	adds	r2, r3, #1
 8002d54:	4613      	mov	r3, r2
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	4413      	add	r3, r2
 8002d5a:	2207      	movs	r2, #7
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	43db      	mvns	r3, r3
 8002d62:	4019      	ands	r1, r3
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	6898      	ldr	r0, [r3, #8]
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	1c5a      	adds	r2, r3, #1
 8002d6e:	4613      	mov	r3, r2
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	4413      	add	r3, r2
 8002d74:	fa00 f203 	lsl.w	r2, r0, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d88:	d004      	beq.n	8002d94 <HAL_ADC_ConfigChannel+0x41c>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a18      	ldr	r2, [pc, #96]	; (8002df0 <HAL_ADC_ConfigChannel+0x478>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d101      	bne.n	8002d98 <HAL_ADC_ConfigChannel+0x420>
 8002d94:	4b17      	ldr	r3, [pc, #92]	; (8002df4 <HAL_ADC_ConfigChannel+0x47c>)
 8002d96:	e000      	b.n	8002d9a <HAL_ADC_ConfigChannel+0x422>
 8002d98:	4b17      	ldr	r3, [pc, #92]	; (8002df8 <HAL_ADC_ConfigChannel+0x480>)
 8002d9a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2b10      	cmp	r3, #16
 8002da2:	d105      	bne.n	8002db0 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002da4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d015      	beq.n	8002ddc <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002db4:	2b11      	cmp	r3, #17
 8002db6:	d105      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002db8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d00b      	beq.n	8002ddc <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002dc8:	2b12      	cmp	r3, #18
 8002dca:	f040 80ab 	bne.w	8002f24 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002dce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f040 80a4 	bne.w	8002f24 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002de4:	d10a      	bne.n	8002dfc <HAL_ADC_ConfigChannel+0x484>
 8002de6:	4b02      	ldr	r3, [pc, #8]	; (8002df0 <HAL_ADC_ConfigChannel+0x478>)
 8002de8:	60fb      	str	r3, [r7, #12]
 8002dea:	e022      	b.n	8002e32 <HAL_ADC_ConfigChannel+0x4ba>
 8002dec:	83fff000 	.word	0x83fff000
 8002df0:	50000100 	.word	0x50000100
 8002df4:	50000300 	.word	0x50000300
 8002df8:	50000700 	.word	0x50000700
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a4e      	ldr	r2, [pc, #312]	; (8002f3c <HAL_ADC_ConfigChannel+0x5c4>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d103      	bne.n	8002e0e <HAL_ADC_ConfigChannel+0x496>
 8002e06:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e0a:	60fb      	str	r3, [r7, #12]
 8002e0c:	e011      	b.n	8002e32 <HAL_ADC_ConfigChannel+0x4ba>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a4b      	ldr	r2, [pc, #300]	; (8002f40 <HAL_ADC_ConfigChannel+0x5c8>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d102      	bne.n	8002e1e <HAL_ADC_ConfigChannel+0x4a6>
 8002e18:	4b4a      	ldr	r3, [pc, #296]	; (8002f44 <HAL_ADC_ConfigChannel+0x5cc>)
 8002e1a:	60fb      	str	r3, [r7, #12]
 8002e1c:	e009      	b.n	8002e32 <HAL_ADC_ConfigChannel+0x4ba>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a48      	ldr	r2, [pc, #288]	; (8002f44 <HAL_ADC_ConfigChannel+0x5cc>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d102      	bne.n	8002e2e <HAL_ADC_ConfigChannel+0x4b6>
 8002e28:	4b45      	ldr	r3, [pc, #276]	; (8002f40 <HAL_ADC_ConfigChannel+0x5c8>)
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	e001      	b.n	8002e32 <HAL_ADC_ConfigChannel+0x4ba>
 8002e2e:	2300      	movs	r3, #0
 8002e30:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f003 0303 	and.w	r3, r3, #3
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d108      	bne.n	8002e52 <HAL_ADC_ConfigChannel+0x4da>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d101      	bne.n	8002e52 <HAL_ADC_ConfigChannel+0x4da>
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e000      	b.n	8002e54 <HAL_ADC_ConfigChannel+0x4dc>
 8002e52:	2300      	movs	r3, #0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d150      	bne.n	8002efa <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002e58:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d010      	beq.n	8002e80 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 0303 	and.w	r3, r3, #3
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d107      	bne.n	8002e7a <HAL_ADC_ConfigChannel+0x502>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d101      	bne.n	8002e7a <HAL_ADC_ConfigChannel+0x502>
 8002e76:	2301      	movs	r3, #1
 8002e78:	e000      	b.n	8002e7c <HAL_ADC_ConfigChannel+0x504>
 8002e7a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d13c      	bne.n	8002efa <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2b10      	cmp	r3, #16
 8002e86:	d11d      	bne.n	8002ec4 <HAL_ADC_ConfigChannel+0x54c>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e90:	d118      	bne.n	8002ec4 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002e92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002e9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e9c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e9e:	4b2a      	ldr	r3, [pc, #168]	; (8002f48 <HAL_ADC_ConfigChannel+0x5d0>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a2a      	ldr	r2, [pc, #168]	; (8002f4c <HAL_ADC_ConfigChannel+0x5d4>)
 8002ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea8:	0c9a      	lsrs	r2, r3, #18
 8002eaa:	4613      	mov	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	4413      	add	r3, r2
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002eb4:	e002      	b.n	8002ebc <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1f9      	bne.n	8002eb6 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002ec2:	e02e      	b.n	8002f22 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2b11      	cmp	r3, #17
 8002eca:	d10b      	bne.n	8002ee4 <HAL_ADC_ConfigChannel+0x56c>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ed4:	d106      	bne.n	8002ee4 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002ed6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002ede:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ee0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002ee2:	e01e      	b.n	8002f22 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2b12      	cmp	r3, #18
 8002eea:	d11a      	bne.n	8002f22 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002eec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002ef4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ef6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002ef8:	e013      	b.n	8002f22 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	f043 0220 	orr.w	r2, r3, #32
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002f0c:	e00a      	b.n	8002f24 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	f043 0220 	orr.w	r2, r3, #32
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002f20:	e000      	b.n	8002f24 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002f22:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002f2c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	376c      	adds	r7, #108	; 0x6c
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr
 8002f3c:	50000100 	.word	0x50000100
 8002f40:	50000400 	.word	0x50000400
 8002f44:	50000500 	.word	0x50000500
 8002f48:	20000000 	.word	0x20000000
 8002f4c:	431bde83 	.word	0x431bde83

08002f50 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b099      	sub	sp, #100	; 0x64
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f68:	d102      	bne.n	8002f70 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002f6a:	4b6d      	ldr	r3, [pc, #436]	; (8003120 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002f6c:	60bb      	str	r3, [r7, #8]
 8002f6e:	e01a      	b.n	8002fa6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a6a      	ldr	r2, [pc, #424]	; (8003120 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d103      	bne.n	8002f82 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002f7a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002f7e:	60bb      	str	r3, [r7, #8]
 8002f80:	e011      	b.n	8002fa6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a67      	ldr	r2, [pc, #412]	; (8003124 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d102      	bne.n	8002f92 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002f8c:	4b66      	ldr	r3, [pc, #408]	; (8003128 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002f8e:	60bb      	str	r3, [r7, #8]
 8002f90:	e009      	b.n	8002fa6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a64      	ldr	r2, [pc, #400]	; (8003128 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d102      	bne.n	8002fa2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002f9c:	4b61      	ldr	r3, [pc, #388]	; (8003124 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002f9e:	60bb      	str	r3, [r7, #8]
 8002fa0:	e001      	b.n	8002fa6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d101      	bne.n	8002fb0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e0b0      	b.n	8003112 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d101      	bne.n	8002fbe <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002fba:	2302      	movs	r3, #2
 8002fbc:	e0a9      	b.n	8003112 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f040 808d 	bne.w	80030f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 0304 	and.w	r3, r3, #4
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f040 8086 	bne.w	80030f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fec:	d004      	beq.n	8002ff8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a4b      	ldr	r2, [pc, #300]	; (8003120 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d101      	bne.n	8002ffc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002ff8:	4b4c      	ldr	r3, [pc, #304]	; (800312c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002ffa:	e000      	b.n	8002ffe <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002ffc:	4b4c      	ldr	r3, [pc, #304]	; (8003130 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002ffe:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d040      	beq.n	800308a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003008:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	6859      	ldr	r1, [r3, #4]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800301a:	035b      	lsls	r3, r3, #13
 800301c:	430b      	orrs	r3, r1
 800301e:	431a      	orrs	r2, r3
 8003020:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003022:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 0303 	and.w	r3, r3, #3
 800302e:	2b01      	cmp	r3, #1
 8003030:	d108      	bne.n	8003044 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	2b01      	cmp	r3, #1
 800303e:	d101      	bne.n	8003044 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003040:	2301      	movs	r3, #1
 8003042:	e000      	b.n	8003046 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8003044:	2300      	movs	r3, #0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d15c      	bne.n	8003104 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	2b01      	cmp	r3, #1
 8003054:	d107      	bne.n	8003066 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b01      	cmp	r3, #1
 8003060:	d101      	bne.n	8003066 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003062:	2301      	movs	r3, #1
 8003064:	e000      	b.n	8003068 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8003066:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003068:	2b00      	cmp	r3, #0
 800306a:	d14b      	bne.n	8003104 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800306c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003074:	f023 030f 	bic.w	r3, r3, #15
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	6811      	ldr	r1, [r2, #0]
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	6892      	ldr	r2, [r2, #8]
 8003080:	430a      	orrs	r2, r1
 8003082:	431a      	orrs	r2, r3
 8003084:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003086:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003088:	e03c      	b.n	8003104 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800308a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003092:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003094:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f003 0303 	and.w	r3, r3, #3
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d108      	bne.n	80030b6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d101      	bne.n	80030b6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80030b2:	2301      	movs	r3, #1
 80030b4:	e000      	b.n	80030b8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80030b6:	2300      	movs	r3, #0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d123      	bne.n	8003104 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f003 0303 	and.w	r3, r3, #3
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d107      	bne.n	80030d8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0301 	and.w	r3, r3, #1
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d101      	bne.n	80030d8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80030d4:	2301      	movs	r3, #1
 80030d6:	e000      	b.n	80030da <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80030d8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d112      	bne.n	8003104 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80030de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80030e6:	f023 030f 	bic.w	r3, r3, #15
 80030ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80030ec:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80030ee:	e009      	b.n	8003104 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f4:	f043 0220 	orr.w	r2, r3, #32
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003102:	e000      	b.n	8003106 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003104:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800310e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8003112:	4618      	mov	r0, r3
 8003114:	3764      	adds	r7, #100	; 0x64
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	50000100 	.word	0x50000100
 8003124:	50000400 	.word	0x50000400
 8003128:	50000500 	.word	0x50000500
 800312c:	50000300 	.word	0x50000300
 8003130:	50000700 	.word	0x50000700

08003134 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800314a:	2b00      	cmp	r3, #0
 800314c:	d126      	bne.n	800319c <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003164:	2b00      	cmp	r3, #0
 8003166:	d115      	bne.n	8003194 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800316c:	2b00      	cmp	r3, #0
 800316e:	d111      	bne.n	8003194 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003174:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003180:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d105      	bne.n	8003194 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318c:	f043 0201 	orr.w	r2, r3, #1
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f7fe f863 	bl	8001260 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800319a:	e004      	b.n	80031a6 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	4798      	blx	r3
}
 80031a6:	bf00      	nop
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b084      	sub	sp, #16
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ba:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f7fe fd9b 	bl	8001cf8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80031c2:	bf00      	nop
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b084      	sub	sp, #16
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e8:	f043 0204 	orr.w	r2, r3, #4
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f7fe fd8b 	bl	8001d0c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031f6:	bf00      	nop
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
	...

08003200 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003208:	2300      	movs	r3, #0
 800320a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f003 0303 	and.w	r3, r3, #3
 8003216:	2b01      	cmp	r3, #1
 8003218:	d108      	bne.n	800322c <ADC_Enable+0x2c>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	2b01      	cmp	r3, #1
 8003226:	d101      	bne.n	800322c <ADC_Enable+0x2c>
 8003228:	2301      	movs	r3, #1
 800322a:	e000      	b.n	800322e <ADC_Enable+0x2e>
 800322c:	2300      	movs	r3, #0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d143      	bne.n	80032ba <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	689a      	ldr	r2, [r3, #8]
 8003238:	4b22      	ldr	r3, [pc, #136]	; (80032c4 <ADC_Enable+0xc4>)
 800323a:	4013      	ands	r3, r2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00d      	beq.n	800325c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003244:	f043 0210 	orr.w	r2, r3, #16
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003250:	f043 0201 	orr.w	r2, r3, #1
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e02f      	b.n	80032bc <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689a      	ldr	r2, [r3, #8]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f042 0201 	orr.w	r2, r2, #1
 800326a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800326c:	f7fe fd14 	bl	8001c98 <HAL_GetTick>
 8003270:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003272:	e01b      	b.n	80032ac <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003274:	f7fe fd10 	bl	8001c98 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d914      	bls.n	80032ac <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	2b01      	cmp	r3, #1
 800328e:	d00d      	beq.n	80032ac <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003294:	f043 0210 	orr.w	r2, r3, #16
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a0:	f043 0201 	orr.w	r2, r3, #1
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e007      	b.n	80032bc <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d1dc      	bne.n	8003274 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	8000003f 	.word	0x8000003f

080032c8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032d0:	2300      	movs	r3, #0
 80032d2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 0303 	and.w	r3, r3, #3
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d108      	bne.n	80032f4 <ADC_Disable+0x2c>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d101      	bne.n	80032f4 <ADC_Disable+0x2c>
 80032f0:	2301      	movs	r3, #1
 80032f2:	e000      	b.n	80032f6 <ADC_Disable+0x2e>
 80032f4:	2300      	movs	r3, #0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d047      	beq.n	800338a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 030d 	and.w	r3, r3, #13
 8003304:	2b01      	cmp	r3, #1
 8003306:	d10f      	bne.n	8003328 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689a      	ldr	r2, [r3, #8]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f042 0202 	orr.w	r2, r2, #2
 8003316:	609a      	str	r2, [r3, #8]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2203      	movs	r2, #3
 800331e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003320:	f7fe fcba 	bl	8001c98 <HAL_GetTick>
 8003324:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003326:	e029      	b.n	800337c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332c:	f043 0210 	orr.w	r2, r3, #16
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003338:	f043 0201 	orr.w	r2, r3, #1
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e023      	b.n	800338c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003344:	f7fe fca8 	bl	8001c98 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d914      	bls.n	800337c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	2b01      	cmp	r3, #1
 800335e:	d10d      	bne.n	800337c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003364:	f043 0210 	orr.w	r2, r3, #16
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003370:	f043 0201 	orr.w	r2, r3, #1
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e007      	b.n	800338c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b01      	cmp	r3, #1
 8003388:	d0dc      	beq.n	8003344 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 800339e:	2300      	movs	r3, #0
 80033a0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80033a2:	2300      	movs	r3, #0
 80033a4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80033a6:	2300      	movs	r3, #0
 80033a8:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f003 030c 	and.w	r3, r3, #12
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 809b 	beq.w	80034f0 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033c8:	d12a      	bne.n	8003420 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d126      	bne.n	8003420 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d122      	bne.n	8003420 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 80033da:	230c      	movs	r3, #12
 80033dc:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80033de:	e014      	b.n	800340a <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	4a46      	ldr	r2, [pc, #280]	; (80034fc <ADC_ConversionStop+0x168>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d90d      	bls.n	8003404 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ec:	f043 0210 	orr.w	r2, r3, #16
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f8:	f043 0201 	orr.w	r2, r3, #1
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e076      	b.n	80034f2 <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	3301      	adds	r3, #1
 8003408:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003414:	2b40      	cmp	r3, #64	; 0x40
 8003416:	d1e3      	bne.n	80033e0 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2240      	movs	r2, #64	; 0x40
 800341e:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	2b60      	cmp	r3, #96	; 0x60
 8003424:	d015      	beq.n	8003452 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f003 0304 	and.w	r3, r3, #4
 8003430:	2b04      	cmp	r3, #4
 8003432:	d10e      	bne.n	8003452 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800343e:	2b00      	cmp	r3, #0
 8003440:	d107      	bne.n	8003452 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	689a      	ldr	r2, [r3, #8]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f042 0210 	orr.w	r2, r2, #16
 8003450:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	2b0c      	cmp	r3, #12
 8003456:	d015      	beq.n	8003484 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f003 0308 	and.w	r3, r3, #8
 8003462:	2b08      	cmp	r3, #8
 8003464:	d10e      	bne.n	8003484 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8003470:	2b00      	cmp	r3, #0
 8003472:	d107      	bne.n	8003484 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	689a      	ldr	r2, [r3, #8]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f042 0220 	orr.w	r2, r2, #32
 8003482:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	2b60      	cmp	r3, #96	; 0x60
 8003488:	d005      	beq.n	8003496 <ADC_ConversionStop+0x102>
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	2b6c      	cmp	r3, #108	; 0x6c
 800348e:	d105      	bne.n	800349c <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003490:	230c      	movs	r3, #12
 8003492:	617b      	str	r3, [r7, #20]
        break;
 8003494:	e005      	b.n	80034a2 <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003496:	2308      	movs	r3, #8
 8003498:	617b      	str	r3, [r7, #20]
        break;
 800349a:	e002      	b.n	80034a2 <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800349c:	2304      	movs	r3, #4
 800349e:	617b      	str	r3, [r7, #20]
        break;
 80034a0:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80034a2:	f7fe fbf9 	bl	8001c98 <HAL_GetTick>
 80034a6:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80034a8:	e01b      	b.n	80034e2 <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80034aa:	f7fe fbf5 	bl	8001c98 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b0b      	cmp	r3, #11
 80034b6:	d914      	bls.n	80034e2 <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689a      	ldr	r2, [r3, #8]
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	4013      	ands	r3, r2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00d      	beq.n	80034e2 <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ca:	f043 0210 	orr.w	r2, r3, #16
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d6:	f043 0201 	orr.w	r2, r3, #1
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e007      	b.n	80034f2 <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	689a      	ldr	r2, [r3, #8]
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	4013      	ands	r3, r2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1dc      	bne.n	80034aa <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3718      	adds	r7, #24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	000993ff 	.word	0x000993ff

08003500 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f003 0307 	and.w	r3, r3, #7
 800350e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003510:	4b0c      	ldr	r3, [pc, #48]	; (8003544 <__NVIC_SetPriorityGrouping+0x44>)
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003516:	68ba      	ldr	r2, [r7, #8]
 8003518:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800351c:	4013      	ands	r3, r2
 800351e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003528:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800352c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003530:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003532:	4a04      	ldr	r2, [pc, #16]	; (8003544 <__NVIC_SetPriorityGrouping+0x44>)
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	60d3      	str	r3, [r2, #12]
}
 8003538:	bf00      	nop
 800353a:	3714      	adds	r7, #20
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr
 8003544:	e000ed00 	.word	0xe000ed00

08003548 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800354c:	4b04      	ldr	r3, [pc, #16]	; (8003560 <__NVIC_GetPriorityGrouping+0x18>)
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	0a1b      	lsrs	r3, r3, #8
 8003552:	f003 0307 	and.w	r3, r3, #7
}
 8003556:	4618      	mov	r0, r3
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr
 8003560:	e000ed00 	.word	0xe000ed00

08003564 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	4603      	mov	r3, r0
 800356c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800356e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003572:	2b00      	cmp	r3, #0
 8003574:	db0b      	blt.n	800358e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003576:	79fb      	ldrb	r3, [r7, #7]
 8003578:	f003 021f 	and.w	r2, r3, #31
 800357c:	4907      	ldr	r1, [pc, #28]	; (800359c <__NVIC_EnableIRQ+0x38>)
 800357e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003582:	095b      	lsrs	r3, r3, #5
 8003584:	2001      	movs	r0, #1
 8003586:	fa00 f202 	lsl.w	r2, r0, r2
 800358a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800358e:	bf00      	nop
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	e000e100 	.word	0xe000e100

080035a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	4603      	mov	r3, r0
 80035a8:	6039      	str	r1, [r7, #0]
 80035aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	db0a      	blt.n	80035ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	b2da      	uxtb	r2, r3
 80035b8:	490c      	ldr	r1, [pc, #48]	; (80035ec <__NVIC_SetPriority+0x4c>)
 80035ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035be:	0112      	lsls	r2, r2, #4
 80035c0:	b2d2      	uxtb	r2, r2
 80035c2:	440b      	add	r3, r1
 80035c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035c8:	e00a      	b.n	80035e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	b2da      	uxtb	r2, r3
 80035ce:	4908      	ldr	r1, [pc, #32]	; (80035f0 <__NVIC_SetPriority+0x50>)
 80035d0:	79fb      	ldrb	r3, [r7, #7]
 80035d2:	f003 030f 	and.w	r3, r3, #15
 80035d6:	3b04      	subs	r3, #4
 80035d8:	0112      	lsls	r2, r2, #4
 80035da:	b2d2      	uxtb	r2, r2
 80035dc:	440b      	add	r3, r1
 80035de:	761a      	strb	r2, [r3, #24]
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr
 80035ec:	e000e100 	.word	0xe000e100
 80035f0:	e000ed00 	.word	0xe000ed00

080035f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b089      	sub	sp, #36	; 0x24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f003 0307 	and.w	r3, r3, #7
 8003606:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	f1c3 0307 	rsb	r3, r3, #7
 800360e:	2b04      	cmp	r3, #4
 8003610:	bf28      	it	cs
 8003612:	2304      	movcs	r3, #4
 8003614:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	3304      	adds	r3, #4
 800361a:	2b06      	cmp	r3, #6
 800361c:	d902      	bls.n	8003624 <NVIC_EncodePriority+0x30>
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	3b03      	subs	r3, #3
 8003622:	e000      	b.n	8003626 <NVIC_EncodePriority+0x32>
 8003624:	2300      	movs	r3, #0
 8003626:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003628:	f04f 32ff 	mov.w	r2, #4294967295
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	fa02 f303 	lsl.w	r3, r2, r3
 8003632:	43da      	mvns	r2, r3
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	401a      	ands	r2, r3
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800363c:	f04f 31ff 	mov.w	r1, #4294967295
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	fa01 f303 	lsl.w	r3, r1, r3
 8003646:	43d9      	mvns	r1, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800364c:	4313      	orrs	r3, r2
         );
}
 800364e:	4618      	mov	r0, r3
 8003650:	3724      	adds	r7, #36	; 0x24
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
	...

0800365c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	3b01      	subs	r3, #1
 8003668:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800366c:	d301      	bcc.n	8003672 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800366e:	2301      	movs	r3, #1
 8003670:	e00f      	b.n	8003692 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003672:	4a0a      	ldr	r2, [pc, #40]	; (800369c <SysTick_Config+0x40>)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	3b01      	subs	r3, #1
 8003678:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800367a:	210f      	movs	r1, #15
 800367c:	f04f 30ff 	mov.w	r0, #4294967295
 8003680:	f7ff ff8e 	bl	80035a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003684:	4b05      	ldr	r3, [pc, #20]	; (800369c <SysTick_Config+0x40>)
 8003686:	2200      	movs	r2, #0
 8003688:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800368a:	4b04      	ldr	r3, [pc, #16]	; (800369c <SysTick_Config+0x40>)
 800368c:	2207      	movs	r2, #7
 800368e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3708      	adds	r7, #8
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	e000e010 	.word	0xe000e010

080036a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f7ff ff29 	bl	8003500 <__NVIC_SetPriorityGrouping>
}
 80036ae:	bf00      	nop
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b086      	sub	sp, #24
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	4603      	mov	r3, r0
 80036be:	60b9      	str	r1, [r7, #8]
 80036c0:	607a      	str	r2, [r7, #4]
 80036c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036c4:	2300      	movs	r3, #0
 80036c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036c8:	f7ff ff3e 	bl	8003548 <__NVIC_GetPriorityGrouping>
 80036cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	68b9      	ldr	r1, [r7, #8]
 80036d2:	6978      	ldr	r0, [r7, #20]
 80036d4:	f7ff ff8e 	bl	80035f4 <NVIC_EncodePriority>
 80036d8:	4602      	mov	r2, r0
 80036da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036de:	4611      	mov	r1, r2
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7ff ff5d 	bl	80035a0 <__NVIC_SetPriority>
}
 80036e6:	bf00      	nop
 80036e8:	3718      	adds	r7, #24
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b082      	sub	sp, #8
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	4603      	mov	r3, r0
 80036f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7ff ff31 	bl	8003564 <__NVIC_EnableIRQ>
}
 8003702:	bf00      	nop
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800370a:	b580      	push	{r7, lr}
 800370c:	b082      	sub	sp, #8
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7ff ffa2 	bl	800365c <SysTick_Config>
 8003718:	4603      	mov	r3, r0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3708      	adds	r7, #8
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003722:	b580      	push	{r7, lr}
 8003724:	b084      	sub	sp, #16
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800372a:	2300      	movs	r3, #0
 800372c:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e037      	b.n	80037a8 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2202      	movs	r2, #2
 800373c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800374e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003752:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800375c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003768:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003774:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	4313      	orrs	r3, r2
 8003780:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f9b8 	bl	8003b00 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}  
 80037a8:	4618      	mov	r0, r3
 80037aa:	3710      	adds	r7, #16
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
 80037bc:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80037be:	2300      	movs	r3, #0
 80037c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d101      	bne.n	80037d0 <HAL_DMA_Start_IT+0x20>
 80037cc:	2302      	movs	r3, #2
 80037ce:	e04a      	b.n	8003866 <HAL_DMA_Start_IT+0xb6>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d13a      	bne.n	8003858 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2202      	movs	r2, #2
 80037e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f022 0201 	bic.w	r2, r2, #1
 80037fe:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	68b9      	ldr	r1, [r7, #8]
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f000 f94b 	bl	8003aa2 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003810:	2b00      	cmp	r3, #0
 8003812:	d008      	beq.n	8003826 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f042 020e 	orr.w	r2, r2, #14
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	e00f      	b.n	8003846 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f042 020a 	orr.w	r2, r2, #10
 8003834:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 0204 	bic.w	r2, r2, #4
 8003844:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f042 0201 	orr.w	r2, r2, #1
 8003854:	601a      	str	r2, [r3, #0]
 8003856:	e005      	b.n	8003864 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8003860:	2302      	movs	r3, #2
 8003862:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8003864:	7dfb      	ldrb	r3, [r7, #23]
} 
 8003866:	4618      	mov	r0, r3
 8003868:	3718      	adds	r7, #24
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800386e:	b480      	push	{r7}
 8003870:	b083      	sub	sp, #12
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800387c:	2b02      	cmp	r3, #2
 800387e:	d008      	beq.n	8003892 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2204      	movs	r2, #4
 8003884:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e020      	b.n	80038d4 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 020e 	bic.w	r2, r2, #14
 80038a0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f022 0201 	bic.w	r2, r2, #1
 80038b0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ba:	2101      	movs	r1, #1
 80038bc:	fa01 f202 	lsl.w	r2, r1, r2
 80038c0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038e8:	2300      	movs	r3, #0
 80038ea:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d005      	beq.n	8003902 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2204      	movs	r2, #4
 80038fa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	73fb      	strb	r3, [r7, #15]
 8003900:	e027      	b.n	8003952 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f022 020e 	bic.w	r2, r2, #14
 8003910:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 0201 	bic.w	r2, r2, #1
 8003920:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800392a:	2101      	movs	r1, #1
 800392c:	fa01 f202 	lsl.w	r2, r1, r2
 8003930:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	4798      	blx	r3
    } 
  }
  return status;
 8003952:	7bfb      	ldrb	r3, [r7, #15]
}
 8003954:	4618      	mov	r0, r3
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003978:	2204      	movs	r2, #4
 800397a:	409a      	lsls	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	4013      	ands	r3, r2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d024      	beq.n	80039ce <HAL_DMA_IRQHandler+0x72>
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	f003 0304 	and.w	r3, r3, #4
 800398a:	2b00      	cmp	r3, #0
 800398c:	d01f      	beq.n	80039ce <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0320 	and.w	r3, r3, #32
 8003998:	2b00      	cmp	r3, #0
 800399a:	d107      	bne.n	80039ac <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 0204 	bic.w	r2, r2, #4
 80039aa:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b4:	2104      	movs	r1, #4
 80039b6:	fa01 f202 	lsl.w	r2, r1, r2
 80039ba:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d06a      	beq.n	8003a9a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80039cc:	e065      	b.n	8003a9a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d2:	2202      	movs	r2, #2
 80039d4:	409a      	lsls	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	4013      	ands	r3, r2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d02c      	beq.n	8003a38 <HAL_DMA_IRQHandler+0xdc>
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d027      	beq.n	8003a38 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0320 	and.w	r3, r3, #32
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10b      	bne.n	8003a0e <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f022 020a 	bic.w	r2, r2, #10
 8003a04:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a16:	2102      	movs	r1, #2
 8003a18:	fa01 f202 	lsl.w	r2, r1, r2
 8003a1c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d035      	beq.n	8003a9a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003a36:	e030      	b.n	8003a9a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3c:	2208      	movs	r2, #8
 8003a3e:	409a      	lsls	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	4013      	ands	r3, r2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d028      	beq.n	8003a9a <HAL_DMA_IRQHandler+0x13e>
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	f003 0308 	and.w	r3, r3, #8
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d023      	beq.n	8003a9a <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 020e 	bic.w	r2, r2, #14
 8003a60:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a6a:	2101      	movs	r1, #1
 8003a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a70:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d004      	beq.n	8003a9a <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	4798      	blx	r3
    }
  }
}  
 8003a98:	e7ff      	b.n	8003a9a <HAL_DMA_IRQHandler+0x13e>
 8003a9a:	bf00      	nop
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	b085      	sub	sp, #20
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	60f8      	str	r0, [r7, #12]
 8003aaa:	60b9      	str	r1, [r7, #8]
 8003aac:	607a      	str	r2, [r7, #4]
 8003aae:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab8:	2101      	movs	r1, #1
 8003aba:	fa01 f202 	lsl.w	r2, r1, r2
 8003abe:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	2b10      	cmp	r3, #16
 8003ace:	d108      	bne.n	8003ae2 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68ba      	ldr	r2, [r7, #8]
 8003ade:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003ae0:	e007      	b.n	8003af2 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68ba      	ldr	r2, [r7, #8]
 8003ae8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	60da      	str	r2, [r3, #12]
}
 8003af2:	bf00      	nop
 8003af4:	3714      	adds	r7, #20
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
	...

08003b00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	4b14      	ldr	r3, [pc, #80]	; (8003b60 <DMA_CalcBaseAndBitshift+0x60>)
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d80f      	bhi.n	8003b34 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	461a      	mov	r2, r3
 8003b1a:	4b12      	ldr	r3, [pc, #72]	; (8003b64 <DMA_CalcBaseAndBitshift+0x64>)
 8003b1c:	4413      	add	r3, r2
 8003b1e:	4a12      	ldr	r2, [pc, #72]	; (8003b68 <DMA_CalcBaseAndBitshift+0x68>)
 8003b20:	fba2 2303 	umull	r2, r3, r2, r3
 8003b24:	091b      	lsrs	r3, r3, #4
 8003b26:	009a      	lsls	r2, r3, #2
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a0f      	ldr	r2, [pc, #60]	; (8003b6c <DMA_CalcBaseAndBitshift+0x6c>)
 8003b30:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8003b32:	e00e      	b.n	8003b52 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	461a      	mov	r2, r3
 8003b3a:	4b0d      	ldr	r3, [pc, #52]	; (8003b70 <DMA_CalcBaseAndBitshift+0x70>)
 8003b3c:	4413      	add	r3, r2
 8003b3e:	4a0a      	ldr	r2, [pc, #40]	; (8003b68 <DMA_CalcBaseAndBitshift+0x68>)
 8003b40:	fba2 2303 	umull	r2, r3, r2, r3
 8003b44:	091b      	lsrs	r3, r3, #4
 8003b46:	009a      	lsls	r2, r3, #2
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a09      	ldr	r2, [pc, #36]	; (8003b74 <DMA_CalcBaseAndBitshift+0x74>)
 8003b50:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003b52:	bf00      	nop
 8003b54:	370c      	adds	r7, #12
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	40020407 	.word	0x40020407
 8003b64:	bffdfff8 	.word	0xbffdfff8
 8003b68:	cccccccd 	.word	0xcccccccd
 8003b6c:	40020000 	.word	0x40020000
 8003b70:	bffdfbf8 	.word	0xbffdfbf8
 8003b74:	40020400 	.word	0x40020400

08003b78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b087      	sub	sp, #28
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b82:	2300      	movs	r3, #0
 8003b84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b86:	e154      	b.n	8003e32 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	fa01 f303 	lsl.w	r3, r1, r3
 8003b94:	4013      	ands	r3, r2
 8003b96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	f000 8146 	beq.w	8003e2c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f003 0303 	and.w	r3, r3, #3
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d005      	beq.n	8003bb8 <HAL_GPIO_Init+0x40>
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f003 0303 	and.w	r3, r3, #3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d130      	bne.n	8003c1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	2203      	movs	r2, #3
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	43db      	mvns	r3, r3
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	68da      	ldr	r2, [r3, #12]
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	005b      	lsls	r3, r3, #1
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bee:	2201      	movs	r2, #1
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf6:	43db      	mvns	r3, r3
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	091b      	lsrs	r3, r3, #4
 8003c04:	f003 0201 	and.w	r2, r3, #1
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f003 0303 	and.w	r3, r3, #3
 8003c22:	2b03      	cmp	r3, #3
 8003c24:	d017      	beq.n	8003c56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	005b      	lsls	r3, r3, #1
 8003c30:	2203      	movs	r2, #3
 8003c32:	fa02 f303 	lsl.w	r3, r2, r3
 8003c36:	43db      	mvns	r3, r3
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	689a      	ldr	r2, [r3, #8]
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f003 0303 	and.w	r3, r3, #3
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d123      	bne.n	8003caa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	08da      	lsrs	r2, r3, #3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	3208      	adds	r2, #8
 8003c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	f003 0307 	and.w	r3, r3, #7
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	220f      	movs	r2, #15
 8003c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7e:	43db      	mvns	r3, r3
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	4013      	ands	r3, r2
 8003c84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	691a      	ldr	r2, [r3, #16]
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	f003 0307 	and.w	r3, r3, #7
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	fa02 f303 	lsl.w	r3, r2, r3
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	08da      	lsrs	r2, r3, #3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	3208      	adds	r2, #8
 8003ca4:	6939      	ldr	r1, [r7, #16]
 8003ca6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	2203      	movs	r2, #3
 8003cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cba:	43db      	mvns	r3, r3
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f003 0203 	and.w	r2, r3, #3
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	005b      	lsls	r3, r3, #1
 8003cce:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f000 80a0 	beq.w	8003e2c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cec:	4b58      	ldr	r3, [pc, #352]	; (8003e50 <HAL_GPIO_Init+0x2d8>)
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	4a57      	ldr	r2, [pc, #348]	; (8003e50 <HAL_GPIO_Init+0x2d8>)
 8003cf2:	f043 0301 	orr.w	r3, r3, #1
 8003cf6:	6193      	str	r3, [r2, #24]
 8003cf8:	4b55      	ldr	r3, [pc, #340]	; (8003e50 <HAL_GPIO_Init+0x2d8>)
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	60bb      	str	r3, [r7, #8]
 8003d02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d04:	4a53      	ldr	r2, [pc, #332]	; (8003e54 <HAL_GPIO_Init+0x2dc>)
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	089b      	lsrs	r3, r3, #2
 8003d0a:	3302      	adds	r3, #2
 8003d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f003 0303 	and.w	r3, r3, #3
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	220f      	movs	r2, #15
 8003d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d20:	43db      	mvns	r3, r3
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	4013      	ands	r3, r2
 8003d26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003d2e:	d019      	beq.n	8003d64 <HAL_GPIO_Init+0x1ec>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a49      	ldr	r2, [pc, #292]	; (8003e58 <HAL_GPIO_Init+0x2e0>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d013      	beq.n	8003d60 <HAL_GPIO_Init+0x1e8>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a48      	ldr	r2, [pc, #288]	; (8003e5c <HAL_GPIO_Init+0x2e4>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d00d      	beq.n	8003d5c <HAL_GPIO_Init+0x1e4>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a47      	ldr	r2, [pc, #284]	; (8003e60 <HAL_GPIO_Init+0x2e8>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d007      	beq.n	8003d58 <HAL_GPIO_Init+0x1e0>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a46      	ldr	r2, [pc, #280]	; (8003e64 <HAL_GPIO_Init+0x2ec>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d101      	bne.n	8003d54 <HAL_GPIO_Init+0x1dc>
 8003d50:	2304      	movs	r3, #4
 8003d52:	e008      	b.n	8003d66 <HAL_GPIO_Init+0x1ee>
 8003d54:	2305      	movs	r3, #5
 8003d56:	e006      	b.n	8003d66 <HAL_GPIO_Init+0x1ee>
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e004      	b.n	8003d66 <HAL_GPIO_Init+0x1ee>
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	e002      	b.n	8003d66 <HAL_GPIO_Init+0x1ee>
 8003d60:	2301      	movs	r3, #1
 8003d62:	e000      	b.n	8003d66 <HAL_GPIO_Init+0x1ee>
 8003d64:	2300      	movs	r3, #0
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	f002 0203 	and.w	r2, r2, #3
 8003d6c:	0092      	lsls	r2, r2, #2
 8003d6e:	4093      	lsls	r3, r2
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d76:	4937      	ldr	r1, [pc, #220]	; (8003e54 <HAL_GPIO_Init+0x2dc>)
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	089b      	lsrs	r3, r3, #2
 8003d7c:	3302      	adds	r3, #2
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d84:	4b38      	ldr	r3, [pc, #224]	; (8003e68 <HAL_GPIO_Init+0x2f0>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	43db      	mvns	r3, r3
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	4013      	ands	r3, r2
 8003d92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d003      	beq.n	8003da8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003da8:	4a2f      	ldr	r2, [pc, #188]	; (8003e68 <HAL_GPIO_Init+0x2f0>)
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003dae:	4b2e      	ldr	r3, [pc, #184]	; (8003e68 <HAL_GPIO_Init+0x2f0>)
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	43db      	mvns	r3, r3
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	4013      	ands	r3, r2
 8003dbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d003      	beq.n	8003dd2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003dd2:	4a25      	ldr	r2, [pc, #148]	; (8003e68 <HAL_GPIO_Init+0x2f0>)
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003dd8:	4b23      	ldr	r3, [pc, #140]	; (8003e68 <HAL_GPIO_Init+0x2f0>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	43db      	mvns	r3, r3
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	4013      	ands	r3, r2
 8003de6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d003      	beq.n	8003dfc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003dfc:	4a1a      	ldr	r2, [pc, #104]	; (8003e68 <HAL_GPIO_Init+0x2f0>)
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e02:	4b19      	ldr	r3, [pc, #100]	; (8003e68 <HAL_GPIO_Init+0x2f0>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	43db      	mvns	r3, r3
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d003      	beq.n	8003e26 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003e26:	4a10      	ldr	r2, [pc, #64]	; (8003e68 <HAL_GPIO_Init+0x2f0>)
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	3301      	adds	r3, #1
 8003e30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	fa22 f303 	lsr.w	r3, r2, r3
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f47f aea3 	bne.w	8003b88 <HAL_GPIO_Init+0x10>
  }
}
 8003e42:	bf00      	nop
 8003e44:	bf00      	nop
 8003e46:	371c      	adds	r7, #28
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr
 8003e50:	40021000 	.word	0x40021000
 8003e54:	40010000 	.word	0x40010000
 8003e58:	48000400 	.word	0x48000400
 8003e5c:	48000800 	.word	0x48000800
 8003e60:	48000c00 	.word	0x48000c00
 8003e64:	48001000 	.word	0x48001000
 8003e68:	40010400 	.word	0x40010400

08003e6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	460b      	mov	r3, r1
 8003e76:	807b      	strh	r3, [r7, #2]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e7c:	787b      	ldrb	r3, [r7, #1]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d003      	beq.n	8003e8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e82:	887a      	ldrh	r2, [r7, #2]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e88:	e002      	b.n	8003e90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e8a:	887a      	ldrh	r2, [r7, #2]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e081      	b.n	8003fb2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d106      	bne.n	8003ec8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f7fd fb02 	bl	80014cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2224      	movs	r2, #36	; 0x24
 8003ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f022 0201 	bic.w	r2, r2, #1
 8003ede:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003eec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	689a      	ldr	r2, [r3, #8]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003efc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d107      	bne.n	8003f16 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	689a      	ldr	r2, [r3, #8]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f12:	609a      	str	r2, [r3, #8]
 8003f14:	e006      	b.n	8003f24 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	689a      	ldr	r2, [r3, #8]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003f22:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d104      	bne.n	8003f36 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f34:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	6812      	ldr	r2, [r2, #0]
 8003f40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f48:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68da      	ldr	r2, [r3, #12]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f58:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	691a      	ldr	r2, [r3, #16]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	430a      	orrs	r2, r1
 8003f72:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	69d9      	ldr	r1, [r3, #28]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a1a      	ldr	r2, [r3, #32]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	430a      	orrs	r2, r1
 8003f82:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f042 0201 	orr.w	r2, r2, #1
 8003f92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3708      	adds	r7, #8
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b083      	sub	sp, #12
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
 8003fc2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2b20      	cmp	r3, #32
 8003fce:	d138      	bne.n	8004042 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d101      	bne.n	8003fde <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003fda:	2302      	movs	r3, #2
 8003fdc:	e032      	b.n	8004044 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2224      	movs	r2, #36	; 0x24
 8003fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f022 0201 	bic.w	r2, r2, #1
 8003ffc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800400c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	6819      	ldr	r1, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	683a      	ldr	r2, [r7, #0]
 800401a:	430a      	orrs	r2, r1
 800401c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f042 0201 	orr.w	r2, r2, #1
 800402c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2220      	movs	r2, #32
 8004032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800403e:	2300      	movs	r3, #0
 8004040:	e000      	b.n	8004044 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004042:	2302      	movs	r3, #2
  }
}
 8004044:	4618      	mov	r0, r3
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b20      	cmp	r3, #32
 8004064:	d139      	bne.n	80040da <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800406c:	2b01      	cmp	r3, #1
 800406e:	d101      	bne.n	8004074 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004070:	2302      	movs	r3, #2
 8004072:	e033      	b.n	80040dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2224      	movs	r2, #36	; 0x24
 8004080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f022 0201 	bic.w	r2, r2, #1
 8004092:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80040a2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	021b      	lsls	r3, r3, #8
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f042 0201 	orr.w	r2, r2, #1
 80040c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2220      	movs	r2, #32
 80040ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80040d6:	2300      	movs	r3, #0
 80040d8:	e000      	b.n	80040dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80040da:	2302      	movs	r3, #2
  }
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3714      	adds	r7, #20
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040f8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d102      	bne.n	800410e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	f001 b823 	b.w	8005154 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800410e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004112:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	f000 817d 	beq.w	800441e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004124:	4bbc      	ldr	r3, [pc, #752]	; (8004418 <HAL_RCC_OscConfig+0x330>)
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f003 030c 	and.w	r3, r3, #12
 800412c:	2b04      	cmp	r3, #4
 800412e:	d00c      	beq.n	800414a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004130:	4bb9      	ldr	r3, [pc, #740]	; (8004418 <HAL_RCC_OscConfig+0x330>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f003 030c 	and.w	r3, r3, #12
 8004138:	2b08      	cmp	r3, #8
 800413a:	d15c      	bne.n	80041f6 <HAL_RCC_OscConfig+0x10e>
 800413c:	4bb6      	ldr	r3, [pc, #728]	; (8004418 <HAL_RCC_OscConfig+0x330>)
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004148:	d155      	bne.n	80041f6 <HAL_RCC_OscConfig+0x10e>
 800414a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800414e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004152:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004156:	fa93 f3a3 	rbit	r3, r3
 800415a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 800415e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004162:	fab3 f383 	clz	r3, r3
 8004166:	b2db      	uxtb	r3, r3
 8004168:	095b      	lsrs	r3, r3, #5
 800416a:	b2db      	uxtb	r3, r3
 800416c:	f043 0301 	orr.w	r3, r3, #1
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b01      	cmp	r3, #1
 8004174:	d102      	bne.n	800417c <HAL_RCC_OscConfig+0x94>
 8004176:	4ba8      	ldr	r3, [pc, #672]	; (8004418 <HAL_RCC_OscConfig+0x330>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	e015      	b.n	80041a8 <HAL_RCC_OscConfig+0xc0>
 800417c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004180:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004184:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004188:	fa93 f3a3 	rbit	r3, r3
 800418c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004190:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004194:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004198:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800419c:	fa93 f3a3 	rbit	r3, r3
 80041a0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80041a4:	4b9c      	ldr	r3, [pc, #624]	; (8004418 <HAL_RCC_OscConfig+0x330>)
 80041a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80041ac:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80041b0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80041b4:	fa92 f2a2 	rbit	r2, r2
 80041b8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80041bc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80041c0:	fab2 f282 	clz	r2, r2
 80041c4:	b2d2      	uxtb	r2, r2
 80041c6:	f042 0220 	orr.w	r2, r2, #32
 80041ca:	b2d2      	uxtb	r2, r2
 80041cc:	f002 021f 	and.w	r2, r2, #31
 80041d0:	2101      	movs	r1, #1
 80041d2:	fa01 f202 	lsl.w	r2, r1, r2
 80041d6:	4013      	ands	r3, r2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 811f 	beq.w	800441c <HAL_RCC_OscConfig+0x334>
 80041de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f040 8116 	bne.w	800441c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	f000 bfaf 	b.w	8005154 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004206:	d106      	bne.n	8004216 <HAL_RCC_OscConfig+0x12e>
 8004208:	4b83      	ldr	r3, [pc, #524]	; (8004418 <HAL_RCC_OscConfig+0x330>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a82      	ldr	r2, [pc, #520]	; (8004418 <HAL_RCC_OscConfig+0x330>)
 800420e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004212:	6013      	str	r3, [r2, #0]
 8004214:	e036      	b.n	8004284 <HAL_RCC_OscConfig+0x19c>
 8004216:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800421a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10c      	bne.n	8004240 <HAL_RCC_OscConfig+0x158>
 8004226:	4b7c      	ldr	r3, [pc, #496]	; (8004418 <HAL_RCC_OscConfig+0x330>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a7b      	ldr	r2, [pc, #492]	; (8004418 <HAL_RCC_OscConfig+0x330>)
 800422c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004230:	6013      	str	r3, [r2, #0]
 8004232:	4b79      	ldr	r3, [pc, #484]	; (8004418 <HAL_RCC_OscConfig+0x330>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a78      	ldr	r2, [pc, #480]	; (8004418 <HAL_RCC_OscConfig+0x330>)
 8004238:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800423c:	6013      	str	r3, [r2, #0]
 800423e:	e021      	b.n	8004284 <HAL_RCC_OscConfig+0x19c>
 8004240:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004244:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004250:	d10c      	bne.n	800426c <HAL_RCC_OscConfig+0x184>
 8004252:	4b71      	ldr	r3, [pc, #452]	; (8004418 <HAL_RCC_OscConfig+0x330>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a70      	ldr	r2, [pc, #448]	; (8004418 <HAL_RCC_OscConfig+0x330>)
 8004258:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800425c:	6013      	str	r3, [r2, #0]
 800425e:	4b6e      	ldr	r3, [pc, #440]	; (8004418 <HAL_RCC_OscConfig+0x330>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a6d      	ldr	r2, [pc, #436]	; (8004418 <HAL_RCC_OscConfig+0x330>)
 8004264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004268:	6013      	str	r3, [r2, #0]
 800426a:	e00b      	b.n	8004284 <HAL_RCC_OscConfig+0x19c>
 800426c:	4b6a      	ldr	r3, [pc, #424]	; (8004418 <HAL_RCC_OscConfig+0x330>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a69      	ldr	r2, [pc, #420]	; (8004418 <HAL_RCC_OscConfig+0x330>)
 8004272:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004276:	6013      	str	r3, [r2, #0]
 8004278:	4b67      	ldr	r3, [pc, #412]	; (8004418 <HAL_RCC_OscConfig+0x330>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a66      	ldr	r2, [pc, #408]	; (8004418 <HAL_RCC_OscConfig+0x330>)
 800427e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004282:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004284:	4b64      	ldr	r3, [pc, #400]	; (8004418 <HAL_RCC_OscConfig+0x330>)
 8004286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004288:	f023 020f 	bic.w	r2, r3, #15
 800428c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004290:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	495f      	ldr	r1, [pc, #380]	; (8004418 <HAL_RCC_OscConfig+0x330>)
 800429a:	4313      	orrs	r3, r2
 800429c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800429e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d059      	beq.n	8004362 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ae:	f7fd fcf3 	bl	8001c98 <HAL_GetTick>
 80042b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042b6:	e00a      	b.n	80042ce <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042b8:	f7fd fcee 	bl	8001c98 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	2b64      	cmp	r3, #100	; 0x64
 80042c6:	d902      	bls.n	80042ce <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	f000 bf43 	b.w	8005154 <HAL_RCC_OscConfig+0x106c>
 80042ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042d2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80042da:	fa93 f3a3 	rbit	r3, r3
 80042de:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80042e2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042e6:	fab3 f383 	clz	r3, r3
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	095b      	lsrs	r3, r3, #5
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	f043 0301 	orr.w	r3, r3, #1
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d102      	bne.n	8004300 <HAL_RCC_OscConfig+0x218>
 80042fa:	4b47      	ldr	r3, [pc, #284]	; (8004418 <HAL_RCC_OscConfig+0x330>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	e015      	b.n	800432c <HAL_RCC_OscConfig+0x244>
 8004300:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004304:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004308:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800430c:	fa93 f3a3 	rbit	r3, r3
 8004310:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004314:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004318:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800431c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004320:	fa93 f3a3 	rbit	r3, r3
 8004324:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004328:	4b3b      	ldr	r3, [pc, #236]	; (8004418 <HAL_RCC_OscConfig+0x330>)
 800432a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004330:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004334:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004338:	fa92 f2a2 	rbit	r2, r2
 800433c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004340:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004344:	fab2 f282 	clz	r2, r2
 8004348:	b2d2      	uxtb	r2, r2
 800434a:	f042 0220 	orr.w	r2, r2, #32
 800434e:	b2d2      	uxtb	r2, r2
 8004350:	f002 021f 	and.w	r2, r2, #31
 8004354:	2101      	movs	r1, #1
 8004356:	fa01 f202 	lsl.w	r2, r1, r2
 800435a:	4013      	ands	r3, r2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d0ab      	beq.n	80042b8 <HAL_RCC_OscConfig+0x1d0>
 8004360:	e05d      	b.n	800441e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004362:	f7fd fc99 	bl	8001c98 <HAL_GetTick>
 8004366:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800436a:	e00a      	b.n	8004382 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800436c:	f7fd fc94 	bl	8001c98 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	2b64      	cmp	r3, #100	; 0x64
 800437a:	d902      	bls.n	8004382 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	f000 bee9 	b.w	8005154 <HAL_RCC_OscConfig+0x106c>
 8004382:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004386:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800438a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800438e:	fa93 f3a3 	rbit	r3, r3
 8004392:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004396:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800439a:	fab3 f383 	clz	r3, r3
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	095b      	lsrs	r3, r3, #5
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	f043 0301 	orr.w	r3, r3, #1
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d102      	bne.n	80043b4 <HAL_RCC_OscConfig+0x2cc>
 80043ae:	4b1a      	ldr	r3, [pc, #104]	; (8004418 <HAL_RCC_OscConfig+0x330>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	e015      	b.n	80043e0 <HAL_RCC_OscConfig+0x2f8>
 80043b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043b8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043bc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80043c0:	fa93 f3a3 	rbit	r3, r3
 80043c4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80043c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043cc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80043d0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80043d4:	fa93 f3a3 	rbit	r3, r3
 80043d8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80043dc:	4b0e      	ldr	r3, [pc, #56]	; (8004418 <HAL_RCC_OscConfig+0x330>)
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80043e4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80043e8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80043ec:	fa92 f2a2 	rbit	r2, r2
 80043f0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80043f4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80043f8:	fab2 f282 	clz	r2, r2
 80043fc:	b2d2      	uxtb	r2, r2
 80043fe:	f042 0220 	orr.w	r2, r2, #32
 8004402:	b2d2      	uxtb	r2, r2
 8004404:	f002 021f 	and.w	r2, r2, #31
 8004408:	2101      	movs	r1, #1
 800440a:	fa01 f202 	lsl.w	r2, r1, r2
 800440e:	4013      	ands	r3, r2
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1ab      	bne.n	800436c <HAL_RCC_OscConfig+0x284>
 8004414:	e003      	b.n	800441e <HAL_RCC_OscConfig+0x336>
 8004416:	bf00      	nop
 8004418:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800441c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800441e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004422:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	f000 817d 	beq.w	800472e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004434:	4ba6      	ldr	r3, [pc, #664]	; (80046d0 <HAL_RCC_OscConfig+0x5e8>)
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f003 030c 	and.w	r3, r3, #12
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00b      	beq.n	8004458 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004440:	4ba3      	ldr	r3, [pc, #652]	; (80046d0 <HAL_RCC_OscConfig+0x5e8>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f003 030c 	and.w	r3, r3, #12
 8004448:	2b08      	cmp	r3, #8
 800444a:	d172      	bne.n	8004532 <HAL_RCC_OscConfig+0x44a>
 800444c:	4ba0      	ldr	r3, [pc, #640]	; (80046d0 <HAL_RCC_OscConfig+0x5e8>)
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d16c      	bne.n	8004532 <HAL_RCC_OscConfig+0x44a>
 8004458:	2302      	movs	r3, #2
 800445a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800445e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004462:	fa93 f3a3 	rbit	r3, r3
 8004466:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800446a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800446e:	fab3 f383 	clz	r3, r3
 8004472:	b2db      	uxtb	r3, r3
 8004474:	095b      	lsrs	r3, r3, #5
 8004476:	b2db      	uxtb	r3, r3
 8004478:	f043 0301 	orr.w	r3, r3, #1
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b01      	cmp	r3, #1
 8004480:	d102      	bne.n	8004488 <HAL_RCC_OscConfig+0x3a0>
 8004482:	4b93      	ldr	r3, [pc, #588]	; (80046d0 <HAL_RCC_OscConfig+0x5e8>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	e013      	b.n	80044b0 <HAL_RCC_OscConfig+0x3c8>
 8004488:	2302      	movs	r3, #2
 800448a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800448e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004492:	fa93 f3a3 	rbit	r3, r3
 8004496:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800449a:	2302      	movs	r3, #2
 800449c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80044a0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80044a4:	fa93 f3a3 	rbit	r3, r3
 80044a8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80044ac:	4b88      	ldr	r3, [pc, #544]	; (80046d0 <HAL_RCC_OscConfig+0x5e8>)
 80044ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b0:	2202      	movs	r2, #2
 80044b2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80044b6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80044ba:	fa92 f2a2 	rbit	r2, r2
 80044be:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80044c2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80044c6:	fab2 f282 	clz	r2, r2
 80044ca:	b2d2      	uxtb	r2, r2
 80044cc:	f042 0220 	orr.w	r2, r2, #32
 80044d0:	b2d2      	uxtb	r2, r2
 80044d2:	f002 021f 	and.w	r2, r2, #31
 80044d6:	2101      	movs	r1, #1
 80044d8:	fa01 f202 	lsl.w	r2, r1, r2
 80044dc:	4013      	ands	r3, r2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00a      	beq.n	80044f8 <HAL_RCC_OscConfig+0x410>
 80044e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d002      	beq.n	80044f8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	f000 be2e 	b.w	8005154 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044f8:	4b75      	ldr	r3, [pc, #468]	; (80046d0 <HAL_RCC_OscConfig+0x5e8>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004500:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004504:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	695b      	ldr	r3, [r3, #20]
 800450c:	21f8      	movs	r1, #248	; 0xf8
 800450e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004512:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004516:	fa91 f1a1 	rbit	r1, r1
 800451a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800451e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004522:	fab1 f181 	clz	r1, r1
 8004526:	b2c9      	uxtb	r1, r1
 8004528:	408b      	lsls	r3, r1
 800452a:	4969      	ldr	r1, [pc, #420]	; (80046d0 <HAL_RCC_OscConfig+0x5e8>)
 800452c:	4313      	orrs	r3, r2
 800452e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004530:	e0fd      	b.n	800472e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004536:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	2b00      	cmp	r3, #0
 8004540:	f000 8088 	beq.w	8004654 <HAL_RCC_OscConfig+0x56c>
 8004544:	2301      	movs	r3, #1
 8004546:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800454a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800454e:	fa93 f3a3 	rbit	r3, r3
 8004552:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004556:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800455a:	fab3 f383 	clz	r3, r3
 800455e:	b2db      	uxtb	r3, r3
 8004560:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004564:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	461a      	mov	r2, r3
 800456c:	2301      	movs	r3, #1
 800456e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004570:	f7fd fb92 	bl	8001c98 <HAL_GetTick>
 8004574:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004578:	e00a      	b.n	8004590 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800457a:	f7fd fb8d 	bl	8001c98 <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b02      	cmp	r3, #2
 8004588:	d902      	bls.n	8004590 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	f000 bde2 	b.w	8005154 <HAL_RCC_OscConfig+0x106c>
 8004590:	2302      	movs	r3, #2
 8004592:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004596:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800459a:	fa93 f3a3 	rbit	r3, r3
 800459e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80045a2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045a6:	fab3 f383 	clz	r3, r3
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	095b      	lsrs	r3, r3, #5
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	f043 0301 	orr.w	r3, r3, #1
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d102      	bne.n	80045c0 <HAL_RCC_OscConfig+0x4d8>
 80045ba:	4b45      	ldr	r3, [pc, #276]	; (80046d0 <HAL_RCC_OscConfig+0x5e8>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	e013      	b.n	80045e8 <HAL_RCC_OscConfig+0x500>
 80045c0:	2302      	movs	r3, #2
 80045c2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80045ca:	fa93 f3a3 	rbit	r3, r3
 80045ce:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80045d2:	2302      	movs	r3, #2
 80045d4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80045d8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80045dc:	fa93 f3a3 	rbit	r3, r3
 80045e0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80045e4:	4b3a      	ldr	r3, [pc, #232]	; (80046d0 <HAL_RCC_OscConfig+0x5e8>)
 80045e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e8:	2202      	movs	r2, #2
 80045ea:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80045ee:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80045f2:	fa92 f2a2 	rbit	r2, r2
 80045f6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80045fa:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80045fe:	fab2 f282 	clz	r2, r2
 8004602:	b2d2      	uxtb	r2, r2
 8004604:	f042 0220 	orr.w	r2, r2, #32
 8004608:	b2d2      	uxtb	r2, r2
 800460a:	f002 021f 	and.w	r2, r2, #31
 800460e:	2101      	movs	r1, #1
 8004610:	fa01 f202 	lsl.w	r2, r1, r2
 8004614:	4013      	ands	r3, r2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d0af      	beq.n	800457a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800461a:	4b2d      	ldr	r3, [pc, #180]	; (80046d0 <HAL_RCC_OscConfig+0x5e8>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004626:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	21f8      	movs	r1, #248	; 0xf8
 8004630:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004634:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004638:	fa91 f1a1 	rbit	r1, r1
 800463c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004640:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004644:	fab1 f181 	clz	r1, r1
 8004648:	b2c9      	uxtb	r1, r1
 800464a:	408b      	lsls	r3, r1
 800464c:	4920      	ldr	r1, [pc, #128]	; (80046d0 <HAL_RCC_OscConfig+0x5e8>)
 800464e:	4313      	orrs	r3, r2
 8004650:	600b      	str	r3, [r1, #0]
 8004652:	e06c      	b.n	800472e <HAL_RCC_OscConfig+0x646>
 8004654:	2301      	movs	r3, #1
 8004656:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800465a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800465e:	fa93 f3a3 	rbit	r3, r3
 8004662:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004666:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800466a:	fab3 f383 	clz	r3, r3
 800466e:	b2db      	uxtb	r3, r3
 8004670:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004674:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	461a      	mov	r2, r3
 800467c:	2300      	movs	r3, #0
 800467e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004680:	f7fd fb0a 	bl	8001c98 <HAL_GetTick>
 8004684:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004688:	e00a      	b.n	80046a0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800468a:	f7fd fb05 	bl	8001c98 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b02      	cmp	r3, #2
 8004698:	d902      	bls.n	80046a0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	f000 bd5a 	b.w	8005154 <HAL_RCC_OscConfig+0x106c>
 80046a0:	2302      	movs	r3, #2
 80046a2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80046aa:	fa93 f3a3 	rbit	r3, r3
 80046ae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80046b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046b6:	fab3 f383 	clz	r3, r3
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	095b      	lsrs	r3, r3, #5
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	f043 0301 	orr.w	r3, r3, #1
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d104      	bne.n	80046d4 <HAL_RCC_OscConfig+0x5ec>
 80046ca:	4b01      	ldr	r3, [pc, #4]	; (80046d0 <HAL_RCC_OscConfig+0x5e8>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	e015      	b.n	80046fc <HAL_RCC_OscConfig+0x614>
 80046d0:	40021000 	.word	0x40021000
 80046d4:	2302      	movs	r3, #2
 80046d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80046de:	fa93 f3a3 	rbit	r3, r3
 80046e2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80046e6:	2302      	movs	r3, #2
 80046e8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80046ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80046f0:	fa93 f3a3 	rbit	r3, r3
 80046f4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80046f8:	4bc8      	ldr	r3, [pc, #800]	; (8004a1c <HAL_RCC_OscConfig+0x934>)
 80046fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fc:	2202      	movs	r2, #2
 80046fe:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004702:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004706:	fa92 f2a2 	rbit	r2, r2
 800470a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800470e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004712:	fab2 f282 	clz	r2, r2
 8004716:	b2d2      	uxtb	r2, r2
 8004718:	f042 0220 	orr.w	r2, r2, #32
 800471c:	b2d2      	uxtb	r2, r2
 800471e:	f002 021f 	and.w	r2, r2, #31
 8004722:	2101      	movs	r1, #1
 8004724:	fa01 f202 	lsl.w	r2, r1, r2
 8004728:	4013      	ands	r3, r2
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1ad      	bne.n	800468a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800472e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004732:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0308 	and.w	r3, r3, #8
 800473e:	2b00      	cmp	r3, #0
 8004740:	f000 8110 	beq.w	8004964 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004744:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004748:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d079      	beq.n	8004848 <HAL_RCC_OscConfig+0x760>
 8004754:	2301      	movs	r3, #1
 8004756:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800475a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800475e:	fa93 f3a3 	rbit	r3, r3
 8004762:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004766:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800476a:	fab3 f383 	clz	r3, r3
 800476e:	b2db      	uxtb	r3, r3
 8004770:	461a      	mov	r2, r3
 8004772:	4bab      	ldr	r3, [pc, #684]	; (8004a20 <HAL_RCC_OscConfig+0x938>)
 8004774:	4413      	add	r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	461a      	mov	r2, r3
 800477a:	2301      	movs	r3, #1
 800477c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800477e:	f7fd fa8b 	bl	8001c98 <HAL_GetTick>
 8004782:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004786:	e00a      	b.n	800479e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004788:	f7fd fa86 	bl	8001c98 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	2b02      	cmp	r3, #2
 8004796:	d902      	bls.n	800479e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	f000 bcdb 	b.w	8005154 <HAL_RCC_OscConfig+0x106c>
 800479e:	2302      	movs	r3, #2
 80047a0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80047a8:	fa93 f3a3 	rbit	r3, r3
 80047ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80047b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047b4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80047b8:	2202      	movs	r2, #2
 80047ba:	601a      	str	r2, [r3, #0]
 80047bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047c0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	fa93 f2a3 	rbit	r2, r3
 80047ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80047d2:	601a      	str	r2, [r3, #0]
 80047d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047dc:	2202      	movs	r2, #2
 80047de:	601a      	str	r2, [r3, #0]
 80047e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	fa93 f2a3 	rbit	r2, r3
 80047ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80047f6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047f8:	4b88      	ldr	r3, [pc, #544]	; (8004a1c <HAL_RCC_OscConfig+0x934>)
 80047fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004800:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004804:	2102      	movs	r1, #2
 8004806:	6019      	str	r1, [r3, #0]
 8004808:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800480c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	fa93 f1a3 	rbit	r1, r3
 8004816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800481a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800481e:	6019      	str	r1, [r3, #0]
  return result;
 8004820:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004824:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	fab3 f383 	clz	r3, r3
 800482e:	b2db      	uxtb	r3, r3
 8004830:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004834:	b2db      	uxtb	r3, r3
 8004836:	f003 031f 	and.w	r3, r3, #31
 800483a:	2101      	movs	r1, #1
 800483c:	fa01 f303 	lsl.w	r3, r1, r3
 8004840:	4013      	ands	r3, r2
 8004842:	2b00      	cmp	r3, #0
 8004844:	d0a0      	beq.n	8004788 <HAL_RCC_OscConfig+0x6a0>
 8004846:	e08d      	b.n	8004964 <HAL_RCC_OscConfig+0x87c>
 8004848:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800484c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004850:	2201      	movs	r2, #1
 8004852:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004854:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004858:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	fa93 f2a3 	rbit	r2, r3
 8004862:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004866:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800486a:	601a      	str	r2, [r3, #0]
  return result;
 800486c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004870:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004874:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004876:	fab3 f383 	clz	r3, r3
 800487a:	b2db      	uxtb	r3, r3
 800487c:	461a      	mov	r2, r3
 800487e:	4b68      	ldr	r3, [pc, #416]	; (8004a20 <HAL_RCC_OscConfig+0x938>)
 8004880:	4413      	add	r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	461a      	mov	r2, r3
 8004886:	2300      	movs	r3, #0
 8004888:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800488a:	f7fd fa05 	bl	8001c98 <HAL_GetTick>
 800488e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004892:	e00a      	b.n	80048aa <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004894:	f7fd fa00 	bl	8001c98 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d902      	bls.n	80048aa <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	f000 bc55 	b.w	8005154 <HAL_RCC_OscConfig+0x106c>
 80048aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048ae:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80048b2:	2202      	movs	r2, #2
 80048b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048ba:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	fa93 f2a3 	rbit	r2, r3
 80048c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048c8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80048cc:	601a      	str	r2, [r3, #0]
 80048ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048d2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80048d6:	2202      	movs	r2, #2
 80048d8:	601a      	str	r2, [r3, #0]
 80048da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048de:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	fa93 f2a3 	rbit	r2, r3
 80048e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80048f0:	601a      	str	r2, [r3, #0]
 80048f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048fa:	2202      	movs	r2, #2
 80048fc:	601a      	str	r2, [r3, #0]
 80048fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004902:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	fa93 f2a3 	rbit	r2, r3
 800490c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004910:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004914:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004916:	4b41      	ldr	r3, [pc, #260]	; (8004a1c <HAL_RCC_OscConfig+0x934>)
 8004918:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800491a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800491e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004922:	2102      	movs	r1, #2
 8004924:	6019      	str	r1, [r3, #0]
 8004926:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800492a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	fa93 f1a3 	rbit	r1, r3
 8004934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004938:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800493c:	6019      	str	r1, [r3, #0]
  return result;
 800493e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004942:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	fab3 f383 	clz	r3, r3
 800494c:	b2db      	uxtb	r3, r3
 800494e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004952:	b2db      	uxtb	r3, r3
 8004954:	f003 031f 	and.w	r3, r3, #31
 8004958:	2101      	movs	r1, #1
 800495a:	fa01 f303 	lsl.w	r3, r1, r3
 800495e:	4013      	ands	r3, r2
 8004960:	2b00      	cmp	r3, #0
 8004962:	d197      	bne.n	8004894 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004964:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004968:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0304 	and.w	r3, r3, #4
 8004974:	2b00      	cmp	r3, #0
 8004976:	f000 81a1 	beq.w	8004cbc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800497a:	2300      	movs	r3, #0
 800497c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004980:	4b26      	ldr	r3, [pc, #152]	; (8004a1c <HAL_RCC_OscConfig+0x934>)
 8004982:	69db      	ldr	r3, [r3, #28]
 8004984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d116      	bne.n	80049ba <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800498c:	4b23      	ldr	r3, [pc, #140]	; (8004a1c <HAL_RCC_OscConfig+0x934>)
 800498e:	69db      	ldr	r3, [r3, #28]
 8004990:	4a22      	ldr	r2, [pc, #136]	; (8004a1c <HAL_RCC_OscConfig+0x934>)
 8004992:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004996:	61d3      	str	r3, [r2, #28]
 8004998:	4b20      	ldr	r3, [pc, #128]	; (8004a1c <HAL_RCC_OscConfig+0x934>)
 800499a:	69db      	ldr	r3, [r3, #28]
 800499c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80049a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049a4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80049a8:	601a      	str	r2, [r3, #0]
 80049aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049ae:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80049b2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80049b4:	2301      	movs	r3, #1
 80049b6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ba:	4b1a      	ldr	r3, [pc, #104]	; (8004a24 <HAL_RCC_OscConfig+0x93c>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d11a      	bne.n	80049fc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049c6:	4b17      	ldr	r3, [pc, #92]	; (8004a24 <HAL_RCC_OscConfig+0x93c>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a16      	ldr	r2, [pc, #88]	; (8004a24 <HAL_RCC_OscConfig+0x93c>)
 80049cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049d0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049d2:	f7fd f961 	bl	8001c98 <HAL_GetTick>
 80049d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049da:	e009      	b.n	80049f0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049dc:	f7fd f95c 	bl	8001c98 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	2b64      	cmp	r3, #100	; 0x64
 80049ea:	d901      	bls.n	80049f0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e3b1      	b.n	8005154 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049f0:	4b0c      	ldr	r3, [pc, #48]	; (8004a24 <HAL_RCC_OscConfig+0x93c>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d0ef      	beq.n	80049dc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d10d      	bne.n	8004a28 <HAL_RCC_OscConfig+0x940>
 8004a0c:	4b03      	ldr	r3, [pc, #12]	; (8004a1c <HAL_RCC_OscConfig+0x934>)
 8004a0e:	6a1b      	ldr	r3, [r3, #32]
 8004a10:	4a02      	ldr	r2, [pc, #8]	; (8004a1c <HAL_RCC_OscConfig+0x934>)
 8004a12:	f043 0301 	orr.w	r3, r3, #1
 8004a16:	6213      	str	r3, [r2, #32]
 8004a18:	e03c      	b.n	8004a94 <HAL_RCC_OscConfig+0x9ac>
 8004a1a:	bf00      	nop
 8004a1c:	40021000 	.word	0x40021000
 8004a20:	10908120 	.word	0x10908120
 8004a24:	40007000 	.word	0x40007000
 8004a28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d10c      	bne.n	8004a52 <HAL_RCC_OscConfig+0x96a>
 8004a38:	4bc1      	ldr	r3, [pc, #772]	; (8004d40 <HAL_RCC_OscConfig+0xc58>)
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	4ac0      	ldr	r2, [pc, #768]	; (8004d40 <HAL_RCC_OscConfig+0xc58>)
 8004a3e:	f023 0301 	bic.w	r3, r3, #1
 8004a42:	6213      	str	r3, [r2, #32]
 8004a44:	4bbe      	ldr	r3, [pc, #760]	; (8004d40 <HAL_RCC_OscConfig+0xc58>)
 8004a46:	6a1b      	ldr	r3, [r3, #32]
 8004a48:	4abd      	ldr	r2, [pc, #756]	; (8004d40 <HAL_RCC_OscConfig+0xc58>)
 8004a4a:	f023 0304 	bic.w	r3, r3, #4
 8004a4e:	6213      	str	r3, [r2, #32]
 8004a50:	e020      	b.n	8004a94 <HAL_RCC_OscConfig+0x9ac>
 8004a52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	2b05      	cmp	r3, #5
 8004a60:	d10c      	bne.n	8004a7c <HAL_RCC_OscConfig+0x994>
 8004a62:	4bb7      	ldr	r3, [pc, #732]	; (8004d40 <HAL_RCC_OscConfig+0xc58>)
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	4ab6      	ldr	r2, [pc, #728]	; (8004d40 <HAL_RCC_OscConfig+0xc58>)
 8004a68:	f043 0304 	orr.w	r3, r3, #4
 8004a6c:	6213      	str	r3, [r2, #32]
 8004a6e:	4bb4      	ldr	r3, [pc, #720]	; (8004d40 <HAL_RCC_OscConfig+0xc58>)
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	4ab3      	ldr	r2, [pc, #716]	; (8004d40 <HAL_RCC_OscConfig+0xc58>)
 8004a74:	f043 0301 	orr.w	r3, r3, #1
 8004a78:	6213      	str	r3, [r2, #32]
 8004a7a:	e00b      	b.n	8004a94 <HAL_RCC_OscConfig+0x9ac>
 8004a7c:	4bb0      	ldr	r3, [pc, #704]	; (8004d40 <HAL_RCC_OscConfig+0xc58>)
 8004a7e:	6a1b      	ldr	r3, [r3, #32]
 8004a80:	4aaf      	ldr	r2, [pc, #700]	; (8004d40 <HAL_RCC_OscConfig+0xc58>)
 8004a82:	f023 0301 	bic.w	r3, r3, #1
 8004a86:	6213      	str	r3, [r2, #32]
 8004a88:	4bad      	ldr	r3, [pc, #692]	; (8004d40 <HAL_RCC_OscConfig+0xc58>)
 8004a8a:	6a1b      	ldr	r3, [r3, #32]
 8004a8c:	4aac      	ldr	r2, [pc, #688]	; (8004d40 <HAL_RCC_OscConfig+0xc58>)
 8004a8e:	f023 0304 	bic.w	r3, r3, #4
 8004a92:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f000 8081 	beq.w	8004ba8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aa6:	f7fd f8f7 	bl	8001c98 <HAL_GetTick>
 8004aaa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aae:	e00b      	b.n	8004ac8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ab0:	f7fd f8f2 	bl	8001c98 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d901      	bls.n	8004ac8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e345      	b.n	8005154 <HAL_RCC_OscConfig+0x106c>
 8004ac8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004acc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004ad0:	2202      	movs	r2, #2
 8004ad2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ad8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	fa93 f2a3 	rbit	r2, r3
 8004ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ae6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004aea:	601a      	str	r2, [r3, #0]
 8004aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004af0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004af4:	2202      	movs	r2, #2
 8004af6:	601a      	str	r2, [r3, #0]
 8004af8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004afc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	fa93 f2a3 	rbit	r2, r3
 8004b06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b0a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004b0e:	601a      	str	r2, [r3, #0]
  return result;
 8004b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b14:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004b18:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b1a:	fab3 f383 	clz	r3, r3
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	095b      	lsrs	r3, r3, #5
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	f043 0302 	orr.w	r3, r3, #2
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d102      	bne.n	8004b34 <HAL_RCC_OscConfig+0xa4c>
 8004b2e:	4b84      	ldr	r3, [pc, #528]	; (8004d40 <HAL_RCC_OscConfig+0xc58>)
 8004b30:	6a1b      	ldr	r3, [r3, #32]
 8004b32:	e013      	b.n	8004b5c <HAL_RCC_OscConfig+0xa74>
 8004b34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b38:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004b3c:	2202      	movs	r2, #2
 8004b3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b44:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	fa93 f2a3 	rbit	r2, r3
 8004b4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b52:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004b56:	601a      	str	r2, [r3, #0]
 8004b58:	4b79      	ldr	r3, [pc, #484]	; (8004d40 <HAL_RCC_OscConfig+0xc58>)
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b60:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004b64:	2102      	movs	r1, #2
 8004b66:	6011      	str	r1, [r2, #0]
 8004b68:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b6c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004b70:	6812      	ldr	r2, [r2, #0]
 8004b72:	fa92 f1a2 	rbit	r1, r2
 8004b76:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b7a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004b7e:	6011      	str	r1, [r2, #0]
  return result;
 8004b80:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b84:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004b88:	6812      	ldr	r2, [r2, #0]
 8004b8a:	fab2 f282 	clz	r2, r2
 8004b8e:	b2d2      	uxtb	r2, r2
 8004b90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b94:	b2d2      	uxtb	r2, r2
 8004b96:	f002 021f 	and.w	r2, r2, #31
 8004b9a:	2101      	movs	r1, #1
 8004b9c:	fa01 f202 	lsl.w	r2, r1, r2
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d084      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x9c8>
 8004ba6:	e07f      	b.n	8004ca8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ba8:	f7fd f876 	bl	8001c98 <HAL_GetTick>
 8004bac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bb0:	e00b      	b.n	8004bca <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bb2:	f7fd f871 	bl	8001c98 <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e2c4      	b.n	8005154 <HAL_RCC_OscConfig+0x106c>
 8004bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bce:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004bd2:	2202      	movs	r2, #2
 8004bd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bda:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	fa93 f2a3 	rbit	r2, r3
 8004be4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004be8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004bec:	601a      	str	r2, [r3, #0]
 8004bee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bf2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004bf6:	2202      	movs	r2, #2
 8004bf8:	601a      	str	r2, [r3, #0]
 8004bfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bfe:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	fa93 f2a3 	rbit	r2, r3
 8004c08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c0c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004c10:	601a      	str	r2, [r3, #0]
  return result;
 8004c12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c16:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004c1a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c1c:	fab3 f383 	clz	r3, r3
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	095b      	lsrs	r3, r3, #5
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	f043 0302 	orr.w	r3, r3, #2
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d102      	bne.n	8004c36 <HAL_RCC_OscConfig+0xb4e>
 8004c30:	4b43      	ldr	r3, [pc, #268]	; (8004d40 <HAL_RCC_OscConfig+0xc58>)
 8004c32:	6a1b      	ldr	r3, [r3, #32]
 8004c34:	e013      	b.n	8004c5e <HAL_RCC_OscConfig+0xb76>
 8004c36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c3a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004c3e:	2202      	movs	r2, #2
 8004c40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c46:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	fa93 f2a3 	rbit	r2, r3
 8004c50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c54:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004c58:	601a      	str	r2, [r3, #0]
 8004c5a:	4b39      	ldr	r3, [pc, #228]	; (8004d40 <HAL_RCC_OscConfig+0xc58>)
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c62:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004c66:	2102      	movs	r1, #2
 8004c68:	6011      	str	r1, [r2, #0]
 8004c6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c6e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004c72:	6812      	ldr	r2, [r2, #0]
 8004c74:	fa92 f1a2 	rbit	r1, r2
 8004c78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c7c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004c80:	6011      	str	r1, [r2, #0]
  return result;
 8004c82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c86:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004c8a:	6812      	ldr	r2, [r2, #0]
 8004c8c:	fab2 f282 	clz	r2, r2
 8004c90:	b2d2      	uxtb	r2, r2
 8004c92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c96:	b2d2      	uxtb	r2, r2
 8004c98:	f002 021f 	and.w	r2, r2, #31
 8004c9c:	2101      	movs	r1, #1
 8004c9e:	fa01 f202 	lsl.w	r2, r1, r2
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d184      	bne.n	8004bb2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004ca8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d105      	bne.n	8004cbc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cb0:	4b23      	ldr	r3, [pc, #140]	; (8004d40 <HAL_RCC_OscConfig+0xc58>)
 8004cb2:	69db      	ldr	r3, [r3, #28]
 8004cb4:	4a22      	ldr	r2, [pc, #136]	; (8004d40 <HAL_RCC_OscConfig+0xc58>)
 8004cb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cba:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cc0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	69db      	ldr	r3, [r3, #28]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f000 8242 	beq.w	8005152 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004cce:	4b1c      	ldr	r3, [pc, #112]	; (8004d40 <HAL_RCC_OscConfig+0xc58>)
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f003 030c 	and.w	r3, r3, #12
 8004cd6:	2b08      	cmp	r3, #8
 8004cd8:	f000 8213 	beq.w	8005102 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ce0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	69db      	ldr	r3, [r3, #28]
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	f040 8162 	bne.w	8004fb2 <HAL_RCC_OscConfig+0xeca>
 8004cee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cf2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004cf6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004cfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d00:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	fa93 f2a3 	rbit	r2, r3
 8004d0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d0e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004d12:	601a      	str	r2, [r3, #0]
  return result;
 8004d14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d18:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004d1c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d1e:	fab3 f383 	clz	r3, r3
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004d28:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	461a      	mov	r2, r3
 8004d30:	2300      	movs	r3, #0
 8004d32:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d34:	f7fc ffb0 	bl	8001c98 <HAL_GetTick>
 8004d38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d3c:	e00c      	b.n	8004d58 <HAL_RCC_OscConfig+0xc70>
 8004d3e:	bf00      	nop
 8004d40:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d44:	f7fc ffa8 	bl	8001c98 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d901      	bls.n	8004d58 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e1fd      	b.n	8005154 <HAL_RCC_OscConfig+0x106c>
 8004d58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d5c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004d60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d6a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	fa93 f2a3 	rbit	r2, r3
 8004d74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d78:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004d7c:	601a      	str	r2, [r3, #0]
  return result;
 8004d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d82:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004d86:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d88:	fab3 f383 	clz	r3, r3
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	095b      	lsrs	r3, r3, #5
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	f043 0301 	orr.w	r3, r3, #1
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d102      	bne.n	8004da2 <HAL_RCC_OscConfig+0xcba>
 8004d9c:	4bb0      	ldr	r3, [pc, #704]	; (8005060 <HAL_RCC_OscConfig+0xf78>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	e027      	b.n	8004df2 <HAL_RCC_OscConfig+0xd0a>
 8004da2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004da6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004daa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004dae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004db4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	fa93 f2a3 	rbit	r2, r3
 8004dbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dc2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004dc6:	601a      	str	r2, [r3, #0]
 8004dc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dcc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004dd0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004dd4:	601a      	str	r2, [r3, #0]
 8004dd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dda:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	fa93 f2a3 	rbit	r2, r3
 8004de4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004de8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004dec:	601a      	str	r2, [r3, #0]
 8004dee:	4b9c      	ldr	r3, [pc, #624]	; (8005060 <HAL_RCC_OscConfig+0xf78>)
 8004df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004df6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004dfa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004dfe:	6011      	str	r1, [r2, #0]
 8004e00:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e04:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004e08:	6812      	ldr	r2, [r2, #0]
 8004e0a:	fa92 f1a2 	rbit	r1, r2
 8004e0e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e12:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004e16:	6011      	str	r1, [r2, #0]
  return result;
 8004e18:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e1c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004e20:	6812      	ldr	r2, [r2, #0]
 8004e22:	fab2 f282 	clz	r2, r2
 8004e26:	b2d2      	uxtb	r2, r2
 8004e28:	f042 0220 	orr.w	r2, r2, #32
 8004e2c:	b2d2      	uxtb	r2, r2
 8004e2e:	f002 021f 	and.w	r2, r2, #31
 8004e32:	2101      	movs	r1, #1
 8004e34:	fa01 f202 	lsl.w	r2, r1, r2
 8004e38:	4013      	ands	r3, r2
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d182      	bne.n	8004d44 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e3e:	4b88      	ldr	r3, [pc, #544]	; (8005060 <HAL_RCC_OscConfig+0xf78>)
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004e46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004e52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	430b      	orrs	r3, r1
 8004e60:	497f      	ldr	r1, [pc, #508]	; (8005060 <HAL_RCC_OscConfig+0xf78>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	604b      	str	r3, [r1, #4]
 8004e66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e6a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004e6e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e78:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	fa93 f2a3 	rbit	r2, r3
 8004e82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e86:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004e8a:	601a      	str	r2, [r3, #0]
  return result;
 8004e8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e90:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004e94:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e96:	fab3 f383 	clz	r3, r3
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004ea0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eac:	f7fc fef4 	bl	8001c98 <HAL_GetTick>
 8004eb0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004eb4:	e009      	b.n	8004eca <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004eb6:	f7fc feef 	bl	8001c98 <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d901      	bls.n	8004eca <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e144      	b.n	8005154 <HAL_RCC_OscConfig+0x106c>
 8004eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ece:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004ed2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ed6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ed8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004edc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	fa93 f2a3 	rbit	r2, r3
 8004ee6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eea:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004eee:	601a      	str	r2, [r3, #0]
  return result;
 8004ef0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ef4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004ef8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004efa:	fab3 f383 	clz	r3, r3
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	095b      	lsrs	r3, r3, #5
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	f043 0301 	orr.w	r3, r3, #1
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d102      	bne.n	8004f14 <HAL_RCC_OscConfig+0xe2c>
 8004f0e:	4b54      	ldr	r3, [pc, #336]	; (8005060 <HAL_RCC_OscConfig+0xf78>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	e027      	b.n	8004f64 <HAL_RCC_OscConfig+0xe7c>
 8004f14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f18:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004f1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f26:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	fa93 f2a3 	rbit	r2, r3
 8004f30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f34:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004f38:	601a      	str	r2, [r3, #0]
 8004f3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f3e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004f42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f46:	601a      	str	r2, [r3, #0]
 8004f48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f4c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	fa93 f2a3 	rbit	r2, r3
 8004f56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f5a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004f5e:	601a      	str	r2, [r3, #0]
 8004f60:	4b3f      	ldr	r3, [pc, #252]	; (8005060 <HAL_RCC_OscConfig+0xf78>)
 8004f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f68:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004f6c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004f70:	6011      	str	r1, [r2, #0]
 8004f72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f76:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004f7a:	6812      	ldr	r2, [r2, #0]
 8004f7c:	fa92 f1a2 	rbit	r1, r2
 8004f80:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f84:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004f88:	6011      	str	r1, [r2, #0]
  return result;
 8004f8a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f8e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004f92:	6812      	ldr	r2, [r2, #0]
 8004f94:	fab2 f282 	clz	r2, r2
 8004f98:	b2d2      	uxtb	r2, r2
 8004f9a:	f042 0220 	orr.w	r2, r2, #32
 8004f9e:	b2d2      	uxtb	r2, r2
 8004fa0:	f002 021f 	and.w	r2, r2, #31
 8004fa4:	2101      	movs	r1, #1
 8004fa6:	fa01 f202 	lsl.w	r2, r1, r2
 8004faa:	4013      	ands	r3, r2
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d082      	beq.n	8004eb6 <HAL_RCC_OscConfig+0xdce>
 8004fb0:	e0cf      	b.n	8005152 <HAL_RCC_OscConfig+0x106a>
 8004fb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fb6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004fba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004fbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fc4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	fa93 f2a3 	rbit	r2, r3
 8004fce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fd2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004fd6:	601a      	str	r2, [r3, #0]
  return result;
 8004fd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fdc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004fe0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fe2:	fab3 f383 	clz	r3, r3
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004fec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff8:	f7fc fe4e 	bl	8001c98 <HAL_GetTick>
 8004ffc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005000:	e009      	b.n	8005016 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005002:	f7fc fe49 	bl	8001c98 <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	2b02      	cmp	r3, #2
 8005010:	d901      	bls.n	8005016 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e09e      	b.n	8005154 <HAL_RCC_OscConfig+0x106c>
 8005016:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800501a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800501e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005022:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005024:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005028:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	fa93 f2a3 	rbit	r2, r3
 8005032:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005036:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800503a:	601a      	str	r2, [r3, #0]
  return result;
 800503c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005040:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005044:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005046:	fab3 f383 	clz	r3, r3
 800504a:	b2db      	uxtb	r3, r3
 800504c:	095b      	lsrs	r3, r3, #5
 800504e:	b2db      	uxtb	r3, r3
 8005050:	f043 0301 	orr.w	r3, r3, #1
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b01      	cmp	r3, #1
 8005058:	d104      	bne.n	8005064 <HAL_RCC_OscConfig+0xf7c>
 800505a:	4b01      	ldr	r3, [pc, #4]	; (8005060 <HAL_RCC_OscConfig+0xf78>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	e029      	b.n	80050b4 <HAL_RCC_OscConfig+0xfcc>
 8005060:	40021000 	.word	0x40021000
 8005064:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005068:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800506c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005070:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005072:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005076:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	fa93 f2a3 	rbit	r2, r3
 8005080:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005084:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005088:	601a      	str	r2, [r3, #0]
 800508a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800508e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005092:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005096:	601a      	str	r2, [r3, #0]
 8005098:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800509c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	fa93 f2a3 	rbit	r2, r3
 80050a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050aa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80050ae:	601a      	str	r2, [r3, #0]
 80050b0:	4b2b      	ldr	r3, [pc, #172]	; (8005160 <HAL_RCC_OscConfig+0x1078>)
 80050b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050b8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80050bc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80050c0:	6011      	str	r1, [r2, #0]
 80050c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050c6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80050ca:	6812      	ldr	r2, [r2, #0]
 80050cc:	fa92 f1a2 	rbit	r1, r2
 80050d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050d4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80050d8:	6011      	str	r1, [r2, #0]
  return result;
 80050da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050de:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80050e2:	6812      	ldr	r2, [r2, #0]
 80050e4:	fab2 f282 	clz	r2, r2
 80050e8:	b2d2      	uxtb	r2, r2
 80050ea:	f042 0220 	orr.w	r2, r2, #32
 80050ee:	b2d2      	uxtb	r2, r2
 80050f0:	f002 021f 	and.w	r2, r2, #31
 80050f4:	2101      	movs	r1, #1
 80050f6:	fa01 f202 	lsl.w	r2, r1, r2
 80050fa:	4013      	ands	r3, r2
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d180      	bne.n	8005002 <HAL_RCC_OscConfig+0xf1a>
 8005100:	e027      	b.n	8005152 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005106:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	69db      	ldr	r3, [r3, #28]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d101      	bne.n	8005116 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e01e      	b.n	8005154 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005116:	4b12      	ldr	r3, [pc, #72]	; (8005160 <HAL_RCC_OscConfig+0x1078>)
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800511e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005122:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005126:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800512a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	429a      	cmp	r2, r3
 8005134:	d10b      	bne.n	800514e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005136:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800513a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800513e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005142:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800514a:	429a      	cmp	r2, r3
 800514c:	d001      	beq.n	8005152 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e000      	b.n	8005154 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	40021000 	.word	0x40021000

08005164 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b09e      	sub	sp, #120	; 0x78
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800516e:	2300      	movs	r3, #0
 8005170:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d101      	bne.n	800517c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e162      	b.n	8005442 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800517c:	4b90      	ldr	r3, [pc, #576]	; (80053c0 <HAL_RCC_ClockConfig+0x25c>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0307 	and.w	r3, r3, #7
 8005184:	683a      	ldr	r2, [r7, #0]
 8005186:	429a      	cmp	r2, r3
 8005188:	d910      	bls.n	80051ac <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800518a:	4b8d      	ldr	r3, [pc, #564]	; (80053c0 <HAL_RCC_ClockConfig+0x25c>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f023 0207 	bic.w	r2, r3, #7
 8005192:	498b      	ldr	r1, [pc, #556]	; (80053c0 <HAL_RCC_ClockConfig+0x25c>)
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	4313      	orrs	r3, r2
 8005198:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800519a:	4b89      	ldr	r3, [pc, #548]	; (80053c0 <HAL_RCC_ClockConfig+0x25c>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0307 	and.w	r3, r3, #7
 80051a2:	683a      	ldr	r2, [r7, #0]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d001      	beq.n	80051ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e14a      	b.n	8005442 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0302 	and.w	r3, r3, #2
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d008      	beq.n	80051ca <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051b8:	4b82      	ldr	r3, [pc, #520]	; (80053c4 <HAL_RCC_ClockConfig+0x260>)
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	497f      	ldr	r1, [pc, #508]	; (80053c4 <HAL_RCC_ClockConfig+0x260>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0301 	and.w	r3, r3, #1
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	f000 80dc 	beq.w	8005390 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d13c      	bne.n	800525a <HAL_RCC_ClockConfig+0xf6>
 80051e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80051e4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051e8:	fa93 f3a3 	rbit	r3, r3
 80051ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80051ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051f0:	fab3 f383 	clz	r3, r3
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	095b      	lsrs	r3, r3, #5
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	f043 0301 	orr.w	r3, r3, #1
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	2b01      	cmp	r3, #1
 8005202:	d102      	bne.n	800520a <HAL_RCC_ClockConfig+0xa6>
 8005204:	4b6f      	ldr	r3, [pc, #444]	; (80053c4 <HAL_RCC_ClockConfig+0x260>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	e00f      	b.n	800522a <HAL_RCC_ClockConfig+0xc6>
 800520a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800520e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005210:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005212:	fa93 f3a3 	rbit	r3, r3
 8005216:	667b      	str	r3, [r7, #100]	; 0x64
 8005218:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800521c:	663b      	str	r3, [r7, #96]	; 0x60
 800521e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005220:	fa93 f3a3 	rbit	r3, r3
 8005224:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005226:	4b67      	ldr	r3, [pc, #412]	; (80053c4 <HAL_RCC_ClockConfig+0x260>)
 8005228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800522e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005230:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005232:	fa92 f2a2 	rbit	r2, r2
 8005236:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005238:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800523a:	fab2 f282 	clz	r2, r2
 800523e:	b2d2      	uxtb	r2, r2
 8005240:	f042 0220 	orr.w	r2, r2, #32
 8005244:	b2d2      	uxtb	r2, r2
 8005246:	f002 021f 	and.w	r2, r2, #31
 800524a:	2101      	movs	r1, #1
 800524c:	fa01 f202 	lsl.w	r2, r1, r2
 8005250:	4013      	ands	r3, r2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d17b      	bne.n	800534e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e0f3      	b.n	8005442 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	2b02      	cmp	r3, #2
 8005260:	d13c      	bne.n	80052dc <HAL_RCC_ClockConfig+0x178>
 8005262:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005266:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005268:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800526a:	fa93 f3a3 	rbit	r3, r3
 800526e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005272:	fab3 f383 	clz	r3, r3
 8005276:	b2db      	uxtb	r3, r3
 8005278:	095b      	lsrs	r3, r3, #5
 800527a:	b2db      	uxtb	r3, r3
 800527c:	f043 0301 	orr.w	r3, r3, #1
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b01      	cmp	r3, #1
 8005284:	d102      	bne.n	800528c <HAL_RCC_ClockConfig+0x128>
 8005286:	4b4f      	ldr	r3, [pc, #316]	; (80053c4 <HAL_RCC_ClockConfig+0x260>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	e00f      	b.n	80052ac <HAL_RCC_ClockConfig+0x148>
 800528c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005290:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005292:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005294:	fa93 f3a3 	rbit	r3, r3
 8005298:	647b      	str	r3, [r7, #68]	; 0x44
 800529a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800529e:	643b      	str	r3, [r7, #64]	; 0x40
 80052a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052a2:	fa93 f3a3 	rbit	r3, r3
 80052a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052a8:	4b46      	ldr	r3, [pc, #280]	; (80053c4 <HAL_RCC_ClockConfig+0x260>)
 80052aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052b0:	63ba      	str	r2, [r7, #56]	; 0x38
 80052b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052b4:	fa92 f2a2 	rbit	r2, r2
 80052b8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80052ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052bc:	fab2 f282 	clz	r2, r2
 80052c0:	b2d2      	uxtb	r2, r2
 80052c2:	f042 0220 	orr.w	r2, r2, #32
 80052c6:	b2d2      	uxtb	r2, r2
 80052c8:	f002 021f 	and.w	r2, r2, #31
 80052cc:	2101      	movs	r1, #1
 80052ce:	fa01 f202 	lsl.w	r2, r1, r2
 80052d2:	4013      	ands	r3, r2
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d13a      	bne.n	800534e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e0b2      	b.n	8005442 <HAL_RCC_ClockConfig+0x2de>
 80052dc:	2302      	movs	r3, #2
 80052de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e2:	fa93 f3a3 	rbit	r3, r3
 80052e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80052e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052ea:	fab3 f383 	clz	r3, r3
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	095b      	lsrs	r3, r3, #5
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	f043 0301 	orr.w	r3, r3, #1
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d102      	bne.n	8005304 <HAL_RCC_ClockConfig+0x1a0>
 80052fe:	4b31      	ldr	r3, [pc, #196]	; (80053c4 <HAL_RCC_ClockConfig+0x260>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	e00d      	b.n	8005320 <HAL_RCC_ClockConfig+0x1bc>
 8005304:	2302      	movs	r3, #2
 8005306:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530a:	fa93 f3a3 	rbit	r3, r3
 800530e:	627b      	str	r3, [r7, #36]	; 0x24
 8005310:	2302      	movs	r3, #2
 8005312:	623b      	str	r3, [r7, #32]
 8005314:	6a3b      	ldr	r3, [r7, #32]
 8005316:	fa93 f3a3 	rbit	r3, r3
 800531a:	61fb      	str	r3, [r7, #28]
 800531c:	4b29      	ldr	r3, [pc, #164]	; (80053c4 <HAL_RCC_ClockConfig+0x260>)
 800531e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005320:	2202      	movs	r2, #2
 8005322:	61ba      	str	r2, [r7, #24]
 8005324:	69ba      	ldr	r2, [r7, #24]
 8005326:	fa92 f2a2 	rbit	r2, r2
 800532a:	617a      	str	r2, [r7, #20]
  return result;
 800532c:	697a      	ldr	r2, [r7, #20]
 800532e:	fab2 f282 	clz	r2, r2
 8005332:	b2d2      	uxtb	r2, r2
 8005334:	f042 0220 	orr.w	r2, r2, #32
 8005338:	b2d2      	uxtb	r2, r2
 800533a:	f002 021f 	and.w	r2, r2, #31
 800533e:	2101      	movs	r1, #1
 8005340:	fa01 f202 	lsl.w	r2, r1, r2
 8005344:	4013      	ands	r3, r2
 8005346:	2b00      	cmp	r3, #0
 8005348:	d101      	bne.n	800534e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e079      	b.n	8005442 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800534e:	4b1d      	ldr	r3, [pc, #116]	; (80053c4 <HAL_RCC_ClockConfig+0x260>)
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	f023 0203 	bic.w	r2, r3, #3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	491a      	ldr	r1, [pc, #104]	; (80053c4 <HAL_RCC_ClockConfig+0x260>)
 800535c:	4313      	orrs	r3, r2
 800535e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005360:	f7fc fc9a 	bl	8001c98 <HAL_GetTick>
 8005364:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005366:	e00a      	b.n	800537e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005368:	f7fc fc96 	bl	8001c98 <HAL_GetTick>
 800536c:	4602      	mov	r2, r0
 800536e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	f241 3288 	movw	r2, #5000	; 0x1388
 8005376:	4293      	cmp	r3, r2
 8005378:	d901      	bls.n	800537e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e061      	b.n	8005442 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800537e:	4b11      	ldr	r3, [pc, #68]	; (80053c4 <HAL_RCC_ClockConfig+0x260>)
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	f003 020c 	and.w	r2, r3, #12
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	429a      	cmp	r2, r3
 800538e:	d1eb      	bne.n	8005368 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005390:	4b0b      	ldr	r3, [pc, #44]	; (80053c0 <HAL_RCC_ClockConfig+0x25c>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0307 	and.w	r3, r3, #7
 8005398:	683a      	ldr	r2, [r7, #0]
 800539a:	429a      	cmp	r2, r3
 800539c:	d214      	bcs.n	80053c8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800539e:	4b08      	ldr	r3, [pc, #32]	; (80053c0 <HAL_RCC_ClockConfig+0x25c>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f023 0207 	bic.w	r2, r3, #7
 80053a6:	4906      	ldr	r1, [pc, #24]	; (80053c0 <HAL_RCC_ClockConfig+0x25c>)
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ae:	4b04      	ldr	r3, [pc, #16]	; (80053c0 <HAL_RCC_ClockConfig+0x25c>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0307 	and.w	r3, r3, #7
 80053b6:	683a      	ldr	r2, [r7, #0]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d005      	beq.n	80053c8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e040      	b.n	8005442 <HAL_RCC_ClockConfig+0x2de>
 80053c0:	40022000 	.word	0x40022000
 80053c4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0304 	and.w	r3, r3, #4
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d008      	beq.n	80053e6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053d4:	4b1d      	ldr	r3, [pc, #116]	; (800544c <HAL_RCC_ClockConfig+0x2e8>)
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	491a      	ldr	r1, [pc, #104]	; (800544c <HAL_RCC_ClockConfig+0x2e8>)
 80053e2:	4313      	orrs	r3, r2
 80053e4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0308 	and.w	r3, r3, #8
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d009      	beq.n	8005406 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053f2:	4b16      	ldr	r3, [pc, #88]	; (800544c <HAL_RCC_ClockConfig+0x2e8>)
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	00db      	lsls	r3, r3, #3
 8005400:	4912      	ldr	r1, [pc, #72]	; (800544c <HAL_RCC_ClockConfig+0x2e8>)
 8005402:	4313      	orrs	r3, r2
 8005404:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005406:	f000 f829 	bl	800545c <HAL_RCC_GetSysClockFreq>
 800540a:	4601      	mov	r1, r0
 800540c:	4b0f      	ldr	r3, [pc, #60]	; (800544c <HAL_RCC_ClockConfig+0x2e8>)
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005414:	22f0      	movs	r2, #240	; 0xf0
 8005416:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	fa92 f2a2 	rbit	r2, r2
 800541e:	60fa      	str	r2, [r7, #12]
  return result;
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	fab2 f282 	clz	r2, r2
 8005426:	b2d2      	uxtb	r2, r2
 8005428:	40d3      	lsrs	r3, r2
 800542a:	4a09      	ldr	r2, [pc, #36]	; (8005450 <HAL_RCC_ClockConfig+0x2ec>)
 800542c:	5cd3      	ldrb	r3, [r2, r3]
 800542e:	fa21 f303 	lsr.w	r3, r1, r3
 8005432:	4a08      	ldr	r2, [pc, #32]	; (8005454 <HAL_RCC_ClockConfig+0x2f0>)
 8005434:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005436:	4b08      	ldr	r3, [pc, #32]	; (8005458 <HAL_RCC_ClockConfig+0x2f4>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4618      	mov	r0, r3
 800543c:	f7fc fbe8 	bl	8001c10 <HAL_InitTick>
  
  return HAL_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3778      	adds	r7, #120	; 0x78
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	40021000 	.word	0x40021000
 8005450:	08009328 	.word	0x08009328
 8005454:	20000000 	.word	0x20000000
 8005458:	20000004 	.word	0x20000004

0800545c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800545c:	b480      	push	{r7}
 800545e:	b08b      	sub	sp, #44	; 0x2c
 8005460:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005462:	2300      	movs	r3, #0
 8005464:	61fb      	str	r3, [r7, #28]
 8005466:	2300      	movs	r3, #0
 8005468:	61bb      	str	r3, [r7, #24]
 800546a:	2300      	movs	r3, #0
 800546c:	627b      	str	r3, [r7, #36]	; 0x24
 800546e:	2300      	movs	r3, #0
 8005470:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005472:	2300      	movs	r3, #0
 8005474:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005476:	4b29      	ldr	r3, [pc, #164]	; (800551c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	f003 030c 	and.w	r3, r3, #12
 8005482:	2b04      	cmp	r3, #4
 8005484:	d002      	beq.n	800548c <HAL_RCC_GetSysClockFreq+0x30>
 8005486:	2b08      	cmp	r3, #8
 8005488:	d003      	beq.n	8005492 <HAL_RCC_GetSysClockFreq+0x36>
 800548a:	e03c      	b.n	8005506 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800548c:	4b24      	ldr	r3, [pc, #144]	; (8005520 <HAL_RCC_GetSysClockFreq+0xc4>)
 800548e:	623b      	str	r3, [r7, #32]
      break;
 8005490:	e03c      	b.n	800550c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005498:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800549c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800549e:	68ba      	ldr	r2, [r7, #8]
 80054a0:	fa92 f2a2 	rbit	r2, r2
 80054a4:	607a      	str	r2, [r7, #4]
  return result;
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	fab2 f282 	clz	r2, r2
 80054ac:	b2d2      	uxtb	r2, r2
 80054ae:	40d3      	lsrs	r3, r2
 80054b0:	4a1c      	ldr	r2, [pc, #112]	; (8005524 <HAL_RCC_GetSysClockFreq+0xc8>)
 80054b2:	5cd3      	ldrb	r3, [r2, r3]
 80054b4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80054b6:	4b19      	ldr	r3, [pc, #100]	; (800551c <HAL_RCC_GetSysClockFreq+0xc0>)
 80054b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ba:	f003 030f 	and.w	r3, r3, #15
 80054be:	220f      	movs	r2, #15
 80054c0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054c2:	693a      	ldr	r2, [r7, #16]
 80054c4:	fa92 f2a2 	rbit	r2, r2
 80054c8:	60fa      	str	r2, [r7, #12]
  return result;
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	fab2 f282 	clz	r2, r2
 80054d0:	b2d2      	uxtb	r2, r2
 80054d2:	40d3      	lsrs	r3, r2
 80054d4:	4a14      	ldr	r2, [pc, #80]	; (8005528 <HAL_RCC_GetSysClockFreq+0xcc>)
 80054d6:	5cd3      	ldrb	r3, [r2, r3]
 80054d8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d008      	beq.n	80054f6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80054e4:	4a0e      	ldr	r2, [pc, #56]	; (8005520 <HAL_RCC_GetSysClockFreq+0xc4>)
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	fb02 f303 	mul.w	r3, r2, r3
 80054f2:	627b      	str	r3, [r7, #36]	; 0x24
 80054f4:	e004      	b.n	8005500 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	4a0c      	ldr	r2, [pc, #48]	; (800552c <HAL_RCC_GetSysClockFreq+0xd0>)
 80054fa:	fb02 f303 	mul.w	r3, r2, r3
 80054fe:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005502:	623b      	str	r3, [r7, #32]
      break;
 8005504:	e002      	b.n	800550c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005506:	4b06      	ldr	r3, [pc, #24]	; (8005520 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005508:	623b      	str	r3, [r7, #32]
      break;
 800550a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800550c:	6a3b      	ldr	r3, [r7, #32]
}
 800550e:	4618      	mov	r0, r3
 8005510:	372c      	adds	r7, #44	; 0x2c
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	40021000 	.word	0x40021000
 8005520:	007a1200 	.word	0x007a1200
 8005524:	08009340 	.word	0x08009340
 8005528:	08009350 	.word	0x08009350
 800552c:	003d0900 	.word	0x003d0900

08005530 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005530:	b480      	push	{r7}
 8005532:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005534:	4b03      	ldr	r3, [pc, #12]	; (8005544 <HAL_RCC_GetHCLKFreq+0x14>)
 8005536:	681b      	ldr	r3, [r3, #0]
}
 8005538:	4618      	mov	r0, r3
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	20000000 	.word	0x20000000

08005548 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800554e:	f7ff ffef 	bl	8005530 <HAL_RCC_GetHCLKFreq>
 8005552:	4601      	mov	r1, r0
 8005554:	4b0b      	ldr	r3, [pc, #44]	; (8005584 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800555c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005560:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	fa92 f2a2 	rbit	r2, r2
 8005568:	603a      	str	r2, [r7, #0]
  return result;
 800556a:	683a      	ldr	r2, [r7, #0]
 800556c:	fab2 f282 	clz	r2, r2
 8005570:	b2d2      	uxtb	r2, r2
 8005572:	40d3      	lsrs	r3, r2
 8005574:	4a04      	ldr	r2, [pc, #16]	; (8005588 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005576:	5cd3      	ldrb	r3, [r2, r3]
 8005578:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800557c:	4618      	mov	r0, r3
 800557e:	3708      	adds	r7, #8
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	40021000 	.word	0x40021000
 8005588:	08009338 	.word	0x08009338

0800558c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005592:	f7ff ffcd 	bl	8005530 <HAL_RCC_GetHCLKFreq>
 8005596:	4601      	mov	r1, r0
 8005598:	4b0b      	ldr	r3, [pc, #44]	; (80055c8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80055a0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80055a4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	fa92 f2a2 	rbit	r2, r2
 80055ac:	603a      	str	r2, [r7, #0]
  return result;
 80055ae:	683a      	ldr	r2, [r7, #0]
 80055b0:	fab2 f282 	clz	r2, r2
 80055b4:	b2d2      	uxtb	r2, r2
 80055b6:	40d3      	lsrs	r3, r2
 80055b8:	4a04      	ldr	r2, [pc, #16]	; (80055cc <HAL_RCC_GetPCLK2Freq+0x40>)
 80055ba:	5cd3      	ldrb	r3, [r2, r3]
 80055bc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80055c0:	4618      	mov	r0, r3
 80055c2:	3708      	adds	r7, #8
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	40021000 	.word	0x40021000
 80055cc:	08009338 	.word	0x08009338

080055d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b092      	sub	sp, #72	; 0x48
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80055d8:	2300      	movs	r3, #0
 80055da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80055dc:	2300      	movs	r3, #0
 80055de:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80055e0:	2300      	movs	r3, #0
 80055e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	f000 80d4 	beq.w	800579c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055f4:	4b4e      	ldr	r3, [pc, #312]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055f6:	69db      	ldr	r3, [r3, #28]
 80055f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d10e      	bne.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005600:	4b4b      	ldr	r3, [pc, #300]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005602:	69db      	ldr	r3, [r3, #28]
 8005604:	4a4a      	ldr	r2, [pc, #296]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800560a:	61d3      	str	r3, [r2, #28]
 800560c:	4b48      	ldr	r3, [pc, #288]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800560e:	69db      	ldr	r3, [r3, #28]
 8005610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005614:	60bb      	str	r3, [r7, #8]
 8005616:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005618:	2301      	movs	r3, #1
 800561a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800561e:	4b45      	ldr	r3, [pc, #276]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005626:	2b00      	cmp	r3, #0
 8005628:	d118      	bne.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800562a:	4b42      	ldr	r3, [pc, #264]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a41      	ldr	r2, [pc, #260]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005634:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005636:	f7fc fb2f 	bl	8001c98 <HAL_GetTick>
 800563a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800563c:	e008      	b.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800563e:	f7fc fb2b 	bl	8001c98 <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	2b64      	cmp	r3, #100	; 0x64
 800564a:	d901      	bls.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e169      	b.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005650:	4b38      	ldr	r3, [pc, #224]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005658:	2b00      	cmp	r3, #0
 800565a:	d0f0      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800565c:	4b34      	ldr	r3, [pc, #208]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800565e:	6a1b      	ldr	r3, [r3, #32]
 8005660:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005664:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005668:	2b00      	cmp	r3, #0
 800566a:	f000 8084 	beq.w	8005776 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005676:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005678:	429a      	cmp	r2, r3
 800567a:	d07c      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800567c:	4b2c      	ldr	r3, [pc, #176]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800567e:	6a1b      	ldr	r3, [r3, #32]
 8005680:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005684:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005686:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800568a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800568c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800568e:	fa93 f3a3 	rbit	r3, r3
 8005692:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005696:	fab3 f383 	clz	r3, r3
 800569a:	b2db      	uxtb	r3, r3
 800569c:	461a      	mov	r2, r3
 800569e:	4b26      	ldr	r3, [pc, #152]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80056a0:	4413      	add	r3, r2
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	461a      	mov	r2, r3
 80056a6:	2301      	movs	r3, #1
 80056a8:	6013      	str	r3, [r2, #0]
 80056aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80056ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b2:	fa93 f3a3 	rbit	r3, r3
 80056b6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80056b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056ba:	fab3 f383 	clz	r3, r3
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	461a      	mov	r2, r3
 80056c2:	4b1d      	ldr	r3, [pc, #116]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80056c4:	4413      	add	r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	461a      	mov	r2, r3
 80056ca:	2300      	movs	r3, #0
 80056cc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80056ce:	4a18      	ldr	r2, [pc, #96]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056d2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80056d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d04b      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056de:	f7fc fadb 	bl	8001c98 <HAL_GetTick>
 80056e2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056e4:	e00a      	b.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056e6:	f7fc fad7 	bl	8001c98 <HAL_GetTick>
 80056ea:	4602      	mov	r2, r0
 80056ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d901      	bls.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	e113      	b.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80056fc:	2302      	movs	r3, #2
 80056fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005702:	fa93 f3a3 	rbit	r3, r3
 8005706:	627b      	str	r3, [r7, #36]	; 0x24
 8005708:	2302      	movs	r3, #2
 800570a:	623b      	str	r3, [r7, #32]
 800570c:	6a3b      	ldr	r3, [r7, #32]
 800570e:	fa93 f3a3 	rbit	r3, r3
 8005712:	61fb      	str	r3, [r7, #28]
  return result;
 8005714:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005716:	fab3 f383 	clz	r3, r3
 800571a:	b2db      	uxtb	r3, r3
 800571c:	095b      	lsrs	r3, r3, #5
 800571e:	b2db      	uxtb	r3, r3
 8005720:	f043 0302 	orr.w	r3, r3, #2
 8005724:	b2db      	uxtb	r3, r3
 8005726:	2b02      	cmp	r3, #2
 8005728:	d108      	bne.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800572a:	4b01      	ldr	r3, [pc, #4]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	e00d      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005730:	40021000 	.word	0x40021000
 8005734:	40007000 	.word	0x40007000
 8005738:	10908100 	.word	0x10908100
 800573c:	2302      	movs	r3, #2
 800573e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	fa93 f3a3 	rbit	r3, r3
 8005746:	617b      	str	r3, [r7, #20]
 8005748:	4b78      	ldr	r3, [pc, #480]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800574a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574c:	2202      	movs	r2, #2
 800574e:	613a      	str	r2, [r7, #16]
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	fa92 f2a2 	rbit	r2, r2
 8005756:	60fa      	str	r2, [r7, #12]
  return result;
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	fab2 f282 	clz	r2, r2
 800575e:	b2d2      	uxtb	r2, r2
 8005760:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005764:	b2d2      	uxtb	r2, r2
 8005766:	f002 021f 	and.w	r2, r2, #31
 800576a:	2101      	movs	r1, #1
 800576c:	fa01 f202 	lsl.w	r2, r1, r2
 8005770:	4013      	ands	r3, r2
 8005772:	2b00      	cmp	r3, #0
 8005774:	d0b7      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005776:	4b6d      	ldr	r3, [pc, #436]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	496a      	ldr	r1, [pc, #424]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005784:	4313      	orrs	r3, r2
 8005786:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005788:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800578c:	2b01      	cmp	r3, #1
 800578e:	d105      	bne.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005790:	4b66      	ldr	r3, [pc, #408]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005792:	69db      	ldr	r3, [r3, #28]
 8005794:	4a65      	ldr	r2, [pc, #404]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005796:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800579a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0301 	and.w	r3, r3, #1
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d008      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057a8:	4b60      	ldr	r3, [pc, #384]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ac:	f023 0203 	bic.w	r2, r3, #3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	495d      	ldr	r1, [pc, #372]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057b6:	4313      	orrs	r3, r2
 80057b8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0302 	and.w	r3, r3, #2
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d008      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80057c6:	4b59      	ldr	r3, [pc, #356]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	4956      	ldr	r1, [pc, #344]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057d4:	4313      	orrs	r3, r2
 80057d6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0304 	and.w	r3, r3, #4
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d008      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80057e4:	4b51      	ldr	r3, [pc, #324]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	494e      	ldr	r1, [pc, #312]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057f2:	4313      	orrs	r3, r2
 80057f4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0320 	and.w	r3, r3, #32
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d008      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005802:	4b4a      	ldr	r3, [pc, #296]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005806:	f023 0210 	bic.w	r2, r3, #16
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	69db      	ldr	r3, [r3, #28]
 800580e:	4947      	ldr	r1, [pc, #284]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005810:	4313      	orrs	r3, r2
 8005812:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800581c:	2b00      	cmp	r3, #0
 800581e:	d008      	beq.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005820:	4b42      	ldr	r3, [pc, #264]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582c:	493f      	ldr	r1, [pc, #252]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800582e:	4313      	orrs	r3, r2
 8005830:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800583a:	2b00      	cmp	r3, #0
 800583c:	d008      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800583e:	4b3b      	ldr	r3, [pc, #236]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005842:	f023 0220 	bic.w	r2, r3, #32
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a1b      	ldr	r3, [r3, #32]
 800584a:	4938      	ldr	r1, [pc, #224]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800584c:	4313      	orrs	r3, r2
 800584e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0308 	and.w	r3, r3, #8
 8005858:	2b00      	cmp	r3, #0
 800585a:	d008      	beq.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800585c:	4b33      	ldr	r3, [pc, #204]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800585e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005860:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	695b      	ldr	r3, [r3, #20]
 8005868:	4930      	ldr	r1, [pc, #192]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800586a:	4313      	orrs	r3, r2
 800586c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0310 	and.w	r3, r3, #16
 8005876:	2b00      	cmp	r3, #0
 8005878:	d008      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800587a:	4b2c      	ldr	r3, [pc, #176]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800587c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800587e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	699b      	ldr	r3, [r3, #24]
 8005886:	4929      	ldr	r1, [pc, #164]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005888:	4313      	orrs	r3, r2
 800588a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005894:	2b00      	cmp	r3, #0
 8005896:	d008      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005898:	4b24      	ldr	r3, [pc, #144]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a4:	4921      	ldr	r1, [pc, #132]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d008      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80058b6:	4b1d      	ldr	r3, [pc, #116]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ba:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c2:	491a      	ldr	r1, [pc, #104]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058c4:	4313      	orrs	r3, r2
 80058c6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d008      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80058d4:	4b15      	ldr	r3, [pc, #84]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d8:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e0:	4912      	ldr	r1, [pc, #72]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d008      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80058f2:	4b0e      	ldr	r3, [pc, #56]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fe:	490b      	ldr	r1, [pc, #44]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005900:	4313      	orrs	r3, r2
 8005902:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d008      	beq.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005910:	4b06      	ldr	r3, [pc, #24]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005914:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800591c:	4903      	ldr	r1, [pc, #12]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800591e:	4313      	orrs	r3, r2
 8005920:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3748      	adds	r7, #72	; 0x48
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	40021000 	.word	0x40021000

08005930 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d101      	bne.n	8005946 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e073      	b.n	8005a2e <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	7f5b      	ldrb	r3, [r3, #29]
 800594a:	b2db      	uxtb	r3, r3
 800594c:	2b00      	cmp	r3, #0
 800594e:	d105      	bne.n	800595c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f7fb fdfc 	bl	8001554 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2202      	movs	r2, #2
 8005960:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	f003 0310 	and.w	r3, r3, #16
 800596c:	2b10      	cmp	r3, #16
 800596e:	d055      	beq.n	8005a1c <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	22ca      	movs	r2, #202	; 0xca
 8005976:	625a      	str	r2, [r3, #36]	; 0x24
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2253      	movs	r2, #83	; 0x53
 800597e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 f99d 	bl	8005cc0 <RTC_EnterInitMode>
 8005986:	4603      	mov	r3, r0
 8005988:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800598a:	7bfb      	ldrb	r3, [r7, #15]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d12c      	bne.n	80059ea <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	6812      	ldr	r2, [r2, #0]
 800599a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800599e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059a2:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	6899      	ldr	r1, [r3, #8]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	685a      	ldr	r2, [r3, #4]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	431a      	orrs	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	695b      	ldr	r3, [r3, #20]
 80059b8:	431a      	orrs	r2, r3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	430a      	orrs	r2, r1
 80059c0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	68d2      	ldr	r2, [r2, #12]
 80059ca:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	6919      	ldr	r1, [r3, #16]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	041a      	lsls	r2, r3, #16
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	430a      	orrs	r2, r1
 80059de:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 f9a4 	bl	8005d2e <RTC_ExitInitMode>
 80059e6:	4603      	mov	r3, r0
 80059e8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80059ea:	7bfb      	ldrb	r3, [r7, #15]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d110      	bne.n	8005a12 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80059fe:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	699a      	ldr	r2, [r3, #24]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	430a      	orrs	r2, r1
 8005a10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	22ff      	movs	r2, #255	; 0xff
 8005a18:	625a      	str	r2, [r3, #36]	; 0x24
 8005a1a:	e001      	b.n	8005a20 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005a20:	7bfb      	ldrb	r3, [r7, #15]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d102      	bne.n	8005a2c <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8005a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3710      	adds	r7, #16
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005a36:	b590      	push	{r4, r7, lr}
 8005a38:	b087      	sub	sp, #28
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	60f8      	str	r0, [r7, #12]
 8005a3e:	60b9      	str	r1, [r7, #8]
 8005a40:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005a42:	2300      	movs	r3, #0
 8005a44:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	7f1b      	ldrb	r3, [r3, #28]
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d101      	bne.n	8005a52 <HAL_RTC_SetTime+0x1c>
 8005a4e:	2302      	movs	r3, #2
 8005a50:	e087      	b.n	8005b62 <HAL_RTC_SetTime+0x12c>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2201      	movs	r2, #1
 8005a56:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2202      	movs	r2, #2
 8005a5c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d126      	bne.n	8005ab2 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d102      	bne.n	8005a78 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	2200      	movs	r2, #0
 8005a76:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f000 f97b 	bl	8005d78 <RTC_ByteToBcd2>
 8005a82:	4603      	mov	r3, r0
 8005a84:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	785b      	ldrb	r3, [r3, #1]
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f000 f974 	bl	8005d78 <RTC_ByteToBcd2>
 8005a90:	4603      	mov	r3, r0
 8005a92:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005a94:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	789b      	ldrb	r3, [r3, #2]
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f000 f96c 	bl	8005d78 <RTC_ByteToBcd2>
 8005aa0:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005aa2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	78db      	ldrb	r3, [r3, #3]
 8005aaa:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005aac:	4313      	orrs	r3, r2
 8005aae:	617b      	str	r3, [r7, #20]
 8005ab0:	e018      	b.n	8005ae4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d102      	bne.n	8005ac6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	785b      	ldrb	r3, [r3, #1]
 8005ad0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005ad2:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005ad4:	68ba      	ldr	r2, [r7, #8]
 8005ad6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005ad8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	78db      	ldrb	r3, [r3, #3]
 8005ade:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	22ca      	movs	r2, #202	; 0xca
 8005aea:	625a      	str	r2, [r3, #36]	; 0x24
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2253      	movs	r2, #83	; 0x53
 8005af2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005af4:	68f8      	ldr	r0, [r7, #12]
 8005af6:	f000 f8e3 	bl	8005cc0 <RTC_EnterInitMode>
 8005afa:	4603      	mov	r3, r0
 8005afc:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005afe:	7cfb      	ldrb	r3, [r7, #19]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d120      	bne.n	8005b46 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005b0e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005b12:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	689a      	ldr	r2, [r3, #8]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b22:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	6899      	ldr	r1, [r3, #8]
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	68da      	ldr	r2, [r3, #12]
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	431a      	orrs	r2, r3
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	430a      	orrs	r2, r1
 8005b3a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005b3c:	68f8      	ldr	r0, [r7, #12]
 8005b3e:	f000 f8f6 	bl	8005d2e <RTC_ExitInitMode>
 8005b42:	4603      	mov	r3, r0
 8005b44:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005b46:	7cfb      	ldrb	r3, [r7, #19]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d102      	bne.n	8005b52 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	22ff      	movs	r2, #255	; 0xff
 8005b58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	771a      	strb	r2, [r3, #28]

  return status;
 8005b60:	7cfb      	ldrb	r3, [r7, #19]
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	371c      	adds	r7, #28
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd90      	pop	{r4, r7, pc}

08005b6a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005b6a:	b590      	push	{r4, r7, lr}
 8005b6c:	b087      	sub	sp, #28
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	60f8      	str	r0, [r7, #12]
 8005b72:	60b9      	str	r1, [r7, #8]
 8005b74:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005b76:	2300      	movs	r3, #0
 8005b78:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	7f1b      	ldrb	r3, [r3, #28]
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d101      	bne.n	8005b86 <HAL_RTC_SetDate+0x1c>
 8005b82:	2302      	movs	r3, #2
 8005b84:	e071      	b.n	8005c6a <HAL_RTC_SetDate+0x100>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2202      	movs	r2, #2
 8005b90:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d10e      	bne.n	8005bb6 <HAL_RTC_SetDate+0x4c>
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	785b      	ldrb	r3, [r3, #1]
 8005b9c:	f003 0310 	and.w	r3, r3, #16
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d008      	beq.n	8005bb6 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	785b      	ldrb	r3, [r3, #1]
 8005ba8:	f023 0310 	bic.w	r3, r3, #16
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	330a      	adds	r3, #10
 8005bb0:	b2da      	uxtb	r2, r3
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d11c      	bne.n	8005bf6 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	78db      	ldrb	r3, [r3, #3]
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f000 f8d9 	bl	8005d78 <RTC_ByteToBcd2>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	785b      	ldrb	r3, [r3, #1]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f000 f8d2 	bl	8005d78 <RTC_ByteToBcd2>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005bd8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	789b      	ldrb	r3, [r3, #2]
 8005bde:	4618      	mov	r0, r3
 8005be0:	f000 f8ca 	bl	8005d78 <RTC_ByteToBcd2>
 8005be4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005be6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	617b      	str	r3, [r7, #20]
 8005bf4:	e00e      	b.n	8005c14 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	78db      	ldrb	r3, [r3, #3]
 8005bfa:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	785b      	ldrb	r3, [r3, #1]
 8005c00:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005c02:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005c04:	68ba      	ldr	r2, [r7, #8]
 8005c06:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005c08:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005c10:	4313      	orrs	r3, r2
 8005c12:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	22ca      	movs	r2, #202	; 0xca
 8005c1a:	625a      	str	r2, [r3, #36]	; 0x24
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2253      	movs	r2, #83	; 0x53
 8005c22:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005c24:	68f8      	ldr	r0, [r7, #12]
 8005c26:	f000 f84b 	bl	8005cc0 <RTC_EnterInitMode>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005c2e:	7cfb      	ldrb	r3, [r7, #19]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10c      	bne.n	8005c4e <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005c3e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005c42:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005c44:	68f8      	ldr	r0, [r7, #12]
 8005c46:	f000 f872 	bl	8005d2e <RTC_ExitInitMode>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005c4e:	7cfb      	ldrb	r3, [r7, #19]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d102      	bne.n	8005c5a <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2201      	movs	r2, #1
 8005c58:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	22ff      	movs	r2, #255	; 0xff
 8005c60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	771a      	strb	r2, [r3, #28]

  return status;
 8005c68:	7cfb      	ldrb	r3, [r7, #19]
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	371c      	adds	r7, #28
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd90      	pop	{r4, r7, pc}
	...

08005c74 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a0d      	ldr	r2, [pc, #52]	; (8005cbc <HAL_RTC_WaitForSynchro+0x48>)
 8005c86:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c88:	f7fc f806 	bl	8001c98 <HAL_GetTick>
 8005c8c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005c8e:	e009      	b.n	8005ca4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005c90:	f7fc f802 	bl	8001c98 <HAL_GetTick>
 8005c94:	4602      	mov	r2, r0
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c9e:	d901      	bls.n	8005ca4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	e007      	b.n	8005cb4 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	f003 0320 	and.w	r3, r3, #32
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d0ee      	beq.n	8005c90 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3710      	adds	r7, #16
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	0001ff5f 	.word	0x0001ff5f

08005cc0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d122      	bne.n	8005d24 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68da      	ldr	r2, [r3, #12]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005cec:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005cee:	f7fb ffd3 	bl	8001c98 <HAL_GetTick>
 8005cf2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005cf4:	e00c      	b.n	8005d10 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005cf6:	f7fb ffcf 	bl	8001c98 <HAL_GetTick>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	1ad3      	subs	r3, r2, r3
 8005d00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d04:	d904      	bls.n	8005d10 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2204      	movs	r2, #4
 8005d0a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d102      	bne.n	8005d24 <RTC_EnterInitMode+0x64>
 8005d1e:	7bfb      	ldrb	r3, [r7, #15]
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d1e8      	bne.n	8005cf6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3710      	adds	r7, #16
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}

08005d2e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b084      	sub	sp, #16
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d36:	2300      	movs	r3, #0
 8005d38:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68da      	ldr	r2, [r3, #12]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d48:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f003 0320 	and.w	r3, r3, #32
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d10a      	bne.n	8005d6e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f7ff ff8b 	bl	8005c74 <HAL_RTC_WaitForSynchro>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d004      	beq.n	8005d6e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2204      	movs	r2, #4
 8005d68:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3710      	adds	r7, #16
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	4603      	mov	r3, r0
 8005d80:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005d82:	2300      	movs	r3, #0
 8005d84:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8005d86:	e005      	b.n	8005d94 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8005d8e:	79fb      	ldrb	r3, [r7, #7]
 8005d90:	3b0a      	subs	r3, #10
 8005d92:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005d94:	79fb      	ldrb	r3, [r7, #7]
 8005d96:	2b09      	cmp	r3, #9
 8005d98:	d8f6      	bhi.n	8005d88 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	011b      	lsls	r3, r3, #4
 8005da0:	b2da      	uxtb	r2, r3
 8005da2:	79fb      	ldrb	r3, [r7, #7]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	b2db      	uxtb	r3, r3
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3714      	adds	r7, #20
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b082      	sub	sp, #8
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d101      	bne.n	8005dc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e049      	b.n	8005e5a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d106      	bne.n	8005de0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f7fb fbe0 	bl	80015a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2202      	movs	r2, #2
 8005de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	3304      	adds	r3, #4
 8005df0:	4619      	mov	r1, r3
 8005df2:	4610      	mov	r0, r2
 8005df4:	f000 fdb8 	bl	8006968 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3708      	adds	r7, #8
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}

08005e62 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e62:	b580      	push	{r7, lr}
 8005e64:	b082      	sub	sp, #8
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d101      	bne.n	8005e74 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e049      	b.n	8005f08 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d106      	bne.n	8005e8e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 f841 	bl	8005f10 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2202      	movs	r2, #2
 8005e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	3304      	adds	r3, #4
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	4610      	mov	r0, r2
 8005ea2:	f000 fd61 	bl	8006968 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2201      	movs	r2, #1
 8005f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3708      	adds	r7, #8
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005f18:	bf00      	nop
 8005f1a:	370c      	adds	r7, #12
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d109      	bne.n	8005f48 <HAL_TIM_PWM_Start+0x24>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	bf14      	ite	ne
 8005f40:	2301      	movne	r3, #1
 8005f42:	2300      	moveq	r3, #0
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	e03c      	b.n	8005fc2 <HAL_TIM_PWM_Start+0x9e>
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	2b04      	cmp	r3, #4
 8005f4c:	d109      	bne.n	8005f62 <HAL_TIM_PWM_Start+0x3e>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	bf14      	ite	ne
 8005f5a:	2301      	movne	r3, #1
 8005f5c:	2300      	moveq	r3, #0
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	e02f      	b.n	8005fc2 <HAL_TIM_PWM_Start+0x9e>
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	2b08      	cmp	r3, #8
 8005f66:	d109      	bne.n	8005f7c <HAL_TIM_PWM_Start+0x58>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	bf14      	ite	ne
 8005f74:	2301      	movne	r3, #1
 8005f76:	2300      	moveq	r3, #0
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	e022      	b.n	8005fc2 <HAL_TIM_PWM_Start+0x9e>
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	2b0c      	cmp	r3, #12
 8005f80:	d109      	bne.n	8005f96 <HAL_TIM_PWM_Start+0x72>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	bf14      	ite	ne
 8005f8e:	2301      	movne	r3, #1
 8005f90:	2300      	moveq	r3, #0
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	e015      	b.n	8005fc2 <HAL_TIM_PWM_Start+0x9e>
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	2b10      	cmp	r3, #16
 8005f9a:	d109      	bne.n	8005fb0 <HAL_TIM_PWM_Start+0x8c>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	bf14      	ite	ne
 8005fa8:	2301      	movne	r3, #1
 8005faa:	2300      	moveq	r3, #0
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	e008      	b.n	8005fc2 <HAL_TIM_PWM_Start+0x9e>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	bf14      	ite	ne
 8005fbc:	2301      	movne	r3, #1
 8005fbe:	2300      	moveq	r3, #0
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d001      	beq.n	8005fca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e097      	b.n	80060fa <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d104      	bne.n	8005fda <HAL_TIM_PWM_Start+0xb6>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2202      	movs	r2, #2
 8005fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fd8:	e023      	b.n	8006022 <HAL_TIM_PWM_Start+0xfe>
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	2b04      	cmp	r3, #4
 8005fde:	d104      	bne.n	8005fea <HAL_TIM_PWM_Start+0xc6>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2202      	movs	r2, #2
 8005fe4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fe8:	e01b      	b.n	8006022 <HAL_TIM_PWM_Start+0xfe>
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	2b08      	cmp	r3, #8
 8005fee:	d104      	bne.n	8005ffa <HAL_TIM_PWM_Start+0xd6>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ff8:	e013      	b.n	8006022 <HAL_TIM_PWM_Start+0xfe>
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	2b0c      	cmp	r3, #12
 8005ffe:	d104      	bne.n	800600a <HAL_TIM_PWM_Start+0xe6>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2202      	movs	r2, #2
 8006004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006008:	e00b      	b.n	8006022 <HAL_TIM_PWM_Start+0xfe>
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	2b10      	cmp	r3, #16
 800600e:	d104      	bne.n	800601a <HAL_TIM_PWM_Start+0xf6>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2202      	movs	r2, #2
 8006014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006018:	e003      	b.n	8006022 <HAL_TIM_PWM_Start+0xfe>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2202      	movs	r2, #2
 800601e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2201      	movs	r2, #1
 8006028:	6839      	ldr	r1, [r7, #0]
 800602a:	4618      	mov	r0, r3
 800602c:	f001 f9ba 	bl	80073a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a33      	ldr	r2, [pc, #204]	; (8006104 <HAL_TIM_PWM_Start+0x1e0>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d013      	beq.n	8006062 <HAL_TIM_PWM_Start+0x13e>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a32      	ldr	r2, [pc, #200]	; (8006108 <HAL_TIM_PWM_Start+0x1e4>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d00e      	beq.n	8006062 <HAL_TIM_PWM_Start+0x13e>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a30      	ldr	r2, [pc, #192]	; (800610c <HAL_TIM_PWM_Start+0x1e8>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d009      	beq.n	8006062 <HAL_TIM_PWM_Start+0x13e>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a2f      	ldr	r2, [pc, #188]	; (8006110 <HAL_TIM_PWM_Start+0x1ec>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d004      	beq.n	8006062 <HAL_TIM_PWM_Start+0x13e>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a2d      	ldr	r2, [pc, #180]	; (8006114 <HAL_TIM_PWM_Start+0x1f0>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d101      	bne.n	8006066 <HAL_TIM_PWM_Start+0x142>
 8006062:	2301      	movs	r3, #1
 8006064:	e000      	b.n	8006068 <HAL_TIM_PWM_Start+0x144>
 8006066:	2300      	movs	r3, #0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d007      	beq.n	800607c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800607a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a20      	ldr	r2, [pc, #128]	; (8006104 <HAL_TIM_PWM_Start+0x1e0>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d018      	beq.n	80060b8 <HAL_TIM_PWM_Start+0x194>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800608e:	d013      	beq.n	80060b8 <HAL_TIM_PWM_Start+0x194>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a20      	ldr	r2, [pc, #128]	; (8006118 <HAL_TIM_PWM_Start+0x1f4>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d00e      	beq.n	80060b8 <HAL_TIM_PWM_Start+0x194>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a1f      	ldr	r2, [pc, #124]	; (800611c <HAL_TIM_PWM_Start+0x1f8>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d009      	beq.n	80060b8 <HAL_TIM_PWM_Start+0x194>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a17      	ldr	r2, [pc, #92]	; (8006108 <HAL_TIM_PWM_Start+0x1e4>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d004      	beq.n	80060b8 <HAL_TIM_PWM_Start+0x194>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a16      	ldr	r2, [pc, #88]	; (800610c <HAL_TIM_PWM_Start+0x1e8>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d115      	bne.n	80060e4 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	689a      	ldr	r2, [r3, #8]
 80060be:	4b18      	ldr	r3, [pc, #96]	; (8006120 <HAL_TIM_PWM_Start+0x1fc>)
 80060c0:	4013      	ands	r3, r2
 80060c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2b06      	cmp	r3, #6
 80060c8:	d015      	beq.n	80060f6 <HAL_TIM_PWM_Start+0x1d2>
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060d0:	d011      	beq.n	80060f6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f042 0201 	orr.w	r2, r2, #1
 80060e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060e2:	e008      	b.n	80060f6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f042 0201 	orr.w	r2, r2, #1
 80060f2:	601a      	str	r2, [r3, #0]
 80060f4:	e000      	b.n	80060f8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060f8:	2300      	movs	r3, #0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3710      	adds	r7, #16
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	40012c00 	.word	0x40012c00
 8006108:	40013400 	.word	0x40013400
 800610c:	40014000 	.word	0x40014000
 8006110:	40014400 	.word	0x40014400
 8006114:	40014800 	.word	0x40014800
 8006118:	40000400 	.word	0x40000400
 800611c:	40000800 	.word	0x40000800
 8006120:	00010007 	.word	0x00010007

08006124 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d101      	bne.n	8006136 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e049      	b.n	80061ca <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800613c:	b2db      	uxtb	r3, r3
 800613e:	2b00      	cmp	r3, #0
 8006140:	d106      	bne.n	8006150 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f7fb fa7e 	bl	800164c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2202      	movs	r2, #2
 8006154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	3304      	adds	r3, #4
 8006160:	4619      	mov	r1, r3
 8006162:	4610      	mov	r0, r2
 8006164:	f000 fc00 	bl	8006968 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3708      	adds	r7, #8
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b082      	sub	sp, #8
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	691b      	ldr	r3, [r3, #16]
 80061e0:	f003 0302 	and.w	r3, r3, #2
 80061e4:	2b02      	cmp	r3, #2
 80061e6:	d122      	bne.n	800622e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	f003 0302 	and.w	r3, r3, #2
 80061f2:	2b02      	cmp	r3, #2
 80061f4:	d11b      	bne.n	800622e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f06f 0202 	mvn.w	r2, #2
 80061fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	699b      	ldr	r3, [r3, #24]
 800620c:	f003 0303 	and.w	r3, r3, #3
 8006210:	2b00      	cmp	r3, #0
 8006212:	d003      	beq.n	800621c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 fb88 	bl	800692a <HAL_TIM_IC_CaptureCallback>
 800621a:	e005      	b.n	8006228 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 fb7a 	bl	8006916 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 fb8b 	bl	800693e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	f003 0304 	and.w	r3, r3, #4
 8006238:	2b04      	cmp	r3, #4
 800623a:	d122      	bne.n	8006282 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	f003 0304 	and.w	r3, r3, #4
 8006246:	2b04      	cmp	r3, #4
 8006248:	d11b      	bne.n	8006282 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f06f 0204 	mvn.w	r2, #4
 8006252:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2202      	movs	r2, #2
 8006258:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	699b      	ldr	r3, [r3, #24]
 8006260:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006264:	2b00      	cmp	r3, #0
 8006266:	d003      	beq.n	8006270 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 fb5e 	bl	800692a <HAL_TIM_IC_CaptureCallback>
 800626e:	e005      	b.n	800627c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 fb50 	bl	8006916 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 fb61 	bl	800693e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	f003 0308 	and.w	r3, r3, #8
 800628c:	2b08      	cmp	r3, #8
 800628e:	d122      	bne.n	80062d6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	f003 0308 	and.w	r3, r3, #8
 800629a:	2b08      	cmp	r3, #8
 800629c:	d11b      	bne.n	80062d6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f06f 0208 	mvn.w	r2, #8
 80062a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2204      	movs	r2, #4
 80062ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	69db      	ldr	r3, [r3, #28]
 80062b4:	f003 0303 	and.w	r3, r3, #3
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d003      	beq.n	80062c4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f000 fb34 	bl	800692a <HAL_TIM_IC_CaptureCallback>
 80062c2:	e005      	b.n	80062d0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f000 fb26 	bl	8006916 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 fb37 	bl	800693e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	f003 0310 	and.w	r3, r3, #16
 80062e0:	2b10      	cmp	r3, #16
 80062e2:	d122      	bne.n	800632a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68db      	ldr	r3, [r3, #12]
 80062ea:	f003 0310 	and.w	r3, r3, #16
 80062ee:	2b10      	cmp	r3, #16
 80062f0:	d11b      	bne.n	800632a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f06f 0210 	mvn.w	r2, #16
 80062fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2208      	movs	r2, #8
 8006300:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	69db      	ldr	r3, [r3, #28]
 8006308:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800630c:	2b00      	cmp	r3, #0
 800630e:	d003      	beq.n	8006318 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f000 fb0a 	bl	800692a <HAL_TIM_IC_CaptureCallback>
 8006316:	e005      	b.n	8006324 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 fafc 	bl	8006916 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 fb0d 	bl	800693e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	691b      	ldr	r3, [r3, #16]
 8006330:	f003 0301 	and.w	r3, r3, #1
 8006334:	2b01      	cmp	r3, #1
 8006336:	d10e      	bne.n	8006356 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	f003 0301 	and.w	r3, r3, #1
 8006342:	2b01      	cmp	r3, #1
 8006344:	d107      	bne.n	8006356 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f06f 0201 	mvn.w	r2, #1
 800634e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 fad6 	bl	8006902 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	691b      	ldr	r3, [r3, #16]
 800635c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006360:	2b80      	cmp	r3, #128	; 0x80
 8006362:	d10e      	bne.n	8006382 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800636e:	2b80      	cmp	r3, #128	; 0x80
 8006370:	d107      	bne.n	8006382 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800637a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f001 f9f3 	bl	8007768 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800638c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006390:	d10e      	bne.n	80063b0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800639c:	2b80      	cmp	r3, #128	; 0x80
 800639e:	d107      	bne.n	80063b0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80063a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f001 f9e6 	bl	800777c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ba:	2b40      	cmp	r3, #64	; 0x40
 80063bc:	d10e      	bne.n	80063dc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c8:	2b40      	cmp	r3, #64	; 0x40
 80063ca:	d107      	bne.n	80063dc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80063d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 fabb 	bl	8006952 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	f003 0320 	and.w	r3, r3, #32
 80063e6:	2b20      	cmp	r3, #32
 80063e8:	d10e      	bne.n	8006408 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	f003 0320 	and.w	r3, r3, #32
 80063f4:	2b20      	cmp	r3, #32
 80063f6:	d107      	bne.n	8006408 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f06f 0220 	mvn.w	r2, #32
 8006400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f001 f9a6 	bl	8007754 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006408:	bf00      	nop
 800640a:	3708      	adds	r7, #8
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b086      	sub	sp, #24
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800641c:	2300      	movs	r3, #0
 800641e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006426:	2b01      	cmp	r3, #1
 8006428:	d101      	bne.n	800642e <HAL_TIM_IC_ConfigChannel+0x1e>
 800642a:	2302      	movs	r3, #2
 800642c:	e088      	b.n	8006540 <HAL_TIM_IC_ConfigChannel+0x130>
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2201      	movs	r2, #1
 8006432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d11b      	bne.n	8006474 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6818      	ldr	r0, [r3, #0]
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	6819      	ldr	r1, [r3, #0]
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	685a      	ldr	r2, [r3, #4]
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	f000 fdf2 	bl	8007034 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	699a      	ldr	r2, [r3, #24]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f022 020c 	bic.w	r2, r2, #12
 800645e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	6999      	ldr	r1, [r3, #24]
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	689a      	ldr	r2, [r3, #8]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	430a      	orrs	r2, r1
 8006470:	619a      	str	r2, [r3, #24]
 8006472:	e060      	b.n	8006536 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2b04      	cmp	r3, #4
 8006478:	d11c      	bne.n	80064b4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6818      	ldr	r0, [r3, #0]
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	6819      	ldr	r1, [r3, #0]
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	685a      	ldr	r2, [r3, #4]
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	f000 fe6a 	bl	8007162 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	699a      	ldr	r2, [r3, #24]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800649c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	6999      	ldr	r1, [r3, #24]
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	021a      	lsls	r2, r3, #8
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	430a      	orrs	r2, r1
 80064b0:	619a      	str	r2, [r3, #24]
 80064b2:	e040      	b.n	8006536 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2b08      	cmp	r3, #8
 80064b8:	d11b      	bne.n	80064f2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6818      	ldr	r0, [r3, #0]
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	6819      	ldr	r1, [r3, #0]
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	685a      	ldr	r2, [r3, #4]
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	f000 feb7 	bl	800723c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	69da      	ldr	r2, [r3, #28]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f022 020c 	bic.w	r2, r2, #12
 80064dc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	69d9      	ldr	r1, [r3, #28]
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	689a      	ldr	r2, [r3, #8]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	430a      	orrs	r2, r1
 80064ee:	61da      	str	r2, [r3, #28]
 80064f0:	e021      	b.n	8006536 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2b0c      	cmp	r3, #12
 80064f6:	d11c      	bne.n	8006532 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6818      	ldr	r0, [r3, #0]
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	6819      	ldr	r1, [r3, #0]
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	685a      	ldr	r2, [r3, #4]
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	f000 fed4 	bl	80072b4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	69da      	ldr	r2, [r3, #28]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800651a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	69d9      	ldr	r1, [r3, #28]
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	021a      	lsls	r2, r3, #8
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	430a      	orrs	r2, r1
 800652e:	61da      	str	r2, [r3, #28]
 8006530:	e001      	b.n	8006536 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800653e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006540:	4618      	mov	r0, r3
 8006542:	3718      	adds	r7, #24
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b086      	sub	sp, #24
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006554:	2300      	movs	r3, #0
 8006556:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800655e:	2b01      	cmp	r3, #1
 8006560:	d101      	bne.n	8006566 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006562:	2302      	movs	r3, #2
 8006564:	e0ff      	b.n	8006766 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2201      	movs	r2, #1
 800656a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2b14      	cmp	r3, #20
 8006572:	f200 80f0 	bhi.w	8006756 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006576:	a201      	add	r2, pc, #4	; (adr r2, 800657c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800657c:	080065d1 	.word	0x080065d1
 8006580:	08006757 	.word	0x08006757
 8006584:	08006757 	.word	0x08006757
 8006588:	08006757 	.word	0x08006757
 800658c:	08006611 	.word	0x08006611
 8006590:	08006757 	.word	0x08006757
 8006594:	08006757 	.word	0x08006757
 8006598:	08006757 	.word	0x08006757
 800659c:	08006653 	.word	0x08006653
 80065a0:	08006757 	.word	0x08006757
 80065a4:	08006757 	.word	0x08006757
 80065a8:	08006757 	.word	0x08006757
 80065ac:	08006693 	.word	0x08006693
 80065b0:	08006757 	.word	0x08006757
 80065b4:	08006757 	.word	0x08006757
 80065b8:	08006757 	.word	0x08006757
 80065bc:	080066d5 	.word	0x080066d5
 80065c0:	08006757 	.word	0x08006757
 80065c4:	08006757 	.word	0x08006757
 80065c8:	08006757 	.word	0x08006757
 80065cc:	08006715 	.word	0x08006715
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	68b9      	ldr	r1, [r7, #8]
 80065d6:	4618      	mov	r0, r3
 80065d8:	f000 fa56 	bl	8006a88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	699a      	ldr	r2, [r3, #24]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f042 0208 	orr.w	r2, r2, #8
 80065ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	699a      	ldr	r2, [r3, #24]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f022 0204 	bic.w	r2, r2, #4
 80065fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	6999      	ldr	r1, [r3, #24]
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	691a      	ldr	r2, [r3, #16]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	430a      	orrs	r2, r1
 800660c:	619a      	str	r2, [r3, #24]
      break;
 800660e:	e0a5      	b.n	800675c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	68b9      	ldr	r1, [r7, #8]
 8006616:	4618      	mov	r0, r3
 8006618:	f000 fac6 	bl	8006ba8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	699a      	ldr	r2, [r3, #24]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800662a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	699a      	ldr	r2, [r3, #24]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800663a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	6999      	ldr	r1, [r3, #24]
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	021a      	lsls	r2, r3, #8
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	430a      	orrs	r2, r1
 800664e:	619a      	str	r2, [r3, #24]
      break;
 8006650:	e084      	b.n	800675c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68b9      	ldr	r1, [r7, #8]
 8006658:	4618      	mov	r0, r3
 800665a:	f000 fb2f 	bl	8006cbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	69da      	ldr	r2, [r3, #28]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f042 0208 	orr.w	r2, r2, #8
 800666c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	69da      	ldr	r2, [r3, #28]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f022 0204 	bic.w	r2, r2, #4
 800667c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	69d9      	ldr	r1, [r3, #28]
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	691a      	ldr	r2, [r3, #16]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	430a      	orrs	r2, r1
 800668e:	61da      	str	r2, [r3, #28]
      break;
 8006690:	e064      	b.n	800675c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68b9      	ldr	r1, [r7, #8]
 8006698:	4618      	mov	r0, r3
 800669a:	f000 fb97 	bl	8006dcc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	69da      	ldr	r2, [r3, #28]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	69da      	ldr	r2, [r3, #28]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	69d9      	ldr	r1, [r3, #28]
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	021a      	lsls	r2, r3, #8
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	430a      	orrs	r2, r1
 80066d0:	61da      	str	r2, [r3, #28]
      break;
 80066d2:	e043      	b.n	800675c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	68b9      	ldr	r1, [r7, #8]
 80066da:	4618      	mov	r0, r3
 80066dc:	f000 fbe0 	bl	8006ea0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f042 0208 	orr.w	r2, r2, #8
 80066ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f022 0204 	bic.w	r2, r2, #4
 80066fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	691a      	ldr	r2, [r3, #16]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	430a      	orrs	r2, r1
 8006710:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006712:	e023      	b.n	800675c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	68b9      	ldr	r1, [r7, #8]
 800671a:	4618      	mov	r0, r3
 800671c:	f000 fc24 	bl	8006f68 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800672e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800673e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	021a      	lsls	r2, r3, #8
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	430a      	orrs	r2, r1
 8006752:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006754:	e002      	b.n	800675c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	75fb      	strb	r3, [r7, #23]
      break;
 800675a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2200      	movs	r2, #0
 8006760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006764:	7dfb      	ldrb	r3, [r7, #23]
}
 8006766:	4618      	mov	r0, r3
 8006768:	3718      	adds	r7, #24
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop

08006770 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800677a:	2300      	movs	r3, #0
 800677c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006784:	2b01      	cmp	r3, #1
 8006786:	d101      	bne.n	800678c <HAL_TIM_ConfigClockSource+0x1c>
 8006788:	2302      	movs	r3, #2
 800678a:	e0b6      	b.n	80068fa <HAL_TIM_ConfigClockSource+0x18a>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2202      	movs	r2, #2
 8006798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80067ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68ba      	ldr	r2, [r7, #8]
 80067be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067c8:	d03e      	beq.n	8006848 <HAL_TIM_ConfigClockSource+0xd8>
 80067ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067ce:	f200 8087 	bhi.w	80068e0 <HAL_TIM_ConfigClockSource+0x170>
 80067d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067d6:	f000 8086 	beq.w	80068e6 <HAL_TIM_ConfigClockSource+0x176>
 80067da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067de:	d87f      	bhi.n	80068e0 <HAL_TIM_ConfigClockSource+0x170>
 80067e0:	2b70      	cmp	r3, #112	; 0x70
 80067e2:	d01a      	beq.n	800681a <HAL_TIM_ConfigClockSource+0xaa>
 80067e4:	2b70      	cmp	r3, #112	; 0x70
 80067e6:	d87b      	bhi.n	80068e0 <HAL_TIM_ConfigClockSource+0x170>
 80067e8:	2b60      	cmp	r3, #96	; 0x60
 80067ea:	d050      	beq.n	800688e <HAL_TIM_ConfigClockSource+0x11e>
 80067ec:	2b60      	cmp	r3, #96	; 0x60
 80067ee:	d877      	bhi.n	80068e0 <HAL_TIM_ConfigClockSource+0x170>
 80067f0:	2b50      	cmp	r3, #80	; 0x50
 80067f2:	d03c      	beq.n	800686e <HAL_TIM_ConfigClockSource+0xfe>
 80067f4:	2b50      	cmp	r3, #80	; 0x50
 80067f6:	d873      	bhi.n	80068e0 <HAL_TIM_ConfigClockSource+0x170>
 80067f8:	2b40      	cmp	r3, #64	; 0x40
 80067fa:	d058      	beq.n	80068ae <HAL_TIM_ConfigClockSource+0x13e>
 80067fc:	2b40      	cmp	r3, #64	; 0x40
 80067fe:	d86f      	bhi.n	80068e0 <HAL_TIM_ConfigClockSource+0x170>
 8006800:	2b30      	cmp	r3, #48	; 0x30
 8006802:	d064      	beq.n	80068ce <HAL_TIM_ConfigClockSource+0x15e>
 8006804:	2b30      	cmp	r3, #48	; 0x30
 8006806:	d86b      	bhi.n	80068e0 <HAL_TIM_ConfigClockSource+0x170>
 8006808:	2b20      	cmp	r3, #32
 800680a:	d060      	beq.n	80068ce <HAL_TIM_ConfigClockSource+0x15e>
 800680c:	2b20      	cmp	r3, #32
 800680e:	d867      	bhi.n	80068e0 <HAL_TIM_ConfigClockSource+0x170>
 8006810:	2b00      	cmp	r3, #0
 8006812:	d05c      	beq.n	80068ce <HAL_TIM_ConfigClockSource+0x15e>
 8006814:	2b10      	cmp	r3, #16
 8006816:	d05a      	beq.n	80068ce <HAL_TIM_ConfigClockSource+0x15e>
 8006818:	e062      	b.n	80068e0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6818      	ldr	r0, [r3, #0]
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	6899      	ldr	r1, [r3, #8]
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	685a      	ldr	r2, [r3, #4]
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	f000 fd9b 	bl	8007364 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800683c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68ba      	ldr	r2, [r7, #8]
 8006844:	609a      	str	r2, [r3, #8]
      break;
 8006846:	e04f      	b.n	80068e8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6818      	ldr	r0, [r3, #0]
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	6899      	ldr	r1, [r3, #8]
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	685a      	ldr	r2, [r3, #4]
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	f000 fd84 	bl	8007364 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	689a      	ldr	r2, [r3, #8]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800686a:	609a      	str	r2, [r3, #8]
      break;
 800686c:	e03c      	b.n	80068e8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6818      	ldr	r0, [r3, #0]
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	6859      	ldr	r1, [r3, #4]
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	461a      	mov	r2, r3
 800687c:	f000 fc42 	bl	8007104 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2150      	movs	r1, #80	; 0x50
 8006886:	4618      	mov	r0, r3
 8006888:	f000 fd51 	bl	800732e <TIM_ITRx_SetConfig>
      break;
 800688c:	e02c      	b.n	80068e8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6818      	ldr	r0, [r3, #0]
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	6859      	ldr	r1, [r3, #4]
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	461a      	mov	r2, r3
 800689c:	f000 fc9e 	bl	80071dc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2160      	movs	r1, #96	; 0x60
 80068a6:	4618      	mov	r0, r3
 80068a8:	f000 fd41 	bl	800732e <TIM_ITRx_SetConfig>
      break;
 80068ac:	e01c      	b.n	80068e8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6818      	ldr	r0, [r3, #0]
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	6859      	ldr	r1, [r3, #4]
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	461a      	mov	r2, r3
 80068bc:	f000 fc22 	bl	8007104 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2140      	movs	r1, #64	; 0x40
 80068c6:	4618      	mov	r0, r3
 80068c8:	f000 fd31 	bl	800732e <TIM_ITRx_SetConfig>
      break;
 80068cc:	e00c      	b.n	80068e8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4619      	mov	r1, r3
 80068d8:	4610      	mov	r0, r2
 80068da:	f000 fd28 	bl	800732e <TIM_ITRx_SetConfig>
      break;
 80068de:	e003      	b.n	80068e8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	73fb      	strb	r3, [r7, #15]
      break;
 80068e4:	e000      	b.n	80068e8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80068e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80068f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3710      	adds	r7, #16
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}

08006902 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006902:	b480      	push	{r7}
 8006904:	b083      	sub	sp, #12
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800690a:	bf00      	nop
 800690c:	370c      	adds	r7, #12
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr

08006916 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006916:	b480      	push	{r7}
 8006918:	b083      	sub	sp, #12
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800691e:	bf00      	nop
 8006920:	370c      	adds	r7, #12
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr

0800692a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800692a:	b480      	push	{r7}
 800692c:	b083      	sub	sp, #12
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006932:	bf00      	nop
 8006934:	370c      	adds	r7, #12
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr

0800693e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800693e:	b480      	push	{r7}
 8006940:	b083      	sub	sp, #12
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006946:	bf00      	nop
 8006948:	370c      	adds	r7, #12
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr

08006952 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006952:	b480      	push	{r7}
 8006954:	b083      	sub	sp, #12
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800695a:	bf00      	nop
 800695c:	370c      	adds	r7, #12
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr
	...

08006968 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006968:	b480      	push	{r7}
 800696a:	b085      	sub	sp, #20
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	4a3c      	ldr	r2, [pc, #240]	; (8006a6c <TIM_Base_SetConfig+0x104>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d00f      	beq.n	80069a0 <TIM_Base_SetConfig+0x38>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006986:	d00b      	beq.n	80069a0 <TIM_Base_SetConfig+0x38>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	4a39      	ldr	r2, [pc, #228]	; (8006a70 <TIM_Base_SetConfig+0x108>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d007      	beq.n	80069a0 <TIM_Base_SetConfig+0x38>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	4a38      	ldr	r2, [pc, #224]	; (8006a74 <TIM_Base_SetConfig+0x10c>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d003      	beq.n	80069a0 <TIM_Base_SetConfig+0x38>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	4a37      	ldr	r2, [pc, #220]	; (8006a78 <TIM_Base_SetConfig+0x110>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d108      	bne.n	80069b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a2d      	ldr	r2, [pc, #180]	; (8006a6c <TIM_Base_SetConfig+0x104>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d01b      	beq.n	80069f2 <TIM_Base_SetConfig+0x8a>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069c0:	d017      	beq.n	80069f2 <TIM_Base_SetConfig+0x8a>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a2a      	ldr	r2, [pc, #168]	; (8006a70 <TIM_Base_SetConfig+0x108>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d013      	beq.n	80069f2 <TIM_Base_SetConfig+0x8a>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a29      	ldr	r2, [pc, #164]	; (8006a74 <TIM_Base_SetConfig+0x10c>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d00f      	beq.n	80069f2 <TIM_Base_SetConfig+0x8a>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a28      	ldr	r2, [pc, #160]	; (8006a78 <TIM_Base_SetConfig+0x110>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d00b      	beq.n	80069f2 <TIM_Base_SetConfig+0x8a>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4a27      	ldr	r2, [pc, #156]	; (8006a7c <TIM_Base_SetConfig+0x114>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d007      	beq.n	80069f2 <TIM_Base_SetConfig+0x8a>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	4a26      	ldr	r2, [pc, #152]	; (8006a80 <TIM_Base_SetConfig+0x118>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d003      	beq.n	80069f2 <TIM_Base_SetConfig+0x8a>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4a25      	ldr	r2, [pc, #148]	; (8006a84 <TIM_Base_SetConfig+0x11c>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d108      	bne.n	8006a04 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	695b      	ldr	r3, [r3, #20]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	689a      	ldr	r2, [r3, #8]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4a10      	ldr	r2, [pc, #64]	; (8006a6c <TIM_Base_SetConfig+0x104>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d00f      	beq.n	8006a50 <TIM_Base_SetConfig+0xe8>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	4a11      	ldr	r2, [pc, #68]	; (8006a78 <TIM_Base_SetConfig+0x110>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d00b      	beq.n	8006a50 <TIM_Base_SetConfig+0xe8>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4a10      	ldr	r2, [pc, #64]	; (8006a7c <TIM_Base_SetConfig+0x114>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d007      	beq.n	8006a50 <TIM_Base_SetConfig+0xe8>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	4a0f      	ldr	r2, [pc, #60]	; (8006a80 <TIM_Base_SetConfig+0x118>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d003      	beq.n	8006a50 <TIM_Base_SetConfig+0xe8>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	4a0e      	ldr	r2, [pc, #56]	; (8006a84 <TIM_Base_SetConfig+0x11c>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d103      	bne.n	8006a58 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	691a      	ldr	r2, [r3, #16]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	615a      	str	r2, [r3, #20]
}
 8006a5e:	bf00      	nop
 8006a60:	3714      	adds	r7, #20
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	40012c00 	.word	0x40012c00
 8006a70:	40000400 	.word	0x40000400
 8006a74:	40000800 	.word	0x40000800
 8006a78:	40013400 	.word	0x40013400
 8006a7c:	40014000 	.word	0x40014000
 8006a80:	40014400 	.word	0x40014400
 8006a84:	40014800 	.word	0x40014800

08006a88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b087      	sub	sp, #28
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a1b      	ldr	r3, [r3, #32]
 8006a96:	f023 0201 	bic.w	r2, r3, #1
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a1b      	ldr	r3, [r3, #32]
 8006aa2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	699b      	ldr	r3, [r3, #24]
 8006aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f023 0303 	bic.w	r3, r3, #3
 8006ac2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	f023 0302 	bic.w	r3, r3, #2
 8006ad4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	697a      	ldr	r2, [r7, #20]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a2c      	ldr	r2, [pc, #176]	; (8006b94 <TIM_OC1_SetConfig+0x10c>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d00f      	beq.n	8006b08 <TIM_OC1_SetConfig+0x80>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	4a2b      	ldr	r2, [pc, #172]	; (8006b98 <TIM_OC1_SetConfig+0x110>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d00b      	beq.n	8006b08 <TIM_OC1_SetConfig+0x80>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4a2a      	ldr	r2, [pc, #168]	; (8006b9c <TIM_OC1_SetConfig+0x114>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d007      	beq.n	8006b08 <TIM_OC1_SetConfig+0x80>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	4a29      	ldr	r2, [pc, #164]	; (8006ba0 <TIM_OC1_SetConfig+0x118>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d003      	beq.n	8006b08 <TIM_OC1_SetConfig+0x80>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4a28      	ldr	r2, [pc, #160]	; (8006ba4 <TIM_OC1_SetConfig+0x11c>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d10c      	bne.n	8006b22 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	f023 0308 	bic.w	r3, r3, #8
 8006b0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	697a      	ldr	r2, [r7, #20]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	f023 0304 	bic.w	r3, r3, #4
 8006b20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4a1b      	ldr	r2, [pc, #108]	; (8006b94 <TIM_OC1_SetConfig+0x10c>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d00f      	beq.n	8006b4a <TIM_OC1_SetConfig+0xc2>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4a1a      	ldr	r2, [pc, #104]	; (8006b98 <TIM_OC1_SetConfig+0x110>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d00b      	beq.n	8006b4a <TIM_OC1_SetConfig+0xc2>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4a19      	ldr	r2, [pc, #100]	; (8006b9c <TIM_OC1_SetConfig+0x114>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d007      	beq.n	8006b4a <TIM_OC1_SetConfig+0xc2>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4a18      	ldr	r2, [pc, #96]	; (8006ba0 <TIM_OC1_SetConfig+0x118>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d003      	beq.n	8006b4a <TIM_OC1_SetConfig+0xc2>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a17      	ldr	r2, [pc, #92]	; (8006ba4 <TIM_OC1_SetConfig+0x11c>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d111      	bne.n	8006b6e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	695b      	ldr	r3, [r3, #20]
 8006b5e:	693a      	ldr	r2, [r7, #16]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	699b      	ldr	r3, [r3, #24]
 8006b68:	693a      	ldr	r2, [r7, #16]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	693a      	ldr	r2, [r7, #16]
 8006b72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	685a      	ldr	r2, [r3, #4]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	697a      	ldr	r2, [r7, #20]
 8006b86:	621a      	str	r2, [r3, #32]
}
 8006b88:	bf00      	nop
 8006b8a:	371c      	adds	r7, #28
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr
 8006b94:	40012c00 	.word	0x40012c00
 8006b98:	40013400 	.word	0x40013400
 8006b9c:	40014000 	.word	0x40014000
 8006ba0:	40014400 	.word	0x40014400
 8006ba4:	40014800 	.word	0x40014800

08006ba8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b087      	sub	sp, #28
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a1b      	ldr	r3, [r3, #32]
 8006bb6:	f023 0210 	bic.w	r2, r3, #16
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a1b      	ldr	r3, [r3, #32]
 8006bc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	699b      	ldr	r3, [r3, #24]
 8006bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006bd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006be2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	021b      	lsls	r3, r3, #8
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	f023 0320 	bic.w	r3, r3, #32
 8006bf6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	011b      	lsls	r3, r3, #4
 8006bfe:	697a      	ldr	r2, [r7, #20]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	4a28      	ldr	r2, [pc, #160]	; (8006ca8 <TIM_OC2_SetConfig+0x100>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d003      	beq.n	8006c14 <TIM_OC2_SetConfig+0x6c>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4a27      	ldr	r2, [pc, #156]	; (8006cac <TIM_OC2_SetConfig+0x104>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d10d      	bne.n	8006c30 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	011b      	lsls	r3, r3, #4
 8006c22:	697a      	ldr	r2, [r7, #20]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4a1d      	ldr	r2, [pc, #116]	; (8006ca8 <TIM_OC2_SetConfig+0x100>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d00f      	beq.n	8006c58 <TIM_OC2_SetConfig+0xb0>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	4a1c      	ldr	r2, [pc, #112]	; (8006cac <TIM_OC2_SetConfig+0x104>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d00b      	beq.n	8006c58 <TIM_OC2_SetConfig+0xb0>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	4a1b      	ldr	r2, [pc, #108]	; (8006cb0 <TIM_OC2_SetConfig+0x108>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d007      	beq.n	8006c58 <TIM_OC2_SetConfig+0xb0>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	4a1a      	ldr	r2, [pc, #104]	; (8006cb4 <TIM_OC2_SetConfig+0x10c>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d003      	beq.n	8006c58 <TIM_OC2_SetConfig+0xb0>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4a19      	ldr	r2, [pc, #100]	; (8006cb8 <TIM_OC2_SetConfig+0x110>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d113      	bne.n	8006c80 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c5e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c66:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	695b      	ldr	r3, [r3, #20]
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	693a      	ldr	r2, [r7, #16]
 8006c70:	4313      	orrs	r3, r2
 8006c72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	699b      	ldr	r3, [r3, #24]
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	693a      	ldr	r2, [r7, #16]
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	693a      	ldr	r2, [r7, #16]
 8006c84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	685a      	ldr	r2, [r3, #4]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	697a      	ldr	r2, [r7, #20]
 8006c98:	621a      	str	r2, [r3, #32]
}
 8006c9a:	bf00      	nop
 8006c9c:	371c      	adds	r7, #28
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr
 8006ca6:	bf00      	nop
 8006ca8:	40012c00 	.word	0x40012c00
 8006cac:	40013400 	.word	0x40013400
 8006cb0:	40014000 	.word	0x40014000
 8006cb4:	40014400 	.word	0x40014400
 8006cb8:	40014800 	.word	0x40014800

08006cbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b087      	sub	sp, #28
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6a1b      	ldr	r3, [r3, #32]
 8006cca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a1b      	ldr	r3, [r3, #32]
 8006cd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	69db      	ldr	r3, [r3, #28]
 8006ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f023 0303 	bic.w	r3, r3, #3
 8006cf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	021b      	lsls	r3, r3, #8
 8006d10:	697a      	ldr	r2, [r7, #20]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	4a27      	ldr	r2, [pc, #156]	; (8006db8 <TIM_OC3_SetConfig+0xfc>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d003      	beq.n	8006d26 <TIM_OC3_SetConfig+0x6a>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	4a26      	ldr	r2, [pc, #152]	; (8006dbc <TIM_OC3_SetConfig+0x100>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d10d      	bne.n	8006d42 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	021b      	lsls	r3, r3, #8
 8006d34:	697a      	ldr	r2, [r7, #20]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d40:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4a1c      	ldr	r2, [pc, #112]	; (8006db8 <TIM_OC3_SetConfig+0xfc>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d00f      	beq.n	8006d6a <TIM_OC3_SetConfig+0xae>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4a1b      	ldr	r2, [pc, #108]	; (8006dbc <TIM_OC3_SetConfig+0x100>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d00b      	beq.n	8006d6a <TIM_OC3_SetConfig+0xae>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a1a      	ldr	r2, [pc, #104]	; (8006dc0 <TIM_OC3_SetConfig+0x104>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d007      	beq.n	8006d6a <TIM_OC3_SetConfig+0xae>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4a19      	ldr	r2, [pc, #100]	; (8006dc4 <TIM_OC3_SetConfig+0x108>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d003      	beq.n	8006d6a <TIM_OC3_SetConfig+0xae>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4a18      	ldr	r2, [pc, #96]	; (8006dc8 <TIM_OC3_SetConfig+0x10c>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d113      	bne.n	8006d92 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	695b      	ldr	r3, [r3, #20]
 8006d7e:	011b      	lsls	r3, r3, #4
 8006d80:	693a      	ldr	r2, [r7, #16]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	699b      	ldr	r3, [r3, #24]
 8006d8a:	011b      	lsls	r3, r3, #4
 8006d8c:	693a      	ldr	r2, [r7, #16]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	693a      	ldr	r2, [r7, #16]
 8006d96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	68fa      	ldr	r2, [r7, #12]
 8006d9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	685a      	ldr	r2, [r3, #4]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	697a      	ldr	r2, [r7, #20]
 8006daa:	621a      	str	r2, [r3, #32]
}
 8006dac:	bf00      	nop
 8006dae:	371c      	adds	r7, #28
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr
 8006db8:	40012c00 	.word	0x40012c00
 8006dbc:	40013400 	.word	0x40013400
 8006dc0:	40014000 	.word	0x40014000
 8006dc4:	40014400 	.word	0x40014400
 8006dc8:	40014800 	.word	0x40014800

08006dcc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b087      	sub	sp, #28
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a1b      	ldr	r3, [r3, #32]
 8006dda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6a1b      	ldr	r3, [r3, #32]
 8006de6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	69db      	ldr	r3, [r3, #28]
 8006df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006dfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	021b      	lsls	r3, r3, #8
 8006e0e:	68fa      	ldr	r2, [r7, #12]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	031b      	lsls	r3, r3, #12
 8006e22:	693a      	ldr	r2, [r7, #16]
 8006e24:	4313      	orrs	r3, r2
 8006e26:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a18      	ldr	r2, [pc, #96]	; (8006e8c <TIM_OC4_SetConfig+0xc0>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d00f      	beq.n	8006e50 <TIM_OC4_SetConfig+0x84>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a17      	ldr	r2, [pc, #92]	; (8006e90 <TIM_OC4_SetConfig+0xc4>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d00b      	beq.n	8006e50 <TIM_OC4_SetConfig+0x84>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4a16      	ldr	r2, [pc, #88]	; (8006e94 <TIM_OC4_SetConfig+0xc8>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d007      	beq.n	8006e50 <TIM_OC4_SetConfig+0x84>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4a15      	ldr	r2, [pc, #84]	; (8006e98 <TIM_OC4_SetConfig+0xcc>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d003      	beq.n	8006e50 <TIM_OC4_SetConfig+0x84>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a14      	ldr	r2, [pc, #80]	; (8006e9c <TIM_OC4_SetConfig+0xd0>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d109      	bne.n	8006e64 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	695b      	ldr	r3, [r3, #20]
 8006e5c:	019b      	lsls	r3, r3, #6
 8006e5e:	697a      	ldr	r2, [r7, #20]
 8006e60:	4313      	orrs	r3, r2
 8006e62:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	697a      	ldr	r2, [r7, #20]
 8006e68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	685a      	ldr	r2, [r3, #4]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	693a      	ldr	r2, [r7, #16]
 8006e7c:	621a      	str	r2, [r3, #32]
}
 8006e7e:	bf00      	nop
 8006e80:	371c      	adds	r7, #28
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr
 8006e8a:	bf00      	nop
 8006e8c:	40012c00 	.word	0x40012c00
 8006e90:	40013400 	.word	0x40013400
 8006e94:	40014000 	.word	0x40014000
 8006e98:	40014400 	.word	0x40014400
 8006e9c:	40014800 	.word	0x40014800

08006ea0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b087      	sub	sp, #28
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a1b      	ldr	r3, [r3, #32]
 8006eae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6a1b      	ldr	r3, [r3, #32]
 8006eba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ed2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68fa      	ldr	r2, [r7, #12]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006ee4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	041b      	lsls	r3, r3, #16
 8006eec:	693a      	ldr	r2, [r7, #16]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a17      	ldr	r2, [pc, #92]	; (8006f54 <TIM_OC5_SetConfig+0xb4>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d00f      	beq.n	8006f1a <TIM_OC5_SetConfig+0x7a>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4a16      	ldr	r2, [pc, #88]	; (8006f58 <TIM_OC5_SetConfig+0xb8>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d00b      	beq.n	8006f1a <TIM_OC5_SetConfig+0x7a>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a15      	ldr	r2, [pc, #84]	; (8006f5c <TIM_OC5_SetConfig+0xbc>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d007      	beq.n	8006f1a <TIM_OC5_SetConfig+0x7a>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a14      	ldr	r2, [pc, #80]	; (8006f60 <TIM_OC5_SetConfig+0xc0>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d003      	beq.n	8006f1a <TIM_OC5_SetConfig+0x7a>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a13      	ldr	r2, [pc, #76]	; (8006f64 <TIM_OC5_SetConfig+0xc4>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d109      	bne.n	8006f2e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f20:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	695b      	ldr	r3, [r3, #20]
 8006f26:	021b      	lsls	r3, r3, #8
 8006f28:	697a      	ldr	r2, [r7, #20]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	697a      	ldr	r2, [r7, #20]
 8006f32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	685a      	ldr	r2, [r3, #4]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	693a      	ldr	r2, [r7, #16]
 8006f46:	621a      	str	r2, [r3, #32]
}
 8006f48:	bf00      	nop
 8006f4a:	371c      	adds	r7, #28
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr
 8006f54:	40012c00 	.word	0x40012c00
 8006f58:	40013400 	.word	0x40013400
 8006f5c:	40014000 	.word	0x40014000
 8006f60:	40014400 	.word	0x40014400
 8006f64:	40014800 	.word	0x40014800

08006f68 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b087      	sub	sp, #28
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6a1b      	ldr	r3, [r3, #32]
 8006f76:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a1b      	ldr	r3, [r3, #32]
 8006f82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	021b      	lsls	r3, r3, #8
 8006fa2:	68fa      	ldr	r2, [r7, #12]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006fae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	051b      	lsls	r3, r3, #20
 8006fb6:	693a      	ldr	r2, [r7, #16]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4a18      	ldr	r2, [pc, #96]	; (8007020 <TIM_OC6_SetConfig+0xb8>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d00f      	beq.n	8006fe4 <TIM_OC6_SetConfig+0x7c>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a17      	ldr	r2, [pc, #92]	; (8007024 <TIM_OC6_SetConfig+0xbc>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d00b      	beq.n	8006fe4 <TIM_OC6_SetConfig+0x7c>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4a16      	ldr	r2, [pc, #88]	; (8007028 <TIM_OC6_SetConfig+0xc0>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d007      	beq.n	8006fe4 <TIM_OC6_SetConfig+0x7c>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	4a15      	ldr	r2, [pc, #84]	; (800702c <TIM_OC6_SetConfig+0xc4>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d003      	beq.n	8006fe4 <TIM_OC6_SetConfig+0x7c>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	4a14      	ldr	r2, [pc, #80]	; (8007030 <TIM_OC6_SetConfig+0xc8>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d109      	bne.n	8006ff8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	695b      	ldr	r3, [r3, #20]
 8006ff0:	029b      	lsls	r3, r3, #10
 8006ff2:	697a      	ldr	r2, [r7, #20]
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	697a      	ldr	r2, [r7, #20]
 8006ffc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	685a      	ldr	r2, [r3, #4]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	693a      	ldr	r2, [r7, #16]
 8007010:	621a      	str	r2, [r3, #32]
}
 8007012:	bf00      	nop
 8007014:	371c      	adds	r7, #28
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr
 800701e:	bf00      	nop
 8007020:	40012c00 	.word	0x40012c00
 8007024:	40013400 	.word	0x40013400
 8007028:	40014000 	.word	0x40014000
 800702c:	40014400 	.word	0x40014400
 8007030:	40014800 	.word	0x40014800

08007034 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007034:	b480      	push	{r7}
 8007036:	b087      	sub	sp, #28
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	607a      	str	r2, [r7, #4]
 8007040:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6a1b      	ldr	r3, [r3, #32]
 8007046:	f023 0201 	bic.w	r2, r3, #1
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	699b      	ldr	r3, [r3, #24]
 8007052:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6a1b      	ldr	r3, [r3, #32]
 8007058:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	4a24      	ldr	r2, [pc, #144]	; (80070f0 <TIM_TI1_SetConfig+0xbc>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d013      	beq.n	800708a <TIM_TI1_SetConfig+0x56>
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007068:	d00f      	beq.n	800708a <TIM_TI1_SetConfig+0x56>
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	4a21      	ldr	r2, [pc, #132]	; (80070f4 <TIM_TI1_SetConfig+0xc0>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d00b      	beq.n	800708a <TIM_TI1_SetConfig+0x56>
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	4a20      	ldr	r2, [pc, #128]	; (80070f8 <TIM_TI1_SetConfig+0xc4>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d007      	beq.n	800708a <TIM_TI1_SetConfig+0x56>
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	4a1f      	ldr	r2, [pc, #124]	; (80070fc <TIM_TI1_SetConfig+0xc8>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d003      	beq.n	800708a <TIM_TI1_SetConfig+0x56>
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	4a1e      	ldr	r2, [pc, #120]	; (8007100 <TIM_TI1_SetConfig+0xcc>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d101      	bne.n	800708e <TIM_TI1_SetConfig+0x5a>
 800708a:	2301      	movs	r3, #1
 800708c:	e000      	b.n	8007090 <TIM_TI1_SetConfig+0x5c>
 800708e:	2300      	movs	r3, #0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d008      	beq.n	80070a6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	f023 0303 	bic.w	r3, r3, #3
 800709a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800709c:	697a      	ldr	r2, [r7, #20]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4313      	orrs	r3, r2
 80070a2:	617b      	str	r3, [r7, #20]
 80070a4:	e003      	b.n	80070ae <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	f043 0301 	orr.w	r3, r3, #1
 80070ac:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	011b      	lsls	r3, r3, #4
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	697a      	ldr	r2, [r7, #20]
 80070be:	4313      	orrs	r3, r2
 80070c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	f023 030a 	bic.w	r3, r3, #10
 80070c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	f003 030a 	and.w	r3, r3, #10
 80070d0:	693a      	ldr	r2, [r7, #16]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	697a      	ldr	r2, [r7, #20]
 80070da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	693a      	ldr	r2, [r7, #16]
 80070e0:	621a      	str	r2, [r3, #32]
}
 80070e2:	bf00      	nop
 80070e4:	371c      	adds	r7, #28
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr
 80070ee:	bf00      	nop
 80070f0:	40012c00 	.word	0x40012c00
 80070f4:	40000400 	.word	0x40000400
 80070f8:	40000800 	.word	0x40000800
 80070fc:	40013400 	.word	0x40013400
 8007100:	40014000 	.word	0x40014000

08007104 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007104:	b480      	push	{r7}
 8007106:	b087      	sub	sp, #28
 8007108:	af00      	add	r7, sp, #0
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	60b9      	str	r1, [r7, #8]
 800710e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6a1b      	ldr	r3, [r3, #32]
 8007114:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	6a1b      	ldr	r3, [r3, #32]
 800711a:	f023 0201 	bic.w	r2, r3, #1
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	699b      	ldr	r3, [r3, #24]
 8007126:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800712e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	011b      	lsls	r3, r3, #4
 8007134:	693a      	ldr	r2, [r7, #16]
 8007136:	4313      	orrs	r3, r2
 8007138:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	f023 030a 	bic.w	r3, r3, #10
 8007140:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007142:	697a      	ldr	r2, [r7, #20]
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	4313      	orrs	r3, r2
 8007148:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	693a      	ldr	r2, [r7, #16]
 800714e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	697a      	ldr	r2, [r7, #20]
 8007154:	621a      	str	r2, [r3, #32]
}
 8007156:	bf00      	nop
 8007158:	371c      	adds	r7, #28
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr

08007162 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007162:	b480      	push	{r7}
 8007164:	b087      	sub	sp, #28
 8007166:	af00      	add	r7, sp, #0
 8007168:	60f8      	str	r0, [r7, #12]
 800716a:	60b9      	str	r1, [r7, #8]
 800716c:	607a      	str	r2, [r7, #4]
 800716e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6a1b      	ldr	r3, [r3, #32]
 8007174:	f023 0210 	bic.w	r2, r3, #16
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	699b      	ldr	r3, [r3, #24]
 8007180:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	6a1b      	ldr	r3, [r3, #32]
 8007186:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800718e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	021b      	lsls	r3, r3, #8
 8007194:	697a      	ldr	r2, [r7, #20]
 8007196:	4313      	orrs	r3, r2
 8007198:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80071a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	031b      	lsls	r3, r3, #12
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	697a      	ldr	r2, [r7, #20]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80071b4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	011b      	lsls	r3, r3, #4
 80071ba:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80071be:	693a      	ldr	r2, [r7, #16]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	697a      	ldr	r2, [r7, #20]
 80071c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	693a      	ldr	r2, [r7, #16]
 80071ce:	621a      	str	r2, [r3, #32]
}
 80071d0:	bf00      	nop
 80071d2:	371c      	adds	r7, #28
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071dc:	b480      	push	{r7}
 80071de:	b087      	sub	sp, #28
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	60b9      	str	r1, [r7, #8]
 80071e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	6a1b      	ldr	r3, [r3, #32]
 80071ec:	f023 0210 	bic.w	r2, r3, #16
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	699b      	ldr	r3, [r3, #24]
 80071f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	6a1b      	ldr	r3, [r3, #32]
 80071fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007206:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	031b      	lsls	r3, r3, #12
 800720c:	697a      	ldr	r2, [r7, #20]
 800720e:	4313      	orrs	r3, r2
 8007210:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007218:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	011b      	lsls	r3, r3, #4
 800721e:	693a      	ldr	r2, [r7, #16]
 8007220:	4313      	orrs	r3, r2
 8007222:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	697a      	ldr	r2, [r7, #20]
 8007228:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	693a      	ldr	r2, [r7, #16]
 800722e:	621a      	str	r2, [r3, #32]
}
 8007230:	bf00      	nop
 8007232:	371c      	adds	r7, #28
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800723c:	b480      	push	{r7}
 800723e:	b087      	sub	sp, #28
 8007240:	af00      	add	r7, sp, #0
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	60b9      	str	r1, [r7, #8]
 8007246:	607a      	str	r2, [r7, #4]
 8007248:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6a1b      	ldr	r3, [r3, #32]
 800724e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	69db      	ldr	r3, [r3, #28]
 800725a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6a1b      	ldr	r3, [r3, #32]
 8007260:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	f023 0303 	bic.w	r3, r3, #3
 8007268:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800726a:	697a      	ldr	r2, [r7, #20]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	4313      	orrs	r3, r2
 8007270:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007278:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	011b      	lsls	r3, r3, #4
 800727e:	b2db      	uxtb	r3, r3
 8007280:	697a      	ldr	r2, [r7, #20]
 8007282:	4313      	orrs	r3, r2
 8007284:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800728c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	021b      	lsls	r3, r3, #8
 8007292:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007296:	693a      	ldr	r2, [r7, #16]
 8007298:	4313      	orrs	r3, r2
 800729a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	697a      	ldr	r2, [r7, #20]
 80072a0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	693a      	ldr	r2, [r7, #16]
 80072a6:	621a      	str	r2, [r3, #32]
}
 80072a8:	bf00      	nop
 80072aa:	371c      	adds	r7, #28
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b087      	sub	sp, #28
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	60b9      	str	r1, [r7, #8]
 80072be:	607a      	str	r2, [r7, #4]
 80072c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6a1b      	ldr	r3, [r3, #32]
 80072c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	69db      	ldr	r3, [r3, #28]
 80072d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6a1b      	ldr	r3, [r3, #32]
 80072d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072e0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	021b      	lsls	r3, r3, #8
 80072e6:	697a      	ldr	r2, [r7, #20]
 80072e8:	4313      	orrs	r3, r2
 80072ea:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80072f2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	031b      	lsls	r3, r3, #12
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	697a      	ldr	r2, [r7, #20]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007306:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	031b      	lsls	r3, r3, #12
 800730c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007310:	693a      	ldr	r2, [r7, #16]
 8007312:	4313      	orrs	r3, r2
 8007314:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	697a      	ldr	r2, [r7, #20]
 800731a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	693a      	ldr	r2, [r7, #16]
 8007320:	621a      	str	r2, [r3, #32]
}
 8007322:	bf00      	nop
 8007324:	371c      	adds	r7, #28
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr

0800732e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800732e:	b480      	push	{r7}
 8007330:	b085      	sub	sp, #20
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
 8007336:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007344:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007346:	683a      	ldr	r2, [r7, #0]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	4313      	orrs	r3, r2
 800734c:	f043 0307 	orr.w	r3, r3, #7
 8007350:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	68fa      	ldr	r2, [r7, #12]
 8007356:	609a      	str	r2, [r3, #8]
}
 8007358:	bf00      	nop
 800735a:	3714      	adds	r7, #20
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007364:	b480      	push	{r7}
 8007366:	b087      	sub	sp, #28
 8007368:	af00      	add	r7, sp, #0
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	607a      	str	r2, [r7, #4]
 8007370:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800737e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	021a      	lsls	r2, r3, #8
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	431a      	orrs	r2, r3
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	4313      	orrs	r3, r2
 800738c:	697a      	ldr	r2, [r7, #20]
 800738e:	4313      	orrs	r3, r2
 8007390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	697a      	ldr	r2, [r7, #20]
 8007396:	609a      	str	r2, [r3, #8]
}
 8007398:	bf00      	nop
 800739a:	371c      	adds	r7, #28
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b087      	sub	sp, #28
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	f003 031f 	and.w	r3, r3, #31
 80073b6:	2201      	movs	r2, #1
 80073b8:	fa02 f303 	lsl.w	r3, r2, r3
 80073bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	6a1a      	ldr	r2, [r3, #32]
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	43db      	mvns	r3, r3
 80073c6:	401a      	ands	r2, r3
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	6a1a      	ldr	r2, [r3, #32]
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	f003 031f 	and.w	r3, r3, #31
 80073d6:	6879      	ldr	r1, [r7, #4]
 80073d8:	fa01 f303 	lsl.w	r3, r1, r3
 80073dc:	431a      	orrs	r2, r3
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	621a      	str	r2, [r3, #32]
}
 80073e2:	bf00      	nop
 80073e4:	371c      	adds	r7, #28
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr
	...

080073f0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d109      	bne.n	8007414 <HAL_TIMEx_PWMN_Start+0x24>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007406:	b2db      	uxtb	r3, r3
 8007408:	2b01      	cmp	r3, #1
 800740a:	bf14      	ite	ne
 800740c:	2301      	movne	r3, #1
 800740e:	2300      	moveq	r3, #0
 8007410:	b2db      	uxtb	r3, r3
 8007412:	e022      	b.n	800745a <HAL_TIMEx_PWMN_Start+0x6a>
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	2b04      	cmp	r3, #4
 8007418:	d109      	bne.n	800742e <HAL_TIMEx_PWMN_Start+0x3e>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007420:	b2db      	uxtb	r3, r3
 8007422:	2b01      	cmp	r3, #1
 8007424:	bf14      	ite	ne
 8007426:	2301      	movne	r3, #1
 8007428:	2300      	moveq	r3, #0
 800742a:	b2db      	uxtb	r3, r3
 800742c:	e015      	b.n	800745a <HAL_TIMEx_PWMN_Start+0x6a>
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	2b08      	cmp	r3, #8
 8007432:	d109      	bne.n	8007448 <HAL_TIMEx_PWMN_Start+0x58>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800743a:	b2db      	uxtb	r3, r3
 800743c:	2b01      	cmp	r3, #1
 800743e:	bf14      	ite	ne
 8007440:	2301      	movne	r3, #1
 8007442:	2300      	moveq	r3, #0
 8007444:	b2db      	uxtb	r3, r3
 8007446:	e008      	b.n	800745a <HAL_TIMEx_PWMN_Start+0x6a>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800744e:	b2db      	uxtb	r3, r3
 8007450:	2b01      	cmp	r3, #1
 8007452:	bf14      	ite	ne
 8007454:	2301      	movne	r3, #1
 8007456:	2300      	moveq	r3, #0
 8007458:	b2db      	uxtb	r3, r3
 800745a:	2b00      	cmp	r3, #0
 800745c:	d001      	beq.n	8007462 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e069      	b.n	8007536 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d104      	bne.n	8007472 <HAL_TIMEx_PWMN_Start+0x82>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2202      	movs	r2, #2
 800746c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007470:	e013      	b.n	800749a <HAL_TIMEx_PWMN_Start+0xaa>
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	2b04      	cmp	r3, #4
 8007476:	d104      	bne.n	8007482 <HAL_TIMEx_PWMN_Start+0x92>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2202      	movs	r2, #2
 800747c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007480:	e00b      	b.n	800749a <HAL_TIMEx_PWMN_Start+0xaa>
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	2b08      	cmp	r3, #8
 8007486:	d104      	bne.n	8007492 <HAL_TIMEx_PWMN_Start+0xa2>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2202      	movs	r2, #2
 800748c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007490:	e003      	b.n	800749a <HAL_TIMEx_PWMN_Start+0xaa>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2202      	movs	r2, #2
 8007496:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	2204      	movs	r2, #4
 80074a0:	6839      	ldr	r1, [r7, #0]
 80074a2:	4618      	mov	r0, r3
 80074a4:	f000 f974 	bl	8007790 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80074b6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a20      	ldr	r2, [pc, #128]	; (8007540 <HAL_TIMEx_PWMN_Start+0x150>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d018      	beq.n	80074f4 <HAL_TIMEx_PWMN_Start+0x104>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074ca:	d013      	beq.n	80074f4 <HAL_TIMEx_PWMN_Start+0x104>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a1c      	ldr	r2, [pc, #112]	; (8007544 <HAL_TIMEx_PWMN_Start+0x154>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d00e      	beq.n	80074f4 <HAL_TIMEx_PWMN_Start+0x104>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a1b      	ldr	r2, [pc, #108]	; (8007548 <HAL_TIMEx_PWMN_Start+0x158>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d009      	beq.n	80074f4 <HAL_TIMEx_PWMN_Start+0x104>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a19      	ldr	r2, [pc, #100]	; (800754c <HAL_TIMEx_PWMN_Start+0x15c>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d004      	beq.n	80074f4 <HAL_TIMEx_PWMN_Start+0x104>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a18      	ldr	r2, [pc, #96]	; (8007550 <HAL_TIMEx_PWMN_Start+0x160>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d115      	bne.n	8007520 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	689a      	ldr	r2, [r3, #8]
 80074fa:	4b16      	ldr	r3, [pc, #88]	; (8007554 <HAL_TIMEx_PWMN_Start+0x164>)
 80074fc:	4013      	ands	r3, r2
 80074fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2b06      	cmp	r3, #6
 8007504:	d015      	beq.n	8007532 <HAL_TIMEx_PWMN_Start+0x142>
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800750c:	d011      	beq.n	8007532 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f042 0201 	orr.w	r2, r2, #1
 800751c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800751e:	e008      	b.n	8007532 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f042 0201 	orr.w	r2, r2, #1
 800752e:	601a      	str	r2, [r3, #0]
 8007530:	e000      	b.n	8007534 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007532:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007534:	2300      	movs	r3, #0
}
 8007536:	4618      	mov	r0, r3
 8007538:	3710      	adds	r7, #16
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
 800753e:	bf00      	nop
 8007540:	40012c00 	.word	0x40012c00
 8007544:	40000400 	.word	0x40000400
 8007548:	40000800 	.word	0x40000800
 800754c:	40013400 	.word	0x40013400
 8007550:	40014000 	.word	0x40014000
 8007554:	00010007 	.word	0x00010007

08007558 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007558:	b480      	push	{r7}
 800755a:	b085      	sub	sp, #20
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007568:	2b01      	cmp	r3, #1
 800756a:	d101      	bne.n	8007570 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800756c:	2302      	movs	r3, #2
 800756e:	e063      	b.n	8007638 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2201      	movs	r2, #1
 8007574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2202      	movs	r2, #2
 800757c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a2b      	ldr	r2, [pc, #172]	; (8007644 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d004      	beq.n	80075a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a2a      	ldr	r2, [pc, #168]	; (8007648 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d108      	bne.n	80075b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80075aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	68fa      	ldr	r2, [r7, #12]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	68fa      	ldr	r2, [r7, #12]
 80075c4:	4313      	orrs	r3, r2
 80075c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	68fa      	ldr	r2, [r7, #12]
 80075ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a1b      	ldr	r2, [pc, #108]	; (8007644 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d018      	beq.n	800760c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075e2:	d013      	beq.n	800760c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a18      	ldr	r2, [pc, #96]	; (800764c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d00e      	beq.n	800760c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a17      	ldr	r2, [pc, #92]	; (8007650 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d009      	beq.n	800760c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a12      	ldr	r2, [pc, #72]	; (8007648 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d004      	beq.n	800760c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a13      	ldr	r2, [pc, #76]	; (8007654 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d10c      	bne.n	8007626 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007612:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	68ba      	ldr	r2, [r7, #8]
 800761a:	4313      	orrs	r3, r2
 800761c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	68ba      	ldr	r2, [r7, #8]
 8007624:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2201      	movs	r2, #1
 800762a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007636:	2300      	movs	r3, #0
}
 8007638:	4618      	mov	r0, r3
 800763a:	3714      	adds	r7, #20
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr
 8007644:	40012c00 	.word	0x40012c00
 8007648:	40013400 	.word	0x40013400
 800764c:	40000400 	.word	0x40000400
 8007650:	40000800 	.word	0x40000800
 8007654:	40014000 	.word	0x40014000

08007658 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007658:	b480      	push	{r7}
 800765a:	b085      	sub	sp, #20
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007662:	2300      	movs	r3, #0
 8007664:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800766c:	2b01      	cmp	r3, #1
 800766e:	d101      	bne.n	8007674 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007670:	2302      	movs	r3, #2
 8007672:	e065      	b.n	8007740 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2201      	movs	r2, #1
 8007678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	4313      	orrs	r3, r2
 8007688:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	4313      	orrs	r3, r2
 8007696:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	4313      	orrs	r3, r2
 80076a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4313      	orrs	r3, r2
 80076b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	691b      	ldr	r3, [r3, #16]
 80076be:	4313      	orrs	r3, r2
 80076c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	695b      	ldr	r3, [r3, #20]
 80076cc:	4313      	orrs	r3, r2
 80076ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076da:	4313      	orrs	r3, r2
 80076dc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	699b      	ldr	r3, [r3, #24]
 80076e8:	041b      	lsls	r3, r3, #16
 80076ea:	4313      	orrs	r3, r2
 80076ec:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a16      	ldr	r2, [pc, #88]	; (800774c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d004      	beq.n	8007702 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a14      	ldr	r2, [pc, #80]	; (8007750 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d115      	bne.n	800772e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800770c:	051b      	lsls	r3, r3, #20
 800770e:	4313      	orrs	r3, r2
 8007710:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	69db      	ldr	r3, [r3, #28]
 800771c:	4313      	orrs	r3, r2
 800771e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	6a1b      	ldr	r3, [r3, #32]
 800772a:	4313      	orrs	r3, r2
 800772c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	68fa      	ldr	r2, [r7, #12]
 8007734:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800773e:	2300      	movs	r3, #0
}
 8007740:	4618      	mov	r0, r3
 8007742:	3714      	adds	r7, #20
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr
 800774c:	40012c00 	.word	0x40012c00
 8007750:	40013400 	.word	0x40013400

08007754 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800775c:	bf00      	nop
 800775e:	370c      	adds	r7, #12
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr

08007768 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007770:	bf00      	nop
 8007772:	370c      	adds	r7, #12
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007784:	bf00      	nop
 8007786:	370c      	adds	r7, #12
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr

08007790 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007790:	b480      	push	{r7}
 8007792:	b087      	sub	sp, #28
 8007794:	af00      	add	r7, sp, #0
 8007796:	60f8      	str	r0, [r7, #12]
 8007798:	60b9      	str	r1, [r7, #8]
 800779a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	f003 031f 	and.w	r3, r3, #31
 80077a2:	2204      	movs	r2, #4
 80077a4:	fa02 f303 	lsl.w	r3, r2, r3
 80077a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	6a1a      	ldr	r2, [r3, #32]
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	43db      	mvns	r3, r3
 80077b2:	401a      	ands	r2, r3
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	6a1a      	ldr	r2, [r3, #32]
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	f003 031f 	and.w	r3, r3, #31
 80077c2:	6879      	ldr	r1, [r7, #4]
 80077c4:	fa01 f303 	lsl.w	r3, r1, r3
 80077c8:	431a      	orrs	r2, r3
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	621a      	str	r2, [r3, #32]
}
 80077ce:	bf00      	nop
 80077d0:	371c      	adds	r7, #28
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr

080077da <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077da:	b580      	push	{r7, lr}
 80077dc:	b082      	sub	sp, #8
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d101      	bne.n	80077ec <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	e040      	b.n	800786e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d106      	bne.n	8007802 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f7fa f81f 	bl	8001840 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2224      	movs	r2, #36	; 0x24
 8007806:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f022 0201 	bic.w	r2, r2, #1
 8007816:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 fbaf 	bl	8007f7c <UART_SetConfig>
 800781e:	4603      	mov	r3, r0
 8007820:	2b01      	cmp	r3, #1
 8007822:	d101      	bne.n	8007828 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007824:	2301      	movs	r3, #1
 8007826:	e022      	b.n	800786e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782c:	2b00      	cmp	r3, #0
 800782e:	d002      	beq.n	8007836 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 fd77 	bl	8008324 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	685a      	ldr	r2, [r3, #4]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007844:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	689a      	ldr	r2, [r3, #8]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007854:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f042 0201 	orr.w	r2, r2, #1
 8007864:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 fdfe 	bl	8008468 <UART_CheckIdleState>
 800786c:	4603      	mov	r3, r0
}
 800786e:	4618      	mov	r0, r3
 8007870:	3708      	adds	r7, #8
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
	...

08007878 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b08a      	sub	sp, #40	; 0x28
 800787c:	af00      	add	r7, sp, #0
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	4613      	mov	r3, r2
 8007884:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800788a:	2b20      	cmp	r3, #32
 800788c:	d165      	bne.n	800795a <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d002      	beq.n	800789a <HAL_UART_Transmit_DMA+0x22>
 8007894:	88fb      	ldrh	r3, [r7, #6]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d101      	bne.n	800789e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	e05e      	b.n	800795c <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	68ba      	ldr	r2, [r7, #8]
 80078a2:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	88fa      	ldrh	r2, [r7, #6]
 80078a8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	88fa      	ldrh	r2, [r7, #6]
 80078b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2221      	movs	r2, #33	; 0x21
 80078c0:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d027      	beq.n	800791a <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ce:	4a25      	ldr	r2, [pc, #148]	; (8007964 <HAL_UART_Transmit_DMA+0xec>)
 80078d0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078d6:	4a24      	ldr	r2, [pc, #144]	; (8007968 <HAL_UART_Transmit_DMA+0xf0>)
 80078d8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078de:	4a23      	ldr	r2, [pc, #140]	; (800796c <HAL_UART_Transmit_DMA+0xf4>)
 80078e0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078e6:	2200      	movs	r2, #0
 80078e8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078f2:	4619      	mov	r1, r3
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	3328      	adds	r3, #40	; 0x28
 80078fa:	461a      	mov	r2, r3
 80078fc:	88fb      	ldrh	r3, [r7, #6]
 80078fe:	f7fb ff57 	bl	80037b0 <HAL_DMA_Start_IT>
 8007902:	4603      	mov	r3, r0
 8007904:	2b00      	cmp	r3, #0
 8007906:	d008      	beq.n	800791a <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2210      	movs	r2, #16
 800790c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2220      	movs	r2, #32
 8007914:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	e020      	b.n	800795c <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	2240      	movs	r2, #64	; 0x40
 8007920:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	3308      	adds	r3, #8
 8007928:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	e853 3f00 	ldrex	r3, [r3]
 8007930:	613b      	str	r3, [r7, #16]
   return(result);
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007938:	627b      	str	r3, [r7, #36]	; 0x24
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	3308      	adds	r3, #8
 8007940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007942:	623a      	str	r2, [r7, #32]
 8007944:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007946:	69f9      	ldr	r1, [r7, #28]
 8007948:	6a3a      	ldr	r2, [r7, #32]
 800794a:	e841 2300 	strex	r3, r2, [r1]
 800794e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007950:	69bb      	ldr	r3, [r7, #24]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d1e5      	bne.n	8007922 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8007956:	2300      	movs	r3, #0
 8007958:	e000      	b.n	800795c <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800795a:	2302      	movs	r3, #2
  }
}
 800795c:	4618      	mov	r0, r3
 800795e:	3728      	adds	r7, #40	; 0x28
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}
 8007964:	0800879b 	.word	0x0800879b
 8007968:	0800882f 	.word	0x0800882f
 800796c:	0800884b 	.word	0x0800884b

08007970 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b0ba      	sub	sp, #232	; 0xe8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	69db      	ldr	r3, [r3, #28]
 800797e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007996:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800799a:	f640 030f 	movw	r3, #2063	; 0x80f
 800799e:	4013      	ands	r3, r2
 80079a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80079a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d115      	bne.n	80079d8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80079ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079b0:	f003 0320 	and.w	r3, r3, #32
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d00f      	beq.n	80079d8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80079b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079bc:	f003 0320 	and.w	r3, r3, #32
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d009      	beq.n	80079d8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	f000 82ab 	beq.w	8007f24 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	4798      	blx	r3
      }
      return;
 80079d6:	e2a5      	b.n	8007f24 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80079d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079dc:	2b00      	cmp	r3, #0
 80079de:	f000 8117 	beq.w	8007c10 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80079e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079e6:	f003 0301 	and.w	r3, r3, #1
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d106      	bne.n	80079fc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80079ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80079f2:	4b85      	ldr	r3, [pc, #532]	; (8007c08 <HAL_UART_IRQHandler+0x298>)
 80079f4:	4013      	ands	r3, r2
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	f000 810a 	beq.w	8007c10 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80079fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a00:	f003 0301 	and.w	r3, r3, #1
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d011      	beq.n	8007a2c <HAL_UART_IRQHandler+0xbc>
 8007a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d00b      	beq.n	8007a2c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	2201      	movs	r2, #1
 8007a1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a22:	f043 0201 	orr.w	r2, r3, #1
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a30:	f003 0302 	and.w	r3, r3, #2
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d011      	beq.n	8007a5c <HAL_UART_IRQHandler+0xec>
 8007a38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a3c:	f003 0301 	and.w	r3, r3, #1
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d00b      	beq.n	8007a5c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	2202      	movs	r2, #2
 8007a4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a52:	f043 0204 	orr.w	r2, r3, #4
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a60:	f003 0304 	and.w	r3, r3, #4
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d011      	beq.n	8007a8c <HAL_UART_IRQHandler+0x11c>
 8007a68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a6c:	f003 0301 	and.w	r3, r3, #1
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d00b      	beq.n	8007a8c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2204      	movs	r2, #4
 8007a7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a82:	f043 0202 	orr.w	r2, r3, #2
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a90:	f003 0308 	and.w	r3, r3, #8
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d017      	beq.n	8007ac8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a9c:	f003 0320 	and.w	r3, r3, #32
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d105      	bne.n	8007ab0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007aa4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007aa8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d00b      	beq.n	8007ac8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	2208      	movs	r2, #8
 8007ab6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007abe:	f043 0208 	orr.w	r2, r3, #8
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007acc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d012      	beq.n	8007afa <HAL_UART_IRQHandler+0x18a>
 8007ad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ad8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00c      	beq.n	8007afa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ae8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007af0:	f043 0220 	orr.w	r2, r3, #32
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	f000 8211 	beq.w	8007f28 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b0a:	f003 0320 	and.w	r3, r3, #32
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d00d      	beq.n	8007b2e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007b12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b16:	f003 0320 	and.w	r3, r3, #32
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d007      	beq.n	8007b2e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d003      	beq.n	8007b2e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b34:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b42:	2b40      	cmp	r3, #64	; 0x40
 8007b44:	d005      	beq.n	8007b52 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007b46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b4a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d04f      	beq.n	8007bf2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 fdbd 	bl	80086d2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	689b      	ldr	r3, [r3, #8]
 8007b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b62:	2b40      	cmp	r3, #64	; 0x40
 8007b64:	d141      	bne.n	8007bea <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	3308      	adds	r3, #8
 8007b6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b74:	e853 3f00 	ldrex	r3, [r3]
 8007b78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007b7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	3308      	adds	r3, #8
 8007b8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007b92:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007b96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007b9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007ba2:	e841 2300 	strex	r3, r2, [r1]
 8007ba6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007baa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d1d9      	bne.n	8007b66 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d013      	beq.n	8007be2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bbe:	4a13      	ldr	r2, [pc, #76]	; (8007c0c <HAL_UART_IRQHandler+0x29c>)
 8007bc0:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7fb fe8a 	bl	80038e0 <HAL_DMA_Abort_IT>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d017      	beq.n	8007c02 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007bdc:	4610      	mov	r0, r2
 8007bde:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007be0:	e00f      	b.n	8007c02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 f9b4 	bl	8007f50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007be8:	e00b      	b.n	8007c02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 f9b0 	bl	8007f50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bf0:	e007      	b.n	8007c02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 f9ac 	bl	8007f50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007c00:	e192      	b.n	8007f28 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c02:	bf00      	nop
    return;
 8007c04:	e190      	b.n	8007f28 <HAL_UART_IRQHandler+0x5b8>
 8007c06:	bf00      	nop
 8007c08:	04000120 	.word	0x04000120
 8007c0c:	080088c9 	.word	0x080088c9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	f040 814b 	bne.w	8007eb0 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c1e:	f003 0310 	and.w	r3, r3, #16
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	f000 8144 	beq.w	8007eb0 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c2c:	f003 0310 	and.w	r3, r3, #16
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	f000 813d 	beq.w	8007eb0 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	2210      	movs	r2, #16
 8007c3c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c48:	2b40      	cmp	r3, #64	; 0x40
 8007c4a:	f040 80b5 	bne.w	8007db8 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c5a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	f000 8164 	beq.w	8007f2c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007c6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	f080 815c 	bcs.w	8007f2c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c7a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c82:	699b      	ldr	r3, [r3, #24]
 8007c84:	2b20      	cmp	r3, #32
 8007c86:	f000 8086 	beq.w	8007d96 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c92:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c96:	e853 3f00 	ldrex	r3, [r3]
 8007c9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007c9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ca2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ca6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	461a      	mov	r2, r3
 8007cb0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007cb4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007cb8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cbc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007cc0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007cc4:	e841 2300 	strex	r3, r2, [r1]
 8007cc8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007ccc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d1da      	bne.n	8007c8a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	3308      	adds	r3, #8
 8007cda:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cdc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cde:	e853 3f00 	ldrex	r3, [r3]
 8007ce2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007ce4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ce6:	f023 0301 	bic.w	r3, r3, #1
 8007cea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	3308      	adds	r3, #8
 8007cf4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007cf8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007cfc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cfe:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007d00:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007d04:	e841 2300 	strex	r3, r2, [r1]
 8007d08:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007d0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d1e1      	bne.n	8007cd4 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	3308      	adds	r3, #8
 8007d16:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d1a:	e853 3f00 	ldrex	r3, [r3]
 8007d1e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007d20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	3308      	adds	r3, #8
 8007d30:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007d34:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007d36:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d38:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007d3a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007d3c:	e841 2300 	strex	r3, r2, [r1]
 8007d40:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007d42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d1e3      	bne.n	8007d10 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2220      	movs	r2, #32
 8007d4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2200      	movs	r2, #0
 8007d54:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d5e:	e853 3f00 	ldrex	r3, [r3]
 8007d62:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d66:	f023 0310 	bic.w	r3, r3, #16
 8007d6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	461a      	mov	r2, r3
 8007d74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d78:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d7a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d7c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d80:	e841 2300 	strex	r3, r2, [r1]
 8007d84:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d1e4      	bne.n	8007d56 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d90:	4618      	mov	r0, r3
 8007d92:	f7fb fd6c 	bl	800386e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2202      	movs	r2, #2
 8007d9a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	1ad3      	subs	r3, r2, r3
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	4619      	mov	r1, r3
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 f8d7 	bl	8007f64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007db6:	e0b9      	b.n	8007f2c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	1ad3      	subs	r3, r2, r3
 8007dc8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	f000 80ab 	beq.w	8007f30 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8007dda:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	f000 80a6 	beq.w	8007f30 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dec:	e853 3f00 	ldrex	r3, [r3]
 8007df0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007df4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007df8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	461a      	mov	r2, r3
 8007e02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e06:	647b      	str	r3, [r7, #68]	; 0x44
 8007e08:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e0e:	e841 2300 	strex	r3, r2, [r1]
 8007e12:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d1e4      	bne.n	8007de4 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	3308      	adds	r3, #8
 8007e20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e24:	e853 3f00 	ldrex	r3, [r3]
 8007e28:	623b      	str	r3, [r7, #32]
   return(result);
 8007e2a:	6a3b      	ldr	r3, [r7, #32]
 8007e2c:	f023 0301 	bic.w	r3, r3, #1
 8007e30:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	3308      	adds	r3, #8
 8007e3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007e3e:	633a      	str	r2, [r7, #48]	; 0x30
 8007e40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e46:	e841 2300 	strex	r3, r2, [r1]
 8007e4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d1e3      	bne.n	8007e1a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2220      	movs	r2, #32
 8007e56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	e853 3f00 	ldrex	r3, [r3]
 8007e72:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f023 0310 	bic.w	r3, r3, #16
 8007e7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	461a      	mov	r2, r3
 8007e84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007e88:	61fb      	str	r3, [r7, #28]
 8007e8a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e8c:	69b9      	ldr	r1, [r7, #24]
 8007e8e:	69fa      	ldr	r2, [r7, #28]
 8007e90:	e841 2300 	strex	r3, r2, [r1]
 8007e94:	617b      	str	r3, [r7, #20]
   return(result);
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d1e4      	bne.n	8007e66 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2202      	movs	r2, #2
 8007ea0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ea2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 f85b 	bl	8007f64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007eae:	e03f      	b.n	8007f30 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007eb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d00e      	beq.n	8007eda <HAL_UART_IRQHandler+0x56a>
 8007ebc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ec0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d008      	beq.n	8007eda <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007ed0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 fd38 	bl	8008948 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ed8:	e02d      	b.n	8007f36 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d00e      	beq.n	8007f04 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007ee6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d008      	beq.n	8007f04 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d01c      	beq.n	8007f34 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	4798      	blx	r3
    }
    return;
 8007f02:	e017      	b.n	8007f34 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d012      	beq.n	8007f36 <HAL_UART_IRQHandler+0x5c6>
 8007f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d00c      	beq.n	8007f36 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 fce9 	bl	80088f4 <UART_EndTransmit_IT>
    return;
 8007f22:	e008      	b.n	8007f36 <HAL_UART_IRQHandler+0x5c6>
      return;
 8007f24:	bf00      	nop
 8007f26:	e006      	b.n	8007f36 <HAL_UART_IRQHandler+0x5c6>
    return;
 8007f28:	bf00      	nop
 8007f2a:	e004      	b.n	8007f36 <HAL_UART_IRQHandler+0x5c6>
      return;
 8007f2c:	bf00      	nop
 8007f2e:	e002      	b.n	8007f36 <HAL_UART_IRQHandler+0x5c6>
      return;
 8007f30:	bf00      	nop
 8007f32:	e000      	b.n	8007f36 <HAL_UART_IRQHandler+0x5c6>
    return;
 8007f34:	bf00      	nop
  }

}
 8007f36:	37e8      	adds	r7, #232	; 0xe8
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007f44:	bf00      	nop
 8007f46:	370c      	adds	r7, #12
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007f58:	bf00      	nop
 8007f5a:	370c      	adds	r7, #12
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr

08007f64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b083      	sub	sp, #12
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	460b      	mov	r3, r1
 8007f6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f70:	bf00      	nop
 8007f72:	370c      	adds	r7, #12
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr

08007f7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b088      	sub	sp, #32
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f84:	2300      	movs	r3, #0
 8007f86:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	689a      	ldr	r2, [r3, #8]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	691b      	ldr	r3, [r3, #16]
 8007f90:	431a      	orrs	r2, r3
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	695b      	ldr	r3, [r3, #20]
 8007f96:	431a      	orrs	r2, r3
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	69db      	ldr	r3, [r3, #28]
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007faa:	f023 030c 	bic.w	r3, r3, #12
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	6812      	ldr	r2, [r2, #0]
 8007fb2:	6979      	ldr	r1, [r7, #20]
 8007fb4:	430b      	orrs	r3, r1
 8007fb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	68da      	ldr	r2, [r3, #12]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	430a      	orrs	r2, r1
 8007fcc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	699b      	ldr	r3, [r3, #24]
 8007fd2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6a1b      	ldr	r3, [r3, #32]
 8007fd8:	697a      	ldr	r2, [r7, #20]
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	697a      	ldr	r2, [r7, #20]
 8007fee:	430a      	orrs	r2, r1
 8007ff0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4aa7      	ldr	r2, [pc, #668]	; (8008294 <UART_SetConfig+0x318>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d120      	bne.n	800803e <UART_SetConfig+0xc2>
 8007ffc:	4ba6      	ldr	r3, [pc, #664]	; (8008298 <UART_SetConfig+0x31c>)
 8007ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008000:	f003 0303 	and.w	r3, r3, #3
 8008004:	2b03      	cmp	r3, #3
 8008006:	d817      	bhi.n	8008038 <UART_SetConfig+0xbc>
 8008008:	a201      	add	r2, pc, #4	; (adr r2, 8008010 <UART_SetConfig+0x94>)
 800800a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800800e:	bf00      	nop
 8008010:	08008021 	.word	0x08008021
 8008014:	0800802d 	.word	0x0800802d
 8008018:	08008033 	.word	0x08008033
 800801c:	08008027 	.word	0x08008027
 8008020:	2301      	movs	r3, #1
 8008022:	77fb      	strb	r3, [r7, #31]
 8008024:	e0b5      	b.n	8008192 <UART_SetConfig+0x216>
 8008026:	2302      	movs	r3, #2
 8008028:	77fb      	strb	r3, [r7, #31]
 800802a:	e0b2      	b.n	8008192 <UART_SetConfig+0x216>
 800802c:	2304      	movs	r3, #4
 800802e:	77fb      	strb	r3, [r7, #31]
 8008030:	e0af      	b.n	8008192 <UART_SetConfig+0x216>
 8008032:	2308      	movs	r3, #8
 8008034:	77fb      	strb	r3, [r7, #31]
 8008036:	e0ac      	b.n	8008192 <UART_SetConfig+0x216>
 8008038:	2310      	movs	r3, #16
 800803a:	77fb      	strb	r3, [r7, #31]
 800803c:	e0a9      	b.n	8008192 <UART_SetConfig+0x216>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a96      	ldr	r2, [pc, #600]	; (800829c <UART_SetConfig+0x320>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d124      	bne.n	8008092 <UART_SetConfig+0x116>
 8008048:	4b93      	ldr	r3, [pc, #588]	; (8008298 <UART_SetConfig+0x31c>)
 800804a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800804c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008050:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008054:	d011      	beq.n	800807a <UART_SetConfig+0xfe>
 8008056:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800805a:	d817      	bhi.n	800808c <UART_SetConfig+0x110>
 800805c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008060:	d011      	beq.n	8008086 <UART_SetConfig+0x10a>
 8008062:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008066:	d811      	bhi.n	800808c <UART_SetConfig+0x110>
 8008068:	2b00      	cmp	r3, #0
 800806a:	d003      	beq.n	8008074 <UART_SetConfig+0xf8>
 800806c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008070:	d006      	beq.n	8008080 <UART_SetConfig+0x104>
 8008072:	e00b      	b.n	800808c <UART_SetConfig+0x110>
 8008074:	2300      	movs	r3, #0
 8008076:	77fb      	strb	r3, [r7, #31]
 8008078:	e08b      	b.n	8008192 <UART_SetConfig+0x216>
 800807a:	2302      	movs	r3, #2
 800807c:	77fb      	strb	r3, [r7, #31]
 800807e:	e088      	b.n	8008192 <UART_SetConfig+0x216>
 8008080:	2304      	movs	r3, #4
 8008082:	77fb      	strb	r3, [r7, #31]
 8008084:	e085      	b.n	8008192 <UART_SetConfig+0x216>
 8008086:	2308      	movs	r3, #8
 8008088:	77fb      	strb	r3, [r7, #31]
 800808a:	e082      	b.n	8008192 <UART_SetConfig+0x216>
 800808c:	2310      	movs	r3, #16
 800808e:	77fb      	strb	r3, [r7, #31]
 8008090:	e07f      	b.n	8008192 <UART_SetConfig+0x216>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a82      	ldr	r2, [pc, #520]	; (80082a0 <UART_SetConfig+0x324>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d124      	bne.n	80080e6 <UART_SetConfig+0x16a>
 800809c:	4b7e      	ldr	r3, [pc, #504]	; (8008298 <UART_SetConfig+0x31c>)
 800809e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080a0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80080a4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80080a8:	d011      	beq.n	80080ce <UART_SetConfig+0x152>
 80080aa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80080ae:	d817      	bhi.n	80080e0 <UART_SetConfig+0x164>
 80080b0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80080b4:	d011      	beq.n	80080da <UART_SetConfig+0x15e>
 80080b6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80080ba:	d811      	bhi.n	80080e0 <UART_SetConfig+0x164>
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d003      	beq.n	80080c8 <UART_SetConfig+0x14c>
 80080c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80080c4:	d006      	beq.n	80080d4 <UART_SetConfig+0x158>
 80080c6:	e00b      	b.n	80080e0 <UART_SetConfig+0x164>
 80080c8:	2300      	movs	r3, #0
 80080ca:	77fb      	strb	r3, [r7, #31]
 80080cc:	e061      	b.n	8008192 <UART_SetConfig+0x216>
 80080ce:	2302      	movs	r3, #2
 80080d0:	77fb      	strb	r3, [r7, #31]
 80080d2:	e05e      	b.n	8008192 <UART_SetConfig+0x216>
 80080d4:	2304      	movs	r3, #4
 80080d6:	77fb      	strb	r3, [r7, #31]
 80080d8:	e05b      	b.n	8008192 <UART_SetConfig+0x216>
 80080da:	2308      	movs	r3, #8
 80080dc:	77fb      	strb	r3, [r7, #31]
 80080de:	e058      	b.n	8008192 <UART_SetConfig+0x216>
 80080e0:	2310      	movs	r3, #16
 80080e2:	77fb      	strb	r3, [r7, #31]
 80080e4:	e055      	b.n	8008192 <UART_SetConfig+0x216>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a6e      	ldr	r2, [pc, #440]	; (80082a4 <UART_SetConfig+0x328>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d124      	bne.n	800813a <UART_SetConfig+0x1be>
 80080f0:	4b69      	ldr	r3, [pc, #420]	; (8008298 <UART_SetConfig+0x31c>)
 80080f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080f4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80080f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80080fc:	d011      	beq.n	8008122 <UART_SetConfig+0x1a6>
 80080fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008102:	d817      	bhi.n	8008134 <UART_SetConfig+0x1b8>
 8008104:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008108:	d011      	beq.n	800812e <UART_SetConfig+0x1b2>
 800810a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800810e:	d811      	bhi.n	8008134 <UART_SetConfig+0x1b8>
 8008110:	2b00      	cmp	r3, #0
 8008112:	d003      	beq.n	800811c <UART_SetConfig+0x1a0>
 8008114:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008118:	d006      	beq.n	8008128 <UART_SetConfig+0x1ac>
 800811a:	e00b      	b.n	8008134 <UART_SetConfig+0x1b8>
 800811c:	2300      	movs	r3, #0
 800811e:	77fb      	strb	r3, [r7, #31]
 8008120:	e037      	b.n	8008192 <UART_SetConfig+0x216>
 8008122:	2302      	movs	r3, #2
 8008124:	77fb      	strb	r3, [r7, #31]
 8008126:	e034      	b.n	8008192 <UART_SetConfig+0x216>
 8008128:	2304      	movs	r3, #4
 800812a:	77fb      	strb	r3, [r7, #31]
 800812c:	e031      	b.n	8008192 <UART_SetConfig+0x216>
 800812e:	2308      	movs	r3, #8
 8008130:	77fb      	strb	r3, [r7, #31]
 8008132:	e02e      	b.n	8008192 <UART_SetConfig+0x216>
 8008134:	2310      	movs	r3, #16
 8008136:	77fb      	strb	r3, [r7, #31]
 8008138:	e02b      	b.n	8008192 <UART_SetConfig+0x216>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a5a      	ldr	r2, [pc, #360]	; (80082a8 <UART_SetConfig+0x32c>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d124      	bne.n	800818e <UART_SetConfig+0x212>
 8008144:	4b54      	ldr	r3, [pc, #336]	; (8008298 <UART_SetConfig+0x31c>)
 8008146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008148:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800814c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008150:	d011      	beq.n	8008176 <UART_SetConfig+0x1fa>
 8008152:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008156:	d817      	bhi.n	8008188 <UART_SetConfig+0x20c>
 8008158:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800815c:	d011      	beq.n	8008182 <UART_SetConfig+0x206>
 800815e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008162:	d811      	bhi.n	8008188 <UART_SetConfig+0x20c>
 8008164:	2b00      	cmp	r3, #0
 8008166:	d003      	beq.n	8008170 <UART_SetConfig+0x1f4>
 8008168:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800816c:	d006      	beq.n	800817c <UART_SetConfig+0x200>
 800816e:	e00b      	b.n	8008188 <UART_SetConfig+0x20c>
 8008170:	2300      	movs	r3, #0
 8008172:	77fb      	strb	r3, [r7, #31]
 8008174:	e00d      	b.n	8008192 <UART_SetConfig+0x216>
 8008176:	2302      	movs	r3, #2
 8008178:	77fb      	strb	r3, [r7, #31]
 800817a:	e00a      	b.n	8008192 <UART_SetConfig+0x216>
 800817c:	2304      	movs	r3, #4
 800817e:	77fb      	strb	r3, [r7, #31]
 8008180:	e007      	b.n	8008192 <UART_SetConfig+0x216>
 8008182:	2308      	movs	r3, #8
 8008184:	77fb      	strb	r3, [r7, #31]
 8008186:	e004      	b.n	8008192 <UART_SetConfig+0x216>
 8008188:	2310      	movs	r3, #16
 800818a:	77fb      	strb	r3, [r7, #31]
 800818c:	e001      	b.n	8008192 <UART_SetConfig+0x216>
 800818e:	2310      	movs	r3, #16
 8008190:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	69db      	ldr	r3, [r3, #28]
 8008196:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800819a:	d15b      	bne.n	8008254 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 800819c:	7ffb      	ldrb	r3, [r7, #31]
 800819e:	2b08      	cmp	r3, #8
 80081a0:	d827      	bhi.n	80081f2 <UART_SetConfig+0x276>
 80081a2:	a201      	add	r2, pc, #4	; (adr r2, 80081a8 <UART_SetConfig+0x22c>)
 80081a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081a8:	080081cd 	.word	0x080081cd
 80081ac:	080081d5 	.word	0x080081d5
 80081b0:	080081dd 	.word	0x080081dd
 80081b4:	080081f3 	.word	0x080081f3
 80081b8:	080081e3 	.word	0x080081e3
 80081bc:	080081f3 	.word	0x080081f3
 80081c0:	080081f3 	.word	0x080081f3
 80081c4:	080081f3 	.word	0x080081f3
 80081c8:	080081eb 	.word	0x080081eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081cc:	f7fd f9bc 	bl	8005548 <HAL_RCC_GetPCLK1Freq>
 80081d0:	61b8      	str	r0, [r7, #24]
        break;
 80081d2:	e013      	b.n	80081fc <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081d4:	f7fd f9da 	bl	800558c <HAL_RCC_GetPCLK2Freq>
 80081d8:	61b8      	str	r0, [r7, #24]
        break;
 80081da:	e00f      	b.n	80081fc <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081dc:	4b33      	ldr	r3, [pc, #204]	; (80082ac <UART_SetConfig+0x330>)
 80081de:	61bb      	str	r3, [r7, #24]
        break;
 80081e0:	e00c      	b.n	80081fc <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081e2:	f7fd f93b 	bl	800545c <HAL_RCC_GetSysClockFreq>
 80081e6:	61b8      	str	r0, [r7, #24]
        break;
 80081e8:	e008      	b.n	80081fc <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081ee:	61bb      	str	r3, [r7, #24]
        break;
 80081f0:	e004      	b.n	80081fc <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80081f2:	2300      	movs	r3, #0
 80081f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80081f6:	2301      	movs	r3, #1
 80081f8:	77bb      	strb	r3, [r7, #30]
        break;
 80081fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80081fc:	69bb      	ldr	r3, [r7, #24]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	f000 8082 	beq.w	8008308 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008204:	69bb      	ldr	r3, [r7, #24]
 8008206:	005a      	lsls	r2, r3, #1
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	085b      	lsrs	r3, r3, #1
 800820e:	441a      	add	r2, r3
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	fbb2 f3f3 	udiv	r3, r2, r3
 8008218:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	2b0f      	cmp	r3, #15
 800821e:	d916      	bls.n	800824e <UART_SetConfig+0x2d2>
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008226:	d212      	bcs.n	800824e <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	b29b      	uxth	r3, r3
 800822c:	f023 030f 	bic.w	r3, r3, #15
 8008230:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	085b      	lsrs	r3, r3, #1
 8008236:	b29b      	uxth	r3, r3
 8008238:	f003 0307 	and.w	r3, r3, #7
 800823c:	b29a      	uxth	r2, r3
 800823e:	89fb      	ldrh	r3, [r7, #14]
 8008240:	4313      	orrs	r3, r2
 8008242:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	89fa      	ldrh	r2, [r7, #14]
 800824a:	60da      	str	r2, [r3, #12]
 800824c:	e05c      	b.n	8008308 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800824e:	2301      	movs	r3, #1
 8008250:	77bb      	strb	r3, [r7, #30]
 8008252:	e059      	b.n	8008308 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008254:	7ffb      	ldrb	r3, [r7, #31]
 8008256:	2b08      	cmp	r3, #8
 8008258:	d835      	bhi.n	80082c6 <UART_SetConfig+0x34a>
 800825a:	a201      	add	r2, pc, #4	; (adr r2, 8008260 <UART_SetConfig+0x2e4>)
 800825c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008260:	08008285 	.word	0x08008285
 8008264:	0800828d 	.word	0x0800828d
 8008268:	080082b1 	.word	0x080082b1
 800826c:	080082c7 	.word	0x080082c7
 8008270:	080082b7 	.word	0x080082b7
 8008274:	080082c7 	.word	0x080082c7
 8008278:	080082c7 	.word	0x080082c7
 800827c:	080082c7 	.word	0x080082c7
 8008280:	080082bf 	.word	0x080082bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008284:	f7fd f960 	bl	8005548 <HAL_RCC_GetPCLK1Freq>
 8008288:	61b8      	str	r0, [r7, #24]
        break;
 800828a:	e021      	b.n	80082d0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800828c:	f7fd f97e 	bl	800558c <HAL_RCC_GetPCLK2Freq>
 8008290:	61b8      	str	r0, [r7, #24]
        break;
 8008292:	e01d      	b.n	80082d0 <UART_SetConfig+0x354>
 8008294:	40013800 	.word	0x40013800
 8008298:	40021000 	.word	0x40021000
 800829c:	40004400 	.word	0x40004400
 80082a0:	40004800 	.word	0x40004800
 80082a4:	40004c00 	.word	0x40004c00
 80082a8:	40005000 	.word	0x40005000
 80082ac:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082b0:	4b1b      	ldr	r3, [pc, #108]	; (8008320 <UART_SetConfig+0x3a4>)
 80082b2:	61bb      	str	r3, [r7, #24]
        break;
 80082b4:	e00c      	b.n	80082d0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082b6:	f7fd f8d1 	bl	800545c <HAL_RCC_GetSysClockFreq>
 80082ba:	61b8      	str	r0, [r7, #24]
        break;
 80082bc:	e008      	b.n	80082d0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082c2:	61bb      	str	r3, [r7, #24]
        break;
 80082c4:	e004      	b.n	80082d0 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80082c6:	2300      	movs	r3, #0
 80082c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	77bb      	strb	r3, [r7, #30]
        break;
 80082ce:	bf00      	nop
    }

    if (pclk != 0U)
 80082d0:	69bb      	ldr	r3, [r7, #24]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d018      	beq.n	8008308 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	085a      	lsrs	r2, r3, #1
 80082dc:	69bb      	ldr	r3, [r7, #24]
 80082de:	441a      	add	r2, r3
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80082e8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	2b0f      	cmp	r3, #15
 80082ee:	d909      	bls.n	8008304 <UART_SetConfig+0x388>
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082f6:	d205      	bcs.n	8008304 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	b29a      	uxth	r2, r3
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	60da      	str	r2, [r3, #12]
 8008302:	e001      	b.n	8008308 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8008304:	2301      	movs	r3, #1
 8008306:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2200      	movs	r2, #0
 800830c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2200      	movs	r2, #0
 8008312:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008314:	7fbb      	ldrb	r3, [r7, #30]
}
 8008316:	4618      	mov	r0, r3
 8008318:	3720      	adds	r7, #32
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
 800831e:	bf00      	nop
 8008320:	007a1200 	.word	0x007a1200

08008324 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008330:	f003 0301 	and.w	r3, r3, #1
 8008334:	2b00      	cmp	r3, #0
 8008336:	d00a      	beq.n	800834e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	430a      	orrs	r2, r1
 800834c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008352:	f003 0302 	and.w	r3, r3, #2
 8008356:	2b00      	cmp	r3, #0
 8008358:	d00a      	beq.n	8008370 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	430a      	orrs	r2, r1
 800836e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008374:	f003 0304 	and.w	r3, r3, #4
 8008378:	2b00      	cmp	r3, #0
 800837a:	d00a      	beq.n	8008392 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	430a      	orrs	r2, r1
 8008390:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008396:	f003 0308 	and.w	r3, r3, #8
 800839a:	2b00      	cmp	r3, #0
 800839c:	d00a      	beq.n	80083b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	430a      	orrs	r2, r1
 80083b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b8:	f003 0310 	and.w	r3, r3, #16
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d00a      	beq.n	80083d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	689b      	ldr	r3, [r3, #8]
 80083c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	430a      	orrs	r2, r1
 80083d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083da:	f003 0320 	and.w	r3, r3, #32
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d00a      	beq.n	80083f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	430a      	orrs	r2, r1
 80083f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008400:	2b00      	cmp	r3, #0
 8008402:	d01a      	beq.n	800843a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	430a      	orrs	r2, r1
 8008418:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800841e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008422:	d10a      	bne.n	800843a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	430a      	orrs	r2, r1
 8008438:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800843e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008442:	2b00      	cmp	r3, #0
 8008444:	d00a      	beq.n	800845c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	430a      	orrs	r2, r1
 800845a:	605a      	str	r2, [r3, #4]
  }
}
 800845c:	bf00      	nop
 800845e:	370c      	adds	r7, #12
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr

08008468 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b098      	sub	sp, #96	; 0x60
 800846c:	af02      	add	r7, sp, #8
 800846e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2200      	movs	r2, #0
 8008474:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008478:	f7f9 fc0e 	bl	8001c98 <HAL_GetTick>
 800847c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f003 0308 	and.w	r3, r3, #8
 8008488:	2b08      	cmp	r3, #8
 800848a:	d12e      	bne.n	80084ea <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800848c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008490:	9300      	str	r3, [sp, #0]
 8008492:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008494:	2200      	movs	r2, #0
 8008496:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 f88c 	bl	80085b8 <UART_WaitOnFlagUntilTimeout>
 80084a0:	4603      	mov	r3, r0
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d021      	beq.n	80084ea <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ae:	e853 3f00 	ldrex	r3, [r3]
 80084b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80084b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084ba:	653b      	str	r3, [r7, #80]	; 0x50
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	461a      	mov	r2, r3
 80084c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084c4:	647b      	str	r3, [r7, #68]	; 0x44
 80084c6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80084ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80084cc:	e841 2300 	strex	r3, r2, [r1]
 80084d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80084d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d1e6      	bne.n	80084a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2220      	movs	r2, #32
 80084dc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2200      	movs	r2, #0
 80084e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084e6:	2303      	movs	r3, #3
 80084e8:	e062      	b.n	80085b0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f003 0304 	and.w	r3, r3, #4
 80084f4:	2b04      	cmp	r3, #4
 80084f6:	d149      	bne.n	800858c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80084fc:	9300      	str	r3, [sp, #0]
 80084fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008500:	2200      	movs	r2, #0
 8008502:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 f856 	bl	80085b8 <UART_WaitOnFlagUntilTimeout>
 800850c:	4603      	mov	r3, r0
 800850e:	2b00      	cmp	r3, #0
 8008510:	d03c      	beq.n	800858c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851a:	e853 3f00 	ldrex	r3, [r3]
 800851e:	623b      	str	r3, [r7, #32]
   return(result);
 8008520:	6a3b      	ldr	r3, [r7, #32]
 8008522:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008526:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	461a      	mov	r2, r3
 800852e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008530:	633b      	str	r3, [r7, #48]	; 0x30
 8008532:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008534:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008536:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008538:	e841 2300 	strex	r3, r2, [r1]
 800853c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800853e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008540:	2b00      	cmp	r3, #0
 8008542:	d1e6      	bne.n	8008512 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	3308      	adds	r3, #8
 800854a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	e853 3f00 	ldrex	r3, [r3]
 8008552:	60fb      	str	r3, [r7, #12]
   return(result);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f023 0301 	bic.w	r3, r3, #1
 800855a:	64bb      	str	r3, [r7, #72]	; 0x48
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	3308      	adds	r3, #8
 8008562:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008564:	61fa      	str	r2, [r7, #28]
 8008566:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008568:	69b9      	ldr	r1, [r7, #24]
 800856a:	69fa      	ldr	r2, [r7, #28]
 800856c:	e841 2300 	strex	r3, r2, [r1]
 8008570:	617b      	str	r3, [r7, #20]
   return(result);
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d1e5      	bne.n	8008544 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2220      	movs	r2, #32
 800857c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008588:	2303      	movs	r3, #3
 800858a:	e011      	b.n	80085b0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2220      	movs	r2, #32
 8008590:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2220      	movs	r2, #32
 8008596:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2200      	movs	r2, #0
 80085a4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2200      	movs	r2, #0
 80085aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80085ae:	2300      	movs	r3, #0
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3758      	adds	r7, #88	; 0x58
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}

080085b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b084      	sub	sp, #16
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	603b      	str	r3, [r7, #0]
 80085c4:	4613      	mov	r3, r2
 80085c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085c8:	e049      	b.n	800865e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085ca:	69bb      	ldr	r3, [r7, #24]
 80085cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085d0:	d045      	beq.n	800865e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085d2:	f7f9 fb61 	bl	8001c98 <HAL_GetTick>
 80085d6:	4602      	mov	r2, r0
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	1ad3      	subs	r3, r2, r3
 80085dc:	69ba      	ldr	r2, [r7, #24]
 80085de:	429a      	cmp	r2, r3
 80085e0:	d302      	bcc.n	80085e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80085e2:	69bb      	ldr	r3, [r7, #24]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d101      	bne.n	80085ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80085e8:	2303      	movs	r3, #3
 80085ea:	e048      	b.n	800867e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f003 0304 	and.w	r3, r3, #4
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d031      	beq.n	800865e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	69db      	ldr	r3, [r3, #28]
 8008600:	f003 0308 	and.w	r3, r3, #8
 8008604:	2b08      	cmp	r3, #8
 8008606:	d110      	bne.n	800862a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	2208      	movs	r2, #8
 800860e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008610:	68f8      	ldr	r0, [r7, #12]
 8008612:	f000 f85e 	bl	80086d2 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2208      	movs	r2, #8
 800861a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2200      	movs	r2, #0
 8008622:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8008626:	2301      	movs	r3, #1
 8008628:	e029      	b.n	800867e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	69db      	ldr	r3, [r3, #28]
 8008630:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008634:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008638:	d111      	bne.n	800865e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008642:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008644:	68f8      	ldr	r0, [r7, #12]
 8008646:	f000 f844 	bl	80086d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2220      	movs	r2, #32
 800864e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2200      	movs	r2, #0
 8008656:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800865a:	2303      	movs	r3, #3
 800865c:	e00f      	b.n	800867e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	69da      	ldr	r2, [r3, #28]
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	4013      	ands	r3, r2
 8008668:	68ba      	ldr	r2, [r7, #8]
 800866a:	429a      	cmp	r2, r3
 800866c:	bf0c      	ite	eq
 800866e:	2301      	moveq	r3, #1
 8008670:	2300      	movne	r3, #0
 8008672:	b2db      	uxtb	r3, r3
 8008674:	461a      	mov	r2, r3
 8008676:	79fb      	ldrb	r3, [r7, #7]
 8008678:	429a      	cmp	r2, r3
 800867a:	d0a6      	beq.n	80085ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800867c:	2300      	movs	r3, #0
}
 800867e:	4618      	mov	r0, r3
 8008680:	3710      	adds	r7, #16
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}

08008686 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008686:	b480      	push	{r7}
 8008688:	b089      	sub	sp, #36	; 0x24
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	e853 3f00 	ldrex	r3, [r3]
 800869a:	60bb      	str	r3, [r7, #8]
   return(result);
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80086a2:	61fb      	str	r3, [r7, #28]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	461a      	mov	r2, r3
 80086aa:	69fb      	ldr	r3, [r7, #28]
 80086ac:	61bb      	str	r3, [r7, #24]
 80086ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b0:	6979      	ldr	r1, [r7, #20]
 80086b2:	69ba      	ldr	r2, [r7, #24]
 80086b4:	e841 2300 	strex	r3, r2, [r1]
 80086b8:	613b      	str	r3, [r7, #16]
   return(result);
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d1e6      	bne.n	800868e <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2220      	movs	r2, #32
 80086c4:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80086c6:	bf00      	nop
 80086c8:	3724      	adds	r7, #36	; 0x24
 80086ca:	46bd      	mov	sp, r7
 80086cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d0:	4770      	bx	lr

080086d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80086d2:	b480      	push	{r7}
 80086d4:	b095      	sub	sp, #84	; 0x54
 80086d6:	af00      	add	r7, sp, #0
 80086d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086e2:	e853 3f00 	ldrex	r3, [r3]
 80086e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80086e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80086ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	461a      	mov	r2, r3
 80086f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086f8:	643b      	str	r3, [r7, #64]	; 0x40
 80086fa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80086fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008700:	e841 2300 	strex	r3, r2, [r1]
 8008704:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008708:	2b00      	cmp	r3, #0
 800870a:	d1e6      	bne.n	80086da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	3308      	adds	r3, #8
 8008712:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008714:	6a3b      	ldr	r3, [r7, #32]
 8008716:	e853 3f00 	ldrex	r3, [r3]
 800871a:	61fb      	str	r3, [r7, #28]
   return(result);
 800871c:	69fb      	ldr	r3, [r7, #28]
 800871e:	f023 0301 	bic.w	r3, r3, #1
 8008722:	64bb      	str	r3, [r7, #72]	; 0x48
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	3308      	adds	r3, #8
 800872a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800872c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800872e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008730:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008732:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008734:	e841 2300 	strex	r3, r2, [r1]
 8008738:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800873a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873c:	2b00      	cmp	r3, #0
 800873e:	d1e5      	bne.n	800870c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008744:	2b01      	cmp	r3, #1
 8008746:	d118      	bne.n	800877a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	e853 3f00 	ldrex	r3, [r3]
 8008754:	60bb      	str	r3, [r7, #8]
   return(result);
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	f023 0310 	bic.w	r3, r3, #16
 800875c:	647b      	str	r3, [r7, #68]	; 0x44
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	461a      	mov	r2, r3
 8008764:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008766:	61bb      	str	r3, [r7, #24]
 8008768:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800876a:	6979      	ldr	r1, [r7, #20]
 800876c:	69ba      	ldr	r2, [r7, #24]
 800876e:	e841 2300 	strex	r3, r2, [r1]
 8008772:	613b      	str	r3, [r7, #16]
   return(result);
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d1e6      	bne.n	8008748 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2220      	movs	r2, #32
 800877e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2200      	movs	r2, #0
 8008786:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2200      	movs	r2, #0
 800878c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800878e:	bf00      	nop
 8008790:	3754      	adds	r7, #84	; 0x54
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr

0800879a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800879a:	b580      	push	{r7, lr}
 800879c:	b090      	sub	sp, #64	; 0x40
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	699b      	ldr	r3, [r3, #24]
 80087ac:	2b20      	cmp	r3, #32
 80087ae:	d037      	beq.n	8008820 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 80087b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087b2:	2200      	movs	r2, #0
 80087b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80087b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	3308      	adds	r3, #8
 80087be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c2:	e853 3f00 	ldrex	r3, [r3]
 80087c6:	623b      	str	r3, [r7, #32]
   return(result);
 80087c8:	6a3b      	ldr	r3, [r7, #32]
 80087ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80087d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	3308      	adds	r3, #8
 80087d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087d8:	633a      	str	r2, [r7, #48]	; 0x30
 80087da:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087e0:	e841 2300 	strex	r3, r2, [r1]
 80087e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80087e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d1e5      	bne.n	80087b8 <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80087ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	e853 3f00 	ldrex	r3, [r3]
 80087f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008800:	637b      	str	r3, [r7, #52]	; 0x34
 8008802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	461a      	mov	r2, r3
 8008808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800880a:	61fb      	str	r3, [r7, #28]
 800880c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800880e:	69b9      	ldr	r1, [r7, #24]
 8008810:	69fa      	ldr	r2, [r7, #28]
 8008812:	e841 2300 	strex	r3, r2, [r1]
 8008816:	617b      	str	r3, [r7, #20]
   return(result);
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d1e6      	bne.n	80087ec <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800881e:	e002      	b.n	8008826 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 8008820:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008822:	f7f8 fd0d 	bl	8001240 <HAL_UART_TxCpltCallback>
}
 8008826:	bf00      	nop
 8008828:	3740      	adds	r7, #64	; 0x40
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}

0800882e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800882e:	b580      	push	{r7, lr}
 8008830:	b084      	sub	sp, #16
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800883a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800883c:	68f8      	ldr	r0, [r7, #12]
 800883e:	f7ff fb7d 	bl	8007f3c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008842:	bf00      	nop
 8008844:	3710      	adds	r7, #16
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}

0800884a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800884a:	b580      	push	{r7, lr}
 800884c:	b086      	sub	sp, #24
 800884e:	af00      	add	r7, sp, #0
 8008850:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008856:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800885c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008864:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	689b      	ldr	r3, [r3, #8]
 800886c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008870:	2b80      	cmp	r3, #128	; 0x80
 8008872:	d109      	bne.n	8008888 <UART_DMAError+0x3e>
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	2b21      	cmp	r3, #33	; 0x21
 8008878:	d106      	bne.n	8008888 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	2200      	movs	r2, #0
 800887e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8008882:	6978      	ldr	r0, [r7, #20]
 8008884:	f7ff feff 	bl	8008686 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	689b      	ldr	r3, [r3, #8]
 800888e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008892:	2b40      	cmp	r3, #64	; 0x40
 8008894:	d109      	bne.n	80088aa <UART_DMAError+0x60>
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2b22      	cmp	r3, #34	; 0x22
 800889a:	d106      	bne.n	80088aa <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	2200      	movs	r2, #0
 80088a0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80088a4:	6978      	ldr	r0, [r7, #20]
 80088a6:	f7ff ff14 	bl	80086d2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088b0:	f043 0210 	orr.w	r2, r3, #16
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088ba:	6978      	ldr	r0, [r7, #20]
 80088bc:	f7ff fb48 	bl	8007f50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088c0:	bf00      	nop
 80088c2:	3718      	adds	r7, #24
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2200      	movs	r2, #0
 80088da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2200      	movs	r2, #0
 80088e2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088e6:	68f8      	ldr	r0, [r7, #12]
 80088e8:	f7ff fb32 	bl	8007f50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088ec:	bf00      	nop
 80088ee:	3710      	adds	r7, #16
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b088      	sub	sp, #32
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	e853 3f00 	ldrex	r3, [r3]
 8008908:	60bb      	str	r3, [r7, #8]
   return(result);
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008910:	61fb      	str	r3, [r7, #28]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	461a      	mov	r2, r3
 8008918:	69fb      	ldr	r3, [r7, #28]
 800891a:	61bb      	str	r3, [r7, #24]
 800891c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800891e:	6979      	ldr	r1, [r7, #20]
 8008920:	69ba      	ldr	r2, [r7, #24]
 8008922:	e841 2300 	strex	r3, r2, [r1]
 8008926:	613b      	str	r3, [r7, #16]
   return(result);
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d1e6      	bne.n	80088fc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2220      	movs	r2, #32
 8008932:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2200      	movs	r2, #0
 8008938:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f7f8 fc80 	bl	8001240 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008940:	bf00      	nop
 8008942:	3720      	adds	r7, #32
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008948:	b480      	push	{r7}
 800894a:	b083      	sub	sp, #12
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008950:	bf00      	nop
 8008952:	370c      	adds	r7, #12
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <__errno>:
 800895c:	4b01      	ldr	r3, [pc, #4]	; (8008964 <__errno+0x8>)
 800895e:	6818      	ldr	r0, [r3, #0]
 8008960:	4770      	bx	lr
 8008962:	bf00      	nop
 8008964:	2000000c 	.word	0x2000000c

08008968 <__libc_init_array>:
 8008968:	b570      	push	{r4, r5, r6, lr}
 800896a:	4d0d      	ldr	r5, [pc, #52]	; (80089a0 <__libc_init_array+0x38>)
 800896c:	4c0d      	ldr	r4, [pc, #52]	; (80089a4 <__libc_init_array+0x3c>)
 800896e:	1b64      	subs	r4, r4, r5
 8008970:	10a4      	asrs	r4, r4, #2
 8008972:	2600      	movs	r6, #0
 8008974:	42a6      	cmp	r6, r4
 8008976:	d109      	bne.n	800898c <__libc_init_array+0x24>
 8008978:	4d0b      	ldr	r5, [pc, #44]	; (80089a8 <__libc_init_array+0x40>)
 800897a:	4c0c      	ldr	r4, [pc, #48]	; (80089ac <__libc_init_array+0x44>)
 800897c:	f000 fc8e 	bl	800929c <_init>
 8008980:	1b64      	subs	r4, r4, r5
 8008982:	10a4      	asrs	r4, r4, #2
 8008984:	2600      	movs	r6, #0
 8008986:	42a6      	cmp	r6, r4
 8008988:	d105      	bne.n	8008996 <__libc_init_array+0x2e>
 800898a:	bd70      	pop	{r4, r5, r6, pc}
 800898c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008990:	4798      	blx	r3
 8008992:	3601      	adds	r6, #1
 8008994:	e7ee      	b.n	8008974 <__libc_init_array+0xc>
 8008996:	f855 3b04 	ldr.w	r3, [r5], #4
 800899a:	4798      	blx	r3
 800899c:	3601      	adds	r6, #1
 800899e:	e7f2      	b.n	8008986 <__libc_init_array+0x1e>
 80089a0:	08009394 	.word	0x08009394
 80089a4:	08009394 	.word	0x08009394
 80089a8:	08009394 	.word	0x08009394
 80089ac:	08009398 	.word	0x08009398

080089b0 <memset>:
 80089b0:	4402      	add	r2, r0
 80089b2:	4603      	mov	r3, r0
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d100      	bne.n	80089ba <memset+0xa>
 80089b8:	4770      	bx	lr
 80089ba:	f803 1b01 	strb.w	r1, [r3], #1
 80089be:	e7f9      	b.n	80089b4 <memset+0x4>

080089c0 <siprintf>:
 80089c0:	b40e      	push	{r1, r2, r3}
 80089c2:	b500      	push	{lr}
 80089c4:	b09c      	sub	sp, #112	; 0x70
 80089c6:	ab1d      	add	r3, sp, #116	; 0x74
 80089c8:	9002      	str	r0, [sp, #8]
 80089ca:	9006      	str	r0, [sp, #24]
 80089cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80089d0:	4809      	ldr	r0, [pc, #36]	; (80089f8 <siprintf+0x38>)
 80089d2:	9107      	str	r1, [sp, #28]
 80089d4:	9104      	str	r1, [sp, #16]
 80089d6:	4909      	ldr	r1, [pc, #36]	; (80089fc <siprintf+0x3c>)
 80089d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80089dc:	9105      	str	r1, [sp, #20]
 80089de:	6800      	ldr	r0, [r0, #0]
 80089e0:	9301      	str	r3, [sp, #4]
 80089e2:	a902      	add	r1, sp, #8
 80089e4:	f000 f868 	bl	8008ab8 <_svfiprintf_r>
 80089e8:	9b02      	ldr	r3, [sp, #8]
 80089ea:	2200      	movs	r2, #0
 80089ec:	701a      	strb	r2, [r3, #0]
 80089ee:	b01c      	add	sp, #112	; 0x70
 80089f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80089f4:	b003      	add	sp, #12
 80089f6:	4770      	bx	lr
 80089f8:	2000000c 	.word	0x2000000c
 80089fc:	ffff0208 	.word	0xffff0208

08008a00 <__ssputs_r>:
 8008a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a04:	688e      	ldr	r6, [r1, #8]
 8008a06:	429e      	cmp	r6, r3
 8008a08:	4682      	mov	sl, r0
 8008a0a:	460c      	mov	r4, r1
 8008a0c:	4690      	mov	r8, r2
 8008a0e:	461f      	mov	r7, r3
 8008a10:	d838      	bhi.n	8008a84 <__ssputs_r+0x84>
 8008a12:	898a      	ldrh	r2, [r1, #12]
 8008a14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008a18:	d032      	beq.n	8008a80 <__ssputs_r+0x80>
 8008a1a:	6825      	ldr	r5, [r4, #0]
 8008a1c:	6909      	ldr	r1, [r1, #16]
 8008a1e:	eba5 0901 	sub.w	r9, r5, r1
 8008a22:	6965      	ldr	r5, [r4, #20]
 8008a24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	444b      	add	r3, r9
 8008a30:	106d      	asrs	r5, r5, #1
 8008a32:	429d      	cmp	r5, r3
 8008a34:	bf38      	it	cc
 8008a36:	461d      	movcc	r5, r3
 8008a38:	0553      	lsls	r3, r2, #21
 8008a3a:	d531      	bpl.n	8008aa0 <__ssputs_r+0xa0>
 8008a3c:	4629      	mov	r1, r5
 8008a3e:	f000 fb63 	bl	8009108 <_malloc_r>
 8008a42:	4606      	mov	r6, r0
 8008a44:	b950      	cbnz	r0, 8008a5c <__ssputs_r+0x5c>
 8008a46:	230c      	movs	r3, #12
 8008a48:	f8ca 3000 	str.w	r3, [sl]
 8008a4c:	89a3      	ldrh	r3, [r4, #12]
 8008a4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a52:	81a3      	strh	r3, [r4, #12]
 8008a54:	f04f 30ff 	mov.w	r0, #4294967295
 8008a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a5c:	6921      	ldr	r1, [r4, #16]
 8008a5e:	464a      	mov	r2, r9
 8008a60:	f000 fabe 	bl	8008fe0 <memcpy>
 8008a64:	89a3      	ldrh	r3, [r4, #12]
 8008a66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008a6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a6e:	81a3      	strh	r3, [r4, #12]
 8008a70:	6126      	str	r6, [r4, #16]
 8008a72:	6165      	str	r5, [r4, #20]
 8008a74:	444e      	add	r6, r9
 8008a76:	eba5 0509 	sub.w	r5, r5, r9
 8008a7a:	6026      	str	r6, [r4, #0]
 8008a7c:	60a5      	str	r5, [r4, #8]
 8008a7e:	463e      	mov	r6, r7
 8008a80:	42be      	cmp	r6, r7
 8008a82:	d900      	bls.n	8008a86 <__ssputs_r+0x86>
 8008a84:	463e      	mov	r6, r7
 8008a86:	6820      	ldr	r0, [r4, #0]
 8008a88:	4632      	mov	r2, r6
 8008a8a:	4641      	mov	r1, r8
 8008a8c:	f000 fab6 	bl	8008ffc <memmove>
 8008a90:	68a3      	ldr	r3, [r4, #8]
 8008a92:	1b9b      	subs	r3, r3, r6
 8008a94:	60a3      	str	r3, [r4, #8]
 8008a96:	6823      	ldr	r3, [r4, #0]
 8008a98:	4433      	add	r3, r6
 8008a9a:	6023      	str	r3, [r4, #0]
 8008a9c:	2000      	movs	r0, #0
 8008a9e:	e7db      	b.n	8008a58 <__ssputs_r+0x58>
 8008aa0:	462a      	mov	r2, r5
 8008aa2:	f000 fba5 	bl	80091f0 <_realloc_r>
 8008aa6:	4606      	mov	r6, r0
 8008aa8:	2800      	cmp	r0, #0
 8008aaa:	d1e1      	bne.n	8008a70 <__ssputs_r+0x70>
 8008aac:	6921      	ldr	r1, [r4, #16]
 8008aae:	4650      	mov	r0, sl
 8008ab0:	f000 fabe 	bl	8009030 <_free_r>
 8008ab4:	e7c7      	b.n	8008a46 <__ssputs_r+0x46>
	...

08008ab8 <_svfiprintf_r>:
 8008ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008abc:	4698      	mov	r8, r3
 8008abe:	898b      	ldrh	r3, [r1, #12]
 8008ac0:	061b      	lsls	r3, r3, #24
 8008ac2:	b09d      	sub	sp, #116	; 0x74
 8008ac4:	4607      	mov	r7, r0
 8008ac6:	460d      	mov	r5, r1
 8008ac8:	4614      	mov	r4, r2
 8008aca:	d50e      	bpl.n	8008aea <_svfiprintf_r+0x32>
 8008acc:	690b      	ldr	r3, [r1, #16]
 8008ace:	b963      	cbnz	r3, 8008aea <_svfiprintf_r+0x32>
 8008ad0:	2140      	movs	r1, #64	; 0x40
 8008ad2:	f000 fb19 	bl	8009108 <_malloc_r>
 8008ad6:	6028      	str	r0, [r5, #0]
 8008ad8:	6128      	str	r0, [r5, #16]
 8008ada:	b920      	cbnz	r0, 8008ae6 <_svfiprintf_r+0x2e>
 8008adc:	230c      	movs	r3, #12
 8008ade:	603b      	str	r3, [r7, #0]
 8008ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ae4:	e0d1      	b.n	8008c8a <_svfiprintf_r+0x1d2>
 8008ae6:	2340      	movs	r3, #64	; 0x40
 8008ae8:	616b      	str	r3, [r5, #20]
 8008aea:	2300      	movs	r3, #0
 8008aec:	9309      	str	r3, [sp, #36]	; 0x24
 8008aee:	2320      	movs	r3, #32
 8008af0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008af4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008af8:	2330      	movs	r3, #48	; 0x30
 8008afa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008ca4 <_svfiprintf_r+0x1ec>
 8008afe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b02:	f04f 0901 	mov.w	r9, #1
 8008b06:	4623      	mov	r3, r4
 8008b08:	469a      	mov	sl, r3
 8008b0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b0e:	b10a      	cbz	r2, 8008b14 <_svfiprintf_r+0x5c>
 8008b10:	2a25      	cmp	r2, #37	; 0x25
 8008b12:	d1f9      	bne.n	8008b08 <_svfiprintf_r+0x50>
 8008b14:	ebba 0b04 	subs.w	fp, sl, r4
 8008b18:	d00b      	beq.n	8008b32 <_svfiprintf_r+0x7a>
 8008b1a:	465b      	mov	r3, fp
 8008b1c:	4622      	mov	r2, r4
 8008b1e:	4629      	mov	r1, r5
 8008b20:	4638      	mov	r0, r7
 8008b22:	f7ff ff6d 	bl	8008a00 <__ssputs_r>
 8008b26:	3001      	adds	r0, #1
 8008b28:	f000 80aa 	beq.w	8008c80 <_svfiprintf_r+0x1c8>
 8008b2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b2e:	445a      	add	r2, fp
 8008b30:	9209      	str	r2, [sp, #36]	; 0x24
 8008b32:	f89a 3000 	ldrb.w	r3, [sl]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	f000 80a2 	beq.w	8008c80 <_svfiprintf_r+0x1c8>
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8008b42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b46:	f10a 0a01 	add.w	sl, sl, #1
 8008b4a:	9304      	str	r3, [sp, #16]
 8008b4c:	9307      	str	r3, [sp, #28]
 8008b4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b52:	931a      	str	r3, [sp, #104]	; 0x68
 8008b54:	4654      	mov	r4, sl
 8008b56:	2205      	movs	r2, #5
 8008b58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b5c:	4851      	ldr	r0, [pc, #324]	; (8008ca4 <_svfiprintf_r+0x1ec>)
 8008b5e:	f7f7 fb37 	bl	80001d0 <memchr>
 8008b62:	9a04      	ldr	r2, [sp, #16]
 8008b64:	b9d8      	cbnz	r0, 8008b9e <_svfiprintf_r+0xe6>
 8008b66:	06d0      	lsls	r0, r2, #27
 8008b68:	bf44      	itt	mi
 8008b6a:	2320      	movmi	r3, #32
 8008b6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b70:	0711      	lsls	r1, r2, #28
 8008b72:	bf44      	itt	mi
 8008b74:	232b      	movmi	r3, #43	; 0x2b
 8008b76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b7a:	f89a 3000 	ldrb.w	r3, [sl]
 8008b7e:	2b2a      	cmp	r3, #42	; 0x2a
 8008b80:	d015      	beq.n	8008bae <_svfiprintf_r+0xf6>
 8008b82:	9a07      	ldr	r2, [sp, #28]
 8008b84:	4654      	mov	r4, sl
 8008b86:	2000      	movs	r0, #0
 8008b88:	f04f 0c0a 	mov.w	ip, #10
 8008b8c:	4621      	mov	r1, r4
 8008b8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b92:	3b30      	subs	r3, #48	; 0x30
 8008b94:	2b09      	cmp	r3, #9
 8008b96:	d94e      	bls.n	8008c36 <_svfiprintf_r+0x17e>
 8008b98:	b1b0      	cbz	r0, 8008bc8 <_svfiprintf_r+0x110>
 8008b9a:	9207      	str	r2, [sp, #28]
 8008b9c:	e014      	b.n	8008bc8 <_svfiprintf_r+0x110>
 8008b9e:	eba0 0308 	sub.w	r3, r0, r8
 8008ba2:	fa09 f303 	lsl.w	r3, r9, r3
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	9304      	str	r3, [sp, #16]
 8008baa:	46a2      	mov	sl, r4
 8008bac:	e7d2      	b.n	8008b54 <_svfiprintf_r+0x9c>
 8008bae:	9b03      	ldr	r3, [sp, #12]
 8008bb0:	1d19      	adds	r1, r3, #4
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	9103      	str	r1, [sp, #12]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	bfbb      	ittet	lt
 8008bba:	425b      	neglt	r3, r3
 8008bbc:	f042 0202 	orrlt.w	r2, r2, #2
 8008bc0:	9307      	strge	r3, [sp, #28]
 8008bc2:	9307      	strlt	r3, [sp, #28]
 8008bc4:	bfb8      	it	lt
 8008bc6:	9204      	strlt	r2, [sp, #16]
 8008bc8:	7823      	ldrb	r3, [r4, #0]
 8008bca:	2b2e      	cmp	r3, #46	; 0x2e
 8008bcc:	d10c      	bne.n	8008be8 <_svfiprintf_r+0x130>
 8008bce:	7863      	ldrb	r3, [r4, #1]
 8008bd0:	2b2a      	cmp	r3, #42	; 0x2a
 8008bd2:	d135      	bne.n	8008c40 <_svfiprintf_r+0x188>
 8008bd4:	9b03      	ldr	r3, [sp, #12]
 8008bd6:	1d1a      	adds	r2, r3, #4
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	9203      	str	r2, [sp, #12]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	bfb8      	it	lt
 8008be0:	f04f 33ff 	movlt.w	r3, #4294967295
 8008be4:	3402      	adds	r4, #2
 8008be6:	9305      	str	r3, [sp, #20]
 8008be8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008cb4 <_svfiprintf_r+0x1fc>
 8008bec:	7821      	ldrb	r1, [r4, #0]
 8008bee:	2203      	movs	r2, #3
 8008bf0:	4650      	mov	r0, sl
 8008bf2:	f7f7 faed 	bl	80001d0 <memchr>
 8008bf6:	b140      	cbz	r0, 8008c0a <_svfiprintf_r+0x152>
 8008bf8:	2340      	movs	r3, #64	; 0x40
 8008bfa:	eba0 000a 	sub.w	r0, r0, sl
 8008bfe:	fa03 f000 	lsl.w	r0, r3, r0
 8008c02:	9b04      	ldr	r3, [sp, #16]
 8008c04:	4303      	orrs	r3, r0
 8008c06:	3401      	adds	r4, #1
 8008c08:	9304      	str	r3, [sp, #16]
 8008c0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c0e:	4826      	ldr	r0, [pc, #152]	; (8008ca8 <_svfiprintf_r+0x1f0>)
 8008c10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c14:	2206      	movs	r2, #6
 8008c16:	f7f7 fadb 	bl	80001d0 <memchr>
 8008c1a:	2800      	cmp	r0, #0
 8008c1c:	d038      	beq.n	8008c90 <_svfiprintf_r+0x1d8>
 8008c1e:	4b23      	ldr	r3, [pc, #140]	; (8008cac <_svfiprintf_r+0x1f4>)
 8008c20:	bb1b      	cbnz	r3, 8008c6a <_svfiprintf_r+0x1b2>
 8008c22:	9b03      	ldr	r3, [sp, #12]
 8008c24:	3307      	adds	r3, #7
 8008c26:	f023 0307 	bic.w	r3, r3, #7
 8008c2a:	3308      	adds	r3, #8
 8008c2c:	9303      	str	r3, [sp, #12]
 8008c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c30:	4433      	add	r3, r6
 8008c32:	9309      	str	r3, [sp, #36]	; 0x24
 8008c34:	e767      	b.n	8008b06 <_svfiprintf_r+0x4e>
 8008c36:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c3a:	460c      	mov	r4, r1
 8008c3c:	2001      	movs	r0, #1
 8008c3e:	e7a5      	b.n	8008b8c <_svfiprintf_r+0xd4>
 8008c40:	2300      	movs	r3, #0
 8008c42:	3401      	adds	r4, #1
 8008c44:	9305      	str	r3, [sp, #20]
 8008c46:	4619      	mov	r1, r3
 8008c48:	f04f 0c0a 	mov.w	ip, #10
 8008c4c:	4620      	mov	r0, r4
 8008c4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c52:	3a30      	subs	r2, #48	; 0x30
 8008c54:	2a09      	cmp	r2, #9
 8008c56:	d903      	bls.n	8008c60 <_svfiprintf_r+0x1a8>
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d0c5      	beq.n	8008be8 <_svfiprintf_r+0x130>
 8008c5c:	9105      	str	r1, [sp, #20]
 8008c5e:	e7c3      	b.n	8008be8 <_svfiprintf_r+0x130>
 8008c60:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c64:	4604      	mov	r4, r0
 8008c66:	2301      	movs	r3, #1
 8008c68:	e7f0      	b.n	8008c4c <_svfiprintf_r+0x194>
 8008c6a:	ab03      	add	r3, sp, #12
 8008c6c:	9300      	str	r3, [sp, #0]
 8008c6e:	462a      	mov	r2, r5
 8008c70:	4b0f      	ldr	r3, [pc, #60]	; (8008cb0 <_svfiprintf_r+0x1f8>)
 8008c72:	a904      	add	r1, sp, #16
 8008c74:	4638      	mov	r0, r7
 8008c76:	f3af 8000 	nop.w
 8008c7a:	1c42      	adds	r2, r0, #1
 8008c7c:	4606      	mov	r6, r0
 8008c7e:	d1d6      	bne.n	8008c2e <_svfiprintf_r+0x176>
 8008c80:	89ab      	ldrh	r3, [r5, #12]
 8008c82:	065b      	lsls	r3, r3, #25
 8008c84:	f53f af2c 	bmi.w	8008ae0 <_svfiprintf_r+0x28>
 8008c88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c8a:	b01d      	add	sp, #116	; 0x74
 8008c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c90:	ab03      	add	r3, sp, #12
 8008c92:	9300      	str	r3, [sp, #0]
 8008c94:	462a      	mov	r2, r5
 8008c96:	4b06      	ldr	r3, [pc, #24]	; (8008cb0 <_svfiprintf_r+0x1f8>)
 8008c98:	a904      	add	r1, sp, #16
 8008c9a:	4638      	mov	r0, r7
 8008c9c:	f000 f87a 	bl	8008d94 <_printf_i>
 8008ca0:	e7eb      	b.n	8008c7a <_svfiprintf_r+0x1c2>
 8008ca2:	bf00      	nop
 8008ca4:	08009360 	.word	0x08009360
 8008ca8:	0800936a 	.word	0x0800936a
 8008cac:	00000000 	.word	0x00000000
 8008cb0:	08008a01 	.word	0x08008a01
 8008cb4:	08009366 	.word	0x08009366

08008cb8 <_printf_common>:
 8008cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cbc:	4616      	mov	r6, r2
 8008cbe:	4699      	mov	r9, r3
 8008cc0:	688a      	ldr	r2, [r1, #8]
 8008cc2:	690b      	ldr	r3, [r1, #16]
 8008cc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	bfb8      	it	lt
 8008ccc:	4613      	movlt	r3, r2
 8008cce:	6033      	str	r3, [r6, #0]
 8008cd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008cd4:	4607      	mov	r7, r0
 8008cd6:	460c      	mov	r4, r1
 8008cd8:	b10a      	cbz	r2, 8008cde <_printf_common+0x26>
 8008cda:	3301      	adds	r3, #1
 8008cdc:	6033      	str	r3, [r6, #0]
 8008cde:	6823      	ldr	r3, [r4, #0]
 8008ce0:	0699      	lsls	r1, r3, #26
 8008ce2:	bf42      	ittt	mi
 8008ce4:	6833      	ldrmi	r3, [r6, #0]
 8008ce6:	3302      	addmi	r3, #2
 8008ce8:	6033      	strmi	r3, [r6, #0]
 8008cea:	6825      	ldr	r5, [r4, #0]
 8008cec:	f015 0506 	ands.w	r5, r5, #6
 8008cf0:	d106      	bne.n	8008d00 <_printf_common+0x48>
 8008cf2:	f104 0a19 	add.w	sl, r4, #25
 8008cf6:	68e3      	ldr	r3, [r4, #12]
 8008cf8:	6832      	ldr	r2, [r6, #0]
 8008cfa:	1a9b      	subs	r3, r3, r2
 8008cfc:	42ab      	cmp	r3, r5
 8008cfe:	dc26      	bgt.n	8008d4e <_printf_common+0x96>
 8008d00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008d04:	1e13      	subs	r3, r2, #0
 8008d06:	6822      	ldr	r2, [r4, #0]
 8008d08:	bf18      	it	ne
 8008d0a:	2301      	movne	r3, #1
 8008d0c:	0692      	lsls	r2, r2, #26
 8008d0e:	d42b      	bmi.n	8008d68 <_printf_common+0xb0>
 8008d10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d14:	4649      	mov	r1, r9
 8008d16:	4638      	mov	r0, r7
 8008d18:	47c0      	blx	r8
 8008d1a:	3001      	adds	r0, #1
 8008d1c:	d01e      	beq.n	8008d5c <_printf_common+0xa4>
 8008d1e:	6823      	ldr	r3, [r4, #0]
 8008d20:	68e5      	ldr	r5, [r4, #12]
 8008d22:	6832      	ldr	r2, [r6, #0]
 8008d24:	f003 0306 	and.w	r3, r3, #6
 8008d28:	2b04      	cmp	r3, #4
 8008d2a:	bf08      	it	eq
 8008d2c:	1aad      	subeq	r5, r5, r2
 8008d2e:	68a3      	ldr	r3, [r4, #8]
 8008d30:	6922      	ldr	r2, [r4, #16]
 8008d32:	bf0c      	ite	eq
 8008d34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d38:	2500      	movne	r5, #0
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	bfc4      	itt	gt
 8008d3e:	1a9b      	subgt	r3, r3, r2
 8008d40:	18ed      	addgt	r5, r5, r3
 8008d42:	2600      	movs	r6, #0
 8008d44:	341a      	adds	r4, #26
 8008d46:	42b5      	cmp	r5, r6
 8008d48:	d11a      	bne.n	8008d80 <_printf_common+0xc8>
 8008d4a:	2000      	movs	r0, #0
 8008d4c:	e008      	b.n	8008d60 <_printf_common+0xa8>
 8008d4e:	2301      	movs	r3, #1
 8008d50:	4652      	mov	r2, sl
 8008d52:	4649      	mov	r1, r9
 8008d54:	4638      	mov	r0, r7
 8008d56:	47c0      	blx	r8
 8008d58:	3001      	adds	r0, #1
 8008d5a:	d103      	bne.n	8008d64 <_printf_common+0xac>
 8008d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d64:	3501      	adds	r5, #1
 8008d66:	e7c6      	b.n	8008cf6 <_printf_common+0x3e>
 8008d68:	18e1      	adds	r1, r4, r3
 8008d6a:	1c5a      	adds	r2, r3, #1
 8008d6c:	2030      	movs	r0, #48	; 0x30
 8008d6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008d72:	4422      	add	r2, r4
 8008d74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008d78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d7c:	3302      	adds	r3, #2
 8008d7e:	e7c7      	b.n	8008d10 <_printf_common+0x58>
 8008d80:	2301      	movs	r3, #1
 8008d82:	4622      	mov	r2, r4
 8008d84:	4649      	mov	r1, r9
 8008d86:	4638      	mov	r0, r7
 8008d88:	47c0      	blx	r8
 8008d8a:	3001      	adds	r0, #1
 8008d8c:	d0e6      	beq.n	8008d5c <_printf_common+0xa4>
 8008d8e:	3601      	adds	r6, #1
 8008d90:	e7d9      	b.n	8008d46 <_printf_common+0x8e>
	...

08008d94 <_printf_i>:
 8008d94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d98:	7e0f      	ldrb	r7, [r1, #24]
 8008d9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008d9c:	2f78      	cmp	r7, #120	; 0x78
 8008d9e:	4691      	mov	r9, r2
 8008da0:	4680      	mov	r8, r0
 8008da2:	460c      	mov	r4, r1
 8008da4:	469a      	mov	sl, r3
 8008da6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008daa:	d807      	bhi.n	8008dbc <_printf_i+0x28>
 8008dac:	2f62      	cmp	r7, #98	; 0x62
 8008dae:	d80a      	bhi.n	8008dc6 <_printf_i+0x32>
 8008db0:	2f00      	cmp	r7, #0
 8008db2:	f000 80d8 	beq.w	8008f66 <_printf_i+0x1d2>
 8008db6:	2f58      	cmp	r7, #88	; 0x58
 8008db8:	f000 80a3 	beq.w	8008f02 <_printf_i+0x16e>
 8008dbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008dc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008dc4:	e03a      	b.n	8008e3c <_printf_i+0xa8>
 8008dc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008dca:	2b15      	cmp	r3, #21
 8008dcc:	d8f6      	bhi.n	8008dbc <_printf_i+0x28>
 8008dce:	a101      	add	r1, pc, #4	; (adr r1, 8008dd4 <_printf_i+0x40>)
 8008dd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008dd4:	08008e2d 	.word	0x08008e2d
 8008dd8:	08008e41 	.word	0x08008e41
 8008ddc:	08008dbd 	.word	0x08008dbd
 8008de0:	08008dbd 	.word	0x08008dbd
 8008de4:	08008dbd 	.word	0x08008dbd
 8008de8:	08008dbd 	.word	0x08008dbd
 8008dec:	08008e41 	.word	0x08008e41
 8008df0:	08008dbd 	.word	0x08008dbd
 8008df4:	08008dbd 	.word	0x08008dbd
 8008df8:	08008dbd 	.word	0x08008dbd
 8008dfc:	08008dbd 	.word	0x08008dbd
 8008e00:	08008f4d 	.word	0x08008f4d
 8008e04:	08008e71 	.word	0x08008e71
 8008e08:	08008f2f 	.word	0x08008f2f
 8008e0c:	08008dbd 	.word	0x08008dbd
 8008e10:	08008dbd 	.word	0x08008dbd
 8008e14:	08008f6f 	.word	0x08008f6f
 8008e18:	08008dbd 	.word	0x08008dbd
 8008e1c:	08008e71 	.word	0x08008e71
 8008e20:	08008dbd 	.word	0x08008dbd
 8008e24:	08008dbd 	.word	0x08008dbd
 8008e28:	08008f37 	.word	0x08008f37
 8008e2c:	682b      	ldr	r3, [r5, #0]
 8008e2e:	1d1a      	adds	r2, r3, #4
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	602a      	str	r2, [r5, #0]
 8008e34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	e0a3      	b.n	8008f88 <_printf_i+0x1f4>
 8008e40:	6820      	ldr	r0, [r4, #0]
 8008e42:	6829      	ldr	r1, [r5, #0]
 8008e44:	0606      	lsls	r6, r0, #24
 8008e46:	f101 0304 	add.w	r3, r1, #4
 8008e4a:	d50a      	bpl.n	8008e62 <_printf_i+0xce>
 8008e4c:	680e      	ldr	r6, [r1, #0]
 8008e4e:	602b      	str	r3, [r5, #0]
 8008e50:	2e00      	cmp	r6, #0
 8008e52:	da03      	bge.n	8008e5c <_printf_i+0xc8>
 8008e54:	232d      	movs	r3, #45	; 0x2d
 8008e56:	4276      	negs	r6, r6
 8008e58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e5c:	485e      	ldr	r0, [pc, #376]	; (8008fd8 <_printf_i+0x244>)
 8008e5e:	230a      	movs	r3, #10
 8008e60:	e019      	b.n	8008e96 <_printf_i+0x102>
 8008e62:	680e      	ldr	r6, [r1, #0]
 8008e64:	602b      	str	r3, [r5, #0]
 8008e66:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008e6a:	bf18      	it	ne
 8008e6c:	b236      	sxthne	r6, r6
 8008e6e:	e7ef      	b.n	8008e50 <_printf_i+0xbc>
 8008e70:	682b      	ldr	r3, [r5, #0]
 8008e72:	6820      	ldr	r0, [r4, #0]
 8008e74:	1d19      	adds	r1, r3, #4
 8008e76:	6029      	str	r1, [r5, #0]
 8008e78:	0601      	lsls	r1, r0, #24
 8008e7a:	d501      	bpl.n	8008e80 <_printf_i+0xec>
 8008e7c:	681e      	ldr	r6, [r3, #0]
 8008e7e:	e002      	b.n	8008e86 <_printf_i+0xf2>
 8008e80:	0646      	lsls	r6, r0, #25
 8008e82:	d5fb      	bpl.n	8008e7c <_printf_i+0xe8>
 8008e84:	881e      	ldrh	r6, [r3, #0]
 8008e86:	4854      	ldr	r0, [pc, #336]	; (8008fd8 <_printf_i+0x244>)
 8008e88:	2f6f      	cmp	r7, #111	; 0x6f
 8008e8a:	bf0c      	ite	eq
 8008e8c:	2308      	moveq	r3, #8
 8008e8e:	230a      	movne	r3, #10
 8008e90:	2100      	movs	r1, #0
 8008e92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e96:	6865      	ldr	r5, [r4, #4]
 8008e98:	60a5      	str	r5, [r4, #8]
 8008e9a:	2d00      	cmp	r5, #0
 8008e9c:	bfa2      	ittt	ge
 8008e9e:	6821      	ldrge	r1, [r4, #0]
 8008ea0:	f021 0104 	bicge.w	r1, r1, #4
 8008ea4:	6021      	strge	r1, [r4, #0]
 8008ea6:	b90e      	cbnz	r6, 8008eac <_printf_i+0x118>
 8008ea8:	2d00      	cmp	r5, #0
 8008eaa:	d04d      	beq.n	8008f48 <_printf_i+0x1b4>
 8008eac:	4615      	mov	r5, r2
 8008eae:	fbb6 f1f3 	udiv	r1, r6, r3
 8008eb2:	fb03 6711 	mls	r7, r3, r1, r6
 8008eb6:	5dc7      	ldrb	r7, [r0, r7]
 8008eb8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008ebc:	4637      	mov	r7, r6
 8008ebe:	42bb      	cmp	r3, r7
 8008ec0:	460e      	mov	r6, r1
 8008ec2:	d9f4      	bls.n	8008eae <_printf_i+0x11a>
 8008ec4:	2b08      	cmp	r3, #8
 8008ec6:	d10b      	bne.n	8008ee0 <_printf_i+0x14c>
 8008ec8:	6823      	ldr	r3, [r4, #0]
 8008eca:	07de      	lsls	r6, r3, #31
 8008ecc:	d508      	bpl.n	8008ee0 <_printf_i+0x14c>
 8008ece:	6923      	ldr	r3, [r4, #16]
 8008ed0:	6861      	ldr	r1, [r4, #4]
 8008ed2:	4299      	cmp	r1, r3
 8008ed4:	bfde      	ittt	le
 8008ed6:	2330      	movle	r3, #48	; 0x30
 8008ed8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008edc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008ee0:	1b52      	subs	r2, r2, r5
 8008ee2:	6122      	str	r2, [r4, #16]
 8008ee4:	f8cd a000 	str.w	sl, [sp]
 8008ee8:	464b      	mov	r3, r9
 8008eea:	aa03      	add	r2, sp, #12
 8008eec:	4621      	mov	r1, r4
 8008eee:	4640      	mov	r0, r8
 8008ef0:	f7ff fee2 	bl	8008cb8 <_printf_common>
 8008ef4:	3001      	adds	r0, #1
 8008ef6:	d14c      	bne.n	8008f92 <_printf_i+0x1fe>
 8008ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8008efc:	b004      	add	sp, #16
 8008efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f02:	4835      	ldr	r0, [pc, #212]	; (8008fd8 <_printf_i+0x244>)
 8008f04:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008f08:	6829      	ldr	r1, [r5, #0]
 8008f0a:	6823      	ldr	r3, [r4, #0]
 8008f0c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008f10:	6029      	str	r1, [r5, #0]
 8008f12:	061d      	lsls	r5, r3, #24
 8008f14:	d514      	bpl.n	8008f40 <_printf_i+0x1ac>
 8008f16:	07df      	lsls	r7, r3, #31
 8008f18:	bf44      	itt	mi
 8008f1a:	f043 0320 	orrmi.w	r3, r3, #32
 8008f1e:	6023      	strmi	r3, [r4, #0]
 8008f20:	b91e      	cbnz	r6, 8008f2a <_printf_i+0x196>
 8008f22:	6823      	ldr	r3, [r4, #0]
 8008f24:	f023 0320 	bic.w	r3, r3, #32
 8008f28:	6023      	str	r3, [r4, #0]
 8008f2a:	2310      	movs	r3, #16
 8008f2c:	e7b0      	b.n	8008e90 <_printf_i+0xfc>
 8008f2e:	6823      	ldr	r3, [r4, #0]
 8008f30:	f043 0320 	orr.w	r3, r3, #32
 8008f34:	6023      	str	r3, [r4, #0]
 8008f36:	2378      	movs	r3, #120	; 0x78
 8008f38:	4828      	ldr	r0, [pc, #160]	; (8008fdc <_printf_i+0x248>)
 8008f3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008f3e:	e7e3      	b.n	8008f08 <_printf_i+0x174>
 8008f40:	0659      	lsls	r1, r3, #25
 8008f42:	bf48      	it	mi
 8008f44:	b2b6      	uxthmi	r6, r6
 8008f46:	e7e6      	b.n	8008f16 <_printf_i+0x182>
 8008f48:	4615      	mov	r5, r2
 8008f4a:	e7bb      	b.n	8008ec4 <_printf_i+0x130>
 8008f4c:	682b      	ldr	r3, [r5, #0]
 8008f4e:	6826      	ldr	r6, [r4, #0]
 8008f50:	6961      	ldr	r1, [r4, #20]
 8008f52:	1d18      	adds	r0, r3, #4
 8008f54:	6028      	str	r0, [r5, #0]
 8008f56:	0635      	lsls	r5, r6, #24
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	d501      	bpl.n	8008f60 <_printf_i+0x1cc>
 8008f5c:	6019      	str	r1, [r3, #0]
 8008f5e:	e002      	b.n	8008f66 <_printf_i+0x1d2>
 8008f60:	0670      	lsls	r0, r6, #25
 8008f62:	d5fb      	bpl.n	8008f5c <_printf_i+0x1c8>
 8008f64:	8019      	strh	r1, [r3, #0]
 8008f66:	2300      	movs	r3, #0
 8008f68:	6123      	str	r3, [r4, #16]
 8008f6a:	4615      	mov	r5, r2
 8008f6c:	e7ba      	b.n	8008ee4 <_printf_i+0x150>
 8008f6e:	682b      	ldr	r3, [r5, #0]
 8008f70:	1d1a      	adds	r2, r3, #4
 8008f72:	602a      	str	r2, [r5, #0]
 8008f74:	681d      	ldr	r5, [r3, #0]
 8008f76:	6862      	ldr	r2, [r4, #4]
 8008f78:	2100      	movs	r1, #0
 8008f7a:	4628      	mov	r0, r5
 8008f7c:	f7f7 f928 	bl	80001d0 <memchr>
 8008f80:	b108      	cbz	r0, 8008f86 <_printf_i+0x1f2>
 8008f82:	1b40      	subs	r0, r0, r5
 8008f84:	6060      	str	r0, [r4, #4]
 8008f86:	6863      	ldr	r3, [r4, #4]
 8008f88:	6123      	str	r3, [r4, #16]
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f90:	e7a8      	b.n	8008ee4 <_printf_i+0x150>
 8008f92:	6923      	ldr	r3, [r4, #16]
 8008f94:	462a      	mov	r2, r5
 8008f96:	4649      	mov	r1, r9
 8008f98:	4640      	mov	r0, r8
 8008f9a:	47d0      	blx	sl
 8008f9c:	3001      	adds	r0, #1
 8008f9e:	d0ab      	beq.n	8008ef8 <_printf_i+0x164>
 8008fa0:	6823      	ldr	r3, [r4, #0]
 8008fa2:	079b      	lsls	r3, r3, #30
 8008fa4:	d413      	bmi.n	8008fce <_printf_i+0x23a>
 8008fa6:	68e0      	ldr	r0, [r4, #12]
 8008fa8:	9b03      	ldr	r3, [sp, #12]
 8008faa:	4298      	cmp	r0, r3
 8008fac:	bfb8      	it	lt
 8008fae:	4618      	movlt	r0, r3
 8008fb0:	e7a4      	b.n	8008efc <_printf_i+0x168>
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	4632      	mov	r2, r6
 8008fb6:	4649      	mov	r1, r9
 8008fb8:	4640      	mov	r0, r8
 8008fba:	47d0      	blx	sl
 8008fbc:	3001      	adds	r0, #1
 8008fbe:	d09b      	beq.n	8008ef8 <_printf_i+0x164>
 8008fc0:	3501      	adds	r5, #1
 8008fc2:	68e3      	ldr	r3, [r4, #12]
 8008fc4:	9903      	ldr	r1, [sp, #12]
 8008fc6:	1a5b      	subs	r3, r3, r1
 8008fc8:	42ab      	cmp	r3, r5
 8008fca:	dcf2      	bgt.n	8008fb2 <_printf_i+0x21e>
 8008fcc:	e7eb      	b.n	8008fa6 <_printf_i+0x212>
 8008fce:	2500      	movs	r5, #0
 8008fd0:	f104 0619 	add.w	r6, r4, #25
 8008fd4:	e7f5      	b.n	8008fc2 <_printf_i+0x22e>
 8008fd6:	bf00      	nop
 8008fd8:	08009371 	.word	0x08009371
 8008fdc:	08009382 	.word	0x08009382

08008fe0 <memcpy>:
 8008fe0:	440a      	add	r2, r1
 8008fe2:	4291      	cmp	r1, r2
 8008fe4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008fe8:	d100      	bne.n	8008fec <memcpy+0xc>
 8008fea:	4770      	bx	lr
 8008fec:	b510      	push	{r4, lr}
 8008fee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ff2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ff6:	4291      	cmp	r1, r2
 8008ff8:	d1f9      	bne.n	8008fee <memcpy+0xe>
 8008ffa:	bd10      	pop	{r4, pc}

08008ffc <memmove>:
 8008ffc:	4288      	cmp	r0, r1
 8008ffe:	b510      	push	{r4, lr}
 8009000:	eb01 0402 	add.w	r4, r1, r2
 8009004:	d902      	bls.n	800900c <memmove+0x10>
 8009006:	4284      	cmp	r4, r0
 8009008:	4623      	mov	r3, r4
 800900a:	d807      	bhi.n	800901c <memmove+0x20>
 800900c:	1e43      	subs	r3, r0, #1
 800900e:	42a1      	cmp	r1, r4
 8009010:	d008      	beq.n	8009024 <memmove+0x28>
 8009012:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009016:	f803 2f01 	strb.w	r2, [r3, #1]!
 800901a:	e7f8      	b.n	800900e <memmove+0x12>
 800901c:	4402      	add	r2, r0
 800901e:	4601      	mov	r1, r0
 8009020:	428a      	cmp	r2, r1
 8009022:	d100      	bne.n	8009026 <memmove+0x2a>
 8009024:	bd10      	pop	{r4, pc}
 8009026:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800902a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800902e:	e7f7      	b.n	8009020 <memmove+0x24>

08009030 <_free_r>:
 8009030:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009032:	2900      	cmp	r1, #0
 8009034:	d044      	beq.n	80090c0 <_free_r+0x90>
 8009036:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800903a:	9001      	str	r0, [sp, #4]
 800903c:	2b00      	cmp	r3, #0
 800903e:	f1a1 0404 	sub.w	r4, r1, #4
 8009042:	bfb8      	it	lt
 8009044:	18e4      	addlt	r4, r4, r3
 8009046:	f000 f913 	bl	8009270 <__malloc_lock>
 800904a:	4a1e      	ldr	r2, [pc, #120]	; (80090c4 <_free_r+0x94>)
 800904c:	9801      	ldr	r0, [sp, #4]
 800904e:	6813      	ldr	r3, [r2, #0]
 8009050:	b933      	cbnz	r3, 8009060 <_free_r+0x30>
 8009052:	6063      	str	r3, [r4, #4]
 8009054:	6014      	str	r4, [r2, #0]
 8009056:	b003      	add	sp, #12
 8009058:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800905c:	f000 b90e 	b.w	800927c <__malloc_unlock>
 8009060:	42a3      	cmp	r3, r4
 8009062:	d908      	bls.n	8009076 <_free_r+0x46>
 8009064:	6825      	ldr	r5, [r4, #0]
 8009066:	1961      	adds	r1, r4, r5
 8009068:	428b      	cmp	r3, r1
 800906a:	bf01      	itttt	eq
 800906c:	6819      	ldreq	r1, [r3, #0]
 800906e:	685b      	ldreq	r3, [r3, #4]
 8009070:	1949      	addeq	r1, r1, r5
 8009072:	6021      	streq	r1, [r4, #0]
 8009074:	e7ed      	b.n	8009052 <_free_r+0x22>
 8009076:	461a      	mov	r2, r3
 8009078:	685b      	ldr	r3, [r3, #4]
 800907a:	b10b      	cbz	r3, 8009080 <_free_r+0x50>
 800907c:	42a3      	cmp	r3, r4
 800907e:	d9fa      	bls.n	8009076 <_free_r+0x46>
 8009080:	6811      	ldr	r1, [r2, #0]
 8009082:	1855      	adds	r5, r2, r1
 8009084:	42a5      	cmp	r5, r4
 8009086:	d10b      	bne.n	80090a0 <_free_r+0x70>
 8009088:	6824      	ldr	r4, [r4, #0]
 800908a:	4421      	add	r1, r4
 800908c:	1854      	adds	r4, r2, r1
 800908e:	42a3      	cmp	r3, r4
 8009090:	6011      	str	r1, [r2, #0]
 8009092:	d1e0      	bne.n	8009056 <_free_r+0x26>
 8009094:	681c      	ldr	r4, [r3, #0]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	6053      	str	r3, [r2, #4]
 800909a:	4421      	add	r1, r4
 800909c:	6011      	str	r1, [r2, #0]
 800909e:	e7da      	b.n	8009056 <_free_r+0x26>
 80090a0:	d902      	bls.n	80090a8 <_free_r+0x78>
 80090a2:	230c      	movs	r3, #12
 80090a4:	6003      	str	r3, [r0, #0]
 80090a6:	e7d6      	b.n	8009056 <_free_r+0x26>
 80090a8:	6825      	ldr	r5, [r4, #0]
 80090aa:	1961      	adds	r1, r4, r5
 80090ac:	428b      	cmp	r3, r1
 80090ae:	bf04      	itt	eq
 80090b0:	6819      	ldreq	r1, [r3, #0]
 80090b2:	685b      	ldreq	r3, [r3, #4]
 80090b4:	6063      	str	r3, [r4, #4]
 80090b6:	bf04      	itt	eq
 80090b8:	1949      	addeq	r1, r1, r5
 80090ba:	6021      	streq	r1, [r4, #0]
 80090bc:	6054      	str	r4, [r2, #4]
 80090be:	e7ca      	b.n	8009056 <_free_r+0x26>
 80090c0:	b003      	add	sp, #12
 80090c2:	bd30      	pop	{r4, r5, pc}
 80090c4:	2000058c 	.word	0x2000058c

080090c8 <sbrk_aligned>:
 80090c8:	b570      	push	{r4, r5, r6, lr}
 80090ca:	4e0e      	ldr	r6, [pc, #56]	; (8009104 <sbrk_aligned+0x3c>)
 80090cc:	460c      	mov	r4, r1
 80090ce:	6831      	ldr	r1, [r6, #0]
 80090d0:	4605      	mov	r5, r0
 80090d2:	b911      	cbnz	r1, 80090da <sbrk_aligned+0x12>
 80090d4:	f000 f8bc 	bl	8009250 <_sbrk_r>
 80090d8:	6030      	str	r0, [r6, #0]
 80090da:	4621      	mov	r1, r4
 80090dc:	4628      	mov	r0, r5
 80090de:	f000 f8b7 	bl	8009250 <_sbrk_r>
 80090e2:	1c43      	adds	r3, r0, #1
 80090e4:	d00a      	beq.n	80090fc <sbrk_aligned+0x34>
 80090e6:	1cc4      	adds	r4, r0, #3
 80090e8:	f024 0403 	bic.w	r4, r4, #3
 80090ec:	42a0      	cmp	r0, r4
 80090ee:	d007      	beq.n	8009100 <sbrk_aligned+0x38>
 80090f0:	1a21      	subs	r1, r4, r0
 80090f2:	4628      	mov	r0, r5
 80090f4:	f000 f8ac 	bl	8009250 <_sbrk_r>
 80090f8:	3001      	adds	r0, #1
 80090fa:	d101      	bne.n	8009100 <sbrk_aligned+0x38>
 80090fc:	f04f 34ff 	mov.w	r4, #4294967295
 8009100:	4620      	mov	r0, r4
 8009102:	bd70      	pop	{r4, r5, r6, pc}
 8009104:	20000590 	.word	0x20000590

08009108 <_malloc_r>:
 8009108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800910c:	1ccd      	adds	r5, r1, #3
 800910e:	f025 0503 	bic.w	r5, r5, #3
 8009112:	3508      	adds	r5, #8
 8009114:	2d0c      	cmp	r5, #12
 8009116:	bf38      	it	cc
 8009118:	250c      	movcc	r5, #12
 800911a:	2d00      	cmp	r5, #0
 800911c:	4607      	mov	r7, r0
 800911e:	db01      	blt.n	8009124 <_malloc_r+0x1c>
 8009120:	42a9      	cmp	r1, r5
 8009122:	d905      	bls.n	8009130 <_malloc_r+0x28>
 8009124:	230c      	movs	r3, #12
 8009126:	603b      	str	r3, [r7, #0]
 8009128:	2600      	movs	r6, #0
 800912a:	4630      	mov	r0, r6
 800912c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009130:	4e2e      	ldr	r6, [pc, #184]	; (80091ec <_malloc_r+0xe4>)
 8009132:	f000 f89d 	bl	8009270 <__malloc_lock>
 8009136:	6833      	ldr	r3, [r6, #0]
 8009138:	461c      	mov	r4, r3
 800913a:	bb34      	cbnz	r4, 800918a <_malloc_r+0x82>
 800913c:	4629      	mov	r1, r5
 800913e:	4638      	mov	r0, r7
 8009140:	f7ff ffc2 	bl	80090c8 <sbrk_aligned>
 8009144:	1c43      	adds	r3, r0, #1
 8009146:	4604      	mov	r4, r0
 8009148:	d14d      	bne.n	80091e6 <_malloc_r+0xde>
 800914a:	6834      	ldr	r4, [r6, #0]
 800914c:	4626      	mov	r6, r4
 800914e:	2e00      	cmp	r6, #0
 8009150:	d140      	bne.n	80091d4 <_malloc_r+0xcc>
 8009152:	6823      	ldr	r3, [r4, #0]
 8009154:	4631      	mov	r1, r6
 8009156:	4638      	mov	r0, r7
 8009158:	eb04 0803 	add.w	r8, r4, r3
 800915c:	f000 f878 	bl	8009250 <_sbrk_r>
 8009160:	4580      	cmp	r8, r0
 8009162:	d13a      	bne.n	80091da <_malloc_r+0xd2>
 8009164:	6821      	ldr	r1, [r4, #0]
 8009166:	3503      	adds	r5, #3
 8009168:	1a6d      	subs	r5, r5, r1
 800916a:	f025 0503 	bic.w	r5, r5, #3
 800916e:	3508      	adds	r5, #8
 8009170:	2d0c      	cmp	r5, #12
 8009172:	bf38      	it	cc
 8009174:	250c      	movcc	r5, #12
 8009176:	4629      	mov	r1, r5
 8009178:	4638      	mov	r0, r7
 800917a:	f7ff ffa5 	bl	80090c8 <sbrk_aligned>
 800917e:	3001      	adds	r0, #1
 8009180:	d02b      	beq.n	80091da <_malloc_r+0xd2>
 8009182:	6823      	ldr	r3, [r4, #0]
 8009184:	442b      	add	r3, r5
 8009186:	6023      	str	r3, [r4, #0]
 8009188:	e00e      	b.n	80091a8 <_malloc_r+0xa0>
 800918a:	6822      	ldr	r2, [r4, #0]
 800918c:	1b52      	subs	r2, r2, r5
 800918e:	d41e      	bmi.n	80091ce <_malloc_r+0xc6>
 8009190:	2a0b      	cmp	r2, #11
 8009192:	d916      	bls.n	80091c2 <_malloc_r+0xba>
 8009194:	1961      	adds	r1, r4, r5
 8009196:	42a3      	cmp	r3, r4
 8009198:	6025      	str	r5, [r4, #0]
 800919a:	bf18      	it	ne
 800919c:	6059      	strne	r1, [r3, #4]
 800919e:	6863      	ldr	r3, [r4, #4]
 80091a0:	bf08      	it	eq
 80091a2:	6031      	streq	r1, [r6, #0]
 80091a4:	5162      	str	r2, [r4, r5]
 80091a6:	604b      	str	r3, [r1, #4]
 80091a8:	4638      	mov	r0, r7
 80091aa:	f104 060b 	add.w	r6, r4, #11
 80091ae:	f000 f865 	bl	800927c <__malloc_unlock>
 80091b2:	f026 0607 	bic.w	r6, r6, #7
 80091b6:	1d23      	adds	r3, r4, #4
 80091b8:	1af2      	subs	r2, r6, r3
 80091ba:	d0b6      	beq.n	800912a <_malloc_r+0x22>
 80091bc:	1b9b      	subs	r3, r3, r6
 80091be:	50a3      	str	r3, [r4, r2]
 80091c0:	e7b3      	b.n	800912a <_malloc_r+0x22>
 80091c2:	6862      	ldr	r2, [r4, #4]
 80091c4:	42a3      	cmp	r3, r4
 80091c6:	bf0c      	ite	eq
 80091c8:	6032      	streq	r2, [r6, #0]
 80091ca:	605a      	strne	r2, [r3, #4]
 80091cc:	e7ec      	b.n	80091a8 <_malloc_r+0xa0>
 80091ce:	4623      	mov	r3, r4
 80091d0:	6864      	ldr	r4, [r4, #4]
 80091d2:	e7b2      	b.n	800913a <_malloc_r+0x32>
 80091d4:	4634      	mov	r4, r6
 80091d6:	6876      	ldr	r6, [r6, #4]
 80091d8:	e7b9      	b.n	800914e <_malloc_r+0x46>
 80091da:	230c      	movs	r3, #12
 80091dc:	603b      	str	r3, [r7, #0]
 80091de:	4638      	mov	r0, r7
 80091e0:	f000 f84c 	bl	800927c <__malloc_unlock>
 80091e4:	e7a1      	b.n	800912a <_malloc_r+0x22>
 80091e6:	6025      	str	r5, [r4, #0]
 80091e8:	e7de      	b.n	80091a8 <_malloc_r+0xa0>
 80091ea:	bf00      	nop
 80091ec:	2000058c 	.word	0x2000058c

080091f0 <_realloc_r>:
 80091f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091f4:	4680      	mov	r8, r0
 80091f6:	4614      	mov	r4, r2
 80091f8:	460e      	mov	r6, r1
 80091fa:	b921      	cbnz	r1, 8009206 <_realloc_r+0x16>
 80091fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009200:	4611      	mov	r1, r2
 8009202:	f7ff bf81 	b.w	8009108 <_malloc_r>
 8009206:	b92a      	cbnz	r2, 8009214 <_realloc_r+0x24>
 8009208:	f7ff ff12 	bl	8009030 <_free_r>
 800920c:	4625      	mov	r5, r4
 800920e:	4628      	mov	r0, r5
 8009210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009214:	f000 f838 	bl	8009288 <_malloc_usable_size_r>
 8009218:	4284      	cmp	r4, r0
 800921a:	4607      	mov	r7, r0
 800921c:	d802      	bhi.n	8009224 <_realloc_r+0x34>
 800921e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009222:	d812      	bhi.n	800924a <_realloc_r+0x5a>
 8009224:	4621      	mov	r1, r4
 8009226:	4640      	mov	r0, r8
 8009228:	f7ff ff6e 	bl	8009108 <_malloc_r>
 800922c:	4605      	mov	r5, r0
 800922e:	2800      	cmp	r0, #0
 8009230:	d0ed      	beq.n	800920e <_realloc_r+0x1e>
 8009232:	42bc      	cmp	r4, r7
 8009234:	4622      	mov	r2, r4
 8009236:	4631      	mov	r1, r6
 8009238:	bf28      	it	cs
 800923a:	463a      	movcs	r2, r7
 800923c:	f7ff fed0 	bl	8008fe0 <memcpy>
 8009240:	4631      	mov	r1, r6
 8009242:	4640      	mov	r0, r8
 8009244:	f7ff fef4 	bl	8009030 <_free_r>
 8009248:	e7e1      	b.n	800920e <_realloc_r+0x1e>
 800924a:	4635      	mov	r5, r6
 800924c:	e7df      	b.n	800920e <_realloc_r+0x1e>
	...

08009250 <_sbrk_r>:
 8009250:	b538      	push	{r3, r4, r5, lr}
 8009252:	4d06      	ldr	r5, [pc, #24]	; (800926c <_sbrk_r+0x1c>)
 8009254:	2300      	movs	r3, #0
 8009256:	4604      	mov	r4, r0
 8009258:	4608      	mov	r0, r1
 800925a:	602b      	str	r3, [r5, #0]
 800925c:	f7f8 fc50 	bl	8001b00 <_sbrk>
 8009260:	1c43      	adds	r3, r0, #1
 8009262:	d102      	bne.n	800926a <_sbrk_r+0x1a>
 8009264:	682b      	ldr	r3, [r5, #0]
 8009266:	b103      	cbz	r3, 800926a <_sbrk_r+0x1a>
 8009268:	6023      	str	r3, [r4, #0]
 800926a:	bd38      	pop	{r3, r4, r5, pc}
 800926c:	20000594 	.word	0x20000594

08009270 <__malloc_lock>:
 8009270:	4801      	ldr	r0, [pc, #4]	; (8009278 <__malloc_lock+0x8>)
 8009272:	f000 b811 	b.w	8009298 <__retarget_lock_acquire_recursive>
 8009276:	bf00      	nop
 8009278:	20000598 	.word	0x20000598

0800927c <__malloc_unlock>:
 800927c:	4801      	ldr	r0, [pc, #4]	; (8009284 <__malloc_unlock+0x8>)
 800927e:	f000 b80c 	b.w	800929a <__retarget_lock_release_recursive>
 8009282:	bf00      	nop
 8009284:	20000598 	.word	0x20000598

08009288 <_malloc_usable_size_r>:
 8009288:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800928c:	1f18      	subs	r0, r3, #4
 800928e:	2b00      	cmp	r3, #0
 8009290:	bfbc      	itt	lt
 8009292:	580b      	ldrlt	r3, [r1, r0]
 8009294:	18c0      	addlt	r0, r0, r3
 8009296:	4770      	bx	lr

08009298 <__retarget_lock_acquire_recursive>:
 8009298:	4770      	bx	lr

0800929a <__retarget_lock_release_recursive>:
 800929a:	4770      	bx	lr

0800929c <_init>:
 800929c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800929e:	bf00      	nop
 80092a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092a2:	bc08      	pop	{r3}
 80092a4:	469e      	mov	lr, r3
 80092a6:	4770      	bx	lr

080092a8 <_fini>:
 80092a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092aa:	bf00      	nop
 80092ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092ae:	bc08      	pop	{r3}
 80092b0:	469e      	mov	lr, r3
 80092b2:	4770      	bx	lr
