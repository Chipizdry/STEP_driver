
Levitation_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061f4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800637c  0800637c  0001637c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063b4  080063b4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080063b4  080063b4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080063b4  080063b4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063b4  080063b4  000163b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063b8  080063b8  000163b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080063bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000003c8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003d4  200003d4  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014a32  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022ad  00000000  00000000  00034a6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a0  00000000  00000000  00036d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010c8  00000000  00000000  00037ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001edf6  00000000  00000000  00038f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017126  00000000  00000000  00057d7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2f24  00000000  00000000  0006eea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00131dc8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004bf0  00000000  00000000  00131e18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006364 	.word	0x08006364

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08006364 	.word	0x08006364

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f001 f962 	bl	8001494 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f81a 	bl	8000208 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 fd06 	bl	8000be4 <MX_GPIO_Init>
  MX_ADC2_Init();
 80001d8:	f000 f8f2 	bl	80003c0 <MX_ADC2_Init>
  MX_TIM1_Init();
 80001dc:	f000 fa58 	bl	8000690 <MX_TIM1_Init>
  MX_TIM2_Init();
 80001e0:	f000 fb0e 	bl	8000800 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80001e4:	f000 fc9e 	bl	8000b24 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80001e8:	f000 fccc 	bl	8000b84 <MX_USART2_UART_Init>
  MX_TIM8_Init();
 80001ec:	f000 fb68 	bl	80008c0 <MX_TIM8_Init>
  MX_I2C1_Init();
 80001f0:	f000 f9b4 	bl	800055c <MX_I2C1_Init>
  MX_RTC_Init();
 80001f4:	f000 f9f2 	bl	80005dc <MX_RTC_Init>
  MX_TIM15_Init();
 80001f8:	f000 fc0e 	bl	8000a18 <MX_TIM15_Init>
  MX_ADC1_Init();
 80001fc:	f000 f870 	bl	80002e0 <MX_ADC1_Init>
  MX_ADC3_Init();
 8000200:	f000 f93c 	bl	800047c <MX_ADC3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000204:	e7fe      	b.n	8000204 <main+0x3c>
	...

08000208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b09e      	sub	sp, #120	; 0x78
 800020c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000212:	2228      	movs	r2, #40	; 0x28
 8000214:	2100      	movs	r1, #0
 8000216:	4618      	mov	r0, r3
 8000218:	f006 f89c 	bl	8006354 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800021c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000220:	2200      	movs	r2, #0
 8000222:	601a      	str	r2, [r3, #0]
 8000224:	605a      	str	r2, [r3, #4]
 8000226:	609a      	str	r2, [r3, #8]
 8000228:	60da      	str	r2, [r3, #12]
 800022a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800022c:	463b      	mov	r3, r7
 800022e:	223c      	movs	r2, #60	; 0x3c
 8000230:	2100      	movs	r1, #0
 8000232:	4618      	mov	r0, r3
 8000234:	f006 f88e 	bl	8006354 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000238:	230a      	movs	r3, #10
 800023a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800023c:	2301      	movs	r3, #1
 800023e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000240:	2310      	movs	r3, #16
 8000242:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000244:	2301      	movs	r3, #1
 8000246:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000248:	2302      	movs	r3, #2
 800024a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800024c:	2300      	movs	r3, #0
 800024e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000250:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000254:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000256:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800025a:	4618      	mov	r0, r3
 800025c:	f002 fb42 	bl	80028e4 <HAL_RCC_OscConfig>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000266:	f000 fd81 	bl	8000d6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026a:	230f      	movs	r3, #15
 800026c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800026e:	2302      	movs	r3, #2
 8000270:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000276:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800027a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027c:	2300      	movs	r3, #0
 800027e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000280:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000284:	2102      	movs	r1, #2
 8000286:	4618      	mov	r0, r3
 8000288:	f003 fb6a 	bl	8003960 <HAL_RCC_ClockConfig>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000292:	f000 fd6b 	bl	8000d6c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8000296:	4b11      	ldr	r3, [pc, #68]	; (80002dc <SystemClock_Config+0xd4>)
 8000298:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM8
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800029a:	2300      	movs	r3, #0
 800029c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800029e:	2300      	movs	r3, #0
 80002a0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80002a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002a6:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 80002a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002ac:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80002ae:	2300      	movs	r3, #0
 80002b0:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80002b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80002b6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80002b8:	2300      	movs	r3, #0
 80002ba:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 80002bc:	2300      	movs	r3, #0
 80002be:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002c0:	463b      	mov	r3, r7
 80002c2:	4618      	mov	r0, r3
 80002c4:	f003 fd82 	bl	8003dcc <HAL_RCCEx_PeriphCLKConfig>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80002ce:	f000 fd4d 	bl	8000d6c <Error_Handler>
  }
}
 80002d2:	bf00      	nop
 80002d4:	3778      	adds	r7, #120	; 0x78
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	000131a3 	.word	0x000131a3

080002e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b08a      	sub	sp, #40	; 0x28
 80002e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002e6:	f107 031c 	add.w	r3, r7, #28
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	605a      	str	r2, [r3, #4]
 80002f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	2200      	movs	r2, #0
 80002f6:	601a      	str	r2, [r3, #0]
 80002f8:	605a      	str	r2, [r3, #4]
 80002fa:	609a      	str	r2, [r3, #8]
 80002fc:	60da      	str	r2, [r3, #12]
 80002fe:	611a      	str	r2, [r3, #16]
 8000300:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000302:	4b2e      	ldr	r3, [pc, #184]	; (80003bc <MX_ADC1_Init+0xdc>)
 8000304:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000308:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800030a:	4b2c      	ldr	r3, [pc, #176]	; (80003bc <MX_ADC1_Init+0xdc>)
 800030c:	2200      	movs	r2, #0
 800030e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000310:	4b2a      	ldr	r3, [pc, #168]	; (80003bc <MX_ADC1_Init+0xdc>)
 8000312:	2200      	movs	r2, #0
 8000314:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000316:	4b29      	ldr	r3, [pc, #164]	; (80003bc <MX_ADC1_Init+0xdc>)
 8000318:	2200      	movs	r2, #0
 800031a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800031c:	4b27      	ldr	r3, [pc, #156]	; (80003bc <MX_ADC1_Init+0xdc>)
 800031e:	2200      	movs	r2, #0
 8000320:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000322:	4b26      	ldr	r3, [pc, #152]	; (80003bc <MX_ADC1_Init+0xdc>)
 8000324:	2200      	movs	r2, #0
 8000326:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800032a:	4b24      	ldr	r3, [pc, #144]	; (80003bc <MX_ADC1_Init+0xdc>)
 800032c:	2200      	movs	r2, #0
 800032e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000330:	4b22      	ldr	r3, [pc, #136]	; (80003bc <MX_ADC1_Init+0xdc>)
 8000332:	2201      	movs	r2, #1
 8000334:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000336:	4b21      	ldr	r3, [pc, #132]	; (80003bc <MX_ADC1_Init+0xdc>)
 8000338:	2200      	movs	r2, #0
 800033a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800033c:	4b1f      	ldr	r3, [pc, #124]	; (80003bc <MX_ADC1_Init+0xdc>)
 800033e:	2201      	movs	r2, #1
 8000340:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000342:	4b1e      	ldr	r3, [pc, #120]	; (80003bc <MX_ADC1_Init+0xdc>)
 8000344:	2200      	movs	r2, #0
 8000346:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800034a:	4b1c      	ldr	r3, [pc, #112]	; (80003bc <MX_ADC1_Init+0xdc>)
 800034c:	2204      	movs	r2, #4
 800034e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000350:	4b1a      	ldr	r3, [pc, #104]	; (80003bc <MX_ADC1_Init+0xdc>)
 8000352:	2200      	movs	r2, #0
 8000354:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000356:	4b19      	ldr	r3, [pc, #100]	; (80003bc <MX_ADC1_Init+0xdc>)
 8000358:	2200      	movs	r2, #0
 800035a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800035c:	4817      	ldr	r0, [pc, #92]	; (80003bc <MX_ADC1_Init+0xdc>)
 800035e:	f001 f8ff 	bl	8001560 <HAL_ADC_Init>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000368:	f000 fd00 	bl	8000d6c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800036c:	2300      	movs	r3, #0
 800036e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000370:	f107 031c 	add.w	r3, r7, #28
 8000374:	4619      	mov	r1, r3
 8000376:	4811      	ldr	r0, [pc, #68]	; (80003bc <MX_ADC1_Init+0xdc>)
 8000378:	f001 fdbe 	bl	8001ef8 <HAL_ADCEx_MultiModeConfigChannel>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000382:	f000 fcf3 	bl	8000d6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000386:	2304      	movs	r3, #4
 8000388:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800038a:	2301      	movs	r3, #1
 800038c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800038e:	2300      	movs	r3, #0
 8000390:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000392:	2300      	movs	r3, #0
 8000394:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000396:	2300      	movs	r3, #0
 8000398:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800039a:	2300      	movs	r3, #0
 800039c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	4619      	mov	r1, r3
 80003a2:	4806      	ldr	r0, [pc, #24]	; (80003bc <MX_ADC1_Init+0xdc>)
 80003a4:	f001 fabc 	bl	8001920 <HAL_ADC_ConfigChannel>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80003ae:	f000 fcdd 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003b2:	bf00      	nop
 80003b4:	3728      	adds	r7, #40	; 0x28
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	20000028 	.word	0x20000028

080003c0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b086      	sub	sp, #24
 80003c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003c6:	463b      	mov	r3, r7
 80003c8:	2200      	movs	r2, #0
 80003ca:	601a      	str	r2, [r3, #0]
 80003cc:	605a      	str	r2, [r3, #4]
 80003ce:	609a      	str	r2, [r3, #8]
 80003d0:	60da      	str	r2, [r3, #12]
 80003d2:	611a      	str	r2, [r3, #16]
 80003d4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80003d6:	4b27      	ldr	r3, [pc, #156]	; (8000474 <MX_ADC2_Init+0xb4>)
 80003d8:	4a27      	ldr	r2, [pc, #156]	; (8000478 <MX_ADC2_Init+0xb8>)
 80003da:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003dc:	4b25      	ldr	r3, [pc, #148]	; (8000474 <MX_ADC2_Init+0xb4>)
 80003de:	2200      	movs	r2, #0
 80003e0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80003e2:	4b24      	ldr	r3, [pc, #144]	; (8000474 <MX_ADC2_Init+0xb4>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003e8:	4b22      	ldr	r3, [pc, #136]	; (8000474 <MX_ADC2_Init+0xb4>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80003ee:	4b21      	ldr	r3, [pc, #132]	; (8000474 <MX_ADC2_Init+0xb4>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80003f4:	4b1f      	ldr	r3, [pc, #124]	; (8000474 <MX_ADC2_Init+0xb4>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003fc:	4b1d      	ldr	r3, [pc, #116]	; (8000474 <MX_ADC2_Init+0xb4>)
 80003fe:	2200      	movs	r2, #0
 8000400:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000402:	4b1c      	ldr	r3, [pc, #112]	; (8000474 <MX_ADC2_Init+0xb4>)
 8000404:	2201      	movs	r2, #1
 8000406:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000408:	4b1a      	ldr	r3, [pc, #104]	; (8000474 <MX_ADC2_Init+0xb4>)
 800040a:	2200      	movs	r2, #0
 800040c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800040e:	4b19      	ldr	r3, [pc, #100]	; (8000474 <MX_ADC2_Init+0xb4>)
 8000410:	2201      	movs	r2, #1
 8000412:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000414:	4b17      	ldr	r3, [pc, #92]	; (8000474 <MX_ADC2_Init+0xb4>)
 8000416:	2200      	movs	r2, #0
 8000418:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800041c:	4b15      	ldr	r3, [pc, #84]	; (8000474 <MX_ADC2_Init+0xb4>)
 800041e:	2204      	movs	r2, #4
 8000420:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000422:	4b14      	ldr	r3, [pc, #80]	; (8000474 <MX_ADC2_Init+0xb4>)
 8000424:	2200      	movs	r2, #0
 8000426:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000428:	4b12      	ldr	r3, [pc, #72]	; (8000474 <MX_ADC2_Init+0xb4>)
 800042a:	2200      	movs	r2, #0
 800042c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800042e:	4811      	ldr	r0, [pc, #68]	; (8000474 <MX_ADC2_Init+0xb4>)
 8000430:	f001 f896 	bl	8001560 <HAL_ADC_Init>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800043a:	f000 fc97 	bl	8000d6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800043e:	2301      	movs	r3, #1
 8000440:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000442:	2301      	movs	r3, #1
 8000444:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000446:	2300      	movs	r3, #0
 8000448:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800044a:	2300      	movs	r3, #0
 800044c:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800044e:	2300      	movs	r3, #0
 8000450:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000452:	2300      	movs	r3, #0
 8000454:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000456:	463b      	mov	r3, r7
 8000458:	4619      	mov	r1, r3
 800045a:	4806      	ldr	r0, [pc, #24]	; (8000474 <MX_ADC2_Init+0xb4>)
 800045c:	f001 fa60 	bl	8001920 <HAL_ADC_ConfigChannel>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000466:	f000 fc81 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800046a:	bf00      	nop
 800046c:	3718      	adds	r7, #24
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	20000078 	.word	0x20000078
 8000478:	50000100 	.word	0x50000100

0800047c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b08a      	sub	sp, #40	; 0x28
 8000480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000482:	f107 031c 	add.w	r3, r7, #28
 8000486:	2200      	movs	r2, #0
 8000488:	601a      	str	r2, [r3, #0]
 800048a:	605a      	str	r2, [r3, #4]
 800048c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800048e:	1d3b      	adds	r3, r7, #4
 8000490:	2200      	movs	r2, #0
 8000492:	601a      	str	r2, [r3, #0]
 8000494:	605a      	str	r2, [r3, #4]
 8000496:	609a      	str	r2, [r3, #8]
 8000498:	60da      	str	r2, [r3, #12]
 800049a:	611a      	str	r2, [r3, #16]
 800049c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800049e:	4b2d      	ldr	r3, [pc, #180]	; (8000554 <MX_ADC3_Init+0xd8>)
 80004a0:	4a2d      	ldr	r2, [pc, #180]	; (8000558 <MX_ADC3_Init+0xdc>)
 80004a2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80004a4:	4b2b      	ldr	r3, [pc, #172]	; (8000554 <MX_ADC3_Init+0xd8>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80004aa:	4b2a      	ldr	r3, [pc, #168]	; (8000554 <MX_ADC3_Init+0xd8>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004b0:	4b28      	ldr	r3, [pc, #160]	; (8000554 <MX_ADC3_Init+0xd8>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80004b6:	4b27      	ldr	r3, [pc, #156]	; (8000554 <MX_ADC3_Init+0xd8>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80004bc:	4b25      	ldr	r3, [pc, #148]	; (8000554 <MX_ADC3_Init+0xd8>)
 80004be:	2200      	movs	r2, #0
 80004c0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004c4:	4b23      	ldr	r3, [pc, #140]	; (8000554 <MX_ADC3_Init+0xd8>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004ca:	4b22      	ldr	r3, [pc, #136]	; (8000554 <MX_ADC3_Init+0xd8>)
 80004cc:	2201      	movs	r2, #1
 80004ce:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004d0:	4b20      	ldr	r3, [pc, #128]	; (8000554 <MX_ADC3_Init+0xd8>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80004d6:	4b1f      	ldr	r3, [pc, #124]	; (8000554 <MX_ADC3_Init+0xd8>)
 80004d8:	2201      	movs	r2, #1
 80004da:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80004dc:	4b1d      	ldr	r3, [pc, #116]	; (8000554 <MX_ADC3_Init+0xd8>)
 80004de:	2200      	movs	r2, #0
 80004e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004e4:	4b1b      	ldr	r3, [pc, #108]	; (8000554 <MX_ADC3_Init+0xd8>)
 80004e6:	2204      	movs	r2, #4
 80004e8:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80004ea:	4b1a      	ldr	r3, [pc, #104]	; (8000554 <MX_ADC3_Init+0xd8>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80004f0:	4b18      	ldr	r3, [pc, #96]	; (8000554 <MX_ADC3_Init+0xd8>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80004f6:	4817      	ldr	r0, [pc, #92]	; (8000554 <MX_ADC3_Init+0xd8>)
 80004f8:	f001 f832 	bl	8001560 <HAL_ADC_Init>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d001      	beq.n	8000506 <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 8000502:	f000 fc33 	bl	8000d6c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000506:	2300      	movs	r3, #0
 8000508:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800050a:	f107 031c 	add.w	r3, r7, #28
 800050e:	4619      	mov	r1, r3
 8000510:	4810      	ldr	r0, [pc, #64]	; (8000554 <MX_ADC3_Init+0xd8>)
 8000512:	f001 fcf1 	bl	8001ef8 <HAL_ADCEx_MultiModeConfigChannel>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 800051c:	f000 fc26 	bl	8000d6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000520:	230c      	movs	r3, #12
 8000522:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000524:	2301      	movs	r3, #1
 8000526:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000528:	2300      	movs	r3, #0
 800052a:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800052c:	2300      	movs	r3, #0
 800052e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000530:	2300      	movs	r3, #0
 8000532:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000534:	2300      	movs	r3, #0
 8000536:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000538:	1d3b      	adds	r3, r7, #4
 800053a:	4619      	mov	r1, r3
 800053c:	4805      	ldr	r0, [pc, #20]	; (8000554 <MX_ADC3_Init+0xd8>)
 800053e:	f001 f9ef 	bl	8001920 <HAL_ADC_ConfigChannel>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8000548:	f000 fc10 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800054c:	bf00      	nop
 800054e:	3728      	adds	r7, #40	; 0x28
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	200000c8 	.word	0x200000c8
 8000558:	50000400 	.word	0x50000400

0800055c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000560:	4b1b      	ldr	r3, [pc, #108]	; (80005d0 <MX_I2C1_Init+0x74>)
 8000562:	4a1c      	ldr	r2, [pc, #112]	; (80005d4 <MX_I2C1_Init+0x78>)
 8000564:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000566:	4b1a      	ldr	r3, [pc, #104]	; (80005d0 <MX_I2C1_Init+0x74>)
 8000568:	4a1b      	ldr	r2, [pc, #108]	; (80005d8 <MX_I2C1_Init+0x7c>)
 800056a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800056c:	4b18      	ldr	r3, [pc, #96]	; (80005d0 <MX_I2C1_Init+0x74>)
 800056e:	2200      	movs	r2, #0
 8000570:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000572:	4b17      	ldr	r3, [pc, #92]	; (80005d0 <MX_I2C1_Init+0x74>)
 8000574:	2201      	movs	r2, #1
 8000576:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000578:	4b15      	ldr	r3, [pc, #84]	; (80005d0 <MX_I2C1_Init+0x74>)
 800057a:	2200      	movs	r2, #0
 800057c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800057e:	4b14      	ldr	r3, [pc, #80]	; (80005d0 <MX_I2C1_Init+0x74>)
 8000580:	2200      	movs	r2, #0
 8000582:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000584:	4b12      	ldr	r3, [pc, #72]	; (80005d0 <MX_I2C1_Init+0x74>)
 8000586:	2200      	movs	r2, #0
 8000588:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800058a:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <MX_I2C1_Init+0x74>)
 800058c:	2200      	movs	r2, #0
 800058e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000590:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <MX_I2C1_Init+0x74>)
 8000592:	2200      	movs	r2, #0
 8000594:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000596:	480e      	ldr	r0, [pc, #56]	; (80005d0 <MX_I2C1_Init+0x74>)
 8000598:	f002 f87e 	bl	8002698 <HAL_I2C_Init>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005a2:	f000 fbe3 	bl	8000d6c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005a6:	2100      	movs	r1, #0
 80005a8:	4809      	ldr	r0, [pc, #36]	; (80005d0 <MX_I2C1_Init+0x74>)
 80005aa:	f002 f904 	bl	80027b6 <HAL_I2CEx_ConfigAnalogFilter>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005b4:	f000 fbda 	bl	8000d6c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005b8:	2100      	movs	r1, #0
 80005ba:	4805      	ldr	r0, [pc, #20]	; (80005d0 <MX_I2C1_Init+0x74>)
 80005bc:	f002 f946 	bl	800284c <HAL_I2CEx_ConfigDigitalFilter>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005c6:	f000 fbd1 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20000118 	.word	0x20000118
 80005d4:	40005400 	.word	0x40005400
 80005d8:	2000090e 	.word	0x2000090e

080005dc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80005f0:	2300      	movs	r3, #0
 80005f2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80005f4:	4b24      	ldr	r3, [pc, #144]	; (8000688 <MX_RTC_Init+0xac>)
 80005f6:	4a25      	ldr	r2, [pc, #148]	; (800068c <MX_RTC_Init+0xb0>)
 80005f8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80005fa:	4b23      	ldr	r3, [pc, #140]	; (8000688 <MX_RTC_Init+0xac>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000600:	4b21      	ldr	r3, [pc, #132]	; (8000688 <MX_RTC_Init+0xac>)
 8000602:	227f      	movs	r2, #127	; 0x7f
 8000604:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000606:	4b20      	ldr	r3, [pc, #128]	; (8000688 <MX_RTC_Init+0xac>)
 8000608:	22ff      	movs	r2, #255	; 0xff
 800060a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800060c:	4b1e      	ldr	r3, [pc, #120]	; (8000688 <MX_RTC_Init+0xac>)
 800060e:	2200      	movs	r2, #0
 8000610:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000612:	4b1d      	ldr	r3, [pc, #116]	; (8000688 <MX_RTC_Init+0xac>)
 8000614:	2200      	movs	r2, #0
 8000616:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000618:	4b1b      	ldr	r3, [pc, #108]	; (8000688 <MX_RTC_Init+0xac>)
 800061a:	2200      	movs	r2, #0
 800061c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800061e:	481a      	ldr	r0, [pc, #104]	; (8000688 <MX_RTC_Init+0xac>)
 8000620:	f003 fd84 	bl	800412c <HAL_RTC_Init>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800062a:	f000 fb9f 	bl	8000d6c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800062e:	2300      	movs	r3, #0
 8000630:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000632:	2300      	movs	r3, #0
 8000634:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000636:	2300      	movs	r3, #0
 8000638:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800063a:	2300      	movs	r3, #0
 800063c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800063e:	2300      	movs	r3, #0
 8000640:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	2201      	movs	r2, #1
 8000646:	4619      	mov	r1, r3
 8000648:	480f      	ldr	r0, [pc, #60]	; (8000688 <MX_RTC_Init+0xac>)
 800064a:	f003 fdf2 	bl	8004232 <HAL_RTC_SetTime>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000654:	f000 fb8a 	bl	8000d6c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000658:	2301      	movs	r3, #1
 800065a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800065c:	2301      	movs	r3, #1
 800065e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000660:	2301      	movs	r3, #1
 8000662:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000664:	2300      	movs	r3, #0
 8000666:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000668:	463b      	mov	r3, r7
 800066a:	2201      	movs	r2, #1
 800066c:	4619      	mov	r1, r3
 800066e:	4806      	ldr	r0, [pc, #24]	; (8000688 <MX_RTC_Init+0xac>)
 8000670:	f003 fe79 	bl	8004366 <HAL_RTC_SetDate>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800067a:	f000 fb77 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800067e:	bf00      	nop
 8000680:	3718      	adds	r7, #24
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	2000016c 	.word	0x2000016c
 800068c:	40002800 	.word	0x40002800

08000690 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b09a      	sub	sp, #104	; 0x68
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000696:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]
 80006c0:	615a      	str	r2, [r3, #20]
 80006c2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	222c      	movs	r2, #44	; 0x2c
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f005 fe42 	bl	8006354 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006d0:	4b49      	ldr	r3, [pc, #292]	; (80007f8 <MX_TIM1_Init+0x168>)
 80006d2:	4a4a      	ldr	r2, [pc, #296]	; (80007fc <MX_TIM1_Init+0x16c>)
 80006d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80006d6:	4b48      	ldr	r3, [pc, #288]	; (80007f8 <MX_TIM1_Init+0x168>)
 80006d8:	2200      	movs	r2, #0
 80006da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006dc:	4b46      	ldr	r3, [pc, #280]	; (80007f8 <MX_TIM1_Init+0x168>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80006e2:	4b45      	ldr	r3, [pc, #276]	; (80007f8 <MX_TIM1_Init+0x168>)
 80006e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ea:	4b43      	ldr	r3, [pc, #268]	; (80007f8 <MX_TIM1_Init+0x168>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006f0:	4b41      	ldr	r3, [pc, #260]	; (80007f8 <MX_TIM1_Init+0x168>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006f6:	4b40      	ldr	r3, [pc, #256]	; (80007f8 <MX_TIM1_Init+0x168>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006fc:	483e      	ldr	r0, [pc, #248]	; (80007f8 <MX_TIM1_Init+0x168>)
 80006fe:	f003 ff57 	bl	80045b0 <HAL_TIM_Base_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000708:	f000 fb30 	bl	8000d6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800070c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000710:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000712:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000716:	4619      	mov	r1, r3
 8000718:	4837      	ldr	r0, [pc, #220]	; (80007f8 <MX_TIM1_Init+0x168>)
 800071a:	f004 fad9 	bl	8004cd0 <HAL_TIM_ConfigClockSource>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000724:	f000 fb22 	bl	8000d6c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000728:	4833      	ldr	r0, [pc, #204]	; (80007f8 <MX_TIM1_Init+0x168>)
 800072a:	f003 ff98 	bl	800465e <HAL_TIM_OC_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000734:	f000 fb1a 	bl	8000d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000738:	2300      	movs	r3, #0
 800073a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800073c:	2300      	movs	r3, #0
 800073e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000740:	2300      	movs	r3, #0
 8000742:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000744:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000748:	4619      	mov	r1, r3
 800074a:	482b      	ldr	r0, [pc, #172]	; (80007f8 <MX_TIM1_Init+0x168>)
 800074c:	f005 f8a8 	bl	80058a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000756:	f000 fb09 	bl	8000d6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800075a:	2300      	movs	r3, #0
 800075c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000762:	2300      	movs	r3, #0
 8000764:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000766:	2300      	movs	r3, #0
 8000768:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800076a:	2300      	movs	r3, #0
 800076c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800076e:	2300      	movs	r3, #0
 8000770:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000772:	2300      	movs	r3, #0
 8000774:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000776:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800077a:	2200      	movs	r2, #0
 800077c:	4619      	mov	r1, r3
 800077e:	481e      	ldr	r0, [pc, #120]	; (80007f8 <MX_TIM1_Init+0x168>)
 8000780:	f004 f87c 	bl	800487c <HAL_TIM_OC_ConfigChannel>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800078a:	f000 faef 	bl	8000d6c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800078e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000792:	2204      	movs	r2, #4
 8000794:	4619      	mov	r1, r3
 8000796:	4818      	ldr	r0, [pc, #96]	; (80007f8 <MX_TIM1_Init+0x168>)
 8000798:	f004 f870 	bl	800487c <HAL_TIM_OC_ConfigChannel>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80007a2:	f000 fae3 	bl	8000d6c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007be:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80007c4:	2300      	movs	r3, #0
 80007c6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80007c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80007cc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007d2:	2300      	movs	r3, #0
 80007d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	4619      	mov	r1, r3
 80007da:	4807      	ldr	r0, [pc, #28]	; (80007f8 <MX_TIM1_Init+0x168>)
 80007dc:	f005 f8e0 	bl	80059a0 <HAL_TIMEx_ConfigBreakDeadTime>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80007e6:	f000 fac1 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007ea:	4803      	ldr	r0, [pc, #12]	; (80007f8 <MX_TIM1_Init+0x168>)
 80007ec:	f000 fcaa 	bl	8001144 <HAL_TIM_MspPostInit>

}
 80007f0:	bf00      	nop
 80007f2:	3768      	adds	r7, #104	; 0x68
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	2000018c 	.word	0x2000018c
 80007fc:	40012c00 	.word	0x40012c00

08000800 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b088      	sub	sp, #32
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800081e:	4b27      	ldr	r3, [pc, #156]	; (80008bc <MX_TIM2_Init+0xbc>)
 8000820:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000824:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000826:	4b25      	ldr	r3, [pc, #148]	; (80008bc <MX_TIM2_Init+0xbc>)
 8000828:	2200      	movs	r2, #0
 800082a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800082c:	4b23      	ldr	r3, [pc, #140]	; (80008bc <MX_TIM2_Init+0xbc>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000832:	4b22      	ldr	r3, [pc, #136]	; (80008bc <MX_TIM2_Init+0xbc>)
 8000834:	f04f 32ff 	mov.w	r2, #4294967295
 8000838:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800083a:	4b20      	ldr	r3, [pc, #128]	; (80008bc <MX_TIM2_Init+0xbc>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000840:	4b1e      	ldr	r3, [pc, #120]	; (80008bc <MX_TIM2_Init+0xbc>)
 8000842:	2200      	movs	r2, #0
 8000844:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000846:	481d      	ldr	r0, [pc, #116]	; (80008bc <MX_TIM2_Init+0xbc>)
 8000848:	f003 ffc1 	bl	80047ce <HAL_TIM_IC_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000852:	f000 fa8b 	bl	8000d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000856:	2300      	movs	r3, #0
 8000858:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800085a:	2300      	movs	r3, #0
 800085c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	4619      	mov	r1, r3
 8000864:	4815      	ldr	r0, [pc, #84]	; (80008bc <MX_TIM2_Init+0xbc>)
 8000866:	f005 f81b 	bl	80058a0 <HAL_TIMEx_MasterConfigSynchronization>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000870:	f000 fa7c 	bl	8000d6c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000874:	2300      	movs	r3, #0
 8000876:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000878:	2301      	movs	r3, #1
 800087a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800087c:	2300      	movs	r3, #0
 800087e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	2200      	movs	r2, #0
 8000888:	4619      	mov	r1, r3
 800088a:	480c      	ldr	r0, [pc, #48]	; (80008bc <MX_TIM2_Init+0xbc>)
 800088c:	f004 f870 	bl	8004970 <HAL_TIM_IC_ConfigChannel>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000896:	f000 fa69 	bl	8000d6c <Error_Handler>
  }
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800089a:	2302      	movs	r3, #2
 800089c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	2204      	movs	r2, #4
 80008a2:	4619      	mov	r1, r3
 80008a4:	4805      	ldr	r0, [pc, #20]	; (80008bc <MX_TIM2_Init+0xbc>)
 80008a6:	f004 f863 	bl	8004970 <HAL_TIM_IC_ConfigChannel>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80008b0:	f000 fa5c 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008b4:	bf00      	nop
 80008b6:	3720      	adds	r7, #32
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	200001d8 	.word	0x200001d8

080008c0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b09a      	sub	sp, #104	; 0x68
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]
 80008f0:	615a      	str	r2, [r3, #20]
 80008f2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	222c      	movs	r2, #44	; 0x2c
 80008f8:	2100      	movs	r1, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f005 fd2a 	bl	8006354 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000900:	4b43      	ldr	r3, [pc, #268]	; (8000a10 <MX_TIM8_Init+0x150>)
 8000902:	4a44      	ldr	r2, [pc, #272]	; (8000a14 <MX_TIM8_Init+0x154>)
 8000904:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000906:	4b42      	ldr	r3, [pc, #264]	; (8000a10 <MX_TIM8_Init+0x150>)
 8000908:	2200      	movs	r2, #0
 800090a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800090c:	4b40      	ldr	r3, [pc, #256]	; (8000a10 <MX_TIM8_Init+0x150>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000912:	4b3f      	ldr	r3, [pc, #252]	; (8000a10 <MX_TIM8_Init+0x150>)
 8000914:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000918:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800091a:	4b3d      	ldr	r3, [pc, #244]	; (8000a10 <MX_TIM8_Init+0x150>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000920:	4b3b      	ldr	r3, [pc, #236]	; (8000a10 <MX_TIM8_Init+0x150>)
 8000922:	2200      	movs	r2, #0
 8000924:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000926:	4b3a      	ldr	r3, [pc, #232]	; (8000a10 <MX_TIM8_Init+0x150>)
 8000928:	2200      	movs	r2, #0
 800092a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800092c:	4838      	ldr	r0, [pc, #224]	; (8000a10 <MX_TIM8_Init+0x150>)
 800092e:	f003 fe3f 	bl	80045b0 <HAL_TIM_Base_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8000938:	f000 fa18 	bl	8000d6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800093c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000940:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000942:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000946:	4619      	mov	r1, r3
 8000948:	4831      	ldr	r0, [pc, #196]	; (8000a10 <MX_TIM8_Init+0x150>)
 800094a:	f004 f9c1 	bl	8004cd0 <HAL_TIM_ConfigClockSource>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8000954:	f000 fa0a 	bl	8000d6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000958:	482d      	ldr	r0, [pc, #180]	; (8000a10 <MX_TIM8_Init+0x150>)
 800095a:	f003 fed7 	bl	800470c <HAL_TIM_PWM_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8000964:	f000 fa02 	bl	8000d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000968:	2300      	movs	r3, #0
 800096a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800096c:	2300      	movs	r3, #0
 800096e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000970:	2300      	movs	r3, #0
 8000972:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000974:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000978:	4619      	mov	r1, r3
 800097a:	4825      	ldr	r0, [pc, #148]	; (8000a10 <MX_TIM8_Init+0x150>)
 800097c:	f004 ff90 	bl	80058a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8000986:	f000 f9f1 	bl	8000d6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800098a:	2360      	movs	r3, #96	; 0x60
 800098c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000992:	2300      	movs	r3, #0
 8000994:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000996:	2300      	movs	r3, #0
 8000998:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800099a:	2300      	movs	r3, #0
 800099c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800099e:	2300      	movs	r3, #0
 80009a0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009a2:	2300      	movs	r3, #0
 80009a4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009aa:	2200      	movs	r2, #0
 80009ac:	4619      	mov	r1, r3
 80009ae:	4818      	ldr	r0, [pc, #96]	; (8000a10 <MX_TIM8_Init+0x150>)
 80009b0:	f004 f87a 	bl	8004aa8 <HAL_TIM_PWM_ConfigChannel>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 80009ba:	f000 f9d7 	bl	8000d6c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009be:	2300      	movs	r3, #0
 80009c0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009c2:	2300      	movs	r3, #0
 80009c4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009ce:	2300      	movs	r3, #0
 80009d0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009d6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80009dc:	2300      	movs	r3, #0
 80009de:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80009e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80009e6:	2300      	movs	r3, #0
 80009e8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009ea:	2300      	movs	r3, #0
 80009ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	4619      	mov	r1, r3
 80009f2:	4807      	ldr	r0, [pc, #28]	; (8000a10 <MX_TIM8_Init+0x150>)
 80009f4:	f004 ffd4 	bl	80059a0 <HAL_TIMEx_ConfigBreakDeadTime>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 80009fe:	f000 f9b5 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000a02:	4803      	ldr	r0, [pc, #12]	; (8000a10 <MX_TIM8_Init+0x150>)
 8000a04:	f000 fb9e 	bl	8001144 <HAL_TIM_MspPostInit>

}
 8000a08:	bf00      	nop
 8000a0a:	3768      	adds	r7, #104	; 0x68
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000224 	.word	0x20000224
 8000a14:	40013400 	.word	0x40013400

08000a18 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b096      	sub	sp, #88	; 0x58
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a1e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
 8000a38:	611a      	str	r2, [r3, #16]
 8000a3a:	615a      	str	r2, [r3, #20]
 8000a3c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	222c      	movs	r2, #44	; 0x2c
 8000a42:	2100      	movs	r1, #0
 8000a44:	4618      	mov	r0, r3
 8000a46:	f005 fc85 	bl	8006354 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000a4a:	4b34      	ldr	r3, [pc, #208]	; (8000b1c <MX_TIM15_Init+0x104>)
 8000a4c:	4a34      	ldr	r2, [pc, #208]	; (8000b20 <MX_TIM15_Init+0x108>)
 8000a4e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000a50:	4b32      	ldr	r3, [pc, #200]	; (8000b1c <MX_TIM15_Init+0x104>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a56:	4b31      	ldr	r3, [pc, #196]	; (8000b1c <MX_TIM15_Init+0x104>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000a5c:	4b2f      	ldr	r3, [pc, #188]	; (8000b1c <MX_TIM15_Init+0x104>)
 8000a5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a62:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a64:	4b2d      	ldr	r3, [pc, #180]	; (8000b1c <MX_TIM15_Init+0x104>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000a6a:	4b2c      	ldr	r3, [pc, #176]	; (8000b1c <MX_TIM15_Init+0x104>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a70:	4b2a      	ldr	r3, [pc, #168]	; (8000b1c <MX_TIM15_Init+0x104>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim15) != HAL_OK)
 8000a76:	4829      	ldr	r0, [pc, #164]	; (8000b1c <MX_TIM15_Init+0x104>)
 8000a78:	f003 fdf1 	bl	800465e <HAL_TIM_OC_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000a82:	f000 f973 	bl	8000d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a86:	2300      	movs	r3, #0
 8000a88:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000a8e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a92:	4619      	mov	r1, r3
 8000a94:	4821      	ldr	r0, [pc, #132]	; (8000b1c <MX_TIM15_Init+0x104>)
 8000a96:	f004 ff03 	bl	80058a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8000aa0:	f000 f964 	bl	8000d6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aac:	2300      	movs	r3, #0
 8000aae:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000abc:	2300      	movs	r3, #0
 8000abe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ac0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4814      	ldr	r0, [pc, #80]	; (8000b1c <MX_TIM15_Init+0x104>)
 8000aca:	f003 fed7 	bl	800487c <HAL_TIM_OC_ConfigChannel>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000ad4:	f000 f94a 	bl	8000d6c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000adc:	2300      	movs	r3, #0
 8000ade:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000aec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000af0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000af6:	2300      	movs	r3, #0
 8000af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	4619      	mov	r1, r3
 8000afe:	4807      	ldr	r0, [pc, #28]	; (8000b1c <MX_TIM15_Init+0x104>)
 8000b00:	f004 ff4e 	bl	80059a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8000b0a:	f000 f92f 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000b0e:	4803      	ldr	r0, [pc, #12]	; (8000b1c <MX_TIM15_Init+0x104>)
 8000b10:	f000 fb18 	bl	8001144 <HAL_TIM_MspPostInit>

}
 8000b14:	bf00      	nop
 8000b16:	3758      	adds	r7, #88	; 0x58
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20000270 	.word	0x20000270
 8000b20:	40014000 	.word	0x40014000

08000b24 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b28:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <MX_USART1_UART_Init+0x58>)
 8000b2a:	4a15      	ldr	r2, [pc, #84]	; (8000b80 <MX_USART1_UART_Init+0x5c>)
 8000b2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 256000;
 8000b2e:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <MX_USART1_UART_Init+0x58>)
 8000b30:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
 8000b34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b36:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <MX_USART1_UART_Init+0x58>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <MX_USART1_UART_Init+0x58>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <MX_USART1_UART_Init+0x58>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b48:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <MX_USART1_UART_Init+0x58>)
 8000b4a:	220c      	movs	r2, #12
 8000b4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <MX_USART1_UART_Init+0x58>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b54:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <MX_USART1_UART_Init+0x58>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b5a:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <MX_USART1_UART_Init+0x58>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <MX_USART1_UART_Init+0x58>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b66:	4805      	ldr	r0, [pc, #20]	; (8000b7c <MX_USART1_UART_Init+0x58>)
 8000b68:	f004 ff98 	bl	8005a9c <HAL_UART_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b72:	f000 f8fb 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	200002bc 	.word	0x200002bc
 8000b80:	40013800 	.word	0x40013800

08000b84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b88:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <MX_USART2_UART_Init+0x58>)
 8000b8a:	4a15      	ldr	r2, [pc, #84]	; (8000be0 <MX_USART2_UART_Init+0x5c>)
 8000b8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000b8e:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <MX_USART2_UART_Init+0x58>)
 8000b90:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b96:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <MX_USART2_UART_Init+0x58>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <MX_USART2_UART_Init+0x58>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <MX_USART2_UART_Init+0x58>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <MX_USART2_UART_Init+0x58>)
 8000baa:	220c      	movs	r2, #12
 8000bac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bae:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <MX_USART2_UART_Init+0x58>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb4:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <MX_USART2_UART_Init+0x58>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bba:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <MX_USART2_UART_Init+0x58>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bc0:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <MX_USART2_UART_Init+0x58>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bc6:	4805      	ldr	r0, [pc, #20]	; (8000bdc <MX_USART2_UART_Init+0x58>)
 8000bc8:	f004 ff68 	bl	8005a9c <HAL_UART_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000bd2:	f000 f8cb 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000344 	.word	0x20000344
 8000be0:	40004400 	.word	0x40004400

08000be4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
 8000bf6:	60da      	str	r2, [r3, #12]
 8000bf8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bfa:	4b58      	ldr	r3, [pc, #352]	; (8000d5c <MX_GPIO_Init+0x178>)
 8000bfc:	695b      	ldr	r3, [r3, #20]
 8000bfe:	4a57      	ldr	r2, [pc, #348]	; (8000d5c <MX_GPIO_Init+0x178>)
 8000c00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c04:	6153      	str	r3, [r2, #20]
 8000c06:	4b55      	ldr	r3, [pc, #340]	; (8000d5c <MX_GPIO_Init+0x178>)
 8000c08:	695b      	ldr	r3, [r3, #20]
 8000c0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c0e:	613b      	str	r3, [r7, #16]
 8000c10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c12:	4b52      	ldr	r3, [pc, #328]	; (8000d5c <MX_GPIO_Init+0x178>)
 8000c14:	695b      	ldr	r3, [r3, #20]
 8000c16:	4a51      	ldr	r2, [pc, #324]	; (8000d5c <MX_GPIO_Init+0x178>)
 8000c18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c1c:	6153      	str	r3, [r2, #20]
 8000c1e:	4b4f      	ldr	r3, [pc, #316]	; (8000d5c <MX_GPIO_Init+0x178>)
 8000c20:	695b      	ldr	r3, [r3, #20]
 8000c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2a:	4b4c      	ldr	r3, [pc, #304]	; (8000d5c <MX_GPIO_Init+0x178>)
 8000c2c:	695b      	ldr	r3, [r3, #20]
 8000c2e:	4a4b      	ldr	r2, [pc, #300]	; (8000d5c <MX_GPIO_Init+0x178>)
 8000c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c34:	6153      	str	r3, [r2, #20]
 8000c36:	4b49      	ldr	r3, [pc, #292]	; (8000d5c <MX_GPIO_Init+0x178>)
 8000c38:	695b      	ldr	r3, [r3, #20]
 8000c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c42:	4b46      	ldr	r3, [pc, #280]	; (8000d5c <MX_GPIO_Init+0x178>)
 8000c44:	695b      	ldr	r3, [r3, #20]
 8000c46:	4a45      	ldr	r2, [pc, #276]	; (8000d5c <MX_GPIO_Init+0x178>)
 8000c48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c4c:	6153      	str	r3, [r2, #20]
 8000c4e:	4b43      	ldr	r3, [pc, #268]	; (8000d5c <MX_GPIO_Init+0x178>)
 8000c50:	695b      	ldr	r3, [r3, #20]
 8000c52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c60:	483f      	ldr	r0, [pc, #252]	; (8000d60 <MX_GPIO_Init+0x17c>)
 8000c62:	f001 fd01 	bl	8002668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2103      	movs	r1, #3
 8000c6a:	483e      	ldr	r0, [pc, #248]	; (8000d64 <MX_GPIO_Init+0x180>)
 8000c6c:	f001 fcfc 	bl	8002668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Port_2_Pin|Port_1_Pin|Port_3_Pin|Port_4_Pin, GPIO_PIN_RESET);
 8000c70:	2200      	movs	r2, #0
 8000c72:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 8000c76:	483c      	ldr	r0, [pc, #240]	; (8000d68 <MX_GPIO_Init+0x184>)
 8000c78:	f001 fcf6 	bl	8002668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Direct_GPIO_Port, Direct_Pin, GPIO_PIN_RESET);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c86:	f001 fcef 	bl	8002668 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : START_Pin STOP_Pin */
  GPIO_InitStruct.Pin = START_Pin|STOP_Pin;
 8000c8a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000c8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c90:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c9a:	f107 0314 	add.w	r3, r7, #20
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	482f      	ldr	r0, [pc, #188]	; (8000d60 <MX_GPIO_Init+0x17c>)
 8000ca2:	f001 fb67 	bl	8002374 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_1_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin;
 8000ca6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000caa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cac:	2301      	movs	r3, #1
 8000cae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4828      	ldr	r0, [pc, #160]	; (8000d60 <MX_GPIO_Init+0x17c>)
 8000cc0:	f001 fb58 	bl	8002374 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_2_Pin LED_3_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin|LED_3_Pin;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4822      	ldr	r0, [pc, #136]	; (8000d64 <MX_GPIO_Init+0x180>)
 8000cdc:	f001 fb4a 	bl	8002374 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ce4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ce8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cee:	f107 0314 	add.w	r3, r7, #20
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf8:	f001 fb3c 	bl	8002374 <HAL_GPIO_Init>

  /*Configure GPIO pins : Port_2_Pin Port_1_Pin Port_3_Pin Port_4_Pin */
  GPIO_InitStruct.Pin = Port_2_Pin|Port_1_Pin|Port_3_Pin|Port_4_Pin;
 8000cfc:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000d00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d02:	2301      	movs	r3, #1
 8000d04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0e:	f107 0314 	add.w	r3, r7, #20
 8000d12:	4619      	mov	r1, r3
 8000d14:	4814      	ldr	r0, [pc, #80]	; (8000d68 <MX_GPIO_Init+0x184>)
 8000d16:	f001 fb2d 	bl	8002374 <HAL_GPIO_Init>

  /*Configure GPIO pin : Direct_Pin */
  GPIO_InitStruct.Pin = Direct_Pin;
 8000d1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d20:	2301      	movs	r3, #1
 8000d22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Direct_GPIO_Port, &GPIO_InitStruct);
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	4619      	mov	r1, r3
 8000d32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d36:	f001 fb1d 	bl	8002374 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLEAR_Pin */
  GPIO_InitStruct.Pin = CLEAR_Pin;
 8000d3a:	2320      	movs	r3, #32
 8000d3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CLEAR_GPIO_Port, &GPIO_InitStruct);
 8000d46:	f107 0314 	add.w	r3, r7, #20
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4806      	ldr	r0, [pc, #24]	; (8000d68 <MX_GPIO_Init+0x184>)
 8000d4e:	f001 fb11 	bl	8002374 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d52:	bf00      	nop
 8000d54:	3728      	adds	r7, #40	; 0x28
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	48000800 	.word	0x48000800
 8000d64:	48001400 	.word	0x48001400
 8000d68:	48000400 	.word	0x48000400

08000d6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d70:	b672      	cpsid	i
}
 8000d72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <Error_Handler+0x8>
	...

08000d78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7e:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <HAL_MspInit+0x44>)
 8000d80:	699b      	ldr	r3, [r3, #24]
 8000d82:	4a0e      	ldr	r2, [pc, #56]	; (8000dbc <HAL_MspInit+0x44>)
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	6193      	str	r3, [r2, #24]
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <HAL_MspInit+0x44>)
 8000d8c:	699b      	ldr	r3, [r3, #24]
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d96:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <HAL_MspInit+0x44>)
 8000d98:	69db      	ldr	r3, [r3, #28]
 8000d9a:	4a08      	ldr	r2, [pc, #32]	; (8000dbc <HAL_MspInit+0x44>)
 8000d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da0:	61d3      	str	r3, [r2, #28]
 8000da2:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_MspInit+0x44>)
 8000da4:	69db      	ldr	r3, [r3, #28]
 8000da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000daa:	603b      	str	r3, [r7, #0]
 8000dac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	40021000 	.word	0x40021000

08000dc0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08e      	sub	sp, #56	; 0x38
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000de0:	d12e      	bne.n	8000e40 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000de2:	4b54      	ldr	r3, [pc, #336]	; (8000f34 <HAL_ADC_MspInit+0x174>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	3301      	adds	r3, #1
 8000de8:	4a52      	ldr	r2, [pc, #328]	; (8000f34 <HAL_ADC_MspInit+0x174>)
 8000dea:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000dec:	4b51      	ldr	r3, [pc, #324]	; (8000f34 <HAL_ADC_MspInit+0x174>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d10b      	bne.n	8000e0c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000df4:	4b50      	ldr	r3, [pc, #320]	; (8000f38 <HAL_ADC_MspInit+0x178>)
 8000df6:	695b      	ldr	r3, [r3, #20]
 8000df8:	4a4f      	ldr	r2, [pc, #316]	; (8000f38 <HAL_ADC_MspInit+0x178>)
 8000dfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dfe:	6153      	str	r3, [r2, #20]
 8000e00:	4b4d      	ldr	r3, [pc, #308]	; (8000f38 <HAL_ADC_MspInit+0x178>)
 8000e02:	695b      	ldr	r3, [r3, #20]
 8000e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e08:	623b      	str	r3, [r7, #32]
 8000e0a:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0c:	4b4a      	ldr	r3, [pc, #296]	; (8000f38 <HAL_ADC_MspInit+0x178>)
 8000e0e:	695b      	ldr	r3, [r3, #20]
 8000e10:	4a49      	ldr	r2, [pc, #292]	; (8000f38 <HAL_ADC_MspInit+0x178>)
 8000e12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e16:	6153      	str	r3, [r2, #20]
 8000e18:	4b47      	ldr	r3, [pc, #284]	; (8000f38 <HAL_ADC_MspInit+0x178>)
 8000e1a:	695b      	ldr	r3, [r3, #20]
 8000e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e20:	61fb      	str	r3, [r7, #28]
 8000e22:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = SENS_4_Pin;
 8000e24:	2308      	movs	r3, #8
 8000e26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e28:	2303      	movs	r3, #3
 8000e2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SENS_4_GPIO_Port, &GPIO_InitStruct);
 8000e30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e34:	4619      	mov	r1, r3
 8000e36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e3a:	f001 fa9b 	bl	8002374 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000e3e:	e074      	b.n	8000f2a <HAL_ADC_MspInit+0x16a>
  else if(hadc->Instance==ADC2)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a3d      	ldr	r2, [pc, #244]	; (8000f3c <HAL_ADC_MspInit+0x17c>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d146      	bne.n	8000ed8 <HAL_ADC_MspInit+0x118>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000e4a:	4b3a      	ldr	r3, [pc, #232]	; (8000f34 <HAL_ADC_MspInit+0x174>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	4a38      	ldr	r2, [pc, #224]	; (8000f34 <HAL_ADC_MspInit+0x174>)
 8000e52:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000e54:	4b37      	ldr	r3, [pc, #220]	; (8000f34 <HAL_ADC_MspInit+0x174>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d10b      	bne.n	8000e74 <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000e5c:	4b36      	ldr	r3, [pc, #216]	; (8000f38 <HAL_ADC_MspInit+0x178>)
 8000e5e:	695b      	ldr	r3, [r3, #20]
 8000e60:	4a35      	ldr	r2, [pc, #212]	; (8000f38 <HAL_ADC_MspInit+0x178>)
 8000e62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e66:	6153      	str	r3, [r2, #20]
 8000e68:	4b33      	ldr	r3, [pc, #204]	; (8000f38 <HAL_ADC_MspInit+0x178>)
 8000e6a:	695b      	ldr	r3, [r3, #20]
 8000e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e70:	61bb      	str	r3, [r7, #24]
 8000e72:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e74:	4b30      	ldr	r3, [pc, #192]	; (8000f38 <HAL_ADC_MspInit+0x178>)
 8000e76:	695b      	ldr	r3, [r3, #20]
 8000e78:	4a2f      	ldr	r2, [pc, #188]	; (8000f38 <HAL_ADC_MspInit+0x178>)
 8000e7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e7e:	6153      	str	r3, [r2, #20]
 8000e80:	4b2d      	ldr	r3, [pc, #180]	; (8000f38 <HAL_ADC_MspInit+0x178>)
 8000e82:	695b      	ldr	r3, [r3, #20]
 8000e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e88:	617b      	str	r3, [r7, #20]
 8000e8a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8c:	4b2a      	ldr	r3, [pc, #168]	; (8000f38 <HAL_ADC_MspInit+0x178>)
 8000e8e:	695b      	ldr	r3, [r3, #20]
 8000e90:	4a29      	ldr	r2, [pc, #164]	; (8000f38 <HAL_ADC_MspInit+0x178>)
 8000e92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e96:	6153      	str	r3, [r2, #20]
 8000e98:	4b27      	ldr	r3, [pc, #156]	; (8000f38 <HAL_ADC_MspInit+0x178>)
 8000e9a:	695b      	ldr	r3, [r3, #20]
 8000e9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ea0:	613b      	str	r3, [r7, #16]
 8000ea2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = HAL_1_Pin|HAL_2_Pin|HAL_3_Pin|HAL_4_Pin;
 8000ea4:	23f0      	movs	r3, #240	; 0xf0
 8000ea6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eba:	f001 fa5b 	bl	8002374 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SENS_3_Pin;
 8000ebe:	2304      	movs	r3, #4
 8000ec0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SENS_3_GPIO_Port, &GPIO_InitStruct);
 8000eca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ece:	4619      	mov	r1, r3
 8000ed0:	481b      	ldr	r0, [pc, #108]	; (8000f40 <HAL_ADC_MspInit+0x180>)
 8000ed2:	f001 fa4f 	bl	8002374 <HAL_GPIO_Init>
}
 8000ed6:	e028      	b.n	8000f2a <HAL_ADC_MspInit+0x16a>
  else if(hadc->Instance==ADC3)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a19      	ldr	r2, [pc, #100]	; (8000f44 <HAL_ADC_MspInit+0x184>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d123      	bne.n	8000f2a <HAL_ADC_MspInit+0x16a>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8000ee2:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <HAL_ADC_MspInit+0x178>)
 8000ee4:	695b      	ldr	r3, [r3, #20]
 8000ee6:	4a14      	ldr	r2, [pc, #80]	; (8000f38 <HAL_ADC_MspInit+0x178>)
 8000ee8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000eec:	6153      	str	r3, [r2, #20]
 8000eee:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <HAL_ADC_MspInit+0x178>)
 8000ef0:	695b      	ldr	r3, [r3, #20]
 8000ef2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efa:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <HAL_ADC_MspInit+0x178>)
 8000efc:	695b      	ldr	r3, [r3, #20]
 8000efe:	4a0e      	ldr	r2, [pc, #56]	; (8000f38 <HAL_ADC_MspInit+0x178>)
 8000f00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f04:	6153      	str	r3, [r2, #20]
 8000f06:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <HAL_ADC_MspInit+0x178>)
 8000f08:	695b      	ldr	r3, [r3, #20]
 8000f0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f0e:	60bb      	str	r3, [r7, #8]
 8000f10:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SENS_1_Pin|SENS_2_Pin;
 8000f12:	2303      	movs	r3, #3
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f16:	2303      	movs	r3, #3
 8000f18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f22:	4619      	mov	r1, r3
 8000f24:	4806      	ldr	r0, [pc, #24]	; (8000f40 <HAL_ADC_MspInit+0x180>)
 8000f26:	f001 fa25 	bl	8002374 <HAL_GPIO_Init>
}
 8000f2a:	bf00      	nop
 8000f2c:	3738      	adds	r7, #56	; 0x38
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	200003cc 	.word	0x200003cc
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	50000100 	.word	0x50000100
 8000f40:	48000400 	.word	0x48000400
 8000f44:	50000400 	.word	0x50000400

08000f48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08a      	sub	sp, #40	; 0x28
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a17      	ldr	r2, [pc, #92]	; (8000fc4 <HAL_I2C_MspInit+0x7c>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d128      	bne.n	8000fbc <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6a:	4b17      	ldr	r3, [pc, #92]	; (8000fc8 <HAL_I2C_MspInit+0x80>)
 8000f6c:	695b      	ldr	r3, [r3, #20]
 8000f6e:	4a16      	ldr	r2, [pc, #88]	; (8000fc8 <HAL_I2C_MspInit+0x80>)
 8000f70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f74:	6153      	str	r3, [r2, #20]
 8000f76:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <HAL_I2C_MspInit+0x80>)
 8000f78:	695b      	ldr	r3, [r3, #20]
 8000f7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f7e:	613b      	str	r3, [r7, #16]
 8000f80:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f82:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f88:	2312      	movs	r3, #18
 8000f8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f90:	2303      	movs	r3, #3
 8000f92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f94:	2304      	movs	r3, #4
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	480b      	ldr	r0, [pc, #44]	; (8000fcc <HAL_I2C_MspInit+0x84>)
 8000fa0:	f001 f9e8 	bl	8002374 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <HAL_I2C_MspInit+0x80>)
 8000fa6:	69db      	ldr	r3, [r3, #28]
 8000fa8:	4a07      	ldr	r2, [pc, #28]	; (8000fc8 <HAL_I2C_MspInit+0x80>)
 8000faa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fae:	61d3      	str	r3, [r2, #28]
 8000fb0:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <HAL_I2C_MspInit+0x80>)
 8000fb2:	69db      	ldr	r3, [r3, #28]
 8000fb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fbc:	bf00      	nop
 8000fbe:	3728      	adds	r7, #40	; 0x28
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40005400 	.word	0x40005400
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	48000400 	.word	0x48000400

08000fd0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a0d      	ldr	r2, [pc, #52]	; (8001014 <HAL_RTC_MspInit+0x44>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d111      	bne.n	8001006 <HAL_RTC_MspInit+0x36>
 8000fe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fe6:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	fa93 f3a3 	rbit	r3, r3
 8000fee:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ff0:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000ff2:	fab3 f383 	clz	r3, r3
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4b07      	ldr	r3, [pc, #28]	; (8001018 <HAL_RTC_MspInit+0x48>)
 8000ffc:	4413      	add	r3, r2
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	461a      	mov	r2, r3
 8001002:	2301      	movs	r3, #1
 8001004:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001006:	bf00      	nop
 8001008:	3714      	adds	r7, #20
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	40002800 	.word	0x40002800
 8001018:	10908100 	.word	0x10908100

0800101c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a13      	ldr	r2, [pc, #76]	; (8001078 <HAL_TIM_Base_MspInit+0x5c>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d10c      	bne.n	8001048 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800102e:	4b13      	ldr	r3, [pc, #76]	; (800107c <HAL_TIM_Base_MspInit+0x60>)
 8001030:	699b      	ldr	r3, [r3, #24]
 8001032:	4a12      	ldr	r2, [pc, #72]	; (800107c <HAL_TIM_Base_MspInit+0x60>)
 8001034:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001038:	6193      	str	r3, [r2, #24]
 800103a:	4b10      	ldr	r3, [pc, #64]	; (800107c <HAL_TIM_Base_MspInit+0x60>)
 800103c:	699b      	ldr	r3, [r3, #24]
 800103e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001046:	e010      	b.n	800106a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM8)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a0c      	ldr	r2, [pc, #48]	; (8001080 <HAL_TIM_Base_MspInit+0x64>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d10b      	bne.n	800106a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001052:	4b0a      	ldr	r3, [pc, #40]	; (800107c <HAL_TIM_Base_MspInit+0x60>)
 8001054:	699b      	ldr	r3, [r3, #24]
 8001056:	4a09      	ldr	r2, [pc, #36]	; (800107c <HAL_TIM_Base_MspInit+0x60>)
 8001058:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800105c:	6193      	str	r3, [r2, #24]
 800105e:	4b07      	ldr	r3, [pc, #28]	; (800107c <HAL_TIM_Base_MspInit+0x60>)
 8001060:	699b      	ldr	r3, [r3, #24]
 8001062:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	68bb      	ldr	r3, [r7, #8]
}
 800106a:	bf00      	nop
 800106c:	3714      	adds	r7, #20
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	40012c00 	.word	0x40012c00
 800107c:	40021000 	.word	0x40021000
 8001080:	40013400 	.word	0x40013400

08001084 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08a      	sub	sp, #40	; 0x28
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010a4:	d128      	bne.n	80010f8 <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010a6:	4b16      	ldr	r3, [pc, #88]	; (8001100 <HAL_TIM_IC_MspInit+0x7c>)
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	4a15      	ldr	r2, [pc, #84]	; (8001100 <HAL_TIM_IC_MspInit+0x7c>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	61d3      	str	r3, [r2, #28]
 80010b2:	4b13      	ldr	r3, [pc, #76]	; (8001100 <HAL_TIM_IC_MspInit+0x7c>)
 80010b4:	69db      	ldr	r3, [r3, #28]
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010be:	4b10      	ldr	r3, [pc, #64]	; (8001100 <HAL_TIM_IC_MspInit+0x7c>)
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	4a0f      	ldr	r2, [pc, #60]	; (8001100 <HAL_TIM_IC_MspInit+0x7c>)
 80010c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c8:	6153      	str	r3, [r2, #20]
 80010ca:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <HAL_TIM_IC_MspInit+0x7c>)
 80010cc:	695b      	ldr	r3, [r3, #20]
 80010ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010d6:	2301      	movs	r3, #1
 80010d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010da:	2302      	movs	r3, #2
 80010dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e2:	2300      	movs	r3, #0
 80010e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010e6:	2301      	movs	r3, #1
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ea:	f107 0314 	add.w	r3, r7, #20
 80010ee:	4619      	mov	r1, r3
 80010f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f4:	f001 f93e 	bl	8002374 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010f8:	bf00      	nop
 80010fa:	3728      	adds	r7, #40	; 0x28
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40021000 	.word	0x40021000

08001104 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM15)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a0a      	ldr	r2, [pc, #40]	; (800113c <HAL_TIM_OC_MspInit+0x38>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d10b      	bne.n	800112e <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001116:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <HAL_TIM_OC_MspInit+0x3c>)
 8001118:	699b      	ldr	r3, [r3, #24]
 800111a:	4a09      	ldr	r2, [pc, #36]	; (8001140 <HAL_TIM_OC_MspInit+0x3c>)
 800111c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001120:	6193      	str	r3, [r2, #24]
 8001122:	4b07      	ldr	r3, [pc, #28]	; (8001140 <HAL_TIM_OC_MspInit+0x3c>)
 8001124:	699b      	ldr	r3, [r3, #24]
 8001126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800112e:	bf00      	nop
 8001130:	3714      	adds	r7, #20
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	40014000 	.word	0x40014000
 8001140:	40021000 	.word	0x40021000

08001144 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08c      	sub	sp, #48	; 0x30
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f107 031c 	add.w	r3, r7, #28
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a4c      	ldr	r2, [pc, #304]	; (8001294 <HAL_TIM_MspPostInit+0x150>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d11e      	bne.n	80011a4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001166:	4b4c      	ldr	r3, [pc, #304]	; (8001298 <HAL_TIM_MspPostInit+0x154>)
 8001168:	695b      	ldr	r3, [r3, #20]
 800116a:	4a4b      	ldr	r2, [pc, #300]	; (8001298 <HAL_TIM_MspPostInit+0x154>)
 800116c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001170:	6153      	str	r3, [r2, #20]
 8001172:	4b49      	ldr	r3, [pc, #292]	; (8001298 <HAL_TIM_MspPostInit+0x154>)
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117a:	61bb      	str	r3, [r7, #24]
 800117c:	69bb      	ldr	r3, [r7, #24]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 800117e:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8001182:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001184:	2302      	movs	r3, #2
 8001186:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118c:	2300      	movs	r3, #0
 800118e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001190:	2306      	movs	r3, #6
 8001192:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001194:	f107 031c 	add.w	r3, r7, #28
 8001198:	4619      	mov	r1, r3
 800119a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800119e:	f001 f8e9 	bl	8002374 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80011a2:	e072      	b.n	800128a <HAL_TIM_MspPostInit+0x146>
  else if(htim->Instance==TIM8)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a3c      	ldr	r2, [pc, #240]	; (800129c <HAL_TIM_MspPostInit+0x158>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d13a      	bne.n	8001224 <HAL_TIM_MspPostInit+0xe0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ae:	4b3a      	ldr	r3, [pc, #232]	; (8001298 <HAL_TIM_MspPostInit+0x154>)
 80011b0:	695b      	ldr	r3, [r3, #20]
 80011b2:	4a39      	ldr	r2, [pc, #228]	; (8001298 <HAL_TIM_MspPostInit+0x154>)
 80011b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b8:	6153      	str	r3, [r2, #20]
 80011ba:	4b37      	ldr	r3, [pc, #220]	; (8001298 <HAL_TIM_MspPostInit+0x154>)
 80011bc:	695b      	ldr	r3, [r3, #20]
 80011be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c2:	617b      	str	r3, [r7, #20]
 80011c4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c6:	4b34      	ldr	r3, [pc, #208]	; (8001298 <HAL_TIM_MspPostInit+0x154>)
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	4a33      	ldr	r2, [pc, #204]	; (8001298 <HAL_TIM_MspPostInit+0x154>)
 80011cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011d0:	6153      	str	r3, [r2, #20]
 80011d2:	4b31      	ldr	r3, [pc, #196]	; (8001298 <HAL_TIM_MspPostInit+0x154>)
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80011de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e4:	2302      	movs	r3, #2
 80011e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	2300      	movs	r3, #0
 80011ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 80011f0:	2302      	movs	r3, #2
 80011f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f4:	f107 031c 	add.w	r3, r7, #28
 80011f8:	4619      	mov	r1, r3
 80011fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011fe:	f001 f8b9 	bl	8002374 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001202:	2308      	movs	r3, #8
 8001204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001206:	2302      	movs	r3, #2
 8001208:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120e:	2300      	movs	r3, #0
 8001210:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001212:	2304      	movs	r3, #4
 8001214:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001216:	f107 031c 	add.w	r3, r7, #28
 800121a:	4619      	mov	r1, r3
 800121c:	4820      	ldr	r0, [pc, #128]	; (80012a0 <HAL_TIM_MspPostInit+0x15c>)
 800121e:	f001 f8a9 	bl	8002374 <HAL_GPIO_Init>
}
 8001222:	e032      	b.n	800128a <HAL_TIM_MspPostInit+0x146>
  else if(htim->Instance==TIM15)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a1e      	ldr	r2, [pc, #120]	; (80012a4 <HAL_TIM_MspPostInit+0x160>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d12d      	bne.n	800128a <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800122e:	4b1a      	ldr	r3, [pc, #104]	; (8001298 <HAL_TIM_MspPostInit+0x154>)
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	4a19      	ldr	r2, [pc, #100]	; (8001298 <HAL_TIM_MspPostInit+0x154>)
 8001234:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001238:	6153      	str	r3, [r2, #20]
 800123a:	4b17      	ldr	r3, [pc, #92]	; (8001298 <HAL_TIM_MspPostInit+0x154>)
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001246:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800124a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124c:	2302      	movs	r3, #2
 800124e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001254:	2300      	movs	r3, #0
 8001256:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8001258:	2301      	movs	r3, #1
 800125a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125c:	f107 031c 	add.w	r3, r7, #28
 8001260:	4619      	mov	r1, r3
 8001262:	480f      	ldr	r0, [pc, #60]	; (80012a0 <HAL_TIM_MspPostInit+0x15c>)
 8001264:	f001 f886 	bl	8002374 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001268:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800126c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126e:	2302      	movs	r3, #2
 8001270:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001276:	2300      	movs	r3, #0
 8001278:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM15;
 800127a:	2302      	movs	r3, #2
 800127c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127e:	f107 031c 	add.w	r3, r7, #28
 8001282:	4619      	mov	r1, r3
 8001284:	4806      	ldr	r0, [pc, #24]	; (80012a0 <HAL_TIM_MspPostInit+0x15c>)
 8001286:	f001 f875 	bl	8002374 <HAL_GPIO_Init>
}
 800128a:	bf00      	nop
 800128c:	3730      	adds	r7, #48	; 0x30
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40012c00 	.word	0x40012c00
 8001298:	40021000 	.word	0x40021000
 800129c:	40013400 	.word	0x40013400
 80012a0:	48000400 	.word	0x48000400
 80012a4:	40014000 	.word	0x40014000

080012a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08c      	sub	sp, #48	; 0x30
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 031c 	add.w	r3, r7, #28
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a3c      	ldr	r2, [pc, #240]	; (80013b8 <HAL_UART_MspInit+0x110>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d128      	bne.n	800131c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012ca:	4b3c      	ldr	r3, [pc, #240]	; (80013bc <HAL_UART_MspInit+0x114>)
 80012cc:	699b      	ldr	r3, [r3, #24]
 80012ce:	4a3b      	ldr	r2, [pc, #236]	; (80013bc <HAL_UART_MspInit+0x114>)
 80012d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d4:	6193      	str	r3, [r2, #24]
 80012d6:	4b39      	ldr	r3, [pc, #228]	; (80013bc <HAL_UART_MspInit+0x114>)
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012de:	61bb      	str	r3, [r7, #24]
 80012e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e2:	4b36      	ldr	r3, [pc, #216]	; (80013bc <HAL_UART_MspInit+0x114>)
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	4a35      	ldr	r2, [pc, #212]	; (80013bc <HAL_UART_MspInit+0x114>)
 80012e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012ec:	6153      	str	r3, [r2, #20]
 80012ee:	4b33      	ldr	r3, [pc, #204]	; (80013bc <HAL_UART_MspInit+0x114>)
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012f6:	617b      	str	r3, [r7, #20]
 80012f8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012fa:	23c0      	movs	r3, #192	; 0xc0
 80012fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fe:	2302      	movs	r3, #2
 8001300:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001306:	2303      	movs	r3, #3
 8001308:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800130a:	2307      	movs	r3, #7
 800130c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130e:	f107 031c 	add.w	r3, r7, #28
 8001312:	4619      	mov	r1, r3
 8001314:	482a      	ldr	r0, [pc, #168]	; (80013c0 <HAL_UART_MspInit+0x118>)
 8001316:	f001 f82d 	bl	8002374 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800131a:	e049      	b.n	80013b0 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART2)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a28      	ldr	r2, [pc, #160]	; (80013c4 <HAL_UART_MspInit+0x11c>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d144      	bne.n	80013b0 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001326:	4b25      	ldr	r3, [pc, #148]	; (80013bc <HAL_UART_MspInit+0x114>)
 8001328:	69db      	ldr	r3, [r3, #28]
 800132a:	4a24      	ldr	r2, [pc, #144]	; (80013bc <HAL_UART_MspInit+0x114>)
 800132c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001330:	61d3      	str	r3, [r2, #28]
 8001332:	4b22      	ldr	r3, [pc, #136]	; (80013bc <HAL_UART_MspInit+0x114>)
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133a:	613b      	str	r3, [r7, #16]
 800133c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800133e:	4b1f      	ldr	r3, [pc, #124]	; (80013bc <HAL_UART_MspInit+0x114>)
 8001340:	695b      	ldr	r3, [r3, #20]
 8001342:	4a1e      	ldr	r2, [pc, #120]	; (80013bc <HAL_UART_MspInit+0x114>)
 8001344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001348:	6153      	str	r3, [r2, #20]
 800134a:	4b1c      	ldr	r3, [pc, #112]	; (80013bc <HAL_UART_MspInit+0x114>)
 800134c:	695b      	ldr	r3, [r3, #20]
 800134e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001356:	4b19      	ldr	r3, [pc, #100]	; (80013bc <HAL_UART_MspInit+0x114>)
 8001358:	695b      	ldr	r3, [r3, #20]
 800135a:	4a18      	ldr	r2, [pc, #96]	; (80013bc <HAL_UART_MspInit+0x114>)
 800135c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001360:	6153      	str	r3, [r2, #20]
 8001362:	4b16      	ldr	r3, [pc, #88]	; (80013bc <HAL_UART_MspInit+0x114>)
 8001364:	695b      	ldr	r3, [r3, #20]
 8001366:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800136e:	2304      	movs	r3, #4
 8001370:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001372:	2302      	movs	r3, #2
 8001374:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800137a:	2303      	movs	r3, #3
 800137c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800137e:	2307      	movs	r3, #7
 8001380:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001382:	f107 031c 	add.w	r3, r7, #28
 8001386:	4619      	mov	r1, r3
 8001388:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800138c:	f000 fff2 	bl	8002374 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001390:	2310      	movs	r3, #16
 8001392:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001394:	2302      	movs	r3, #2
 8001396:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800139c:	2303      	movs	r3, #3
 800139e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013a0:	2307      	movs	r3, #7
 80013a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a4:	f107 031c 	add.w	r3, r7, #28
 80013a8:	4619      	mov	r1, r3
 80013aa:	4805      	ldr	r0, [pc, #20]	; (80013c0 <HAL_UART_MspInit+0x118>)
 80013ac:	f000 ffe2 	bl	8002374 <HAL_GPIO_Init>
}
 80013b0:	bf00      	nop
 80013b2:	3730      	adds	r7, #48	; 0x30
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40013800 	.word	0x40013800
 80013bc:	40021000 	.word	0x40021000
 80013c0:	48000400 	.word	0x48000400
 80013c4:	40004400 	.word	0x40004400

080013c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013cc:	e7fe      	b.n	80013cc <NMI_Handler+0x4>

080013ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013d2:	e7fe      	b.n	80013d2 <HardFault_Handler+0x4>

080013d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <MemManage_Handler+0x4>

080013da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013de:	e7fe      	b.n	80013de <BusFault_Handler+0x4>

080013e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <UsageFault_Handler+0x4>

080013e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001414:	f000 f884 	bl	8001520 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001418:	bf00      	nop
 800141a:	bd80      	pop	{r7, pc}

0800141c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001420:	4b06      	ldr	r3, [pc, #24]	; (800143c <SystemInit+0x20>)
 8001422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001426:	4a05      	ldr	r2, [pc, #20]	; (800143c <SystemInit+0x20>)
 8001428:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800142c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001440:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001478 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001444:	f7ff ffea 	bl	800141c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001448:	480c      	ldr	r0, [pc, #48]	; (800147c <LoopForever+0x6>)
  ldr r1, =_edata
 800144a:	490d      	ldr	r1, [pc, #52]	; (8001480 <LoopForever+0xa>)
  ldr r2, =_sidata
 800144c:	4a0d      	ldr	r2, [pc, #52]	; (8001484 <LoopForever+0xe>)
  movs r3, #0
 800144e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001450:	e002      	b.n	8001458 <LoopCopyDataInit>

08001452 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001452:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001454:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001456:	3304      	adds	r3, #4

08001458 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001458:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800145a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800145c:	d3f9      	bcc.n	8001452 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800145e:	4a0a      	ldr	r2, [pc, #40]	; (8001488 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001460:	4c0a      	ldr	r4, [pc, #40]	; (800148c <LoopForever+0x16>)
  movs r3, #0
 8001462:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001464:	e001      	b.n	800146a <LoopFillZerobss>

08001466 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001466:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001468:	3204      	adds	r2, #4

0800146a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800146a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800146c:	d3fb      	bcc.n	8001466 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800146e:	f004 ff4d 	bl	800630c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001472:	f7fe fea9 	bl	80001c8 <main>

08001476 <LoopForever>:

LoopForever:
    b LoopForever
 8001476:	e7fe      	b.n	8001476 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001478:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800147c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001480:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001484:	080063bc 	.word	0x080063bc
  ldr r2, =_sbss
 8001488:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800148c:	200003d4 	.word	0x200003d4

08001490 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001490:	e7fe      	b.n	8001490 <ADC1_2_IRQHandler>
	...

08001494 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001498:	4b08      	ldr	r3, [pc, #32]	; (80014bc <HAL_Init+0x28>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a07      	ldr	r2, [pc, #28]	; (80014bc <HAL_Init+0x28>)
 800149e:	f043 0310 	orr.w	r3, r3, #16
 80014a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a4:	2003      	movs	r0, #3
 80014a6:	f000 ff31 	bl	800230c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014aa:	200f      	movs	r0, #15
 80014ac:	f000 f808 	bl	80014c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014b0:	f7ff fc62 	bl	8000d78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40022000 	.word	0x40022000

080014c0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014c8:	4b12      	ldr	r3, [pc, #72]	; (8001514 <HAL_InitTick+0x54>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4b12      	ldr	r3, [pc, #72]	; (8001518 <HAL_InitTick+0x58>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	4619      	mov	r1, r3
 80014d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014da:	fbb2 f3f3 	udiv	r3, r2, r3
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 ff3b 	bl	800235a <HAL_SYSTICK_Config>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e00e      	b.n	800150c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2b0f      	cmp	r3, #15
 80014f2:	d80a      	bhi.n	800150a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014f4:	2200      	movs	r2, #0
 80014f6:	6879      	ldr	r1, [r7, #4]
 80014f8:	f04f 30ff 	mov.w	r0, #4294967295
 80014fc:	f000 ff11 	bl	8002322 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001500:	4a06      	ldr	r2, [pc, #24]	; (800151c <HAL_InitTick+0x5c>)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001506:	2300      	movs	r3, #0
 8001508:	e000      	b.n	800150c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
}
 800150c:	4618      	mov	r0, r3
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000000 	.word	0x20000000
 8001518:	20000008 	.word	0x20000008
 800151c:	20000004 	.word	0x20000004

08001520 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <HAL_IncTick+0x20>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	461a      	mov	r2, r3
 800152a:	4b06      	ldr	r3, [pc, #24]	; (8001544 <HAL_IncTick+0x24>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4413      	add	r3, r2
 8001530:	4a04      	ldr	r2, [pc, #16]	; (8001544 <HAL_IncTick+0x24>)
 8001532:	6013      	str	r3, [r2, #0]
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	20000008 	.word	0x20000008
 8001544:	200003d0 	.word	0x200003d0

08001548 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  return uwTick;  
 800154c:	4b03      	ldr	r3, [pc, #12]	; (800155c <HAL_GetTick+0x14>)
 800154e:	681b      	ldr	r3, [r3, #0]
}
 8001550:	4618      	mov	r0, r3
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	200003d0 	.word	0x200003d0

08001560 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b09a      	sub	sp, #104	; 0x68
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001568:	2300      	movs	r3, #0
 800156a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800156e:	2300      	movs	r3, #0
 8001570:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001572:	2300      	movs	r3, #0
 8001574:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d101      	bne.n	8001580 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e1c9      	b.n	8001914 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	f003 0310 	and.w	r3, r3, #16
 800158e:	2b00      	cmp	r3, #0
 8001590:	d176      	bne.n	8001680 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	2b00      	cmp	r3, #0
 8001598:	d152      	bne.n	8001640 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7ff fc03 	bl	8000dc0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d13b      	bne.n	8001640 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f000 fd87 	bl	80020dc <ADC_Disable>
 80015ce:	4603      	mov	r3, r0
 80015d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d8:	f003 0310 	and.w	r3, r3, #16
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d12f      	bne.n	8001640 <HAL_ADC_Init+0xe0>
 80015e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d12b      	bne.n	8001640 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80015f0:	f023 0302 	bic.w	r3, r3, #2
 80015f4:	f043 0202 	orr.w	r2, r3, #2
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	689a      	ldr	r2, [r3, #8]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800160a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	689a      	ldr	r2, [r3, #8]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800161a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800161c:	4b86      	ldr	r3, [pc, #536]	; (8001838 <HAL_ADC_Init+0x2d8>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a86      	ldr	r2, [pc, #536]	; (800183c <HAL_ADC_Init+0x2dc>)
 8001622:	fba2 2303 	umull	r2, r3, r2, r3
 8001626:	0c9a      	lsrs	r2, r3, #18
 8001628:	4613      	mov	r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4413      	add	r3, r2
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001632:	e002      	b.n	800163a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	3b01      	subs	r3, #1
 8001638:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1f9      	bne.n	8001634 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d007      	beq.n	800165e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001658:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800165c:	d110      	bne.n	8001680 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	f023 0312 	bic.w	r3, r3, #18
 8001666:	f043 0210 	orr.w	r2, r3, #16
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001672:	f043 0201 	orr.w	r2, r3, #1
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001684:	f003 0310 	and.w	r3, r3, #16
 8001688:	2b00      	cmp	r3, #0
 800168a:	f040 8136 	bne.w	80018fa <HAL_ADC_Init+0x39a>
 800168e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001692:	2b00      	cmp	r3, #0
 8001694:	f040 8131 	bne.w	80018fa <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f040 8129 	bne.w	80018fa <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ac:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80016b0:	f043 0202 	orr.w	r2, r3, #2
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016c0:	d004      	beq.n	80016cc <HAL_ADC_Init+0x16c>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a5e      	ldr	r2, [pc, #376]	; (8001840 <HAL_ADC_Init+0x2e0>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d101      	bne.n	80016d0 <HAL_ADC_Init+0x170>
 80016cc:	4b5d      	ldr	r3, [pc, #372]	; (8001844 <HAL_ADC_Init+0x2e4>)
 80016ce:	e000      	b.n	80016d2 <HAL_ADC_Init+0x172>
 80016d0:	4b5d      	ldr	r3, [pc, #372]	; (8001848 <HAL_ADC_Init+0x2e8>)
 80016d2:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016dc:	d102      	bne.n	80016e4 <HAL_ADC_Init+0x184>
 80016de:	4b58      	ldr	r3, [pc, #352]	; (8001840 <HAL_ADC_Init+0x2e0>)
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	e01a      	b.n	800171a <HAL_ADC_Init+0x1ba>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a55      	ldr	r2, [pc, #340]	; (8001840 <HAL_ADC_Init+0x2e0>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d103      	bne.n	80016f6 <HAL_ADC_Init+0x196>
 80016ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	e011      	b.n	800171a <HAL_ADC_Init+0x1ba>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a54      	ldr	r2, [pc, #336]	; (800184c <HAL_ADC_Init+0x2ec>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d102      	bne.n	8001706 <HAL_ADC_Init+0x1a6>
 8001700:	4b53      	ldr	r3, [pc, #332]	; (8001850 <HAL_ADC_Init+0x2f0>)
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	e009      	b.n	800171a <HAL_ADC_Init+0x1ba>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a51      	ldr	r2, [pc, #324]	; (8001850 <HAL_ADC_Init+0x2f0>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d102      	bne.n	8001716 <HAL_ADC_Init+0x1b6>
 8001710:	4b4e      	ldr	r3, [pc, #312]	; (800184c <HAL_ADC_Init+0x2ec>)
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	e001      	b.n	800171a <HAL_ADC_Init+0x1ba>
 8001716:	2300      	movs	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f003 0303 	and.w	r3, r3, #3
 8001724:	2b01      	cmp	r3, #1
 8001726:	d108      	bne.n	800173a <HAL_ADC_Init+0x1da>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	2b01      	cmp	r3, #1
 8001734:	d101      	bne.n	800173a <HAL_ADC_Init+0x1da>
 8001736:	2301      	movs	r3, #1
 8001738:	e000      	b.n	800173c <HAL_ADC_Init+0x1dc>
 800173a:	2300      	movs	r3, #0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d11c      	bne.n	800177a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001740:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001742:	2b00      	cmp	r3, #0
 8001744:	d010      	beq.n	8001768 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f003 0303 	and.w	r3, r3, #3
 800174e:	2b01      	cmp	r3, #1
 8001750:	d107      	bne.n	8001762 <HAL_ADC_Init+0x202>
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	2b01      	cmp	r3, #1
 800175c:	d101      	bne.n	8001762 <HAL_ADC_Init+0x202>
 800175e:	2301      	movs	r3, #1
 8001760:	e000      	b.n	8001764 <HAL_ADC_Init+0x204>
 8001762:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001764:	2b00      	cmp	r3, #0
 8001766:	d108      	bne.n	800177a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001768:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	431a      	orrs	r2, r3
 8001776:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001778:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	7e5b      	ldrb	r3, [r3, #25]
 800177e:	035b      	lsls	r3, r3, #13
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001784:	2a01      	cmp	r2, #1
 8001786:	d002      	beq.n	800178e <HAL_ADC_Init+0x22e>
 8001788:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800178c:	e000      	b.n	8001790 <HAL_ADC_Init+0x230>
 800178e:	2200      	movs	r2, #0
 8001790:	431a      	orrs	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	431a      	orrs	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	4313      	orrs	r3, r2
 800179e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80017a0:	4313      	orrs	r3, r2
 80017a2:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d11b      	bne.n	80017e6 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	7e5b      	ldrb	r3, [r3, #25]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d109      	bne.n	80017ca <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ba:	3b01      	subs	r3, #1
 80017bc:	045a      	lsls	r2, r3, #17
 80017be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80017c0:	4313      	orrs	r3, r2
 80017c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c6:	663b      	str	r3, [r7, #96]	; 0x60
 80017c8:	e00d      	b.n	80017e6 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80017d2:	f043 0220 	orr.w	r2, r3, #32
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017de:	f043 0201 	orr.w	r2, r3, #1
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d03a      	beq.n	8001864 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a16      	ldr	r2, [pc, #88]	; (800184c <HAL_ADC_Init+0x2ec>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d004      	beq.n	8001802 <HAL_ADC_Init+0x2a2>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a14      	ldr	r2, [pc, #80]	; (8001850 <HAL_ADC_Init+0x2f0>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d128      	bne.n	8001854 <HAL_ADC_Init+0x2f4>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001806:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800180a:	d012      	beq.n	8001832 <HAL_ADC_Init+0x2d2>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001810:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001814:	d00a      	beq.n	800182c <HAL_ADC_Init+0x2cc>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800181e:	d002      	beq.n	8001826 <HAL_ADC_Init+0x2c6>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001824:	e018      	b.n	8001858 <HAL_ADC_Init+0x2f8>
 8001826:	f44f 7380 	mov.w	r3, #256	; 0x100
 800182a:	e015      	b.n	8001858 <HAL_ADC_Init+0x2f8>
 800182c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001830:	e012      	b.n	8001858 <HAL_ADC_Init+0x2f8>
 8001832:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001836:	e00f      	b.n	8001858 <HAL_ADC_Init+0x2f8>
 8001838:	20000000 	.word	0x20000000
 800183c:	431bde83 	.word	0x431bde83
 8001840:	50000100 	.word	0x50000100
 8001844:	50000300 	.word	0x50000300
 8001848:	50000700 	.word	0x50000700
 800184c:	50000400 	.word	0x50000400
 8001850:	50000500 	.word	0x50000500
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800185c:	4313      	orrs	r3, r2
 800185e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001860:	4313      	orrs	r3, r2
 8001862:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f003 030c 	and.w	r3, r3, #12
 800186e:	2b00      	cmp	r3, #0
 8001870:	d114      	bne.n	800189c <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	6812      	ldr	r2, [r2, #0]
 800187c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001880:	f023 0302 	bic.w	r3, r3, #2
 8001884:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	7e1b      	ldrb	r3, [r3, #24]
 800188a:	039a      	lsls	r2, r3, #14
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	4313      	orrs	r3, r2
 8001896:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001898:	4313      	orrs	r3, r2
 800189a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	68da      	ldr	r2, [r3, #12]
 80018a2:	4b1e      	ldr	r3, [pc, #120]	; (800191c <HAL_ADC_Init+0x3bc>)
 80018a4:	4013      	ands	r3, r2
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	6812      	ldr	r2, [r2, #0]
 80018aa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80018ac:	430b      	orrs	r3, r1
 80018ae:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	691b      	ldr	r3, [r3, #16]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d10c      	bne.n	80018d2 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	f023 010f 	bic.w	r1, r3, #15
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	1e5a      	subs	r2, r3, #1
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	430a      	orrs	r2, r1
 80018ce:	631a      	str	r2, [r3, #48]	; 0x30
 80018d0:	e007      	b.n	80018e2 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f022 020f 	bic.w	r2, r2, #15
 80018e0:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ec:	f023 0303 	bic.w	r3, r3, #3
 80018f0:	f043 0201 	orr.w	r2, r3, #1
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	641a      	str	r2, [r3, #64]	; 0x40
 80018f8:	e00a      	b.n	8001910 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	f023 0312 	bic.w	r3, r3, #18
 8001902:	f043 0210 	orr.w	r2, r3, #16
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800190a:	2301      	movs	r3, #1
 800190c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001910:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001914:	4618      	mov	r0, r3
 8001916:	3768      	adds	r7, #104	; 0x68
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	fff0c007 	.word	0xfff0c007

08001920 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001920:	b480      	push	{r7}
 8001922:	b09b      	sub	sp, #108	; 0x6c
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800192a:	2300      	movs	r3, #0
 800192c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001930:	2300      	movs	r3, #0
 8001932:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800193a:	2b01      	cmp	r3, #1
 800193c:	d101      	bne.n	8001942 <HAL_ADC_ConfigChannel+0x22>
 800193e:	2302      	movs	r3, #2
 8001940:	e2ca      	b.n	8001ed8 <HAL_ADC_ConfigChannel+0x5b8>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2201      	movs	r2, #1
 8001946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f003 0304 	and.w	r3, r3, #4
 8001954:	2b00      	cmp	r3, #0
 8001956:	f040 82ae 	bne.w	8001eb6 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	2b04      	cmp	r3, #4
 8001960:	d81c      	bhi.n	800199c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685a      	ldr	r2, [r3, #4]
 800196c:	4613      	mov	r3, r2
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	4413      	add	r3, r2
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	461a      	mov	r2, r3
 8001976:	231f      	movs	r3, #31
 8001978:	4093      	lsls	r3, r2
 800197a:	43db      	mvns	r3, r3
 800197c:	4019      	ands	r1, r3
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	6818      	ldr	r0, [r3, #0]
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	4613      	mov	r3, r2
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	4413      	add	r3, r2
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	fa00 f203 	lsl.w	r2, r0, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	430a      	orrs	r2, r1
 8001998:	631a      	str	r2, [r3, #48]	; 0x30
 800199a:	e063      	b.n	8001a64 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b09      	cmp	r3, #9
 80019a2:	d81e      	bhi.n	80019e2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685a      	ldr	r2, [r3, #4]
 80019ae:	4613      	mov	r3, r2
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	4413      	add	r3, r2
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	3b1e      	subs	r3, #30
 80019b8:	221f      	movs	r2, #31
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	43db      	mvns	r3, r3
 80019c0:	4019      	ands	r1, r3
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	6818      	ldr	r0, [r3, #0]
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685a      	ldr	r2, [r3, #4]
 80019ca:	4613      	mov	r3, r2
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	4413      	add	r3, r2
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	3b1e      	subs	r3, #30
 80019d4:	fa00 f203 	lsl.w	r2, r0, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	430a      	orrs	r2, r1
 80019de:	635a      	str	r2, [r3, #52]	; 0x34
 80019e0:	e040      	b.n	8001a64 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2b0e      	cmp	r3, #14
 80019e8:	d81e      	bhi.n	8001a28 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685a      	ldr	r2, [r3, #4]
 80019f4:	4613      	mov	r3, r2
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	4413      	add	r3, r2
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	3b3c      	subs	r3, #60	; 0x3c
 80019fe:	221f      	movs	r2, #31
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	4019      	ands	r1, r3
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	6818      	ldr	r0, [r3, #0]
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	4613      	mov	r3, r2
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	4413      	add	r3, r2
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	3b3c      	subs	r3, #60	; 0x3c
 8001a1a:	fa00 f203 	lsl.w	r2, r0, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	430a      	orrs	r2, r1
 8001a24:	639a      	str	r2, [r3, #56]	; 0x38
 8001a26:	e01d      	b.n	8001a64 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	4613      	mov	r3, r2
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	4413      	add	r3, r2
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	3b5a      	subs	r3, #90	; 0x5a
 8001a3c:	221f      	movs	r2, #31
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	43db      	mvns	r3, r3
 8001a44:	4019      	ands	r1, r3
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	6818      	ldr	r0, [r3, #0]
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685a      	ldr	r2, [r3, #4]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	4413      	add	r3, r2
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	3b5a      	subs	r3, #90	; 0x5a
 8001a58:	fa00 f203 	lsl.w	r2, r0, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	430a      	orrs	r2, r1
 8001a62:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 030c 	and.w	r3, r3, #12
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f040 80e5 	bne.w	8001c3e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2b09      	cmp	r3, #9
 8001a7a:	d91c      	bls.n	8001ab6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6999      	ldr	r1, [r3, #24]
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	4613      	mov	r3, r2
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	4413      	add	r3, r2
 8001a8c:	3b1e      	subs	r3, #30
 8001a8e:	2207      	movs	r2, #7
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	4019      	ands	r1, r3
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	6898      	ldr	r0, [r3, #8]
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	4413      	add	r3, r2
 8001aa6:	3b1e      	subs	r3, #30
 8001aa8:	fa00 f203 	lsl.w	r2, r0, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	619a      	str	r2, [r3, #24]
 8001ab4:	e019      	b.n	8001aea <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	6959      	ldr	r1, [r3, #20]
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	4413      	add	r3, r2
 8001ac6:	2207      	movs	r2, #7
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43db      	mvns	r3, r3
 8001ace:	4019      	ands	r1, r3
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	6898      	ldr	r0, [r3, #8]
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	4413      	add	r3, r2
 8001ade:	fa00 f203 	lsl.w	r2, r0, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	695a      	ldr	r2, [r3, #20]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	08db      	lsrs	r3, r3, #3
 8001af6:	f003 0303 	and.w	r3, r3, #3
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	3b01      	subs	r3, #1
 8001b08:	2b03      	cmp	r3, #3
 8001b0a:	d84f      	bhi.n	8001bac <HAL_ADC_ConfigChannel+0x28c>
 8001b0c:	a201      	add	r2, pc, #4	; (adr r2, 8001b14 <HAL_ADC_ConfigChannel+0x1f4>)
 8001b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b12:	bf00      	nop
 8001b14:	08001b25 	.word	0x08001b25
 8001b18:	08001b47 	.word	0x08001b47
 8001b1c:	08001b69 	.word	0x08001b69
 8001b20:	08001b8b 	.word	0x08001b8b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b2a:	4b9a      	ldr	r3, [pc, #616]	; (8001d94 <HAL_ADC_ConfigChannel+0x474>)
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	6812      	ldr	r2, [r2, #0]
 8001b32:	0691      	lsls	r1, r2, #26
 8001b34:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001b36:	430a      	orrs	r2, r1
 8001b38:	431a      	orrs	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001b42:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001b44:	e07e      	b.n	8001c44 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001b4c:	4b91      	ldr	r3, [pc, #580]	; (8001d94 <HAL_ADC_ConfigChannel+0x474>)
 8001b4e:	4013      	ands	r3, r2
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	6812      	ldr	r2, [r2, #0]
 8001b54:	0691      	lsls	r1, r2, #26
 8001b56:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	431a      	orrs	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001b64:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001b66:	e06d      	b.n	8001c44 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001b6e:	4b89      	ldr	r3, [pc, #548]	; (8001d94 <HAL_ADC_ConfigChannel+0x474>)
 8001b70:	4013      	ands	r3, r2
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	6812      	ldr	r2, [r2, #0]
 8001b76:	0691      	lsls	r1, r2, #26
 8001b78:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001b86:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001b88:	e05c      	b.n	8001c44 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001b90:	4b80      	ldr	r3, [pc, #512]	; (8001d94 <HAL_ADC_ConfigChannel+0x474>)
 8001b92:	4013      	ands	r3, r2
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	6812      	ldr	r2, [r2, #0]
 8001b98:	0691      	lsls	r1, r2, #26
 8001b9a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ba8:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001baa:	e04b      	b.n	8001c44 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bb2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	069b      	lsls	r3, r3, #26
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d107      	bne.n	8001bd0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001bce:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001bd6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	069b      	lsls	r3, r3, #26
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d107      	bne.n	8001bf4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001bf2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001bfa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	069b      	lsls	r3, r3, #26
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d107      	bne.n	8001c18 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001c16:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	069b      	lsls	r3, r3, #26
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d10a      	bne.n	8001c42 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001c3a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001c3c:	e001      	b.n	8001c42 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001c3e:	bf00      	nop
 8001c40:	e000      	b.n	8001c44 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001c42:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f003 0303 	and.w	r3, r3, #3
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d108      	bne.n	8001c64 <HAL_ADC_ConfigChannel+0x344>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d101      	bne.n	8001c64 <HAL_ADC_ConfigChannel+0x344>
 8001c60:	2301      	movs	r3, #1
 8001c62:	e000      	b.n	8001c66 <HAL_ADC_ConfigChannel+0x346>
 8001c64:	2300      	movs	r3, #0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f040 8130 	bne.w	8001ecc <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d00f      	beq.n	8001c94 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2201      	movs	r2, #1
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43da      	mvns	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	400a      	ands	r2, r1
 8001c8e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001c92:	e049      	b.n	8001d28 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	409a      	lsls	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2b09      	cmp	r3, #9
 8001cb4:	d91c      	bls.n	8001cf0 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	6999      	ldr	r1, [r3, #24]
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	4413      	add	r3, r2
 8001cc6:	3b1b      	subs	r3, #27
 8001cc8:	2207      	movs	r2, #7
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	4019      	ands	r1, r3
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	6898      	ldr	r0, [r3, #8]
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	4413      	add	r3, r2
 8001ce0:	3b1b      	subs	r3, #27
 8001ce2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	430a      	orrs	r2, r1
 8001cec:	619a      	str	r2, [r3, #24]
 8001cee:	e01b      	b.n	8001d28 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6959      	ldr	r1, [r3, #20]
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	1c5a      	adds	r2, r3, #1
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	4413      	add	r3, r2
 8001d02:	2207      	movs	r2, #7
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	4019      	ands	r1, r3
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	6898      	ldr	r0, [r3, #8]
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	1c5a      	adds	r2, r3, #1
 8001d16:	4613      	mov	r3, r2
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	4413      	add	r3, r2
 8001d1c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	430a      	orrs	r2, r1
 8001d26:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d30:	d004      	beq.n	8001d3c <HAL_ADC_ConfigChannel+0x41c>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a18      	ldr	r2, [pc, #96]	; (8001d98 <HAL_ADC_ConfigChannel+0x478>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d101      	bne.n	8001d40 <HAL_ADC_ConfigChannel+0x420>
 8001d3c:	4b17      	ldr	r3, [pc, #92]	; (8001d9c <HAL_ADC_ConfigChannel+0x47c>)
 8001d3e:	e000      	b.n	8001d42 <HAL_ADC_ConfigChannel+0x422>
 8001d40:	4b17      	ldr	r3, [pc, #92]	; (8001da0 <HAL_ADC_ConfigChannel+0x480>)
 8001d42:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2b10      	cmp	r3, #16
 8001d4a:	d105      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001d4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d015      	beq.n	8001d84 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001d5c:	2b11      	cmp	r3, #17
 8001d5e:	d105      	bne.n	8001d6c <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001d60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d00b      	beq.n	8001d84 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001d70:	2b12      	cmp	r3, #18
 8001d72:	f040 80ab 	bne.w	8001ecc <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001d76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f040 80a4 	bne.w	8001ecc <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d8c:	d10a      	bne.n	8001da4 <HAL_ADC_ConfigChannel+0x484>
 8001d8e:	4b02      	ldr	r3, [pc, #8]	; (8001d98 <HAL_ADC_ConfigChannel+0x478>)
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	e022      	b.n	8001dda <HAL_ADC_ConfigChannel+0x4ba>
 8001d94:	83fff000 	.word	0x83fff000
 8001d98:	50000100 	.word	0x50000100
 8001d9c:	50000300 	.word	0x50000300
 8001da0:	50000700 	.word	0x50000700
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a4e      	ldr	r2, [pc, #312]	; (8001ee4 <HAL_ADC_ConfigChannel+0x5c4>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d103      	bne.n	8001db6 <HAL_ADC_ConfigChannel+0x496>
 8001dae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	e011      	b.n	8001dda <HAL_ADC_ConfigChannel+0x4ba>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a4b      	ldr	r2, [pc, #300]	; (8001ee8 <HAL_ADC_ConfigChannel+0x5c8>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d102      	bne.n	8001dc6 <HAL_ADC_ConfigChannel+0x4a6>
 8001dc0:	4b4a      	ldr	r3, [pc, #296]	; (8001eec <HAL_ADC_ConfigChannel+0x5cc>)
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	e009      	b.n	8001dda <HAL_ADC_ConfigChannel+0x4ba>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a48      	ldr	r2, [pc, #288]	; (8001eec <HAL_ADC_ConfigChannel+0x5cc>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d102      	bne.n	8001dd6 <HAL_ADC_ConfigChannel+0x4b6>
 8001dd0:	4b45      	ldr	r3, [pc, #276]	; (8001ee8 <HAL_ADC_ConfigChannel+0x5c8>)
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	e001      	b.n	8001dda <HAL_ADC_ConfigChannel+0x4ba>
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f003 0303 	and.w	r3, r3, #3
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d108      	bne.n	8001dfa <HAL_ADC_ConfigChannel+0x4da>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d101      	bne.n	8001dfa <HAL_ADC_ConfigChannel+0x4da>
 8001df6:	2301      	movs	r3, #1
 8001df8:	e000      	b.n	8001dfc <HAL_ADC_ConfigChannel+0x4dc>
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d150      	bne.n	8001ea2 <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001e00:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d010      	beq.n	8001e28 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 0303 	and.w	r3, r3, #3
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d107      	bne.n	8001e22 <HAL_ADC_ConfigChannel+0x502>
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d101      	bne.n	8001e22 <HAL_ADC_ConfigChannel+0x502>
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e000      	b.n	8001e24 <HAL_ADC_ConfigChannel+0x504>
 8001e22:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d13c      	bne.n	8001ea2 <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2b10      	cmp	r3, #16
 8001e2e:	d11d      	bne.n	8001e6c <HAL_ADC_ConfigChannel+0x54c>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e38:	d118      	bne.n	8001e6c <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001e3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001e42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e44:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e46:	4b2a      	ldr	r3, [pc, #168]	; (8001ef0 <HAL_ADC_ConfigChannel+0x5d0>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a2a      	ldr	r2, [pc, #168]	; (8001ef4 <HAL_ADC_ConfigChannel+0x5d4>)
 8001e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e50:	0c9a      	lsrs	r2, r3, #18
 8001e52:	4613      	mov	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e5c:	e002      	b.n	8001e64 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	3b01      	subs	r3, #1
 8001e62:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1f9      	bne.n	8001e5e <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001e6a:	e02e      	b.n	8001eca <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2b11      	cmp	r3, #17
 8001e72:	d10b      	bne.n	8001e8c <HAL_ADC_ConfigChannel+0x56c>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e7c:	d106      	bne.n	8001e8c <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001e7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001e86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e88:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001e8a:	e01e      	b.n	8001eca <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2b12      	cmp	r3, #18
 8001e92:	d11a      	bne.n	8001eca <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001e94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001e9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e9e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ea0:	e013      	b.n	8001eca <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	f043 0220 	orr.w	r2, r3, #32
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001eb4:	e00a      	b.n	8001ecc <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	f043 0220 	orr.w	r2, r3, #32
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001ec8:	e000      	b.n	8001ecc <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001eca:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001ed4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	376c      	adds	r7, #108	; 0x6c
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	50000100 	.word	0x50000100
 8001ee8:	50000400 	.word	0x50000400
 8001eec:	50000500 	.word	0x50000500
 8001ef0:	20000000 	.word	0x20000000
 8001ef4:	431bde83 	.word	0x431bde83

08001ef8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b099      	sub	sp, #100	; 0x64
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f02:	2300      	movs	r3, #0
 8001f04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f10:	d102      	bne.n	8001f18 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001f12:	4b6d      	ldr	r3, [pc, #436]	; (80020c8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001f14:	60bb      	str	r3, [r7, #8]
 8001f16:	e01a      	b.n	8001f4e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a6a      	ldr	r2, [pc, #424]	; (80020c8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d103      	bne.n	8001f2a <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001f22:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f26:	60bb      	str	r3, [r7, #8]
 8001f28:	e011      	b.n	8001f4e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a67      	ldr	r2, [pc, #412]	; (80020cc <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d102      	bne.n	8001f3a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001f34:	4b66      	ldr	r3, [pc, #408]	; (80020d0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001f36:	60bb      	str	r3, [r7, #8]
 8001f38:	e009      	b.n	8001f4e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a64      	ldr	r2, [pc, #400]	; (80020d0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d102      	bne.n	8001f4a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001f44:	4b61      	ldr	r3, [pc, #388]	; (80020cc <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001f46:	60bb      	str	r3, [r7, #8]
 8001f48:	e001      	b.n	8001f4e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d101      	bne.n	8001f58 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e0b0      	b.n	80020ba <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d101      	bne.n	8001f66 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001f62:	2302      	movs	r3, #2
 8001f64:	e0a9      	b.n	80020ba <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f003 0304 	and.w	r3, r3, #4
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	f040 808d 	bne.w	8002098 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 0304 	and.w	r3, r3, #4
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f040 8086 	bne.w	8002098 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f94:	d004      	beq.n	8001fa0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a4b      	ldr	r2, [pc, #300]	; (80020c8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d101      	bne.n	8001fa4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001fa0:	4b4c      	ldr	r3, [pc, #304]	; (80020d4 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001fa2:	e000      	b.n	8001fa6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001fa4:	4b4c      	ldr	r3, [pc, #304]	; (80020d8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8001fa6:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d040      	beq.n	8002032 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001fb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	6859      	ldr	r1, [r3, #4]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001fc2:	035b      	lsls	r3, r3, #13
 8001fc4:	430b      	orrs	r3, r1
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fca:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 0303 	and.w	r3, r3, #3
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d108      	bne.n	8001fec <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d101      	bne.n	8001fec <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e000      	b.n	8001fee <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001fec:	2300      	movs	r3, #0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d15c      	bne.n	80020ac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 0303 	and.w	r3, r3, #3
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d107      	bne.n	800200e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b01      	cmp	r3, #1
 8002008:	d101      	bne.n	800200e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800200a:	2301      	movs	r3, #1
 800200c:	e000      	b.n	8002010 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800200e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002010:	2b00      	cmp	r3, #0
 8002012:	d14b      	bne.n	80020ac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002014:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800201c:	f023 030f 	bic.w	r3, r3, #15
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	6811      	ldr	r1, [r2, #0]
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	6892      	ldr	r2, [r2, #8]
 8002028:	430a      	orrs	r2, r1
 800202a:	431a      	orrs	r2, r3
 800202c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800202e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002030:	e03c      	b.n	80020ac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002032:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800203a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800203c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f003 0303 	and.w	r3, r3, #3
 8002048:	2b01      	cmp	r3, #1
 800204a:	d108      	bne.n	800205e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b01      	cmp	r3, #1
 8002058:	d101      	bne.n	800205e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800205a:	2301      	movs	r3, #1
 800205c:	e000      	b.n	8002060 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800205e:	2300      	movs	r3, #0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d123      	bne.n	80020ac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f003 0303 	and.w	r3, r3, #3
 800206c:	2b01      	cmp	r3, #1
 800206e:	d107      	bne.n	8002080 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	2b01      	cmp	r3, #1
 800207a:	d101      	bne.n	8002080 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800207c:	2301      	movs	r3, #1
 800207e:	e000      	b.n	8002082 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002080:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002082:	2b00      	cmp	r3, #0
 8002084:	d112      	bne.n	80020ac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002086:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800208e:	f023 030f 	bic.w	r3, r3, #15
 8002092:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002094:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002096:	e009      	b.n	80020ac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209c:	f043 0220 	orr.w	r2, r3, #32
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80020aa:	e000      	b.n	80020ae <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80020ac:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80020b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80020ba:	4618      	mov	r0, r3
 80020bc:	3764      	adds	r7, #100	; 0x64
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	50000100 	.word	0x50000100
 80020cc:	50000400 	.word	0x50000400
 80020d0:	50000500 	.word	0x50000500
 80020d4:	50000300 	.word	0x50000300
 80020d8:	50000700 	.word	0x50000700

080020dc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020e4:	2300      	movs	r3, #0
 80020e6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d108      	bne.n	8002108 <ADC_Disable+0x2c>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	2b01      	cmp	r3, #1
 8002102:	d101      	bne.n	8002108 <ADC_Disable+0x2c>
 8002104:	2301      	movs	r3, #1
 8002106:	e000      	b.n	800210a <ADC_Disable+0x2e>
 8002108:	2300      	movs	r3, #0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d047      	beq.n	800219e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f003 030d 	and.w	r3, r3, #13
 8002118:	2b01      	cmp	r3, #1
 800211a:	d10f      	bne.n	800213c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689a      	ldr	r2, [r3, #8]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f042 0202 	orr.w	r2, r2, #2
 800212a:	609a      	str	r2, [r3, #8]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2203      	movs	r2, #3
 8002132:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002134:	f7ff fa08 	bl	8001548 <HAL_GetTick>
 8002138:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800213a:	e029      	b.n	8002190 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002140:	f043 0210 	orr.w	r2, r3, #16
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214c:	f043 0201 	orr.w	r2, r3, #1
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e023      	b.n	80021a0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002158:	f7ff f9f6 	bl	8001548 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d914      	bls.n	8002190 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	2b01      	cmp	r3, #1
 8002172:	d10d      	bne.n	8002190 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002178:	f043 0210 	orr.w	r2, r3, #16
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002184:	f043 0201 	orr.w	r2, r3, #1
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e007      	b.n	80021a0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	2b01      	cmp	r3, #1
 800219c:	d0dc      	beq.n	8002158 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021b8:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <__NVIC_SetPriorityGrouping+0x44>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021be:	68ba      	ldr	r2, [r7, #8]
 80021c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021c4:	4013      	ands	r3, r2
 80021c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021da:	4a04      	ldr	r2, [pc, #16]	; (80021ec <__NVIC_SetPriorityGrouping+0x44>)
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	60d3      	str	r3, [r2, #12]
}
 80021e0:	bf00      	nop
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	e000ed00 	.word	0xe000ed00

080021f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021f4:	4b04      	ldr	r3, [pc, #16]	; (8002208 <__NVIC_GetPriorityGrouping+0x18>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	0a1b      	lsrs	r3, r3, #8
 80021fa:	f003 0307 	and.w	r3, r3, #7
}
 80021fe:	4618      	mov	r0, r3
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	e000ed00 	.word	0xe000ed00

0800220c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	6039      	str	r1, [r7, #0]
 8002216:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221c:	2b00      	cmp	r3, #0
 800221e:	db0a      	blt.n	8002236 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	b2da      	uxtb	r2, r3
 8002224:	490c      	ldr	r1, [pc, #48]	; (8002258 <__NVIC_SetPriority+0x4c>)
 8002226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222a:	0112      	lsls	r2, r2, #4
 800222c:	b2d2      	uxtb	r2, r2
 800222e:	440b      	add	r3, r1
 8002230:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002234:	e00a      	b.n	800224c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	b2da      	uxtb	r2, r3
 800223a:	4908      	ldr	r1, [pc, #32]	; (800225c <__NVIC_SetPriority+0x50>)
 800223c:	79fb      	ldrb	r3, [r7, #7]
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	3b04      	subs	r3, #4
 8002244:	0112      	lsls	r2, r2, #4
 8002246:	b2d2      	uxtb	r2, r2
 8002248:	440b      	add	r3, r1
 800224a:	761a      	strb	r2, [r3, #24]
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	e000e100 	.word	0xe000e100
 800225c:	e000ed00 	.word	0xe000ed00

08002260 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002260:	b480      	push	{r7}
 8002262:	b089      	sub	sp, #36	; 0x24
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	f1c3 0307 	rsb	r3, r3, #7
 800227a:	2b04      	cmp	r3, #4
 800227c:	bf28      	it	cs
 800227e:	2304      	movcs	r3, #4
 8002280:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	3304      	adds	r3, #4
 8002286:	2b06      	cmp	r3, #6
 8002288:	d902      	bls.n	8002290 <NVIC_EncodePriority+0x30>
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	3b03      	subs	r3, #3
 800228e:	e000      	b.n	8002292 <NVIC_EncodePriority+0x32>
 8002290:	2300      	movs	r3, #0
 8002292:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002294:	f04f 32ff 	mov.w	r2, #4294967295
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	43da      	mvns	r2, r3
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	401a      	ands	r2, r3
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022a8:	f04f 31ff 	mov.w	r1, #4294967295
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	fa01 f303 	lsl.w	r3, r1, r3
 80022b2:	43d9      	mvns	r1, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b8:	4313      	orrs	r3, r2
         );
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3724      	adds	r7, #36	; 0x24
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
	...

080022c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	3b01      	subs	r3, #1
 80022d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022d8:	d301      	bcc.n	80022de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022da:	2301      	movs	r3, #1
 80022dc:	e00f      	b.n	80022fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022de:	4a0a      	ldr	r2, [pc, #40]	; (8002308 <SysTick_Config+0x40>)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3b01      	subs	r3, #1
 80022e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022e6:	210f      	movs	r1, #15
 80022e8:	f04f 30ff 	mov.w	r0, #4294967295
 80022ec:	f7ff ff8e 	bl	800220c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022f0:	4b05      	ldr	r3, [pc, #20]	; (8002308 <SysTick_Config+0x40>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022f6:	4b04      	ldr	r3, [pc, #16]	; (8002308 <SysTick_Config+0x40>)
 80022f8:	2207      	movs	r2, #7
 80022fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	e000e010 	.word	0xe000e010

0800230c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f7ff ff47 	bl	80021a8 <__NVIC_SetPriorityGrouping>
}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b086      	sub	sp, #24
 8002326:	af00      	add	r7, sp, #0
 8002328:	4603      	mov	r3, r0
 800232a:	60b9      	str	r1, [r7, #8]
 800232c:	607a      	str	r2, [r7, #4]
 800232e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002330:	2300      	movs	r3, #0
 8002332:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002334:	f7ff ff5c 	bl	80021f0 <__NVIC_GetPriorityGrouping>
 8002338:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	68b9      	ldr	r1, [r7, #8]
 800233e:	6978      	ldr	r0, [r7, #20]
 8002340:	f7ff ff8e 	bl	8002260 <NVIC_EncodePriority>
 8002344:	4602      	mov	r2, r0
 8002346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800234a:	4611      	mov	r1, r2
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff ff5d 	bl	800220c <__NVIC_SetPriority>
}
 8002352:	bf00      	nop
 8002354:	3718      	adds	r7, #24
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b082      	sub	sp, #8
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f7ff ffb0 	bl	80022c8 <SysTick_Config>
 8002368:	4603      	mov	r3, r0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
	...

08002374 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002374:	b480      	push	{r7}
 8002376:	b087      	sub	sp, #28
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800237e:	2300      	movs	r3, #0
 8002380:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002382:	e154      	b.n	800262e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	2101      	movs	r1, #1
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	fa01 f303 	lsl.w	r3, r1, r3
 8002390:	4013      	ands	r3, r2
 8002392:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2b00      	cmp	r3, #0
 8002398:	f000 8146 	beq.w	8002628 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f003 0303 	and.w	r3, r3, #3
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d005      	beq.n	80023b4 <HAL_GPIO_Init+0x40>
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f003 0303 	and.w	r3, r3, #3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d130      	bne.n	8002416 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	2203      	movs	r2, #3
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	43db      	mvns	r3, r3
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	4013      	ands	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	68da      	ldr	r2, [r3, #12]
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	4313      	orrs	r3, r2
 80023dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023ea:	2201      	movs	r2, #1
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	fa02 f303 	lsl.w	r3, r2, r3
 80023f2:	43db      	mvns	r3, r3
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	4013      	ands	r3, r2
 80023f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	091b      	lsrs	r3, r3, #4
 8002400:	f003 0201 	and.w	r2, r3, #1
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	4313      	orrs	r3, r2
 800240e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f003 0303 	and.w	r3, r3, #3
 800241e:	2b03      	cmp	r3, #3
 8002420:	d017      	beq.n	8002452 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	2203      	movs	r2, #3
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	43db      	mvns	r3, r3
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	4013      	ands	r3, r2
 8002438:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	689a      	ldr	r2, [r3, #8]
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	4313      	orrs	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f003 0303 	and.w	r3, r3, #3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d123      	bne.n	80024a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	08da      	lsrs	r2, r3, #3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	3208      	adds	r2, #8
 8002466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800246a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	f003 0307 	and.w	r3, r3, #7
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	220f      	movs	r2, #15
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	43db      	mvns	r3, r3
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	4013      	ands	r3, r2
 8002480:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	691a      	ldr	r2, [r3, #16]
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	4313      	orrs	r3, r2
 8002496:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	08da      	lsrs	r2, r3, #3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3208      	adds	r2, #8
 80024a0:	6939      	ldr	r1, [r7, #16]
 80024a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	2203      	movs	r2, #3
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43db      	mvns	r3, r3
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	4013      	ands	r3, r2
 80024bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f003 0203 	and.w	r2, r3, #3
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f000 80a0 	beq.w	8002628 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024e8:	4b58      	ldr	r3, [pc, #352]	; (800264c <HAL_GPIO_Init+0x2d8>)
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	4a57      	ldr	r2, [pc, #348]	; (800264c <HAL_GPIO_Init+0x2d8>)
 80024ee:	f043 0301 	orr.w	r3, r3, #1
 80024f2:	6193      	str	r3, [r2, #24]
 80024f4:	4b55      	ldr	r3, [pc, #340]	; (800264c <HAL_GPIO_Init+0x2d8>)
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	60bb      	str	r3, [r7, #8]
 80024fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002500:	4a53      	ldr	r2, [pc, #332]	; (8002650 <HAL_GPIO_Init+0x2dc>)
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	089b      	lsrs	r3, r3, #2
 8002506:	3302      	adds	r3, #2
 8002508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800250c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	f003 0303 	and.w	r3, r3, #3
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	220f      	movs	r2, #15
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	43db      	mvns	r3, r3
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	4013      	ands	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800252a:	d019      	beq.n	8002560 <HAL_GPIO_Init+0x1ec>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a49      	ldr	r2, [pc, #292]	; (8002654 <HAL_GPIO_Init+0x2e0>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d013      	beq.n	800255c <HAL_GPIO_Init+0x1e8>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a48      	ldr	r2, [pc, #288]	; (8002658 <HAL_GPIO_Init+0x2e4>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d00d      	beq.n	8002558 <HAL_GPIO_Init+0x1e4>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a47      	ldr	r2, [pc, #284]	; (800265c <HAL_GPIO_Init+0x2e8>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d007      	beq.n	8002554 <HAL_GPIO_Init+0x1e0>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a46      	ldr	r2, [pc, #280]	; (8002660 <HAL_GPIO_Init+0x2ec>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d101      	bne.n	8002550 <HAL_GPIO_Init+0x1dc>
 800254c:	2304      	movs	r3, #4
 800254e:	e008      	b.n	8002562 <HAL_GPIO_Init+0x1ee>
 8002550:	2305      	movs	r3, #5
 8002552:	e006      	b.n	8002562 <HAL_GPIO_Init+0x1ee>
 8002554:	2303      	movs	r3, #3
 8002556:	e004      	b.n	8002562 <HAL_GPIO_Init+0x1ee>
 8002558:	2302      	movs	r3, #2
 800255a:	e002      	b.n	8002562 <HAL_GPIO_Init+0x1ee>
 800255c:	2301      	movs	r3, #1
 800255e:	e000      	b.n	8002562 <HAL_GPIO_Init+0x1ee>
 8002560:	2300      	movs	r3, #0
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	f002 0203 	and.w	r2, r2, #3
 8002568:	0092      	lsls	r2, r2, #2
 800256a:	4093      	lsls	r3, r2
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	4313      	orrs	r3, r2
 8002570:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002572:	4937      	ldr	r1, [pc, #220]	; (8002650 <HAL_GPIO_Init+0x2dc>)
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	089b      	lsrs	r3, r3, #2
 8002578:	3302      	adds	r3, #2
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002580:	4b38      	ldr	r3, [pc, #224]	; (8002664 <HAL_GPIO_Init+0x2f0>)
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	43db      	mvns	r3, r3
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	4013      	ands	r3, r2
 800258e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d003      	beq.n	80025a4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800259c:	693a      	ldr	r2, [r7, #16]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80025a4:	4a2f      	ldr	r2, [pc, #188]	; (8002664 <HAL_GPIO_Init+0x2f0>)
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025aa:	4b2e      	ldr	r3, [pc, #184]	; (8002664 <HAL_GPIO_Init+0x2f0>)
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	43db      	mvns	r3, r3
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	4013      	ands	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80025ce:	4a25      	ldr	r2, [pc, #148]	; (8002664 <HAL_GPIO_Init+0x2f0>)
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025d4:	4b23      	ldr	r3, [pc, #140]	; (8002664 <HAL_GPIO_Init+0x2f0>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	43db      	mvns	r3, r3
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	4013      	ands	r3, r2
 80025e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d003      	beq.n	80025f8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80025f8:	4a1a      	ldr	r2, [pc, #104]	; (8002664 <HAL_GPIO_Init+0x2f0>)
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025fe:	4b19      	ldr	r3, [pc, #100]	; (8002664 <HAL_GPIO_Init+0x2f0>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	43db      	mvns	r3, r3
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	4013      	ands	r3, r2
 800260c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	4313      	orrs	r3, r2
 8002620:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002622:	4a10      	ldr	r2, [pc, #64]	; (8002664 <HAL_GPIO_Init+0x2f0>)
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	3301      	adds	r3, #1
 800262c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	fa22 f303 	lsr.w	r3, r2, r3
 8002638:	2b00      	cmp	r3, #0
 800263a:	f47f aea3 	bne.w	8002384 <HAL_GPIO_Init+0x10>
  }
}
 800263e:	bf00      	nop
 8002640:	bf00      	nop
 8002642:	371c      	adds	r7, #28
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	40021000 	.word	0x40021000
 8002650:	40010000 	.word	0x40010000
 8002654:	48000400 	.word	0x48000400
 8002658:	48000800 	.word	0x48000800
 800265c:	48000c00 	.word	0x48000c00
 8002660:	48001000 	.word	0x48001000
 8002664:	40010400 	.word	0x40010400

08002668 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	460b      	mov	r3, r1
 8002672:	807b      	strh	r3, [r7, #2]
 8002674:	4613      	mov	r3, r2
 8002676:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002678:	787b      	ldrb	r3, [r7, #1]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d003      	beq.n	8002686 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800267e:	887a      	ldrh	r2, [r7, #2]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002684:	e002      	b.n	800268c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002686:	887a      	ldrh	r2, [r7, #2]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e081      	b.n	80027ae <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d106      	bne.n	80026c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f7fe fc42 	bl	8000f48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2224      	movs	r2, #36	; 0x24
 80026c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f022 0201 	bic.w	r2, r2, #1
 80026da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d107      	bne.n	8002712 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	689a      	ldr	r2, [r3, #8]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800270e:	609a      	str	r2, [r3, #8]
 8002710:	e006      	b.n	8002720 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689a      	ldr	r2, [r3, #8]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800271e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	2b02      	cmp	r3, #2
 8002726:	d104      	bne.n	8002732 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002730:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002740:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002744:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68da      	ldr	r2, [r3, #12]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002754:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691a      	ldr	r2, [r3, #16]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	430a      	orrs	r2, r1
 800276e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	69d9      	ldr	r1, [r3, #28]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a1a      	ldr	r2, [r3, #32]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	430a      	orrs	r2, r1
 800277e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f042 0201 	orr.w	r2, r2, #1
 800278e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2220      	movs	r2, #32
 800279a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80027b6:	b480      	push	{r7}
 80027b8:	b083      	sub	sp, #12
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
 80027be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b20      	cmp	r3, #32
 80027ca:	d138      	bne.n	800283e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d101      	bne.n	80027da <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80027d6:	2302      	movs	r3, #2
 80027d8:	e032      	b.n	8002840 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2224      	movs	r2, #36	; 0x24
 80027e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 0201 	bic.w	r2, r2, #1
 80027f8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002808:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6819      	ldr	r1, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f042 0201 	orr.w	r2, r2, #1
 8002828:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2220      	movs	r2, #32
 800282e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800283a:	2300      	movs	r3, #0
 800283c:	e000      	b.n	8002840 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800283e:	2302      	movs	r3, #2
  }
}
 8002840:	4618      	mov	r0, r3
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b20      	cmp	r3, #32
 8002860:	d139      	bne.n	80028d6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002868:	2b01      	cmp	r3, #1
 800286a:	d101      	bne.n	8002870 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800286c:	2302      	movs	r3, #2
 800286e:	e033      	b.n	80028d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2224      	movs	r2, #36	; 0x24
 800287c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 0201 	bic.w	r2, r2, #1
 800288e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800289e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	021b      	lsls	r3, r3, #8
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f042 0201 	orr.w	r2, r2, #1
 80028c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2220      	movs	r2, #32
 80028c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028d2:	2300      	movs	r3, #0
 80028d4:	e000      	b.n	80028d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80028d6:	2302      	movs	r3, #2
  }
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3714      	adds	r7, #20
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028f4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d102      	bne.n	800290a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	f001 b823 	b.w	8003950 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800290a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800290e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	2b00      	cmp	r3, #0
 800291c:	f000 817d 	beq.w	8002c1a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002920:	4bbc      	ldr	r3, [pc, #752]	; (8002c14 <HAL_RCC_OscConfig+0x330>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f003 030c 	and.w	r3, r3, #12
 8002928:	2b04      	cmp	r3, #4
 800292a:	d00c      	beq.n	8002946 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800292c:	4bb9      	ldr	r3, [pc, #740]	; (8002c14 <HAL_RCC_OscConfig+0x330>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f003 030c 	and.w	r3, r3, #12
 8002934:	2b08      	cmp	r3, #8
 8002936:	d15c      	bne.n	80029f2 <HAL_RCC_OscConfig+0x10e>
 8002938:	4bb6      	ldr	r3, [pc, #728]	; (8002c14 <HAL_RCC_OscConfig+0x330>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002944:	d155      	bne.n	80029f2 <HAL_RCC_OscConfig+0x10e>
 8002946:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800294a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002952:	fa93 f3a3 	rbit	r3, r3
 8002956:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 800295a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800295e:	fab3 f383 	clz	r3, r3
 8002962:	b2db      	uxtb	r3, r3
 8002964:	095b      	lsrs	r3, r3, #5
 8002966:	b2db      	uxtb	r3, r3
 8002968:	f043 0301 	orr.w	r3, r3, #1
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b01      	cmp	r3, #1
 8002970:	d102      	bne.n	8002978 <HAL_RCC_OscConfig+0x94>
 8002972:	4ba8      	ldr	r3, [pc, #672]	; (8002c14 <HAL_RCC_OscConfig+0x330>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	e015      	b.n	80029a4 <HAL_RCC_OscConfig+0xc0>
 8002978:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800297c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002980:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002984:	fa93 f3a3 	rbit	r3, r3
 8002988:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800298c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002990:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002994:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002998:	fa93 f3a3 	rbit	r3, r3
 800299c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80029a0:	4b9c      	ldr	r3, [pc, #624]	; (8002c14 <HAL_RCC_OscConfig+0x330>)
 80029a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029a8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80029ac:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80029b0:	fa92 f2a2 	rbit	r2, r2
 80029b4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80029b8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80029bc:	fab2 f282 	clz	r2, r2
 80029c0:	b2d2      	uxtb	r2, r2
 80029c2:	f042 0220 	orr.w	r2, r2, #32
 80029c6:	b2d2      	uxtb	r2, r2
 80029c8:	f002 021f 	and.w	r2, r2, #31
 80029cc:	2101      	movs	r1, #1
 80029ce:	fa01 f202 	lsl.w	r2, r1, r2
 80029d2:	4013      	ands	r3, r2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 811f 	beq.w	8002c18 <HAL_RCC_OscConfig+0x334>
 80029da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f040 8116 	bne.w	8002c18 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	f000 bfaf 	b.w	8003950 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a02:	d106      	bne.n	8002a12 <HAL_RCC_OscConfig+0x12e>
 8002a04:	4b83      	ldr	r3, [pc, #524]	; (8002c14 <HAL_RCC_OscConfig+0x330>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a82      	ldr	r2, [pc, #520]	; (8002c14 <HAL_RCC_OscConfig+0x330>)
 8002a0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a0e:	6013      	str	r3, [r2, #0]
 8002a10:	e036      	b.n	8002a80 <HAL_RCC_OscConfig+0x19c>
 8002a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d10c      	bne.n	8002a3c <HAL_RCC_OscConfig+0x158>
 8002a22:	4b7c      	ldr	r3, [pc, #496]	; (8002c14 <HAL_RCC_OscConfig+0x330>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a7b      	ldr	r2, [pc, #492]	; (8002c14 <HAL_RCC_OscConfig+0x330>)
 8002a28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a2c:	6013      	str	r3, [r2, #0]
 8002a2e:	4b79      	ldr	r3, [pc, #484]	; (8002c14 <HAL_RCC_OscConfig+0x330>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a78      	ldr	r2, [pc, #480]	; (8002c14 <HAL_RCC_OscConfig+0x330>)
 8002a34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a38:	6013      	str	r3, [r2, #0]
 8002a3a:	e021      	b.n	8002a80 <HAL_RCC_OscConfig+0x19c>
 8002a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a40:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a4c:	d10c      	bne.n	8002a68 <HAL_RCC_OscConfig+0x184>
 8002a4e:	4b71      	ldr	r3, [pc, #452]	; (8002c14 <HAL_RCC_OscConfig+0x330>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a70      	ldr	r2, [pc, #448]	; (8002c14 <HAL_RCC_OscConfig+0x330>)
 8002a54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a58:	6013      	str	r3, [r2, #0]
 8002a5a:	4b6e      	ldr	r3, [pc, #440]	; (8002c14 <HAL_RCC_OscConfig+0x330>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a6d      	ldr	r2, [pc, #436]	; (8002c14 <HAL_RCC_OscConfig+0x330>)
 8002a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a64:	6013      	str	r3, [r2, #0]
 8002a66:	e00b      	b.n	8002a80 <HAL_RCC_OscConfig+0x19c>
 8002a68:	4b6a      	ldr	r3, [pc, #424]	; (8002c14 <HAL_RCC_OscConfig+0x330>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a69      	ldr	r2, [pc, #420]	; (8002c14 <HAL_RCC_OscConfig+0x330>)
 8002a6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a72:	6013      	str	r3, [r2, #0]
 8002a74:	4b67      	ldr	r3, [pc, #412]	; (8002c14 <HAL_RCC_OscConfig+0x330>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a66      	ldr	r2, [pc, #408]	; (8002c14 <HAL_RCC_OscConfig+0x330>)
 8002a7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a7e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a80:	4b64      	ldr	r3, [pc, #400]	; (8002c14 <HAL_RCC_OscConfig+0x330>)
 8002a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a84:	f023 020f 	bic.w	r2, r3, #15
 8002a88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a8c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	495f      	ldr	r1, [pc, #380]	; (8002c14 <HAL_RCC_OscConfig+0x330>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d059      	beq.n	8002b5e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aaa:	f7fe fd4d 	bl	8001548 <HAL_GetTick>
 8002aae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab2:	e00a      	b.n	8002aca <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ab4:	f7fe fd48 	bl	8001548 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b64      	cmp	r3, #100	; 0x64
 8002ac2:	d902      	bls.n	8002aca <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	f000 bf43 	b.w	8003950 <HAL_RCC_OscConfig+0x106c>
 8002aca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ace:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002ad6:	fa93 f3a3 	rbit	r3, r3
 8002ada:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002ade:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae2:	fab3 f383 	clz	r3, r3
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	095b      	lsrs	r3, r3, #5
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	f043 0301 	orr.w	r3, r3, #1
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d102      	bne.n	8002afc <HAL_RCC_OscConfig+0x218>
 8002af6:	4b47      	ldr	r3, [pc, #284]	; (8002c14 <HAL_RCC_OscConfig+0x330>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	e015      	b.n	8002b28 <HAL_RCC_OscConfig+0x244>
 8002afc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b00:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b04:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002b08:	fa93 f3a3 	rbit	r3, r3
 8002b0c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002b10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b14:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002b18:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002b1c:	fa93 f3a3 	rbit	r3, r3
 8002b20:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002b24:	4b3b      	ldr	r3, [pc, #236]	; (8002c14 <HAL_RCC_OscConfig+0x330>)
 8002b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b2c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002b30:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002b34:	fa92 f2a2 	rbit	r2, r2
 8002b38:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002b3c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002b40:	fab2 f282 	clz	r2, r2
 8002b44:	b2d2      	uxtb	r2, r2
 8002b46:	f042 0220 	orr.w	r2, r2, #32
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	f002 021f 	and.w	r2, r2, #31
 8002b50:	2101      	movs	r1, #1
 8002b52:	fa01 f202 	lsl.w	r2, r1, r2
 8002b56:	4013      	ands	r3, r2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d0ab      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x1d0>
 8002b5c:	e05d      	b.n	8002c1a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5e:	f7fe fcf3 	bl	8001548 <HAL_GetTick>
 8002b62:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b66:	e00a      	b.n	8002b7e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b68:	f7fe fcee 	bl	8001548 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b64      	cmp	r3, #100	; 0x64
 8002b76:	d902      	bls.n	8002b7e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	f000 bee9 	b.w	8003950 <HAL_RCC_OscConfig+0x106c>
 8002b7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b82:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b86:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002b8a:	fa93 f3a3 	rbit	r3, r3
 8002b8e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002b92:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b96:	fab3 f383 	clz	r3, r3
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	095b      	lsrs	r3, r3, #5
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	f043 0301 	orr.w	r3, r3, #1
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d102      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x2cc>
 8002baa:	4b1a      	ldr	r3, [pc, #104]	; (8002c14 <HAL_RCC_OscConfig+0x330>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	e015      	b.n	8002bdc <HAL_RCC_OscConfig+0x2f8>
 8002bb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bb4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002bbc:	fa93 f3a3 	rbit	r3, r3
 8002bc0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002bc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bc8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002bcc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002bd0:	fa93 f3a3 	rbit	r3, r3
 8002bd4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002bd8:	4b0e      	ldr	r3, [pc, #56]	; (8002c14 <HAL_RCC_OscConfig+0x330>)
 8002bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bdc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002be0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002be4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002be8:	fa92 f2a2 	rbit	r2, r2
 8002bec:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002bf0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002bf4:	fab2 f282 	clz	r2, r2
 8002bf8:	b2d2      	uxtb	r2, r2
 8002bfa:	f042 0220 	orr.w	r2, r2, #32
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	f002 021f 	and.w	r2, r2, #31
 8002c04:	2101      	movs	r1, #1
 8002c06:	fa01 f202 	lsl.w	r2, r1, r2
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1ab      	bne.n	8002b68 <HAL_RCC_OscConfig+0x284>
 8002c10:	e003      	b.n	8002c1a <HAL_RCC_OscConfig+0x336>
 8002c12:	bf00      	nop
 8002c14:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 817d 	beq.w	8002f2a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002c30:	4ba6      	ldr	r3, [pc, #664]	; (8002ecc <HAL_RCC_OscConfig+0x5e8>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f003 030c 	and.w	r3, r3, #12
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00b      	beq.n	8002c54 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002c3c:	4ba3      	ldr	r3, [pc, #652]	; (8002ecc <HAL_RCC_OscConfig+0x5e8>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f003 030c 	and.w	r3, r3, #12
 8002c44:	2b08      	cmp	r3, #8
 8002c46:	d172      	bne.n	8002d2e <HAL_RCC_OscConfig+0x44a>
 8002c48:	4ba0      	ldr	r3, [pc, #640]	; (8002ecc <HAL_RCC_OscConfig+0x5e8>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d16c      	bne.n	8002d2e <HAL_RCC_OscConfig+0x44a>
 8002c54:	2302      	movs	r3, #2
 8002c56:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002c5e:	fa93 f3a3 	rbit	r3, r3
 8002c62:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002c66:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c6a:	fab3 f383 	clz	r3, r3
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	095b      	lsrs	r3, r3, #5
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	f043 0301 	orr.w	r3, r3, #1
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d102      	bne.n	8002c84 <HAL_RCC_OscConfig+0x3a0>
 8002c7e:	4b93      	ldr	r3, [pc, #588]	; (8002ecc <HAL_RCC_OscConfig+0x5e8>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	e013      	b.n	8002cac <HAL_RCC_OscConfig+0x3c8>
 8002c84:	2302      	movs	r3, #2
 8002c86:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002c8e:	fa93 f3a3 	rbit	r3, r3
 8002c92:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002c96:	2302      	movs	r3, #2
 8002c98:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002c9c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ca0:	fa93 f3a3 	rbit	r3, r3
 8002ca4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002ca8:	4b88      	ldr	r3, [pc, #544]	; (8002ecc <HAL_RCC_OscConfig+0x5e8>)
 8002caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cac:	2202      	movs	r2, #2
 8002cae:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002cb2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002cb6:	fa92 f2a2 	rbit	r2, r2
 8002cba:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002cbe:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002cc2:	fab2 f282 	clz	r2, r2
 8002cc6:	b2d2      	uxtb	r2, r2
 8002cc8:	f042 0220 	orr.w	r2, r2, #32
 8002ccc:	b2d2      	uxtb	r2, r2
 8002cce:	f002 021f 	and.w	r2, r2, #31
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	fa01 f202 	lsl.w	r2, r1, r2
 8002cd8:	4013      	ands	r3, r2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00a      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x410>
 8002cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d002      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	f000 be2e 	b.w	8003950 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf4:	4b75      	ldr	r3, [pc, #468]	; (8002ecc <HAL_RCC_OscConfig+0x5e8>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	21f8      	movs	r1, #248	; 0xf8
 8002d0a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002d12:	fa91 f1a1 	rbit	r1, r1
 8002d16:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002d1a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002d1e:	fab1 f181 	clz	r1, r1
 8002d22:	b2c9      	uxtb	r1, r1
 8002d24:	408b      	lsls	r3, r1
 8002d26:	4969      	ldr	r1, [pc, #420]	; (8002ecc <HAL_RCC_OscConfig+0x5e8>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d2c:	e0fd      	b.n	8002f2a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f000 8088 	beq.w	8002e50 <HAL_RCC_OscConfig+0x56c>
 8002d40:	2301      	movs	r3, #1
 8002d42:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d46:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002d4a:	fa93 f3a3 	rbit	r3, r3
 8002d4e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002d52:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d56:	fab3 f383 	clz	r3, r3
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d60:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	461a      	mov	r2, r3
 8002d68:	2301      	movs	r3, #1
 8002d6a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6c:	f7fe fbec 	bl	8001548 <HAL_GetTick>
 8002d70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d74:	e00a      	b.n	8002d8c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d76:	f7fe fbe7 	bl	8001548 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d902      	bls.n	8002d8c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	f000 bde2 	b.w	8003950 <HAL_RCC_OscConfig+0x106c>
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d92:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002d96:	fa93 f3a3 	rbit	r3, r3
 8002d9a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002d9e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da2:	fab3 f383 	clz	r3, r3
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	095b      	lsrs	r3, r3, #5
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	f043 0301 	orr.w	r3, r3, #1
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d102      	bne.n	8002dbc <HAL_RCC_OscConfig+0x4d8>
 8002db6:	4b45      	ldr	r3, [pc, #276]	; (8002ecc <HAL_RCC_OscConfig+0x5e8>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	e013      	b.n	8002de4 <HAL_RCC_OscConfig+0x500>
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002dc6:	fa93 f3a3 	rbit	r3, r3
 8002dca:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002dce:	2302      	movs	r3, #2
 8002dd0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002dd4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002dd8:	fa93 f3a3 	rbit	r3, r3
 8002ddc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002de0:	4b3a      	ldr	r3, [pc, #232]	; (8002ecc <HAL_RCC_OscConfig+0x5e8>)
 8002de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de4:	2202      	movs	r2, #2
 8002de6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002dea:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002dee:	fa92 f2a2 	rbit	r2, r2
 8002df2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002df6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002dfa:	fab2 f282 	clz	r2, r2
 8002dfe:	b2d2      	uxtb	r2, r2
 8002e00:	f042 0220 	orr.w	r2, r2, #32
 8002e04:	b2d2      	uxtb	r2, r2
 8002e06:	f002 021f 	and.w	r2, r2, #31
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e10:	4013      	ands	r3, r2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d0af      	beq.n	8002d76 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e16:	4b2d      	ldr	r3, [pc, #180]	; (8002ecc <HAL_RCC_OscConfig+0x5e8>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	21f8      	movs	r1, #248	; 0xf8
 8002e2c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e30:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002e34:	fa91 f1a1 	rbit	r1, r1
 8002e38:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002e3c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002e40:	fab1 f181 	clz	r1, r1
 8002e44:	b2c9      	uxtb	r1, r1
 8002e46:	408b      	lsls	r3, r1
 8002e48:	4920      	ldr	r1, [pc, #128]	; (8002ecc <HAL_RCC_OscConfig+0x5e8>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	600b      	str	r3, [r1, #0]
 8002e4e:	e06c      	b.n	8002f2a <HAL_RCC_OscConfig+0x646>
 8002e50:	2301      	movs	r3, #1
 8002e52:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e56:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002e5a:	fa93 f3a3 	rbit	r3, r3
 8002e5e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002e62:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e66:	fab3 f383 	clz	r3, r3
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e70:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	461a      	mov	r2, r3
 8002e78:	2300      	movs	r3, #0
 8002e7a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7c:	f7fe fb64 	bl	8001548 <HAL_GetTick>
 8002e80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e84:	e00a      	b.n	8002e9c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e86:	f7fe fb5f 	bl	8001548 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d902      	bls.n	8002e9c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	f000 bd5a 	b.w	8003950 <HAL_RCC_OscConfig+0x106c>
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002ea6:	fa93 f3a3 	rbit	r3, r3
 8002eaa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002eae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eb2:	fab3 f383 	clz	r3, r3
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	095b      	lsrs	r3, r3, #5
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	f043 0301 	orr.w	r3, r3, #1
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d104      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x5ec>
 8002ec6:	4b01      	ldr	r3, [pc, #4]	; (8002ecc <HAL_RCC_OscConfig+0x5e8>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	e015      	b.n	8002ef8 <HAL_RCC_OscConfig+0x614>
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002eda:	fa93 f3a3 	rbit	r3, r3
 8002ede:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002ee8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002eec:	fa93 f3a3 	rbit	r3, r3
 8002ef0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002ef4:	4bc8      	ldr	r3, [pc, #800]	; (8003218 <HAL_RCC_OscConfig+0x934>)
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef8:	2202      	movs	r2, #2
 8002efa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002efe:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002f02:	fa92 f2a2 	rbit	r2, r2
 8002f06:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002f0a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002f0e:	fab2 f282 	clz	r2, r2
 8002f12:	b2d2      	uxtb	r2, r2
 8002f14:	f042 0220 	orr.w	r2, r2, #32
 8002f18:	b2d2      	uxtb	r2, r2
 8002f1a:	f002 021f 	and.w	r2, r2, #31
 8002f1e:	2101      	movs	r1, #1
 8002f20:	fa01 f202 	lsl.w	r2, r1, r2
 8002f24:	4013      	ands	r3, r2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1ad      	bne.n	8002e86 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0308 	and.w	r3, r3, #8
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f000 8110 	beq.w	8003160 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d079      	beq.n	8003044 <HAL_RCC_OscConfig+0x760>
 8002f50:	2301      	movs	r3, #1
 8002f52:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f56:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002f5a:	fa93 f3a3 	rbit	r3, r3
 8002f5e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002f62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f66:	fab3 f383 	clz	r3, r3
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	4bab      	ldr	r3, [pc, #684]	; (800321c <HAL_RCC_OscConfig+0x938>)
 8002f70:	4413      	add	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	461a      	mov	r2, r3
 8002f76:	2301      	movs	r3, #1
 8002f78:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f7a:	f7fe fae5 	bl	8001548 <HAL_GetTick>
 8002f7e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f82:	e00a      	b.n	8002f9a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f84:	f7fe fae0 	bl	8001548 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d902      	bls.n	8002f9a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	f000 bcdb 	b.w	8003950 <HAL_RCC_OscConfig+0x106c>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002fa4:	fa93 f3a3 	rbit	r3, r3
 8002fa8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002fac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002fb4:	2202      	movs	r2, #2
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fbc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	fa93 f2a3 	rbit	r2, r3
 8002fc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002fd8:	2202      	movs	r2, #2
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fe0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	fa93 f2a3 	rbit	r2, r3
 8002fea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002ff2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ff4:	4b88      	ldr	r3, [pc, #544]	; (8003218 <HAL_RCC_OscConfig+0x934>)
 8002ff6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ff8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ffc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003000:	2102      	movs	r1, #2
 8003002:	6019      	str	r1, [r3, #0]
 8003004:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003008:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	fa93 f1a3 	rbit	r1, r3
 8003012:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003016:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800301a:	6019      	str	r1, [r3, #0]
  return result;
 800301c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003020:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	fab3 f383 	clz	r3, r3
 800302a:	b2db      	uxtb	r3, r3
 800302c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003030:	b2db      	uxtb	r3, r3
 8003032:	f003 031f 	and.w	r3, r3, #31
 8003036:	2101      	movs	r1, #1
 8003038:	fa01 f303 	lsl.w	r3, r1, r3
 800303c:	4013      	ands	r3, r2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0a0      	beq.n	8002f84 <HAL_RCC_OscConfig+0x6a0>
 8003042:	e08d      	b.n	8003160 <HAL_RCC_OscConfig+0x87c>
 8003044:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003048:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800304c:	2201      	movs	r2, #1
 800304e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003050:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003054:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	fa93 f2a3 	rbit	r2, r3
 800305e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003062:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003066:	601a      	str	r2, [r3, #0]
  return result;
 8003068:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800306c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003070:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003072:	fab3 f383 	clz	r3, r3
 8003076:	b2db      	uxtb	r3, r3
 8003078:	461a      	mov	r2, r3
 800307a:	4b68      	ldr	r3, [pc, #416]	; (800321c <HAL_RCC_OscConfig+0x938>)
 800307c:	4413      	add	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	461a      	mov	r2, r3
 8003082:	2300      	movs	r3, #0
 8003084:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003086:	f7fe fa5f 	bl	8001548 <HAL_GetTick>
 800308a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800308e:	e00a      	b.n	80030a6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003090:	f7fe fa5a 	bl	8001548 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d902      	bls.n	80030a6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	f000 bc55 	b.w	8003950 <HAL_RCC_OscConfig+0x106c>
 80030a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030aa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80030ae:	2202      	movs	r2, #2
 80030b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	fa93 f2a3 	rbit	r2, r3
 80030c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80030c8:	601a      	str	r2, [r3, #0]
 80030ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ce:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80030d2:	2202      	movs	r2, #2
 80030d4:	601a      	str	r2, [r3, #0]
 80030d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030da:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	fa93 f2a3 	rbit	r2, r3
 80030e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80030ec:	601a      	str	r2, [r3, #0]
 80030ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80030f6:	2202      	movs	r2, #2
 80030f8:	601a      	str	r2, [r3, #0]
 80030fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	fa93 f2a3 	rbit	r2, r3
 8003108:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800310c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003110:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003112:	4b41      	ldr	r3, [pc, #260]	; (8003218 <HAL_RCC_OscConfig+0x934>)
 8003114:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003116:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800311a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800311e:	2102      	movs	r1, #2
 8003120:	6019      	str	r1, [r3, #0]
 8003122:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003126:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	fa93 f1a3 	rbit	r1, r3
 8003130:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003134:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003138:	6019      	str	r1, [r3, #0]
  return result;
 800313a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800313e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	fab3 f383 	clz	r3, r3
 8003148:	b2db      	uxtb	r3, r3
 800314a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800314e:	b2db      	uxtb	r3, r3
 8003150:	f003 031f 	and.w	r3, r3, #31
 8003154:	2101      	movs	r1, #1
 8003156:	fa01 f303 	lsl.w	r3, r1, r3
 800315a:	4013      	ands	r3, r2
 800315c:	2b00      	cmp	r3, #0
 800315e:	d197      	bne.n	8003090 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003160:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003164:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0304 	and.w	r3, r3, #4
 8003170:	2b00      	cmp	r3, #0
 8003172:	f000 81a1 	beq.w	80034b8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003176:	2300      	movs	r3, #0
 8003178:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800317c:	4b26      	ldr	r3, [pc, #152]	; (8003218 <HAL_RCC_OscConfig+0x934>)
 800317e:	69db      	ldr	r3, [r3, #28]
 8003180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d116      	bne.n	80031b6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003188:	4b23      	ldr	r3, [pc, #140]	; (8003218 <HAL_RCC_OscConfig+0x934>)
 800318a:	69db      	ldr	r3, [r3, #28]
 800318c:	4a22      	ldr	r2, [pc, #136]	; (8003218 <HAL_RCC_OscConfig+0x934>)
 800318e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003192:	61d3      	str	r3, [r2, #28]
 8003194:	4b20      	ldr	r3, [pc, #128]	; (8003218 <HAL_RCC_OscConfig+0x934>)
 8003196:	69db      	ldr	r3, [r3, #28]
 8003198:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800319c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80031a4:	601a      	str	r2, [r3, #0]
 80031a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031aa:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80031ae:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80031b0:	2301      	movs	r3, #1
 80031b2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031b6:	4b1a      	ldr	r3, [pc, #104]	; (8003220 <HAL_RCC_OscConfig+0x93c>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d11a      	bne.n	80031f8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031c2:	4b17      	ldr	r3, [pc, #92]	; (8003220 <HAL_RCC_OscConfig+0x93c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a16      	ldr	r2, [pc, #88]	; (8003220 <HAL_RCC_OscConfig+0x93c>)
 80031c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031cc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031ce:	f7fe f9bb 	bl	8001548 <HAL_GetTick>
 80031d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d6:	e009      	b.n	80031ec <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031d8:	f7fe f9b6 	bl	8001548 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b64      	cmp	r3, #100	; 0x64
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e3b1      	b.n	8003950 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ec:	4b0c      	ldr	r3, [pc, #48]	; (8003220 <HAL_RCC_OscConfig+0x93c>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0ef      	beq.n	80031d8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d10d      	bne.n	8003224 <HAL_RCC_OscConfig+0x940>
 8003208:	4b03      	ldr	r3, [pc, #12]	; (8003218 <HAL_RCC_OscConfig+0x934>)
 800320a:	6a1b      	ldr	r3, [r3, #32]
 800320c:	4a02      	ldr	r2, [pc, #8]	; (8003218 <HAL_RCC_OscConfig+0x934>)
 800320e:	f043 0301 	orr.w	r3, r3, #1
 8003212:	6213      	str	r3, [r2, #32]
 8003214:	e03c      	b.n	8003290 <HAL_RCC_OscConfig+0x9ac>
 8003216:	bf00      	nop
 8003218:	40021000 	.word	0x40021000
 800321c:	10908120 	.word	0x10908120
 8003220:	40007000 	.word	0x40007000
 8003224:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003228:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d10c      	bne.n	800324e <HAL_RCC_OscConfig+0x96a>
 8003234:	4bc1      	ldr	r3, [pc, #772]	; (800353c <HAL_RCC_OscConfig+0xc58>)
 8003236:	6a1b      	ldr	r3, [r3, #32]
 8003238:	4ac0      	ldr	r2, [pc, #768]	; (800353c <HAL_RCC_OscConfig+0xc58>)
 800323a:	f023 0301 	bic.w	r3, r3, #1
 800323e:	6213      	str	r3, [r2, #32]
 8003240:	4bbe      	ldr	r3, [pc, #760]	; (800353c <HAL_RCC_OscConfig+0xc58>)
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	4abd      	ldr	r2, [pc, #756]	; (800353c <HAL_RCC_OscConfig+0xc58>)
 8003246:	f023 0304 	bic.w	r3, r3, #4
 800324a:	6213      	str	r3, [r2, #32]
 800324c:	e020      	b.n	8003290 <HAL_RCC_OscConfig+0x9ac>
 800324e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003252:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	2b05      	cmp	r3, #5
 800325c:	d10c      	bne.n	8003278 <HAL_RCC_OscConfig+0x994>
 800325e:	4bb7      	ldr	r3, [pc, #732]	; (800353c <HAL_RCC_OscConfig+0xc58>)
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	4ab6      	ldr	r2, [pc, #728]	; (800353c <HAL_RCC_OscConfig+0xc58>)
 8003264:	f043 0304 	orr.w	r3, r3, #4
 8003268:	6213      	str	r3, [r2, #32]
 800326a:	4bb4      	ldr	r3, [pc, #720]	; (800353c <HAL_RCC_OscConfig+0xc58>)
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	4ab3      	ldr	r2, [pc, #716]	; (800353c <HAL_RCC_OscConfig+0xc58>)
 8003270:	f043 0301 	orr.w	r3, r3, #1
 8003274:	6213      	str	r3, [r2, #32]
 8003276:	e00b      	b.n	8003290 <HAL_RCC_OscConfig+0x9ac>
 8003278:	4bb0      	ldr	r3, [pc, #704]	; (800353c <HAL_RCC_OscConfig+0xc58>)
 800327a:	6a1b      	ldr	r3, [r3, #32]
 800327c:	4aaf      	ldr	r2, [pc, #700]	; (800353c <HAL_RCC_OscConfig+0xc58>)
 800327e:	f023 0301 	bic.w	r3, r3, #1
 8003282:	6213      	str	r3, [r2, #32]
 8003284:	4bad      	ldr	r3, [pc, #692]	; (800353c <HAL_RCC_OscConfig+0xc58>)
 8003286:	6a1b      	ldr	r3, [r3, #32]
 8003288:	4aac      	ldr	r2, [pc, #688]	; (800353c <HAL_RCC_OscConfig+0xc58>)
 800328a:	f023 0304 	bic.w	r3, r3, #4
 800328e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003290:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003294:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 8081 	beq.w	80033a4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032a2:	f7fe f951 	bl	8001548 <HAL_GetTick>
 80032a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032aa:	e00b      	b.n	80032c4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032ac:	f7fe f94c 	bl	8001548 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032bc:	4293      	cmp	r3, r2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e345      	b.n	8003950 <HAL_RCC_OscConfig+0x106c>
 80032c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80032cc:	2202      	movs	r2, #2
 80032ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	fa93 f2a3 	rbit	r2, r3
 80032de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80032e6:	601a      	str	r2, [r3, #0]
 80032e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ec:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80032f0:	2202      	movs	r2, #2
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	fa93 f2a3 	rbit	r2, r3
 8003302:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003306:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800330a:	601a      	str	r2, [r3, #0]
  return result;
 800330c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003310:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003314:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003316:	fab3 f383 	clz	r3, r3
 800331a:	b2db      	uxtb	r3, r3
 800331c:	095b      	lsrs	r3, r3, #5
 800331e:	b2db      	uxtb	r3, r3
 8003320:	f043 0302 	orr.w	r3, r3, #2
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d102      	bne.n	8003330 <HAL_RCC_OscConfig+0xa4c>
 800332a:	4b84      	ldr	r3, [pc, #528]	; (800353c <HAL_RCC_OscConfig+0xc58>)
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	e013      	b.n	8003358 <HAL_RCC_OscConfig+0xa74>
 8003330:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003334:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003338:	2202      	movs	r2, #2
 800333a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003340:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	fa93 f2a3 	rbit	r2, r3
 800334a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800334e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003352:	601a      	str	r2, [r3, #0]
 8003354:	4b79      	ldr	r3, [pc, #484]	; (800353c <HAL_RCC_OscConfig+0xc58>)
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800335c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003360:	2102      	movs	r1, #2
 8003362:	6011      	str	r1, [r2, #0]
 8003364:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003368:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800336c:	6812      	ldr	r2, [r2, #0]
 800336e:	fa92 f1a2 	rbit	r1, r2
 8003372:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003376:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800337a:	6011      	str	r1, [r2, #0]
  return result;
 800337c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003380:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003384:	6812      	ldr	r2, [r2, #0]
 8003386:	fab2 f282 	clz	r2, r2
 800338a:	b2d2      	uxtb	r2, r2
 800338c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003390:	b2d2      	uxtb	r2, r2
 8003392:	f002 021f 	and.w	r2, r2, #31
 8003396:	2101      	movs	r1, #1
 8003398:	fa01 f202 	lsl.w	r2, r1, r2
 800339c:	4013      	ands	r3, r2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d084      	beq.n	80032ac <HAL_RCC_OscConfig+0x9c8>
 80033a2:	e07f      	b.n	80034a4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033a4:	f7fe f8d0 	bl	8001548 <HAL_GetTick>
 80033a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033ac:	e00b      	b.n	80033c6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033ae:	f7fe f8cb 	bl	8001548 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80033be:	4293      	cmp	r3, r2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e2c4      	b.n	8003950 <HAL_RCC_OscConfig+0x106c>
 80033c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ca:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80033ce:	2202      	movs	r2, #2
 80033d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033d6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	fa93 f2a3 	rbit	r2, r3
 80033e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80033e8:	601a      	str	r2, [r3, #0]
 80033ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ee:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80033f2:	2202      	movs	r2, #2
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033fa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	fa93 f2a3 	rbit	r2, r3
 8003404:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003408:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800340c:	601a      	str	r2, [r3, #0]
  return result;
 800340e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003412:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003416:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003418:	fab3 f383 	clz	r3, r3
 800341c:	b2db      	uxtb	r3, r3
 800341e:	095b      	lsrs	r3, r3, #5
 8003420:	b2db      	uxtb	r3, r3
 8003422:	f043 0302 	orr.w	r3, r3, #2
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d102      	bne.n	8003432 <HAL_RCC_OscConfig+0xb4e>
 800342c:	4b43      	ldr	r3, [pc, #268]	; (800353c <HAL_RCC_OscConfig+0xc58>)
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	e013      	b.n	800345a <HAL_RCC_OscConfig+0xb76>
 8003432:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003436:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800343a:	2202      	movs	r2, #2
 800343c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003442:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	fa93 f2a3 	rbit	r2, r3
 800344c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003450:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003454:	601a      	str	r2, [r3, #0]
 8003456:	4b39      	ldr	r3, [pc, #228]	; (800353c <HAL_RCC_OscConfig+0xc58>)
 8003458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800345e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003462:	2102      	movs	r1, #2
 8003464:	6011      	str	r1, [r2, #0]
 8003466:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800346a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800346e:	6812      	ldr	r2, [r2, #0]
 8003470:	fa92 f1a2 	rbit	r1, r2
 8003474:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003478:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800347c:	6011      	str	r1, [r2, #0]
  return result;
 800347e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003482:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003486:	6812      	ldr	r2, [r2, #0]
 8003488:	fab2 f282 	clz	r2, r2
 800348c:	b2d2      	uxtb	r2, r2
 800348e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003492:	b2d2      	uxtb	r2, r2
 8003494:	f002 021f 	and.w	r2, r2, #31
 8003498:	2101      	movs	r1, #1
 800349a:	fa01 f202 	lsl.w	r2, r1, r2
 800349e:	4013      	ands	r3, r2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d184      	bne.n	80033ae <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80034a4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d105      	bne.n	80034b8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034ac:	4b23      	ldr	r3, [pc, #140]	; (800353c <HAL_RCC_OscConfig+0xc58>)
 80034ae:	69db      	ldr	r3, [r3, #28]
 80034b0:	4a22      	ldr	r2, [pc, #136]	; (800353c <HAL_RCC_OscConfig+0xc58>)
 80034b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034b6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	69db      	ldr	r3, [r3, #28]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f000 8242 	beq.w	800394e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034ca:	4b1c      	ldr	r3, [pc, #112]	; (800353c <HAL_RCC_OscConfig+0xc58>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f003 030c 	and.w	r3, r3, #12
 80034d2:	2b08      	cmp	r3, #8
 80034d4:	f000 8213 	beq.w	80038fe <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	69db      	ldr	r3, [r3, #28]
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	f040 8162 	bne.w	80037ae <HAL_RCC_OscConfig+0xeca>
 80034ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ee:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80034f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80034f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034fc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	fa93 f2a3 	rbit	r2, r3
 8003506:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800350a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800350e:	601a      	str	r2, [r3, #0]
  return result;
 8003510:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003514:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003518:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800351a:	fab3 f383 	clz	r3, r3
 800351e:	b2db      	uxtb	r3, r3
 8003520:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003524:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	461a      	mov	r2, r3
 800352c:	2300      	movs	r3, #0
 800352e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003530:	f7fe f80a 	bl	8001548 <HAL_GetTick>
 8003534:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003538:	e00c      	b.n	8003554 <HAL_RCC_OscConfig+0xc70>
 800353a:	bf00      	nop
 800353c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003540:	f7fe f802 	bl	8001548 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e1fd      	b.n	8003950 <HAL_RCC_OscConfig+0x106c>
 8003554:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003558:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800355c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003560:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003562:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003566:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	fa93 f2a3 	rbit	r2, r3
 8003570:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003574:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003578:	601a      	str	r2, [r3, #0]
  return result;
 800357a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800357e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003582:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003584:	fab3 f383 	clz	r3, r3
 8003588:	b2db      	uxtb	r3, r3
 800358a:	095b      	lsrs	r3, r3, #5
 800358c:	b2db      	uxtb	r3, r3
 800358e:	f043 0301 	orr.w	r3, r3, #1
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b01      	cmp	r3, #1
 8003596:	d102      	bne.n	800359e <HAL_RCC_OscConfig+0xcba>
 8003598:	4bb0      	ldr	r3, [pc, #704]	; (800385c <HAL_RCC_OscConfig+0xf78>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	e027      	b.n	80035ee <HAL_RCC_OscConfig+0xd0a>
 800359e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035a2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80035a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035b0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	fa93 f2a3 	rbit	r2, r3
 80035ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035be:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035c8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80035cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035d0:	601a      	str	r2, [r3, #0]
 80035d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035d6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	fa93 f2a3 	rbit	r2, r3
 80035e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035e4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80035e8:	601a      	str	r2, [r3, #0]
 80035ea:	4b9c      	ldr	r3, [pc, #624]	; (800385c <HAL_RCC_OscConfig+0xf78>)
 80035ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035f2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80035f6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80035fa:	6011      	str	r1, [r2, #0]
 80035fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003600:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003604:	6812      	ldr	r2, [r2, #0]
 8003606:	fa92 f1a2 	rbit	r1, r2
 800360a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800360e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003612:	6011      	str	r1, [r2, #0]
  return result;
 8003614:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003618:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800361c:	6812      	ldr	r2, [r2, #0]
 800361e:	fab2 f282 	clz	r2, r2
 8003622:	b2d2      	uxtb	r2, r2
 8003624:	f042 0220 	orr.w	r2, r2, #32
 8003628:	b2d2      	uxtb	r2, r2
 800362a:	f002 021f 	and.w	r2, r2, #31
 800362e:	2101      	movs	r1, #1
 8003630:	fa01 f202 	lsl.w	r2, r1, r2
 8003634:	4013      	ands	r3, r2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d182      	bne.n	8003540 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800363a:	4b88      	ldr	r3, [pc, #544]	; (800385c <HAL_RCC_OscConfig+0xf78>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003642:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003646:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800364e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003652:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	430b      	orrs	r3, r1
 800365c:	497f      	ldr	r1, [pc, #508]	; (800385c <HAL_RCC_OscConfig+0xf78>)
 800365e:	4313      	orrs	r3, r2
 8003660:	604b      	str	r3, [r1, #4]
 8003662:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003666:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800366a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800366e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003670:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003674:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	fa93 f2a3 	rbit	r2, r3
 800367e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003682:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003686:	601a      	str	r2, [r3, #0]
  return result;
 8003688:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800368c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003690:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003692:	fab3 f383 	clz	r3, r3
 8003696:	b2db      	uxtb	r3, r3
 8003698:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800369c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	461a      	mov	r2, r3
 80036a4:	2301      	movs	r3, #1
 80036a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a8:	f7fd ff4e 	bl	8001548 <HAL_GetTick>
 80036ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036b0:	e009      	b.n	80036c6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036b2:	f7fd ff49 	bl	8001548 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e144      	b.n	8003950 <HAL_RCC_OscConfig+0x106c>
 80036c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ca:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80036ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036d8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	fa93 f2a3 	rbit	r2, r3
 80036e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036e6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80036ea:	601a      	str	r2, [r3, #0]
  return result;
 80036ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036f0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80036f4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036f6:	fab3 f383 	clz	r3, r3
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	095b      	lsrs	r3, r3, #5
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	f043 0301 	orr.w	r3, r3, #1
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b01      	cmp	r3, #1
 8003708:	d102      	bne.n	8003710 <HAL_RCC_OscConfig+0xe2c>
 800370a:	4b54      	ldr	r3, [pc, #336]	; (800385c <HAL_RCC_OscConfig+0xf78>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	e027      	b.n	8003760 <HAL_RCC_OscConfig+0xe7c>
 8003710:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003714:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003718:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800371c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003722:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	fa93 f2a3 	rbit	r2, r3
 800372c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003730:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003734:	601a      	str	r2, [r3, #0]
 8003736:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800373a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800373e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003748:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	fa93 f2a3 	rbit	r2, r3
 8003752:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003756:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800375a:	601a      	str	r2, [r3, #0]
 800375c:	4b3f      	ldr	r3, [pc, #252]	; (800385c <HAL_RCC_OscConfig+0xf78>)
 800375e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003760:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003764:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003768:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800376c:	6011      	str	r1, [r2, #0]
 800376e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003772:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003776:	6812      	ldr	r2, [r2, #0]
 8003778:	fa92 f1a2 	rbit	r1, r2
 800377c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003780:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003784:	6011      	str	r1, [r2, #0]
  return result;
 8003786:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800378a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800378e:	6812      	ldr	r2, [r2, #0]
 8003790:	fab2 f282 	clz	r2, r2
 8003794:	b2d2      	uxtb	r2, r2
 8003796:	f042 0220 	orr.w	r2, r2, #32
 800379a:	b2d2      	uxtb	r2, r2
 800379c:	f002 021f 	and.w	r2, r2, #31
 80037a0:	2101      	movs	r1, #1
 80037a2:	fa01 f202 	lsl.w	r2, r1, r2
 80037a6:	4013      	ands	r3, r2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d082      	beq.n	80036b2 <HAL_RCC_OscConfig+0xdce>
 80037ac:	e0cf      	b.n	800394e <HAL_RCC_OscConfig+0x106a>
 80037ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037b2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80037b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80037ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037c0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	fa93 f2a3 	rbit	r2, r3
 80037ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ce:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80037d2:	601a      	str	r2, [r3, #0]
  return result;
 80037d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037d8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80037dc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037de:	fab3 f383 	clz	r3, r3
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80037e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	461a      	mov	r2, r3
 80037f0:	2300      	movs	r3, #0
 80037f2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f4:	f7fd fea8 	bl	8001548 <HAL_GetTick>
 80037f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037fc:	e009      	b.n	8003812 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037fe:	f7fd fea3 	bl	8001548 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b02      	cmp	r3, #2
 800380c:	d901      	bls.n	8003812 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e09e      	b.n	8003950 <HAL_RCC_OscConfig+0x106c>
 8003812:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003816:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800381a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800381e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003820:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003824:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	fa93 f2a3 	rbit	r2, r3
 800382e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003832:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003836:	601a      	str	r2, [r3, #0]
  return result;
 8003838:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800383c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003840:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003842:	fab3 f383 	clz	r3, r3
 8003846:	b2db      	uxtb	r3, r3
 8003848:	095b      	lsrs	r3, r3, #5
 800384a:	b2db      	uxtb	r3, r3
 800384c:	f043 0301 	orr.w	r3, r3, #1
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b01      	cmp	r3, #1
 8003854:	d104      	bne.n	8003860 <HAL_RCC_OscConfig+0xf7c>
 8003856:	4b01      	ldr	r3, [pc, #4]	; (800385c <HAL_RCC_OscConfig+0xf78>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	e029      	b.n	80038b0 <HAL_RCC_OscConfig+0xfcc>
 800385c:	40021000 	.word	0x40021000
 8003860:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003864:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003868:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800386c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003872:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	fa93 f2a3 	rbit	r2, r3
 800387c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003880:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003884:	601a      	str	r2, [r3, #0]
 8003886:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800388a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800388e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003892:	601a      	str	r2, [r3, #0]
 8003894:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003898:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	fa93 f2a3 	rbit	r2, r3
 80038a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038a6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80038aa:	601a      	str	r2, [r3, #0]
 80038ac:	4b2b      	ldr	r3, [pc, #172]	; (800395c <HAL_RCC_OscConfig+0x1078>)
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80038b4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80038b8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80038bc:	6011      	str	r1, [r2, #0]
 80038be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80038c2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80038c6:	6812      	ldr	r2, [r2, #0]
 80038c8:	fa92 f1a2 	rbit	r1, r2
 80038cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80038d0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80038d4:	6011      	str	r1, [r2, #0]
  return result;
 80038d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80038da:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80038de:	6812      	ldr	r2, [r2, #0]
 80038e0:	fab2 f282 	clz	r2, r2
 80038e4:	b2d2      	uxtb	r2, r2
 80038e6:	f042 0220 	orr.w	r2, r2, #32
 80038ea:	b2d2      	uxtb	r2, r2
 80038ec:	f002 021f 	and.w	r2, r2, #31
 80038f0:	2101      	movs	r1, #1
 80038f2:	fa01 f202 	lsl.w	r2, r1, r2
 80038f6:	4013      	ands	r3, r2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d180      	bne.n	80037fe <HAL_RCC_OscConfig+0xf1a>
 80038fc:	e027      	b.n	800394e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003902:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d101      	bne.n	8003912 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e01e      	b.n	8003950 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003912:	4b12      	ldr	r3, [pc, #72]	; (800395c <HAL_RCC_OscConfig+0x1078>)
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800391a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800391e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003922:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003926:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	429a      	cmp	r2, r3
 8003930:	d10b      	bne.n	800394a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003932:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003936:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800393a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800393e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003946:	429a      	cmp	r2, r3
 8003948:	d001      	beq.n	800394e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e000      	b.n	8003950 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	40021000 	.word	0x40021000

08003960 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b09e      	sub	sp, #120	; 0x78
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800396a:	2300      	movs	r3, #0
 800396c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d101      	bne.n	8003978 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e162      	b.n	8003c3e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003978:	4b90      	ldr	r3, [pc, #576]	; (8003bbc <HAL_RCC_ClockConfig+0x25c>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0307 	and.w	r3, r3, #7
 8003980:	683a      	ldr	r2, [r7, #0]
 8003982:	429a      	cmp	r2, r3
 8003984:	d910      	bls.n	80039a8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003986:	4b8d      	ldr	r3, [pc, #564]	; (8003bbc <HAL_RCC_ClockConfig+0x25c>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f023 0207 	bic.w	r2, r3, #7
 800398e:	498b      	ldr	r1, [pc, #556]	; (8003bbc <HAL_RCC_ClockConfig+0x25c>)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	4313      	orrs	r3, r2
 8003994:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003996:	4b89      	ldr	r3, [pc, #548]	; (8003bbc <HAL_RCC_ClockConfig+0x25c>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0307 	and.w	r3, r3, #7
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d001      	beq.n	80039a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e14a      	b.n	8003c3e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d008      	beq.n	80039c6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039b4:	4b82      	ldr	r3, [pc, #520]	; (8003bc0 <HAL_RCC_ClockConfig+0x260>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	497f      	ldr	r1, [pc, #508]	; (8003bc0 <HAL_RCC_ClockConfig+0x260>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f000 80dc 	beq.w	8003b8c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d13c      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xf6>
 80039dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039e0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039e4:	fa93 f3a3 	rbit	r3, r3
 80039e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80039ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ec:	fab3 f383 	clz	r3, r3
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	095b      	lsrs	r3, r3, #5
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	f043 0301 	orr.w	r3, r3, #1
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d102      	bne.n	8003a06 <HAL_RCC_ClockConfig+0xa6>
 8003a00:	4b6f      	ldr	r3, [pc, #444]	; (8003bc0 <HAL_RCC_ClockConfig+0x260>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	e00f      	b.n	8003a26 <HAL_RCC_ClockConfig+0xc6>
 8003a06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a0a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a0e:	fa93 f3a3 	rbit	r3, r3
 8003a12:	667b      	str	r3, [r7, #100]	; 0x64
 8003a14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a18:	663b      	str	r3, [r7, #96]	; 0x60
 8003a1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a1c:	fa93 f3a3 	rbit	r3, r3
 8003a20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a22:	4b67      	ldr	r3, [pc, #412]	; (8003bc0 <HAL_RCC_ClockConfig+0x260>)
 8003a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a2a:	65ba      	str	r2, [r7, #88]	; 0x58
 8003a2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a2e:	fa92 f2a2 	rbit	r2, r2
 8003a32:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003a34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003a36:	fab2 f282 	clz	r2, r2
 8003a3a:	b2d2      	uxtb	r2, r2
 8003a3c:	f042 0220 	orr.w	r2, r2, #32
 8003a40:	b2d2      	uxtb	r2, r2
 8003a42:	f002 021f 	and.w	r2, r2, #31
 8003a46:	2101      	movs	r1, #1
 8003a48:	fa01 f202 	lsl.w	r2, r1, r2
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d17b      	bne.n	8003b4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e0f3      	b.n	8003c3e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d13c      	bne.n	8003ad8 <HAL_RCC_ClockConfig+0x178>
 8003a5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a62:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a66:	fa93 f3a3 	rbit	r3, r3
 8003a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003a6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a6e:	fab3 f383 	clz	r3, r3
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	095b      	lsrs	r3, r3, #5
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	f043 0301 	orr.w	r3, r3, #1
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d102      	bne.n	8003a88 <HAL_RCC_ClockConfig+0x128>
 8003a82:	4b4f      	ldr	r3, [pc, #316]	; (8003bc0 <HAL_RCC_ClockConfig+0x260>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	e00f      	b.n	8003aa8 <HAL_RCC_ClockConfig+0x148>
 8003a88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a8c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a90:	fa93 f3a3 	rbit	r3, r3
 8003a94:	647b      	str	r3, [r7, #68]	; 0x44
 8003a96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a9a:	643b      	str	r3, [r7, #64]	; 0x40
 8003a9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a9e:	fa93 f3a3 	rbit	r3, r3
 8003aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003aa4:	4b46      	ldr	r3, [pc, #280]	; (8003bc0 <HAL_RCC_ClockConfig+0x260>)
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003aac:	63ba      	str	r2, [r7, #56]	; 0x38
 8003aae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ab0:	fa92 f2a2 	rbit	r2, r2
 8003ab4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003ab6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ab8:	fab2 f282 	clz	r2, r2
 8003abc:	b2d2      	uxtb	r2, r2
 8003abe:	f042 0220 	orr.w	r2, r2, #32
 8003ac2:	b2d2      	uxtb	r2, r2
 8003ac4:	f002 021f 	and.w	r2, r2, #31
 8003ac8:	2101      	movs	r1, #1
 8003aca:	fa01 f202 	lsl.w	r2, r1, r2
 8003ace:	4013      	ands	r3, r2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d13a      	bne.n	8003b4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e0b2      	b.n	8003c3e <HAL_RCC_ClockConfig+0x2de>
 8003ad8:	2302      	movs	r3, #2
 8003ada:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ade:	fa93 f3a3 	rbit	r3, r3
 8003ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae6:	fab3 f383 	clz	r3, r3
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	095b      	lsrs	r3, r3, #5
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	f043 0301 	orr.w	r3, r3, #1
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d102      	bne.n	8003b00 <HAL_RCC_ClockConfig+0x1a0>
 8003afa:	4b31      	ldr	r3, [pc, #196]	; (8003bc0 <HAL_RCC_ClockConfig+0x260>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	e00d      	b.n	8003b1c <HAL_RCC_ClockConfig+0x1bc>
 8003b00:	2302      	movs	r3, #2
 8003b02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b06:	fa93 f3a3 	rbit	r3, r3
 8003b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	623b      	str	r3, [r7, #32]
 8003b10:	6a3b      	ldr	r3, [r7, #32]
 8003b12:	fa93 f3a3 	rbit	r3, r3
 8003b16:	61fb      	str	r3, [r7, #28]
 8003b18:	4b29      	ldr	r3, [pc, #164]	; (8003bc0 <HAL_RCC_ClockConfig+0x260>)
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1c:	2202      	movs	r2, #2
 8003b1e:	61ba      	str	r2, [r7, #24]
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	fa92 f2a2 	rbit	r2, r2
 8003b26:	617a      	str	r2, [r7, #20]
  return result;
 8003b28:	697a      	ldr	r2, [r7, #20]
 8003b2a:	fab2 f282 	clz	r2, r2
 8003b2e:	b2d2      	uxtb	r2, r2
 8003b30:	f042 0220 	orr.w	r2, r2, #32
 8003b34:	b2d2      	uxtb	r2, r2
 8003b36:	f002 021f 	and.w	r2, r2, #31
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b40:	4013      	ands	r3, r2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e079      	b.n	8003c3e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b4a:	4b1d      	ldr	r3, [pc, #116]	; (8003bc0 <HAL_RCC_ClockConfig+0x260>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f023 0203 	bic.w	r2, r3, #3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	491a      	ldr	r1, [pc, #104]	; (8003bc0 <HAL_RCC_ClockConfig+0x260>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b5c:	f7fd fcf4 	bl	8001548 <HAL_GetTick>
 8003b60:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b62:	e00a      	b.n	8003b7a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b64:	f7fd fcf0 	bl	8001548 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e061      	b.n	8003c3e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b7a:	4b11      	ldr	r3, [pc, #68]	; (8003bc0 <HAL_RCC_ClockConfig+0x260>)
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f003 020c 	and.w	r2, r3, #12
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d1eb      	bne.n	8003b64 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b8c:	4b0b      	ldr	r3, [pc, #44]	; (8003bbc <HAL_RCC_ClockConfig+0x25c>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0307 	and.w	r3, r3, #7
 8003b94:	683a      	ldr	r2, [r7, #0]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d214      	bcs.n	8003bc4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b9a:	4b08      	ldr	r3, [pc, #32]	; (8003bbc <HAL_RCC_ClockConfig+0x25c>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f023 0207 	bic.w	r2, r3, #7
 8003ba2:	4906      	ldr	r1, [pc, #24]	; (8003bbc <HAL_RCC_ClockConfig+0x25c>)
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003baa:	4b04      	ldr	r3, [pc, #16]	; (8003bbc <HAL_RCC_ClockConfig+0x25c>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0307 	and.w	r3, r3, #7
 8003bb2:	683a      	ldr	r2, [r7, #0]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d005      	beq.n	8003bc4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e040      	b.n	8003c3e <HAL_RCC_ClockConfig+0x2de>
 8003bbc:	40022000 	.word	0x40022000
 8003bc0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d008      	beq.n	8003be2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bd0:	4b1d      	ldr	r3, [pc, #116]	; (8003c48 <HAL_RCC_ClockConfig+0x2e8>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	491a      	ldr	r1, [pc, #104]	; (8003c48 <HAL_RCC_ClockConfig+0x2e8>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0308 	and.w	r3, r3, #8
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d009      	beq.n	8003c02 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bee:	4b16      	ldr	r3, [pc, #88]	; (8003c48 <HAL_RCC_ClockConfig+0x2e8>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	4912      	ldr	r1, [pc, #72]	; (8003c48 <HAL_RCC_ClockConfig+0x2e8>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003c02:	f000 f829 	bl	8003c58 <HAL_RCC_GetSysClockFreq>
 8003c06:	4601      	mov	r1, r0
 8003c08:	4b0f      	ldr	r3, [pc, #60]	; (8003c48 <HAL_RCC_ClockConfig+0x2e8>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c10:	22f0      	movs	r2, #240	; 0xf0
 8003c12:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	fa92 f2a2 	rbit	r2, r2
 8003c1a:	60fa      	str	r2, [r7, #12]
  return result;
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	fab2 f282 	clz	r2, r2
 8003c22:	b2d2      	uxtb	r2, r2
 8003c24:	40d3      	lsrs	r3, r2
 8003c26:	4a09      	ldr	r2, [pc, #36]	; (8003c4c <HAL_RCC_ClockConfig+0x2ec>)
 8003c28:	5cd3      	ldrb	r3, [r2, r3]
 8003c2a:	fa21 f303 	lsr.w	r3, r1, r3
 8003c2e:	4a08      	ldr	r2, [pc, #32]	; (8003c50 <HAL_RCC_ClockConfig+0x2f0>)
 8003c30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003c32:	4b08      	ldr	r3, [pc, #32]	; (8003c54 <HAL_RCC_ClockConfig+0x2f4>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7fd fc42 	bl	80014c0 <HAL_InitTick>
  
  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3778      	adds	r7, #120	; 0x78
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	40021000 	.word	0x40021000
 8003c4c:	0800637c 	.word	0x0800637c
 8003c50:	20000000 	.word	0x20000000
 8003c54:	20000004 	.word	0x20000004

08003c58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b08b      	sub	sp, #44	; 0x2c
 8003c5c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	61fb      	str	r3, [r7, #28]
 8003c62:	2300      	movs	r3, #0
 8003c64:	61bb      	str	r3, [r7, #24]
 8003c66:	2300      	movs	r3, #0
 8003c68:	627b      	str	r3, [r7, #36]	; 0x24
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003c72:	4b29      	ldr	r3, [pc, #164]	; (8003d18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	f003 030c 	and.w	r3, r3, #12
 8003c7e:	2b04      	cmp	r3, #4
 8003c80:	d002      	beq.n	8003c88 <HAL_RCC_GetSysClockFreq+0x30>
 8003c82:	2b08      	cmp	r3, #8
 8003c84:	d003      	beq.n	8003c8e <HAL_RCC_GetSysClockFreq+0x36>
 8003c86:	e03c      	b.n	8003d02 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c88:	4b24      	ldr	r3, [pc, #144]	; (8003d1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003c8a:	623b      	str	r3, [r7, #32]
      break;
 8003c8c:	e03c      	b.n	8003d08 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003c94:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003c98:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9a:	68ba      	ldr	r2, [r7, #8]
 8003c9c:	fa92 f2a2 	rbit	r2, r2
 8003ca0:	607a      	str	r2, [r7, #4]
  return result;
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	fab2 f282 	clz	r2, r2
 8003ca8:	b2d2      	uxtb	r2, r2
 8003caa:	40d3      	lsrs	r3, r2
 8003cac:	4a1c      	ldr	r2, [pc, #112]	; (8003d20 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003cae:	5cd3      	ldrb	r3, [r2, r3]
 8003cb0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003cb2:	4b19      	ldr	r3, [pc, #100]	; (8003d18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb6:	f003 030f 	and.w	r3, r3, #15
 8003cba:	220f      	movs	r2, #15
 8003cbc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	fa92 f2a2 	rbit	r2, r2
 8003cc4:	60fa      	str	r2, [r7, #12]
  return result;
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	fab2 f282 	clz	r2, r2
 8003ccc:	b2d2      	uxtb	r2, r2
 8003cce:	40d3      	lsrs	r3, r2
 8003cd0:	4a14      	ldr	r2, [pc, #80]	; (8003d24 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003cd2:	5cd3      	ldrb	r3, [r2, r3]
 8003cd4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d008      	beq.n	8003cf2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003ce0:	4a0e      	ldr	r2, [pc, #56]	; (8003d1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	fb02 f303 	mul.w	r3, r2, r3
 8003cee:	627b      	str	r3, [r7, #36]	; 0x24
 8003cf0:	e004      	b.n	8003cfc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	4a0c      	ldr	r2, [pc, #48]	; (8003d28 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003cf6:	fb02 f303 	mul.w	r3, r2, r3
 8003cfa:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfe:	623b      	str	r3, [r7, #32]
      break;
 8003d00:	e002      	b.n	8003d08 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d02:	4b06      	ldr	r3, [pc, #24]	; (8003d1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d04:	623b      	str	r3, [r7, #32]
      break;
 8003d06:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d08:	6a3b      	ldr	r3, [r7, #32]
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	372c      	adds	r7, #44	; 0x2c
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	40021000 	.word	0x40021000
 8003d1c:	007a1200 	.word	0x007a1200
 8003d20:	08006394 	.word	0x08006394
 8003d24:	080063a4 	.word	0x080063a4
 8003d28:	003d0900 	.word	0x003d0900

08003d2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d30:	4b03      	ldr	r3, [pc, #12]	; (8003d40 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d32:	681b      	ldr	r3, [r3, #0]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	20000000 	.word	0x20000000

08003d44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003d4a:	f7ff ffef 	bl	8003d2c <HAL_RCC_GetHCLKFreq>
 8003d4e:	4601      	mov	r1, r0
 8003d50:	4b0b      	ldr	r3, [pc, #44]	; (8003d80 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d58:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003d5c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	fa92 f2a2 	rbit	r2, r2
 8003d64:	603a      	str	r2, [r7, #0]
  return result;
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	fab2 f282 	clz	r2, r2
 8003d6c:	b2d2      	uxtb	r2, r2
 8003d6e:	40d3      	lsrs	r3, r2
 8003d70:	4a04      	ldr	r2, [pc, #16]	; (8003d84 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003d72:	5cd3      	ldrb	r3, [r2, r3]
 8003d74:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3708      	adds	r7, #8
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	40021000 	.word	0x40021000
 8003d84:	0800638c 	.word	0x0800638c

08003d88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003d8e:	f7ff ffcd 	bl	8003d2c <HAL_RCC_GetHCLKFreq>
 8003d92:	4601      	mov	r1, r0
 8003d94:	4b0b      	ldr	r3, [pc, #44]	; (8003dc4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003d9c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003da0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	fa92 f2a2 	rbit	r2, r2
 8003da8:	603a      	str	r2, [r7, #0]
  return result;
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	fab2 f282 	clz	r2, r2
 8003db0:	b2d2      	uxtb	r2, r2
 8003db2:	40d3      	lsrs	r3, r2
 8003db4:	4a04      	ldr	r2, [pc, #16]	; (8003dc8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003db6:	5cd3      	ldrb	r3, [r2, r3]
 8003db8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3708      	adds	r7, #8
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	40021000 	.word	0x40021000
 8003dc8:	0800638c 	.word	0x0800638c

08003dcc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b092      	sub	sp, #72	; 0x48
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f000 80d4 	beq.w	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003df0:	4b4e      	ldr	r3, [pc, #312]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003df2:	69db      	ldr	r3, [r3, #28]
 8003df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d10e      	bne.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dfc:	4b4b      	ldr	r3, [pc, #300]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dfe:	69db      	ldr	r3, [r3, #28]
 8003e00:	4a4a      	ldr	r2, [pc, #296]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e06:	61d3      	str	r3, [r2, #28]
 8003e08:	4b48      	ldr	r3, [pc, #288]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e0a:	69db      	ldr	r3, [r3, #28]
 8003e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e10:	60bb      	str	r3, [r7, #8]
 8003e12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e14:	2301      	movs	r3, #1
 8003e16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e1a:	4b45      	ldr	r3, [pc, #276]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d118      	bne.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e26:	4b42      	ldr	r3, [pc, #264]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a41      	ldr	r2, [pc, #260]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e30:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e32:	f7fd fb89 	bl	8001548 <HAL_GetTick>
 8003e36:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e38:	e008      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e3a:	f7fd fb85 	bl	8001548 <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	2b64      	cmp	r3, #100	; 0x64
 8003e46:	d901      	bls.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e169      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e4c:	4b38      	ldr	r3, [pc, #224]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d0f0      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e58:	4b34      	ldr	r3, [pc, #208]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e60:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f000 8084 	beq.w	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d07c      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e78:	4b2c      	ldr	r3, [pc, #176]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e86:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8a:	fa93 f3a3 	rbit	r3, r3
 8003e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e92:	fab3 f383 	clz	r3, r3
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	461a      	mov	r2, r3
 8003e9a:	4b26      	ldr	r3, [pc, #152]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e9c:	4413      	add	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	6013      	str	r3, [r2, #0]
 8003ea6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003eaa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eae:	fa93 f3a3 	rbit	r3, r3
 8003eb2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003eb6:	fab3 f383 	clz	r3, r3
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	4b1d      	ldr	r3, [pc, #116]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ec0:	4413      	add	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003eca:	4a18      	ldr	r2, [pc, #96]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ece:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d04b      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eda:	f7fd fb35 	bl	8001548 <HAL_GetTick>
 8003ede:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee0:	e00a      	b.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ee2:	f7fd fb31 	bl	8001548 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e113      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003ef8:	2302      	movs	r3, #2
 8003efa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efe:	fa93 f3a3 	rbit	r3, r3
 8003f02:	627b      	str	r3, [r7, #36]	; 0x24
 8003f04:	2302      	movs	r3, #2
 8003f06:	623b      	str	r3, [r7, #32]
 8003f08:	6a3b      	ldr	r3, [r7, #32]
 8003f0a:	fa93 f3a3 	rbit	r3, r3
 8003f0e:	61fb      	str	r3, [r7, #28]
  return result;
 8003f10:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f12:	fab3 f383 	clz	r3, r3
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	095b      	lsrs	r3, r3, #5
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	f043 0302 	orr.w	r3, r3, #2
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d108      	bne.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003f26:	4b01      	ldr	r3, [pc, #4]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	e00d      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003f2c:	40021000 	.word	0x40021000
 8003f30:	40007000 	.word	0x40007000
 8003f34:	10908100 	.word	0x10908100
 8003f38:	2302      	movs	r3, #2
 8003f3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	fa93 f3a3 	rbit	r3, r3
 8003f42:	617b      	str	r3, [r7, #20]
 8003f44:	4b78      	ldr	r3, [pc, #480]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f48:	2202      	movs	r2, #2
 8003f4a:	613a      	str	r2, [r7, #16]
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	fa92 f2a2 	rbit	r2, r2
 8003f52:	60fa      	str	r2, [r7, #12]
  return result;
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	fab2 f282 	clz	r2, r2
 8003f5a:	b2d2      	uxtb	r2, r2
 8003f5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f60:	b2d2      	uxtb	r2, r2
 8003f62:	f002 021f 	and.w	r2, r2, #31
 8003f66:	2101      	movs	r1, #1
 8003f68:	fa01 f202 	lsl.w	r2, r1, r2
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d0b7      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003f72:	4b6d      	ldr	r3, [pc, #436]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	496a      	ldr	r1, [pc, #424]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f84:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d105      	bne.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f8c:	4b66      	ldr	r3, [pc, #408]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f8e:	69db      	ldr	r3, [r3, #28]
 8003f90:	4a65      	ldr	r2, [pc, #404]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f96:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d008      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fa4:	4b60      	ldr	r3, [pc, #384]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa8:	f023 0203 	bic.w	r2, r3, #3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	495d      	ldr	r1, [pc, #372]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d008      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fc2:	4b59      	ldr	r3, [pc, #356]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	4956      	ldr	r1, [pc, #344]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0304 	and.w	r3, r3, #4
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d008      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fe0:	4b51      	ldr	r3, [pc, #324]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	494e      	ldr	r1, [pc, #312]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0320 	and.w	r3, r3, #32
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d008      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ffe:	4b4a      	ldr	r3, [pc, #296]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004002:	f023 0210 	bic.w	r2, r3, #16
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	4947      	ldr	r1, [pc, #284]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800400c:	4313      	orrs	r3, r2
 800400e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d008      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800401c:	4b42      	ldr	r3, [pc, #264]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004028:	493f      	ldr	r1, [pc, #252]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800402a:	4313      	orrs	r3, r2
 800402c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004036:	2b00      	cmp	r3, #0
 8004038:	d008      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800403a:	4b3b      	ldr	r3, [pc, #236]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800403c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403e:	f023 0220 	bic.w	r2, r3, #32
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	4938      	ldr	r1, [pc, #224]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004048:	4313      	orrs	r3, r2
 800404a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0308 	and.w	r3, r3, #8
 8004054:	2b00      	cmp	r3, #0
 8004056:	d008      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004058:	4b33      	ldr	r3, [pc, #204]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800405a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	4930      	ldr	r1, [pc, #192]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004066:	4313      	orrs	r3, r2
 8004068:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0310 	and.w	r3, r3, #16
 8004072:	2b00      	cmp	r3, #0
 8004074:	d008      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004076:	4b2c      	ldr	r3, [pc, #176]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	4929      	ldr	r1, [pc, #164]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004084:	4313      	orrs	r3, r2
 8004086:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004090:	2b00      	cmp	r3, #0
 8004092:	d008      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004094:	4b24      	ldr	r3, [pc, #144]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a0:	4921      	ldr	r1, [pc, #132]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d008      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80040b2:	4b1d      	ldr	r3, [pc, #116]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040be:	491a      	ldr	r1, [pc, #104]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d008      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80040d0:	4b15      	ldr	r3, [pc, #84]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d4:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040dc:	4912      	ldr	r1, [pc, #72]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d008      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80040ee:	4b0e      	ldr	r3, [pc, #56]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fa:	490b      	ldr	r1, [pc, #44]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d008      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800410c:	4b06      	ldr	r3, [pc, #24]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800410e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004110:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004118:	4903      	ldr	r1, [pc, #12]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800411a:	4313      	orrs	r3, r2
 800411c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3748      	adds	r7, #72	; 0x48
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	40021000 	.word	0x40021000

0800412c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e073      	b.n	800422a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	7f5b      	ldrb	r3, [r3, #29]
 8004146:	b2db      	uxtb	r3, r3
 8004148:	2b00      	cmp	r3, #0
 800414a:	d105      	bne.n	8004158 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f7fc ff3c 	bl	8000fd0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2202      	movs	r2, #2
 800415c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	f003 0310 	and.w	r3, r3, #16
 8004168:	2b10      	cmp	r3, #16
 800416a:	d055      	beq.n	8004218 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	22ca      	movs	r2, #202	; 0xca
 8004172:	625a      	str	r2, [r3, #36]	; 0x24
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2253      	movs	r2, #83	; 0x53
 800417a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 f99d 	bl	80044bc <RTC_EnterInitMode>
 8004182:	4603      	mov	r3, r0
 8004184:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004186:	7bfb      	ldrb	r3, [r7, #15]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d12c      	bne.n	80041e6 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	6812      	ldr	r2, [r2, #0]
 8004196:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800419a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800419e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6899      	ldr	r1, [r3, #8]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	431a      	orrs	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	695b      	ldr	r3, [r3, #20]
 80041b4:	431a      	orrs	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	68d2      	ldr	r2, [r2, #12]
 80041c6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6919      	ldr	r1, [r3, #16]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	041a      	lsls	r2, r3, #16
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	430a      	orrs	r2, r1
 80041da:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 f9a4 	bl	800452a <RTC_ExitInitMode>
 80041e2:	4603      	mov	r3, r0
 80041e4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80041e6:	7bfb      	ldrb	r3, [r7, #15]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d110      	bne.n	800420e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80041fa:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	699a      	ldr	r2, [r3, #24]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	430a      	orrs	r2, r1
 800420c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	22ff      	movs	r2, #255	; 0xff
 8004214:	625a      	str	r2, [r3, #36]	; 0x24
 8004216:	e001      	b.n	800421c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004218:	2300      	movs	r3, #0
 800421a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800421c:	7bfb      	ldrb	r3, [r7, #15]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d102      	bne.n	8004228 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2201      	movs	r2, #1
 8004226:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8004228:	7bfb      	ldrb	r3, [r7, #15]
}
 800422a:	4618      	mov	r0, r3
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004232:	b590      	push	{r4, r7, lr}
 8004234:	b087      	sub	sp, #28
 8004236:	af00      	add	r7, sp, #0
 8004238:	60f8      	str	r0, [r7, #12]
 800423a:	60b9      	str	r1, [r7, #8]
 800423c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800423e:	2300      	movs	r3, #0
 8004240:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	7f1b      	ldrb	r3, [r3, #28]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d101      	bne.n	800424e <HAL_RTC_SetTime+0x1c>
 800424a:	2302      	movs	r3, #2
 800424c:	e087      	b.n	800435e <HAL_RTC_SetTime+0x12c>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2201      	movs	r2, #1
 8004252:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2202      	movs	r2, #2
 8004258:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d126      	bne.n	80042ae <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800426a:	2b00      	cmp	r3, #0
 800426c:	d102      	bne.n	8004274 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	2200      	movs	r2, #0
 8004272:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	4618      	mov	r0, r3
 800427a:	f000 f97b 	bl	8004574 <RTC_ByteToBcd2>
 800427e:	4603      	mov	r3, r0
 8004280:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	785b      	ldrb	r3, [r3, #1]
 8004286:	4618      	mov	r0, r3
 8004288:	f000 f974 	bl	8004574 <RTC_ByteToBcd2>
 800428c:	4603      	mov	r3, r0
 800428e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004290:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	789b      	ldrb	r3, [r3, #2]
 8004296:	4618      	mov	r0, r3
 8004298:	f000 f96c 	bl	8004574 <RTC_ByteToBcd2>
 800429c:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800429e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	78db      	ldrb	r3, [r3, #3]
 80042a6:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80042a8:	4313      	orrs	r3, r2
 80042aa:	617b      	str	r3, [r7, #20]
 80042ac:	e018      	b.n	80042e0 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d102      	bne.n	80042c2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	2200      	movs	r2, #0
 80042c0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	785b      	ldrb	r3, [r3, #1]
 80042cc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80042ce:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80042d0:	68ba      	ldr	r2, [r7, #8]
 80042d2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80042d4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	78db      	ldrb	r3, [r3, #3]
 80042da:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80042dc:	4313      	orrs	r3, r2
 80042de:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	22ca      	movs	r2, #202	; 0xca
 80042e6:	625a      	str	r2, [r3, #36]	; 0x24
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2253      	movs	r2, #83	; 0x53
 80042ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f000 f8e3 	bl	80044bc <RTC_EnterInitMode>
 80042f6:	4603      	mov	r3, r0
 80042f8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80042fa:	7cfb      	ldrb	r3, [r7, #19]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d120      	bne.n	8004342 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800430a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800430e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689a      	ldr	r2, [r3, #8]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800431e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6899      	ldr	r1, [r3, #8]
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	68da      	ldr	r2, [r3, #12]
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	431a      	orrs	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	430a      	orrs	r2, r1
 8004336:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f000 f8f6 	bl	800452a <RTC_ExitInitMode>
 800433e:	4603      	mov	r3, r0
 8004340:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004342:	7cfb      	ldrb	r3, [r7, #19]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d102      	bne.n	800434e <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2201      	movs	r2, #1
 800434c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	22ff      	movs	r2, #255	; 0xff
 8004354:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	771a      	strb	r2, [r3, #28]

  return status;
 800435c:	7cfb      	ldrb	r3, [r7, #19]
}
 800435e:	4618      	mov	r0, r3
 8004360:	371c      	adds	r7, #28
 8004362:	46bd      	mov	sp, r7
 8004364:	bd90      	pop	{r4, r7, pc}

08004366 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004366:	b590      	push	{r4, r7, lr}
 8004368:	b087      	sub	sp, #28
 800436a:	af00      	add	r7, sp, #0
 800436c:	60f8      	str	r0, [r7, #12]
 800436e:	60b9      	str	r1, [r7, #8]
 8004370:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004372:	2300      	movs	r3, #0
 8004374:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	7f1b      	ldrb	r3, [r3, #28]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d101      	bne.n	8004382 <HAL_RTC_SetDate+0x1c>
 800437e:	2302      	movs	r3, #2
 8004380:	e071      	b.n	8004466 <HAL_RTC_SetDate+0x100>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2201      	movs	r2, #1
 8004386:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2202      	movs	r2, #2
 800438c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d10e      	bne.n	80043b2 <HAL_RTC_SetDate+0x4c>
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	785b      	ldrb	r3, [r3, #1]
 8004398:	f003 0310 	and.w	r3, r3, #16
 800439c:	2b00      	cmp	r3, #0
 800439e:	d008      	beq.n	80043b2 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	785b      	ldrb	r3, [r3, #1]
 80043a4:	f023 0310 	bic.w	r3, r3, #16
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	330a      	adds	r3, #10
 80043ac:	b2da      	uxtb	r2, r3
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d11c      	bne.n	80043f2 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	78db      	ldrb	r3, [r3, #3]
 80043bc:	4618      	mov	r0, r3
 80043be:	f000 f8d9 	bl	8004574 <RTC_ByteToBcd2>
 80043c2:	4603      	mov	r3, r0
 80043c4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	785b      	ldrb	r3, [r3, #1]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 f8d2 	bl	8004574 <RTC_ByteToBcd2>
 80043d0:	4603      	mov	r3, r0
 80043d2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80043d4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	789b      	ldrb	r3, [r3, #2]
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 f8ca 	bl	8004574 <RTC_ByteToBcd2>
 80043e0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80043e2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80043ec:	4313      	orrs	r3, r2
 80043ee:	617b      	str	r3, [r7, #20]
 80043f0:	e00e      	b.n	8004410 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	78db      	ldrb	r3, [r3, #3]
 80043f6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	785b      	ldrb	r3, [r3, #1]
 80043fc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80043fe:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004404:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800440c:	4313      	orrs	r3, r2
 800440e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	22ca      	movs	r2, #202	; 0xca
 8004416:	625a      	str	r2, [r3, #36]	; 0x24
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2253      	movs	r2, #83	; 0x53
 800441e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	f000 f84b 	bl	80044bc <RTC_EnterInitMode>
 8004426:	4603      	mov	r3, r0
 8004428:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800442a:	7cfb      	ldrb	r3, [r7, #19]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d10c      	bne.n	800444a <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800443a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800443e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004440:	68f8      	ldr	r0, [r7, #12]
 8004442:	f000 f872 	bl	800452a <RTC_ExitInitMode>
 8004446:	4603      	mov	r3, r0
 8004448:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800444a:	7cfb      	ldrb	r3, [r7, #19]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d102      	bne.n	8004456 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2201      	movs	r2, #1
 8004454:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	22ff      	movs	r2, #255	; 0xff
 800445c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	771a      	strb	r2, [r3, #28]

  return status;
 8004464:	7cfb      	ldrb	r3, [r7, #19]
}
 8004466:	4618      	mov	r0, r3
 8004468:	371c      	adds	r7, #28
 800446a:	46bd      	mov	sp, r7
 800446c:	bd90      	pop	{r4, r7, pc}
	...

08004470 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004478:	2300      	movs	r3, #0
 800447a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a0d      	ldr	r2, [pc, #52]	; (80044b8 <HAL_RTC_WaitForSynchro+0x48>)
 8004482:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004484:	f7fd f860 	bl	8001548 <HAL_GetTick>
 8004488:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800448a:	e009      	b.n	80044a0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800448c:	f7fd f85c 	bl	8001548 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800449a:	d901      	bls.n	80044a0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e007      	b.n	80044b0 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	f003 0320 	and.w	r3, r3, #32
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d0ee      	beq.n	800448c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3710      	adds	r7, #16
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	0001ff5f 	.word	0x0001ff5f

080044bc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044c4:	2300      	movs	r3, #0
 80044c6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80044c8:	2300      	movs	r3, #0
 80044ca:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d122      	bne.n	8004520 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68da      	ldr	r2, [r3, #12]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80044e8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80044ea:	f7fd f82d 	bl	8001548 <HAL_GetTick>
 80044ee:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80044f0:	e00c      	b.n	800450c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80044f2:	f7fd f829 	bl	8001548 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004500:	d904      	bls.n	800450c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2204      	movs	r2, #4
 8004506:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004516:	2b00      	cmp	r3, #0
 8004518:	d102      	bne.n	8004520 <RTC_EnterInitMode+0x64>
 800451a:	7bfb      	ldrb	r3, [r7, #15]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d1e8      	bne.n	80044f2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004520:	7bfb      	ldrb	r3, [r7, #15]
}
 8004522:	4618      	mov	r0, r3
 8004524:	3710      	adds	r7, #16
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b084      	sub	sp, #16
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004532:	2300      	movs	r3, #0
 8004534:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68da      	ldr	r2, [r3, #12]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004544:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f003 0320 	and.w	r3, r3, #32
 8004550:	2b00      	cmp	r3, #0
 8004552:	d10a      	bne.n	800456a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f7ff ff8b 	bl	8004470 <HAL_RTC_WaitForSynchro>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d004      	beq.n	800456a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2204      	movs	r2, #4
 8004564:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800456a:	7bfb      	ldrb	r3, [r7, #15]
}
 800456c:	4618      	mov	r0, r3
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	4603      	mov	r3, r0
 800457c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800457e:	2300      	movs	r3, #0
 8004580:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8004582:	e005      	b.n	8004590 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	3301      	adds	r3, #1
 8004588:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800458a:	79fb      	ldrb	r3, [r7, #7]
 800458c:	3b0a      	subs	r3, #10
 800458e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004590:	79fb      	ldrb	r3, [r7, #7]
 8004592:	2b09      	cmp	r3, #9
 8004594:	d8f6      	bhi.n	8004584 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	b2db      	uxtb	r3, r3
 800459a:	011b      	lsls	r3, r3, #4
 800459c:	b2da      	uxtb	r2, r3
 800459e:	79fb      	ldrb	r3, [r7, #7]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	b2db      	uxtb	r3, r3
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3714      	adds	r7, #20
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d101      	bne.n	80045c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e049      	b.n	8004656 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d106      	bne.n	80045dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f7fc fd20 	bl	800101c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2202      	movs	r2, #2
 80045e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	3304      	adds	r3, #4
 80045ec:	4619      	mov	r1, r3
 80045ee:	4610      	mov	r0, r2
 80045f0:	f000 fc38 	bl	8004e64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3708      	adds	r7, #8
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800465e:	b580      	push	{r7, lr}
 8004660:	b082      	sub	sp, #8
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d101      	bne.n	8004670 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e049      	b.n	8004704 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004676:	b2db      	uxtb	r3, r3
 8004678:	2b00      	cmp	r3, #0
 800467a:	d106      	bne.n	800468a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f7fc fd3d 	bl	8001104 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2202      	movs	r2, #2
 800468e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	3304      	adds	r3, #4
 800469a:	4619      	mov	r1, r3
 800469c:	4610      	mov	r0, r2
 800469e:	f000 fbe1 	bl	8004e64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2201      	movs	r2, #1
 80046a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3708      	adds	r7, #8
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d101      	bne.n	800471e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e049      	b.n	80047b2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d106      	bne.n	8004738 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f841 	bl	80047ba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2202      	movs	r2, #2
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	3304      	adds	r3, #4
 8004748:	4619      	mov	r1, r3
 800474a:	4610      	mov	r0, r2
 800474c:	f000 fb8a 	bl	8004e64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3708      	adds	r7, #8
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80047ba:	b480      	push	{r7}
 80047bc:	b083      	sub	sp, #12
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80047c2:	bf00      	nop
 80047c4:	370c      	adds	r7, #12
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr

080047ce <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80047ce:	b580      	push	{r7, lr}
 80047d0:	b082      	sub	sp, #8
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d101      	bne.n	80047e0 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e049      	b.n	8004874 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d106      	bne.n	80047fa <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f7fc fc45 	bl	8001084 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2202      	movs	r2, #2
 80047fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	3304      	adds	r3, #4
 800480a:	4619      	mov	r1, r3
 800480c:	4610      	mov	r0, r2
 800480e:	f000 fb29 	bl	8004e64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2201      	movs	r2, #1
 8004826:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2201      	movs	r2, #1
 8004836:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2201      	movs	r2, #1
 800483e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2201      	movs	r2, #1
 8004856:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	3708      	adds	r7, #8
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b086      	sub	sp, #24
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004888:	2300      	movs	r3, #0
 800488a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004892:	2b01      	cmp	r3, #1
 8004894:	d101      	bne.n	800489a <HAL_TIM_OC_ConfigChannel+0x1e>
 8004896:	2302      	movs	r3, #2
 8004898:	e066      	b.n	8004968 <HAL_TIM_OC_ConfigChannel+0xec>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2b14      	cmp	r3, #20
 80048a6:	d857      	bhi.n	8004958 <HAL_TIM_OC_ConfigChannel+0xdc>
 80048a8:	a201      	add	r2, pc, #4	; (adr r2, 80048b0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80048aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ae:	bf00      	nop
 80048b0:	08004905 	.word	0x08004905
 80048b4:	08004959 	.word	0x08004959
 80048b8:	08004959 	.word	0x08004959
 80048bc:	08004959 	.word	0x08004959
 80048c0:	08004913 	.word	0x08004913
 80048c4:	08004959 	.word	0x08004959
 80048c8:	08004959 	.word	0x08004959
 80048cc:	08004959 	.word	0x08004959
 80048d0:	08004921 	.word	0x08004921
 80048d4:	08004959 	.word	0x08004959
 80048d8:	08004959 	.word	0x08004959
 80048dc:	08004959 	.word	0x08004959
 80048e0:	0800492f 	.word	0x0800492f
 80048e4:	08004959 	.word	0x08004959
 80048e8:	08004959 	.word	0x08004959
 80048ec:	08004959 	.word	0x08004959
 80048f0:	0800493d 	.word	0x0800493d
 80048f4:	08004959 	.word	0x08004959
 80048f8:	08004959 	.word	0x08004959
 80048fc:	08004959 	.word	0x08004959
 8004900:	0800494b 	.word	0x0800494b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68b9      	ldr	r1, [r7, #8]
 800490a:	4618      	mov	r0, r3
 800490c:	f000 fb3a 	bl	8004f84 <TIM_OC1_SetConfig>
      break;
 8004910:	e025      	b.n	800495e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68b9      	ldr	r1, [r7, #8]
 8004918:	4618      	mov	r0, r3
 800491a:	f000 fbc3 	bl	80050a4 <TIM_OC2_SetConfig>
      break;
 800491e:	e01e      	b.n	800495e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68b9      	ldr	r1, [r7, #8]
 8004926:	4618      	mov	r0, r3
 8004928:	f000 fc46 	bl	80051b8 <TIM_OC3_SetConfig>
      break;
 800492c:	e017      	b.n	800495e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68b9      	ldr	r1, [r7, #8]
 8004934:	4618      	mov	r0, r3
 8004936:	f000 fcc7 	bl	80052c8 <TIM_OC4_SetConfig>
      break;
 800493a:	e010      	b.n	800495e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68b9      	ldr	r1, [r7, #8]
 8004942:	4618      	mov	r0, r3
 8004944:	f000 fd2a 	bl	800539c <TIM_OC5_SetConfig>
      break;
 8004948:	e009      	b.n	800495e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68b9      	ldr	r1, [r7, #8]
 8004950:	4618      	mov	r0, r3
 8004952:	f000 fd87 	bl	8005464 <TIM_OC6_SetConfig>
      break;
 8004956:	e002      	b.n	800495e <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	75fb      	strb	r3, [r7, #23]
      break;
 800495c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004966:	7dfb      	ldrb	r3, [r7, #23]
}
 8004968:	4618      	mov	r0, r3
 800496a:	3718      	adds	r7, #24
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b086      	sub	sp, #24
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800497c:	2300      	movs	r3, #0
 800497e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004986:	2b01      	cmp	r3, #1
 8004988:	d101      	bne.n	800498e <HAL_TIM_IC_ConfigChannel+0x1e>
 800498a:	2302      	movs	r3, #2
 800498c:	e088      	b.n	8004aa0 <HAL_TIM_IC_ConfigChannel+0x130>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d11b      	bne.n	80049d4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6818      	ldr	r0, [r3, #0]
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	6819      	ldr	r1, [r3, #0]
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	685a      	ldr	r2, [r3, #4]
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	f000 fdc0 	bl	8005530 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	699a      	ldr	r2, [r3, #24]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f022 020c 	bic.w	r2, r2, #12
 80049be:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	6999      	ldr	r1, [r3, #24]
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	689a      	ldr	r2, [r3, #8]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	430a      	orrs	r2, r1
 80049d0:	619a      	str	r2, [r3, #24]
 80049d2:	e060      	b.n	8004a96 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b04      	cmp	r3, #4
 80049d8:	d11c      	bne.n	8004a14 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6818      	ldr	r0, [r3, #0]
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	6819      	ldr	r1, [r3, #0]
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	685a      	ldr	r2, [r3, #4]
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	f000 fe38 	bl	800565e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	699a      	ldr	r2, [r3, #24]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80049fc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	6999      	ldr	r1, [r3, #24]
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	021a      	lsls	r2, r3, #8
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	619a      	str	r2, [r3, #24]
 8004a12:	e040      	b.n	8004a96 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2b08      	cmp	r3, #8
 8004a18:	d11b      	bne.n	8004a52 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6818      	ldr	r0, [r3, #0]
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	6819      	ldr	r1, [r3, #0]
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	685a      	ldr	r2, [r3, #4]
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	f000 fe85 	bl	8005738 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	69da      	ldr	r2, [r3, #28]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f022 020c 	bic.w	r2, r2, #12
 8004a3c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	69d9      	ldr	r1, [r3, #28]
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	689a      	ldr	r2, [r3, #8]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	430a      	orrs	r2, r1
 8004a4e:	61da      	str	r2, [r3, #28]
 8004a50:	e021      	b.n	8004a96 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2b0c      	cmp	r3, #12
 8004a56:	d11c      	bne.n	8004a92 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6818      	ldr	r0, [r3, #0]
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	6819      	ldr	r1, [r3, #0]
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	685a      	ldr	r2, [r3, #4]
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	f000 fea2 	bl	80057b0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	69da      	ldr	r2, [r3, #28]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004a7a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	69d9      	ldr	r1, [r3, #28]
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	021a      	lsls	r2, r3, #8
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	61da      	str	r2, [r3, #28]
 8004a90:	e001      	b.n	8004a96 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3718      	adds	r7, #24
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b086      	sub	sp, #24
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d101      	bne.n	8004ac6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	e0ff      	b.n	8004cc6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2b14      	cmp	r3, #20
 8004ad2:	f200 80f0 	bhi.w	8004cb6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004ad6:	a201      	add	r2, pc, #4	; (adr r2, 8004adc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004adc:	08004b31 	.word	0x08004b31
 8004ae0:	08004cb7 	.word	0x08004cb7
 8004ae4:	08004cb7 	.word	0x08004cb7
 8004ae8:	08004cb7 	.word	0x08004cb7
 8004aec:	08004b71 	.word	0x08004b71
 8004af0:	08004cb7 	.word	0x08004cb7
 8004af4:	08004cb7 	.word	0x08004cb7
 8004af8:	08004cb7 	.word	0x08004cb7
 8004afc:	08004bb3 	.word	0x08004bb3
 8004b00:	08004cb7 	.word	0x08004cb7
 8004b04:	08004cb7 	.word	0x08004cb7
 8004b08:	08004cb7 	.word	0x08004cb7
 8004b0c:	08004bf3 	.word	0x08004bf3
 8004b10:	08004cb7 	.word	0x08004cb7
 8004b14:	08004cb7 	.word	0x08004cb7
 8004b18:	08004cb7 	.word	0x08004cb7
 8004b1c:	08004c35 	.word	0x08004c35
 8004b20:	08004cb7 	.word	0x08004cb7
 8004b24:	08004cb7 	.word	0x08004cb7
 8004b28:	08004cb7 	.word	0x08004cb7
 8004b2c:	08004c75 	.word	0x08004c75
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68b9      	ldr	r1, [r7, #8]
 8004b36:	4618      	mov	r0, r3
 8004b38:	f000 fa24 	bl	8004f84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	699a      	ldr	r2, [r3, #24]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f042 0208 	orr.w	r2, r2, #8
 8004b4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	699a      	ldr	r2, [r3, #24]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 0204 	bic.w	r2, r2, #4
 8004b5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	6999      	ldr	r1, [r3, #24]
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	691a      	ldr	r2, [r3, #16]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	619a      	str	r2, [r3, #24]
      break;
 8004b6e:	e0a5      	b.n	8004cbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68b9      	ldr	r1, [r7, #8]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f000 fa94 	bl	80050a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	699a      	ldr	r2, [r3, #24]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	699a      	ldr	r2, [r3, #24]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6999      	ldr	r1, [r3, #24]
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	021a      	lsls	r2, r3, #8
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	430a      	orrs	r2, r1
 8004bae:	619a      	str	r2, [r3, #24]
      break;
 8004bb0:	e084      	b.n	8004cbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68b9      	ldr	r1, [r7, #8]
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f000 fafd 	bl	80051b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	69da      	ldr	r2, [r3, #28]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f042 0208 	orr.w	r2, r2, #8
 8004bcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	69da      	ldr	r2, [r3, #28]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f022 0204 	bic.w	r2, r2, #4
 8004bdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	69d9      	ldr	r1, [r3, #28]
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	691a      	ldr	r2, [r3, #16]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	61da      	str	r2, [r3, #28]
      break;
 8004bf0:	e064      	b.n	8004cbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68b9      	ldr	r1, [r7, #8]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f000 fb65 	bl	80052c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	69da      	ldr	r2, [r3, #28]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	69da      	ldr	r2, [r3, #28]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	69d9      	ldr	r1, [r3, #28]
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	021a      	lsls	r2, r3, #8
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	61da      	str	r2, [r3, #28]
      break;
 8004c32:	e043      	b.n	8004cbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68b9      	ldr	r1, [r7, #8]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f000 fbae 	bl	800539c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f042 0208 	orr.w	r2, r2, #8
 8004c4e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f022 0204 	bic.w	r2, r2, #4
 8004c5e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	691a      	ldr	r2, [r3, #16]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004c72:	e023      	b.n	8004cbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68b9      	ldr	r1, [r7, #8]
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f000 fbf2 	bl	8005464 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c8e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	021a      	lsls	r2, r3, #8
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	430a      	orrs	r2, r1
 8004cb2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004cb4:	e002      	b.n	8004cbc <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	75fb      	strb	r3, [r7, #23]
      break;
 8004cba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004cc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3718      	adds	r7, #24
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop

08004cd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d101      	bne.n	8004cec <HAL_TIM_ConfigClockSource+0x1c>
 8004ce8:	2302      	movs	r3, #2
 8004cea:	e0b6      	b.n	8004e5a <HAL_TIM_ConfigClockSource+0x18a>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68ba      	ldr	r2, [r7, #8]
 8004d1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d28:	d03e      	beq.n	8004da8 <HAL_TIM_ConfigClockSource+0xd8>
 8004d2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d2e:	f200 8087 	bhi.w	8004e40 <HAL_TIM_ConfigClockSource+0x170>
 8004d32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d36:	f000 8086 	beq.w	8004e46 <HAL_TIM_ConfigClockSource+0x176>
 8004d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d3e:	d87f      	bhi.n	8004e40 <HAL_TIM_ConfigClockSource+0x170>
 8004d40:	2b70      	cmp	r3, #112	; 0x70
 8004d42:	d01a      	beq.n	8004d7a <HAL_TIM_ConfigClockSource+0xaa>
 8004d44:	2b70      	cmp	r3, #112	; 0x70
 8004d46:	d87b      	bhi.n	8004e40 <HAL_TIM_ConfigClockSource+0x170>
 8004d48:	2b60      	cmp	r3, #96	; 0x60
 8004d4a:	d050      	beq.n	8004dee <HAL_TIM_ConfigClockSource+0x11e>
 8004d4c:	2b60      	cmp	r3, #96	; 0x60
 8004d4e:	d877      	bhi.n	8004e40 <HAL_TIM_ConfigClockSource+0x170>
 8004d50:	2b50      	cmp	r3, #80	; 0x50
 8004d52:	d03c      	beq.n	8004dce <HAL_TIM_ConfigClockSource+0xfe>
 8004d54:	2b50      	cmp	r3, #80	; 0x50
 8004d56:	d873      	bhi.n	8004e40 <HAL_TIM_ConfigClockSource+0x170>
 8004d58:	2b40      	cmp	r3, #64	; 0x40
 8004d5a:	d058      	beq.n	8004e0e <HAL_TIM_ConfigClockSource+0x13e>
 8004d5c:	2b40      	cmp	r3, #64	; 0x40
 8004d5e:	d86f      	bhi.n	8004e40 <HAL_TIM_ConfigClockSource+0x170>
 8004d60:	2b30      	cmp	r3, #48	; 0x30
 8004d62:	d064      	beq.n	8004e2e <HAL_TIM_ConfigClockSource+0x15e>
 8004d64:	2b30      	cmp	r3, #48	; 0x30
 8004d66:	d86b      	bhi.n	8004e40 <HAL_TIM_ConfigClockSource+0x170>
 8004d68:	2b20      	cmp	r3, #32
 8004d6a:	d060      	beq.n	8004e2e <HAL_TIM_ConfigClockSource+0x15e>
 8004d6c:	2b20      	cmp	r3, #32
 8004d6e:	d867      	bhi.n	8004e40 <HAL_TIM_ConfigClockSource+0x170>
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d05c      	beq.n	8004e2e <HAL_TIM_ConfigClockSource+0x15e>
 8004d74:	2b10      	cmp	r3, #16
 8004d76:	d05a      	beq.n	8004e2e <HAL_TIM_ConfigClockSource+0x15e>
 8004d78:	e062      	b.n	8004e40 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6818      	ldr	r0, [r3, #0]
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	6899      	ldr	r1, [r3, #8]
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	685a      	ldr	r2, [r3, #4]
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	f000 fd69 	bl	8005860 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	609a      	str	r2, [r3, #8]
      break;
 8004da6:	e04f      	b.n	8004e48 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6818      	ldr	r0, [r3, #0]
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	6899      	ldr	r1, [r3, #8]
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	f000 fd52 	bl	8005860 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	689a      	ldr	r2, [r3, #8]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004dca:	609a      	str	r2, [r3, #8]
      break;
 8004dcc:	e03c      	b.n	8004e48 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6818      	ldr	r0, [r3, #0]
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	6859      	ldr	r1, [r3, #4]
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	461a      	mov	r2, r3
 8004ddc:	f000 fc10 	bl	8005600 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2150      	movs	r1, #80	; 0x50
 8004de6:	4618      	mov	r0, r3
 8004de8:	f000 fd1f 	bl	800582a <TIM_ITRx_SetConfig>
      break;
 8004dec:	e02c      	b.n	8004e48 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6818      	ldr	r0, [r3, #0]
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	6859      	ldr	r1, [r3, #4]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	f000 fc6c 	bl	80056d8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2160      	movs	r1, #96	; 0x60
 8004e06:	4618      	mov	r0, r3
 8004e08:	f000 fd0f 	bl	800582a <TIM_ITRx_SetConfig>
      break;
 8004e0c:	e01c      	b.n	8004e48 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6818      	ldr	r0, [r3, #0]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	6859      	ldr	r1, [r3, #4]
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	f000 fbf0 	bl	8005600 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2140      	movs	r1, #64	; 0x40
 8004e26:	4618      	mov	r0, r3
 8004e28:	f000 fcff 	bl	800582a <TIM_ITRx_SetConfig>
      break;
 8004e2c:	e00c      	b.n	8004e48 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4619      	mov	r1, r3
 8004e38:	4610      	mov	r0, r2
 8004e3a:	f000 fcf6 	bl	800582a <TIM_ITRx_SetConfig>
      break;
 8004e3e:	e003      	b.n	8004e48 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	73fb      	strb	r3, [r7, #15]
      break;
 8004e44:	e000      	b.n	8004e48 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004e46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3710      	adds	r7, #16
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
	...

08004e64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b085      	sub	sp, #20
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a3c      	ldr	r2, [pc, #240]	; (8004f68 <TIM_Base_SetConfig+0x104>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d00f      	beq.n	8004e9c <TIM_Base_SetConfig+0x38>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e82:	d00b      	beq.n	8004e9c <TIM_Base_SetConfig+0x38>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a39      	ldr	r2, [pc, #228]	; (8004f6c <TIM_Base_SetConfig+0x108>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d007      	beq.n	8004e9c <TIM_Base_SetConfig+0x38>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a38      	ldr	r2, [pc, #224]	; (8004f70 <TIM_Base_SetConfig+0x10c>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d003      	beq.n	8004e9c <TIM_Base_SetConfig+0x38>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a37      	ldr	r2, [pc, #220]	; (8004f74 <TIM_Base_SetConfig+0x110>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d108      	bne.n	8004eae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a2d      	ldr	r2, [pc, #180]	; (8004f68 <TIM_Base_SetConfig+0x104>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d01b      	beq.n	8004eee <TIM_Base_SetConfig+0x8a>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ebc:	d017      	beq.n	8004eee <TIM_Base_SetConfig+0x8a>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a2a      	ldr	r2, [pc, #168]	; (8004f6c <TIM_Base_SetConfig+0x108>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d013      	beq.n	8004eee <TIM_Base_SetConfig+0x8a>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a29      	ldr	r2, [pc, #164]	; (8004f70 <TIM_Base_SetConfig+0x10c>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d00f      	beq.n	8004eee <TIM_Base_SetConfig+0x8a>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a28      	ldr	r2, [pc, #160]	; (8004f74 <TIM_Base_SetConfig+0x110>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d00b      	beq.n	8004eee <TIM_Base_SetConfig+0x8a>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a27      	ldr	r2, [pc, #156]	; (8004f78 <TIM_Base_SetConfig+0x114>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d007      	beq.n	8004eee <TIM_Base_SetConfig+0x8a>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a26      	ldr	r2, [pc, #152]	; (8004f7c <TIM_Base_SetConfig+0x118>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d003      	beq.n	8004eee <TIM_Base_SetConfig+0x8a>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a25      	ldr	r2, [pc, #148]	; (8004f80 <TIM_Base_SetConfig+0x11c>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d108      	bne.n	8004f00 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ef4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	689a      	ldr	r2, [r3, #8]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a10      	ldr	r2, [pc, #64]	; (8004f68 <TIM_Base_SetConfig+0x104>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d00f      	beq.n	8004f4c <TIM_Base_SetConfig+0xe8>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a11      	ldr	r2, [pc, #68]	; (8004f74 <TIM_Base_SetConfig+0x110>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d00b      	beq.n	8004f4c <TIM_Base_SetConfig+0xe8>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a10      	ldr	r2, [pc, #64]	; (8004f78 <TIM_Base_SetConfig+0x114>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d007      	beq.n	8004f4c <TIM_Base_SetConfig+0xe8>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a0f      	ldr	r2, [pc, #60]	; (8004f7c <TIM_Base_SetConfig+0x118>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d003      	beq.n	8004f4c <TIM_Base_SetConfig+0xe8>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a0e      	ldr	r2, [pc, #56]	; (8004f80 <TIM_Base_SetConfig+0x11c>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d103      	bne.n	8004f54 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	691a      	ldr	r2, [r3, #16]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	615a      	str	r2, [r3, #20]
}
 8004f5a:	bf00      	nop
 8004f5c:	3714      	adds	r7, #20
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	40012c00 	.word	0x40012c00
 8004f6c:	40000400 	.word	0x40000400
 8004f70:	40000800 	.word	0x40000800
 8004f74:	40013400 	.word	0x40013400
 8004f78:	40014000 	.word	0x40014000
 8004f7c:	40014400 	.word	0x40014400
 8004f80:	40014800 	.word	0x40014800

08004f84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b087      	sub	sp, #28
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	f023 0201 	bic.w	r2, r3, #1
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	699b      	ldr	r3, [r3, #24]
 8004faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f023 0303 	bic.w	r3, r3, #3
 8004fbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	f023 0302 	bic.w	r3, r3, #2
 8004fd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a2c      	ldr	r2, [pc, #176]	; (8005090 <TIM_OC1_SetConfig+0x10c>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d00f      	beq.n	8005004 <TIM_OC1_SetConfig+0x80>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a2b      	ldr	r2, [pc, #172]	; (8005094 <TIM_OC1_SetConfig+0x110>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d00b      	beq.n	8005004 <TIM_OC1_SetConfig+0x80>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a2a      	ldr	r2, [pc, #168]	; (8005098 <TIM_OC1_SetConfig+0x114>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d007      	beq.n	8005004 <TIM_OC1_SetConfig+0x80>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a29      	ldr	r2, [pc, #164]	; (800509c <TIM_OC1_SetConfig+0x118>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d003      	beq.n	8005004 <TIM_OC1_SetConfig+0x80>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a28      	ldr	r2, [pc, #160]	; (80050a0 <TIM_OC1_SetConfig+0x11c>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d10c      	bne.n	800501e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	f023 0308 	bic.w	r3, r3, #8
 800500a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	4313      	orrs	r3, r2
 8005014:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	f023 0304 	bic.w	r3, r3, #4
 800501c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a1b      	ldr	r2, [pc, #108]	; (8005090 <TIM_OC1_SetConfig+0x10c>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d00f      	beq.n	8005046 <TIM_OC1_SetConfig+0xc2>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a1a      	ldr	r2, [pc, #104]	; (8005094 <TIM_OC1_SetConfig+0x110>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d00b      	beq.n	8005046 <TIM_OC1_SetConfig+0xc2>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a19      	ldr	r2, [pc, #100]	; (8005098 <TIM_OC1_SetConfig+0x114>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d007      	beq.n	8005046 <TIM_OC1_SetConfig+0xc2>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a18      	ldr	r2, [pc, #96]	; (800509c <TIM_OC1_SetConfig+0x118>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d003      	beq.n	8005046 <TIM_OC1_SetConfig+0xc2>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a17      	ldr	r2, [pc, #92]	; (80050a0 <TIM_OC1_SetConfig+0x11c>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d111      	bne.n	800506a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800504c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005054:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	693a      	ldr	r2, [r7, #16]
 800505c:	4313      	orrs	r3, r2
 800505e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	693a      	ldr	r2, [r7, #16]
 8005066:	4313      	orrs	r3, r2
 8005068:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	685a      	ldr	r2, [r3, #4]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	621a      	str	r2, [r3, #32]
}
 8005084:	bf00      	nop
 8005086:	371c      	adds	r7, #28
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr
 8005090:	40012c00 	.word	0x40012c00
 8005094:	40013400 	.word	0x40013400
 8005098:	40014000 	.word	0x40014000
 800509c:	40014400 	.word	0x40014400
 80050a0:	40014800 	.word	0x40014800

080050a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b087      	sub	sp, #28
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	f023 0210 	bic.w	r2, r3, #16
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a1b      	ldr	r3, [r3, #32]
 80050be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	021b      	lsls	r3, r3, #8
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	f023 0320 	bic.w	r3, r3, #32
 80050f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	011b      	lsls	r3, r3, #4
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a28      	ldr	r2, [pc, #160]	; (80051a4 <TIM_OC2_SetConfig+0x100>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d003      	beq.n	8005110 <TIM_OC2_SetConfig+0x6c>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a27      	ldr	r2, [pc, #156]	; (80051a8 <TIM_OC2_SetConfig+0x104>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d10d      	bne.n	800512c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005116:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	011b      	lsls	r3, r3, #4
 800511e:	697a      	ldr	r2, [r7, #20]
 8005120:	4313      	orrs	r3, r2
 8005122:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800512a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a1d      	ldr	r2, [pc, #116]	; (80051a4 <TIM_OC2_SetConfig+0x100>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d00f      	beq.n	8005154 <TIM_OC2_SetConfig+0xb0>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a1c      	ldr	r2, [pc, #112]	; (80051a8 <TIM_OC2_SetConfig+0x104>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d00b      	beq.n	8005154 <TIM_OC2_SetConfig+0xb0>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a1b      	ldr	r2, [pc, #108]	; (80051ac <TIM_OC2_SetConfig+0x108>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d007      	beq.n	8005154 <TIM_OC2_SetConfig+0xb0>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a1a      	ldr	r2, [pc, #104]	; (80051b0 <TIM_OC2_SetConfig+0x10c>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d003      	beq.n	8005154 <TIM_OC2_SetConfig+0xb0>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a19      	ldr	r2, [pc, #100]	; (80051b4 <TIM_OC2_SetConfig+0x110>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d113      	bne.n	800517c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800515a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005162:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	695b      	ldr	r3, [r3, #20]
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	693a      	ldr	r2, [r7, #16]
 800516c:	4313      	orrs	r3, r2
 800516e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	699b      	ldr	r3, [r3, #24]
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	4313      	orrs	r3, r2
 800517a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	693a      	ldr	r2, [r7, #16]
 8005180:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	621a      	str	r2, [r3, #32]
}
 8005196:	bf00      	nop
 8005198:	371c      	adds	r7, #28
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	40012c00 	.word	0x40012c00
 80051a8:	40013400 	.word	0x40013400
 80051ac:	40014000 	.word	0x40014000
 80051b0:	40014400 	.word	0x40014400
 80051b4:	40014800 	.word	0x40014800

080051b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b087      	sub	sp, #28
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a1b      	ldr	r3, [r3, #32]
 80051d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	69db      	ldr	r3, [r3, #28]
 80051de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f023 0303 	bic.w	r3, r3, #3
 80051f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005204:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	021b      	lsls	r3, r3, #8
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	4313      	orrs	r3, r2
 8005210:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a27      	ldr	r2, [pc, #156]	; (80052b4 <TIM_OC3_SetConfig+0xfc>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d003      	beq.n	8005222 <TIM_OC3_SetConfig+0x6a>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a26      	ldr	r2, [pc, #152]	; (80052b8 <TIM_OC3_SetConfig+0x100>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d10d      	bne.n	800523e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005228:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	021b      	lsls	r3, r3, #8
 8005230:	697a      	ldr	r2, [r7, #20]
 8005232:	4313      	orrs	r3, r2
 8005234:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800523c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a1c      	ldr	r2, [pc, #112]	; (80052b4 <TIM_OC3_SetConfig+0xfc>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d00f      	beq.n	8005266 <TIM_OC3_SetConfig+0xae>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a1b      	ldr	r2, [pc, #108]	; (80052b8 <TIM_OC3_SetConfig+0x100>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d00b      	beq.n	8005266 <TIM_OC3_SetConfig+0xae>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a1a      	ldr	r2, [pc, #104]	; (80052bc <TIM_OC3_SetConfig+0x104>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d007      	beq.n	8005266 <TIM_OC3_SetConfig+0xae>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a19      	ldr	r2, [pc, #100]	; (80052c0 <TIM_OC3_SetConfig+0x108>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d003      	beq.n	8005266 <TIM_OC3_SetConfig+0xae>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a18      	ldr	r2, [pc, #96]	; (80052c4 <TIM_OC3_SetConfig+0x10c>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d113      	bne.n	800528e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800526c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005274:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	695b      	ldr	r3, [r3, #20]
 800527a:	011b      	lsls	r3, r3, #4
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	4313      	orrs	r3, r2
 8005280:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	011b      	lsls	r3, r3, #4
 8005288:	693a      	ldr	r2, [r7, #16]
 800528a:	4313      	orrs	r3, r2
 800528c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	685a      	ldr	r2, [r3, #4]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	621a      	str	r2, [r3, #32]
}
 80052a8:	bf00      	nop
 80052aa:	371c      	adds	r7, #28
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr
 80052b4:	40012c00 	.word	0x40012c00
 80052b8:	40013400 	.word	0x40013400
 80052bc:	40014000 	.word	0x40014000
 80052c0:	40014400 	.word	0x40014400
 80052c4:	40014800 	.word	0x40014800

080052c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b087      	sub	sp, #28
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a1b      	ldr	r3, [r3, #32]
 80052d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	69db      	ldr	r3, [r3, #28]
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005302:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	021b      	lsls	r3, r3, #8
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	4313      	orrs	r3, r2
 800530e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005316:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	031b      	lsls	r3, r3, #12
 800531e:	693a      	ldr	r2, [r7, #16]
 8005320:	4313      	orrs	r3, r2
 8005322:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a18      	ldr	r2, [pc, #96]	; (8005388 <TIM_OC4_SetConfig+0xc0>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d00f      	beq.n	800534c <TIM_OC4_SetConfig+0x84>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a17      	ldr	r2, [pc, #92]	; (800538c <TIM_OC4_SetConfig+0xc4>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d00b      	beq.n	800534c <TIM_OC4_SetConfig+0x84>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a16      	ldr	r2, [pc, #88]	; (8005390 <TIM_OC4_SetConfig+0xc8>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d007      	beq.n	800534c <TIM_OC4_SetConfig+0x84>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a15      	ldr	r2, [pc, #84]	; (8005394 <TIM_OC4_SetConfig+0xcc>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d003      	beq.n	800534c <TIM_OC4_SetConfig+0x84>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a14      	ldr	r2, [pc, #80]	; (8005398 <TIM_OC4_SetConfig+0xd0>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d109      	bne.n	8005360 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005352:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	695b      	ldr	r3, [r3, #20]
 8005358:	019b      	lsls	r3, r3, #6
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	4313      	orrs	r3, r2
 800535e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	697a      	ldr	r2, [r7, #20]
 8005364:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	693a      	ldr	r2, [r7, #16]
 8005378:	621a      	str	r2, [r3, #32]
}
 800537a:	bf00      	nop
 800537c:	371c      	adds	r7, #28
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	40012c00 	.word	0x40012c00
 800538c:	40013400 	.word	0x40013400
 8005390:	40014000 	.word	0x40014000
 8005394:	40014400 	.word	0x40014400
 8005398:	40014800 	.word	0x40014800

0800539c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800539c:	b480      	push	{r7}
 800539e:	b087      	sub	sp, #28
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a1b      	ldr	r3, [r3, #32]
 80053aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a1b      	ldr	r3, [r3, #32]
 80053b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80053e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	041b      	lsls	r3, r3, #16
 80053e8:	693a      	ldr	r2, [r7, #16]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a17      	ldr	r2, [pc, #92]	; (8005450 <TIM_OC5_SetConfig+0xb4>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d00f      	beq.n	8005416 <TIM_OC5_SetConfig+0x7a>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a16      	ldr	r2, [pc, #88]	; (8005454 <TIM_OC5_SetConfig+0xb8>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d00b      	beq.n	8005416 <TIM_OC5_SetConfig+0x7a>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a15      	ldr	r2, [pc, #84]	; (8005458 <TIM_OC5_SetConfig+0xbc>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d007      	beq.n	8005416 <TIM_OC5_SetConfig+0x7a>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a14      	ldr	r2, [pc, #80]	; (800545c <TIM_OC5_SetConfig+0xc0>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d003      	beq.n	8005416 <TIM_OC5_SetConfig+0x7a>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a13      	ldr	r2, [pc, #76]	; (8005460 <TIM_OC5_SetConfig+0xc4>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d109      	bne.n	800542a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800541c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	021b      	lsls	r3, r3, #8
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	4313      	orrs	r3, r2
 8005428:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	697a      	ldr	r2, [r7, #20]
 800542e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	685a      	ldr	r2, [r3, #4]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	621a      	str	r2, [r3, #32]
}
 8005444:	bf00      	nop
 8005446:	371c      	adds	r7, #28
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr
 8005450:	40012c00 	.word	0x40012c00
 8005454:	40013400 	.word	0x40013400
 8005458:	40014000 	.word	0x40014000
 800545c:	40014400 	.word	0x40014400
 8005460:	40014800 	.word	0x40014800

08005464 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005464:	b480      	push	{r7}
 8005466:	b087      	sub	sp, #28
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a1b      	ldr	r3, [r3, #32]
 8005472:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a1b      	ldr	r3, [r3, #32]
 800547e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800548a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005496:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	021b      	lsls	r3, r3, #8
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80054aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	051b      	lsls	r3, r3, #20
 80054b2:	693a      	ldr	r2, [r7, #16]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a18      	ldr	r2, [pc, #96]	; (800551c <TIM_OC6_SetConfig+0xb8>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d00f      	beq.n	80054e0 <TIM_OC6_SetConfig+0x7c>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a17      	ldr	r2, [pc, #92]	; (8005520 <TIM_OC6_SetConfig+0xbc>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d00b      	beq.n	80054e0 <TIM_OC6_SetConfig+0x7c>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a16      	ldr	r2, [pc, #88]	; (8005524 <TIM_OC6_SetConfig+0xc0>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d007      	beq.n	80054e0 <TIM_OC6_SetConfig+0x7c>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a15      	ldr	r2, [pc, #84]	; (8005528 <TIM_OC6_SetConfig+0xc4>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d003      	beq.n	80054e0 <TIM_OC6_SetConfig+0x7c>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a14      	ldr	r2, [pc, #80]	; (800552c <TIM_OC6_SetConfig+0xc8>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d109      	bne.n	80054f4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	695b      	ldr	r3, [r3, #20]
 80054ec:	029b      	lsls	r3, r3, #10
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	685a      	ldr	r2, [r3, #4]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	621a      	str	r2, [r3, #32]
}
 800550e:	bf00      	nop
 8005510:	371c      	adds	r7, #28
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	40012c00 	.word	0x40012c00
 8005520:	40013400 	.word	0x40013400
 8005524:	40014000 	.word	0x40014000
 8005528:	40014400 	.word	0x40014400
 800552c:	40014800 	.word	0x40014800

08005530 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005530:	b480      	push	{r7}
 8005532:	b087      	sub	sp, #28
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
 800553c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6a1b      	ldr	r3, [r3, #32]
 8005542:	f023 0201 	bic.w	r2, r3, #1
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6a1b      	ldr	r3, [r3, #32]
 8005554:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	4a24      	ldr	r2, [pc, #144]	; (80055ec <TIM_TI1_SetConfig+0xbc>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d013      	beq.n	8005586 <TIM_TI1_SetConfig+0x56>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005564:	d00f      	beq.n	8005586 <TIM_TI1_SetConfig+0x56>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	4a21      	ldr	r2, [pc, #132]	; (80055f0 <TIM_TI1_SetConfig+0xc0>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d00b      	beq.n	8005586 <TIM_TI1_SetConfig+0x56>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	4a20      	ldr	r2, [pc, #128]	; (80055f4 <TIM_TI1_SetConfig+0xc4>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d007      	beq.n	8005586 <TIM_TI1_SetConfig+0x56>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	4a1f      	ldr	r2, [pc, #124]	; (80055f8 <TIM_TI1_SetConfig+0xc8>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d003      	beq.n	8005586 <TIM_TI1_SetConfig+0x56>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	4a1e      	ldr	r2, [pc, #120]	; (80055fc <TIM_TI1_SetConfig+0xcc>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d101      	bne.n	800558a <TIM_TI1_SetConfig+0x5a>
 8005586:	2301      	movs	r3, #1
 8005588:	e000      	b.n	800558c <TIM_TI1_SetConfig+0x5c>
 800558a:	2300      	movs	r3, #0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d008      	beq.n	80055a2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	f023 0303 	bic.w	r3, r3, #3
 8005596:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005598:	697a      	ldr	r2, [r7, #20]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4313      	orrs	r3, r2
 800559e:	617b      	str	r3, [r7, #20]
 80055a0:	e003      	b.n	80055aa <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	f043 0301 	orr.w	r3, r3, #1
 80055a8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	011b      	lsls	r3, r3, #4
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	697a      	ldr	r2, [r7, #20]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	f023 030a 	bic.w	r3, r3, #10
 80055c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	f003 030a 	and.w	r3, r3, #10
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	697a      	ldr	r2, [r7, #20]
 80055d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	693a      	ldr	r2, [r7, #16]
 80055dc:	621a      	str	r2, [r3, #32]
}
 80055de:	bf00      	nop
 80055e0:	371c      	adds	r7, #28
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	40012c00 	.word	0x40012c00
 80055f0:	40000400 	.word	0x40000400
 80055f4:	40000800 	.word	0x40000800
 80055f8:	40013400 	.word	0x40013400
 80055fc:	40014000 	.word	0x40014000

08005600 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005600:	b480      	push	{r7}
 8005602:	b087      	sub	sp, #28
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6a1b      	ldr	r3, [r3, #32]
 8005610:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	f023 0201 	bic.w	r2, r3, #1
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800562a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	011b      	lsls	r3, r3, #4
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	4313      	orrs	r3, r2
 8005634:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	f023 030a 	bic.w	r3, r3, #10
 800563c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	4313      	orrs	r3, r2
 8005644:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	693a      	ldr	r2, [r7, #16]
 800564a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	621a      	str	r2, [r3, #32]
}
 8005652:	bf00      	nop
 8005654:	371c      	adds	r7, #28
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr

0800565e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800565e:	b480      	push	{r7}
 8005660:	b087      	sub	sp, #28
 8005662:	af00      	add	r7, sp, #0
 8005664:	60f8      	str	r0, [r7, #12]
 8005666:	60b9      	str	r1, [r7, #8]
 8005668:	607a      	str	r2, [r7, #4]
 800566a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6a1b      	ldr	r3, [r3, #32]
 8005670:	f023 0210 	bic.w	r2, r3, #16
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800568a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	021b      	lsls	r3, r3, #8
 8005690:	697a      	ldr	r2, [r7, #20]
 8005692:	4313      	orrs	r3, r2
 8005694:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800569c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	031b      	lsls	r3, r3, #12
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	697a      	ldr	r2, [r7, #20]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056b0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	011b      	lsls	r3, r3, #4
 80056b6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80056ba:	693a      	ldr	r2, [r7, #16]
 80056bc:	4313      	orrs	r3, r2
 80056be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	693a      	ldr	r2, [r7, #16]
 80056ca:	621a      	str	r2, [r3, #32]
}
 80056cc:	bf00      	nop
 80056ce:	371c      	adds	r7, #28
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056d8:	b480      	push	{r7}
 80056da:	b087      	sub	sp, #28
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6a1b      	ldr	r3, [r3, #32]
 80056e8:	f023 0210 	bic.w	r2, r3, #16
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005702:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	031b      	lsls	r3, r3, #12
 8005708:	697a      	ldr	r2, [r7, #20]
 800570a:	4313      	orrs	r3, r2
 800570c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005714:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	011b      	lsls	r3, r3, #4
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	4313      	orrs	r3, r2
 800571e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	621a      	str	r2, [r3, #32]
}
 800572c:	bf00      	nop
 800572e:	371c      	adds	r7, #28
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005738:	b480      	push	{r7}
 800573a:	b087      	sub	sp, #28
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]
 8005744:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6a1b      	ldr	r3, [r3, #32]
 800574a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	69db      	ldr	r3, [r3, #28]
 8005756:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6a1b      	ldr	r3, [r3, #32]
 800575c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	f023 0303 	bic.w	r3, r3, #3
 8005764:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005766:	697a      	ldr	r2, [r7, #20]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4313      	orrs	r3, r2
 800576c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005774:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	011b      	lsls	r3, r3, #4
 800577a:	b2db      	uxtb	r3, r3
 800577c:	697a      	ldr	r2, [r7, #20]
 800577e:	4313      	orrs	r3, r2
 8005780:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005788:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	021b      	lsls	r3, r3, #8
 800578e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005792:	693a      	ldr	r2, [r7, #16]
 8005794:	4313      	orrs	r3, r2
 8005796:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	621a      	str	r2, [r3, #32]
}
 80057a4:	bf00      	nop
 80057a6:	371c      	adds	r7, #28
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b087      	sub	sp, #28
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	607a      	str	r2, [r7, #4]
 80057bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6a1b      	ldr	r3, [r3, #32]
 80057c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	69db      	ldr	r3, [r3, #28]
 80057ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6a1b      	ldr	r3, [r3, #32]
 80057d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057dc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	021b      	lsls	r3, r3, #8
 80057e2:	697a      	ldr	r2, [r7, #20]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057ee:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	031b      	lsls	r3, r3, #12
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005802:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	031b      	lsls	r3, r3, #12
 8005808:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	4313      	orrs	r3, r2
 8005810:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	697a      	ldr	r2, [r7, #20]
 8005816:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	621a      	str	r2, [r3, #32]
}
 800581e:	bf00      	nop
 8005820:	371c      	adds	r7, #28
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr

0800582a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800582a:	b480      	push	{r7}
 800582c:	b085      	sub	sp, #20
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
 8005832:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005840:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005842:	683a      	ldr	r2, [r7, #0]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	4313      	orrs	r3, r2
 8005848:	f043 0307 	orr.w	r3, r3, #7
 800584c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	609a      	str	r2, [r3, #8]
}
 8005854:	bf00      	nop
 8005856:	3714      	adds	r7, #20
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005860:	b480      	push	{r7}
 8005862:	b087      	sub	sp, #28
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	607a      	str	r2, [r7, #4]
 800586c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800587a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	021a      	lsls	r2, r3, #8
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	431a      	orrs	r2, r3
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	4313      	orrs	r3, r2
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	4313      	orrs	r3, r2
 800588c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	609a      	str	r2, [r3, #8]
}
 8005894:	bf00      	nop
 8005896:	371c      	adds	r7, #28
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d101      	bne.n	80058b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058b4:	2302      	movs	r3, #2
 80058b6:	e063      	b.n	8005980 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2202      	movs	r2, #2
 80058c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a2b      	ldr	r2, [pc, #172]	; (800598c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d004      	beq.n	80058ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a2a      	ldr	r2, [pc, #168]	; (8005990 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d108      	bne.n	80058fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80058f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005904:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	4313      	orrs	r3, r2
 800590e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a1b      	ldr	r2, [pc, #108]	; (800598c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d018      	beq.n	8005954 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800592a:	d013      	beq.n	8005954 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a18      	ldr	r2, [pc, #96]	; (8005994 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d00e      	beq.n	8005954 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a17      	ldr	r2, [pc, #92]	; (8005998 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d009      	beq.n	8005954 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a12      	ldr	r2, [pc, #72]	; (8005990 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d004      	beq.n	8005954 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a13      	ldr	r2, [pc, #76]	; (800599c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d10c      	bne.n	800596e <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800595a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	68ba      	ldr	r2, [r7, #8]
 8005962:	4313      	orrs	r3, r2
 8005964:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68ba      	ldr	r2, [r7, #8]
 800596c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	3714      	adds	r7, #20
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr
 800598c:	40012c00 	.word	0x40012c00
 8005990:	40013400 	.word	0x40013400
 8005994:	40000400 	.word	0x40000400
 8005998:	40000800 	.word	0x40000800
 800599c:	40014000 	.word	0x40014000

080059a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b085      	sub	sp, #20
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80059aa:	2300      	movs	r3, #0
 80059ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d101      	bne.n	80059bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80059b8:	2302      	movs	r3, #2
 80059ba:	e065      	b.n	8005a88 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	4313      	orrs	r3, r2
 80059de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	695b      	ldr	r3, [r3, #20]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a22:	4313      	orrs	r3, r2
 8005a24:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	699b      	ldr	r3, [r3, #24]
 8005a30:	041b      	lsls	r3, r3, #16
 8005a32:	4313      	orrs	r3, r2
 8005a34:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a16      	ldr	r2, [pc, #88]	; (8005a94 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d004      	beq.n	8005a4a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a14      	ldr	r2, [pc, #80]	; (8005a98 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d115      	bne.n	8005a76 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a54:	051b      	lsls	r3, r3, #20
 8005a56:	4313      	orrs	r3, r2
 8005a58:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	69db      	ldr	r3, [r3, #28]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	6a1b      	ldr	r3, [r3, #32]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a86:	2300      	movs	r3, #0
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3714      	adds	r7, #20
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr
 8005a94:	40012c00 	.word	0x40012c00
 8005a98:	40013400 	.word	0x40013400

08005a9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d101      	bne.n	8005aae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e040      	b.n	8005b30 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d106      	bne.n	8005ac4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f7fb fbf2 	bl	80012a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2224      	movs	r2, #36	; 0x24
 8005ac8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f022 0201 	bic.w	r2, r2, #1
 8005ad8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 f82c 	bl	8005b38 <UART_SetConfig>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d101      	bne.n	8005aea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e022      	b.n	8005b30 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d002      	beq.n	8005af8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 f9f4 	bl	8005ee0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	685a      	ldr	r2, [r3, #4]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	689a      	ldr	r2, [r3, #8]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f042 0201 	orr.w	r2, r2, #1
 8005b26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 fa7b 	bl	8006024 <UART_CheckIdleState>
 8005b2e:	4603      	mov	r3, r0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3708      	adds	r7, #8
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b088      	sub	sp, #32
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b40:	2300      	movs	r3, #0
 8005b42:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	689a      	ldr	r2, [r3, #8]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	431a      	orrs	r2, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	431a      	orrs	r2, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	69db      	ldr	r3, [r3, #28]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005b66:	f023 030c 	bic.w	r3, r3, #12
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	6812      	ldr	r2, [r2, #0]
 8005b6e:	6979      	ldr	r1, [r7, #20]
 8005b70:	430b      	orrs	r3, r1
 8005b72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	68da      	ldr	r2, [r3, #12]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	430a      	orrs	r2, r1
 8005b88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	699b      	ldr	r3, [r3, #24]
 8005b8e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a1b      	ldr	r3, [r3, #32]
 8005b94:	697a      	ldr	r2, [r7, #20]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	697a      	ldr	r2, [r7, #20]
 8005baa:	430a      	orrs	r2, r1
 8005bac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4aa7      	ldr	r2, [pc, #668]	; (8005e50 <UART_SetConfig+0x318>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d120      	bne.n	8005bfa <UART_SetConfig+0xc2>
 8005bb8:	4ba6      	ldr	r3, [pc, #664]	; (8005e54 <UART_SetConfig+0x31c>)
 8005bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bbc:	f003 0303 	and.w	r3, r3, #3
 8005bc0:	2b03      	cmp	r3, #3
 8005bc2:	d817      	bhi.n	8005bf4 <UART_SetConfig+0xbc>
 8005bc4:	a201      	add	r2, pc, #4	; (adr r2, 8005bcc <UART_SetConfig+0x94>)
 8005bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bca:	bf00      	nop
 8005bcc:	08005bdd 	.word	0x08005bdd
 8005bd0:	08005be9 	.word	0x08005be9
 8005bd4:	08005bef 	.word	0x08005bef
 8005bd8:	08005be3 	.word	0x08005be3
 8005bdc:	2301      	movs	r3, #1
 8005bde:	77fb      	strb	r3, [r7, #31]
 8005be0:	e0b5      	b.n	8005d4e <UART_SetConfig+0x216>
 8005be2:	2302      	movs	r3, #2
 8005be4:	77fb      	strb	r3, [r7, #31]
 8005be6:	e0b2      	b.n	8005d4e <UART_SetConfig+0x216>
 8005be8:	2304      	movs	r3, #4
 8005bea:	77fb      	strb	r3, [r7, #31]
 8005bec:	e0af      	b.n	8005d4e <UART_SetConfig+0x216>
 8005bee:	2308      	movs	r3, #8
 8005bf0:	77fb      	strb	r3, [r7, #31]
 8005bf2:	e0ac      	b.n	8005d4e <UART_SetConfig+0x216>
 8005bf4:	2310      	movs	r3, #16
 8005bf6:	77fb      	strb	r3, [r7, #31]
 8005bf8:	e0a9      	b.n	8005d4e <UART_SetConfig+0x216>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a96      	ldr	r2, [pc, #600]	; (8005e58 <UART_SetConfig+0x320>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d124      	bne.n	8005c4e <UART_SetConfig+0x116>
 8005c04:	4b93      	ldr	r3, [pc, #588]	; (8005e54 <UART_SetConfig+0x31c>)
 8005c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c0c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c10:	d011      	beq.n	8005c36 <UART_SetConfig+0xfe>
 8005c12:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c16:	d817      	bhi.n	8005c48 <UART_SetConfig+0x110>
 8005c18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c1c:	d011      	beq.n	8005c42 <UART_SetConfig+0x10a>
 8005c1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c22:	d811      	bhi.n	8005c48 <UART_SetConfig+0x110>
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d003      	beq.n	8005c30 <UART_SetConfig+0xf8>
 8005c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c2c:	d006      	beq.n	8005c3c <UART_SetConfig+0x104>
 8005c2e:	e00b      	b.n	8005c48 <UART_SetConfig+0x110>
 8005c30:	2300      	movs	r3, #0
 8005c32:	77fb      	strb	r3, [r7, #31]
 8005c34:	e08b      	b.n	8005d4e <UART_SetConfig+0x216>
 8005c36:	2302      	movs	r3, #2
 8005c38:	77fb      	strb	r3, [r7, #31]
 8005c3a:	e088      	b.n	8005d4e <UART_SetConfig+0x216>
 8005c3c:	2304      	movs	r3, #4
 8005c3e:	77fb      	strb	r3, [r7, #31]
 8005c40:	e085      	b.n	8005d4e <UART_SetConfig+0x216>
 8005c42:	2308      	movs	r3, #8
 8005c44:	77fb      	strb	r3, [r7, #31]
 8005c46:	e082      	b.n	8005d4e <UART_SetConfig+0x216>
 8005c48:	2310      	movs	r3, #16
 8005c4a:	77fb      	strb	r3, [r7, #31]
 8005c4c:	e07f      	b.n	8005d4e <UART_SetConfig+0x216>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a82      	ldr	r2, [pc, #520]	; (8005e5c <UART_SetConfig+0x324>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d124      	bne.n	8005ca2 <UART_SetConfig+0x16a>
 8005c58:	4b7e      	ldr	r3, [pc, #504]	; (8005e54 <UART_SetConfig+0x31c>)
 8005c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c5c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005c60:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005c64:	d011      	beq.n	8005c8a <UART_SetConfig+0x152>
 8005c66:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005c6a:	d817      	bhi.n	8005c9c <UART_SetConfig+0x164>
 8005c6c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005c70:	d011      	beq.n	8005c96 <UART_SetConfig+0x15e>
 8005c72:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005c76:	d811      	bhi.n	8005c9c <UART_SetConfig+0x164>
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d003      	beq.n	8005c84 <UART_SetConfig+0x14c>
 8005c7c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c80:	d006      	beq.n	8005c90 <UART_SetConfig+0x158>
 8005c82:	e00b      	b.n	8005c9c <UART_SetConfig+0x164>
 8005c84:	2300      	movs	r3, #0
 8005c86:	77fb      	strb	r3, [r7, #31]
 8005c88:	e061      	b.n	8005d4e <UART_SetConfig+0x216>
 8005c8a:	2302      	movs	r3, #2
 8005c8c:	77fb      	strb	r3, [r7, #31]
 8005c8e:	e05e      	b.n	8005d4e <UART_SetConfig+0x216>
 8005c90:	2304      	movs	r3, #4
 8005c92:	77fb      	strb	r3, [r7, #31]
 8005c94:	e05b      	b.n	8005d4e <UART_SetConfig+0x216>
 8005c96:	2308      	movs	r3, #8
 8005c98:	77fb      	strb	r3, [r7, #31]
 8005c9a:	e058      	b.n	8005d4e <UART_SetConfig+0x216>
 8005c9c:	2310      	movs	r3, #16
 8005c9e:	77fb      	strb	r3, [r7, #31]
 8005ca0:	e055      	b.n	8005d4e <UART_SetConfig+0x216>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a6e      	ldr	r2, [pc, #440]	; (8005e60 <UART_SetConfig+0x328>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d124      	bne.n	8005cf6 <UART_SetConfig+0x1be>
 8005cac:	4b69      	ldr	r3, [pc, #420]	; (8005e54 <UART_SetConfig+0x31c>)
 8005cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005cb4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005cb8:	d011      	beq.n	8005cde <UART_SetConfig+0x1a6>
 8005cba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005cbe:	d817      	bhi.n	8005cf0 <UART_SetConfig+0x1b8>
 8005cc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005cc4:	d011      	beq.n	8005cea <UART_SetConfig+0x1b2>
 8005cc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005cca:	d811      	bhi.n	8005cf0 <UART_SetConfig+0x1b8>
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d003      	beq.n	8005cd8 <UART_SetConfig+0x1a0>
 8005cd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cd4:	d006      	beq.n	8005ce4 <UART_SetConfig+0x1ac>
 8005cd6:	e00b      	b.n	8005cf0 <UART_SetConfig+0x1b8>
 8005cd8:	2300      	movs	r3, #0
 8005cda:	77fb      	strb	r3, [r7, #31]
 8005cdc:	e037      	b.n	8005d4e <UART_SetConfig+0x216>
 8005cde:	2302      	movs	r3, #2
 8005ce0:	77fb      	strb	r3, [r7, #31]
 8005ce2:	e034      	b.n	8005d4e <UART_SetConfig+0x216>
 8005ce4:	2304      	movs	r3, #4
 8005ce6:	77fb      	strb	r3, [r7, #31]
 8005ce8:	e031      	b.n	8005d4e <UART_SetConfig+0x216>
 8005cea:	2308      	movs	r3, #8
 8005cec:	77fb      	strb	r3, [r7, #31]
 8005cee:	e02e      	b.n	8005d4e <UART_SetConfig+0x216>
 8005cf0:	2310      	movs	r3, #16
 8005cf2:	77fb      	strb	r3, [r7, #31]
 8005cf4:	e02b      	b.n	8005d4e <UART_SetConfig+0x216>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a5a      	ldr	r2, [pc, #360]	; (8005e64 <UART_SetConfig+0x32c>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d124      	bne.n	8005d4a <UART_SetConfig+0x212>
 8005d00:	4b54      	ldr	r3, [pc, #336]	; (8005e54 <UART_SetConfig+0x31c>)
 8005d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d04:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005d08:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005d0c:	d011      	beq.n	8005d32 <UART_SetConfig+0x1fa>
 8005d0e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005d12:	d817      	bhi.n	8005d44 <UART_SetConfig+0x20c>
 8005d14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d18:	d011      	beq.n	8005d3e <UART_SetConfig+0x206>
 8005d1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d1e:	d811      	bhi.n	8005d44 <UART_SetConfig+0x20c>
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d003      	beq.n	8005d2c <UART_SetConfig+0x1f4>
 8005d24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d28:	d006      	beq.n	8005d38 <UART_SetConfig+0x200>
 8005d2a:	e00b      	b.n	8005d44 <UART_SetConfig+0x20c>
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	77fb      	strb	r3, [r7, #31]
 8005d30:	e00d      	b.n	8005d4e <UART_SetConfig+0x216>
 8005d32:	2302      	movs	r3, #2
 8005d34:	77fb      	strb	r3, [r7, #31]
 8005d36:	e00a      	b.n	8005d4e <UART_SetConfig+0x216>
 8005d38:	2304      	movs	r3, #4
 8005d3a:	77fb      	strb	r3, [r7, #31]
 8005d3c:	e007      	b.n	8005d4e <UART_SetConfig+0x216>
 8005d3e:	2308      	movs	r3, #8
 8005d40:	77fb      	strb	r3, [r7, #31]
 8005d42:	e004      	b.n	8005d4e <UART_SetConfig+0x216>
 8005d44:	2310      	movs	r3, #16
 8005d46:	77fb      	strb	r3, [r7, #31]
 8005d48:	e001      	b.n	8005d4e <UART_SetConfig+0x216>
 8005d4a:	2310      	movs	r3, #16
 8005d4c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	69db      	ldr	r3, [r3, #28]
 8005d52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d56:	d15b      	bne.n	8005e10 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8005d58:	7ffb      	ldrb	r3, [r7, #31]
 8005d5a:	2b08      	cmp	r3, #8
 8005d5c:	d827      	bhi.n	8005dae <UART_SetConfig+0x276>
 8005d5e:	a201      	add	r2, pc, #4	; (adr r2, 8005d64 <UART_SetConfig+0x22c>)
 8005d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d64:	08005d89 	.word	0x08005d89
 8005d68:	08005d91 	.word	0x08005d91
 8005d6c:	08005d99 	.word	0x08005d99
 8005d70:	08005daf 	.word	0x08005daf
 8005d74:	08005d9f 	.word	0x08005d9f
 8005d78:	08005daf 	.word	0x08005daf
 8005d7c:	08005daf 	.word	0x08005daf
 8005d80:	08005daf 	.word	0x08005daf
 8005d84:	08005da7 	.word	0x08005da7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d88:	f7fd ffdc 	bl	8003d44 <HAL_RCC_GetPCLK1Freq>
 8005d8c:	61b8      	str	r0, [r7, #24]
        break;
 8005d8e:	e013      	b.n	8005db8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d90:	f7fd fffa 	bl	8003d88 <HAL_RCC_GetPCLK2Freq>
 8005d94:	61b8      	str	r0, [r7, #24]
        break;
 8005d96:	e00f      	b.n	8005db8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d98:	4b33      	ldr	r3, [pc, #204]	; (8005e68 <UART_SetConfig+0x330>)
 8005d9a:	61bb      	str	r3, [r7, #24]
        break;
 8005d9c:	e00c      	b.n	8005db8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d9e:	f7fd ff5b 	bl	8003c58 <HAL_RCC_GetSysClockFreq>
 8005da2:	61b8      	str	r0, [r7, #24]
        break;
 8005da4:	e008      	b.n	8005db8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005da6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005daa:	61bb      	str	r3, [r7, #24]
        break;
 8005dac:	e004      	b.n	8005db8 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8005dae:	2300      	movs	r3, #0
 8005db0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	77bb      	strb	r3, [r7, #30]
        break;
 8005db6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	f000 8082 	beq.w	8005ec4 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	005a      	lsls	r2, r3, #1
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	085b      	lsrs	r3, r3, #1
 8005dca:	441a      	add	r2, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dd4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	2b0f      	cmp	r3, #15
 8005dda:	d916      	bls.n	8005e0a <UART_SetConfig+0x2d2>
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005de2:	d212      	bcs.n	8005e0a <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	f023 030f 	bic.w	r3, r3, #15
 8005dec:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	085b      	lsrs	r3, r3, #1
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	f003 0307 	and.w	r3, r3, #7
 8005df8:	b29a      	uxth	r2, r3
 8005dfa:	89fb      	ldrh	r3, [r7, #14]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	89fa      	ldrh	r2, [r7, #14]
 8005e06:	60da      	str	r2, [r3, #12]
 8005e08:	e05c      	b.n	8005ec4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	77bb      	strb	r3, [r7, #30]
 8005e0e:	e059      	b.n	8005ec4 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e10:	7ffb      	ldrb	r3, [r7, #31]
 8005e12:	2b08      	cmp	r3, #8
 8005e14:	d835      	bhi.n	8005e82 <UART_SetConfig+0x34a>
 8005e16:	a201      	add	r2, pc, #4	; (adr r2, 8005e1c <UART_SetConfig+0x2e4>)
 8005e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e1c:	08005e41 	.word	0x08005e41
 8005e20:	08005e49 	.word	0x08005e49
 8005e24:	08005e6d 	.word	0x08005e6d
 8005e28:	08005e83 	.word	0x08005e83
 8005e2c:	08005e73 	.word	0x08005e73
 8005e30:	08005e83 	.word	0x08005e83
 8005e34:	08005e83 	.word	0x08005e83
 8005e38:	08005e83 	.word	0x08005e83
 8005e3c:	08005e7b 	.word	0x08005e7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e40:	f7fd ff80 	bl	8003d44 <HAL_RCC_GetPCLK1Freq>
 8005e44:	61b8      	str	r0, [r7, #24]
        break;
 8005e46:	e021      	b.n	8005e8c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e48:	f7fd ff9e 	bl	8003d88 <HAL_RCC_GetPCLK2Freq>
 8005e4c:	61b8      	str	r0, [r7, #24]
        break;
 8005e4e:	e01d      	b.n	8005e8c <UART_SetConfig+0x354>
 8005e50:	40013800 	.word	0x40013800
 8005e54:	40021000 	.word	0x40021000
 8005e58:	40004400 	.word	0x40004400
 8005e5c:	40004800 	.word	0x40004800
 8005e60:	40004c00 	.word	0x40004c00
 8005e64:	40005000 	.word	0x40005000
 8005e68:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e6c:	4b1b      	ldr	r3, [pc, #108]	; (8005edc <UART_SetConfig+0x3a4>)
 8005e6e:	61bb      	str	r3, [r7, #24]
        break;
 8005e70:	e00c      	b.n	8005e8c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e72:	f7fd fef1 	bl	8003c58 <HAL_RCC_GetSysClockFreq>
 8005e76:	61b8      	str	r0, [r7, #24]
        break;
 8005e78:	e008      	b.n	8005e8c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e7e:	61bb      	str	r3, [r7, #24]
        break;
 8005e80:	e004      	b.n	8005e8c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8005e82:	2300      	movs	r3, #0
 8005e84:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	77bb      	strb	r3, [r7, #30]
        break;
 8005e8a:	bf00      	nop
    }

    if (pclk != 0U)
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d018      	beq.n	8005ec4 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	085a      	lsrs	r2, r3, #1
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	441a      	add	r2, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ea4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	2b0f      	cmp	r3, #15
 8005eaa:	d909      	bls.n	8005ec0 <UART_SetConfig+0x388>
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eb2:	d205      	bcs.n	8005ec0 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	b29a      	uxth	r2, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	60da      	str	r2, [r3, #12]
 8005ebe:	e001      	b.n	8005ec4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005ed0:	7fbb      	ldrb	r3, [r7, #30]
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3720      	adds	r7, #32
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	007a1200 	.word	0x007a1200

08005ee0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eec:	f003 0301 	and.w	r3, r3, #1
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d00a      	beq.n	8005f0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	430a      	orrs	r2, r1
 8005f08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0e:	f003 0302 	and.w	r3, r3, #2
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00a      	beq.n	8005f2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	430a      	orrs	r2, r1
 8005f2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f30:	f003 0304 	and.w	r3, r3, #4
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00a      	beq.n	8005f4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	430a      	orrs	r2, r1
 8005f4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f52:	f003 0308 	and.w	r3, r3, #8
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00a      	beq.n	8005f70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	430a      	orrs	r2, r1
 8005f6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f74:	f003 0310 	and.w	r3, r3, #16
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d00a      	beq.n	8005f92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	430a      	orrs	r2, r1
 8005f90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f96:	f003 0320 	and.w	r3, r3, #32
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d00a      	beq.n	8005fb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	430a      	orrs	r2, r1
 8005fb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d01a      	beq.n	8005ff6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	430a      	orrs	r2, r1
 8005fd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fde:	d10a      	bne.n	8005ff6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	430a      	orrs	r2, r1
 8005ff4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00a      	beq.n	8006018 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	430a      	orrs	r2, r1
 8006016:	605a      	str	r2, [r3, #4]
  }
}
 8006018:	bf00      	nop
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b098      	sub	sp, #96	; 0x60
 8006028:	af02      	add	r7, sp, #8
 800602a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006034:	f7fb fa88 	bl	8001548 <HAL_GetTick>
 8006038:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 0308 	and.w	r3, r3, #8
 8006044:	2b08      	cmp	r3, #8
 8006046:	d12e      	bne.n	80060a6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006048:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800604c:	9300      	str	r3, [sp, #0]
 800604e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006050:	2200      	movs	r2, #0
 8006052:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 f88c 	bl	8006174 <UART_WaitOnFlagUntilTimeout>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d021      	beq.n	80060a6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800606a:	e853 3f00 	ldrex	r3, [r3]
 800606e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006072:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006076:	653b      	str	r3, [r7, #80]	; 0x50
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	461a      	mov	r2, r3
 800607e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006080:	647b      	str	r3, [r7, #68]	; 0x44
 8006082:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006084:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006086:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006088:	e841 2300 	strex	r3, r2, [r1]
 800608c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800608e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006090:	2b00      	cmp	r3, #0
 8006092:	d1e6      	bne.n	8006062 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2220      	movs	r2, #32
 8006098:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e062      	b.n	800616c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 0304 	and.w	r3, r3, #4
 80060b0:	2b04      	cmp	r3, #4
 80060b2:	d149      	bne.n	8006148 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060b8:	9300      	str	r3, [sp, #0]
 80060ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060bc:	2200      	movs	r2, #0
 80060be:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 f856 	bl	8006174 <UART_WaitOnFlagUntilTimeout>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d03c      	beq.n	8006148 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d6:	e853 3f00 	ldrex	r3, [r3]
 80060da:	623b      	str	r3, [r7, #32]
   return(result);
 80060dc:	6a3b      	ldr	r3, [r7, #32]
 80060de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	461a      	mov	r2, r3
 80060ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060ec:	633b      	str	r3, [r7, #48]	; 0x30
 80060ee:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80060f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060f4:	e841 2300 	strex	r3, r2, [r1]
 80060f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80060fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d1e6      	bne.n	80060ce <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	3308      	adds	r3, #8
 8006106:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	e853 3f00 	ldrex	r3, [r3]
 800610e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f023 0301 	bic.w	r3, r3, #1
 8006116:	64bb      	str	r3, [r7, #72]	; 0x48
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	3308      	adds	r3, #8
 800611e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006120:	61fa      	str	r2, [r7, #28]
 8006122:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006124:	69b9      	ldr	r1, [r7, #24]
 8006126:	69fa      	ldr	r2, [r7, #28]
 8006128:	e841 2300 	strex	r3, r2, [r1]
 800612c:	617b      	str	r3, [r7, #20]
   return(result);
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d1e5      	bne.n	8006100 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2220      	movs	r2, #32
 8006138:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006144:	2303      	movs	r3, #3
 8006146:	e011      	b.n	800616c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2220      	movs	r2, #32
 800614c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2220      	movs	r2, #32
 8006152:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	3758      	adds	r7, #88	; 0x58
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	603b      	str	r3, [r7, #0]
 8006180:	4613      	mov	r3, r2
 8006182:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006184:	e049      	b.n	800621a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800618c:	d045      	beq.n	800621a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800618e:	f7fb f9db 	bl	8001548 <HAL_GetTick>
 8006192:	4602      	mov	r2, r0
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	1ad3      	subs	r3, r2, r3
 8006198:	69ba      	ldr	r2, [r7, #24]
 800619a:	429a      	cmp	r2, r3
 800619c:	d302      	bcc.n	80061a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d101      	bne.n	80061a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80061a4:	2303      	movs	r3, #3
 80061a6:	e048      	b.n	800623a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 0304 	and.w	r3, r3, #4
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d031      	beq.n	800621a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	69db      	ldr	r3, [r3, #28]
 80061bc:	f003 0308 	and.w	r3, r3, #8
 80061c0:	2b08      	cmp	r3, #8
 80061c2:	d110      	bne.n	80061e6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2208      	movs	r2, #8
 80061ca:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80061cc:	68f8      	ldr	r0, [r7, #12]
 80061ce:	f000 f838 	bl	8006242 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2208      	movs	r2, #8
 80061d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e029      	b.n	800623a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	69db      	ldr	r3, [r3, #28]
 80061ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061f4:	d111      	bne.n	800621a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f000 f81e 	bl	8006242 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2220      	movs	r2, #32
 800620a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2200      	movs	r2, #0
 8006212:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006216:	2303      	movs	r3, #3
 8006218:	e00f      	b.n	800623a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	69da      	ldr	r2, [r3, #28]
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	4013      	ands	r3, r2
 8006224:	68ba      	ldr	r2, [r7, #8]
 8006226:	429a      	cmp	r2, r3
 8006228:	bf0c      	ite	eq
 800622a:	2301      	moveq	r3, #1
 800622c:	2300      	movne	r3, #0
 800622e:	b2db      	uxtb	r3, r3
 8006230:	461a      	mov	r2, r3
 8006232:	79fb      	ldrb	r3, [r7, #7]
 8006234:	429a      	cmp	r2, r3
 8006236:	d0a6      	beq.n	8006186 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3710      	adds	r7, #16
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}

08006242 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006242:	b480      	push	{r7}
 8006244:	b095      	sub	sp, #84	; 0x54
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006252:	e853 3f00 	ldrex	r3, [r3]
 8006256:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800625e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	461a      	mov	r2, r3
 8006266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006268:	643b      	str	r3, [r7, #64]	; 0x40
 800626a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800626c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800626e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006270:	e841 2300 	strex	r3, r2, [r1]
 8006274:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006278:	2b00      	cmp	r3, #0
 800627a:	d1e6      	bne.n	800624a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	3308      	adds	r3, #8
 8006282:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006284:	6a3b      	ldr	r3, [r7, #32]
 8006286:	e853 3f00 	ldrex	r3, [r3]
 800628a:	61fb      	str	r3, [r7, #28]
   return(result);
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	f023 0301 	bic.w	r3, r3, #1
 8006292:	64bb      	str	r3, [r7, #72]	; 0x48
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	3308      	adds	r3, #8
 800629a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800629c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800629e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062a4:	e841 2300 	strex	r3, r2, [r1]
 80062a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d1e5      	bne.n	800627c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d118      	bne.n	80062ea <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	e853 3f00 	ldrex	r3, [r3]
 80062c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	f023 0310 	bic.w	r3, r3, #16
 80062cc:	647b      	str	r3, [r7, #68]	; 0x44
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	461a      	mov	r2, r3
 80062d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062d6:	61bb      	str	r3, [r7, #24]
 80062d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062da:	6979      	ldr	r1, [r7, #20]
 80062dc:	69ba      	ldr	r2, [r7, #24]
 80062de:	e841 2300 	strex	r3, r2, [r1]
 80062e2:	613b      	str	r3, [r7, #16]
   return(result);
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d1e6      	bne.n	80062b8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2220      	movs	r2, #32
 80062ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	669a      	str	r2, [r3, #104]	; 0x68
}
 80062fe:	bf00      	nop
 8006300:	3754      	adds	r7, #84	; 0x54
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr
	...

0800630c <__libc_init_array>:
 800630c:	b570      	push	{r4, r5, r6, lr}
 800630e:	4d0d      	ldr	r5, [pc, #52]	; (8006344 <__libc_init_array+0x38>)
 8006310:	4c0d      	ldr	r4, [pc, #52]	; (8006348 <__libc_init_array+0x3c>)
 8006312:	1b64      	subs	r4, r4, r5
 8006314:	10a4      	asrs	r4, r4, #2
 8006316:	2600      	movs	r6, #0
 8006318:	42a6      	cmp	r6, r4
 800631a:	d109      	bne.n	8006330 <__libc_init_array+0x24>
 800631c:	4d0b      	ldr	r5, [pc, #44]	; (800634c <__libc_init_array+0x40>)
 800631e:	4c0c      	ldr	r4, [pc, #48]	; (8006350 <__libc_init_array+0x44>)
 8006320:	f000 f820 	bl	8006364 <_init>
 8006324:	1b64      	subs	r4, r4, r5
 8006326:	10a4      	asrs	r4, r4, #2
 8006328:	2600      	movs	r6, #0
 800632a:	42a6      	cmp	r6, r4
 800632c:	d105      	bne.n	800633a <__libc_init_array+0x2e>
 800632e:	bd70      	pop	{r4, r5, r6, pc}
 8006330:	f855 3b04 	ldr.w	r3, [r5], #4
 8006334:	4798      	blx	r3
 8006336:	3601      	adds	r6, #1
 8006338:	e7ee      	b.n	8006318 <__libc_init_array+0xc>
 800633a:	f855 3b04 	ldr.w	r3, [r5], #4
 800633e:	4798      	blx	r3
 8006340:	3601      	adds	r6, #1
 8006342:	e7f2      	b.n	800632a <__libc_init_array+0x1e>
 8006344:	080063b4 	.word	0x080063b4
 8006348:	080063b4 	.word	0x080063b4
 800634c:	080063b4 	.word	0x080063b4
 8006350:	080063b8 	.word	0x080063b8

08006354 <memset>:
 8006354:	4402      	add	r2, r0
 8006356:	4603      	mov	r3, r0
 8006358:	4293      	cmp	r3, r2
 800635a:	d100      	bne.n	800635e <memset+0xa>
 800635c:	4770      	bx	lr
 800635e:	f803 1b01 	strb.w	r1, [r3], #1
 8006362:	e7f9      	b.n	8006358 <memset+0x4>

08006364 <_init>:
 8006364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006366:	bf00      	nop
 8006368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800636a:	bc08      	pop	{r3}
 800636c:	469e      	mov	lr, r3
 800636e:	4770      	bx	lr

08006370 <_fini>:
 8006370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006372:	bf00      	nop
 8006374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006376:	bc08      	pop	{r3}
 8006378:	469e      	mov	lr, r3
 800637a:	4770      	bx	lr
