
STEP_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005664  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080057ec  080057ec  000157ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005824  08005824  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005824  08005824  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005824  08005824  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005824  08005824  00015824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005828  08005828  00015828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800582c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000194  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001a0  200001a0  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000103b4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d4e  00000000  00000000  000303f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d58  00000000  00000000  00032140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cb0  00000000  00000000  00032e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b325  00000000  00000000  00033b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000109c9  00000000  00000000  0004ee6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a7bf5  00000000  00000000  0005f836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010742b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003884  00000000  00000000  0010747c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080057d4 	.word	0x080057d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080057d4 	.word	0x080057d4

080001c8 <HAL_TIM_IC_CaptureCallback.0>:
   HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);



   void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
   {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	f8c7 c000 	str.w	ip, [r7]
       if (htim->Instance == TIM2)
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80001dc:	d117      	bne.n	800020e <HAL_TIM_IC_CaptureCallback.0+0x46>
       {
           if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	7f1b      	ldrb	r3, [r3, #28]
 80001e2:	2b01      	cmp	r3, #1
 80001e4:	d113      	bne.n	800020e <HAL_TIM_IC_CaptureCallback.0+0x46>
           {
               TIM2->CNT = 0;
 80001e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001ea:	2200      	movs	r2, #0
 80001ec:	625a      	str	r2, [r3, #36]	; 0x24

               period = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 80001ee:	2100      	movs	r1, #0
 80001f0:	4809      	ldr	r0, [pc, #36]	; (8000218 <HAL_TIM_IC_CaptureCallback.0+0x50>)
 80001f2:	f004 f925 	bl	8004440 <HAL_TIM_ReadCapturedValue>
 80001f6:	4603      	mov	r3, r0
 80001f8:	461a      	mov	r2, r3
 80001fa:	4b08      	ldr	r3, [pc, #32]	; (800021c <HAL_TIM_IC_CaptureCallback.0+0x54>)
 80001fc:	601a      	str	r2, [r3, #0]
               pulseWidth = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
 80001fe:	2104      	movs	r1, #4
 8000200:	4805      	ldr	r0, [pc, #20]	; (8000218 <HAL_TIM_IC_CaptureCallback.0+0x50>)
 8000202:	f004 f91d 	bl	8004440 <HAL_TIM_ReadCapturedValue>
 8000206:	4603      	mov	r3, r0
 8000208:	461a      	mov	r2, r3
 800020a:	4b05      	ldr	r3, [pc, #20]	; (8000220 <HAL_TIM_IC_CaptureCallback.0+0x58>)
 800020c:	601a      	str	r2, [r3, #0]
           }
       }
   }
 800020e:	bf00      	nop
 8000210:	3708      	adds	r7, #8
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	200000c4 	.word	0x200000c4
 800021c:	20000194 	.word	0x20000194
 8000220:	20000198 	.word	0x20000198

08000224 <main>:
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
int main(void)
 800022a:	f107 0310 	add.w	r3, r7, #16
 800022e:	607b      	str	r3, [r7, #4]
  HAL_Init();
 8000230:	f000 fc74 	bl	8000b1c <HAL_Init>
  SystemClock_Config();
 8000234:	f000 f81a 	bl	800026c <SystemClock_Config>
  MX_GPIO_Init();
 8000238:	f000 fa6e 	bl	8000718 <MX_GPIO_Init>
  MX_TIM2_Init();
 800023c:	f000 f9bc 	bl	80005b8 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000240:	f000 f90e 	bl	8000460 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000244:	f000 fa38 	bl	80006b8 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000248:	f000 f86e 	bl	8000328 <MX_ADC1_Init>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800024c:	2100      	movs	r1, #0
 800024e:	4806      	ldr	r0, [pc, #24]	; (8000268 <main+0x44>)
 8000250:	f003 fcc2 	bl	8003bd8 <HAL_TIM_IC_Start_IT>
   HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8000254:	2104      	movs	r1, #4
 8000256:	4804      	ldr	r0, [pc, #16]	; (8000268 <main+0x44>)
 8000258:	f003 fcbe 	bl	8003bd8 <HAL_TIM_IC_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_TIM_IC_CaptureCallback(&htim2);
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	469c      	mov	ip, r3
 8000260:	4801      	ldr	r0, [pc, #4]	; (8000268 <main+0x44>)
 8000262:	f7ff ffb1 	bl	80001c8 <HAL_TIM_IC_CaptureCallback.0>
 8000266:	e7f9      	b.n	800025c <main+0x38>
 8000268:	200000c4 	.word	0x200000c4

0800026c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b096      	sub	sp, #88	; 0x58
 8000270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000272:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000276:	2228      	movs	r2, #40	; 0x28
 8000278:	2100      	movs	r1, #0
 800027a:	4618      	mov	r0, r3
 800027c:	f005 faa2 	bl	80057c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000280:	f107 031c 	add.w	r3, r7, #28
 8000284:	2200      	movs	r2, #0
 8000286:	601a      	str	r2, [r3, #0]
 8000288:	605a      	str	r2, [r3, #4]
 800028a:	609a      	str	r2, [r3, #8]
 800028c:	60da      	str	r2, [r3, #12]
 800028e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	2200      	movs	r2, #0
 8000294:	601a      	str	r2, [r3, #0]
 8000296:	605a      	str	r2, [r3, #4]
 8000298:	609a      	str	r2, [r3, #8]
 800029a:	60da      	str	r2, [r3, #12]
 800029c:	611a      	str	r2, [r3, #16]
 800029e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002a0:	2302      	movs	r3, #2
 80002a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a4:	2301      	movs	r3, #1
 80002a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002a8:	2310      	movs	r3, #16
 80002aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ac:	2302      	movs	r3, #2
 80002ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002b0:	2300      	movs	r3, #0
 80002b2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80002b4:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80002b8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002be:	4618      	mov	r0, r3
 80002c0:	f001 ffd6 	bl	8002270 <HAL_RCC_OscConfig>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0x62>
  {
    Error_Handler();
 80002ca:	f000 fa71 	bl	80007b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ce:	230f      	movs	r3, #15
 80002d0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d2:	2302      	movs	r3, #2
 80002d4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d6:	2300      	movs	r3, #0
 80002d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e0:	2300      	movs	r3, #0
 80002e2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002e4:	f107 031c 	add.w	r3, r7, #28
 80002e8:	2102      	movs	r1, #2
 80002ea:	4618      	mov	r0, r3
 80002ec:	f002 fffe 	bl	80032ec <HAL_RCC_ClockConfig>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80002f6:	f000 fa5b 	bl	80007b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 80002fa:	f241 0381 	movw	r3, #4225	; 0x1081
 80002fe:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000300:	2300      	movs	r3, #0
 8000302:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000304:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000308:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800030a:	2300      	movs	r3, #0
 800030c:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	4618      	mov	r0, r3
 8000312:	f003 fa21 	bl	8003758 <HAL_RCCEx_PeriphCLKConfig>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800031c:	f000 fa48 	bl	80007b0 <Error_Handler>
  }
}
 8000320:	bf00      	nop
 8000322:	3758      	adds	r7, #88	; 0x58
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}

08000328 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b094      	sub	sp, #80	; 0x50
 800032c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800032e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000332:	2200      	movs	r2, #0
 8000334:	601a      	str	r2, [r3, #0]
 8000336:	605a      	str	r2, [r3, #4]
 8000338:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800033a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800033e:	2200      	movs	r2, #0
 8000340:	601a      	str	r2, [r3, #0]
 8000342:	605a      	str	r2, [r3, #4]
 8000344:	609a      	str	r2, [r3, #8]
 8000346:	60da      	str	r2, [r3, #12]
 8000348:	611a      	str	r2, [r3, #16]
 800034a:	615a      	str	r2, [r3, #20]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800034c:	1d3b      	adds	r3, r7, #4
 800034e:	2228      	movs	r2, #40	; 0x28
 8000350:	2100      	movs	r1, #0
 8000352:	4618      	mov	r0, r3
 8000354:	f005 fa36 	bl	80057c4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000358:	4b40      	ldr	r3, [pc, #256]	; (800045c <MX_ADC1_Init+0x134>)
 800035a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800035e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000360:	4b3e      	ldr	r3, [pc, #248]	; (800045c <MX_ADC1_Init+0x134>)
 8000362:	2200      	movs	r2, #0
 8000364:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000366:	4b3d      	ldr	r3, [pc, #244]	; (800045c <MX_ADC1_Init+0x134>)
 8000368:	2200      	movs	r2, #0
 800036a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800036c:	4b3b      	ldr	r3, [pc, #236]	; (800045c <MX_ADC1_Init+0x134>)
 800036e:	2200      	movs	r2, #0
 8000370:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000372:	4b3a      	ldr	r3, [pc, #232]	; (800045c <MX_ADC1_Init+0x134>)
 8000374:	2200      	movs	r2, #0
 8000376:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000378:	4b38      	ldr	r3, [pc, #224]	; (800045c <MX_ADC1_Init+0x134>)
 800037a:	2200      	movs	r2, #0
 800037c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000380:	4b36      	ldr	r3, [pc, #216]	; (800045c <MX_ADC1_Init+0x134>)
 8000382:	2200      	movs	r2, #0
 8000384:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000386:	4b35      	ldr	r3, [pc, #212]	; (800045c <MX_ADC1_Init+0x134>)
 8000388:	2201      	movs	r2, #1
 800038a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800038c:	4b33      	ldr	r3, [pc, #204]	; (800045c <MX_ADC1_Init+0x134>)
 800038e:	2200      	movs	r2, #0
 8000390:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000392:	4b32      	ldr	r3, [pc, #200]	; (800045c <MX_ADC1_Init+0x134>)
 8000394:	2201      	movs	r2, #1
 8000396:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000398:	4b30      	ldr	r3, [pc, #192]	; (800045c <MX_ADC1_Init+0x134>)
 800039a:	2200      	movs	r2, #0
 800039c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003a0:	4b2e      	ldr	r3, [pc, #184]	; (800045c <MX_ADC1_Init+0x134>)
 80003a2:	2204      	movs	r2, #4
 80003a4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003a6:	4b2d      	ldr	r3, [pc, #180]	; (800045c <MX_ADC1_Init+0x134>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80003ac:	4b2b      	ldr	r3, [pc, #172]	; (800045c <MX_ADC1_Init+0x134>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003b2:	482a      	ldr	r0, [pc, #168]	; (800045c <MX_ADC1_Init+0x134>)
 80003b4:	f000 fc18 	bl	8000be8 <HAL_ADC_Init>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 80003be:	f000 f9f7 	bl	80007b0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80003c2:	2300      	movs	r3, #0
 80003c4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80003c6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80003ca:	4619      	mov	r1, r3
 80003cc:	4823      	ldr	r0, [pc, #140]	; (800045c <MX_ADC1_Init+0x134>)
 80003ce:	f001 fb7b 	bl	8001ac8 <HAL_ADCEx_MultiModeConfigChannel>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80003d8:	f000 f9ea 	bl	80007b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80003dc:	2303      	movs	r3, #3
 80003de:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003e0:	2301      	movs	r3, #1
 80003e2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003e4:	2300      	movs	r3, #0
 80003e6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003e8:	2300      	movs	r3, #0
 80003ea:	637b      	str	r3, [r7, #52]	; 0x34
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003ec:	2300      	movs	r3, #0
 80003ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.Offset = 0;
 80003f0:	2300      	movs	r3, #0
 80003f2:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80003f8:	4619      	mov	r1, r3
 80003fa:	4818      	ldr	r0, [pc, #96]	; (800045c <MX_ADC1_Init+0x134>)
 80003fc:	f000 fd86 	bl	8000f0c <HAL_ADC_ConfigChannel>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000406:	f000 f9d3 	bl	80007b0 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 800040a:	2303      	movs	r3, #3
 800040c:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800040e:	2301      	movs	r3, #1
 8000410:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000412:	2300      	movs	r3, #0
 8000414:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8000416:	2301      	movs	r3, #1
 8000418:	61fb      	str	r3, [r7, #28]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800041a:	2300      	movs	r3, #0
 800041c:	60fb      	str	r3, [r7, #12]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 800041e:	2340      	movs	r3, #64	; 0x40
 8000420:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000422:	2301      	movs	r3, #1
 8000424:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000426:	2300      	movs	r3, #0
 8000428:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800042c:	2300      	movs	r3, #0
 800042e:	f887 3020 	strb.w	r3, [r7, #32]
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000432:	2300      	movs	r3, #0
 8000434:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sConfigInjected.InjectedOffset = 0;
 8000438:	2300      	movs	r3, #0
 800043a:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 800043c:	2300      	movs	r3, #0
 800043e:	617b      	str	r3, [r7, #20]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000440:	1d3b      	adds	r3, r7, #4
 8000442:	4619      	mov	r1, r3
 8000444:	4805      	ldr	r0, [pc, #20]	; (800045c <MX_ADC1_Init+0x134>)
 8000446:	f001 f821 	bl	800148c <HAL_ADCEx_InjectedConfigChannel>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <MX_ADC1_Init+0x12c>
  {
    Error_Handler();
 8000450:	f000 f9ae 	bl	80007b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000454:	bf00      	nop
 8000456:	3750      	adds	r7, #80	; 0x50
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	20000028 	.word	0x20000028

08000460 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b09a      	sub	sp, #104	; 0x68
 8000464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000466:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
 800046e:	605a      	str	r2, [r3, #4]
 8000470:	609a      	str	r2, [r3, #8]
 8000472:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000474:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000478:	2200      	movs	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
 800047c:	605a      	str	r2, [r3, #4]
 800047e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000480:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000484:	2200      	movs	r2, #0
 8000486:	601a      	str	r2, [r3, #0]
 8000488:	605a      	str	r2, [r3, #4]
 800048a:	609a      	str	r2, [r3, #8]
 800048c:	60da      	str	r2, [r3, #12]
 800048e:	611a      	str	r2, [r3, #16]
 8000490:	615a      	str	r2, [r3, #20]
 8000492:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000494:	1d3b      	adds	r3, r7, #4
 8000496:	222c      	movs	r2, #44	; 0x2c
 8000498:	2100      	movs	r1, #0
 800049a:	4618      	mov	r0, r3
 800049c:	f005 f992 	bl	80057c4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004a0:	4b43      	ldr	r3, [pc, #268]	; (80005b0 <MX_TIM1_Init+0x150>)
 80004a2:	4a44      	ldr	r2, [pc, #272]	; (80005b4 <MX_TIM1_Init+0x154>)
 80004a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80004a6:	4b42      	ldr	r3, [pc, #264]	; (80005b0 <MX_TIM1_Init+0x150>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ac:	4b40      	ldr	r3, [pc, #256]	; (80005b0 <MX_TIM1_Init+0x150>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80004b2:	4b3f      	ldr	r3, [pc, #252]	; (80005b0 <MX_TIM1_Init+0x150>)
 80004b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004ba:	4b3d      	ldr	r3, [pc, #244]	; (80005b0 <MX_TIM1_Init+0x150>)
 80004bc:	2200      	movs	r2, #0
 80004be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004c0:	4b3b      	ldr	r3, [pc, #236]	; (80005b0 <MX_TIM1_Init+0x150>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004c6:	4b3a      	ldr	r3, [pc, #232]	; (80005b0 <MX_TIM1_Init+0x150>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80004cc:	4838      	ldr	r0, [pc, #224]	; (80005b0 <MX_TIM1_Init+0x150>)
 80004ce:	f003 fa69 	bl	80039a4 <HAL_TIM_Base_Init>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d001      	beq.n	80004dc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80004d8:	f000 f96a 	bl	80007b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004e0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80004e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80004e6:	4619      	mov	r1, r3
 80004e8:	4831      	ldr	r0, [pc, #196]	; (80005b0 <MX_TIM1_Init+0x150>)
 80004ea:	f003 fedf 	bl	80042ac <HAL_TIM_ConfigClockSource>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80004f4:	f000 f95c 	bl	80007b0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80004f8:	482d      	ldr	r0, [pc, #180]	; (80005b0 <MX_TIM1_Init+0x150>)
 80004fa:	f003 faaa 	bl	8003a52 <HAL_TIM_OC_Init>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000504:	f000 f954 	bl	80007b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000508:	2300      	movs	r3, #0
 800050a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800050c:	2300      	movs	r3, #0
 800050e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000510:	2300      	movs	r3, #0
 8000512:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000514:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000518:	4619      	mov	r1, r3
 800051a:	4825      	ldr	r0, [pc, #148]	; (80005b0 <MX_TIM1_Init+0x150>)
 800051c:	f004 fcf6 	bl	8004f0c <HAL_TIMEx_MasterConfigSynchronization>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000526:	f000 f943 	bl	80007b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800052a:	2300      	movs	r3, #0
 800052c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800052e:	2300      	movs	r3, #0
 8000530:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000532:	2300      	movs	r3, #0
 8000534:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000536:	2300      	movs	r3, #0
 8000538:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800053a:	2300      	movs	r3, #0
 800053c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800053e:	2300      	movs	r3, #0
 8000540:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000542:	2300      	movs	r3, #0
 8000544:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000546:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800054a:	2200      	movs	r2, #0
 800054c:	4619      	mov	r1, r3
 800054e:	4818      	ldr	r0, [pc, #96]	; (80005b0 <MX_TIM1_Init+0x150>)
 8000550:	f003 fd96 	bl	8004080 <HAL_TIM_OC_ConfigChannel>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800055a:	f000 f929 	bl	80007b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800055e:	2300      	movs	r3, #0
 8000560:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000562:	2300      	movs	r3, #0
 8000564:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000566:	2300      	movs	r3, #0
 8000568:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800056a:	2300      	movs	r3, #0
 800056c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800056e:	2300      	movs	r3, #0
 8000570:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000572:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000576:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000578:	2300      	movs	r3, #0
 800057a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800057c:	2300      	movs	r3, #0
 800057e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000580:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000584:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000586:	2300      	movs	r3, #0
 8000588:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800058a:	2300      	movs	r3, #0
 800058c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	4619      	mov	r1, r3
 8000592:	4807      	ldr	r0, [pc, #28]	; (80005b0 <MX_TIM1_Init+0x150>)
 8000594:	f004 fd28 	bl	8004fe8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800059e:	f000 f907 	bl	80007b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80005a2:	4803      	ldr	r0, [pc, #12]	; (80005b0 <MX_TIM1_Init+0x150>)
 80005a4:	f000 f9c6 	bl	8000934 <HAL_TIM_MspPostInit>

}
 80005a8:	bf00      	nop
 80005aa:	3768      	adds	r7, #104	; 0x68
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000078 	.word	0x20000078
 80005b4:	40012c00 	.word	0x40012c00

080005b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b08c      	sub	sp, #48	; 0x30
 80005bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005be:	f107 0320 	add.w	r3, r7, #32
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	605a      	str	r2, [r3, #4]
 80005c8:	609a      	str	r2, [r3, #8]
 80005ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005cc:	f107 0314 	add.w	r3, r7, #20
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
 80005e2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005e4:	4b33      	ldr	r3, [pc, #204]	; (80006b4 <MX_TIM2_Init+0xfc>)
 80005e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80005ec:	4b31      	ldr	r3, [pc, #196]	; (80006b4 <MX_TIM2_Init+0xfc>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005f2:	4b30      	ldr	r3, [pc, #192]	; (80006b4 <MX_TIM2_Init+0xfc>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 30000;
 80005f8:	4b2e      	ldr	r3, [pc, #184]	; (80006b4 <MX_TIM2_Init+0xfc>)
 80005fa:	f247 5230 	movw	r2, #30000	; 0x7530
 80005fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000600:	4b2c      	ldr	r3, [pc, #176]	; (80006b4 <MX_TIM2_Init+0xfc>)
 8000602:	2200      	movs	r2, #0
 8000604:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000606:	4b2b      	ldr	r3, [pc, #172]	; (80006b4 <MX_TIM2_Init+0xfc>)
 8000608:	2200      	movs	r2, #0
 800060a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800060c:	4829      	ldr	r0, [pc, #164]	; (80006b4 <MX_TIM2_Init+0xfc>)
 800060e:	f003 f9c9 	bl	80039a4 <HAL_TIM_Base_Init>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000618:	f000 f8ca 	bl	80007b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800061c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000620:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	4619      	mov	r1, r3
 8000628:	4822      	ldr	r0, [pc, #136]	; (80006b4 <MX_TIM2_Init+0xfc>)
 800062a:	f003 fe3f 	bl	80042ac <HAL_TIM_ConfigClockSource>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000634:	f000 f8bc 	bl	80007b0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000638:	481e      	ldr	r0, [pc, #120]	; (80006b4 <MX_TIM2_Init+0xfc>)
 800063a:	f003 fa6b 	bl	8003b14 <HAL_TIM_IC_Init>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000644:	f000 f8b4 	bl	80007b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000648:	2300      	movs	r3, #0
 800064a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800064c:	2300      	movs	r3, #0
 800064e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	4619      	mov	r1, r3
 8000656:	4817      	ldr	r0, [pc, #92]	; (80006b4 <MX_TIM2_Init+0xfc>)
 8000658:	f004 fc58 	bl	8004f0c <HAL_TIMEx_MasterConfigSynchronization>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8000662:	f000 f8a5 	bl	80007b0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000666:	2300      	movs	r3, #0
 8000668:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800066a:	2301      	movs	r3, #1
 800066c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	2200      	movs	r2, #0
 800067a:	4619      	mov	r1, r3
 800067c:	480d      	ldr	r0, [pc, #52]	; (80006b4 <MX_TIM2_Init+0xfc>)
 800067e:	f003 fd79 	bl	8004174 <HAL_TIM_IC_ConfigChannel>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000688:	f000 f892 	bl	80007b0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800068c:	2302      	movs	r3, #2
 800068e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000690:	2302      	movs	r3, #2
 8000692:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	2204      	movs	r2, #4
 8000698:	4619      	mov	r1, r3
 800069a:	4806      	ldr	r0, [pc, #24]	; (80006b4 <MX_TIM2_Init+0xfc>)
 800069c:	f003 fd6a 	bl	8004174 <HAL_TIM_IC_ConfigChannel>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 80006a6:	f000 f883 	bl	80007b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	3730      	adds	r7, #48	; 0x30
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	200000c4 	.word	0x200000c4

080006b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006bc:	4b14      	ldr	r3, [pc, #80]	; (8000710 <MX_USART1_UART_Init+0x58>)
 80006be:	4a15      	ldr	r2, [pc, #84]	; (8000714 <MX_USART1_UART_Init+0x5c>)
 80006c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80006c2:	4b13      	ldr	r3, [pc, #76]	; (8000710 <MX_USART1_UART_Init+0x58>)
 80006c4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80006c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ca:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_USART1_UART_Init+0x58>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <MX_USART1_UART_Init+0x58>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_USART1_UART_Init+0x58>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_USART1_UART_Init+0x58>)
 80006de:	220c      	movs	r2, #12
 80006e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <MX_USART1_UART_Init+0x58>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e8:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_USART1_UART_Init+0x58>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <MX_USART1_UART_Init+0x58>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_USART1_UART_Init+0x58>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <MX_USART1_UART_Init+0x58>)
 80006fc:	f004 fd0a 	bl	8005114 <HAL_UART_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000706:	f000 f853 	bl	80007b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000110 	.word	0x20000110
 8000714:	40013800 	.word	0x40013800

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b088      	sub	sp, #32
 800071c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 030c 	add.w	r3, r7, #12
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800072e:	4b1e      	ldr	r3, [pc, #120]	; (80007a8 <MX_GPIO_Init+0x90>)
 8000730:	695b      	ldr	r3, [r3, #20]
 8000732:	4a1d      	ldr	r2, [pc, #116]	; (80007a8 <MX_GPIO_Init+0x90>)
 8000734:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000738:	6153      	str	r3, [r2, #20]
 800073a:	4b1b      	ldr	r3, [pc, #108]	; (80007a8 <MX_GPIO_Init+0x90>)
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <MX_GPIO_Init+0x90>)
 8000748:	695b      	ldr	r3, [r3, #20]
 800074a:	4a17      	ldr	r2, [pc, #92]	; (80007a8 <MX_GPIO_Init+0x90>)
 800074c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000750:	6153      	str	r3, [r2, #20]
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <MX_GPIO_Init+0x90>)
 8000754:	695b      	ldr	r3, [r3, #20]
 8000756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075e:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_GPIO_Init+0x90>)
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	4a11      	ldr	r2, [pc, #68]	; (80007a8 <MX_GPIO_Init+0x90>)
 8000764:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000768:	6153      	str	r3, [r2, #20]
 800076a:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_GPIO_Init+0x90>)
 800076c:	695b      	ldr	r3, [r3, #20]
 800076e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : INTERUPT_Pin */
  GPIO_InitStruct.Pin = INTERUPT_Pin;
 8000776:	2302      	movs	r3, #2
 8000778:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800077a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800077e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INTERUPT_GPIO_Port, &GPIO_InitStruct);
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	4619      	mov	r1, r3
 800078a:	4808      	ldr	r0, [pc, #32]	; (80007ac <MX_GPIO_Init+0x94>)
 800078c:	f001 fbda 	bl	8001f44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000790:	2200      	movs	r2, #0
 8000792:	2100      	movs	r1, #0
 8000794:	2007      	movs	r0, #7
 8000796:	f001 fb9e 	bl	8001ed6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800079a:	2007      	movs	r0, #7
 800079c:	f001 fbb7 	bl	8001f0e <HAL_NVIC_EnableIRQ>

}
 80007a0:	bf00      	nop
 80007a2:	3720      	adds	r7, #32
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40021000 	.word	0x40021000
 80007ac:	48001400 	.word	0x48001400

080007b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b4:	b672      	cpsid	i
}
 80007b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <Error_Handler+0x8>
	...

080007bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c2:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <HAL_MspInit+0x44>)
 80007c4:	699b      	ldr	r3, [r3, #24]
 80007c6:	4a0e      	ldr	r2, [pc, #56]	; (8000800 <HAL_MspInit+0x44>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	6193      	str	r3, [r2, #24]
 80007ce:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <HAL_MspInit+0x44>)
 80007d0:	699b      	ldr	r3, [r3, #24]
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <HAL_MspInit+0x44>)
 80007dc:	69db      	ldr	r3, [r3, #28]
 80007de:	4a08      	ldr	r2, [pc, #32]	; (8000800 <HAL_MspInit+0x44>)
 80007e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e4:	61d3      	str	r3, [r2, #28]
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <HAL_MspInit+0x44>)
 80007e8:	69db      	ldr	r3, [r3, #28]
 80007ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ee:	603b      	str	r3, [r7, #0]
 80007f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	40021000 	.word	0x40021000

08000804 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	; 0x28
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000824:	d124      	bne.n	8000870 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000826:	4b14      	ldr	r3, [pc, #80]	; (8000878 <HAL_ADC_MspInit+0x74>)
 8000828:	695b      	ldr	r3, [r3, #20]
 800082a:	4a13      	ldr	r2, [pc, #76]	; (8000878 <HAL_ADC_MspInit+0x74>)
 800082c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000830:	6153      	str	r3, [r2, #20]
 8000832:	4b11      	ldr	r3, [pc, #68]	; (8000878 <HAL_ADC_MspInit+0x74>)
 8000834:	695b      	ldr	r3, [r3, #20]
 8000836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083a:	613b      	str	r3, [r7, #16]
 800083c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <HAL_ADC_MspInit+0x74>)
 8000840:	695b      	ldr	r3, [r3, #20]
 8000842:	4a0d      	ldr	r2, [pc, #52]	; (8000878 <HAL_ADC_MspInit+0x74>)
 8000844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000848:	6153      	str	r3, [r2, #20]
 800084a:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <HAL_ADC_MspInit+0x74>)
 800084c:	695b      	ldr	r3, [r3, #20]
 800084e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000856:	230c      	movs	r3, #12
 8000858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800085a:	2303      	movs	r3, #3
 800085c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	4619      	mov	r1, r3
 8000868:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800086c:	f001 fb6a 	bl	8001f44 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000870:	bf00      	nop
 8000872:	3728      	adds	r7, #40	; 0x28
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40021000 	.word	0x40021000

0800087c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08a      	sub	sp, #40	; 0x28
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a24      	ldr	r2, [pc, #144]	; (800092c <HAL_TIM_Base_MspInit+0xb0>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d10c      	bne.n	80008b8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800089e:	4b24      	ldr	r3, [pc, #144]	; (8000930 <HAL_TIM_Base_MspInit+0xb4>)
 80008a0:	699b      	ldr	r3, [r3, #24]
 80008a2:	4a23      	ldr	r2, [pc, #140]	; (8000930 <HAL_TIM_Base_MspInit+0xb4>)
 80008a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008a8:	6193      	str	r3, [r2, #24]
 80008aa:	4b21      	ldr	r3, [pc, #132]	; (8000930 <HAL_TIM_Base_MspInit+0xb4>)
 80008ac:	699b      	ldr	r3, [r3, #24]
 80008ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008b2:	613b      	str	r3, [r7, #16]
 80008b4:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80008b6:	e035      	b.n	8000924 <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM2)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008c0:	d130      	bne.n	8000924 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008c2:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <HAL_TIM_Base_MspInit+0xb4>)
 80008c4:	69db      	ldr	r3, [r3, #28]
 80008c6:	4a1a      	ldr	r2, [pc, #104]	; (8000930 <HAL_TIM_Base_MspInit+0xb4>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	61d3      	str	r3, [r2, #28]
 80008ce:	4b18      	ldr	r3, [pc, #96]	; (8000930 <HAL_TIM_Base_MspInit+0xb4>)
 80008d0:	69db      	ldr	r3, [r3, #28]
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	4b15      	ldr	r3, [pc, #84]	; (8000930 <HAL_TIM_Base_MspInit+0xb4>)
 80008dc:	695b      	ldr	r3, [r3, #20]
 80008de:	4a14      	ldr	r2, [pc, #80]	; (8000930 <HAL_TIM_Base_MspInit+0xb4>)
 80008e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008e4:	6153      	str	r3, [r2, #20]
 80008e6:	4b12      	ldr	r3, [pc, #72]	; (8000930 <HAL_TIM_Base_MspInit+0xb4>)
 80008e8:	695b      	ldr	r3, [r3, #20]
 80008ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ee:	60bb      	str	r3, [r7, #8]
 80008f0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008f2:	2301      	movs	r3, #1
 80008f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f6:	2302      	movs	r3, #2
 80008f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2300      	movs	r3, #0
 8000900:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000902:	2301      	movs	r3, #1
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	4619      	mov	r1, r3
 800090c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000910:	f001 fb18 	bl	8001f44 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000914:	2200      	movs	r2, #0
 8000916:	2100      	movs	r1, #0
 8000918:	201c      	movs	r0, #28
 800091a:	f001 fadc 	bl	8001ed6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800091e:	201c      	movs	r0, #28
 8000920:	f001 faf5 	bl	8001f0e <HAL_NVIC_EnableIRQ>
}
 8000924:	bf00      	nop
 8000926:	3728      	adds	r7, #40	; 0x28
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40012c00 	.word	0x40012c00
 8000930:	40021000 	.word	0x40021000

08000934 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b088      	sub	sp, #32
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093c:	f107 030c 	add.w	r3, r7, #12
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a12      	ldr	r2, [pc, #72]	; (800099c <HAL_TIM_MspPostInit+0x68>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d11d      	bne.n	8000992 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <HAL_TIM_MspPostInit+0x6c>)
 8000958:	695b      	ldr	r3, [r3, #20]
 800095a:	4a11      	ldr	r2, [pc, #68]	; (80009a0 <HAL_TIM_MspPostInit+0x6c>)
 800095c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000960:	6153      	str	r3, [r2, #20]
 8000962:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <HAL_TIM_MspPostInit+0x6c>)
 8000964:	695b      	ldr	r3, [r3, #20]
 8000966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA7     ------> TIM1_CH1N
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800096e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000972:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000974:	2302      	movs	r3, #2
 8000976:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097c:	2300      	movs	r3, #0
 800097e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000980:	2306      	movs	r3, #6
 8000982:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000984:	f107 030c 	add.w	r3, r7, #12
 8000988:	4619      	mov	r1, r3
 800098a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800098e:	f001 fad9 	bl	8001f44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000992:	bf00      	nop
 8000994:	3720      	adds	r7, #32
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40012c00 	.word	0x40012c00
 80009a0:	40021000 	.word	0x40021000

080009a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a17      	ldr	r2, [pc, #92]	; (8000a20 <HAL_UART_MspInit+0x7c>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d127      	bne.n	8000a16 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009c6:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <HAL_UART_MspInit+0x80>)
 80009c8:	699b      	ldr	r3, [r3, #24]
 80009ca:	4a16      	ldr	r2, [pc, #88]	; (8000a24 <HAL_UART_MspInit+0x80>)
 80009cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d0:	6193      	str	r3, [r2, #24]
 80009d2:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <HAL_UART_MspInit+0x80>)
 80009d4:	699b      	ldr	r3, [r3, #24]
 80009d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <HAL_UART_MspInit+0x80>)
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	4a10      	ldr	r2, [pc, #64]	; (8000a24 <HAL_UART_MspInit+0x80>)
 80009e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009e8:	6153      	str	r3, [r2, #20]
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <HAL_UART_MspInit+0x80>)
 80009ec:	695b      	ldr	r3, [r3, #20]
 80009ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009f6:	23c0      	movs	r3, #192	; 0xc0
 80009f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a02:	2303      	movs	r3, #3
 8000a04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a06:	2307      	movs	r3, #7
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0a:	f107 0314 	add.w	r3, r7, #20
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4805      	ldr	r0, [pc, #20]	; (8000a28 <HAL_UART_MspInit+0x84>)
 8000a12:	f001 fa97 	bl	8001f44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a16:	bf00      	nop
 8000a18:	3728      	adds	r7, #40	; 0x28
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40013800 	.word	0x40013800
 8000a24:	40021000 	.word	0x40021000
 8000a28:	48000400 	.word	0x48000400

08000a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <NMI_Handler+0x4>

08000a32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a36:	e7fe      	b.n	8000a36 <HardFault_Handler+0x4>

08000a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <MemManage_Handler+0x4>

08000a3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a42:	e7fe      	b.n	8000a42 <BusFault_Handler+0x4>

08000a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <UsageFault_Handler+0x4>

08000a4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a78:	f000 f896 	bl	8000ba8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INTERUPT_Pin);
 8000a84:	2002      	movs	r0, #2
 8000a86:	f001 fbcf 	bl	8002228 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
	...

08000a90 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a94:	4802      	ldr	r0, [pc, #8]	; (8000aa0 <TIM2_IRQHandler+0x10>)
 8000a96:	f003 f9d3 	bl	8003e40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	200000c4 	.word	0x200000c4

08000aa4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <SystemInit+0x20>)
 8000aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aae:	4a05      	ldr	r2, [pc, #20]	; (8000ac4 <SystemInit+0x20>)
 8000ab0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ab4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ac8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b00 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000acc:	480d      	ldr	r0, [pc, #52]	; (8000b04 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ace:	490e      	ldr	r1, [pc, #56]	; (8000b08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ad0:	4a0e      	ldr	r2, [pc, #56]	; (8000b0c <LoopForever+0xe>)
  movs r3, #0
 8000ad2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad4:	e002      	b.n	8000adc <LoopCopyDataInit>

08000ad6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ad6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ada:	3304      	adds	r3, #4

08000adc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000adc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ade:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae0:	d3f9      	bcc.n	8000ad6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ae2:	4a0b      	ldr	r2, [pc, #44]	; (8000b10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ae4:	4c0b      	ldr	r4, [pc, #44]	; (8000b14 <LoopForever+0x16>)
  movs r3, #0
 8000ae6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae8:	e001      	b.n	8000aee <LoopFillZerobss>

08000aea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aec:	3204      	adds	r2, #4

08000aee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af0:	d3fb      	bcc.n	8000aea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000af2:	f7ff ffd7 	bl	8000aa4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000af6:	f004 fe41 	bl	800577c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000afa:	f7ff fb93 	bl	8000224 <main>

08000afe <LoopForever>:

LoopForever:
    b LoopForever
 8000afe:	e7fe      	b.n	8000afe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b00:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b08:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b0c:	0800582c 	.word	0x0800582c
  ldr r2, =_sbss
 8000b10:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b14:	200001a0 	.word	0x200001a0

08000b18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b18:	e7fe      	b.n	8000b18 <ADC1_2_IRQHandler>
	...

08000b1c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <HAL_Init+0x28>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a07      	ldr	r2, [pc, #28]	; (8000b44 <HAL_Init+0x28>)
 8000b26:	f043 0310 	orr.w	r3, r3, #16
 8000b2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b2c:	2003      	movs	r0, #3
 8000b2e:	f001 f9c7 	bl	8001ec0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b32:	200f      	movs	r0, #15
 8000b34:	f000 f808 	bl	8000b48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b38:	f7ff fe40 	bl	80007bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40022000 	.word	0x40022000

08000b48 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b50:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <HAL_InitTick+0x54>)
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <HAL_InitTick+0x58>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	4619      	mov	r1, r3
 8000b5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b66:	4618      	mov	r0, r3
 8000b68:	f001 f9df 	bl	8001f2a <HAL_SYSTICK_Config>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	e00e      	b.n	8000b94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2b0f      	cmp	r3, #15
 8000b7a:	d80a      	bhi.n	8000b92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	6879      	ldr	r1, [r7, #4]
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295
 8000b84:	f001 f9a7 	bl	8001ed6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b88:	4a06      	ldr	r2, [pc, #24]	; (8000ba4 <HAL_InitTick+0x5c>)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	e000      	b.n	8000b94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	20000008 	.word	0x20000008
 8000ba4:	20000004 	.word	0x20000004

08000ba8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <HAL_IncTick+0x20>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_IncTick+0x24>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	4a04      	ldr	r2, [pc, #16]	; (8000bcc <HAL_IncTick+0x24>)
 8000bba:	6013      	str	r3, [r2, #0]
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20000008 	.word	0x20000008
 8000bcc:	2000019c 	.word	0x2000019c

08000bd0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  return uwTick;  
 8000bd4:	4b03      	ldr	r3, [pc, #12]	; (8000be4 <HAL_GetTick+0x14>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	2000019c 	.word	0x2000019c

08000be8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b09a      	sub	sp, #104	; 0x68
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d101      	bne.n	8000c08 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000c04:	2301      	movs	r3, #1
 8000c06:	e172      	b.n	8000eee <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	691b      	ldr	r3, [r3, #16]
 8000c0c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	f003 0310 	and.w	r3, r3, #16
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d176      	bne.n	8000d08 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d152      	bne.n	8000cc8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2200      	movs	r2, #0
 8000c26:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2200      	movs	r2, #0
 8000c32:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2200      	movs	r2, #0
 8000c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f7ff fde1 	bl	8000804 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d13b      	bne.n	8000cc8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f000 ffff 	bl	8001c54 <ADC_Disable>
 8000c56:	4603      	mov	r3, r0
 8000c58:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c60:	f003 0310 	and.w	r3, r3, #16
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d12f      	bne.n	8000cc8 <HAL_ADC_Init+0xe0>
 8000c68:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d12b      	bne.n	8000cc8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c74:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c78:	f023 0302 	bic.w	r3, r3, #2
 8000c7c:	f043 0202 	orr.w	r2, r3, #2
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	689a      	ldr	r2, [r3, #8]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000c92:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	689a      	ldr	r2, [r3, #8]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ca2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000ca4:	4b94      	ldr	r3, [pc, #592]	; (8000ef8 <HAL_ADC_Init+0x310>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a94      	ldr	r2, [pc, #592]	; (8000efc <HAL_ADC_Init+0x314>)
 8000caa:	fba2 2303 	umull	r2, r3, r2, r3
 8000cae:	0c9a      	lsrs	r2, r3, #18
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	4413      	add	r3, r2
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000cba:	e002      	b.n	8000cc2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d1f9      	bne.n	8000cbc <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	689b      	ldr	r3, [r3, #8]
 8000cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d007      	beq.n	8000ce6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000ce0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ce4:	d110      	bne.n	8000d08 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cea:	f023 0312 	bic.w	r3, r3, #18
 8000cee:	f043 0210 	orr.w	r2, r3, #16
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfa:	f043 0201 	orr.w	r2, r3, #1
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0c:	f003 0310 	and.w	r3, r3, #16
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	f040 80df 	bne.w	8000ed4 <HAL_ADC_Init+0x2ec>
 8000d16:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	f040 80da 	bne.w	8000ed4 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	f040 80d2 	bne.w	8000ed4 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d34:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000d38:	f043 0202 	orr.w	r2, r3, #2
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d40:	4b6f      	ldr	r3, [pc, #444]	; (8000f00 <HAL_ADC_Init+0x318>)
 8000d42:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d4c:	d102      	bne.n	8000d54 <HAL_ADC_Init+0x16c>
 8000d4e:	4b6d      	ldr	r3, [pc, #436]	; (8000f04 <HAL_ADC_Init+0x31c>)
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	e002      	b.n	8000d5a <HAL_ADC_Init+0x172>
 8000d54:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d58:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	f003 0303 	and.w	r3, r3, #3
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d108      	bne.n	8000d7a <HAL_ADC_Init+0x192>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d101      	bne.n	8000d7a <HAL_ADC_Init+0x192>
 8000d76:	2301      	movs	r3, #1
 8000d78:	e000      	b.n	8000d7c <HAL_ADC_Init+0x194>
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d11c      	bne.n	8000dba <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000d80:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d010      	beq.n	8000da8 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	f003 0303 	and.w	r3, r3, #3
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d107      	bne.n	8000da2 <HAL_ADC_Init+0x1ba>
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d101      	bne.n	8000da2 <HAL_ADC_Init+0x1ba>
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e000      	b.n	8000da4 <HAL_ADC_Init+0x1bc>
 8000da2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d108      	bne.n	8000dba <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000da8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	431a      	orrs	r2, r3
 8000db6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000db8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	7e5b      	ldrb	r3, [r3, #25]
 8000dbe:	035b      	lsls	r3, r3, #13
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000dc4:	2a01      	cmp	r2, #1
 8000dc6:	d002      	beq.n	8000dce <HAL_ADC_Init+0x1e6>
 8000dc8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dcc:	e000      	b.n	8000dd0 <HAL_ADC_Init+0x1e8>
 8000dce:	2200      	movs	r2, #0
 8000dd0:	431a      	orrs	r2, r3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	68db      	ldr	r3, [r3, #12]
 8000dd6:	431a      	orrs	r2, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000de0:	4313      	orrs	r3, r2
 8000de2:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d11b      	bne.n	8000e26 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	7e5b      	ldrb	r3, [r3, #25]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d109      	bne.n	8000e0a <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	045a      	lsls	r2, r3, #17
 8000dfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000e00:	4313      	orrs	r3, r2
 8000e02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e06:	663b      	str	r3, [r7, #96]	; 0x60
 8000e08:	e00d      	b.n	8000e26 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000e12:	f043 0220 	orr.w	r2, r3, #32
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1e:	f043 0201 	orr.w	r2, r3, #1
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d007      	beq.n	8000e3e <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e36:	4313      	orrs	r3, r2
 8000e38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	f003 030c 	and.w	r3, r3, #12
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d114      	bne.n	8000e76 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	68db      	ldr	r3, [r3, #12]
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	6812      	ldr	r2, [r2, #0]
 8000e56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000e5a:	f023 0302 	bic.w	r3, r3, #2
 8000e5e:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	7e1b      	ldrb	r3, [r3, #24]
 8000e64:	039a      	lsls	r2, r3, #14
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000e72:	4313      	orrs	r3, r2
 8000e74:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	68da      	ldr	r2, [r3, #12]
 8000e7c:	4b22      	ldr	r3, [pc, #136]	; (8000f08 <HAL_ADC_Init+0x320>)
 8000e7e:	4013      	ands	r3, r2
 8000e80:	687a      	ldr	r2, [r7, #4]
 8000e82:	6812      	ldr	r2, [r2, #0]
 8000e84:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000e86:	430b      	orrs	r3, r1
 8000e88:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	691b      	ldr	r3, [r3, #16]
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d10c      	bne.n	8000eac <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e98:	f023 010f 	bic.w	r1, r3, #15
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	69db      	ldr	r3, [r3, #28]
 8000ea0:	1e5a      	subs	r2, r3, #1
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	631a      	str	r2, [r3, #48]	; 0x30
 8000eaa:	e007      	b.n	8000ebc <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f022 020f 	bic.w	r2, r2, #15
 8000eba:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	f023 0303 	bic.w	r3, r3, #3
 8000eca:	f043 0201 	orr.w	r2, r3, #1
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	641a      	str	r2, [r3, #64]	; 0x40
 8000ed2:	e00a      	b.n	8000eea <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed8:	f023 0312 	bic.w	r3, r3, #18
 8000edc:	f043 0210 	orr.w	r2, r3, #16
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000eea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3768      	adds	r7, #104	; 0x68
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000000 	.word	0x20000000
 8000efc:	431bde83 	.word	0x431bde83
 8000f00:	50000300 	.word	0x50000300
 8000f04:	50000100 	.word	0x50000100
 8000f08:	fff0c007 	.word	0xfff0c007

08000f0c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b09b      	sub	sp, #108	; 0x6c
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f16:	2300      	movs	r3, #0
 8000f18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d101      	bne.n	8000f2e <HAL_ADC_ConfigChannel+0x22>
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	e2a4      	b.n	8001478 <HAL_ADC_ConfigChannel+0x56c>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2201      	movs	r2, #1
 8000f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	f003 0304 	and.w	r3, r3, #4
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	f040 8288 	bne.w	8001456 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	2b04      	cmp	r3, #4
 8000f4c:	d81c      	bhi.n	8000f88 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685a      	ldr	r2, [r3, #4]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	4413      	add	r3, r2
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	461a      	mov	r2, r3
 8000f62:	231f      	movs	r3, #31
 8000f64:	4093      	lsls	r3, r2
 8000f66:	43db      	mvns	r3, r3
 8000f68:	4019      	ands	r1, r3
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	6818      	ldr	r0, [r3, #0]
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685a      	ldr	r2, [r3, #4]
 8000f72:	4613      	mov	r3, r2
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	4413      	add	r3, r2
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	fa00 f203 	lsl.w	r2, r0, r3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	430a      	orrs	r2, r1
 8000f84:	631a      	str	r2, [r3, #48]	; 0x30
 8000f86:	e063      	b.n	8001050 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	2b09      	cmp	r3, #9
 8000f8e:	d81e      	bhi.n	8000fce <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685a      	ldr	r2, [r3, #4]
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	4413      	add	r3, r2
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	3b1e      	subs	r3, #30
 8000fa4:	221f      	movs	r2, #31
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43db      	mvns	r3, r3
 8000fac:	4019      	ands	r1, r3
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	6818      	ldr	r0, [r3, #0]
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685a      	ldr	r2, [r3, #4]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	4413      	add	r3, r2
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	3b1e      	subs	r3, #30
 8000fc0:	fa00 f203 	lsl.w	r2, r0, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	635a      	str	r2, [r3, #52]	; 0x34
 8000fcc:	e040      	b.n	8001050 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	2b0e      	cmp	r3, #14
 8000fd4:	d81e      	bhi.n	8001014 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685a      	ldr	r2, [r3, #4]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	4413      	add	r3, r2
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	3b3c      	subs	r3, #60	; 0x3c
 8000fea:	221f      	movs	r2, #31
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	4019      	ands	r1, r3
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	6818      	ldr	r0, [r3, #0]
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685a      	ldr	r2, [r3, #4]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	4413      	add	r3, r2
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	3b3c      	subs	r3, #60	; 0x3c
 8001006:	fa00 f203 	lsl.w	r2, r0, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	430a      	orrs	r2, r1
 8001010:	639a      	str	r2, [r3, #56]	; 0x38
 8001012:	e01d      	b.n	8001050 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	4613      	mov	r3, r2
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	4413      	add	r3, r2
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	3b5a      	subs	r3, #90	; 0x5a
 8001028:	221f      	movs	r2, #31
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	4019      	ands	r1, r3
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	6818      	ldr	r0, [r3, #0]
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685a      	ldr	r2, [r3, #4]
 800103a:	4613      	mov	r3, r2
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	4413      	add	r3, r2
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	3b5a      	subs	r3, #90	; 0x5a
 8001044:	fa00 f203 	lsl.w	r2, r0, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	430a      	orrs	r2, r1
 800104e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	f003 030c 	and.w	r3, r3, #12
 800105a:	2b00      	cmp	r3, #0
 800105c:	f040 80e5 	bne.w	800122a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b09      	cmp	r3, #9
 8001066:	d91c      	bls.n	80010a2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	6999      	ldr	r1, [r3, #24]
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	4613      	mov	r3, r2
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	4413      	add	r3, r2
 8001078:	3b1e      	subs	r3, #30
 800107a:	2207      	movs	r2, #7
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	4019      	ands	r1, r3
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	6898      	ldr	r0, [r3, #8]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4613      	mov	r3, r2
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	4413      	add	r3, r2
 8001092:	3b1e      	subs	r3, #30
 8001094:	fa00 f203 	lsl.w	r2, r0, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	430a      	orrs	r2, r1
 800109e:	619a      	str	r2, [r3, #24]
 80010a0:	e019      	b.n	80010d6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	6959      	ldr	r1, [r3, #20]
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	4613      	mov	r3, r2
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	4413      	add	r3, r2
 80010b2:	2207      	movs	r2, #7
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	4019      	ands	r1, r3
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	6898      	ldr	r0, [r3, #8]
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	4613      	mov	r3, r2
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	4413      	add	r3, r2
 80010ca:	fa00 f203 	lsl.w	r2, r0, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	430a      	orrs	r2, r1
 80010d4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	695a      	ldr	r2, [r3, #20]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	08db      	lsrs	r3, r3, #3
 80010e2:	f003 0303 	and.w	r3, r3, #3
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	691b      	ldr	r3, [r3, #16]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	2b03      	cmp	r3, #3
 80010f6:	d84f      	bhi.n	8001198 <HAL_ADC_ConfigChannel+0x28c>
 80010f8:	a201      	add	r2, pc, #4	; (adr r2, 8001100 <HAL_ADC_ConfigChannel+0x1f4>)
 80010fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010fe:	bf00      	nop
 8001100:	08001111 	.word	0x08001111
 8001104:	08001133 	.word	0x08001133
 8001108:	08001155 	.word	0x08001155
 800110c:	08001177 	.word	0x08001177
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001116:	4b94      	ldr	r3, [pc, #592]	; (8001368 <HAL_ADC_ConfigChannel+0x45c>)
 8001118:	4013      	ands	r3, r2
 800111a:	683a      	ldr	r2, [r7, #0]
 800111c:	6812      	ldr	r2, [r2, #0]
 800111e:	0691      	lsls	r1, r2, #26
 8001120:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001122:	430a      	orrs	r2, r1
 8001124:	431a      	orrs	r2, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800112e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001130:	e07e      	b.n	8001230 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001138:	4b8b      	ldr	r3, [pc, #556]	; (8001368 <HAL_ADC_ConfigChannel+0x45c>)
 800113a:	4013      	ands	r3, r2
 800113c:	683a      	ldr	r2, [r7, #0]
 800113e:	6812      	ldr	r2, [r2, #0]
 8001140:	0691      	lsls	r1, r2, #26
 8001142:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001144:	430a      	orrs	r2, r1
 8001146:	431a      	orrs	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001150:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001152:	e06d      	b.n	8001230 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800115a:	4b83      	ldr	r3, [pc, #524]	; (8001368 <HAL_ADC_ConfigChannel+0x45c>)
 800115c:	4013      	ands	r3, r2
 800115e:	683a      	ldr	r2, [r7, #0]
 8001160:	6812      	ldr	r2, [r2, #0]
 8001162:	0691      	lsls	r1, r2, #26
 8001164:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001166:	430a      	orrs	r2, r1
 8001168:	431a      	orrs	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001172:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001174:	e05c      	b.n	8001230 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800117c:	4b7a      	ldr	r3, [pc, #488]	; (8001368 <HAL_ADC_ConfigChannel+0x45c>)
 800117e:	4013      	ands	r3, r2
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	6812      	ldr	r2, [r2, #0]
 8001184:	0691      	lsls	r1, r2, #26
 8001186:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001188:	430a      	orrs	r2, r1
 800118a:	431a      	orrs	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001194:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001196:	e04b      	b.n	8001230 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800119e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	069b      	lsls	r3, r3, #26
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d107      	bne.n	80011bc <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80011ba:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80011c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	069b      	lsls	r3, r3, #26
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d107      	bne.n	80011e0 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80011de:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80011e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	069b      	lsls	r3, r3, #26
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d107      	bne.n	8001204 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001202:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800120a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	069b      	lsls	r3, r3, #26
 8001214:	429a      	cmp	r2, r3
 8001216:	d10a      	bne.n	800122e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001226:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001228:	e001      	b.n	800122e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800122a:	bf00      	nop
 800122c:	e000      	b.n	8001230 <HAL_ADC_ConfigChannel+0x324>
      break;
 800122e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	f003 0303 	and.w	r3, r3, #3
 800123a:	2b01      	cmp	r3, #1
 800123c:	d108      	bne.n	8001250 <HAL_ADC_ConfigChannel+0x344>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0301 	and.w	r3, r3, #1
 8001248:	2b01      	cmp	r3, #1
 800124a:	d101      	bne.n	8001250 <HAL_ADC_ConfigChannel+0x344>
 800124c:	2301      	movs	r3, #1
 800124e:	e000      	b.n	8001252 <HAL_ADC_ConfigChannel+0x346>
 8001250:	2300      	movs	r3, #0
 8001252:	2b00      	cmp	r3, #0
 8001254:	f040 810a 	bne.w	800146c <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d00f      	beq.n	8001280 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2201      	movs	r2, #1
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43da      	mvns	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	400a      	ands	r2, r1
 800127a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800127e:	e049      	b.n	8001314 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2201      	movs	r2, #1
 800128e:	409a      	lsls	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	430a      	orrs	r2, r1
 8001296:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2b09      	cmp	r3, #9
 80012a0:	d91c      	bls.n	80012dc <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	6999      	ldr	r1, [r3, #24]
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	4613      	mov	r3, r2
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	4413      	add	r3, r2
 80012b2:	3b1b      	subs	r3, #27
 80012b4:	2207      	movs	r2, #7
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	43db      	mvns	r3, r3
 80012bc:	4019      	ands	r1, r3
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	6898      	ldr	r0, [r3, #8]
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	4613      	mov	r3, r2
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	4413      	add	r3, r2
 80012cc:	3b1b      	subs	r3, #27
 80012ce:	fa00 f203 	lsl.w	r2, r0, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	430a      	orrs	r2, r1
 80012d8:	619a      	str	r2, [r3, #24]
 80012da:	e01b      	b.n	8001314 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	6959      	ldr	r1, [r3, #20]
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	1c5a      	adds	r2, r3, #1
 80012e8:	4613      	mov	r3, r2
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	4413      	add	r3, r2
 80012ee:	2207      	movs	r2, #7
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	4019      	ands	r1, r3
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	6898      	ldr	r0, [r3, #8]
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	1c5a      	adds	r2, r3, #1
 8001302:	4613      	mov	r3, r2
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	4413      	add	r3, r2
 8001308:	fa00 f203 	lsl.w	r2, r0, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	430a      	orrs	r2, r1
 8001312:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001314:	4b15      	ldr	r3, [pc, #84]	; (800136c <HAL_ADC_ConfigChannel+0x460>)
 8001316:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b10      	cmp	r3, #16
 800131e:	d105      	bne.n	800132c <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001320:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001328:	2b00      	cmp	r3, #0
 800132a:	d015      	beq.n	8001358 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001330:	2b11      	cmp	r3, #17
 8001332:	d105      	bne.n	8001340 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001334:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800133c:	2b00      	cmp	r3, #0
 800133e:	d00b      	beq.n	8001358 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001344:	2b12      	cmp	r3, #18
 8001346:	f040 8091 	bne.w	800146c <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800134a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001352:	2b00      	cmp	r3, #0
 8001354:	f040 808a 	bne.w	800146c <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001360:	d108      	bne.n	8001374 <HAL_ADC_ConfigChannel+0x468>
 8001362:	4b03      	ldr	r3, [pc, #12]	; (8001370 <HAL_ADC_ConfigChannel+0x464>)
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	e008      	b.n	800137a <HAL_ADC_ConfigChannel+0x46e>
 8001368:	83fff000 	.word	0x83fff000
 800136c:	50000300 	.word	0x50000300
 8001370:	50000100 	.word	0x50000100
 8001374:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001378:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	f003 0303 	and.w	r3, r3, #3
 8001384:	2b01      	cmp	r3, #1
 8001386:	d108      	bne.n	800139a <HAL_ADC_ConfigChannel+0x48e>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	2b01      	cmp	r3, #1
 8001394:	d101      	bne.n	800139a <HAL_ADC_ConfigChannel+0x48e>
 8001396:	2301      	movs	r3, #1
 8001398:	e000      	b.n	800139c <HAL_ADC_ConfigChannel+0x490>
 800139a:	2300      	movs	r3, #0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d150      	bne.n	8001442 <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80013a0:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d010      	beq.n	80013c8 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f003 0303 	and.w	r3, r3, #3
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d107      	bne.n	80013c2 <HAL_ADC_ConfigChannel+0x4b6>
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d101      	bne.n	80013c2 <HAL_ADC_ConfigChannel+0x4b6>
 80013be:	2301      	movs	r3, #1
 80013c0:	e000      	b.n	80013c4 <HAL_ADC_ConfigChannel+0x4b8>
 80013c2:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d13c      	bne.n	8001442 <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b10      	cmp	r3, #16
 80013ce:	d11d      	bne.n	800140c <HAL_ADC_ConfigChannel+0x500>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013d8:	d118      	bne.n	800140c <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80013da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80013e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013e4:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013e6:	4b27      	ldr	r3, [pc, #156]	; (8001484 <HAL_ADC_ConfigChannel+0x578>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a27      	ldr	r2, [pc, #156]	; (8001488 <HAL_ADC_ConfigChannel+0x57c>)
 80013ec:	fba2 2303 	umull	r2, r3, r2, r3
 80013f0:	0c9a      	lsrs	r2, r3, #18
 80013f2:	4613      	mov	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013fc:	e002      	b.n	8001404 <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	3b01      	subs	r3, #1
 8001402:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1f9      	bne.n	80013fe <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800140a:	e02e      	b.n	800146a <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2b11      	cmp	r3, #17
 8001412:	d10b      	bne.n	800142c <HAL_ADC_ConfigChannel+0x520>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800141c:	d106      	bne.n	800142c <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800141e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001426:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001428:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800142a:	e01e      	b.n	800146a <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2b12      	cmp	r3, #18
 8001432:	d11a      	bne.n	800146a <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001434:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800143c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800143e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001440:	e013      	b.n	800146a <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	f043 0220 	orr.w	r2, r3, #32
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001454:	e00a      	b.n	800146c <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	f043 0220 	orr.w	r2, r3, #32
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001468:	e000      	b.n	800146c <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800146a:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001474:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001478:	4618      	mov	r0, r3
 800147a:	376c      	adds	r7, #108	; 0x6c
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	20000000 	.word	0x20000000
 8001488:	431bde83 	.word	0x431bde83

0800148c <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 800148c:	b480      	push	{r7}
 800148e:	b09d      	sub	sp, #116	; 0x74
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001496:	2300      	movs	r3, #0
 8001498:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]
  
  /* Injected context queue feature: temporary JSQR variables defined in      */
  /* static to be passed over calls of this function                          */
  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 80014a0:	2300      	movs	r3, #0
 80014a2:	66bb      	str	r3, [r7, #104]	; 0x68
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfigInjected->InjectedChannel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d101      	bne.n	80014b2 <HAL_ADCEx_InjectedConfigChannel+0x26>
 80014ae:	2302      	movs	r3, #2
 80014b0:	e2ff      	b.n	8001ab2 <HAL_ADCEx_InjectedConfigChannel+0x626>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2201      	movs	r2, #1
 80014b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */
  
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	691b      	ldr	r3, [r3, #16]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <HAL_ADCEx_InjectedConfigChannel+0x3e>
      (sConfigInjected->InjectedNbrOfConversion == 1U)  )
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	699b      	ldr	r3, [r3, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d132      	bne.n	8001530 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 used)        */
    
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d124      	bne.n	800151c <HAL_ADCEx_InjectedConfigChannel+0x90>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	6a1b      	ldr	r3, [r3, #32]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d00c      	beq.n	80014f4 <HAL_ADCEx_InjectedConfigChannel+0x68>
      {
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	021a      	lsls	r2, r3, #8
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	6a1b      	ldr	r3, [r3, #32]
 80014e4:	431a      	orrs	r2, r3
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ea:	4313      	orrs	r3, r2
 80014ec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80014ee:	4313      	orrs	r3, r2
 80014f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80014f2:	e005      	b.n	8001500 <HAL_ADCEx_InjectedConfigChannel+0x74>
                                                 ADC_JSQR_JEXTSEL_SET(hadc, sConfigInjected->ExternalTrigInjecConv) |
                                                 sConfigInjected->ExternalTrigInjecConvEdge                          );
      }
      else
      {
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) );
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	021b      	lsls	r3, r3, #8
 80014fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80014fc:	4313      	orrs	r3, r2
 80014fe:	66bb      	str	r3, [r7, #104]	; 0x68
      }
      
      /* Update ADC register JSQR */
      MODIFY_REG(hadc->Instance->JSQR           ,
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001506:	4b9c      	ldr	r3, [pc, #624]	; (8001778 <HAL_ADCEx_InjectedConfigChannel+0x2ec>)
 8001508:	4013      	ands	r3, r2
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	6812      	ldr	r2, [r2, #0]
 800150e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001510:	430b      	orrs	r3, r1
 8001512:	64d3      	str	r3, [r2, #76]	; 0x4c
                 ADC_JSQR_JEXTSEL |
                 ADC_JSQR_JL                    ,
                 tmp_JSQR_ContextQueueBeingBuilt );
      
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001518:	649a      	str	r2, [r3, #72]	; 0x48
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800151a:	e060      	b.n	80015de <HAL_ADCEx_InjectedConfigChannel+0x152>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001520:	f043 0220 	orr.w	r2, r3, #32
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	641a      	str	r2, [r3, #64]	; 0x40
      
      tmp_hal_status = HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800152e:	e056      	b.n	80015de <HAL_ADCEx_InjectedConfigChannel+0x152>
    /* Procedure to define injected context register JSQR over successive     */
    /* calls of this function, for each injected channel rank:                */
    
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger                      */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001534:	2b00      	cmp	r3, #0
 8001536:	d121      	bne.n	800157c <HAL_ADCEx_InjectedConfigChannel+0xf0>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	699a      	ldr	r2, [r3, #24]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Initialize value that will be set into register JSQR */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	649a      	str	r2, [r3, #72]	; 0x48
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	6a1b      	ldr	r3, [r3, #32]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d00e      	beq.n	800156c <HAL_ADCEx_InjectedConfigChannel+0xe0>
      {
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	1e59      	subs	r1, r3, #1
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	6a1b      	ldr	r3, [r3, #32]
 800155c:	4319      	orrs	r1, r3
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001562:	430b      	orrs	r3, r1
 8001564:	431a      	orrs	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	649a      	str	r2, [r3, #72]	; 0x48
 800156a:	e007      	b.n	800157c <HAL_ADCEx_InjectedConfigChannel+0xf0>
                                                    ADC_JSQR_JEXTSEL_SET(hadc, sConfigInjected->ExternalTrigInjecConv) |
                                                    sConfigInjected->ExternalTrigInjecConvEdge                          );        
      }
      else
      {
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U) );        
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	3b01      	subs	r3, #1
 8001576:	431a      	orrs	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	649a      	str	r2, [r3, #72]	; 0x48

      /* 2. Continue setting of context under definition with parameter       */
      /*    related to each channel: channel rank sequence                    */
      
      /* Set the JSQx bits for the selected rank */
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685a      	ldr	r2, [r3, #4]
 8001584:	4613      	mov	r3, r2
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	4413      	add	r3, r2
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	3302      	adds	r3, #2
 800158e:	221f      	movs	r2, #31
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	43db      	mvns	r3, r3
 8001596:	4019      	ands	r1, r3
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	6818      	ldr	r0, [r3, #0]
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	4613      	mov	r3, r2
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	4413      	add	r3, r2
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	3302      	adds	r3, #2
 80015aa:	fa00 f303 	lsl.w	r3, r0, r3
 80015ae:	ea41 0203 	orr.w	r2, r1, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	649a      	str	r2, [r3, #72]	; 0x48
                 ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank)                   ,
                 ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank) );
      
      /* Decrease channel count after setting into temporary JSQR variable */
      hadc->InjectionConfig.ChannelCount --;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ba:	1e5a      	subs	r2, r3, #1
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* 3. End of context setting: If last channel set, then write context   */
      /*    into register JSQR and make it enter into queue                   */
      if (hadc->InjectionConfig.ChannelCount == 0U)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d10a      	bne.n	80015de <HAL_ADCEx_InjectedConfigChannel+0x152>
      {
        /* Update ADC register JSQR */
        MODIFY_REG(hadc->Instance->JSQR              ,
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015ce:	4b6a      	ldr	r3, [pc, #424]	; (8001778 <HAL_ADCEx_InjectedConfigChannel+0x2ec>)
 80015d0:	4013      	ands	r3, r2
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	6812      	ldr	r2, [r2, #0]
 80015da:	430b      	orrs	r3, r1
 80015dc:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f003 0308 	and.w	r3, r3, #8
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d12d      	bne.n	8001648 <HAL_ADCEx_InjectedConfigChannel+0x1bc>
  {     
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	7f5b      	ldrb	r3, [r3, #29]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d110      	bne.n	8001616 <HAL_ADCEx_InjectedConfigChannel+0x18a>
    {
      MODIFY_REG(hadc->Instance->CFGR                                                            ,
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	7f9b      	ldrb	r3, [r3, #30]
 8001602:	055a      	lsls	r2, r3, #21
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	7f1b      	ldrb	r3, [r3, #28]
 8001608:	051b      	lsls	r3, r3, #20
 800160a:	431a      	orrs	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	430a      	orrs	r2, r1
 8001612:	60da      	str	r2, [r3, #12]
 8001614:	e018      	b.n	8001648 <HAL_ADCEx_InjectedConfigChannel+0x1bc>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR                                                ,
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	7f9b      	ldrb	r3, [r3, #30]
 8001624:	055a      	lsls	r2, r3, #21
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	430a      	orrs	r2, r1
 800162c:	60da      	str	r2, [r3, #12]
                 ADC_CFGR_JDISCEN                                                    ,
                 ADC_CFGR_INJECT_CONTEXT_QUEUE((uint32_t)sConfigInjected->QueueInjectedContext) );
      
      /* If injected discontinuous mode was intended to be set and could not  */
      /* due to auto-injected enabled, error is reported.                     */
      if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	7f1b      	ldrb	r3, [r3, #28]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d108      	bne.n	8001648 <HAL_ADCEx_InjectedConfigChannel+0x1bc>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	f043 0220 	orr.w	r2, r3, #32
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f003 030c 	and.w	r3, r3, #12
 8001652:	2b00      	cmp	r3, #0
 8001654:	f040 8110 	bne.w	8001878 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
  {    
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d10c      	bne.n	800167a <HAL_ADCEx_InjectedConfigChannel+0x1ee>
    {
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	f023 7100 	bic.w	r1, r3, #33554432	; 0x2000000
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	7f5b      	ldrb	r3, [r3, #29]
 800166e:	065a      	lsls	r2, r3, #25
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	430a      	orrs	r2, r1
 8001676:	60da      	str	r2, [r3, #12]
 8001678:	e014      	b.n	80016a4 <HAL_ADCEx_InjectedConfigChannel+0x218>
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      /* Disable Automatic injected conversion */
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	68da      	ldr	r2, [r3, #12]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8001688:	60da      	str	r2, [r3, #12]
      
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	7f5b      	ldrb	r3, [r3, #29]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d108      	bne.n	80016a4 <HAL_ADCEx_InjectedConfigChannel+0x218>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	f043 0220 	orr.w	r2, r3, #32
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    }
      

    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b09      	cmp	r3, #9
 80016aa:	d91c      	bls.n	80016e6 <HAL_ADCEx_InjectedConfigChannel+0x25a>
    {
      MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6999      	ldr	r1, [r3, #24]
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	4613      	mov	r3, r2
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	4413      	add	r3, r2
 80016bc:	3b1e      	subs	r3, #30
 80016be:	2207      	movs	r2, #7
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	43db      	mvns	r3, r3
 80016c6:	4019      	ands	r1, r3
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	6898      	ldr	r0, [r3, #8]
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	4613      	mov	r3, r2
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	4413      	add	r3, r2
 80016d6:	3b1e      	subs	r3, #30
 80016d8:	fa00 f203 	lsl.w	r2, r0, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	430a      	orrs	r2, r1
 80016e2:	619a      	str	r2, [r3, #24]
 80016e4:	e019      	b.n	800171a <HAL_ADCEx_InjectedConfigChannel+0x28e>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel)                      ,
                 ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6959      	ldr	r1, [r3, #20]
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	4613      	mov	r3, r2
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	4413      	add	r3, r2
 80016f6:	2207      	movs	r2, #7
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	43db      	mvns	r3, r3
 80016fe:	4019      	ands	r1, r3
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	6898      	ldr	r0, [r3, #8]
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	4613      	mov	r3, r2
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	4413      	add	r3, r2
 800170e:	fa00 f203 	lsl.w	r2, r0, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	430a      	orrs	r2, r1
 8001718:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */
    
    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	695a      	ldr	r2, [r3, #20]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	08db      	lsrs	r3, r3, #3
 8001726:	f003 0303 	and.w	r3, r3, #3
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	667b      	str	r3, [r7, #100]	; 0x64
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfigInjected->InjectedOffsetNumber)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	3b01      	subs	r3, #1
 8001738:	2b03      	cmp	r3, #3
 800173a:	d854      	bhi.n	80017e6 <HAL_ADCEx_InjectedConfigChannel+0x35a>
 800173c:	a201      	add	r2, pc, #4	; (adr r2, 8001744 <HAL_ADCEx_InjectedConfigChannel+0x2b8>)
 800173e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001742:	bf00      	nop
 8001744:	08001755 	.word	0x08001755
 8001748:	08001781 	.word	0x08001781
 800174c:	080017a3 	.word	0x080017a3
 8001750:	080017c5 	.word	0x080017c5
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1                               ,
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800175a:	4b08      	ldr	r3, [pc, #32]	; (800177c <HAL_ADCEx_InjectedConfigChannel+0x2f0>)
 800175c:	4013      	ands	r3, r2
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	6812      	ldr	r2, [r2, #0]
 8001762:	0691      	lsls	r1, r2, #26
 8001764:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001766:	430a      	orrs	r2, r1
 8001768:	431a      	orrs	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001772:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                                   ,
                 ADC_OFR1_OFFSET1_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8001774:	e083      	b.n	800187e <HAL_ADCEx_InjectedConfigChannel+0x3f2>
 8001776:	bf00      	nop
 8001778:	82082000 	.word	0x82082000
 800177c:	83fff000 	.word	0x83fff000
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2                               ,
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001786:	4b95      	ldr	r3, [pc, #596]	; (80019dc <HAL_ADCEx_InjectedConfigChannel+0x550>)
 8001788:	4013      	ands	r3, r2
 800178a:	683a      	ldr	r2, [r7, #0]
 800178c:	6812      	ldr	r2, [r2, #0]
 800178e:	0691      	lsls	r1, r2, #26
 8001790:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001792:	430a      	orrs	r2, r1
 8001794:	431a      	orrs	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800179e:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                                   ,
                 ADC_OFR2_OFFSET2_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 80017a0:	e06d      	b.n	800187e <HAL_ADCEx_InjectedConfigChannel+0x3f2>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3                               ,
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80017a8:	4b8c      	ldr	r3, [pc, #560]	; (80019dc <HAL_ADCEx_InjectedConfigChannel+0x550>)
 80017aa:	4013      	ands	r3, r2
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	6812      	ldr	r2, [r2, #0]
 80017b0:	0691      	lsls	r1, r2, #26
 80017b2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80017b4:	430a      	orrs	r2, r1
 80017b6:	431a      	orrs	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017c0:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                                   ,
                 ADC_OFR3_OFFSET3_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 80017c2:	e05c      	b.n	800187e <HAL_ADCEx_InjectedConfigChannel+0x3f2>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4                               ,
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80017ca:	4b84      	ldr	r3, [pc, #528]	; (80019dc <HAL_ADCEx_InjectedConfigChannel+0x550>)
 80017cc:	4013      	ands	r3, r2
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	6812      	ldr	r2, [r2, #0]
 80017d2:	0691      	lsls	r1, r2, #26
 80017d4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80017d6:	430a      	orrs	r2, r1
 80017d8:	431a      	orrs	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017e2:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                                   ,
                 ADC_OFR4_OFFSET4_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 80017e4:	e04b      	b.n	800187e <HAL_ADCEx_InjectedConfigChannel+0x3f2>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	069b      	lsls	r3, r3, #26
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d107      	bne.n	800180a <HAL_ADCEx_InjectedConfigChannel+0x37e>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001808:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001810:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	069b      	lsls	r3, r3, #26
 800181a:	429a      	cmp	r2, r3
 800181c:	d107      	bne.n	800182e <HAL_ADCEx_InjectedConfigChannel+0x3a2>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800182c:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001834:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	069b      	lsls	r3, r3, #26
 800183e:	429a      	cmp	r2, r3
 8001840:	d107      	bne.n	8001852 <HAL_ADCEx_InjectedConfigChannel+0x3c6>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001850:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001858:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	069b      	lsls	r3, r3, #26
 8001862:	429a      	cmp	r2, r3
 8001864:	d10a      	bne.n	800187c <HAL_ADCEx_InjectedConfigChannel+0x3f0>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001874:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001876:	e001      	b.n	800187c <HAL_ADCEx_InjectedConfigChannel+0x3f0>
    }
    
  }
 8001878:	bf00      	nop
 800187a:	e000      	b.n	800187e <HAL_ADCEx_InjectedConfigChannel+0x3f2>
      break;
 800187c:	bf00      	nop
  
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f003 0303 	and.w	r3, r3, #3
 8001888:	2b01      	cmp	r3, #1
 800188a:	d108      	bne.n	800189e <HAL_ADCEx_InjectedConfigChannel+0x412>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	2b01      	cmp	r3, #1
 8001898:	d101      	bne.n	800189e <HAL_ADCEx_InjectedConfigChannel+0x412>
 800189a:	2301      	movs	r3, #1
 800189c:	e000      	b.n	80018a0 <HAL_ADCEx_InjectedConfigChannel+0x414>
 800189e:	2300      	movs	r3, #0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f040 8100 	bne.w	8001aa6 <HAL_ADCEx_InjectedConfigChannel+0x61a>
  {
    /* Configuration of differential mode */
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d00f      	beq.n	80018ce <HAL_ADCEx_InjectedConfigChannel+0x442>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2201      	movs	r2, #1
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43da      	mvns	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	400a      	ands	r2, r1
 80018c8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80018cc:	e049      	b.n	8001962 <HAL_ADCEx_InjectedConfigChannel+0x4d6>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2201      	movs	r2, #1
 80018dc:	409a      	lsls	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	430a      	orrs	r2, r1
 80018e4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b09      	cmp	r3, #9
 80018ee:	d91c      	bls.n	800192a <HAL_ADCEx_InjectedConfigChannel+0x49e>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6999      	ldr	r1, [r3, #24]
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	4613      	mov	r3, r2
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	4413      	add	r3, r2
 8001900:	3b1b      	subs	r3, #27
 8001902:	2207      	movs	r2, #7
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	43db      	mvns	r3, r3
 800190a:	4019      	ands	r1, r3
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	6898      	ldr	r0, [r3, #8]
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	4613      	mov	r3, r2
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	4413      	add	r3, r2
 800191a:	3b1b      	subs	r3, #27
 800191c:	fa00 f203 	lsl.w	r2, r0, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	430a      	orrs	r2, r1
 8001926:	619a      	str	r2, [r3, #24]
 8001928:	e01b      	b.n	8001962 <HAL_ADCEx_InjectedConfigChannel+0x4d6>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel +1U),
                   ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6959      	ldr	r1, [r3, #20]
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	1c5a      	adds	r2, r3, #1
 8001936:	4613      	mov	r3, r2
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	4413      	add	r3, r2
 800193c:	2207      	movs	r2, #7
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43db      	mvns	r3, r3
 8001944:	4019      	ands	r1, r3
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	6898      	ldr	r0, [r3, #8]
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	1c5a      	adds	r2, r3, #1
 8001950:	4613      	mov	r3, r2
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	4413      	add	r3, r2
 8001956:	fa00 f203 	lsl.w	r2, r0, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	430a      	orrs	r2, r1
 8001960:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001962:	4b1f      	ldr	r3, [pc, #124]	; (80019e0 <HAL_ADCEx_InjectedConfigChannel+0x554>)
 8001964:	663b      	str	r3, [r7, #96]	; 0x60
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2b10      	cmp	r3, #16
 800196c:	d105      	bne.n	800197a <HAL_ADCEx_InjectedConfigChannel+0x4ee>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800196e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8001976:	2b00      	cmp	r3, #0
 8001978:	d015      	beq.n	80019a6 <HAL_ADCEx_InjectedConfigChannel+0x51a>
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800197e:	2b11      	cmp	r3, #17
 8001980:	d105      	bne.n	800198e <HAL_ADCEx_InjectedConfigChannel+0x502>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001982:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 800198a:	2b00      	cmp	r3, #0
 800198c:	d00b      	beq.n	80019a6 <HAL_ADCEx_InjectedConfigChannel+0x51a>
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001992:	2b12      	cmp	r3, #18
 8001994:	f040 8087 	bne.w	8001aa6 <HAL_ADCEx_InjectedConfigChannel+0x61a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001998:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f040 8080 	bne.w	8001aa6 <HAL_ADCEx_InjectedConfigChannel+0x61a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019ae:	d102      	bne.n	80019b6 <HAL_ADCEx_InjectedConfigChannel+0x52a>
 80019b0:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <HAL_ADCEx_InjectedConfigChannel+0x558>)
 80019b2:	613b      	str	r3, [r7, #16]
 80019b4:	e002      	b.n	80019bc <HAL_ADCEx_InjectedConfigChannel+0x530>
 80019b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80019ba:	613b      	str	r3, [r7, #16]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 0303 	and.w	r3, r3, #3
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d10e      	bne.n	80019e8 <HAL_ADCEx_InjectedConfigChannel+0x55c>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d107      	bne.n	80019e8 <HAL_ADCEx_InjectedConfigChannel+0x55c>
 80019d8:	2301      	movs	r3, #1
 80019da:	e006      	b.n	80019ea <HAL_ADCEx_InjectedConfigChannel+0x55e>
 80019dc:	83fff000 	.word	0x83fff000
 80019e0:	50000300 	.word	0x50000300
 80019e4:	50000100 	.word	0x50000100
 80019e8:	2300      	movs	r3, #0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d150      	bne.n	8001a90 <HAL_ADCEx_InjectedConfigChannel+0x604>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80019ee:	693b      	ldr	r3, [r7, #16]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d010      	beq.n	8001a16 <HAL_ADCEx_InjectedConfigChannel+0x58a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f003 0303 	and.w	r3, r3, #3
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d107      	bne.n	8001a10 <HAL_ADCEx_InjectedConfigChannel+0x584>
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0301 	and.w	r3, r3, #1
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d101      	bne.n	8001a10 <HAL_ADCEx_InjectedConfigChannel+0x584>
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e000      	b.n	8001a12 <HAL_ADCEx_InjectedConfigChannel+0x586>
 8001a10:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d13c      	bne.n	8001a90 <HAL_ADCEx_InjectedConfigChannel+0x604>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2b10      	cmp	r3, #16
 8001a1c:	d11d      	bne.n	8001a5a <HAL_ADCEx_InjectedConfigChannel+0x5ce>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a26:	d118      	bne.n	8001a5a <HAL_ADCEx_InjectedConfigChannel+0x5ce>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001a28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a32:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a34:	4b22      	ldr	r3, [pc, #136]	; (8001ac0 <HAL_ADCEx_InjectedConfigChannel+0x634>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a22      	ldr	r2, [pc, #136]	; (8001ac4 <HAL_ADCEx_InjectedConfigChannel+0x638>)
 8001a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a3e:	0c9a      	lsrs	r2, r3, #18
 8001a40:	4613      	mov	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4413      	add	r3, r2
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8001a4a:	e002      	b.n	8001a52 <HAL_ADCEx_InjectedConfigChannel+0x5c6>
          {
            wait_loop_index--;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d1f9      	bne.n	8001a4c <HAL_ADCEx_InjectedConfigChannel+0x5c0>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a58:	e024      	b.n	8001aa4 <HAL_ADCEx_InjectedConfigChannel+0x618>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2b11      	cmp	r3, #17
 8001a60:	d10b      	bne.n	8001a7a <HAL_ADCEx_InjectedConfigChannel+0x5ee>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a6a:	d106      	bne.n	8001a7a <HAL_ADCEx_InjectedConfigChannel+0x5ee>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001a6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001a74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a76:	609a      	str	r2, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a78:	e014      	b.n	8001aa4 <HAL_ADCEx_InjectedConfigChannel+0x618>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2b12      	cmp	r3, #18
 8001a80:	d110      	bne.n	8001aa4 <HAL_ADCEx_InjectedConfigChannel+0x618>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001a82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001a8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a8c:	609a      	str	r2, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a8e:	e009      	b.n	8001aa4 <HAL_ADCEx_InjectedConfigChannel+0x618>
      /* and other ADC of the common group are enabled, internal              */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a94:	f043 0220 	orr.w	r2, r3, #32
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001aa2:	e000      	b.n	8001aa6 <HAL_ADCEx_InjectedConfigChannel+0x61a>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001aa4:	bf00      	nop
    }
    
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001aae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3774      	adds	r7, #116	; 0x74
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	20000000 	.word	0x20000000
 8001ac4:	431bde83 	.word	0x431bde83

08001ac8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b099      	sub	sp, #100	; 0x64
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ae0:	d102      	bne.n	8001ae8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001ae2:	4b5a      	ldr	r3, [pc, #360]	; (8001c4c <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001ae4:	60bb      	str	r3, [r7, #8]
 8001ae6:	e002      	b.n	8001aee <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001ae8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001aec:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d101      	bne.n	8001af8 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e0a2      	b.n	8001c3e <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d101      	bne.n	8001b06 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001b02:	2302      	movs	r3, #2
 8001b04:	e09b      	b.n	8001c3e <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d17f      	bne.n	8001c1c <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f003 0304 	and.w	r3, r3, #4
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d179      	bne.n	8001c1c <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b28:	4b49      	ldr	r3, [pc, #292]	; (8001c50 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8001b2a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d040      	beq.n	8001bb6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001b34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	6859      	ldr	r1, [r3, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b46:	035b      	lsls	r3, r3, #13
 8001b48:	430b      	orrs	r3, r1
 8001b4a:	431a      	orrs	r2, r3
 8001b4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b4e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f003 0303 	and.w	r3, r3, #3
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d108      	bne.n	8001b70 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d101      	bne.n	8001b70 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e000      	b.n	8001b72 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001b70:	2300      	movs	r3, #0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d15c      	bne.n	8001c30 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 0303 	and.w	r3, r3, #3
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d107      	bne.n	8001b92 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d101      	bne.n	8001b92 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e000      	b.n	8001b94 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8001b92:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d14b      	bne.n	8001c30 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001b98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001ba0:	f023 030f 	bic.w	r3, r3, #15
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	6811      	ldr	r1, [r2, #0]
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	6892      	ldr	r2, [r2, #8]
 8001bac:	430a      	orrs	r2, r1
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bb2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001bb4:	e03c      	b.n	8001c30 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001bb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bc0:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 0303 	and.w	r3, r3, #3
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d108      	bne.n	8001be2 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d101      	bne.n	8001be2 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001bde:	2301      	movs	r3, #1
 8001be0:	e000      	b.n	8001be4 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8001be2:	2300      	movs	r3, #0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d123      	bne.n	8001c30 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f003 0303 	and.w	r3, r3, #3
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d107      	bne.n	8001c04 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d101      	bne.n	8001c04 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001c00:	2301      	movs	r3, #1
 8001c02:	e000      	b.n	8001c06 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001c04:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d112      	bne.n	8001c30 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001c0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001c12:	f023 030f 	bic.w	r3, r3, #15
 8001c16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001c18:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c1a:	e009      	b.n	8001c30 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c20:	f043 0220 	orr.w	r2, r3, #32
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001c2e:	e000      	b.n	8001c32 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c30:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001c3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3764      	adds	r7, #100	; 0x64
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	50000100 	.word	0x50000100
 8001c50:	50000300 	.word	0x50000300

08001c54 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f003 0303 	and.w	r3, r3, #3
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d108      	bne.n	8001c80 <ADC_Disable+0x2c>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0301 	and.w	r3, r3, #1
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d101      	bne.n	8001c80 <ADC_Disable+0x2c>
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e000      	b.n	8001c82 <ADC_Disable+0x2e>
 8001c80:	2300      	movs	r3, #0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d047      	beq.n	8001d16 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f003 030d 	and.w	r3, r3, #13
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d10f      	bne.n	8001cb4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	689a      	ldr	r2, [r3, #8]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f042 0202 	orr.w	r2, r2, #2
 8001ca2:	609a      	str	r2, [r3, #8]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2203      	movs	r2, #3
 8001caa:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001cac:	f7fe ff90 	bl	8000bd0 <HAL_GetTick>
 8001cb0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001cb2:	e029      	b.n	8001d08 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb8:	f043 0210 	orr.w	r2, r3, #16
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc4:	f043 0201 	orr.w	r2, r3, #1
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e023      	b.n	8001d18 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001cd0:	f7fe ff7e 	bl	8000bd0 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d914      	bls.n	8001d08 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d10d      	bne.n	8001d08 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf0:	f043 0210 	orr.w	r2, r3, #16
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfc:	f043 0201 	orr.w	r2, r3, #1
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e007      	b.n	8001d18 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d0dc      	beq.n	8001cd0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d30:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <__NVIC_SetPriorityGrouping+0x44>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d36:	68ba      	ldr	r2, [r7, #8]
 8001d38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d52:	4a04      	ldr	r2, [pc, #16]	; (8001d64 <__NVIC_SetPriorityGrouping+0x44>)
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	60d3      	str	r3, [r2, #12]
}
 8001d58:	bf00      	nop
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d6c:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <__NVIC_GetPriorityGrouping+0x18>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	0a1b      	lsrs	r3, r3, #8
 8001d72:	f003 0307 	and.w	r3, r3, #7
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	db0b      	blt.n	8001dae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d96:	79fb      	ldrb	r3, [r7, #7]
 8001d98:	f003 021f 	and.w	r2, r3, #31
 8001d9c:	4907      	ldr	r1, [pc, #28]	; (8001dbc <__NVIC_EnableIRQ+0x38>)
 8001d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da2:	095b      	lsrs	r3, r3, #5
 8001da4:	2001      	movs	r0, #1
 8001da6:	fa00 f202 	lsl.w	r2, r0, r2
 8001daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	e000e100 	.word	0xe000e100

08001dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	6039      	str	r1, [r7, #0]
 8001dca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	db0a      	blt.n	8001dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	b2da      	uxtb	r2, r3
 8001dd8:	490c      	ldr	r1, [pc, #48]	; (8001e0c <__NVIC_SetPriority+0x4c>)
 8001dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dde:	0112      	lsls	r2, r2, #4
 8001de0:	b2d2      	uxtb	r2, r2
 8001de2:	440b      	add	r3, r1
 8001de4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001de8:	e00a      	b.n	8001e00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	4908      	ldr	r1, [pc, #32]	; (8001e10 <__NVIC_SetPriority+0x50>)
 8001df0:	79fb      	ldrb	r3, [r7, #7]
 8001df2:	f003 030f 	and.w	r3, r3, #15
 8001df6:	3b04      	subs	r3, #4
 8001df8:	0112      	lsls	r2, r2, #4
 8001dfa:	b2d2      	uxtb	r2, r2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	761a      	strb	r2, [r3, #24]
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	e000e100 	.word	0xe000e100
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b089      	sub	sp, #36	; 0x24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	f1c3 0307 	rsb	r3, r3, #7
 8001e2e:	2b04      	cmp	r3, #4
 8001e30:	bf28      	it	cs
 8001e32:	2304      	movcs	r3, #4
 8001e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	3304      	adds	r3, #4
 8001e3a:	2b06      	cmp	r3, #6
 8001e3c:	d902      	bls.n	8001e44 <NVIC_EncodePriority+0x30>
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	3b03      	subs	r3, #3
 8001e42:	e000      	b.n	8001e46 <NVIC_EncodePriority+0x32>
 8001e44:	2300      	movs	r3, #0
 8001e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e48:	f04f 32ff 	mov.w	r2, #4294967295
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43da      	mvns	r2, r3
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	401a      	ands	r2, r3
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	fa01 f303 	lsl.w	r3, r1, r3
 8001e66:	43d9      	mvns	r1, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e6c:	4313      	orrs	r3, r2
         );
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3724      	adds	r7, #36	; 0x24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
	...

08001e7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e8c:	d301      	bcc.n	8001e92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e00f      	b.n	8001eb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e92:	4a0a      	ldr	r2, [pc, #40]	; (8001ebc <SysTick_Config+0x40>)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3b01      	subs	r3, #1
 8001e98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e9a:	210f      	movs	r1, #15
 8001e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea0:	f7ff ff8e 	bl	8001dc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ea4:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <SysTick_Config+0x40>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eaa:	4b04      	ldr	r3, [pc, #16]	; (8001ebc <SysTick_Config+0x40>)
 8001eac:	2207      	movs	r2, #7
 8001eae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	e000e010 	.word	0xe000e010

08001ec0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f7ff ff29 	bl	8001d20 <__NVIC_SetPriorityGrouping>
}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b086      	sub	sp, #24
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	4603      	mov	r3, r0
 8001ede:	60b9      	str	r1, [r7, #8]
 8001ee0:	607a      	str	r2, [r7, #4]
 8001ee2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ee8:	f7ff ff3e 	bl	8001d68 <__NVIC_GetPriorityGrouping>
 8001eec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	68b9      	ldr	r1, [r7, #8]
 8001ef2:	6978      	ldr	r0, [r7, #20]
 8001ef4:	f7ff ff8e 	bl	8001e14 <NVIC_EncodePriority>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001efe:	4611      	mov	r1, r2
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff ff5d 	bl	8001dc0 <__NVIC_SetPriority>
}
 8001f06:	bf00      	nop
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	4603      	mov	r3, r0
 8001f16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff ff31 	bl	8001d84 <__NVIC_EnableIRQ>
}
 8001f22:	bf00      	nop
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b082      	sub	sp, #8
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7ff ffa2 	bl	8001e7c <SysTick_Config>
 8001f38:	4603      	mov	r3, r0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
	...

08001f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b087      	sub	sp, #28
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f52:	e14e      	b.n	80021f2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	2101      	movs	r1, #1
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f60:	4013      	ands	r3, r2
 8001f62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f000 8140 	beq.w	80021ec <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f003 0303 	and.w	r3, r3, #3
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d005      	beq.n	8001f84 <HAL_GPIO_Init+0x40>
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f003 0303 	and.w	r3, r3, #3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d130      	bne.n	8001fe6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	2203      	movs	r2, #3
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	68da      	ldr	r2, [r3, #12]
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fba:	2201      	movs	r2, #1
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	091b      	lsrs	r3, r3, #4
 8001fd0:	f003 0201 	and.w	r2, r3, #1
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	2b03      	cmp	r3, #3
 8001ff0:	d017      	beq.n	8002022 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	2203      	movs	r2, #3
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43db      	mvns	r3, r3
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	4013      	ands	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	689a      	ldr	r2, [r3, #8]
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	4313      	orrs	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f003 0303 	and.w	r3, r3, #3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d123      	bne.n	8002076 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	08da      	lsrs	r2, r3, #3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	3208      	adds	r2, #8
 8002036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800203a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	220f      	movs	r2, #15
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	43db      	mvns	r3, r3
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	4013      	ands	r3, r2
 8002050:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	691a      	ldr	r2, [r3, #16]
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	4313      	orrs	r3, r2
 8002066:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	08da      	lsrs	r2, r3, #3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3208      	adds	r2, #8
 8002070:	6939      	ldr	r1, [r7, #16]
 8002072:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	2203      	movs	r2, #3
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43db      	mvns	r3, r3
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	4013      	ands	r3, r2
 800208c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f003 0203 	and.w	r2, r3, #3
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f000 809a 	beq.w	80021ec <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020b8:	4b55      	ldr	r3, [pc, #340]	; (8002210 <HAL_GPIO_Init+0x2cc>)
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	4a54      	ldr	r2, [pc, #336]	; (8002210 <HAL_GPIO_Init+0x2cc>)
 80020be:	f043 0301 	orr.w	r3, r3, #1
 80020c2:	6193      	str	r3, [r2, #24]
 80020c4:	4b52      	ldr	r3, [pc, #328]	; (8002210 <HAL_GPIO_Init+0x2cc>)
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	60bb      	str	r3, [r7, #8]
 80020ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80020d0:	4a50      	ldr	r2, [pc, #320]	; (8002214 <HAL_GPIO_Init+0x2d0>)
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	089b      	lsrs	r3, r3, #2
 80020d6:	3302      	adds	r3, #2
 80020d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	f003 0303 	and.w	r3, r3, #3
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	220f      	movs	r2, #15
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	43db      	mvns	r3, r3
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	4013      	ands	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80020fa:	d013      	beq.n	8002124 <HAL_GPIO_Init+0x1e0>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a46      	ldr	r2, [pc, #280]	; (8002218 <HAL_GPIO_Init+0x2d4>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d00d      	beq.n	8002120 <HAL_GPIO_Init+0x1dc>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a45      	ldr	r2, [pc, #276]	; (800221c <HAL_GPIO_Init+0x2d8>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d007      	beq.n	800211c <HAL_GPIO_Init+0x1d8>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a44      	ldr	r2, [pc, #272]	; (8002220 <HAL_GPIO_Init+0x2dc>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d101      	bne.n	8002118 <HAL_GPIO_Init+0x1d4>
 8002114:	2303      	movs	r3, #3
 8002116:	e006      	b.n	8002126 <HAL_GPIO_Init+0x1e2>
 8002118:	2305      	movs	r3, #5
 800211a:	e004      	b.n	8002126 <HAL_GPIO_Init+0x1e2>
 800211c:	2302      	movs	r3, #2
 800211e:	e002      	b.n	8002126 <HAL_GPIO_Init+0x1e2>
 8002120:	2301      	movs	r3, #1
 8002122:	e000      	b.n	8002126 <HAL_GPIO_Init+0x1e2>
 8002124:	2300      	movs	r3, #0
 8002126:	697a      	ldr	r2, [r7, #20]
 8002128:	f002 0203 	and.w	r2, r2, #3
 800212c:	0092      	lsls	r2, r2, #2
 800212e:	4093      	lsls	r3, r2
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	4313      	orrs	r3, r2
 8002134:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002136:	4937      	ldr	r1, [pc, #220]	; (8002214 <HAL_GPIO_Init+0x2d0>)
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	089b      	lsrs	r3, r3, #2
 800213c:	3302      	adds	r3, #2
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002144:	4b37      	ldr	r3, [pc, #220]	; (8002224 <HAL_GPIO_Init+0x2e0>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	43db      	mvns	r3, r3
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	4013      	ands	r3, r2
 8002152:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d003      	beq.n	8002168 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	4313      	orrs	r3, r2
 8002166:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002168:	4a2e      	ldr	r2, [pc, #184]	; (8002224 <HAL_GPIO_Init+0x2e0>)
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800216e:	4b2d      	ldr	r3, [pc, #180]	; (8002224 <HAL_GPIO_Init+0x2e0>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	43db      	mvns	r3, r3
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	4013      	ands	r3, r2
 800217c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	4313      	orrs	r3, r2
 8002190:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002192:	4a24      	ldr	r2, [pc, #144]	; (8002224 <HAL_GPIO_Init+0x2e0>)
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002198:	4b22      	ldr	r3, [pc, #136]	; (8002224 <HAL_GPIO_Init+0x2e0>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	43db      	mvns	r3, r3
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	4013      	ands	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d003      	beq.n	80021bc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80021bc:	4a19      	ldr	r2, [pc, #100]	; (8002224 <HAL_GPIO_Init+0x2e0>)
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021c2:	4b18      	ldr	r3, [pc, #96]	; (8002224 <HAL_GPIO_Init+0x2e0>)
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	43db      	mvns	r3, r3
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	4013      	ands	r3, r2
 80021d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80021e6:	4a0f      	ldr	r2, [pc, #60]	; (8002224 <HAL_GPIO_Init+0x2e0>)
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	3301      	adds	r3, #1
 80021f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	fa22 f303 	lsr.w	r3, r2, r3
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f47f aea9 	bne.w	8001f54 <HAL_GPIO_Init+0x10>
  }
}
 8002202:	bf00      	nop
 8002204:	bf00      	nop
 8002206:	371c      	adds	r7, #28
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	40021000 	.word	0x40021000
 8002214:	40010000 	.word	0x40010000
 8002218:	48000400 	.word	0x48000400
 800221c:	48000800 	.word	0x48000800
 8002220:	48000c00 	.word	0x48000c00
 8002224:	40010400 	.word	0x40010400

08002228 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002232:	4b08      	ldr	r3, [pc, #32]	; (8002254 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002234:	695a      	ldr	r2, [r3, #20]
 8002236:	88fb      	ldrh	r3, [r7, #6]
 8002238:	4013      	ands	r3, r2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d006      	beq.n	800224c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800223e:	4a05      	ldr	r2, [pc, #20]	; (8002254 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002240:	88fb      	ldrh	r3, [r7, #6]
 8002242:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002244:	88fb      	ldrh	r3, [r7, #6]
 8002246:	4618      	mov	r0, r3
 8002248:	f000 f806 	bl	8002258 <HAL_GPIO_EXTI_Callback>
  }
}
 800224c:	bf00      	nop
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40010400 	.word	0x40010400

08002258 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
	...

08002270 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002276:	af00      	add	r7, sp, #0
 8002278:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800227c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002280:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002282:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002286:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d102      	bne.n	8002296 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	f001 b823 	b.w	80032dc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002296:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800229a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f000 817d 	beq.w	80025a6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80022ac:	4bbc      	ldr	r3, [pc, #752]	; (80025a0 <HAL_RCC_OscConfig+0x330>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f003 030c 	and.w	r3, r3, #12
 80022b4:	2b04      	cmp	r3, #4
 80022b6:	d00c      	beq.n	80022d2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022b8:	4bb9      	ldr	r3, [pc, #740]	; (80025a0 <HAL_RCC_OscConfig+0x330>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 030c 	and.w	r3, r3, #12
 80022c0:	2b08      	cmp	r3, #8
 80022c2:	d15c      	bne.n	800237e <HAL_RCC_OscConfig+0x10e>
 80022c4:	4bb6      	ldr	r3, [pc, #728]	; (80025a0 <HAL_RCC_OscConfig+0x330>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022d0:	d155      	bne.n	800237e <HAL_RCC_OscConfig+0x10e>
 80022d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022d6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022da:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80022de:	fa93 f3a3 	rbit	r3, r3
 80022e2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022e6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ea:	fab3 f383 	clz	r3, r3
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	095b      	lsrs	r3, r3, #5
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	f043 0301 	orr.w	r3, r3, #1
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d102      	bne.n	8002304 <HAL_RCC_OscConfig+0x94>
 80022fe:	4ba8      	ldr	r3, [pc, #672]	; (80025a0 <HAL_RCC_OscConfig+0x330>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	e015      	b.n	8002330 <HAL_RCC_OscConfig+0xc0>
 8002304:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002308:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002310:	fa93 f3a3 	rbit	r3, r3
 8002314:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002318:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800231c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002320:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002324:	fa93 f3a3 	rbit	r3, r3
 8002328:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800232c:	4b9c      	ldr	r3, [pc, #624]	; (80025a0 <HAL_RCC_OscConfig+0x330>)
 800232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002330:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002334:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002338:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800233c:	fa92 f2a2 	rbit	r2, r2
 8002340:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002344:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002348:	fab2 f282 	clz	r2, r2
 800234c:	b2d2      	uxtb	r2, r2
 800234e:	f042 0220 	orr.w	r2, r2, #32
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	f002 021f 	and.w	r2, r2, #31
 8002358:	2101      	movs	r1, #1
 800235a:	fa01 f202 	lsl.w	r2, r1, r2
 800235e:	4013      	ands	r3, r2
 8002360:	2b00      	cmp	r3, #0
 8002362:	f000 811f 	beq.w	80025a4 <HAL_RCC_OscConfig+0x334>
 8002366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800236a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	f040 8116 	bne.w	80025a4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	f000 bfaf 	b.w	80032dc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800237e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002382:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800238e:	d106      	bne.n	800239e <HAL_RCC_OscConfig+0x12e>
 8002390:	4b83      	ldr	r3, [pc, #524]	; (80025a0 <HAL_RCC_OscConfig+0x330>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a82      	ldr	r2, [pc, #520]	; (80025a0 <HAL_RCC_OscConfig+0x330>)
 8002396:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800239a:	6013      	str	r3, [r2, #0]
 800239c:	e036      	b.n	800240c <HAL_RCC_OscConfig+0x19c>
 800239e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10c      	bne.n	80023c8 <HAL_RCC_OscConfig+0x158>
 80023ae:	4b7c      	ldr	r3, [pc, #496]	; (80025a0 <HAL_RCC_OscConfig+0x330>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a7b      	ldr	r2, [pc, #492]	; (80025a0 <HAL_RCC_OscConfig+0x330>)
 80023b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	4b79      	ldr	r3, [pc, #484]	; (80025a0 <HAL_RCC_OscConfig+0x330>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a78      	ldr	r2, [pc, #480]	; (80025a0 <HAL_RCC_OscConfig+0x330>)
 80023c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023c4:	6013      	str	r3, [r2, #0]
 80023c6:	e021      	b.n	800240c <HAL_RCC_OscConfig+0x19c>
 80023c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023d8:	d10c      	bne.n	80023f4 <HAL_RCC_OscConfig+0x184>
 80023da:	4b71      	ldr	r3, [pc, #452]	; (80025a0 <HAL_RCC_OscConfig+0x330>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a70      	ldr	r2, [pc, #448]	; (80025a0 <HAL_RCC_OscConfig+0x330>)
 80023e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023e4:	6013      	str	r3, [r2, #0]
 80023e6:	4b6e      	ldr	r3, [pc, #440]	; (80025a0 <HAL_RCC_OscConfig+0x330>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a6d      	ldr	r2, [pc, #436]	; (80025a0 <HAL_RCC_OscConfig+0x330>)
 80023ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f0:	6013      	str	r3, [r2, #0]
 80023f2:	e00b      	b.n	800240c <HAL_RCC_OscConfig+0x19c>
 80023f4:	4b6a      	ldr	r3, [pc, #424]	; (80025a0 <HAL_RCC_OscConfig+0x330>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a69      	ldr	r2, [pc, #420]	; (80025a0 <HAL_RCC_OscConfig+0x330>)
 80023fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023fe:	6013      	str	r3, [r2, #0]
 8002400:	4b67      	ldr	r3, [pc, #412]	; (80025a0 <HAL_RCC_OscConfig+0x330>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a66      	ldr	r2, [pc, #408]	; (80025a0 <HAL_RCC_OscConfig+0x330>)
 8002406:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800240a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800240c:	4b64      	ldr	r3, [pc, #400]	; (80025a0 <HAL_RCC_OscConfig+0x330>)
 800240e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002410:	f023 020f 	bic.w	r2, r3, #15
 8002414:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002418:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	495f      	ldr	r1, [pc, #380]	; (80025a0 <HAL_RCC_OscConfig+0x330>)
 8002422:	4313      	orrs	r3, r2
 8002424:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002426:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800242a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d059      	beq.n	80024ea <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002436:	f7fe fbcb 	bl	8000bd0 <HAL_GetTick>
 800243a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800243e:	e00a      	b.n	8002456 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002440:	f7fe fbc6 	bl	8000bd0 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b64      	cmp	r3, #100	; 0x64
 800244e:	d902      	bls.n	8002456 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	f000 bf43 	b.w	80032dc <HAL_RCC_OscConfig+0x106c>
 8002456:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800245a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002462:	fa93 f3a3 	rbit	r3, r3
 8002466:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800246a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800246e:	fab3 f383 	clz	r3, r3
 8002472:	b2db      	uxtb	r3, r3
 8002474:	095b      	lsrs	r3, r3, #5
 8002476:	b2db      	uxtb	r3, r3
 8002478:	f043 0301 	orr.w	r3, r3, #1
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b01      	cmp	r3, #1
 8002480:	d102      	bne.n	8002488 <HAL_RCC_OscConfig+0x218>
 8002482:	4b47      	ldr	r3, [pc, #284]	; (80025a0 <HAL_RCC_OscConfig+0x330>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	e015      	b.n	80024b4 <HAL_RCC_OscConfig+0x244>
 8002488:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800248c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002490:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002494:	fa93 f3a3 	rbit	r3, r3
 8002498:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800249c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024a0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80024a4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80024a8:	fa93 f3a3 	rbit	r3, r3
 80024ac:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80024b0:	4b3b      	ldr	r3, [pc, #236]	; (80025a0 <HAL_RCC_OscConfig+0x330>)
 80024b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024b8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80024bc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80024c0:	fa92 f2a2 	rbit	r2, r2
 80024c4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80024c8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80024cc:	fab2 f282 	clz	r2, r2
 80024d0:	b2d2      	uxtb	r2, r2
 80024d2:	f042 0220 	orr.w	r2, r2, #32
 80024d6:	b2d2      	uxtb	r2, r2
 80024d8:	f002 021f 	and.w	r2, r2, #31
 80024dc:	2101      	movs	r1, #1
 80024de:	fa01 f202 	lsl.w	r2, r1, r2
 80024e2:	4013      	ands	r3, r2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d0ab      	beq.n	8002440 <HAL_RCC_OscConfig+0x1d0>
 80024e8:	e05d      	b.n	80025a6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ea:	f7fe fb71 	bl	8000bd0 <HAL_GetTick>
 80024ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024f2:	e00a      	b.n	800250a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024f4:	f7fe fb6c 	bl	8000bd0 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b64      	cmp	r3, #100	; 0x64
 8002502:	d902      	bls.n	800250a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	f000 bee9 	b.w	80032dc <HAL_RCC_OscConfig+0x106c>
 800250a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800250e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002512:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002516:	fa93 f3a3 	rbit	r3, r3
 800251a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800251e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002522:	fab3 f383 	clz	r3, r3
 8002526:	b2db      	uxtb	r3, r3
 8002528:	095b      	lsrs	r3, r3, #5
 800252a:	b2db      	uxtb	r3, r3
 800252c:	f043 0301 	orr.w	r3, r3, #1
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b01      	cmp	r3, #1
 8002534:	d102      	bne.n	800253c <HAL_RCC_OscConfig+0x2cc>
 8002536:	4b1a      	ldr	r3, [pc, #104]	; (80025a0 <HAL_RCC_OscConfig+0x330>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	e015      	b.n	8002568 <HAL_RCC_OscConfig+0x2f8>
 800253c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002540:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002544:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002548:	fa93 f3a3 	rbit	r3, r3
 800254c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002550:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002554:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002558:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800255c:	fa93 f3a3 	rbit	r3, r3
 8002560:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002564:	4b0e      	ldr	r3, [pc, #56]	; (80025a0 <HAL_RCC_OscConfig+0x330>)
 8002566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002568:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800256c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002570:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002574:	fa92 f2a2 	rbit	r2, r2
 8002578:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800257c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002580:	fab2 f282 	clz	r2, r2
 8002584:	b2d2      	uxtb	r2, r2
 8002586:	f042 0220 	orr.w	r2, r2, #32
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	f002 021f 	and.w	r2, r2, #31
 8002590:	2101      	movs	r1, #1
 8002592:	fa01 f202 	lsl.w	r2, r1, r2
 8002596:	4013      	ands	r3, r2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d1ab      	bne.n	80024f4 <HAL_RCC_OscConfig+0x284>
 800259c:	e003      	b.n	80025a6 <HAL_RCC_OscConfig+0x336>
 800259e:	bf00      	nop
 80025a0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f000 817d 	beq.w	80028b6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80025bc:	4ba6      	ldr	r3, [pc, #664]	; (8002858 <HAL_RCC_OscConfig+0x5e8>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f003 030c 	and.w	r3, r3, #12
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00b      	beq.n	80025e0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80025c8:	4ba3      	ldr	r3, [pc, #652]	; (8002858 <HAL_RCC_OscConfig+0x5e8>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f003 030c 	and.w	r3, r3, #12
 80025d0:	2b08      	cmp	r3, #8
 80025d2:	d172      	bne.n	80026ba <HAL_RCC_OscConfig+0x44a>
 80025d4:	4ba0      	ldr	r3, [pc, #640]	; (8002858 <HAL_RCC_OscConfig+0x5e8>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d16c      	bne.n	80026ba <HAL_RCC_OscConfig+0x44a>
 80025e0:	2302      	movs	r3, #2
 80025e2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80025ea:	fa93 f3a3 	rbit	r3, r3
 80025ee:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80025f2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025f6:	fab3 f383 	clz	r3, r3
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	095b      	lsrs	r3, r3, #5
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	f043 0301 	orr.w	r3, r3, #1
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b01      	cmp	r3, #1
 8002608:	d102      	bne.n	8002610 <HAL_RCC_OscConfig+0x3a0>
 800260a:	4b93      	ldr	r3, [pc, #588]	; (8002858 <HAL_RCC_OscConfig+0x5e8>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	e013      	b.n	8002638 <HAL_RCC_OscConfig+0x3c8>
 8002610:	2302      	movs	r3, #2
 8002612:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002616:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800261a:	fa93 f3a3 	rbit	r3, r3
 800261e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002622:	2302      	movs	r3, #2
 8002624:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002628:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800262c:	fa93 f3a3 	rbit	r3, r3
 8002630:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002634:	4b88      	ldr	r3, [pc, #544]	; (8002858 <HAL_RCC_OscConfig+0x5e8>)
 8002636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002638:	2202      	movs	r2, #2
 800263a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800263e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002642:	fa92 f2a2 	rbit	r2, r2
 8002646:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800264a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800264e:	fab2 f282 	clz	r2, r2
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	f042 0220 	orr.w	r2, r2, #32
 8002658:	b2d2      	uxtb	r2, r2
 800265a:	f002 021f 	and.w	r2, r2, #31
 800265e:	2101      	movs	r1, #1
 8002660:	fa01 f202 	lsl.w	r2, r1, r2
 8002664:	4013      	ands	r3, r2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00a      	beq.n	8002680 <HAL_RCC_OscConfig+0x410>
 800266a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800266e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d002      	beq.n	8002680 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	f000 be2e 	b.w	80032dc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002680:	4b75      	ldr	r3, [pc, #468]	; (8002858 <HAL_RCC_OscConfig+0x5e8>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002688:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800268c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	695b      	ldr	r3, [r3, #20]
 8002694:	21f8      	movs	r1, #248	; 0xf8
 8002696:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800269e:	fa91 f1a1 	rbit	r1, r1
 80026a2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80026a6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80026aa:	fab1 f181 	clz	r1, r1
 80026ae:	b2c9      	uxtb	r1, r1
 80026b0:	408b      	lsls	r3, r1
 80026b2:	4969      	ldr	r1, [pc, #420]	; (8002858 <HAL_RCC_OscConfig+0x5e8>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026b8:	e0fd      	b.n	80028b6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	f000 8088 	beq.w	80027dc <HAL_RCC_OscConfig+0x56c>
 80026cc:	2301      	movs	r3, #1
 80026ce:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80026d6:	fa93 f3a3 	rbit	r3, r3
 80026da:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80026de:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026e2:	fab3 f383 	clz	r3, r3
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	461a      	mov	r2, r3
 80026f4:	2301      	movs	r3, #1
 80026f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f8:	f7fe fa6a 	bl	8000bd0 <HAL_GetTick>
 80026fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002700:	e00a      	b.n	8002718 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002702:	f7fe fa65 	bl	8000bd0 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d902      	bls.n	8002718 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	f000 bde2 	b.w	80032dc <HAL_RCC_OscConfig+0x106c>
 8002718:	2302      	movs	r3, #2
 800271a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002722:	fa93 f3a3 	rbit	r3, r3
 8002726:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800272a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800272e:	fab3 f383 	clz	r3, r3
 8002732:	b2db      	uxtb	r3, r3
 8002734:	095b      	lsrs	r3, r3, #5
 8002736:	b2db      	uxtb	r3, r3
 8002738:	f043 0301 	orr.w	r3, r3, #1
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b01      	cmp	r3, #1
 8002740:	d102      	bne.n	8002748 <HAL_RCC_OscConfig+0x4d8>
 8002742:	4b45      	ldr	r3, [pc, #276]	; (8002858 <HAL_RCC_OscConfig+0x5e8>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	e013      	b.n	8002770 <HAL_RCC_OscConfig+0x500>
 8002748:	2302      	movs	r3, #2
 800274a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002752:	fa93 f3a3 	rbit	r3, r3
 8002756:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800275a:	2302      	movs	r3, #2
 800275c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002760:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002764:	fa93 f3a3 	rbit	r3, r3
 8002768:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800276c:	4b3a      	ldr	r3, [pc, #232]	; (8002858 <HAL_RCC_OscConfig+0x5e8>)
 800276e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002770:	2202      	movs	r2, #2
 8002772:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002776:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800277a:	fa92 f2a2 	rbit	r2, r2
 800277e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002782:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002786:	fab2 f282 	clz	r2, r2
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	f042 0220 	orr.w	r2, r2, #32
 8002790:	b2d2      	uxtb	r2, r2
 8002792:	f002 021f 	and.w	r2, r2, #31
 8002796:	2101      	movs	r1, #1
 8002798:	fa01 f202 	lsl.w	r2, r1, r2
 800279c:	4013      	ands	r3, r2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d0af      	beq.n	8002702 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a2:	4b2d      	ldr	r3, [pc, #180]	; (8002858 <HAL_RCC_OscConfig+0x5e8>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	21f8      	movs	r1, #248	; 0xf8
 80027b8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027bc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80027c0:	fa91 f1a1 	rbit	r1, r1
 80027c4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80027c8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80027cc:	fab1 f181 	clz	r1, r1
 80027d0:	b2c9      	uxtb	r1, r1
 80027d2:	408b      	lsls	r3, r1
 80027d4:	4920      	ldr	r1, [pc, #128]	; (8002858 <HAL_RCC_OscConfig+0x5e8>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	600b      	str	r3, [r1, #0]
 80027da:	e06c      	b.n	80028b6 <HAL_RCC_OscConfig+0x646>
 80027dc:	2301      	movs	r3, #1
 80027de:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80027e6:	fa93 f3a3 	rbit	r3, r3
 80027ea:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80027ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027f2:	fab3 f383 	clz	r3, r3
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	461a      	mov	r2, r3
 8002804:	2300      	movs	r3, #0
 8002806:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002808:	f7fe f9e2 	bl	8000bd0 <HAL_GetTick>
 800280c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002810:	e00a      	b.n	8002828 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002812:	f7fe f9dd 	bl	8000bd0 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b02      	cmp	r3, #2
 8002820:	d902      	bls.n	8002828 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	f000 bd5a 	b.w	80032dc <HAL_RCC_OscConfig+0x106c>
 8002828:	2302      	movs	r3, #2
 800282a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002832:	fa93 f3a3 	rbit	r3, r3
 8002836:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800283a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800283e:	fab3 f383 	clz	r3, r3
 8002842:	b2db      	uxtb	r3, r3
 8002844:	095b      	lsrs	r3, r3, #5
 8002846:	b2db      	uxtb	r3, r3
 8002848:	f043 0301 	orr.w	r3, r3, #1
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b01      	cmp	r3, #1
 8002850:	d104      	bne.n	800285c <HAL_RCC_OscConfig+0x5ec>
 8002852:	4b01      	ldr	r3, [pc, #4]	; (8002858 <HAL_RCC_OscConfig+0x5e8>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	e015      	b.n	8002884 <HAL_RCC_OscConfig+0x614>
 8002858:	40021000 	.word	0x40021000
 800285c:	2302      	movs	r3, #2
 800285e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002862:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002866:	fa93 f3a3 	rbit	r3, r3
 800286a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800286e:	2302      	movs	r3, #2
 8002870:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002874:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002878:	fa93 f3a3 	rbit	r3, r3
 800287c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002880:	4bc8      	ldr	r3, [pc, #800]	; (8002ba4 <HAL_RCC_OscConfig+0x934>)
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	2202      	movs	r2, #2
 8002886:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800288a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800288e:	fa92 f2a2 	rbit	r2, r2
 8002892:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002896:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800289a:	fab2 f282 	clz	r2, r2
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	f042 0220 	orr.w	r2, r2, #32
 80028a4:	b2d2      	uxtb	r2, r2
 80028a6:	f002 021f 	and.w	r2, r2, #31
 80028aa:	2101      	movs	r1, #1
 80028ac:	fa01 f202 	lsl.w	r2, r1, r2
 80028b0:	4013      	ands	r3, r2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1ad      	bne.n	8002812 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0308 	and.w	r3, r3, #8
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f000 8110 	beq.w	8002aec <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d079      	beq.n	80029d0 <HAL_RCC_OscConfig+0x760>
 80028dc:	2301      	movs	r3, #1
 80028de:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80028e6:	fa93 f3a3 	rbit	r3, r3
 80028ea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80028ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028f2:	fab3 f383 	clz	r3, r3
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	461a      	mov	r2, r3
 80028fa:	4bab      	ldr	r3, [pc, #684]	; (8002ba8 <HAL_RCC_OscConfig+0x938>)
 80028fc:	4413      	add	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	461a      	mov	r2, r3
 8002902:	2301      	movs	r3, #1
 8002904:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002906:	f7fe f963 	bl	8000bd0 <HAL_GetTick>
 800290a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800290e:	e00a      	b.n	8002926 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002910:	f7fe f95e 	bl	8000bd0 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d902      	bls.n	8002926 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	f000 bcdb 	b.w	80032dc <HAL_RCC_OscConfig+0x106c>
 8002926:	2302      	movs	r3, #2
 8002928:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002930:	fa93 f3a3 	rbit	r3, r3
 8002934:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002938:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800293c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002940:	2202      	movs	r2, #2
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002948:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	fa93 f2a3 	rbit	r2, r3
 8002952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002956:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002960:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002964:	2202      	movs	r2, #2
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800296c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	fa93 f2a3 	rbit	r2, r3
 8002976:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800297a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800297e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002980:	4b88      	ldr	r3, [pc, #544]	; (8002ba4 <HAL_RCC_OscConfig+0x934>)
 8002982:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002984:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002988:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800298c:	2102      	movs	r1, #2
 800298e:	6019      	str	r1, [r3, #0]
 8002990:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002994:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	fa93 f1a3 	rbit	r1, r3
 800299e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80029a6:	6019      	str	r1, [r3, #0]
  return result;
 80029a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ac:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	fab3 f383 	clz	r3, r3
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	f003 031f 	and.w	r3, r3, #31
 80029c2:	2101      	movs	r1, #1
 80029c4:	fa01 f303 	lsl.w	r3, r1, r3
 80029c8:	4013      	ands	r3, r2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d0a0      	beq.n	8002910 <HAL_RCC_OscConfig+0x6a0>
 80029ce:	e08d      	b.n	8002aec <HAL_RCC_OscConfig+0x87c>
 80029d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80029d8:	2201      	movs	r2, #1
 80029da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	fa93 f2a3 	rbit	r2, r3
 80029ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ee:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80029f2:	601a      	str	r2, [r3, #0]
  return result;
 80029f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80029fc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029fe:	fab3 f383 	clz	r3, r3
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	461a      	mov	r2, r3
 8002a06:	4b68      	ldr	r3, [pc, #416]	; (8002ba8 <HAL_RCC_OscConfig+0x938>)
 8002a08:	4413      	add	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	2300      	movs	r3, #0
 8002a10:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a12:	f7fe f8dd 	bl	8000bd0 <HAL_GetTick>
 8002a16:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a1a:	e00a      	b.n	8002a32 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a1c:	f7fe f8d8 	bl	8000bd0 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d902      	bls.n	8002a32 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	f000 bc55 	b.w	80032dc <HAL_RCC_OscConfig+0x106c>
 8002a32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a36:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a42:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	fa93 f2a3 	rbit	r2, r3
 8002a4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a50:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a5a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002a5e:	2202      	movs	r2, #2
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a66:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	fa93 f2a3 	rbit	r2, r3
 8002a70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002a78:	601a      	str	r2, [r3, #0]
 8002a7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002a82:	2202      	movs	r2, #2
 8002a84:	601a      	str	r2, [r3, #0]
 8002a86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	fa93 f2a3 	rbit	r2, r3
 8002a94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a98:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002a9c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a9e:	4b41      	ldr	r3, [pc, #260]	; (8002ba4 <HAL_RCC_OscConfig+0x934>)
 8002aa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002aaa:	2102      	movs	r1, #2
 8002aac:	6019      	str	r1, [r3, #0]
 8002aae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	fa93 f1a3 	rbit	r1, r3
 8002abc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002ac4:	6019      	str	r1, [r3, #0]
  return result;
 8002ac6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aca:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	fab3 f383 	clz	r3, r3
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	f003 031f 	and.w	r3, r3, #31
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d197      	bne.n	8002a1c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0304 	and.w	r3, r3, #4
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 81a1 	beq.w	8002e44 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b02:	2300      	movs	r3, #0
 8002b04:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b08:	4b26      	ldr	r3, [pc, #152]	; (8002ba4 <HAL_RCC_OscConfig+0x934>)
 8002b0a:	69db      	ldr	r3, [r3, #28]
 8002b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d116      	bne.n	8002b42 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b14:	4b23      	ldr	r3, [pc, #140]	; (8002ba4 <HAL_RCC_OscConfig+0x934>)
 8002b16:	69db      	ldr	r3, [r3, #28]
 8002b18:	4a22      	ldr	r2, [pc, #136]	; (8002ba4 <HAL_RCC_OscConfig+0x934>)
 8002b1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b1e:	61d3      	str	r3, [r2, #28]
 8002b20:	4b20      	ldr	r3, [pc, #128]	; (8002ba4 <HAL_RCC_OscConfig+0x934>)
 8002b22:	69db      	ldr	r3, [r3, #28]
 8002b24:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b2c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b36:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002b3a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b42:	4b1a      	ldr	r3, [pc, #104]	; (8002bac <HAL_RCC_OscConfig+0x93c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d11a      	bne.n	8002b84 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b4e:	4b17      	ldr	r3, [pc, #92]	; (8002bac <HAL_RCC_OscConfig+0x93c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a16      	ldr	r2, [pc, #88]	; (8002bac <HAL_RCC_OscConfig+0x93c>)
 8002b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b58:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b5a:	f7fe f839 	bl	8000bd0 <HAL_GetTick>
 8002b5e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b62:	e009      	b.n	8002b78 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b64:	f7fe f834 	bl	8000bd0 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b64      	cmp	r3, #100	; 0x64
 8002b72:	d901      	bls.n	8002b78 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e3b1      	b.n	80032dc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b78:	4b0c      	ldr	r3, [pc, #48]	; (8002bac <HAL_RCC_OscConfig+0x93c>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d0ef      	beq.n	8002b64 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d10d      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x940>
 8002b94:	4b03      	ldr	r3, [pc, #12]	; (8002ba4 <HAL_RCC_OscConfig+0x934>)
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	4a02      	ldr	r2, [pc, #8]	; (8002ba4 <HAL_RCC_OscConfig+0x934>)
 8002b9a:	f043 0301 	orr.w	r3, r3, #1
 8002b9e:	6213      	str	r3, [r2, #32]
 8002ba0:	e03c      	b.n	8002c1c <HAL_RCC_OscConfig+0x9ac>
 8002ba2:	bf00      	nop
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	10908120 	.word	0x10908120
 8002bac:	40007000 	.word	0x40007000
 8002bb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d10c      	bne.n	8002bda <HAL_RCC_OscConfig+0x96a>
 8002bc0:	4bc1      	ldr	r3, [pc, #772]	; (8002ec8 <HAL_RCC_OscConfig+0xc58>)
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
 8002bc4:	4ac0      	ldr	r2, [pc, #768]	; (8002ec8 <HAL_RCC_OscConfig+0xc58>)
 8002bc6:	f023 0301 	bic.w	r3, r3, #1
 8002bca:	6213      	str	r3, [r2, #32]
 8002bcc:	4bbe      	ldr	r3, [pc, #760]	; (8002ec8 <HAL_RCC_OscConfig+0xc58>)
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	4abd      	ldr	r2, [pc, #756]	; (8002ec8 <HAL_RCC_OscConfig+0xc58>)
 8002bd2:	f023 0304 	bic.w	r3, r3, #4
 8002bd6:	6213      	str	r3, [r2, #32]
 8002bd8:	e020      	b.n	8002c1c <HAL_RCC_OscConfig+0x9ac>
 8002bda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	2b05      	cmp	r3, #5
 8002be8:	d10c      	bne.n	8002c04 <HAL_RCC_OscConfig+0x994>
 8002bea:	4bb7      	ldr	r3, [pc, #732]	; (8002ec8 <HAL_RCC_OscConfig+0xc58>)
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	4ab6      	ldr	r2, [pc, #728]	; (8002ec8 <HAL_RCC_OscConfig+0xc58>)
 8002bf0:	f043 0304 	orr.w	r3, r3, #4
 8002bf4:	6213      	str	r3, [r2, #32]
 8002bf6:	4bb4      	ldr	r3, [pc, #720]	; (8002ec8 <HAL_RCC_OscConfig+0xc58>)
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	4ab3      	ldr	r2, [pc, #716]	; (8002ec8 <HAL_RCC_OscConfig+0xc58>)
 8002bfc:	f043 0301 	orr.w	r3, r3, #1
 8002c00:	6213      	str	r3, [r2, #32]
 8002c02:	e00b      	b.n	8002c1c <HAL_RCC_OscConfig+0x9ac>
 8002c04:	4bb0      	ldr	r3, [pc, #704]	; (8002ec8 <HAL_RCC_OscConfig+0xc58>)
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	4aaf      	ldr	r2, [pc, #700]	; (8002ec8 <HAL_RCC_OscConfig+0xc58>)
 8002c0a:	f023 0301 	bic.w	r3, r3, #1
 8002c0e:	6213      	str	r3, [r2, #32]
 8002c10:	4bad      	ldr	r3, [pc, #692]	; (8002ec8 <HAL_RCC_OscConfig+0xc58>)
 8002c12:	6a1b      	ldr	r3, [r3, #32]
 8002c14:	4aac      	ldr	r2, [pc, #688]	; (8002ec8 <HAL_RCC_OscConfig+0xc58>)
 8002c16:	f023 0304 	bic.w	r3, r3, #4
 8002c1a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c20:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 8081 	beq.w	8002d30 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c2e:	f7fd ffcf 	bl	8000bd0 <HAL_GetTick>
 8002c32:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c36:	e00b      	b.n	8002c50 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c38:	f7fd ffca 	bl	8000bd0 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e345      	b.n	80032dc <HAL_RCC_OscConfig+0x106c>
 8002c50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c54:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002c58:	2202      	movs	r2, #2
 8002c5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c60:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	fa93 f2a3 	rbit	r2, r3
 8002c6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c6e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c78:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c84:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	fa93 f2a3 	rbit	r2, r3
 8002c8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c92:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002c96:	601a      	str	r2, [r3, #0]
  return result;
 8002c98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c9c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002ca0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca2:	fab3 f383 	clz	r3, r3
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	095b      	lsrs	r3, r3, #5
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	f043 0302 	orr.w	r3, r3, #2
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d102      	bne.n	8002cbc <HAL_RCC_OscConfig+0xa4c>
 8002cb6:	4b84      	ldr	r3, [pc, #528]	; (8002ec8 <HAL_RCC_OscConfig+0xc58>)
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	e013      	b.n	8002ce4 <HAL_RCC_OscConfig+0xa74>
 8002cbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ccc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	fa93 f2a3 	rbit	r2, r3
 8002cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cda:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	4b79      	ldr	r3, [pc, #484]	; (8002ec8 <HAL_RCC_OscConfig+0xc58>)
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ce8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002cec:	2102      	movs	r1, #2
 8002cee:	6011      	str	r1, [r2, #0]
 8002cf0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cf4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002cf8:	6812      	ldr	r2, [r2, #0]
 8002cfa:	fa92 f1a2 	rbit	r1, r2
 8002cfe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d02:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002d06:	6011      	str	r1, [r2, #0]
  return result;
 8002d08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d0c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002d10:	6812      	ldr	r2, [r2, #0]
 8002d12:	fab2 f282 	clz	r2, r2
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d1c:	b2d2      	uxtb	r2, r2
 8002d1e:	f002 021f 	and.w	r2, r2, #31
 8002d22:	2101      	movs	r1, #1
 8002d24:	fa01 f202 	lsl.w	r2, r1, r2
 8002d28:	4013      	ands	r3, r2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d084      	beq.n	8002c38 <HAL_RCC_OscConfig+0x9c8>
 8002d2e:	e07f      	b.n	8002e30 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d30:	f7fd ff4e 	bl	8000bd0 <HAL_GetTick>
 8002d34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d38:	e00b      	b.n	8002d52 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d3a:	f7fd ff49 	bl	8000bd0 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e2c4      	b.n	80032dc <HAL_RCC_OscConfig+0x106c>
 8002d52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d56:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d62:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	fa93 f2a3 	rbit	r2, r3
 8002d6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d70:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d7a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002d7e:	2202      	movs	r2, #2
 8002d80:	601a      	str	r2, [r3, #0]
 8002d82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d86:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	fa93 f2a3 	rbit	r2, r3
 8002d90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d94:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002d98:	601a      	str	r2, [r3, #0]
  return result;
 8002d9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d9e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002da2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002da4:	fab3 f383 	clz	r3, r3
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	095b      	lsrs	r3, r3, #5
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	f043 0302 	orr.w	r3, r3, #2
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d102      	bne.n	8002dbe <HAL_RCC_OscConfig+0xb4e>
 8002db8:	4b43      	ldr	r3, [pc, #268]	; (8002ec8 <HAL_RCC_OscConfig+0xc58>)
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	e013      	b.n	8002de6 <HAL_RCC_OscConfig+0xb76>
 8002dbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dce:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	fa93 f2a3 	rbit	r2, r3
 8002dd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ddc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002de0:	601a      	str	r2, [r3, #0]
 8002de2:	4b39      	ldr	r3, [pc, #228]	; (8002ec8 <HAL_RCC_OscConfig+0xc58>)
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002dea:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002dee:	2102      	movs	r1, #2
 8002df0:	6011      	str	r1, [r2, #0]
 8002df2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002df6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002dfa:	6812      	ldr	r2, [r2, #0]
 8002dfc:	fa92 f1a2 	rbit	r1, r2
 8002e00:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e04:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002e08:	6011      	str	r1, [r2, #0]
  return result;
 8002e0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e0e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002e12:	6812      	ldr	r2, [r2, #0]
 8002e14:	fab2 f282 	clz	r2, r2
 8002e18:	b2d2      	uxtb	r2, r2
 8002e1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e1e:	b2d2      	uxtb	r2, r2
 8002e20:	f002 021f 	and.w	r2, r2, #31
 8002e24:	2101      	movs	r1, #1
 8002e26:	fa01 f202 	lsl.w	r2, r1, r2
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d184      	bne.n	8002d3a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e30:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d105      	bne.n	8002e44 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e38:	4b23      	ldr	r3, [pc, #140]	; (8002ec8 <HAL_RCC_OscConfig+0xc58>)
 8002e3a:	69db      	ldr	r3, [r3, #28]
 8002e3c:	4a22      	ldr	r2, [pc, #136]	; (8002ec8 <HAL_RCC_OscConfig+0xc58>)
 8002e3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e42:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e48:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	69db      	ldr	r3, [r3, #28]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f000 8242 	beq.w	80032da <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e56:	4b1c      	ldr	r3, [pc, #112]	; (8002ec8 <HAL_RCC_OscConfig+0xc58>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f003 030c 	and.w	r3, r3, #12
 8002e5e:	2b08      	cmp	r3, #8
 8002e60:	f000 8213 	beq.w	800328a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e68:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	69db      	ldr	r3, [r3, #28]
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	f040 8162 	bne.w	800313a <HAL_RCC_OscConfig+0xeca>
 8002e76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e7a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002e7e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e88:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	fa93 f2a3 	rbit	r2, r3
 8002e92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e96:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002e9a:	601a      	str	r2, [r3, #0]
  return result;
 8002e9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002ea4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea6:	fab3 f383 	clz	r3, r3
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002eb0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	2300      	movs	r3, #0
 8002eba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ebc:	f7fd fe88 	bl	8000bd0 <HAL_GetTick>
 8002ec0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ec4:	e00c      	b.n	8002ee0 <HAL_RCC_OscConfig+0xc70>
 8002ec6:	bf00      	nop
 8002ec8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ecc:	f7fd fe80 	bl	8000bd0 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e1fd      	b.n	80032dc <HAL_RCC_OscConfig+0x106c>
 8002ee0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002ee8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002eec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	fa93 f2a3 	rbit	r2, r3
 8002efc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f00:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002f04:	601a      	str	r2, [r3, #0]
  return result;
 8002f06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f0a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002f0e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f10:	fab3 f383 	clz	r3, r3
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	095b      	lsrs	r3, r3, #5
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	f043 0301 	orr.w	r3, r3, #1
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d102      	bne.n	8002f2a <HAL_RCC_OscConfig+0xcba>
 8002f24:	4bb0      	ldr	r3, [pc, #704]	; (80031e8 <HAL_RCC_OscConfig+0xf78>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	e027      	b.n	8002f7a <HAL_RCC_OscConfig+0xd0a>
 8002f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f2e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002f32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f3c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	fa93 f2a3 	rbit	r2, r3
 8002f46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f4a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f54:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002f58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f5c:	601a      	str	r2, [r3, #0]
 8002f5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f62:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	fa93 f2a3 	rbit	r2, r3
 8002f6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f70:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002f74:	601a      	str	r2, [r3, #0]
 8002f76:	4b9c      	ldr	r3, [pc, #624]	; (80031e8 <HAL_RCC_OscConfig+0xf78>)
 8002f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f7e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002f82:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f86:	6011      	str	r1, [r2, #0]
 8002f88:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f8c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002f90:	6812      	ldr	r2, [r2, #0]
 8002f92:	fa92 f1a2 	rbit	r1, r2
 8002f96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f9a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002f9e:	6011      	str	r1, [r2, #0]
  return result;
 8002fa0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fa4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002fa8:	6812      	ldr	r2, [r2, #0]
 8002faa:	fab2 f282 	clz	r2, r2
 8002fae:	b2d2      	uxtb	r2, r2
 8002fb0:	f042 0220 	orr.w	r2, r2, #32
 8002fb4:	b2d2      	uxtb	r2, r2
 8002fb6:	f002 021f 	and.w	r2, r2, #31
 8002fba:	2101      	movs	r1, #1
 8002fbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d182      	bne.n	8002ecc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fc6:	4b88      	ldr	r3, [pc, #544]	; (80031e8 <HAL_RCC_OscConfig+0xf78>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002fce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002fda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	430b      	orrs	r3, r1
 8002fe8:	497f      	ldr	r1, [pc, #508]	; (80031e8 <HAL_RCC_OscConfig+0xf78>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	604b      	str	r3, [r1, #4]
 8002fee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ff2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002ff6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ffa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003000:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	fa93 f2a3 	rbit	r2, r3
 800300a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800300e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003012:	601a      	str	r2, [r3, #0]
  return result;
 8003014:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003018:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800301c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800301e:	fab3 f383 	clz	r3, r3
 8003022:	b2db      	uxtb	r3, r3
 8003024:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003028:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	461a      	mov	r2, r3
 8003030:	2301      	movs	r3, #1
 8003032:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003034:	f7fd fdcc 	bl	8000bd0 <HAL_GetTick>
 8003038:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800303c:	e009      	b.n	8003052 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800303e:	f7fd fdc7 	bl	8000bd0 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e144      	b.n	80032dc <HAL_RCC_OscConfig+0x106c>
 8003052:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003056:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800305a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800305e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003060:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003064:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	fa93 f2a3 	rbit	r2, r3
 800306e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003072:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003076:	601a      	str	r2, [r3, #0]
  return result;
 8003078:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800307c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003080:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003082:	fab3 f383 	clz	r3, r3
 8003086:	b2db      	uxtb	r3, r3
 8003088:	095b      	lsrs	r3, r3, #5
 800308a:	b2db      	uxtb	r3, r3
 800308c:	f043 0301 	orr.w	r3, r3, #1
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b01      	cmp	r3, #1
 8003094:	d102      	bne.n	800309c <HAL_RCC_OscConfig+0xe2c>
 8003096:	4b54      	ldr	r3, [pc, #336]	; (80031e8 <HAL_RCC_OscConfig+0xf78>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	e027      	b.n	80030ec <HAL_RCC_OscConfig+0xe7c>
 800309c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030a0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80030a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ae:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	fa93 f2a3 	rbit	r2, r3
 80030b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030bc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80030c0:	601a      	str	r2, [r3, #0]
 80030c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80030ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	fa93 f2a3 	rbit	r2, r3
 80030de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	4b3f      	ldr	r3, [pc, #252]	; (80031e8 <HAL_RCC_OscConfig+0xf78>)
 80030ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030f0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80030f4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80030f8:	6011      	str	r1, [r2, #0]
 80030fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030fe:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003102:	6812      	ldr	r2, [r2, #0]
 8003104:	fa92 f1a2 	rbit	r1, r2
 8003108:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800310c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003110:	6011      	str	r1, [r2, #0]
  return result;
 8003112:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003116:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800311a:	6812      	ldr	r2, [r2, #0]
 800311c:	fab2 f282 	clz	r2, r2
 8003120:	b2d2      	uxtb	r2, r2
 8003122:	f042 0220 	orr.w	r2, r2, #32
 8003126:	b2d2      	uxtb	r2, r2
 8003128:	f002 021f 	and.w	r2, r2, #31
 800312c:	2101      	movs	r1, #1
 800312e:	fa01 f202 	lsl.w	r2, r1, r2
 8003132:	4013      	ands	r3, r2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d082      	beq.n	800303e <HAL_RCC_OscConfig+0xdce>
 8003138:	e0cf      	b.n	80032da <HAL_RCC_OscConfig+0x106a>
 800313a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800313e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003142:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003146:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003148:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800314c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	fa93 f2a3 	rbit	r2, r3
 8003156:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800315a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800315e:	601a      	str	r2, [r3, #0]
  return result;
 8003160:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003164:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003168:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800316a:	fab3 f383 	clz	r3, r3
 800316e:	b2db      	uxtb	r3, r3
 8003170:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003174:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	461a      	mov	r2, r3
 800317c:	2300      	movs	r3, #0
 800317e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003180:	f7fd fd26 	bl	8000bd0 <HAL_GetTick>
 8003184:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003188:	e009      	b.n	800319e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800318a:	f7fd fd21 	bl	8000bd0 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e09e      	b.n	80032dc <HAL_RCC_OscConfig+0x106c>
 800319e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80031a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	fa93 f2a3 	rbit	r2, r3
 80031ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031be:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80031c2:	601a      	str	r2, [r3, #0]
  return result;
 80031c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031c8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80031cc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031ce:	fab3 f383 	clz	r3, r3
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	095b      	lsrs	r3, r3, #5
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	f043 0301 	orr.w	r3, r3, #1
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d104      	bne.n	80031ec <HAL_RCC_OscConfig+0xf7c>
 80031e2:	4b01      	ldr	r3, [pc, #4]	; (80031e8 <HAL_RCC_OscConfig+0xf78>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	e029      	b.n	800323c <HAL_RCC_OscConfig+0xfcc>
 80031e8:	40021000 	.word	0x40021000
 80031ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80031f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031fe:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	fa93 f2a3 	rbit	r2, r3
 8003208:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800320c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003210:	601a      	str	r2, [r3, #0]
 8003212:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003216:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800321a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800321e:	601a      	str	r2, [r3, #0]
 8003220:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003224:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	fa93 f2a3 	rbit	r2, r3
 800322e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003232:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	4b2b      	ldr	r3, [pc, #172]	; (80032e8 <HAL_RCC_OscConfig+0x1078>)
 800323a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003240:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003244:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003248:	6011      	str	r1, [r2, #0]
 800324a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800324e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003252:	6812      	ldr	r2, [r2, #0]
 8003254:	fa92 f1a2 	rbit	r1, r2
 8003258:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800325c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003260:	6011      	str	r1, [r2, #0]
  return result;
 8003262:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003266:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800326a:	6812      	ldr	r2, [r2, #0]
 800326c:	fab2 f282 	clz	r2, r2
 8003270:	b2d2      	uxtb	r2, r2
 8003272:	f042 0220 	orr.w	r2, r2, #32
 8003276:	b2d2      	uxtb	r2, r2
 8003278:	f002 021f 	and.w	r2, r2, #31
 800327c:	2101      	movs	r1, #1
 800327e:	fa01 f202 	lsl.w	r2, r1, r2
 8003282:	4013      	ands	r3, r2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d180      	bne.n	800318a <HAL_RCC_OscConfig+0xf1a>
 8003288:	e027      	b.n	80032da <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800328a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800328e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	2b01      	cmp	r3, #1
 8003298:	d101      	bne.n	800329e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e01e      	b.n	80032dc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800329e:	4b12      	ldr	r3, [pc, #72]	; (80032e8 <HAL_RCC_OscConfig+0x1078>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80032a6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80032aa:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80032ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d10b      	bne.n	80032d6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80032be:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80032c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80032c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d001      	beq.n	80032da <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e000      	b.n	80032dc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	40021000 	.word	0x40021000

080032ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b09e      	sub	sp, #120	; 0x78
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d101      	bne.n	8003304 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e162      	b.n	80035ca <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003304:	4b90      	ldr	r3, [pc, #576]	; (8003548 <HAL_RCC_ClockConfig+0x25c>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0307 	and.w	r3, r3, #7
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	429a      	cmp	r2, r3
 8003310:	d910      	bls.n	8003334 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003312:	4b8d      	ldr	r3, [pc, #564]	; (8003548 <HAL_RCC_ClockConfig+0x25c>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f023 0207 	bic.w	r2, r3, #7
 800331a:	498b      	ldr	r1, [pc, #556]	; (8003548 <HAL_RCC_ClockConfig+0x25c>)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	4313      	orrs	r3, r2
 8003320:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003322:	4b89      	ldr	r3, [pc, #548]	; (8003548 <HAL_RCC_ClockConfig+0x25c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	683a      	ldr	r2, [r7, #0]
 800332c:	429a      	cmp	r2, r3
 800332e:	d001      	beq.n	8003334 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e14a      	b.n	80035ca <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d008      	beq.n	8003352 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003340:	4b82      	ldr	r3, [pc, #520]	; (800354c <HAL_RCC_ClockConfig+0x260>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	497f      	ldr	r1, [pc, #508]	; (800354c <HAL_RCC_ClockConfig+0x260>)
 800334e:	4313      	orrs	r3, r2
 8003350:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 80dc 	beq.w	8003518 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d13c      	bne.n	80033e2 <HAL_RCC_ClockConfig+0xf6>
 8003368:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800336c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003370:	fa93 f3a3 	rbit	r3, r3
 8003374:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003378:	fab3 f383 	clz	r3, r3
 800337c:	b2db      	uxtb	r3, r3
 800337e:	095b      	lsrs	r3, r3, #5
 8003380:	b2db      	uxtb	r3, r3
 8003382:	f043 0301 	orr.w	r3, r3, #1
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2b01      	cmp	r3, #1
 800338a:	d102      	bne.n	8003392 <HAL_RCC_ClockConfig+0xa6>
 800338c:	4b6f      	ldr	r3, [pc, #444]	; (800354c <HAL_RCC_ClockConfig+0x260>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	e00f      	b.n	80033b2 <HAL_RCC_ClockConfig+0xc6>
 8003392:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003396:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003398:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800339a:	fa93 f3a3 	rbit	r3, r3
 800339e:	667b      	str	r3, [r7, #100]	; 0x64
 80033a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033a4:	663b      	str	r3, [r7, #96]	; 0x60
 80033a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033a8:	fa93 f3a3 	rbit	r3, r3
 80033ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033ae:	4b67      	ldr	r3, [pc, #412]	; (800354c <HAL_RCC_ClockConfig+0x260>)
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033b6:	65ba      	str	r2, [r7, #88]	; 0x58
 80033b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033ba:	fa92 f2a2 	rbit	r2, r2
 80033be:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80033c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80033c2:	fab2 f282 	clz	r2, r2
 80033c6:	b2d2      	uxtb	r2, r2
 80033c8:	f042 0220 	orr.w	r2, r2, #32
 80033cc:	b2d2      	uxtb	r2, r2
 80033ce:	f002 021f 	and.w	r2, r2, #31
 80033d2:	2101      	movs	r1, #1
 80033d4:	fa01 f202 	lsl.w	r2, r1, r2
 80033d8:	4013      	ands	r3, r2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d17b      	bne.n	80034d6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e0f3      	b.n	80035ca <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d13c      	bne.n	8003464 <HAL_RCC_ClockConfig+0x178>
 80033ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033ee:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033f2:	fa93 f3a3 	rbit	r3, r3
 80033f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80033f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033fa:	fab3 f383 	clz	r3, r3
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	095b      	lsrs	r3, r3, #5
 8003402:	b2db      	uxtb	r3, r3
 8003404:	f043 0301 	orr.w	r3, r3, #1
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b01      	cmp	r3, #1
 800340c:	d102      	bne.n	8003414 <HAL_RCC_ClockConfig+0x128>
 800340e:	4b4f      	ldr	r3, [pc, #316]	; (800354c <HAL_RCC_ClockConfig+0x260>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	e00f      	b.n	8003434 <HAL_RCC_ClockConfig+0x148>
 8003414:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003418:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800341c:	fa93 f3a3 	rbit	r3, r3
 8003420:	647b      	str	r3, [r7, #68]	; 0x44
 8003422:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003426:	643b      	str	r3, [r7, #64]	; 0x40
 8003428:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800342a:	fa93 f3a3 	rbit	r3, r3
 800342e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003430:	4b46      	ldr	r3, [pc, #280]	; (800354c <HAL_RCC_ClockConfig+0x260>)
 8003432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003434:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003438:	63ba      	str	r2, [r7, #56]	; 0x38
 800343a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800343c:	fa92 f2a2 	rbit	r2, r2
 8003440:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003442:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003444:	fab2 f282 	clz	r2, r2
 8003448:	b2d2      	uxtb	r2, r2
 800344a:	f042 0220 	orr.w	r2, r2, #32
 800344e:	b2d2      	uxtb	r2, r2
 8003450:	f002 021f 	and.w	r2, r2, #31
 8003454:	2101      	movs	r1, #1
 8003456:	fa01 f202 	lsl.w	r2, r1, r2
 800345a:	4013      	ands	r3, r2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d13a      	bne.n	80034d6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e0b2      	b.n	80035ca <HAL_RCC_ClockConfig+0x2de>
 8003464:	2302      	movs	r3, #2
 8003466:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346a:	fa93 f3a3 	rbit	r3, r3
 800346e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003472:	fab3 f383 	clz	r3, r3
 8003476:	b2db      	uxtb	r3, r3
 8003478:	095b      	lsrs	r3, r3, #5
 800347a:	b2db      	uxtb	r3, r3
 800347c:	f043 0301 	orr.w	r3, r3, #1
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b01      	cmp	r3, #1
 8003484:	d102      	bne.n	800348c <HAL_RCC_ClockConfig+0x1a0>
 8003486:	4b31      	ldr	r3, [pc, #196]	; (800354c <HAL_RCC_ClockConfig+0x260>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	e00d      	b.n	80034a8 <HAL_RCC_ClockConfig+0x1bc>
 800348c:	2302      	movs	r3, #2
 800348e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003492:	fa93 f3a3 	rbit	r3, r3
 8003496:	627b      	str	r3, [r7, #36]	; 0x24
 8003498:	2302      	movs	r3, #2
 800349a:	623b      	str	r3, [r7, #32]
 800349c:	6a3b      	ldr	r3, [r7, #32]
 800349e:	fa93 f3a3 	rbit	r3, r3
 80034a2:	61fb      	str	r3, [r7, #28]
 80034a4:	4b29      	ldr	r3, [pc, #164]	; (800354c <HAL_RCC_ClockConfig+0x260>)
 80034a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a8:	2202      	movs	r2, #2
 80034aa:	61ba      	str	r2, [r7, #24]
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	fa92 f2a2 	rbit	r2, r2
 80034b2:	617a      	str	r2, [r7, #20]
  return result;
 80034b4:	697a      	ldr	r2, [r7, #20]
 80034b6:	fab2 f282 	clz	r2, r2
 80034ba:	b2d2      	uxtb	r2, r2
 80034bc:	f042 0220 	orr.w	r2, r2, #32
 80034c0:	b2d2      	uxtb	r2, r2
 80034c2:	f002 021f 	and.w	r2, r2, #31
 80034c6:	2101      	movs	r1, #1
 80034c8:	fa01 f202 	lsl.w	r2, r1, r2
 80034cc:	4013      	ands	r3, r2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e079      	b.n	80035ca <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034d6:	4b1d      	ldr	r3, [pc, #116]	; (800354c <HAL_RCC_ClockConfig+0x260>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f023 0203 	bic.w	r2, r3, #3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	491a      	ldr	r1, [pc, #104]	; (800354c <HAL_RCC_ClockConfig+0x260>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034e8:	f7fd fb72 	bl	8000bd0 <HAL_GetTick>
 80034ec:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ee:	e00a      	b.n	8003506 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034f0:	f7fd fb6e 	bl	8000bd0 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80034fe:	4293      	cmp	r3, r2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e061      	b.n	80035ca <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003506:	4b11      	ldr	r3, [pc, #68]	; (800354c <HAL_RCC_ClockConfig+0x260>)
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f003 020c 	and.w	r2, r3, #12
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	429a      	cmp	r2, r3
 8003516:	d1eb      	bne.n	80034f0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003518:	4b0b      	ldr	r3, [pc, #44]	; (8003548 <HAL_RCC_ClockConfig+0x25c>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0307 	and.w	r3, r3, #7
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	429a      	cmp	r2, r3
 8003524:	d214      	bcs.n	8003550 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003526:	4b08      	ldr	r3, [pc, #32]	; (8003548 <HAL_RCC_ClockConfig+0x25c>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f023 0207 	bic.w	r2, r3, #7
 800352e:	4906      	ldr	r1, [pc, #24]	; (8003548 <HAL_RCC_ClockConfig+0x25c>)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	4313      	orrs	r3, r2
 8003534:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003536:	4b04      	ldr	r3, [pc, #16]	; (8003548 <HAL_RCC_ClockConfig+0x25c>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0307 	and.w	r3, r3, #7
 800353e:	683a      	ldr	r2, [r7, #0]
 8003540:	429a      	cmp	r2, r3
 8003542:	d005      	beq.n	8003550 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e040      	b.n	80035ca <HAL_RCC_ClockConfig+0x2de>
 8003548:	40022000 	.word	0x40022000
 800354c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b00      	cmp	r3, #0
 800355a:	d008      	beq.n	800356e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800355c:	4b1d      	ldr	r3, [pc, #116]	; (80035d4 <HAL_RCC_ClockConfig+0x2e8>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	491a      	ldr	r1, [pc, #104]	; (80035d4 <HAL_RCC_ClockConfig+0x2e8>)
 800356a:	4313      	orrs	r3, r2
 800356c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0308 	and.w	r3, r3, #8
 8003576:	2b00      	cmp	r3, #0
 8003578:	d009      	beq.n	800358e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800357a:	4b16      	ldr	r3, [pc, #88]	; (80035d4 <HAL_RCC_ClockConfig+0x2e8>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	4912      	ldr	r1, [pc, #72]	; (80035d4 <HAL_RCC_ClockConfig+0x2e8>)
 800358a:	4313      	orrs	r3, r2
 800358c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800358e:	f000 f829 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 8003592:	4601      	mov	r1, r0
 8003594:	4b0f      	ldr	r3, [pc, #60]	; (80035d4 <HAL_RCC_ClockConfig+0x2e8>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800359c:	22f0      	movs	r2, #240	; 0xf0
 800359e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a0:	693a      	ldr	r2, [r7, #16]
 80035a2:	fa92 f2a2 	rbit	r2, r2
 80035a6:	60fa      	str	r2, [r7, #12]
  return result;
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	fab2 f282 	clz	r2, r2
 80035ae:	b2d2      	uxtb	r2, r2
 80035b0:	40d3      	lsrs	r3, r2
 80035b2:	4a09      	ldr	r2, [pc, #36]	; (80035d8 <HAL_RCC_ClockConfig+0x2ec>)
 80035b4:	5cd3      	ldrb	r3, [r2, r3]
 80035b6:	fa21 f303 	lsr.w	r3, r1, r3
 80035ba:	4a08      	ldr	r2, [pc, #32]	; (80035dc <HAL_RCC_ClockConfig+0x2f0>)
 80035bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80035be:	4b08      	ldr	r3, [pc, #32]	; (80035e0 <HAL_RCC_ClockConfig+0x2f4>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7fd fac0 	bl	8000b48 <HAL_InitTick>
  
  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3778      	adds	r7, #120	; 0x78
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	40021000 	.word	0x40021000
 80035d8:	080057ec 	.word	0x080057ec
 80035dc:	20000000 	.word	0x20000000
 80035e0:	20000004 	.word	0x20000004

080035e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b08b      	sub	sp, #44	; 0x2c
 80035e8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035ea:	2300      	movs	r3, #0
 80035ec:	61fb      	str	r3, [r7, #28]
 80035ee:	2300      	movs	r3, #0
 80035f0:	61bb      	str	r3, [r7, #24]
 80035f2:	2300      	movs	r3, #0
 80035f4:	627b      	str	r3, [r7, #36]	; 0x24
 80035f6:	2300      	movs	r3, #0
 80035f8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80035fa:	2300      	movs	r3, #0
 80035fc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80035fe:	4b29      	ldr	r3, [pc, #164]	; (80036a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	f003 030c 	and.w	r3, r3, #12
 800360a:	2b04      	cmp	r3, #4
 800360c:	d002      	beq.n	8003614 <HAL_RCC_GetSysClockFreq+0x30>
 800360e:	2b08      	cmp	r3, #8
 8003610:	d003      	beq.n	800361a <HAL_RCC_GetSysClockFreq+0x36>
 8003612:	e03c      	b.n	800368e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003614:	4b24      	ldr	r3, [pc, #144]	; (80036a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003616:	623b      	str	r3, [r7, #32]
      break;
 8003618:	e03c      	b.n	8003694 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003620:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003624:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003626:	68ba      	ldr	r2, [r7, #8]
 8003628:	fa92 f2a2 	rbit	r2, r2
 800362c:	607a      	str	r2, [r7, #4]
  return result;
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	fab2 f282 	clz	r2, r2
 8003634:	b2d2      	uxtb	r2, r2
 8003636:	40d3      	lsrs	r3, r2
 8003638:	4a1c      	ldr	r2, [pc, #112]	; (80036ac <HAL_RCC_GetSysClockFreq+0xc8>)
 800363a:	5cd3      	ldrb	r3, [r2, r3]
 800363c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800363e:	4b19      	ldr	r3, [pc, #100]	; (80036a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003642:	f003 030f 	and.w	r3, r3, #15
 8003646:	220f      	movs	r2, #15
 8003648:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	fa92 f2a2 	rbit	r2, r2
 8003650:	60fa      	str	r2, [r7, #12]
  return result;
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	fab2 f282 	clz	r2, r2
 8003658:	b2d2      	uxtb	r2, r2
 800365a:	40d3      	lsrs	r3, r2
 800365c:	4a14      	ldr	r2, [pc, #80]	; (80036b0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800365e:	5cd3      	ldrb	r3, [r2, r3]
 8003660:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d008      	beq.n	800367e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800366c:	4a0e      	ldr	r2, [pc, #56]	; (80036a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	fbb2 f2f3 	udiv	r2, r2, r3
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	fb02 f303 	mul.w	r3, r2, r3
 800367a:	627b      	str	r3, [r7, #36]	; 0x24
 800367c:	e004      	b.n	8003688 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	4a0c      	ldr	r2, [pc, #48]	; (80036b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003682:	fb02 f303 	mul.w	r3, r2, r3
 8003686:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368a:	623b      	str	r3, [r7, #32]
      break;
 800368c:	e002      	b.n	8003694 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800368e:	4b06      	ldr	r3, [pc, #24]	; (80036a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003690:	623b      	str	r3, [r7, #32]
      break;
 8003692:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003694:	6a3b      	ldr	r3, [r7, #32]
}
 8003696:	4618      	mov	r0, r3
 8003698:	372c      	adds	r7, #44	; 0x2c
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	40021000 	.word	0x40021000
 80036a8:	007a1200 	.word	0x007a1200
 80036ac:	08005804 	.word	0x08005804
 80036b0:	08005814 	.word	0x08005814
 80036b4:	003d0900 	.word	0x003d0900

080036b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036bc:	4b03      	ldr	r3, [pc, #12]	; (80036cc <HAL_RCC_GetHCLKFreq+0x14>)
 80036be:	681b      	ldr	r3, [r3, #0]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	20000000 	.word	0x20000000

080036d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80036d6:	f7ff ffef 	bl	80036b8 <HAL_RCC_GetHCLKFreq>
 80036da:	4601      	mov	r1, r0
 80036dc:	4b0b      	ldr	r3, [pc, #44]	; (800370c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80036e4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80036e8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	fa92 f2a2 	rbit	r2, r2
 80036f0:	603a      	str	r2, [r7, #0]
  return result;
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	fab2 f282 	clz	r2, r2
 80036f8:	b2d2      	uxtb	r2, r2
 80036fa:	40d3      	lsrs	r3, r2
 80036fc:	4a04      	ldr	r2, [pc, #16]	; (8003710 <HAL_RCC_GetPCLK1Freq+0x40>)
 80036fe:	5cd3      	ldrb	r3, [r2, r3]
 8003700:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003704:	4618      	mov	r0, r3
 8003706:	3708      	adds	r7, #8
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	40021000 	.word	0x40021000
 8003710:	080057fc 	.word	0x080057fc

08003714 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800371a:	f7ff ffcd 	bl	80036b8 <HAL_RCC_GetHCLKFreq>
 800371e:	4601      	mov	r1, r0
 8003720:	4b0b      	ldr	r3, [pc, #44]	; (8003750 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003728:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800372c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	fa92 f2a2 	rbit	r2, r2
 8003734:	603a      	str	r2, [r7, #0]
  return result;
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	fab2 f282 	clz	r2, r2
 800373c:	b2d2      	uxtb	r2, r2
 800373e:	40d3      	lsrs	r3, r2
 8003740:	4a04      	ldr	r2, [pc, #16]	; (8003754 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003742:	5cd3      	ldrb	r3, [r2, r3]
 8003744:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003748:	4618      	mov	r0, r3
 800374a:	3708      	adds	r7, #8
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	40021000 	.word	0x40021000
 8003754:	080057fc 	.word	0x080057fc

08003758 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b092      	sub	sp, #72	; 0x48
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003760:	2300      	movs	r3, #0
 8003762:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003764:	2300      	movs	r3, #0
 8003766:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003768:	2300      	movs	r3, #0
 800376a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003776:	2b00      	cmp	r3, #0
 8003778:	f000 80cd 	beq.w	8003916 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800377c:	4b86      	ldr	r3, [pc, #536]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800377e:	69db      	ldr	r3, [r3, #28]
 8003780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d10e      	bne.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003788:	4b83      	ldr	r3, [pc, #524]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800378a:	69db      	ldr	r3, [r3, #28]
 800378c:	4a82      	ldr	r2, [pc, #520]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800378e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003792:	61d3      	str	r3, [r2, #28]
 8003794:	4b80      	ldr	r3, [pc, #512]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003796:	69db      	ldr	r3, [r3, #28]
 8003798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800379c:	60bb      	str	r3, [r7, #8]
 800379e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037a0:	2301      	movs	r3, #1
 80037a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a6:	4b7d      	ldr	r3, [pc, #500]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d118      	bne.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037b2:	4b7a      	ldr	r3, [pc, #488]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a79      	ldr	r2, [pc, #484]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80037b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037bc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037be:	f7fd fa07 	bl	8000bd0 <HAL_GetTick>
 80037c2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c4:	e008      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037c6:	f7fd fa03 	bl	8000bd0 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b64      	cmp	r3, #100	; 0x64
 80037d2:	d901      	bls.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e0db      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d8:	4b70      	ldr	r3, [pc, #448]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d0f0      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037e4:	4b6c      	ldr	r3, [pc, #432]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80037e6:	6a1b      	ldr	r3, [r3, #32]
 80037e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d07d      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037fe:	429a      	cmp	r2, r3
 8003800:	d076      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003802:	4b65      	ldr	r3, [pc, #404]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800380a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800380c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003810:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003814:	fa93 f3a3 	rbit	r3, r3
 8003818:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800381a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800381c:	fab3 f383 	clz	r3, r3
 8003820:	b2db      	uxtb	r3, r3
 8003822:	461a      	mov	r2, r3
 8003824:	4b5e      	ldr	r3, [pc, #376]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003826:	4413      	add	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	461a      	mov	r2, r3
 800382c:	2301      	movs	r3, #1
 800382e:	6013      	str	r3, [r2, #0]
 8003830:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003834:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003838:	fa93 f3a3 	rbit	r3, r3
 800383c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800383e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003840:	fab3 f383 	clz	r3, r3
 8003844:	b2db      	uxtb	r3, r3
 8003846:	461a      	mov	r2, r3
 8003848:	4b55      	ldr	r3, [pc, #340]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800384a:	4413      	add	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	461a      	mov	r2, r3
 8003850:	2300      	movs	r3, #0
 8003852:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003854:	4a50      	ldr	r2, [pc, #320]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003858:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800385a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800385c:	f003 0301 	and.w	r3, r3, #1
 8003860:	2b00      	cmp	r3, #0
 8003862:	d045      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003864:	f7fd f9b4 	bl	8000bd0 <HAL_GetTick>
 8003868:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800386a:	e00a      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800386c:	f7fd f9b0 	bl	8000bd0 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	f241 3288 	movw	r2, #5000	; 0x1388
 800387a:	4293      	cmp	r3, r2
 800387c:	d901      	bls.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e086      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003882:	2302      	movs	r3, #2
 8003884:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003888:	fa93 f3a3 	rbit	r3, r3
 800388c:	627b      	str	r3, [r7, #36]	; 0x24
 800388e:	2302      	movs	r3, #2
 8003890:	623b      	str	r3, [r7, #32]
 8003892:	6a3b      	ldr	r3, [r7, #32]
 8003894:	fa93 f3a3 	rbit	r3, r3
 8003898:	61fb      	str	r3, [r7, #28]
  return result;
 800389a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800389c:	fab3 f383 	clz	r3, r3
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	095b      	lsrs	r3, r3, #5
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	f043 0302 	orr.w	r3, r3, #2
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d102      	bne.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80038b0:	4b39      	ldr	r3, [pc, #228]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038b2:	6a1b      	ldr	r3, [r3, #32]
 80038b4:	e007      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80038b6:	2302      	movs	r3, #2
 80038b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	fa93 f3a3 	rbit	r3, r3
 80038c0:	617b      	str	r3, [r7, #20]
 80038c2:	4b35      	ldr	r3, [pc, #212]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c6:	2202      	movs	r2, #2
 80038c8:	613a      	str	r2, [r7, #16]
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	fa92 f2a2 	rbit	r2, r2
 80038d0:	60fa      	str	r2, [r7, #12]
  return result;
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	fab2 f282 	clz	r2, r2
 80038d8:	b2d2      	uxtb	r2, r2
 80038da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038de:	b2d2      	uxtb	r2, r2
 80038e0:	f002 021f 	and.w	r2, r2, #31
 80038e4:	2101      	movs	r1, #1
 80038e6:	fa01 f202 	lsl.w	r2, r1, r2
 80038ea:	4013      	ands	r3, r2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d0bd      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80038f0:	4b29      	ldr	r3, [pc, #164]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	4926      	ldr	r1, [pc, #152]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003902:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003906:	2b01      	cmp	r3, #1
 8003908:	d105      	bne.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800390a:	4b23      	ldr	r3, [pc, #140]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	4a22      	ldr	r2, [pc, #136]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003910:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003914:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d008      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003922:	4b1d      	ldr	r3, [pc, #116]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003926:	f023 0203 	bic.w	r2, r3, #3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	491a      	ldr	r1, [pc, #104]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003930:	4313      	orrs	r3, r2
 8003932:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0320 	and.w	r3, r3, #32
 800393c:	2b00      	cmp	r3, #0
 800393e:	d008      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003940:	4b15      	ldr	r3, [pc, #84]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003944:	f023 0210 	bic.w	r2, r3, #16
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	4912      	ldr	r1, [pc, #72]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800394e:	4313      	orrs	r3, r2
 8003950:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800395a:	2b00      	cmp	r3, #0
 800395c:	d008      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800395e:	4b0e      	ldr	r3, [pc, #56]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003962:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	490b      	ldr	r1, [pc, #44]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800396c:	4313      	orrs	r3, r2
 800396e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d008      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800397c:	4b06      	ldr	r3, [pc, #24]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800397e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003980:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	695b      	ldr	r3, [r3, #20]
 8003988:	4903      	ldr	r1, [pc, #12]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800398a:	4313      	orrs	r3, r2
 800398c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3748      	adds	r7, #72	; 0x48
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	40021000 	.word	0x40021000
 800399c:	40007000 	.word	0x40007000
 80039a0:	10908100 	.word	0x10908100

080039a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e049      	b.n	8003a4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d106      	bne.n	80039d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7fc ff56 	bl	800087c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2202      	movs	r2, #2
 80039d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	3304      	adds	r3, #4
 80039e0:	4619      	mov	r1, r3
 80039e2:	4610      	mov	r0, r2
 80039e4:	f000 fda2 	bl	800452c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b082      	sub	sp, #8
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d101      	bne.n	8003a64 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e049      	b.n	8003af8 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d106      	bne.n	8003a7e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 f841 	bl	8003b00 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2202      	movs	r2, #2
 8003a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	3304      	adds	r3, #4
 8003a8e:	4619      	mov	r1, r3
 8003a90:	4610      	mov	r0, r2
 8003a92:	f000 fd4b 	bl	800452c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3708      	adds	r7, #8
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d101      	bne.n	8003b26 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e049      	b.n	8003bba <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d106      	bne.n	8003b40 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f841 	bl	8003bc2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2202      	movs	r2, #2
 8003b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	3304      	adds	r3, #4
 8003b50:	4619      	mov	r1, r3
 8003b52:	4610      	mov	r0, r2
 8003b54:	f000 fcea 	bl	800452c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3708      	adds	r7, #8
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	b083      	sub	sp, #12
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003bca:	bf00      	nop
 8003bcc:	370c      	adds	r7, #12
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
	...

08003bd8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003be2:	2300      	movs	r3, #0
 8003be4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d104      	bne.n	8003bf6 <HAL_TIM_IC_Start_IT+0x1e>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	e023      	b.n	8003c3e <HAL_TIM_IC_Start_IT+0x66>
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	2b04      	cmp	r3, #4
 8003bfa:	d104      	bne.n	8003c06 <HAL_TIM_IC_Start_IT+0x2e>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	e01b      	b.n	8003c3e <HAL_TIM_IC_Start_IT+0x66>
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	2b08      	cmp	r3, #8
 8003c0a:	d104      	bne.n	8003c16 <HAL_TIM_IC_Start_IT+0x3e>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	e013      	b.n	8003c3e <HAL_TIM_IC_Start_IT+0x66>
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	2b0c      	cmp	r3, #12
 8003c1a:	d104      	bne.n	8003c26 <HAL_TIM_IC_Start_IT+0x4e>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	e00b      	b.n	8003c3e <HAL_TIM_IC_Start_IT+0x66>
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	2b10      	cmp	r3, #16
 8003c2a:	d104      	bne.n	8003c36 <HAL_TIM_IC_Start_IT+0x5e>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	e003      	b.n	8003c3e <HAL_TIM_IC_Start_IT+0x66>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d104      	bne.n	8003c50 <HAL_TIM_IC_Start_IT+0x78>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	e013      	b.n	8003c78 <HAL_TIM_IC_Start_IT+0xa0>
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	2b04      	cmp	r3, #4
 8003c54:	d104      	bne.n	8003c60 <HAL_TIM_IC_Start_IT+0x88>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	e00b      	b.n	8003c78 <HAL_TIM_IC_Start_IT+0xa0>
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	2b08      	cmp	r3, #8
 8003c64:	d104      	bne.n	8003c70 <HAL_TIM_IC_Start_IT+0x98>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	e003      	b.n	8003c78 <HAL_TIM_IC_Start_IT+0xa0>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c7a:	7bbb      	ldrb	r3, [r7, #14]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d102      	bne.n	8003c86 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003c80:	7b7b      	ldrb	r3, [r7, #13]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d001      	beq.n	8003c8a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e0ce      	b.n	8003e28 <HAL_TIM_IC_Start_IT+0x250>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d104      	bne.n	8003c9a <HAL_TIM_IC_Start_IT+0xc2>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2202      	movs	r2, #2
 8003c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c98:	e023      	b.n	8003ce2 <HAL_TIM_IC_Start_IT+0x10a>
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	2b04      	cmp	r3, #4
 8003c9e:	d104      	bne.n	8003caa <HAL_TIM_IC_Start_IT+0xd2>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ca8:	e01b      	b.n	8003ce2 <HAL_TIM_IC_Start_IT+0x10a>
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	2b08      	cmp	r3, #8
 8003cae:	d104      	bne.n	8003cba <HAL_TIM_IC_Start_IT+0xe2>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cb8:	e013      	b.n	8003ce2 <HAL_TIM_IC_Start_IT+0x10a>
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	2b0c      	cmp	r3, #12
 8003cbe:	d104      	bne.n	8003cca <HAL_TIM_IC_Start_IT+0xf2>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003cc8:	e00b      	b.n	8003ce2 <HAL_TIM_IC_Start_IT+0x10a>
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	2b10      	cmp	r3, #16
 8003cce:	d104      	bne.n	8003cda <HAL_TIM_IC_Start_IT+0x102>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cd8:	e003      	b.n	8003ce2 <HAL_TIM_IC_Start_IT+0x10a>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2202      	movs	r2, #2
 8003cde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d104      	bne.n	8003cf2 <HAL_TIM_IC_Start_IT+0x11a>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2202      	movs	r2, #2
 8003cec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cf0:	e013      	b.n	8003d1a <HAL_TIM_IC_Start_IT+0x142>
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	2b04      	cmp	r3, #4
 8003cf6:	d104      	bne.n	8003d02 <HAL_TIM_IC_Start_IT+0x12a>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2202      	movs	r2, #2
 8003cfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d00:	e00b      	b.n	8003d1a <HAL_TIM_IC_Start_IT+0x142>
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	2b08      	cmp	r3, #8
 8003d06:	d104      	bne.n	8003d12 <HAL_TIM_IC_Start_IT+0x13a>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d10:	e003      	b.n	8003d1a <HAL_TIM_IC_Start_IT+0x142>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2202      	movs	r2, #2
 8003d16:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	2b0c      	cmp	r3, #12
 8003d1e:	d841      	bhi.n	8003da4 <HAL_TIM_IC_Start_IT+0x1cc>
 8003d20:	a201      	add	r2, pc, #4	; (adr r2, 8003d28 <HAL_TIM_IC_Start_IT+0x150>)
 8003d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d26:	bf00      	nop
 8003d28:	08003d5d 	.word	0x08003d5d
 8003d2c:	08003da5 	.word	0x08003da5
 8003d30:	08003da5 	.word	0x08003da5
 8003d34:	08003da5 	.word	0x08003da5
 8003d38:	08003d6f 	.word	0x08003d6f
 8003d3c:	08003da5 	.word	0x08003da5
 8003d40:	08003da5 	.word	0x08003da5
 8003d44:	08003da5 	.word	0x08003da5
 8003d48:	08003d81 	.word	0x08003d81
 8003d4c:	08003da5 	.word	0x08003da5
 8003d50:	08003da5 	.word	0x08003da5
 8003d54:	08003da5 	.word	0x08003da5
 8003d58:	08003d93 	.word	0x08003d93
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68da      	ldr	r2, [r3, #12]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0202 	orr.w	r2, r2, #2
 8003d6a:	60da      	str	r2, [r3, #12]
      break;
 8003d6c:	e01d      	b.n	8003daa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68da      	ldr	r2, [r3, #12]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f042 0204 	orr.w	r2, r2, #4
 8003d7c:	60da      	str	r2, [r3, #12]
      break;
 8003d7e:	e014      	b.n	8003daa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68da      	ldr	r2, [r3, #12]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f042 0208 	orr.w	r2, r2, #8
 8003d8e:	60da      	str	r2, [r3, #12]
      break;
 8003d90:	e00b      	b.n	8003daa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68da      	ldr	r2, [r3, #12]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f042 0210 	orr.w	r2, r2, #16
 8003da0:	60da      	str	r2, [r3, #12]
      break;
 8003da2:	e002      	b.n	8003daa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	73fb      	strb	r3, [r7, #15]
      break;
 8003da8:	bf00      	nop
  }

  if (status == HAL_OK)
 8003daa:	7bfb      	ldrb	r3, [r7, #15]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d13a      	bne.n	8003e26 <HAL_TIM_IC_Start_IT+0x24e>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2201      	movs	r2, #1
 8003db6:	6839      	ldr	r1, [r7, #0]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f001 f881 	bl	8004ec0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a1b      	ldr	r2, [pc, #108]	; (8003e30 <HAL_TIM_IC_Start_IT+0x258>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d00e      	beq.n	8003de6 <HAL_TIM_IC_Start_IT+0x20e>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd0:	d009      	beq.n	8003de6 <HAL_TIM_IC_Start_IT+0x20e>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a17      	ldr	r2, [pc, #92]	; (8003e34 <HAL_TIM_IC_Start_IT+0x25c>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d004      	beq.n	8003de6 <HAL_TIM_IC_Start_IT+0x20e>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a15      	ldr	r2, [pc, #84]	; (8003e38 <HAL_TIM_IC_Start_IT+0x260>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d115      	bne.n	8003e12 <HAL_TIM_IC_Start_IT+0x23a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	689a      	ldr	r2, [r3, #8]
 8003dec:	4b13      	ldr	r3, [pc, #76]	; (8003e3c <HAL_TIM_IC_Start_IT+0x264>)
 8003dee:	4013      	ands	r3, r2
 8003df0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	2b06      	cmp	r3, #6
 8003df6:	d015      	beq.n	8003e24 <HAL_TIM_IC_Start_IT+0x24c>
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dfe:	d011      	beq.n	8003e24 <HAL_TIM_IC_Start_IT+0x24c>
      {
        __HAL_TIM_ENABLE(htim);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f042 0201 	orr.w	r2, r2, #1
 8003e0e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e10:	e008      	b.n	8003e24 <HAL_TIM_IC_Start_IT+0x24c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f042 0201 	orr.w	r2, r2, #1
 8003e20:	601a      	str	r2, [r3, #0]
 8003e22:	e000      	b.n	8003e26 <HAL_TIM_IC_Start_IT+0x24e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e24:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3710      	adds	r7, #16
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	40012c00 	.word	0x40012c00
 8003e34:	40000400 	.word	0x40000400
 8003e38:	40014000 	.word	0x40014000
 8003e3c:	00010007 	.word	0x00010007

08003e40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d122      	bne.n	8003e9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d11b      	bne.n	8003e9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f06f 0202 	mvn.w	r2, #2
 8003e6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2201      	movs	r2, #1
 8003e72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	f003 0303 	and.w	r3, r3, #3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d003      	beq.n	8003e8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 fb34 	bl	80044f0 <HAL_TIM_IC_CaptureCallback>
 8003e88:	e005      	b.n	8003e96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 fb26 	bl	80044dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 fb37 	bl	8004504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	f003 0304 	and.w	r3, r3, #4
 8003ea6:	2b04      	cmp	r3, #4
 8003ea8:	d122      	bne.n	8003ef0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	f003 0304 	and.w	r3, r3, #4
 8003eb4:	2b04      	cmp	r3, #4
 8003eb6:	d11b      	bne.n	8003ef0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f06f 0204 	mvn.w	r2, #4
 8003ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2202      	movs	r2, #2
 8003ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d003      	beq.n	8003ede <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 fb0a 	bl	80044f0 <HAL_TIM_IC_CaptureCallback>
 8003edc:	e005      	b.n	8003eea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 fafc 	bl	80044dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f000 fb0d 	bl	8004504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	f003 0308 	and.w	r3, r3, #8
 8003efa:	2b08      	cmp	r3, #8
 8003efc:	d122      	bne.n	8003f44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	f003 0308 	and.w	r3, r3, #8
 8003f08:	2b08      	cmp	r3, #8
 8003f0a:	d11b      	bne.n	8003f44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f06f 0208 	mvn.w	r2, #8
 8003f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2204      	movs	r2, #4
 8003f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	f003 0303 	and.w	r3, r3, #3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d003      	beq.n	8003f32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 fae0 	bl	80044f0 <HAL_TIM_IC_CaptureCallback>
 8003f30:	e005      	b.n	8003f3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 fad2 	bl	80044dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 fae3 	bl	8004504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	f003 0310 	and.w	r3, r3, #16
 8003f4e:	2b10      	cmp	r3, #16
 8003f50:	d122      	bne.n	8003f98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	f003 0310 	and.w	r3, r3, #16
 8003f5c:	2b10      	cmp	r3, #16
 8003f5e:	d11b      	bne.n	8003f98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f06f 0210 	mvn.w	r2, #16
 8003f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2208      	movs	r2, #8
 8003f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d003      	beq.n	8003f86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 fab6 	bl	80044f0 <HAL_TIM_IC_CaptureCallback>
 8003f84:	e005      	b.n	8003f92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 faa8 	bl	80044dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 fab9 	bl	8004504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d10e      	bne.n	8003fc4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d107      	bne.n	8003fc4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f06f 0201 	mvn.w	r2, #1
 8003fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 fa82 	bl	80044c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fce:	2b80      	cmp	r3, #128	; 0x80
 8003fd0:	d10e      	bne.n	8003ff0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fdc:	2b80      	cmp	r3, #128	; 0x80
 8003fde:	d107      	bne.n	8003ff0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f001 f87e 	bl	80050ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ffa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ffe:	d10e      	bne.n	800401e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800400a:	2b80      	cmp	r3, #128	; 0x80
 800400c:	d107      	bne.n	800401e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004016:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f001 f871 	bl	8005100 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004028:	2b40      	cmp	r3, #64	; 0x40
 800402a:	d10e      	bne.n	800404a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004036:	2b40      	cmp	r3, #64	; 0x40
 8004038:	d107      	bne.n	800404a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004042:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f000 fa67 	bl	8004518 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	f003 0320 	and.w	r3, r3, #32
 8004054:	2b20      	cmp	r3, #32
 8004056:	d10e      	bne.n	8004076 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	f003 0320 	and.w	r3, r3, #32
 8004062:	2b20      	cmp	r3, #32
 8004064:	d107      	bne.n	8004076 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f06f 0220 	mvn.w	r2, #32
 800406e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f001 f831 	bl	80050d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004076:	bf00      	nop
 8004078:	3708      	adds	r7, #8
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
	...

08004080 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b086      	sub	sp, #24
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800408c:	2300      	movs	r3, #0
 800408e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004096:	2b01      	cmp	r3, #1
 8004098:	d101      	bne.n	800409e <HAL_TIM_OC_ConfigChannel+0x1e>
 800409a:	2302      	movs	r3, #2
 800409c:	e066      	b.n	800416c <HAL_TIM_OC_ConfigChannel+0xec>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2b14      	cmp	r3, #20
 80040aa:	d857      	bhi.n	800415c <HAL_TIM_OC_ConfigChannel+0xdc>
 80040ac:	a201      	add	r2, pc, #4	; (adr r2, 80040b4 <HAL_TIM_OC_ConfigChannel+0x34>)
 80040ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b2:	bf00      	nop
 80040b4:	08004109 	.word	0x08004109
 80040b8:	0800415d 	.word	0x0800415d
 80040bc:	0800415d 	.word	0x0800415d
 80040c0:	0800415d 	.word	0x0800415d
 80040c4:	08004117 	.word	0x08004117
 80040c8:	0800415d 	.word	0x0800415d
 80040cc:	0800415d 	.word	0x0800415d
 80040d0:	0800415d 	.word	0x0800415d
 80040d4:	08004125 	.word	0x08004125
 80040d8:	0800415d 	.word	0x0800415d
 80040dc:	0800415d 	.word	0x0800415d
 80040e0:	0800415d 	.word	0x0800415d
 80040e4:	08004133 	.word	0x08004133
 80040e8:	0800415d 	.word	0x0800415d
 80040ec:	0800415d 	.word	0x0800415d
 80040f0:	0800415d 	.word	0x0800415d
 80040f4:	08004141 	.word	0x08004141
 80040f8:	0800415d 	.word	0x0800415d
 80040fc:	0800415d 	.word	0x0800415d
 8004100:	0800415d 	.word	0x0800415d
 8004104:	0800414f 	.word	0x0800414f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68b9      	ldr	r1, [r7, #8]
 800410e:	4618      	mov	r0, r3
 8004110:	f000 fa84 	bl	800461c <TIM_OC1_SetConfig>
      break;
 8004114:	e025      	b.n	8004162 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68b9      	ldr	r1, [r7, #8]
 800411c:	4618      	mov	r0, r3
 800411e:	f000 fb03 	bl	8004728 <TIM_OC2_SetConfig>
      break;
 8004122:	e01e      	b.n	8004162 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68b9      	ldr	r1, [r7, #8]
 800412a:	4618      	mov	r0, r3
 800412c:	f000 fb7c 	bl	8004828 <TIM_OC3_SetConfig>
      break;
 8004130:	e017      	b.n	8004162 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68b9      	ldr	r1, [r7, #8]
 8004138:	4618      	mov	r0, r3
 800413a:	f000 fbf3 	bl	8004924 <TIM_OC4_SetConfig>
      break;
 800413e:	e010      	b.n	8004162 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68b9      	ldr	r1, [r7, #8]
 8004146:	4618      	mov	r0, r3
 8004148:	f000 fc50 	bl	80049ec <TIM_OC5_SetConfig>
      break;
 800414c:	e009      	b.n	8004162 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68b9      	ldr	r1, [r7, #8]
 8004154:	4618      	mov	r0, r3
 8004156:	f000 fca7 	bl	8004aa8 <TIM_OC6_SetConfig>
      break;
 800415a:	e002      	b.n	8004162 <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	75fb      	strb	r3, [r7, #23]
      break;
 8004160:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800416a:	7dfb      	ldrb	r3, [r7, #23]
}
 800416c:	4618      	mov	r0, r3
 800416e:	3718      	adds	r7, #24
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b086      	sub	sp, #24
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004180:	2300      	movs	r3, #0
 8004182:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800418a:	2b01      	cmp	r3, #1
 800418c:	d101      	bne.n	8004192 <HAL_TIM_IC_ConfigChannel+0x1e>
 800418e:	2302      	movs	r3, #2
 8004190:	e088      	b.n	80042a4 <HAL_TIM_IC_ConfigChannel+0x130>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d11b      	bne.n	80041d8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6818      	ldr	r0, [r3, #0]
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	6819      	ldr	r1, [r3, #0]
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	685a      	ldr	r2, [r3, #4]
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	f000 fcda 	bl	8004b68 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	699a      	ldr	r2, [r3, #24]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 020c 	bic.w	r2, r2, #12
 80041c2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	6999      	ldr	r1, [r3, #24]
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	689a      	ldr	r2, [r3, #8]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	430a      	orrs	r2, r1
 80041d4:	619a      	str	r2, [r3, #24]
 80041d6:	e060      	b.n	800429a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2b04      	cmp	r3, #4
 80041dc:	d11c      	bne.n	8004218 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6818      	ldr	r0, [r3, #0]
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	6819      	ldr	r1, [r3, #0]
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	685a      	ldr	r2, [r3, #4]
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	f000 fd46 	bl	8004c7e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	699a      	ldr	r2, [r3, #24]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004200:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	6999      	ldr	r1, [r3, #24]
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	021a      	lsls	r2, r3, #8
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	430a      	orrs	r2, r1
 8004214:	619a      	str	r2, [r3, #24]
 8004216:	e040      	b.n	800429a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2b08      	cmp	r3, #8
 800421c:	d11b      	bne.n	8004256 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6818      	ldr	r0, [r3, #0]
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	6819      	ldr	r1, [r3, #0]
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	685a      	ldr	r2, [r3, #4]
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	f000 fd93 	bl	8004d58 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	69da      	ldr	r2, [r3, #28]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 020c 	bic.w	r2, r2, #12
 8004240:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	69d9      	ldr	r1, [r3, #28]
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	689a      	ldr	r2, [r3, #8]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	430a      	orrs	r2, r1
 8004252:	61da      	str	r2, [r3, #28]
 8004254:	e021      	b.n	800429a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2b0c      	cmp	r3, #12
 800425a:	d11c      	bne.n	8004296 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6818      	ldr	r0, [r3, #0]
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	6819      	ldr	r1, [r3, #0]
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	f000 fdb0 	bl	8004dd0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	69da      	ldr	r2, [r3, #28]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800427e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	69d9      	ldr	r1, [r3, #28]
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	021a      	lsls	r2, r3, #8
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	430a      	orrs	r2, r1
 8004292:	61da      	str	r2, [r3, #28]
 8004294:	e001      	b.n	800429a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80042a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3718      	adds	r7, #24
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042b6:	2300      	movs	r3, #0
 80042b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d101      	bne.n	80042c8 <HAL_TIM_ConfigClockSource+0x1c>
 80042c4:	2302      	movs	r3, #2
 80042c6:	e0b6      	b.n	8004436 <HAL_TIM_ConfigClockSource+0x18a>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2202      	movs	r2, #2
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004304:	d03e      	beq.n	8004384 <HAL_TIM_ConfigClockSource+0xd8>
 8004306:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800430a:	f200 8087 	bhi.w	800441c <HAL_TIM_ConfigClockSource+0x170>
 800430e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004312:	f000 8086 	beq.w	8004422 <HAL_TIM_ConfigClockSource+0x176>
 8004316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800431a:	d87f      	bhi.n	800441c <HAL_TIM_ConfigClockSource+0x170>
 800431c:	2b70      	cmp	r3, #112	; 0x70
 800431e:	d01a      	beq.n	8004356 <HAL_TIM_ConfigClockSource+0xaa>
 8004320:	2b70      	cmp	r3, #112	; 0x70
 8004322:	d87b      	bhi.n	800441c <HAL_TIM_ConfigClockSource+0x170>
 8004324:	2b60      	cmp	r3, #96	; 0x60
 8004326:	d050      	beq.n	80043ca <HAL_TIM_ConfigClockSource+0x11e>
 8004328:	2b60      	cmp	r3, #96	; 0x60
 800432a:	d877      	bhi.n	800441c <HAL_TIM_ConfigClockSource+0x170>
 800432c:	2b50      	cmp	r3, #80	; 0x50
 800432e:	d03c      	beq.n	80043aa <HAL_TIM_ConfigClockSource+0xfe>
 8004330:	2b50      	cmp	r3, #80	; 0x50
 8004332:	d873      	bhi.n	800441c <HAL_TIM_ConfigClockSource+0x170>
 8004334:	2b40      	cmp	r3, #64	; 0x40
 8004336:	d058      	beq.n	80043ea <HAL_TIM_ConfigClockSource+0x13e>
 8004338:	2b40      	cmp	r3, #64	; 0x40
 800433a:	d86f      	bhi.n	800441c <HAL_TIM_ConfigClockSource+0x170>
 800433c:	2b30      	cmp	r3, #48	; 0x30
 800433e:	d064      	beq.n	800440a <HAL_TIM_ConfigClockSource+0x15e>
 8004340:	2b30      	cmp	r3, #48	; 0x30
 8004342:	d86b      	bhi.n	800441c <HAL_TIM_ConfigClockSource+0x170>
 8004344:	2b20      	cmp	r3, #32
 8004346:	d060      	beq.n	800440a <HAL_TIM_ConfigClockSource+0x15e>
 8004348:	2b20      	cmp	r3, #32
 800434a:	d867      	bhi.n	800441c <HAL_TIM_ConfigClockSource+0x170>
 800434c:	2b00      	cmp	r3, #0
 800434e:	d05c      	beq.n	800440a <HAL_TIM_ConfigClockSource+0x15e>
 8004350:	2b10      	cmp	r3, #16
 8004352:	d05a      	beq.n	800440a <HAL_TIM_ConfigClockSource+0x15e>
 8004354:	e062      	b.n	800441c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6818      	ldr	r0, [r3, #0]
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	6899      	ldr	r1, [r3, #8]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685a      	ldr	r2, [r3, #4]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	f000 fd8b 	bl	8004e80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004378:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68ba      	ldr	r2, [r7, #8]
 8004380:	609a      	str	r2, [r3, #8]
      break;
 8004382:	e04f      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6818      	ldr	r0, [r3, #0]
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	6899      	ldr	r1, [r3, #8]
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	f000 fd74 	bl	8004e80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	689a      	ldr	r2, [r3, #8]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043a6:	609a      	str	r2, [r3, #8]
      break;
 80043a8:	e03c      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6818      	ldr	r0, [r3, #0]
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	6859      	ldr	r1, [r3, #4]
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	461a      	mov	r2, r3
 80043b8:	f000 fc32 	bl	8004c20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2150      	movs	r1, #80	; 0x50
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 fd41 	bl	8004e4a <TIM_ITRx_SetConfig>
      break;
 80043c8:	e02c      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6818      	ldr	r0, [r3, #0]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	6859      	ldr	r1, [r3, #4]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	461a      	mov	r2, r3
 80043d8:	f000 fc8e 	bl	8004cf8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2160      	movs	r1, #96	; 0x60
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 fd31 	bl	8004e4a <TIM_ITRx_SetConfig>
      break;
 80043e8:	e01c      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6818      	ldr	r0, [r3, #0]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	6859      	ldr	r1, [r3, #4]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	461a      	mov	r2, r3
 80043f8:	f000 fc12 	bl	8004c20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2140      	movs	r1, #64	; 0x40
 8004402:	4618      	mov	r0, r3
 8004404:	f000 fd21 	bl	8004e4a <TIM_ITRx_SetConfig>
      break;
 8004408:	e00c      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4619      	mov	r1, r3
 8004414:	4610      	mov	r0, r2
 8004416:	f000 fd18 	bl	8004e4a <TIM_ITRx_SetConfig>
      break;
 800441a:	e003      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	73fb      	strb	r3, [r7, #15]
      break;
 8004420:	e000      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004422:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004434:	7bfb      	ldrb	r3, [r7, #15]
}
 8004436:	4618      	mov	r0, r3
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
	...

08004440 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800444a:	2300      	movs	r3, #0
 800444c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	2b0c      	cmp	r3, #12
 8004452:	d831      	bhi.n	80044b8 <HAL_TIM_ReadCapturedValue+0x78>
 8004454:	a201      	add	r2, pc, #4	; (adr r2, 800445c <HAL_TIM_ReadCapturedValue+0x1c>)
 8004456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800445a:	bf00      	nop
 800445c:	08004491 	.word	0x08004491
 8004460:	080044b9 	.word	0x080044b9
 8004464:	080044b9 	.word	0x080044b9
 8004468:	080044b9 	.word	0x080044b9
 800446c:	0800449b 	.word	0x0800449b
 8004470:	080044b9 	.word	0x080044b9
 8004474:	080044b9 	.word	0x080044b9
 8004478:	080044b9 	.word	0x080044b9
 800447c:	080044a5 	.word	0x080044a5
 8004480:	080044b9 	.word	0x080044b9
 8004484:	080044b9 	.word	0x080044b9
 8004488:	080044b9 	.word	0x080044b9
 800448c:	080044af 	.word	0x080044af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004496:	60fb      	str	r3, [r7, #12]

      break;
 8004498:	e00f      	b.n	80044ba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a0:	60fb      	str	r3, [r7, #12]

      break;
 80044a2:	e00a      	b.n	80044ba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044aa:	60fb      	str	r3, [r7, #12]

      break;
 80044ac:	e005      	b.n	80044ba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b4:	60fb      	str	r3, [r7, #12]

      break;
 80044b6:	e000      	b.n	80044ba <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80044b8:	bf00      	nop
  }

  return tmpreg;
 80044ba:	68fb      	ldr	r3, [r7, #12]
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3714      	adds	r7, #20
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044e4:	bf00      	nop
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a32      	ldr	r2, [pc, #200]	; (8004608 <TIM_Base_SetConfig+0xdc>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d007      	beq.n	8004554 <TIM_Base_SetConfig+0x28>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800454a:	d003      	beq.n	8004554 <TIM_Base_SetConfig+0x28>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a2f      	ldr	r2, [pc, #188]	; (800460c <TIM_Base_SetConfig+0xe0>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d108      	bne.n	8004566 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800455a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	4313      	orrs	r3, r2
 8004564:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a27      	ldr	r2, [pc, #156]	; (8004608 <TIM_Base_SetConfig+0xdc>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d013      	beq.n	8004596 <TIM_Base_SetConfig+0x6a>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004574:	d00f      	beq.n	8004596 <TIM_Base_SetConfig+0x6a>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a24      	ldr	r2, [pc, #144]	; (800460c <TIM_Base_SetConfig+0xe0>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d00b      	beq.n	8004596 <TIM_Base_SetConfig+0x6a>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a23      	ldr	r2, [pc, #140]	; (8004610 <TIM_Base_SetConfig+0xe4>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d007      	beq.n	8004596 <TIM_Base_SetConfig+0x6a>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a22      	ldr	r2, [pc, #136]	; (8004614 <TIM_Base_SetConfig+0xe8>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d003      	beq.n	8004596 <TIM_Base_SetConfig+0x6a>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a21      	ldr	r2, [pc, #132]	; (8004618 <TIM_Base_SetConfig+0xec>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d108      	bne.n	80045a8 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800459c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	689a      	ldr	r2, [r3, #8]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a0e      	ldr	r2, [pc, #56]	; (8004608 <TIM_Base_SetConfig+0xdc>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d00b      	beq.n	80045ec <TIM_Base_SetConfig+0xc0>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a0e      	ldr	r2, [pc, #56]	; (8004610 <TIM_Base_SetConfig+0xe4>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d007      	beq.n	80045ec <TIM_Base_SetConfig+0xc0>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4a0d      	ldr	r2, [pc, #52]	; (8004614 <TIM_Base_SetConfig+0xe8>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d003      	beq.n	80045ec <TIM_Base_SetConfig+0xc0>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a0c      	ldr	r2, [pc, #48]	; (8004618 <TIM_Base_SetConfig+0xec>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d103      	bne.n	80045f4 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	691a      	ldr	r2, [r3, #16]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	615a      	str	r2, [r3, #20]
}
 80045fa:	bf00      	nop
 80045fc:	3714      	adds	r7, #20
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	40012c00 	.word	0x40012c00
 800460c:	40000400 	.word	0x40000400
 8004610:	40014000 	.word	0x40014000
 8004614:	40014400 	.word	0x40014400
 8004618:	40014800 	.word	0x40014800

0800461c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800461c:	b480      	push	{r7}
 800461e:	b087      	sub	sp, #28
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a1b      	ldr	r3, [r3, #32]
 800462a:	f023 0201 	bic.w	r2, r3, #1
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800464a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800464e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f023 0303 	bic.w	r3, r3, #3
 8004656:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	4313      	orrs	r3, r2
 8004660:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f023 0302 	bic.w	r3, r3, #2
 8004668:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	4313      	orrs	r3, r2
 8004672:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a28      	ldr	r2, [pc, #160]	; (8004718 <TIM_OC1_SetConfig+0xfc>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d00b      	beq.n	8004694 <TIM_OC1_SetConfig+0x78>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a27      	ldr	r2, [pc, #156]	; (800471c <TIM_OC1_SetConfig+0x100>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d007      	beq.n	8004694 <TIM_OC1_SetConfig+0x78>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a26      	ldr	r2, [pc, #152]	; (8004720 <TIM_OC1_SetConfig+0x104>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d003      	beq.n	8004694 <TIM_OC1_SetConfig+0x78>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a25      	ldr	r2, [pc, #148]	; (8004724 <TIM_OC1_SetConfig+0x108>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d10c      	bne.n	80046ae <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	f023 0308 	bic.w	r3, r3, #8
 800469a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	f023 0304 	bic.w	r3, r3, #4
 80046ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a19      	ldr	r2, [pc, #100]	; (8004718 <TIM_OC1_SetConfig+0xfc>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d00b      	beq.n	80046ce <TIM_OC1_SetConfig+0xb2>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a18      	ldr	r2, [pc, #96]	; (800471c <TIM_OC1_SetConfig+0x100>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d007      	beq.n	80046ce <TIM_OC1_SetConfig+0xb2>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a17      	ldr	r2, [pc, #92]	; (8004720 <TIM_OC1_SetConfig+0x104>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d003      	beq.n	80046ce <TIM_OC1_SetConfig+0xb2>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a16      	ldr	r2, [pc, #88]	; (8004724 <TIM_OC1_SetConfig+0x108>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d111      	bne.n	80046f2 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	621a      	str	r2, [r3, #32]
}
 800470c:	bf00      	nop
 800470e:	371c      	adds	r7, #28
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr
 8004718:	40012c00 	.word	0x40012c00
 800471c:	40014000 	.word	0x40014000
 8004720:	40014400 	.word	0x40014400
 8004724:	40014800 	.word	0x40014800

08004728 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004728:	b480      	push	{r7}
 800472a:	b087      	sub	sp, #28
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a1b      	ldr	r3, [r3, #32]
 8004736:	f023 0210 	bic.w	r2, r3, #16
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004756:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800475a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004762:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	021b      	lsls	r3, r3, #8
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	4313      	orrs	r3, r2
 800476e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	f023 0320 	bic.w	r3, r3, #32
 8004776:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	011b      	lsls	r3, r3, #4
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	4313      	orrs	r3, r2
 8004782:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a24      	ldr	r2, [pc, #144]	; (8004818 <TIM_OC2_SetConfig+0xf0>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d10d      	bne.n	80047a8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004792:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	011b      	lsls	r3, r3, #4
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	4313      	orrs	r3, r2
 800479e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a1b      	ldr	r2, [pc, #108]	; (8004818 <TIM_OC2_SetConfig+0xf0>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d00b      	beq.n	80047c8 <TIM_OC2_SetConfig+0xa0>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a1a      	ldr	r2, [pc, #104]	; (800481c <TIM_OC2_SetConfig+0xf4>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d007      	beq.n	80047c8 <TIM_OC2_SetConfig+0xa0>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a19      	ldr	r2, [pc, #100]	; (8004820 <TIM_OC2_SetConfig+0xf8>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d003      	beq.n	80047c8 <TIM_OC2_SetConfig+0xa0>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a18      	ldr	r2, [pc, #96]	; (8004824 <TIM_OC2_SetConfig+0xfc>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d113      	bne.n	80047f0 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047ce:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047d6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	697a      	ldr	r2, [r7, #20]
 8004808:	621a      	str	r2, [r3, #32]
}
 800480a:	bf00      	nop
 800480c:	371c      	adds	r7, #28
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	40012c00 	.word	0x40012c00
 800481c:	40014000 	.word	0x40014000
 8004820:	40014400 	.word	0x40014400
 8004824:	40014800 	.word	0x40014800

08004828 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004828:	b480      	push	{r7}
 800482a:	b087      	sub	sp, #28
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800485a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f023 0303 	bic.w	r3, r3, #3
 8004862:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	4313      	orrs	r3, r2
 800486c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004874:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	021b      	lsls	r3, r3, #8
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	4313      	orrs	r3, r2
 8004880:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a23      	ldr	r2, [pc, #140]	; (8004914 <TIM_OC3_SetConfig+0xec>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d10d      	bne.n	80048a6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004890:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	021b      	lsls	r3, r3, #8
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	4313      	orrs	r3, r2
 800489c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048a4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a1a      	ldr	r2, [pc, #104]	; (8004914 <TIM_OC3_SetConfig+0xec>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d00b      	beq.n	80048c6 <TIM_OC3_SetConfig+0x9e>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a19      	ldr	r2, [pc, #100]	; (8004918 <TIM_OC3_SetConfig+0xf0>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d007      	beq.n	80048c6 <TIM_OC3_SetConfig+0x9e>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a18      	ldr	r2, [pc, #96]	; (800491c <TIM_OC3_SetConfig+0xf4>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d003      	beq.n	80048c6 <TIM_OC3_SetConfig+0x9e>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a17      	ldr	r2, [pc, #92]	; (8004920 <TIM_OC3_SetConfig+0xf8>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d113      	bne.n	80048ee <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	011b      	lsls	r3, r3, #4
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	4313      	orrs	r3, r2
 80048e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	011b      	lsls	r3, r3, #4
 80048e8:	693a      	ldr	r2, [r7, #16]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	693a      	ldr	r2, [r7, #16]
 80048f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	685a      	ldr	r2, [r3, #4]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	697a      	ldr	r2, [r7, #20]
 8004906:	621a      	str	r2, [r3, #32]
}
 8004908:	bf00      	nop
 800490a:	371c      	adds	r7, #28
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr
 8004914:	40012c00 	.word	0x40012c00
 8004918:	40014000 	.word	0x40014000
 800491c:	40014400 	.word	0x40014400
 8004920:	40014800 	.word	0x40014800

08004924 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004924:	b480      	push	{r7}
 8004926:	b087      	sub	sp, #28
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a1b      	ldr	r3, [r3, #32]
 8004932:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	69db      	ldr	r3, [r3, #28]
 800494a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004952:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800495e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	021b      	lsls	r3, r3, #8
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	4313      	orrs	r3, r2
 800496a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004972:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	031b      	lsls	r3, r3, #12
 800497a:	693a      	ldr	r2, [r7, #16]
 800497c:	4313      	orrs	r3, r2
 800497e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a16      	ldr	r2, [pc, #88]	; (80049dc <TIM_OC4_SetConfig+0xb8>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d00b      	beq.n	80049a0 <TIM_OC4_SetConfig+0x7c>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a15      	ldr	r2, [pc, #84]	; (80049e0 <TIM_OC4_SetConfig+0xbc>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d007      	beq.n	80049a0 <TIM_OC4_SetConfig+0x7c>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a14      	ldr	r2, [pc, #80]	; (80049e4 <TIM_OC4_SetConfig+0xc0>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d003      	beq.n	80049a0 <TIM_OC4_SetConfig+0x7c>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a13      	ldr	r2, [pc, #76]	; (80049e8 <TIM_OC4_SetConfig+0xc4>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d109      	bne.n	80049b4 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	695b      	ldr	r3, [r3, #20]
 80049ac:	019b      	lsls	r3, r3, #6
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	685a      	ldr	r2, [r3, #4]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	621a      	str	r2, [r3, #32]
}
 80049ce:	bf00      	nop
 80049d0:	371c      	adds	r7, #28
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	40012c00 	.word	0x40012c00
 80049e0:	40014000 	.word	0x40014000
 80049e4:	40014400 	.word	0x40014400
 80049e8:	40014800 	.word	0x40014800

080049ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b087      	sub	sp, #28
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a1b      	ldr	r3, [r3, #32]
 80049fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004a30:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	041b      	lsls	r3, r3, #16
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a15      	ldr	r2, [pc, #84]	; (8004a98 <TIM_OC5_SetConfig+0xac>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d00b      	beq.n	8004a5e <TIM_OC5_SetConfig+0x72>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a14      	ldr	r2, [pc, #80]	; (8004a9c <TIM_OC5_SetConfig+0xb0>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d007      	beq.n	8004a5e <TIM_OC5_SetConfig+0x72>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a13      	ldr	r2, [pc, #76]	; (8004aa0 <TIM_OC5_SetConfig+0xb4>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d003      	beq.n	8004a5e <TIM_OC5_SetConfig+0x72>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a12      	ldr	r2, [pc, #72]	; (8004aa4 <TIM_OC5_SetConfig+0xb8>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d109      	bne.n	8004a72 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a64:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	021b      	lsls	r3, r3, #8
 8004a6c:	697a      	ldr	r2, [r7, #20]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	685a      	ldr	r2, [r3, #4]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	621a      	str	r2, [r3, #32]
}
 8004a8c:	bf00      	nop
 8004a8e:	371c      	adds	r7, #28
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr
 8004a98:	40012c00 	.word	0x40012c00
 8004a9c:	40014000 	.word	0x40014000
 8004aa0:	40014400 	.word	0x40014400
 8004aa4:	40014800 	.word	0x40014800

08004aa8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b087      	sub	sp, #28
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ad6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ada:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	021b      	lsls	r3, r3, #8
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004aee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	051b      	lsls	r3, r3, #20
 8004af6:	693a      	ldr	r2, [r7, #16]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a16      	ldr	r2, [pc, #88]	; (8004b58 <TIM_OC6_SetConfig+0xb0>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d00b      	beq.n	8004b1c <TIM_OC6_SetConfig+0x74>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a15      	ldr	r2, [pc, #84]	; (8004b5c <TIM_OC6_SetConfig+0xb4>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d007      	beq.n	8004b1c <TIM_OC6_SetConfig+0x74>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a14      	ldr	r2, [pc, #80]	; (8004b60 <TIM_OC6_SetConfig+0xb8>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d003      	beq.n	8004b1c <TIM_OC6_SetConfig+0x74>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a13      	ldr	r2, [pc, #76]	; (8004b64 <TIM_OC6_SetConfig+0xbc>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d109      	bne.n	8004b30 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b22:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	695b      	ldr	r3, [r3, #20]
 8004b28:	029b      	lsls	r3, r3, #10
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	697a      	ldr	r2, [r7, #20]
 8004b34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	685a      	ldr	r2, [r3, #4]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	621a      	str	r2, [r3, #32]
}
 8004b4a:	bf00      	nop
 8004b4c:	371c      	adds	r7, #28
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	40012c00 	.word	0x40012c00
 8004b5c:	40014000 	.word	0x40014000
 8004b60:	40014400 	.word	0x40014400
 8004b64:	40014800 	.word	0x40014800

08004b68 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b087      	sub	sp, #28
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]
 8004b74:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	f023 0201 	bic.w	r2, r3, #1
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6a1b      	ldr	r3, [r3, #32]
 8004b8c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	4a20      	ldr	r2, [pc, #128]	; (8004c14 <TIM_TI1_SetConfig+0xac>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d00b      	beq.n	8004bae <TIM_TI1_SetConfig+0x46>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b9c:	d007      	beq.n	8004bae <TIM_TI1_SetConfig+0x46>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	4a1d      	ldr	r2, [pc, #116]	; (8004c18 <TIM_TI1_SetConfig+0xb0>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d003      	beq.n	8004bae <TIM_TI1_SetConfig+0x46>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	4a1c      	ldr	r2, [pc, #112]	; (8004c1c <TIM_TI1_SetConfig+0xb4>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d101      	bne.n	8004bb2 <TIM_TI1_SetConfig+0x4a>
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e000      	b.n	8004bb4 <TIM_TI1_SetConfig+0x4c>
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d008      	beq.n	8004bca <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	f023 0303 	bic.w	r3, r3, #3
 8004bbe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	617b      	str	r3, [r7, #20]
 8004bc8:	e003      	b.n	8004bd2 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	f043 0301 	orr.w	r3, r3, #1
 8004bd0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bd8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	011b      	lsls	r3, r3, #4
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	f023 030a 	bic.w	r3, r3, #10
 8004bec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	f003 030a 	and.w	r3, r3, #10
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	697a      	ldr	r2, [r7, #20]
 8004bfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	621a      	str	r2, [r3, #32]
}
 8004c06:	bf00      	nop
 8004c08:	371c      	adds	r7, #28
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	40012c00 	.word	0x40012c00
 8004c18:	40000400 	.word	0x40000400
 8004c1c:	40014000 	.word	0x40014000

08004c20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b087      	sub	sp, #28
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6a1b      	ldr	r3, [r3, #32]
 8004c30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	f023 0201 	bic.w	r2, r3, #1
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	011b      	lsls	r3, r3, #4
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	f023 030a 	bic.w	r3, r3, #10
 8004c5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	621a      	str	r2, [r3, #32]
}
 8004c72:	bf00      	nop
 8004c74:	371c      	adds	r7, #28
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr

08004c7e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b087      	sub	sp, #28
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	60f8      	str	r0, [r7, #12]
 8004c86:	60b9      	str	r1, [r7, #8]
 8004c88:	607a      	str	r2, [r7, #4]
 8004c8a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6a1b      	ldr	r3, [r3, #32]
 8004c90:	f023 0210 	bic.w	r2, r3, #16
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004caa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	021b      	lsls	r3, r3, #8
 8004cb0:	697a      	ldr	r2, [r7, #20]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004cbc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	031b      	lsls	r3, r3, #12
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	697a      	ldr	r2, [r7, #20]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004cd0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	011b      	lsls	r3, r3, #4
 8004cd6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	621a      	str	r2, [r3, #32]
}
 8004cec:	bf00      	nop
 8004cee:	371c      	adds	r7, #28
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b087      	sub	sp, #28
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6a1b      	ldr	r3, [r3, #32]
 8004d08:	f023 0210 	bic.w	r2, r3, #16
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	699b      	ldr	r3, [r3, #24]
 8004d14:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d22:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	031b      	lsls	r3, r3, #12
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d34:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	011b      	lsls	r3, r3, #4
 8004d3a:	693a      	ldr	r2, [r7, #16]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	697a      	ldr	r2, [r7, #20]
 8004d44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	621a      	str	r2, [r3, #32]
}
 8004d4c:	bf00      	nop
 8004d4e:	371c      	adds	r7, #28
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b087      	sub	sp, #28
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
 8004d64:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	69db      	ldr	r3, [r3, #28]
 8004d76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6a1b      	ldr	r3, [r3, #32]
 8004d7c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f023 0303 	bic.w	r3, r3, #3
 8004d84:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004d86:	697a      	ldr	r2, [r7, #20]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d94:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	011b      	lsls	r3, r3, #4
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	697a      	ldr	r2, [r7, #20]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004da8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	021b      	lsls	r3, r3, #8
 8004dae:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	621a      	str	r2, [r3, #32]
}
 8004dc4:	bf00      	nop
 8004dc6:	371c      	adds	r7, #28
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b087      	sub	sp, #28
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	607a      	str	r2, [r7, #4]
 8004ddc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	69db      	ldr	r3, [r3, #28]
 8004dee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6a1b      	ldr	r3, [r3, #32]
 8004df4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dfc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	021b      	lsls	r3, r3, #8
 8004e02:	697a      	ldr	r2, [r7, #20]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e0e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	031b      	lsls	r3, r3, #12
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004e22:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	031b      	lsls	r3, r3, #12
 8004e28:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	697a      	ldr	r2, [r7, #20]
 8004e36:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	621a      	str	r2, [r3, #32]
}
 8004e3e:	bf00      	nop
 8004e40:	371c      	adds	r7, #28
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr

08004e4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	b085      	sub	sp, #20
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
 8004e52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e62:	683a      	ldr	r2, [r7, #0]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	f043 0307 	orr.w	r3, r3, #7
 8004e6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	609a      	str	r2, [r3, #8]
}
 8004e74:	bf00      	nop
 8004e76:	3714      	adds	r7, #20
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b087      	sub	sp, #28
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
 8004e8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	021a      	lsls	r2, r3, #8
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	609a      	str	r2, [r3, #8]
}
 8004eb4:	bf00      	nop
 8004eb6:	371c      	adds	r7, #28
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b087      	sub	sp, #28
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	f003 031f 	and.w	r3, r3, #31
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6a1a      	ldr	r2, [r3, #32]
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	43db      	mvns	r3, r3
 8004ee2:	401a      	ands	r2, r3
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6a1a      	ldr	r2, [r3, #32]
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	f003 031f 	and.w	r3, r3, #31
 8004ef2:	6879      	ldr	r1, [r7, #4]
 8004ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ef8:	431a      	orrs	r2, r3
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	621a      	str	r2, [r3, #32]
}
 8004efe:	bf00      	nop
 8004f00:	371c      	adds	r7, #28
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
	...

08004f0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d101      	bne.n	8004f24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f20:	2302      	movs	r3, #2
 8004f22:	e054      	b.n	8004fce <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2202      	movs	r2, #2
 8004f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a24      	ldr	r2, [pc, #144]	; (8004fdc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d108      	bne.n	8004f60 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004f54:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a17      	ldr	r2, [pc, #92]	; (8004fdc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d00e      	beq.n	8004fa2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f8c:	d009      	beq.n	8004fa2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a13      	ldr	r2, [pc, #76]	; (8004fe0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d004      	beq.n	8004fa2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a11      	ldr	r2, [pc, #68]	; (8004fe4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d10c      	bne.n	8004fbc <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fa8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	68ba      	ldr	r2, [r7, #8]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68ba      	ldr	r2, [r7, #8]
 8004fba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3714      	adds	r7, #20
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	40012c00 	.word	0x40012c00
 8004fe0:	40000400 	.word	0x40000400
 8004fe4:	40014000 	.word	0x40014000

08004fe8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d101      	bne.n	8005004 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005000:	2302      	movs	r3, #2
 8005002:	e060      	b.n	80050c6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	4313      	orrs	r3, r2
 8005018:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	4313      	orrs	r3, r2
 8005026:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	4313      	orrs	r3, r2
 8005034:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4313      	orrs	r3, r2
 8005042:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	4313      	orrs	r3, r2
 8005050:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	695b      	ldr	r3, [r3, #20]
 800505c:	4313      	orrs	r3, r2
 800505e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800506a:	4313      	orrs	r3, r2
 800506c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	699b      	ldr	r3, [r3, #24]
 8005078:	041b      	lsls	r3, r3, #16
 800507a:	4313      	orrs	r3, r2
 800507c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a14      	ldr	r2, [pc, #80]	; (80050d4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d115      	bne.n	80050b4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005092:	051b      	lsls	r3, r3, #20
 8005094:	4313      	orrs	r3, r2
 8005096:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	69db      	ldr	r3, [r3, #28]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	6a1b      	ldr	r3, [r3, #32]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3714      	adds	r7, #20
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	40012c00 	.word	0x40012c00

080050d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050f4:	bf00      	nop
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d101      	bne.n	8005126 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e040      	b.n	80051a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800512a:	2b00      	cmp	r3, #0
 800512c:	d106      	bne.n	800513c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f7fb fc34 	bl	80009a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2224      	movs	r2, #36	; 0x24
 8005140:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f022 0201 	bic.w	r2, r2, #1
 8005150:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 f82c 	bl	80051b0 <UART_SetConfig>
 8005158:	4603      	mov	r3, r0
 800515a:	2b01      	cmp	r3, #1
 800515c:	d101      	bne.n	8005162 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e022      	b.n	80051a8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005166:	2b00      	cmp	r3, #0
 8005168:	d002      	beq.n	8005170 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 f956 	bl	800541c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	685a      	ldr	r2, [r3, #4]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800517e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	689a      	ldr	r2, [r3, #8]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800518e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f042 0201 	orr.w	r2, r2, #1
 800519e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 f9dd 	bl	8005560 <UART_CheckIdleState>
 80051a6:	4603      	mov	r3, r0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3708      	adds	r7, #8
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b088      	sub	sp, #32
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051b8:	2300      	movs	r3, #0
 80051ba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	689a      	ldr	r2, [r3, #8]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	431a      	orrs	r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	431a      	orrs	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	69db      	ldr	r3, [r3, #28]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	4b8a      	ldr	r3, [pc, #552]	; (8005404 <UART_SetConfig+0x254>)
 80051dc:	4013      	ands	r3, r2
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	6812      	ldr	r2, [r2, #0]
 80051e2:	6979      	ldr	r1, [r7, #20]
 80051e4:	430b      	orrs	r3, r1
 80051e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	68da      	ldr	r2, [r3, #12]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	430a      	orrs	r2, r1
 80051fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a1b      	ldr	r3, [r3, #32]
 8005208:	697a      	ldr	r2, [r7, #20]
 800520a:	4313      	orrs	r3, r2
 800520c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	697a      	ldr	r2, [r7, #20]
 800521e:	430a      	orrs	r2, r1
 8005220:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a78      	ldr	r2, [pc, #480]	; (8005408 <UART_SetConfig+0x258>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d120      	bne.n	800526e <UART_SetConfig+0xbe>
 800522c:	4b77      	ldr	r3, [pc, #476]	; (800540c <UART_SetConfig+0x25c>)
 800522e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005230:	f003 0303 	and.w	r3, r3, #3
 8005234:	2b03      	cmp	r3, #3
 8005236:	d817      	bhi.n	8005268 <UART_SetConfig+0xb8>
 8005238:	a201      	add	r2, pc, #4	; (adr r2, 8005240 <UART_SetConfig+0x90>)
 800523a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800523e:	bf00      	nop
 8005240:	08005251 	.word	0x08005251
 8005244:	0800525d 	.word	0x0800525d
 8005248:	08005263 	.word	0x08005263
 800524c:	08005257 	.word	0x08005257
 8005250:	2300      	movs	r3, #0
 8005252:	77fb      	strb	r3, [r7, #31]
 8005254:	e01d      	b.n	8005292 <UART_SetConfig+0xe2>
 8005256:	2302      	movs	r3, #2
 8005258:	77fb      	strb	r3, [r7, #31]
 800525a:	e01a      	b.n	8005292 <UART_SetConfig+0xe2>
 800525c:	2304      	movs	r3, #4
 800525e:	77fb      	strb	r3, [r7, #31]
 8005260:	e017      	b.n	8005292 <UART_SetConfig+0xe2>
 8005262:	2308      	movs	r3, #8
 8005264:	77fb      	strb	r3, [r7, #31]
 8005266:	e014      	b.n	8005292 <UART_SetConfig+0xe2>
 8005268:	2310      	movs	r3, #16
 800526a:	77fb      	strb	r3, [r7, #31]
 800526c:	e011      	b.n	8005292 <UART_SetConfig+0xe2>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a67      	ldr	r2, [pc, #412]	; (8005410 <UART_SetConfig+0x260>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d102      	bne.n	800527e <UART_SetConfig+0xce>
 8005278:	2300      	movs	r3, #0
 800527a:	77fb      	strb	r3, [r7, #31]
 800527c:	e009      	b.n	8005292 <UART_SetConfig+0xe2>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a64      	ldr	r2, [pc, #400]	; (8005414 <UART_SetConfig+0x264>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d102      	bne.n	800528e <UART_SetConfig+0xde>
 8005288:	2300      	movs	r3, #0
 800528a:	77fb      	strb	r3, [r7, #31]
 800528c:	e001      	b.n	8005292 <UART_SetConfig+0xe2>
 800528e:	2310      	movs	r3, #16
 8005290:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	69db      	ldr	r3, [r3, #28]
 8005296:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800529a:	d15b      	bne.n	8005354 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 800529c:	7ffb      	ldrb	r3, [r7, #31]
 800529e:	2b08      	cmp	r3, #8
 80052a0:	d827      	bhi.n	80052f2 <UART_SetConfig+0x142>
 80052a2:	a201      	add	r2, pc, #4	; (adr r2, 80052a8 <UART_SetConfig+0xf8>)
 80052a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a8:	080052cd 	.word	0x080052cd
 80052ac:	080052d5 	.word	0x080052d5
 80052b0:	080052dd 	.word	0x080052dd
 80052b4:	080052f3 	.word	0x080052f3
 80052b8:	080052e3 	.word	0x080052e3
 80052bc:	080052f3 	.word	0x080052f3
 80052c0:	080052f3 	.word	0x080052f3
 80052c4:	080052f3 	.word	0x080052f3
 80052c8:	080052eb 	.word	0x080052eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052cc:	f7fe fa00 	bl	80036d0 <HAL_RCC_GetPCLK1Freq>
 80052d0:	61b8      	str	r0, [r7, #24]
        break;
 80052d2:	e013      	b.n	80052fc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052d4:	f7fe fa1e 	bl	8003714 <HAL_RCC_GetPCLK2Freq>
 80052d8:	61b8      	str	r0, [r7, #24]
        break;
 80052da:	e00f      	b.n	80052fc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052dc:	4b4e      	ldr	r3, [pc, #312]	; (8005418 <UART_SetConfig+0x268>)
 80052de:	61bb      	str	r3, [r7, #24]
        break;
 80052e0:	e00c      	b.n	80052fc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052e2:	f7fe f97f 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 80052e6:	61b8      	str	r0, [r7, #24]
        break;
 80052e8:	e008      	b.n	80052fc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052ee:	61bb      	str	r3, [r7, #24]
        break;
 80052f0:	e004      	b.n	80052fc <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80052f2:	2300      	movs	r3, #0
 80052f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	77bb      	strb	r3, [r7, #30]
        break;
 80052fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d074      	beq.n	80053ec <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	005a      	lsls	r2, r3, #1
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	085b      	lsrs	r3, r3, #1
 800530c:	441a      	add	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	fbb2 f3f3 	udiv	r3, r2, r3
 8005316:	b29b      	uxth	r3, r3
 8005318:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	2b0f      	cmp	r3, #15
 800531e:	d916      	bls.n	800534e <UART_SetConfig+0x19e>
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005326:	d212      	bcs.n	800534e <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	b29b      	uxth	r3, r3
 800532c:	f023 030f 	bic.w	r3, r3, #15
 8005330:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	085b      	lsrs	r3, r3, #1
 8005336:	b29b      	uxth	r3, r3
 8005338:	f003 0307 	and.w	r3, r3, #7
 800533c:	b29a      	uxth	r2, r3
 800533e:	89fb      	ldrh	r3, [r7, #14]
 8005340:	4313      	orrs	r3, r2
 8005342:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	89fa      	ldrh	r2, [r7, #14]
 800534a:	60da      	str	r2, [r3, #12]
 800534c:	e04e      	b.n	80053ec <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	77bb      	strb	r3, [r7, #30]
 8005352:	e04b      	b.n	80053ec <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005354:	7ffb      	ldrb	r3, [r7, #31]
 8005356:	2b08      	cmp	r3, #8
 8005358:	d827      	bhi.n	80053aa <UART_SetConfig+0x1fa>
 800535a:	a201      	add	r2, pc, #4	; (adr r2, 8005360 <UART_SetConfig+0x1b0>)
 800535c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005360:	08005385 	.word	0x08005385
 8005364:	0800538d 	.word	0x0800538d
 8005368:	08005395 	.word	0x08005395
 800536c:	080053ab 	.word	0x080053ab
 8005370:	0800539b 	.word	0x0800539b
 8005374:	080053ab 	.word	0x080053ab
 8005378:	080053ab 	.word	0x080053ab
 800537c:	080053ab 	.word	0x080053ab
 8005380:	080053a3 	.word	0x080053a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005384:	f7fe f9a4 	bl	80036d0 <HAL_RCC_GetPCLK1Freq>
 8005388:	61b8      	str	r0, [r7, #24]
        break;
 800538a:	e013      	b.n	80053b4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800538c:	f7fe f9c2 	bl	8003714 <HAL_RCC_GetPCLK2Freq>
 8005390:	61b8      	str	r0, [r7, #24]
        break;
 8005392:	e00f      	b.n	80053b4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005394:	4b20      	ldr	r3, [pc, #128]	; (8005418 <UART_SetConfig+0x268>)
 8005396:	61bb      	str	r3, [r7, #24]
        break;
 8005398:	e00c      	b.n	80053b4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800539a:	f7fe f923 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 800539e:	61b8      	str	r0, [r7, #24]
        break;
 80053a0:	e008      	b.n	80053b4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053a6:	61bb      	str	r3, [r7, #24]
        break;
 80053a8:	e004      	b.n	80053b4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80053aa:	2300      	movs	r3, #0
 80053ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	77bb      	strb	r3, [r7, #30]
        break;
 80053b2:	bf00      	nop
    }

    if (pclk != 0U)
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d018      	beq.n	80053ec <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	085a      	lsrs	r2, r3, #1
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	441a      	add	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	2b0f      	cmp	r3, #15
 80053d4:	d908      	bls.n	80053e8 <UART_SetConfig+0x238>
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053dc:	d204      	bcs.n	80053e8 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	693a      	ldr	r2, [r7, #16]
 80053e4:	60da      	str	r2, [r3, #12]
 80053e6:	e001      	b.n	80053ec <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80053f8:	7fbb      	ldrb	r3, [r7, #30]
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3720      	adds	r7, #32
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	efff69f3 	.word	0xefff69f3
 8005408:	40013800 	.word	0x40013800
 800540c:	40021000 	.word	0x40021000
 8005410:	40004400 	.word	0x40004400
 8005414:	40004800 	.word	0x40004800
 8005418:	007a1200 	.word	0x007a1200

0800541c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005428:	f003 0301 	and.w	r3, r3, #1
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00a      	beq.n	8005446 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	430a      	orrs	r2, r1
 8005444:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544a:	f003 0302 	and.w	r3, r3, #2
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00a      	beq.n	8005468 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	430a      	orrs	r2, r1
 8005466:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546c:	f003 0304 	and.w	r3, r3, #4
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00a      	beq.n	800548a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	430a      	orrs	r2, r1
 8005488:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548e:	f003 0308 	and.w	r3, r3, #8
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00a      	beq.n	80054ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	430a      	orrs	r2, r1
 80054aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b0:	f003 0310 	and.w	r3, r3, #16
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00a      	beq.n	80054ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	430a      	orrs	r2, r1
 80054cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d2:	f003 0320 	and.w	r3, r3, #32
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00a      	beq.n	80054f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	430a      	orrs	r2, r1
 80054ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d01a      	beq.n	8005532 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	430a      	orrs	r2, r1
 8005510:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005516:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800551a:	d10a      	bne.n	8005532 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	430a      	orrs	r2, r1
 8005530:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00a      	beq.n	8005554 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	430a      	orrs	r2, r1
 8005552:	605a      	str	r2, [r3, #4]
  }
}
 8005554:	bf00      	nop
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b086      	sub	sp, #24
 8005564:	af02      	add	r7, sp, #8
 8005566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005570:	f7fb fb2e 	bl	8000bd0 <HAL_GetTick>
 8005574:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0308 	and.w	r3, r3, #8
 8005580:	2b08      	cmp	r3, #8
 8005582:	d10e      	bne.n	80055a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005584:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005588:	9300      	str	r3, [sp, #0]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f82d 	bl	80055f2 <UART_WaitOnFlagUntilTimeout>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d001      	beq.n	80055a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e023      	b.n	80055ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0304 	and.w	r3, r3, #4
 80055ac:	2b04      	cmp	r3, #4
 80055ae:	d10e      	bne.n	80055ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055b4:	9300      	str	r3, [sp, #0]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f817 	bl	80055f2 <UART_WaitOnFlagUntilTimeout>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d001      	beq.n	80055ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e00d      	b.n	80055ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2220      	movs	r2, #32
 80055d2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2220      	movs	r2, #32
 80055d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3710      	adds	r7, #16
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}

080055f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055f2:	b580      	push	{r7, lr}
 80055f4:	b09c      	sub	sp, #112	; 0x70
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	60f8      	str	r0, [r7, #12]
 80055fa:	60b9      	str	r1, [r7, #8]
 80055fc:	603b      	str	r3, [r7, #0]
 80055fe:	4613      	mov	r3, r2
 8005600:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005602:	e0a5      	b.n	8005750 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005604:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800560a:	f000 80a1 	beq.w	8005750 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800560e:	f7fb fadf 	bl	8000bd0 <HAL_GetTick>
 8005612:	4602      	mov	r2, r0
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800561a:	429a      	cmp	r2, r3
 800561c:	d302      	bcc.n	8005624 <UART_WaitOnFlagUntilTimeout+0x32>
 800561e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005620:	2b00      	cmp	r3, #0
 8005622:	d13e      	bne.n	80056a2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800562c:	e853 3f00 	ldrex	r3, [r3]
 8005630:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005634:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005638:	667b      	str	r3, [r7, #100]	; 0x64
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	461a      	mov	r2, r3
 8005640:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005642:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005644:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005646:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005648:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800564a:	e841 2300 	strex	r3, r2, [r1]
 800564e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005650:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005652:	2b00      	cmp	r3, #0
 8005654:	d1e6      	bne.n	8005624 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	3308      	adds	r3, #8
 800565c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005660:	e853 3f00 	ldrex	r3, [r3]
 8005664:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005668:	f023 0301 	bic.w	r3, r3, #1
 800566c:	663b      	str	r3, [r7, #96]	; 0x60
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	3308      	adds	r3, #8
 8005674:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005676:	64ba      	str	r2, [r7, #72]	; 0x48
 8005678:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800567c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800567e:	e841 2300 	strex	r3, r2, [r1]
 8005682:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1e5      	bne.n	8005656 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2220      	movs	r2, #32
 800568e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2220      	movs	r2, #32
 8005694:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e067      	b.n	8005772 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0304 	and.w	r3, r3, #4
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d04f      	beq.n	8005750 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	69db      	ldr	r3, [r3, #28]
 80056b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056be:	d147      	bne.n	8005750 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056c8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d2:	e853 3f00 	ldrex	r3, [r3]
 80056d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80056de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	461a      	mov	r2, r3
 80056e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056e8:	637b      	str	r3, [r7, #52]	; 0x34
 80056ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056f0:	e841 2300 	strex	r3, r2, [r1]
 80056f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80056f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1e6      	bne.n	80056ca <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	3308      	adds	r3, #8
 8005702:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	e853 3f00 	ldrex	r3, [r3]
 800570a:	613b      	str	r3, [r7, #16]
   return(result);
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	f023 0301 	bic.w	r3, r3, #1
 8005712:	66bb      	str	r3, [r7, #104]	; 0x68
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	3308      	adds	r3, #8
 800571a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800571c:	623a      	str	r2, [r7, #32]
 800571e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005720:	69f9      	ldr	r1, [r7, #28]
 8005722:	6a3a      	ldr	r2, [r7, #32]
 8005724:	e841 2300 	strex	r3, r2, [r1]
 8005728:	61bb      	str	r3, [r7, #24]
   return(result);
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1e5      	bne.n	80056fc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2220      	movs	r2, #32
 8005734:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2220      	movs	r2, #32
 800573a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2220      	movs	r2, #32
 8005740:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800574c:	2303      	movs	r3, #3
 800574e:	e010      	b.n	8005772 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	69da      	ldr	r2, [r3, #28]
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	4013      	ands	r3, r2
 800575a:	68ba      	ldr	r2, [r7, #8]
 800575c:	429a      	cmp	r2, r3
 800575e:	bf0c      	ite	eq
 8005760:	2301      	moveq	r3, #1
 8005762:	2300      	movne	r3, #0
 8005764:	b2db      	uxtb	r3, r3
 8005766:	461a      	mov	r2, r3
 8005768:	79fb      	ldrb	r3, [r7, #7]
 800576a:	429a      	cmp	r2, r3
 800576c:	f43f af4a 	beq.w	8005604 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3770      	adds	r7, #112	; 0x70
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
	...

0800577c <__libc_init_array>:
 800577c:	b570      	push	{r4, r5, r6, lr}
 800577e:	4d0d      	ldr	r5, [pc, #52]	; (80057b4 <__libc_init_array+0x38>)
 8005780:	4c0d      	ldr	r4, [pc, #52]	; (80057b8 <__libc_init_array+0x3c>)
 8005782:	1b64      	subs	r4, r4, r5
 8005784:	10a4      	asrs	r4, r4, #2
 8005786:	2600      	movs	r6, #0
 8005788:	42a6      	cmp	r6, r4
 800578a:	d109      	bne.n	80057a0 <__libc_init_array+0x24>
 800578c:	4d0b      	ldr	r5, [pc, #44]	; (80057bc <__libc_init_array+0x40>)
 800578e:	4c0c      	ldr	r4, [pc, #48]	; (80057c0 <__libc_init_array+0x44>)
 8005790:	f000 f820 	bl	80057d4 <_init>
 8005794:	1b64      	subs	r4, r4, r5
 8005796:	10a4      	asrs	r4, r4, #2
 8005798:	2600      	movs	r6, #0
 800579a:	42a6      	cmp	r6, r4
 800579c:	d105      	bne.n	80057aa <__libc_init_array+0x2e>
 800579e:	bd70      	pop	{r4, r5, r6, pc}
 80057a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80057a4:	4798      	blx	r3
 80057a6:	3601      	adds	r6, #1
 80057a8:	e7ee      	b.n	8005788 <__libc_init_array+0xc>
 80057aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80057ae:	4798      	blx	r3
 80057b0:	3601      	adds	r6, #1
 80057b2:	e7f2      	b.n	800579a <__libc_init_array+0x1e>
 80057b4:	08005824 	.word	0x08005824
 80057b8:	08005824 	.word	0x08005824
 80057bc:	08005824 	.word	0x08005824
 80057c0:	08005828 	.word	0x08005828

080057c4 <memset>:
 80057c4:	4402      	add	r2, r0
 80057c6:	4603      	mov	r3, r0
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d100      	bne.n	80057ce <memset+0xa>
 80057cc:	4770      	bx	lr
 80057ce:	f803 1b01 	strb.w	r1, [r3], #1
 80057d2:	e7f9      	b.n	80057c8 <memset+0x4>

080057d4 <_init>:
 80057d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057d6:	bf00      	nop
 80057d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057da:	bc08      	pop	{r3}
 80057dc:	469e      	mov	lr, r3
 80057de:	4770      	bx	lr

080057e0 <_fini>:
 80057e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057e2:	bf00      	nop
 80057e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057e6:	bc08      	pop	{r3}
 80057e8:	469e      	mov	lr, r3
 80057ea:	4770      	bx	lr
