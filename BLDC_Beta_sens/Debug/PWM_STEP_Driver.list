
PWM_STEP_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  0800c354  0800c354  0001c354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c468  0800c468  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800c468  0800c468  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c468  0800c468  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c468  0800c468  0001c468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c46c  0800c46c  0001c46c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800c470  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          0000086c  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008e4  200008e4  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .comment      00000086  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001908c  00000000  00000000  0002012e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003119  00000000  00000000  000391ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001548  00000000  00000000  0003c2d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000010c5  00000000  00000000  0003d820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020b0e  00000000  00000000  0003e8e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001c78f  00000000  00000000  0005f3f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c85dc  00000000  00000000  0007bb82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005f68  00000000  00000000  00144160  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000046  00000000  00000000  0014a0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c33c 	.word	0x0800c33c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800c33c 	.word	0x0800c33c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <ADC_Select_CH1>:
		              HAL_ADC_ConfigChannel(&hadc3, &sConfig);
}


void ADC_Select_CH1 (void)
	     {
 8000270:	b580      	push	{r7, lr}
 8000272:	b086      	sub	sp, #24
 8000274:	af00      	add	r7, sp, #0
	     	ADC_ChannelConfTypeDef sConfig = {0};
 8000276:	463b      	mov	r3, r7
 8000278:	2200      	movs	r2, #0
 800027a:	601a      	str	r2, [r3, #0]
 800027c:	605a      	str	r2, [r3, #4]
 800027e:	609a      	str	r2, [r3, #8]
 8000280:	60da      	str	r2, [r3, #12]
 8000282:	611a      	str	r2, [r3, #16]
 8000284:	615a      	str	r2, [r3, #20]
	     	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	     	  */
	     	  sConfig.Channel = ADC_CHANNEL_1;
 8000286:	2301      	movs	r3, #1
 8000288:	603b      	str	r3, [r7, #0]
	     	  sConfig.Rank = 1;
 800028a:	2301      	movs	r3, #1
 800028c:	607b      	str	r3, [r7, #4]
	     	  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800028e:	2303      	movs	r3, #3
 8000290:	60bb      	str	r3, [r7, #8]
	     	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8000292:	463b      	mov	r3, r7
 8000294:	4619      	mov	r1, r3
 8000296:	4803      	ldr	r0, [pc, #12]	; (80002a4 <ADC_Select_CH1+0x34>)
 8000298:	f004 f96e 	bl	8004578 <HAL_ADC_ConfigChannel>
	     }
 800029c:	bf00      	nop
 800029e:	3718      	adds	r7, #24
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	20000134 	.word	0x20000134

080002a8 <ADC_Select_CH12>:

void ADC_Select_CH12 (void)
	     {
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b086      	sub	sp, #24
 80002ac:	af00      	add	r7, sp, #0
	     	ADC_ChannelConfTypeDef sConfig = {0};
 80002ae:	463b      	mov	r3, r7
 80002b0:	2200      	movs	r2, #0
 80002b2:	601a      	str	r2, [r3, #0]
 80002b4:	605a      	str	r2, [r3, #4]
 80002b6:	609a      	str	r2, [r3, #8]
 80002b8:	60da      	str	r2, [r3, #12]
 80002ba:	611a      	str	r2, [r3, #16]
 80002bc:	615a      	str	r2, [r3, #20]
	     	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	     	  */
	     	  sConfig.Channel = ADC_CHANNEL_12;
 80002be:	230c      	movs	r3, #12
 80002c0:	603b      	str	r3, [r7, #0]
	     	  sConfig.Rank = 1;
 80002c2:	2301      	movs	r3, #1
 80002c4:	607b      	str	r3, [r7, #4]
	     	  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80002c6:	2303      	movs	r3, #3
 80002c8:	60bb      	str	r3, [r7, #8]
	     	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 80002ca:	463b      	mov	r3, r7
 80002cc:	4619      	mov	r1, r3
 80002ce:	4803      	ldr	r0, [pc, #12]	; (80002dc <ADC_Select_CH12+0x34>)
 80002d0:	f004 f952 	bl	8004578 <HAL_ADC_ConfigChannel>
	     }
 80002d4:	bf00      	nop
 80002d6:	3718      	adds	r7, #24
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	20000134 	.word	0x20000134

080002e0 <ADC_read_1>:



uint16_t ADC_read_1(void)

	  {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
//	ADC_reset_ch();
	ADC_Select_CH1 ();
 80002e4:	f7ff ffc4 	bl	8000270 <ADC_Select_CH1>
	current[1]=0;
 80002e8:	4b0b      	ldr	r3, [pc, #44]	; (8000318 <ADC_read_1+0x38>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	805a      	strh	r2, [r3, #2]
	HAL_ADC_Start(&hadc3);
 80002ee:	480b      	ldr	r0, [pc, #44]	; (800031c <ADC_read_1+0x3c>)
 80002f0:	f003 f9e8 	bl	80036c4 <HAL_ADC_Start>

	 		  HAL_ADC_PollForConversion(&hadc3, 100);
 80002f4:	2164      	movs	r1, #100	; 0x64
 80002f6:	4809      	ldr	r0, [pc, #36]	; (800031c <ADC_read_1+0x3c>)
 80002f8:	f003 fb30 	bl	800395c <HAL_ADC_PollForConversion>
	 		  current[1] = HAL_ADC_GetValue(&hadc3);
 80002fc:	4807      	ldr	r0, [pc, #28]	; (800031c <ADC_read_1+0x3c>)
 80002fe:	f003 fdad 	bl	8003e5c <HAL_ADC_GetValue>
 8000302:	4603      	mov	r3, r0
 8000304:	b29a      	uxth	r2, r3
 8000306:	4b04      	ldr	r3, [pc, #16]	; (8000318 <ADC_read_1+0x38>)
 8000308:	805a      	strh	r2, [r3, #2]
	 		  HAL_ADC_Stop(&hadc3);
 800030a:	4804      	ldr	r0, [pc, #16]	; (800031c <ADC_read_1+0x3c>)
 800030c:	f003 faf0 	bl	80038f0 <HAL_ADC_Stop>


	 		  return current[1];
 8000310:	4b01      	ldr	r3, [pc, #4]	; (8000318 <ADC_read_1+0x38>)
 8000312:	885b      	ldrh	r3, [r3, #2]
	  }
 8000314:	4618      	mov	r0, r3
 8000316:	bd80      	pop	{r7, pc}
 8000318:	2000059c 	.word	0x2000059c
 800031c:	20000134 	.word	0x20000134

08000320 <ADC_read_12>:

uint16_t ADC_read_12(void)

	  {
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
//	ADC_reset_ch();
	ADC_Select_CH12 ();
 8000324:	f7ff ffc0 	bl	80002a8 <ADC_Select_CH12>
	current[0]=0;
 8000328:	4b0b      	ldr	r3, [pc, #44]	; (8000358 <ADC_read_12+0x38>)
 800032a:	2200      	movs	r2, #0
 800032c:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Start(&hadc3);
 800032e:	480b      	ldr	r0, [pc, #44]	; (800035c <ADC_read_12+0x3c>)
 8000330:	f003 f9c8 	bl	80036c4 <HAL_ADC_Start>

	 		  HAL_ADC_PollForConversion(&hadc3, 100);
 8000334:	2164      	movs	r1, #100	; 0x64
 8000336:	4809      	ldr	r0, [pc, #36]	; (800035c <ADC_read_12+0x3c>)
 8000338:	f003 fb10 	bl	800395c <HAL_ADC_PollForConversion>
	 		  current[0] = HAL_ADC_GetValue(&hadc3);
 800033c:	4807      	ldr	r0, [pc, #28]	; (800035c <ADC_read_12+0x3c>)
 800033e:	f003 fd8d 	bl	8003e5c <HAL_ADC_GetValue>
 8000342:	4603      	mov	r3, r0
 8000344:	b29a      	uxth	r2, r3
 8000346:	4b04      	ldr	r3, [pc, #16]	; (8000358 <ADC_read_12+0x38>)
 8000348:	801a      	strh	r2, [r3, #0]
	 		  HAL_ADC_Stop(&hadc3);
 800034a:	4804      	ldr	r0, [pc, #16]	; (800035c <ADC_read_12+0x3c>)
 800034c:	f003 fad0 	bl	80038f0 <HAL_ADC_Stop>


	 		  return current[0];
 8000350:	4b01      	ldr	r3, [pc, #4]	; (8000358 <ADC_read_12+0x38>)
 8000352:	881b      	ldrh	r3, [r3, #0]
	  }
 8000354:	4618      	mov	r0, r3
 8000356:	bd80      	pop	{r7, pc}
 8000358:	2000059c 	.word	0x2000059c
 800035c:	20000134 	.word	0x20000134

08000360 <PWM_correction>:


void PWM_correction(void){
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0

for(uint8_t i=0;i<4;i++){
 8000366:	2300      	movs	r3, #0
 8000368:	71fb      	strb	r3, [r7, #7]
 800036a:	e070      	b.n	800044e <PWM_correction+0xee>


	pwm[i]=pwm_cmd;
 800036c:	79fb      	ldrb	r3, [r7, #7]
 800036e:	4a45      	ldr	r2, [pc, #276]	; (8000484 <PWM_correction+0x124>)
 8000370:	8812      	ldrh	r2, [r2, #0]
 8000372:	b291      	uxth	r1, r2
 8000374:	4a44      	ldr	r2, [pc, #272]	; (8000488 <PWM_correction+0x128>)
 8000376:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	if((current[i]>=limit)&&(pwm[i]>=10)){
 800037a:	79fb      	ldrb	r3, [r7, #7]
 800037c:	4a43      	ldr	r2, [pc, #268]	; (800048c <PWM_correction+0x12c>)
 800037e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000382:	4b43      	ldr	r3, [pc, #268]	; (8000490 <PWM_correction+0x130>)
 8000384:	881b      	ldrh	r3, [r3, #0]
 8000386:	429a      	cmp	r2, r3
 8000388:	d314      	bcc.n	80003b4 <PWM_correction+0x54>
 800038a:	79fb      	ldrb	r3, [r7, #7]
 800038c:	4a3e      	ldr	r2, [pc, #248]	; (8000488 <PWM_correction+0x128>)
 800038e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000392:	2b09      	cmp	r3, #9
 8000394:	d90e      	bls.n	80003b4 <PWM_correction+0x54>
	pwm[i]=pwm[i]-10;
 8000396:	79fb      	ldrb	r3, [r7, #7]
 8000398:	4a3b      	ldr	r2, [pc, #236]	; (8000488 <PWM_correction+0x128>)
 800039a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800039e:	79fb      	ldrb	r3, [r7, #7]
 80003a0:	3a0a      	subs	r2, #10
 80003a2:	b291      	uxth	r1, r2
 80003a4:	4a38      	ldr	r2, [pc, #224]	; (8000488 <PWM_correction+0x128>)
 80003a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    LED_2_ON;
 80003aa:	2201      	movs	r2, #1
 80003ac:	2101      	movs	r1, #1
 80003ae:	4839      	ldr	r0, [pc, #228]	; (8000494 <PWM_correction+0x134>)
 80003b0:	f005 fb72 	bl	8005a98 <HAL_GPIO_WritePin>
	}


	if(current[i]>=3800){
 80003b4:	79fb      	ldrb	r3, [r7, #7]
 80003b6:	4a35      	ldr	r2, [pc, #212]	; (800048c <PWM_correction+0x12c>)
 80003b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003bc:	f640 62d7 	movw	r2, #3799	; 0xed7
 80003c0:	4293      	cmp	r3, r2
 80003c2:	d930      	bls.n	8000426 <PWM_correction+0xc6>

		            HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80003c4:	2100      	movs	r1, #0
 80003c6:	4834      	ldr	r0, [pc, #208]	; (8000498 <PWM_correction+0x138>)
 80003c8:	f008 fad6 	bl	8008978 <HAL_TIM_PWM_Stop>
		            HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80003cc:	2104      	movs	r1, #4
 80003ce:	4832      	ldr	r0, [pc, #200]	; (8000498 <PWM_correction+0x138>)
 80003d0:	f008 fad2 	bl	8008978 <HAL_TIM_PWM_Stop>
		            HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 80003d4:	2100      	movs	r1, #0
 80003d6:	4831      	ldr	r0, [pc, #196]	; (800049c <PWM_correction+0x13c>)
 80003d8:	f008 face 	bl	8008978 <HAL_TIM_PWM_Stop>
		            HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 80003dc:	2100      	movs	r1, #0
 80003de:	4830      	ldr	r0, [pc, #192]	; (80004a0 <PWM_correction+0x140>)
 80003e0:	f008 faca 	bl	8008978 <HAL_TIM_PWM_Stop>

		            HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 80003e4:	2100      	movs	r1, #0
 80003e6:	482c      	ldr	r0, [pc, #176]	; (8000498 <PWM_correction+0x138>)
 80003e8:	f009 fef4 	bl	800a1d4 <HAL_TIMEx_PWMN_Stop>
		            HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 80003ec:	2104      	movs	r1, #4
 80003ee:	482a      	ldr	r0, [pc, #168]	; (8000498 <PWM_correction+0x138>)
 80003f0:	f009 fef0 	bl	800a1d4 <HAL_TIMEx_PWMN_Stop>
		            HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_1);
 80003f4:	2100      	movs	r1, #0
 80003f6:	4829      	ldr	r0, [pc, #164]	; (800049c <PWM_correction+0x13c>)
 80003f8:	f009 feec 	bl	800a1d4 <HAL_TIMEx_PWMN_Stop>
		            HAL_TIMEx_PWMN_Stop(&htim15, TIM_CHANNEL_1);
 80003fc:	2100      	movs	r1, #0
 80003fe:	4828      	ldr	r0, [pc, #160]	; (80004a0 <PWM_correction+0x140>)
 8000400:	f009 fee8 	bl	800a1d4 <HAL_TIMEx_PWMN_Stop>

		            pwm[0]=10;
 8000404:	4b20      	ldr	r3, [pc, #128]	; (8000488 <PWM_correction+0x128>)
 8000406:	220a      	movs	r2, #10
 8000408:	801a      	strh	r2, [r3, #0]
		            pwm[1]=10;
 800040a:	4b1f      	ldr	r3, [pc, #124]	; (8000488 <PWM_correction+0x128>)
 800040c:	220a      	movs	r2, #10
 800040e:	805a      	strh	r2, [r3, #2]
		            pwm[2]=10;
 8000410:	4b1d      	ldr	r3, [pc, #116]	; (8000488 <PWM_correction+0x128>)
 8000412:	220a      	movs	r2, #10
 8000414:	809a      	strh	r2, [r3, #4]
		            pwm[3]=10;
 8000416:	4b1c      	ldr	r3, [pc, #112]	; (8000488 <PWM_correction+0x128>)
 8000418:	220a      	movs	r2, #10
 800041a:	80da      	strh	r2, [r3, #6]

		            LED_2_ON;}
 800041c:	2201      	movs	r2, #1
 800041e:	2101      	movs	r1, #1
 8000420:	481c      	ldr	r0, [pc, #112]	; (8000494 <PWM_correction+0x134>)
 8000422:	f005 fb39 	bl	8005a98 <HAL_GPIO_WritePin>

	if((pwm[i]>=10)&&(current[i]<=10)){LED_2_OFF;}
 8000426:	79fb      	ldrb	r3, [r7, #7]
 8000428:	4a17      	ldr	r2, [pc, #92]	; (8000488 <PWM_correction+0x128>)
 800042a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800042e:	2b09      	cmp	r3, #9
 8000430:	d90a      	bls.n	8000448 <PWM_correction+0xe8>
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	4a15      	ldr	r2, [pc, #84]	; (800048c <PWM_correction+0x12c>)
 8000436:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800043a:	2b0a      	cmp	r3, #10
 800043c:	d804      	bhi.n	8000448 <PWM_correction+0xe8>
 800043e:	2200      	movs	r2, #0
 8000440:	2101      	movs	r1, #1
 8000442:	4814      	ldr	r0, [pc, #80]	; (8000494 <PWM_correction+0x134>)
 8000444:	f005 fb28 	bl	8005a98 <HAL_GPIO_WritePin>
for(uint8_t i=0;i<4;i++){
 8000448:	79fb      	ldrb	r3, [r7, #7]
 800044a:	3301      	adds	r3, #1
 800044c:	71fb      	strb	r3, [r7, #7]
 800044e:	79fb      	ldrb	r3, [r7, #7]
 8000450:	2b03      	cmp	r3, #3
 8000452:	d98b      	bls.n	800036c <PWM_correction+0xc>

}
pwm_n=(pwm[0]+pwm[1]+pwm[2]+pwm[3])/4;
 8000454:	4b0c      	ldr	r3, [pc, #48]	; (8000488 <PWM_correction+0x128>)
 8000456:	881b      	ldrh	r3, [r3, #0]
 8000458:	461a      	mov	r2, r3
 800045a:	4b0b      	ldr	r3, [pc, #44]	; (8000488 <PWM_correction+0x128>)
 800045c:	885b      	ldrh	r3, [r3, #2]
 800045e:	4413      	add	r3, r2
 8000460:	4a09      	ldr	r2, [pc, #36]	; (8000488 <PWM_correction+0x128>)
 8000462:	8892      	ldrh	r2, [r2, #4]
 8000464:	4413      	add	r3, r2
 8000466:	4a08      	ldr	r2, [pc, #32]	; (8000488 <PWM_correction+0x128>)
 8000468:	88d2      	ldrh	r2, [r2, #6]
 800046a:	4413      	add	r3, r2
 800046c:	2b00      	cmp	r3, #0
 800046e:	da00      	bge.n	8000472 <PWM_correction+0x112>
 8000470:	3303      	adds	r3, #3
 8000472:	109b      	asrs	r3, r3, #2
 8000474:	b29a      	uxth	r2, r3
 8000476:	4b0b      	ldr	r3, [pc, #44]	; (80004a4 <PWM_correction+0x144>)
 8000478:	801a      	strh	r2, [r3, #0]
}
 800047a:	bf00      	nop
 800047c:	3708      	adds	r7, #8
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	200005b4 	.word	0x200005b4
 8000488:	20000000 	.word	0x20000000
 800048c:	2000059c 	.word	0x2000059c
 8000490:	20000010 	.word	0x20000010
 8000494:	48001400 	.word	0x48001400
 8000498:	2000023c 	.word	0x2000023c
 800049c:	2000036c 	.word	0x2000036c
 80004a0:	200003b8 	.word	0x200003b8
 80004a4:	200005b2 	.word	0x200005b2

080004a8 <lcd_write_nibble>:
    }
}

////////////////////////////////////////////////////////////////////////////////////////////

void lcd_write_nibble(uint8_t nibble, uint8_t rs) {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b086      	sub	sp, #24
 80004ac:	af02      	add	r7, sp, #8
 80004ae:	4603      	mov	r3, r0
 80004b0:	460a      	mov	r2, r1
 80004b2:	71fb      	strb	r3, [r7, #7]
 80004b4:	4613      	mov	r3, r2
 80004b6:	71bb      	strb	r3, [r7, #6]
  uint8_t data = nibble << D4_BIT;
 80004b8:	79fb      	ldrb	r3, [r7, #7]
 80004ba:	011b      	lsls	r3, r3, #4
 80004bc:	b2db      	uxtb	r3, r3
 80004be:	73fb      	strb	r3, [r7, #15]
  data |= rs << RS_BIT;
 80004c0:	7bfa      	ldrb	r2, [r7, #15]
 80004c2:	79bb      	ldrb	r3, [r7, #6]
 80004c4:	4313      	orrs	r3, r2
 80004c6:	b2db      	uxtb	r3, r3
 80004c8:	73fb      	strb	r3, [r7, #15]
  data |= backlight_state << BL_BIT; // Include backlight state in data
 80004ca:	4b16      	ldr	r3, [pc, #88]	; (8000524 <lcd_write_nibble+0x7c>)
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	00db      	lsls	r3, r3, #3
 80004d0:	b25a      	sxtb	r2, r3
 80004d2:	7bfb      	ldrb	r3, [r7, #15]
 80004d4:	b25b      	sxtb	r3, r3
 80004d6:	4313      	orrs	r3, r2
 80004d8:	b25b      	sxtb	r3, r3
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	73fb      	strb	r3, [r7, #15]
  data |= 1 << EN_BIT;
 80004de:	7bfb      	ldrb	r3, [r7, #15]
 80004e0:	f043 0304 	orr.w	r3, r3, #4
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80004e8:	f107 020f 	add.w	r2, r7, #15
 80004ec:	2364      	movs	r3, #100	; 0x64
 80004ee:	9300      	str	r3, [sp, #0]
 80004f0:	2301      	movs	r3, #1
 80004f2:	214e      	movs	r1, #78	; 0x4e
 80004f4:	480c      	ldr	r0, [pc, #48]	; (8000528 <lcd_write_nibble+0x80>)
 80004f6:	f005 fba9 	bl	8005c4c <HAL_I2C_Master_Transmit>
  HAL_Delay(1);
 80004fa:	2001      	movs	r0, #1
 80004fc:	f002 fec0 	bl	8003280 <HAL_Delay>
  data &= ~(1 << EN_BIT);
 8000500:	7bfb      	ldrb	r3, [r7, #15]
 8000502:	f023 0304 	bic.w	r3, r3, #4
 8000506:	b2db      	uxtb	r3, r3
 8000508:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 800050a:	f107 020f 	add.w	r2, r7, #15
 800050e:	2364      	movs	r3, #100	; 0x64
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	2301      	movs	r3, #1
 8000514:	214e      	movs	r1, #78	; 0x4e
 8000516:	4804      	ldr	r0, [pc, #16]	; (8000528 <lcd_write_nibble+0x80>)
 8000518:	f005 fb98 	bl	8005c4c <HAL_I2C_Master_Transmit>
}
 800051c:	bf00      	nop
 800051e:	3710      	adds	r7, #16
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	20000012 	.word	0x20000012
 8000528:	200001c8 	.word	0x200001c8

0800052c <lcd_send_cmd>:

////////////////////////////////////////////////////////////////////////////////////////////

void lcd_send_cmd(uint8_t cmd) {
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = cmd >> 4;
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	091b      	lsrs	r3, r3, #4
 800053a:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = cmd & 0x0F;
 800053c:	79fb      	ldrb	r3, [r7, #7]
 800053e:	f003 030f 	and.w	r3, r3, #15
 8000542:	73bb      	strb	r3, [r7, #14]
  lcd_write_nibble(upper_nibble, 0);
 8000544:	7bfb      	ldrb	r3, [r7, #15]
 8000546:	2100      	movs	r1, #0
 8000548:	4618      	mov	r0, r3
 800054a:	f7ff ffad 	bl	80004a8 <lcd_write_nibble>
  lcd_write_nibble(lower_nibble, 0);
 800054e:	7bbb      	ldrb	r3, [r7, #14]
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f7ff ffa8 	bl	80004a8 <lcd_write_nibble>
  if (cmd == 0x01 || cmd == 0x02) {
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	2b01      	cmp	r3, #1
 800055c:	d002      	beq.n	8000564 <lcd_send_cmd+0x38>
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	2b02      	cmp	r3, #2
 8000562:	d102      	bne.n	800056a <lcd_send_cmd+0x3e>
    HAL_Delay(2);
 8000564:	2002      	movs	r0, #2
 8000566:	f002 fe8b 	bl	8003280 <HAL_Delay>
  }
}
 800056a:	bf00      	nop
 800056c:	3710      	adds	r7, #16
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}

08000572 <lcd_send_data>:

//////////////////////////////////////////////////////////////////////////////////////////////

void lcd_send_data(uint8_t data) {
 8000572:	b580      	push	{r7, lr}
 8000574:	b084      	sub	sp, #16
 8000576:	af00      	add	r7, sp, #0
 8000578:	4603      	mov	r3, r0
 800057a:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = data >> 4;
 800057c:	79fb      	ldrb	r3, [r7, #7]
 800057e:	091b      	lsrs	r3, r3, #4
 8000580:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = data & 0x0F;
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	f003 030f 	and.w	r3, r3, #15
 8000588:	73bb      	strb	r3, [r7, #14]
  lcd_write_nibble(upper_nibble, 1);
 800058a:	7bfb      	ldrb	r3, [r7, #15]
 800058c:	2101      	movs	r1, #1
 800058e:	4618      	mov	r0, r3
 8000590:	f7ff ff8a 	bl	80004a8 <lcd_write_nibble>
  lcd_write_nibble(lower_nibble, 1);
 8000594:	7bbb      	ldrb	r3, [r7, #14]
 8000596:	2101      	movs	r1, #1
 8000598:	4618      	mov	r0, r3
 800059a:	f7ff ff85 	bl	80004a8 <lcd_write_nibble>
}
 800059e:	bf00      	nop
 80005a0:	3710      	adds	r7, #16
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}

080005a6 <lcd_init>:

//////////////////////////////////////////////////////////////////////////////////////////////

void lcd_init() {
 80005a6:	b580      	push	{r7, lr}
 80005a8:	af00      	add	r7, sp, #0
  HAL_Delay(50);
 80005aa:	2032      	movs	r0, #50	; 0x32
 80005ac:	f002 fe68 	bl	8003280 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 80005b0:	2100      	movs	r1, #0
 80005b2:	2003      	movs	r0, #3
 80005b4:	f7ff ff78 	bl	80004a8 <lcd_write_nibble>
  HAL_Delay(5);
 80005b8:	2005      	movs	r0, #5
 80005ba:	f002 fe61 	bl	8003280 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 80005be:	2100      	movs	r1, #0
 80005c0:	2003      	movs	r0, #3
 80005c2:	f7ff ff71 	bl	80004a8 <lcd_write_nibble>
  HAL_Delay(1);
 80005c6:	2001      	movs	r0, #1
 80005c8:	f002 fe5a 	bl	8003280 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 80005cc:	2100      	movs	r1, #0
 80005ce:	2003      	movs	r0, #3
 80005d0:	f7ff ff6a 	bl	80004a8 <lcd_write_nibble>
  HAL_Delay(1);
 80005d4:	2001      	movs	r0, #1
 80005d6:	f002 fe53 	bl	8003280 <HAL_Delay>
  lcd_write_nibble(0x02, 0);
 80005da:	2100      	movs	r1, #0
 80005dc:	2002      	movs	r0, #2
 80005de:	f7ff ff63 	bl	80004a8 <lcd_write_nibble>
  lcd_send_cmd(0x28);
 80005e2:	2028      	movs	r0, #40	; 0x28
 80005e4:	f7ff ffa2 	bl	800052c <lcd_send_cmd>
  lcd_send_cmd(0x0C);
 80005e8:	200c      	movs	r0, #12
 80005ea:	f7ff ff9f 	bl	800052c <lcd_send_cmd>
  lcd_send_cmd(0x06);
 80005ee:	2006      	movs	r0, #6
 80005f0:	f7ff ff9c 	bl	800052c <lcd_send_cmd>
  lcd_send_cmd(0x01);
 80005f4:	2001      	movs	r0, #1
 80005f6:	f7ff ff99 	bl	800052c <lcd_send_cmd>
  HAL_Delay(2);
 80005fa:	2002      	movs	r0, #2
 80005fc:	f002 fe40 	bl	8003280 <HAL_Delay>
}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}

08000604 <lcd_write_string>:

//////////////////////////////////////////////////////////////////////////////////////////////

void lcd_write_string(char *str) {
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  while (*str) {
 800060c:	e006      	b.n	800061c <lcd_write_string+0x18>
    lcd_send_data(*str++);
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	1c5a      	adds	r2, r3, #1
 8000612:	607a      	str	r2, [r7, #4]
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	4618      	mov	r0, r3
 8000618:	f7ff ffab 	bl	8000572 <lcd_send_data>
  while (*str) {
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d1f4      	bne.n	800060e <lcd_write_string+0xa>
  }
}
 8000624:	bf00      	nop
 8000626:	bf00      	nop
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
	...

08000630 <lcd_set_cursor>:
//////////////////////////////////////////////////////////////////////////

void lcd_set_cursor(uint8_t row, uint8_t column) {
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	460a      	mov	r2, r1
 800063a:	71fb      	strb	r3, [r7, #7]
 800063c:	4613      	mov	r3, r2
 800063e:	71bb      	strb	r3, [r7, #6]
    uint8_t address;
    switch (row) {
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	3b01      	subs	r3, #1
 8000644:	2b03      	cmp	r3, #3
 8000646:	d817      	bhi.n	8000678 <lcd_set_cursor+0x48>
 8000648:	a201      	add	r2, pc, #4	; (adr r2, 8000650 <lcd_set_cursor+0x20>)
 800064a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800064e:	bf00      	nop
 8000650:	08000661 	.word	0x08000661
 8000654:	08000667 	.word	0x08000667
 8000658:	0800066d 	.word	0x0800066d
 800065c:	08000673 	.word	0x08000673
        case 1:
            address = 0x80;
 8000660:	2380      	movs	r3, #128	; 0x80
 8000662:	73fb      	strb	r3, [r7, #15]
            break;
 8000664:	e00a      	b.n	800067c <lcd_set_cursor+0x4c>
        case 2:
            address = 0xC0;
 8000666:	23c0      	movs	r3, #192	; 0xc0
 8000668:	73fb      	strb	r3, [r7, #15]
            break;
 800066a:	e007      	b.n	800067c <lcd_set_cursor+0x4c>

        case 3:
            address = 0x94;
 800066c:	2394      	movs	r3, #148	; 0x94
 800066e:	73fb      	strb	r3, [r7, #15]
            break;
 8000670:	e004      	b.n	800067c <lcd_set_cursor+0x4c>
        case 4:
            address = 0xD4;
 8000672:	23d4      	movs	r3, #212	; 0xd4
 8000674:	73fb      	strb	r3, [r7, #15]
            break;
 8000676:	e001      	b.n	800067c <lcd_set_cursor+0x4c>


        default:
            address = 0x80;
 8000678:	2380      	movs	r3, #128	; 0x80
 800067a:	73fb      	strb	r3, [r7, #15]
    }
    address += column;
 800067c:	7bfa      	ldrb	r2, [r7, #15]
 800067e:	79bb      	ldrb	r3, [r7, #6]
 8000680:	4413      	add	r3, r2
 8000682:	73fb      	strb	r3, [r7, #15]
    lcd_send_cmd(0x80 | address);
 8000684:	7bfb      	ldrb	r3, [r7, #15]
 8000686:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800068a:	b2db      	uxtb	r3, r3
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff ff4d 	bl	800052c <lcd_send_cmd>
}
 8000692:	bf00      	nop
 8000694:	3710      	adds	r7, #16
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop

0800069c <lcd_clear>:

//////////////////////////////////////////////////////////////////////////////////////////////////

void lcd_clear(void) {
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 80006a0:	2001      	movs	r0, #1
 80006a2:	f7ff ff43 	bl	800052c <lcd_send_cmd>
    HAL_Delay(2);
 80006a6:	2002      	movs	r0, #2
 80006a8:	f002 fdea 	bl	8003280 <HAL_Delay>
}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <Chanel_1_TIM_3>:
}



//////////////////////////////////////////////////////////////////////////////////////////////////
void Chanel_1_TIM_3(void){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
//	PORT1_OFF;
//	PORT2_OFF;
//	PORT3_OFF;
//	PORT4_OFF;

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80006b4:	2100      	movs	r1, #0
 80006b6:	4808      	ldr	r0, [pc, #32]	; (80006d8 <Chanel_1_TIM_3+0x28>)
 80006b8:	f008 f95e 	bl	8008978 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80006bc:	2104      	movs	r1, #4
 80006be:	4806      	ldr	r0, [pc, #24]	; (80006d8 <Chanel_1_TIM_3+0x28>)
 80006c0:	f008 f95a 	bl	8008978 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 80006c4:	2100      	movs	r1, #0
 80006c6:	4805      	ldr	r0, [pc, #20]	; (80006dc <Chanel_1_TIM_3+0x2c>)
 80006c8:	f008 f956 	bl	8008978 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 80006cc:	2100      	movs	r1, #0
 80006ce:	4804      	ldr	r0, [pc, #16]	; (80006e0 <Chanel_1_TIM_3+0x30>)
 80006d0:	f008 f952 	bl	8008978 <HAL_TIM_PWM_Stop>

}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	2000023c 	.word	0x2000023c
 80006dc:	2000036c 	.word	0x2000036c
 80006e0:	200003b8 	.word	0x200003b8

080006e4 <Chanel_2_TIM_3>:

void Chanel_2_TIM_3(void){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
//	PORT1_OFF;
//	PORT2_OFF;
//	PORT3_OFF;
//	PORT4_OFF;

	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 80006e8:	2100      	movs	r1, #0
 80006ea:	4808      	ldr	r0, [pc, #32]	; (800070c <Chanel_2_TIM_3+0x28>)
 80006ec:	f009 fd72 	bl	800a1d4 <HAL_TIMEx_PWMN_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 80006f0:	2104      	movs	r1, #4
 80006f2:	4806      	ldr	r0, [pc, #24]	; (800070c <Chanel_2_TIM_3+0x28>)
 80006f4:	f009 fd6e 	bl	800a1d4 <HAL_TIMEx_PWMN_Stop>
	HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_1);
 80006f8:	2100      	movs	r1, #0
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <Chanel_2_TIM_3+0x2c>)
 80006fc:	f009 fd6a 	bl	800a1d4 <HAL_TIMEx_PWMN_Stop>
	HAL_TIMEx_PWMN_Stop(&htim15, TIM_CHANNEL_1);
 8000700:	2100      	movs	r1, #0
 8000702:	4804      	ldr	r0, [pc, #16]	; (8000714 <Chanel_2_TIM_3+0x30>)
 8000704:	f009 fd66 	bl	800a1d4 <HAL_TIMEx_PWMN_Stop>


}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	2000023c 	.word	0x2000023c
 8000710:	2000036c 	.word	0x2000036c
 8000714:	200003b8 	.word	0x200003b8

08000718 <Chanel_1_TIM_4>:

void Chanel_1_TIM_4(void){
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0

	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800071c:	2100      	movs	r1, #0
 800071e:	4808      	ldr	r0, [pc, #32]	; (8000740 <Chanel_1_TIM_4+0x28>)
 8000720:	f009 fca4 	bl	800a06c <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000724:	2104      	movs	r1, #4
 8000726:	4806      	ldr	r0, [pc, #24]	; (8000740 <Chanel_1_TIM_4+0x28>)
 8000728:	f009 fca0 	bl	800a06c <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
 800072c:	2100      	movs	r1, #0
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <Chanel_1_TIM_4+0x2c>)
 8000730:	f009 fc9c 	bl	800a06c <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim15, TIM_CHANNEL_1);
 8000734:	2100      	movs	r1, #0
 8000736:	4804      	ldr	r0, [pc, #16]	; (8000748 <Chanel_1_TIM_4+0x30>)
 8000738:	f009 fc98 	bl	800a06c <HAL_TIMEx_PWMN_Start>
//	PORT1_ON;
//	PORT2_ON;
//	PORT3_ON;
//	PORT4_ON;

}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}
 8000740:	2000023c 	.word	0x2000023c
 8000744:	2000036c 	.word	0x2000036c
 8000748:	200003b8 	.word	0x200003b8

0800074c <Chanel_2_TIM_4>:

void Chanel_2_TIM_4(void){
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0


	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000750:	2100      	movs	r1, #0
 8000752:	4808      	ldr	r0, [pc, #32]	; (8000774 <Chanel_2_TIM_4+0x28>)
 8000754:	f008 f810 	bl	8008778 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000758:	2104      	movs	r1, #4
 800075a:	4806      	ldr	r0, [pc, #24]	; (8000774 <Chanel_2_TIM_4+0x28>)
 800075c:	f008 f80c 	bl	8008778 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000760:	2100      	movs	r1, #0
 8000762:	4805      	ldr	r0, [pc, #20]	; (8000778 <Chanel_2_TIM_4+0x2c>)
 8000764:	f008 f808 	bl	8008778 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000768:	2100      	movs	r1, #0
 800076a:	4804      	ldr	r0, [pc, #16]	; (800077c <Chanel_2_TIM_4+0x30>)
 800076c:	f008 f804 	bl	8008778 <HAL_TIM_PWM_Start>
	//PORT1_ON;
	//PORT2_ON;
	//PORT3_ON;
	//PORT4_ON;

}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	2000023c 	.word	0x2000023c
 8000778:	2000036c 	.word	0x2000036c
 800077c:	200003b8 	.word	0x200003b8

08000780 <HAL_TIM_PeriodElapsedCallback>:
/////////////////////////////////////////////////////////////////////////////////////////////////

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM3) {
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a19      	ldr	r2, [pc, #100]	; (80007f4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d113      	bne.n	80007ba <HAL_TIM_PeriodElapsedCallback+0x3a>

    	if(ch_state==1){Chanel_1_TIM_3(); TIM3->ARR =65535;}
 8000792:	4b19      	ldr	r3, [pc, #100]	; (80007f8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	2b01      	cmp	r3, #1
 8000798:	d105      	bne.n	80007a6 <HAL_TIM_PeriodElapsedCallback+0x26>
 800079a:	f7ff ff89 	bl	80006b0 <Chanel_1_TIM_3>
 800079e:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80007a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007a4:	62da      	str	r2, [r3, #44]	; 0x2c
    	if(ch_state==2){Chanel_2_TIM_3(); TIM3->ARR =65535;}
 80007a6:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	2b02      	cmp	r3, #2
 80007ac:	d105      	bne.n	80007ba <HAL_TIM_PeriodElapsedCallback+0x3a>
 80007ae:	f7ff ff99 	bl	80006e4 <Chanel_2_TIM_3>
 80007b2:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80007b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007b8:	62da      	str	r2, [r3, #44]	; 0x2c

    }



if(htim->Instance == TIM4) {
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a0f      	ldr	r2, [pc, #60]	; (80007fc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80007c0:	4293      	cmp	r3, r2
 80007c2:	d113      	bne.n	80007ec <HAL_TIM_PeriodElapsedCallback+0x6c>

	if(ch_state==1){Chanel_1_TIM_4(); TIM4->ARR =65535;}
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d105      	bne.n	80007d8 <HAL_TIM_PeriodElapsedCallback+0x58>
 80007cc:	f7ff ffa4 	bl	8000718 <Chanel_1_TIM_4>
 80007d0:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80007d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007d6:	62da      	str	r2, [r3, #44]	; 0x2c
	if(ch_state==2){Chanel_2_TIM_4(); TIM4->ARR =65535;}
 80007d8:	4b07      	ldr	r3, [pc, #28]	; (80007f8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b02      	cmp	r3, #2
 80007de:	d105      	bne.n	80007ec <HAL_TIM_PeriodElapsedCallback+0x6c>
 80007e0:	f7ff ffb4 	bl	800074c <Chanel_2_TIM_4>
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80007e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007ea:	62da      	str	r2, [r3, #44]	; 0x2c

}
}
 80007ec:	bf00      	nop
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40000400 	.word	0x40000400
 80007f8:	200005fa 	.word	0x200005fa
 80007fc:	40000800 	.word	0x40000800

08000800 <HAL_UARTEx_RxEventCallback>:



//////////////////////////////////////////////////////////////////////////////////////////////////
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	460b      	mov	r3, r1
 800080a:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a3d      	ldr	r2, [pc, #244]	; (8000908 <HAL_UARTEx_RxEventCallback+0x108>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d174      	bne.n	8000900 <HAL_UARTEx_RxEventCallback+0x100>
	{



        //  LED_3_ON;
				 if (rxFrame[0] == SLAVE_ID) {
 8000816:	4b3d      	ldr	r3, [pc, #244]	; (800090c <HAL_UARTEx_RxEventCallback+0x10c>)
 8000818:	781a      	ldrb	r2, [r3, #0]
 800081a:	4b3d      	ldr	r3, [pc, #244]	; (8000910 <HAL_UARTEx_RxEventCallback+0x110>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	429a      	cmp	r2, r3
 8000820:	d161      	bne.n	80008e6 <HAL_UARTEx_RxEventCallback+0xe6>


					  			 		uint8_t opCode = rxFrame[1];
 8000822:	4b3a      	ldr	r3, [pc, #232]	; (800090c <HAL_UARTEx_RxEventCallback+0x10c>)
 8000824:	785b      	ldrb	r3, [r3, #1]
 8000826:	73fb      	strb	r3, [r7, #15]
					  			     switch (opCode) {
 8000828:	7bfb      	ldrb	r3, [r7, #15]
 800082a:	3b01      	subs	r3, #1
 800082c:	2b0f      	cmp	r3, #15
 800082e:	d859      	bhi.n	80008e4 <HAL_UARTEx_RxEventCallback+0xe4>
 8000830:	a201      	add	r2, pc, #4	; (adr r2, 8000838 <HAL_UARTEx_RxEventCallback+0x38>)
 8000832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000836:	bf00      	nop
 8000838:	080008e5 	.word	0x080008e5
 800083c:	08000879 	.word	0x08000879
 8000840:	080008e5 	.word	0x080008e5
 8000844:	08000883 	.word	0x08000883
 8000848:	080008e5 	.word	0x080008e5
 800084c:	0800088d 	.word	0x0800088d
 8000850:	080008e5 	.word	0x080008e5
 8000854:	080008e5 	.word	0x080008e5
 8000858:	080008e5 	.word	0x080008e5
 800085c:	080008e5 	.word	0x080008e5
 8000860:	080008e5 	.word	0x080008e5
 8000864:	080008e5 	.word	0x080008e5
 8000868:	080008e5 	.word	0x080008e5
 800086c:	080008e5 	.word	0x080008e5
 8000870:	080008e5 	.word	0x080008e5
 8000874:	0800089f 	.word	0x0800089f

					  			   case   READ_DISC_INPUTs:


					  				handleReadInputRegs(&huart2,0xFF);
 8000878:	21ff      	movs	r1, #255	; 0xff
 800087a:	4826      	ldr	r0, [pc, #152]	; (8000914 <HAL_UARTEx_RxEventCallback+0x114>)
 800087c:	f001 fe7e 	bl	800257c <handleReadInputRegs>
								   break;
 8000880:	e031      	b.n	80008e6 <HAL_UARTEx_RxEventCallback+0xe6>

					  			       case READ_COILs:

					  			    	 break;
					  			       case  READ_INPUT_REGs:
					  			    	 handleReadHoldingRegs(&huart2,data_reg);
 8000882:	4925      	ldr	r1, [pc, #148]	; (8000918 <HAL_UARTEx_RxEventCallback+0x118>)
 8000884:	4823      	ldr	r0, [pc, #140]	; (8000914 <HAL_UARTEx_RxEventCallback+0x114>)
 8000886:	f001 fdfb 	bl	8002480 <handleReadHoldingRegs>


					  			    	   break;
 800088a:	e02c      	b.n	80008e6 <HAL_UARTEx_RxEventCallback+0xe6>
					  			     case WRITE_SINGLE_REG:

					  			   					  			    //	 handleWriteSingleHandlingRegister (&huart2,data_reg);
					  			   					  			    	handleWriteMulyipleHandlingRegister (&huart2,rcv_data_reg);
 800088c:	4923      	ldr	r1, [pc, #140]	; (800091c <HAL_UARTEx_RxEventCallback+0x11c>)
 800088e:	4821      	ldr	r0, [pc, #132]	; (8000914 <HAL_UARTEx_RxEventCallback+0x114>)
 8000890:	f001 feec 	bl	800266c <handleWriteMulyipleHandlingRegister>
					  			                                              pwm_cmd=rcv_data_reg[1];
 8000894:	4b21      	ldr	r3, [pc, #132]	; (800091c <HAL_UARTEx_RxEventCallback+0x11c>)
 8000896:	885a      	ldrh	r2, [r3, #2]
 8000898:	4b21      	ldr	r3, [pc, #132]	; (8000920 <HAL_UARTEx_RxEventCallback+0x120>)
 800089a:	801a      	strh	r2, [r3, #0]

					  			                                               break;
 800089c:	e023      	b.n	80008e6 <HAL_UARTEx_RxEventCallback+0xe6>

					  			       case WRITE_HOLDING_REGs:


					  			    	handleWriteMulyipleHandlingRegister (&huart2,rcv_data_reg);
 800089e:	491f      	ldr	r1, [pc, #124]	; (800091c <HAL_UARTEx_RxEventCallback+0x11c>)
 80008a0:	481c      	ldr	r0, [pc, #112]	; (8000914 <HAL_UARTEx_RxEventCallback+0x114>)
 80008a2:	f001 fee3 	bl	800266c <handleWriteMulyipleHandlingRegister>
					  			    	 pwm_cmd=rcv_data_reg[1];
 80008a6:	4b1d      	ldr	r3, [pc, #116]	; (800091c <HAL_UARTEx_RxEventCallback+0x11c>)
 80008a8:	885a      	ldrh	r2, [r3, #2]
 80008aa:	4b1d      	ldr	r3, [pc, #116]	; (8000920 <HAL_UARTEx_RxEventCallback+0x120>)
 80008ac:	801a      	strh	r2, [r3, #0]
					  			    	 limit=rcv_data_reg[2];
 80008ae:	4b1b      	ldr	r3, [pc, #108]	; (800091c <HAL_UARTEx_RxEventCallback+0x11c>)
 80008b0:	889a      	ldrh	r2, [r3, #4]
 80008b2:	4b1c      	ldr	r3, [pc, #112]	; (8000924 <HAL_UARTEx_RxEventCallback+0x124>)
 80008b4:	801a      	strh	r2, [r3, #0]

					  		sTime.Hours=(rcv_data_reg[3]>>8) & 0xff;
 80008b6:	4b19      	ldr	r3, [pc, #100]	; (800091c <HAL_UARTEx_RxEventCallback+0x11c>)
 80008b8:	88db      	ldrh	r3, [r3, #6]
 80008ba:	0a1b      	lsrs	r3, r3, #8
 80008bc:	b29b      	uxth	r3, r3
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	4b19      	ldr	r3, [pc, #100]	; (8000928 <HAL_UARTEx_RxEventCallback+0x128>)
 80008c2:	701a      	strb	r2, [r3, #0]
					  		sTime.Minutes= rcv_data_reg[3] & 0xff;
 80008c4:	4b15      	ldr	r3, [pc, #84]	; (800091c <HAL_UARTEx_RxEventCallback+0x11c>)
 80008c6:	88db      	ldrh	r3, [r3, #6]
 80008c8:	b2da      	uxtb	r2, r3
 80008ca:	4b17      	ldr	r3, [pc, #92]	; (8000928 <HAL_UARTEx_RxEventCallback+0x128>)
 80008cc:	705a      	strb	r2, [r3, #1]
					  		sTime.Seconds=rcv_data_reg[4];
 80008ce:	4b13      	ldr	r3, [pc, #76]	; (800091c <HAL_UARTEx_RxEventCallback+0x11c>)
 80008d0:	891b      	ldrh	r3, [r3, #8]
 80008d2:	b2da      	uxtb	r2, r3
 80008d4:	4b14      	ldr	r3, [pc, #80]	; (8000928 <HAL_UARTEx_RxEventCallback+0x128>)
 80008d6:	709a      	strb	r2, [r3, #2]
					  		HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 80008d8:	2201      	movs	r2, #1
 80008da:	4913      	ldr	r1, [pc, #76]	; (8000928 <HAL_UARTEx_RxEventCallback+0x128>)
 80008dc:	4813      	ldr	r0, [pc, #76]	; (800092c <HAL_UARTEx_RxEventCallback+0x12c>)
 80008de:	f007 fb70 	bl	8007fc2 <HAL_RTC_SetTime>



                                            break;
 80008e2:	e000      	b.n	80008e6 <HAL_UARTEx_RxEventCallback+0xe6>


					  			       default:
					  			 				break;
 80008e4:	bf00      	nop
		/* start the DMA again */

			//	 for(uint8_t i=0;i<sizeof(rxFrame);)
			//	 {           rxFrame[i]=0;i++;}

		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) rxFrame,sizeof(rxFrame));
 80008e6:	2218      	movs	r2, #24
 80008e8:	4908      	ldr	r1, [pc, #32]	; (800090c <HAL_UARTEx_RxEventCallback+0x10c>)
 80008ea:	480a      	ldr	r0, [pc, #40]	; (8000914 <HAL_UARTEx_RxEventCallback+0x114>)
 80008ec:	f00b f82d 	bl	800b94a <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80008f0:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <HAL_UARTEx_RxEventCallback+0x130>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	681a      	ldr	r2, [r3, #0]
 80008f6:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <HAL_UARTEx_RxEventCallback+0x130>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	f022 0204 	bic.w	r2, r2, #4
 80008fe:	601a      	str	r2, [r3, #0]

	}
}
 8000900:	bf00      	nop
 8000902:	3710      	adds	r7, #16
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40004400 	.word	0x40004400
 800090c:	200005fc 	.word	0x200005fc
 8000910:	20000018 	.word	0x20000018
 8000914:	2000048c 	.word	0x2000048c
 8000918:	20000714 	.word	0x20000714
 800091c:	20000754 	.word	0x20000754
 8000920:	200005b4 	.word	0x200005b4
 8000924:	20000010 	.word	0x20000010
 8000928:	20000778 	.word	0x20000778
 800092c:	2000021c 	.word	0x2000021c
 8000930:	20000514 	.word	0x20000514

08000934 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b088      	sub	sp, #32
 8000938:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800093a:	f002 fc3b 	bl	80031b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800093e:	f000 fbc5 	bl	80010cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000942:	f001 fa03 	bl	8001d4c <MX_GPIO_Init>
  MX_DMA_Init();
 8000946:	f001 f9c7 	bl	8001cd8 <MX_DMA_Init>
  MX_ADC2_Init();
 800094a:	f000 fc9b 	bl	8001284 <MX_ADC2_Init>
  MX_TIM1_Init();
 800094e:	f000 fe39 	bl	80015c4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000952:	f000 fef1 	bl	8001738 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000956:	f001 f95f 	bl	8001c18 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800095a:	f001 f98d 	bl	8001c78 <MX_USART2_UART_Init>
  MX_TIM8_Init();
 800095e:	f001 f809 	bl	8001974 <MX_TIM8_Init>
  MX_I2C1_Init();
 8000962:	f000 fd95 	bl	8001490 <MX_I2C1_Init>
  MX_RTC_Init();
 8000966:	f000 fdd3 	bl	8001510 <MX_RTC_Init>
  MX_TIM15_Init();
 800096a:	f001 f8b1 	bl	8001ad0 <MX_TIM15_Init>
  MX_ADC1_Init();
 800096e:	f000 fc19 	bl	80011a4 <MX_ADC1_Init>
  MX_ADC3_Init();
 8000972:	f000 fd1d 	bl	80013b0 <MX_ADC3_Init>
  MX_TIM3_Init();
 8000976:	f000 ff61 	bl	800183c <MX_TIM3_Init>
  MX_TIM4_Init();
 800097a:	f000 ffad 	bl	80018d8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  LED_2_ON;
 800097e:	2201      	movs	r2, #1
 8000980:	2101      	movs	r1, #1
 8000982:	489e      	ldr	r0, [pc, #632]	; (8000bfc <main+0x2c8>)
 8000984:	f005 f888 	bl	8005a98 <HAL_GPIO_WritePin>
	TX_2;
 8000988:	2201      	movs	r2, #1
 800098a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800098e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000992:	f005 f881 	bl	8005a98 <HAL_GPIO_WritePin>


 TIM1->CCR1=pwm[0];
 8000996:	4b9a      	ldr	r3, [pc, #616]	; (8000c00 <main+0x2cc>)
 8000998:	881a      	ldrh	r2, [r3, #0]
 800099a:	4b9a      	ldr	r3, [pc, #616]	; (8000c04 <main+0x2d0>)
 800099c:	635a      	str	r2, [r3, #52]	; 0x34
 TIM1->CCR2=pwm[1];
 800099e:	4b98      	ldr	r3, [pc, #608]	; (8000c00 <main+0x2cc>)
 80009a0:	885a      	ldrh	r2, [r3, #2]
 80009a2:	4b98      	ldr	r3, [pc, #608]	; (8000c04 <main+0x2d0>)
 80009a4:	639a      	str	r2, [r3, #56]	; 0x38
 TIM8->CCR1=pwm[2];
 80009a6:	4b96      	ldr	r3, [pc, #600]	; (8000c00 <main+0x2cc>)
 80009a8:	889a      	ldrh	r2, [r3, #4]
 80009aa:	4b97      	ldr	r3, [pc, #604]	; (8000c08 <main+0x2d4>)
 80009ac:	635a      	str	r2, [r3, #52]	; 0x34
 TIM15->CCR1=pwm[3];
 80009ae:	4b94      	ldr	r3, [pc, #592]	; (8000c00 <main+0x2cc>)
 80009b0:	88da      	ldrh	r2, [r3, #6]
 80009b2:	4b96      	ldr	r3, [pc, #600]	; (8000c0c <main+0x2d8>)
 80009b4:	635a      	str	r2, [r3, #52]	; 0x34



  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80009b6:	2100      	movs	r1, #0
 80009b8:	4895      	ldr	r0, [pc, #596]	; (8000c10 <main+0x2dc>)
 80009ba:	f007 fedd 	bl	8008778 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80009be:	2104      	movs	r1, #4
 80009c0:	4893      	ldr	r0, [pc, #588]	; (8000c10 <main+0x2dc>)
 80009c2:	f007 fed9 	bl	8008778 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80009c6:	2100      	movs	r1, #0
 80009c8:	4892      	ldr	r0, [pc, #584]	; (8000c14 <main+0x2e0>)
 80009ca:	f007 fed5 	bl	8008778 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80009ce:	2100      	movs	r1, #0
 80009d0:	4891      	ldr	r0, [pc, #580]	; (8000c18 <main+0x2e4>)
 80009d2:	f007 fed1 	bl	8008778 <HAL_TIM_PWM_Start>
//  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
//  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
//  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
//  HAL_TIMEx_PWMN_Start(&htim15, TIM_CHANNEL_1);

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80009d6:	2100      	movs	r1, #0
 80009d8:	4890      	ldr	r0, [pc, #576]	; (8000c1c <main+0x2e8>)
 80009da:	f008 f8c5 	bl	8008b68 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 80009de:	2104      	movs	r1, #4
 80009e0:	488e      	ldr	r0, [pc, #568]	; (8000c1c <main+0x2e8>)
 80009e2:	f008 f8c1 	bl	8008b68 <HAL_TIM_IC_Start_IT>
       //HAL_TIM_Base_Start_IT(&htim3);
       //HAL_TIM_Base_Stop_IT(&htim3);
       //HAL_TIM_Base_Start_IT(&htim4);
       //HAL_TIM_Base_Stop_IT(&htim4);

  PORT1_ON;
 80009e6:	2201      	movs	r2, #1
 80009e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009ec:	488c      	ldr	r0, [pc, #560]	; (8000c20 <main+0x2ec>)
 80009ee:	f005 f853 	bl	8005a98 <HAL_GPIO_WritePin>
  PORT2_ON;
 80009f2:	2201      	movs	r2, #1
 80009f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009f8:	4889      	ldr	r0, [pc, #548]	; (8000c20 <main+0x2ec>)
 80009fa:	f005 f84d 	bl	8005a98 <HAL_GPIO_WritePin>
  PORT3_ON;
 80009fe:	2201      	movs	r2, #1
 8000a00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a04:	4886      	ldr	r0, [pc, #536]	; (8000c20 <main+0x2ec>)
 8000a06:	f005 f847 	bl	8005a98 <HAL_GPIO_WritePin>
  PORT4_ON;
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a10:	4883      	ldr	r0, [pc, #524]	; (8000c20 <main+0x2ec>)
 8000a12:	f005 f841 	bl	8005a98 <HAL_GPIO_WritePin>

  HAL_ADCEx_Calibration_Start(&hadc2,5);
 8000a16:	2105      	movs	r1, #5
 8000a18:	4882      	ldr	r0, [pc, #520]	; (8000c24 <main+0x2f0>)
 8000a1a:	f003 fd13 	bl	8004444 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc1,4);
 8000a1e:	2104      	movs	r1, #4
 8000a20:	4881      	ldr	r0, [pc, #516]	; (8000c28 <main+0x2f4>)
 8000a22:	f003 fd0f 	bl	8004444 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc3,2);
 8000a26:	2102      	movs	r1, #2
 8000a28:	4880      	ldr	r0, [pc, #512]	; (8000c2c <main+0x2f8>)
 8000a2a:	f003 fd0b 	bl	8004444 <HAL_ADCEx_Calibration_Start>

  flag=1;
 8000a2e:	4b80      	ldr	r3, [pc, #512]	; (8000c30 <main+0x2fc>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	701a      	strb	r2, [r3, #0]

  HAL_Delay(100);
 8000a34:	2064      	movs	r0, #100	; 0x64
 8000a36:	f002 fc23 	bl	8003280 <HAL_Delay>



 // lcd_init();
//  lcd_clear();
    char *text = " ";
 8000a3a:	4b7e      	ldr	r3, [pc, #504]	; (8000c34 <main+0x300>)
 8000a3c:	613b      	str	r3, [r7, #16]
  //				 	  	    lcd_write_string(int_to_str);




     HAL_ADC_Start_DMA(&hadc2, (uint16_t*)hall_sens, 5);
 8000a3e:	2205      	movs	r2, #5
 8000a40:	497d      	ldr	r1, [pc, #500]	; (8000c38 <main+0x304>)
 8000a42:	4878      	ldr	r0, [pc, #480]	; (8000c24 <main+0x2f0>)
 8000a44:	f003 f88c 	bl	8003b60 <HAL_ADC_Start_DMA>
     HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxFrame, 16);
 8000a48:	2210      	movs	r2, #16
 8000a4a:	497c      	ldr	r1, [pc, #496]	; (8000c3c <main+0x308>)
 8000a4c:	487c      	ldr	r0, [pc, #496]	; (8000c40 <main+0x30c>)
 8000a4e:	f00a ff7c 	bl	800b94a <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8000a52:	4b7c      	ldr	r3, [pc, #496]	; (8000c44 <main+0x310>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	4b7a      	ldr	r3, [pc, #488]	; (8000c44 <main+0x310>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f022 0204 	bic.w	r2, r2, #4
 8000a60:	601a      	str	r2, [r3, #0]
       RX_2;
 8000a62:	2200      	movs	r2, #0
 8000a64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a6c:	f005 f814 	bl	8005a98 <HAL_GPIO_WritePin>
      LED_2_OFF;
 8000a70:	2200      	movs	r2, #0
 8000a72:	2101      	movs	r1, #1
 8000a74:	4861      	ldr	r0, [pc, #388]	; (8000bfc <main+0x2c8>)
 8000a76:	f005 f80f 	bl	8005a98 <HAL_GPIO_WritePin>
  RX_2;
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a84:	f005 f808 	bl	8005a98 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_I2C_Master_Transmit(&hi2c1, 0x20 << 1, butt, 1, HAL_MAX_DELAY);
 8000a88:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8c:	9300      	str	r3, [sp, #0]
 8000a8e:	2301      	movs	r3, #1
 8000a90:	4a6d      	ldr	r2, [pc, #436]	; (8000c48 <main+0x314>)
 8000a92:	2140      	movs	r1, #64	; 0x40
 8000a94:	486d      	ldr	r0, [pc, #436]	; (8000c4c <main+0x318>)
 8000a96:	f005 f8d9 	bl	8005c4c <HAL_I2C_Master_Transmit>
	 // HAL_I2C_Master_Transmit(&hi2c1,(0x26 <<1), butt, sizeof(butt), HAL_MAX_DELAY);
	  HAL_I2C_Master_Receive(&hi2c1, 0x24 << 1 , butt, 1, HAL_MAX_DELAY);
 8000a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9e:	9300      	str	r3, [sp, #0]
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	4a69      	ldr	r2, [pc, #420]	; (8000c48 <main+0x314>)
 8000aa4:	2148      	movs	r1, #72	; 0x48
 8000aa6:	4869      	ldr	r0, [pc, #420]	; (8000c4c <main+0x318>)
 8000aa8:	f005 f9c4 	bl	8005e34 <HAL_I2C_Master_Receive>

	  if(flag==1){
 8000aac:	4b60      	ldr	r3, [pc, #384]	; (8000c30 <main+0x2fc>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d1e8      	bne.n	8000a88 <main+0x154>
		  HAL_ADC_Stop_DMA(&hadc2);
 8000ab6:	485b      	ldr	r0, [pc, #364]	; (8000c24 <main+0x2f0>)
 8000ab8:	f003 f96e 	bl	8003d98 <HAL_ADC_Stop_DMA>
		  current[2]=hall_sens[4];
 8000abc:	4b5e      	ldr	r3, [pc, #376]	; (8000c38 <main+0x304>)
 8000abe:	891a      	ldrh	r2, [r3, #8]
 8000ac0:	4b63      	ldr	r3, [pc, #396]	; (8000c50 <main+0x31c>)
 8000ac2:	809a      	strh	r2, [r3, #4]
		  HAL_ADC_Start(&hadc1);
 8000ac4:	4858      	ldr	r0, [pc, #352]	; (8000c28 <main+0x2f4>)
 8000ac6:	f002 fdfd 	bl	80036c4 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 100);
 8000aca:	2164      	movs	r1, #100	; 0x64
 8000acc:	4856      	ldr	r0, [pc, #344]	; (8000c28 <main+0x2f4>)
 8000ace:	f002 ff45 	bl	800395c <HAL_ADC_PollForConversion>
		  current[3]=0;
 8000ad2:	4b5f      	ldr	r3, [pc, #380]	; (8000c50 <main+0x31c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	80da      	strh	r2, [r3, #6]
		  current[3]=HAL_ADC_GetValue(&hadc1);
 8000ad8:	4853      	ldr	r0, [pc, #332]	; (8000c28 <main+0x2f4>)
 8000ada:	f003 f9bf 	bl	8003e5c <HAL_ADC_GetValue>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	b29a      	uxth	r2, r3
 8000ae2:	4b5b      	ldr	r3, [pc, #364]	; (8000c50 <main+0x31c>)
 8000ae4:	80da      	strh	r2, [r3, #6]
		  HAL_ADC_Stop(&hadc1);
 8000ae6:	4850      	ldr	r0, [pc, #320]	; (8000c28 <main+0x2f4>)
 8000ae8:	f002 ff02 	bl	80038f0 <HAL_ADC_Stop>

		 	  		  ADC_read_1();
 8000aec:	f7ff fbf8 	bl	80002e0 <ADC_read_1>
		 	  		  ADC_read_12();
 8000af0:	f7ff fc16 	bl	8000320 <ADC_read_12>
		 	  		 HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000af4:	2200      	movs	r2, #0
 8000af6:	4957      	ldr	r1, [pc, #348]	; (8000c54 <main+0x320>)
 8000af8:	4857      	ldr	r0, [pc, #348]	; (8000c58 <main+0x324>)
 8000afa:	f007 fafc 	bl	80080f6 <HAL_RTC_GetTime>
		 	  		data_reg[0]=0;
 8000afe:	4b57      	ldr	r3, [pc, #348]	; (8000c5c <main+0x328>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	801a      	strh	r2, [r3, #0]
		 	  				 	  data_reg[1]=0;
 8000b04:	4b55      	ldr	r3, [pc, #340]	; (8000c5c <main+0x328>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	805a      	strh	r2, [r3, #2]
		 	  				 	  data_reg[2]=0;
 8000b0a:	4b54      	ldr	r3, [pc, #336]	; (8000c5c <main+0x328>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	809a      	strh	r2, [r3, #4]
		 	  				 	  data_reg[3]=0;
 8000b10:	4b52      	ldr	r3, [pc, #328]	; (8000c5c <main+0x328>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	80da      	strh	r2, [r3, #6]

		 	//  data_reg[0]=current[0];
		 	//  data_reg[1]=current[1];
		 	//  data_reg[2]=current[2];
		 	//  data_reg[3]=current[3];
		 	  data_reg[4]=pwm[0];
 8000b16:	4b3a      	ldr	r3, [pc, #232]	; (8000c00 <main+0x2cc>)
 8000b18:	881a      	ldrh	r2, [r3, #0]
 8000b1a:	4b50      	ldr	r3, [pc, #320]	; (8000c5c <main+0x328>)
 8000b1c:	811a      	strh	r2, [r3, #8]
		 	  data_reg[5]=pwm[1];
 8000b1e:	4b38      	ldr	r3, [pc, #224]	; (8000c00 <main+0x2cc>)
 8000b20:	885a      	ldrh	r2, [r3, #2]
 8000b22:	4b4e      	ldr	r3, [pc, #312]	; (8000c5c <main+0x328>)
 8000b24:	815a      	strh	r2, [r3, #10]
		 	  data_reg[6]=pwm[2];
 8000b26:	4b36      	ldr	r3, [pc, #216]	; (8000c00 <main+0x2cc>)
 8000b28:	889a      	ldrh	r2, [r3, #4]
 8000b2a:	4b4c      	ldr	r3, [pc, #304]	; (8000c5c <main+0x328>)
 8000b2c:	819a      	strh	r2, [r3, #12]
		 	  data_reg[7]=pwm[3];
 8000b2e:	4b34      	ldr	r3, [pc, #208]	; (8000c00 <main+0x2cc>)
 8000b30:	88da      	ldrh	r2, [r3, #6]
 8000b32:	4b4a      	ldr	r3, [pc, #296]	; (8000c5c <main+0x328>)
 8000b34:	81da      	strh	r2, [r3, #14]
		 	  data_reg[8]=rpm;
 8000b36:	4b4a      	ldr	r3, [pc, #296]	; (8000c60 <main+0x32c>)
 8000b38:	881a      	ldrh	r2, [r3, #0]
 8000b3a:	4b48      	ldr	r3, [pc, #288]	; (8000c5c <main+0x328>)
 8000b3c:	821a      	strh	r2, [r3, #16]
		 	  data_reg[9]=f;
 8000b3e:	4b49      	ldr	r3, [pc, #292]	; (8000c64 <main+0x330>)
 8000b40:	881a      	ldrh	r2, [r3, #0]
 8000b42:	4b46      	ldr	r3, [pc, #280]	; (8000c5c <main+0x328>)
 8000b44:	825a      	strh	r2, [r3, #18]
		 	  data_reg[10]=limit;
 8000b46:	4b48      	ldr	r3, [pc, #288]	; (8000c68 <main+0x334>)
 8000b48:	881a      	ldrh	r2, [r3, #0]
 8000b4a:	4b44      	ldr	r3, [pc, #272]	; (8000c5c <main+0x328>)
 8000b4c:	829a      	strh	r2, [r3, #20]
		 	  data_reg[11]=SLAVE_ID;
 8000b4e:	4b47      	ldr	r3, [pc, #284]	; (8000c6c <main+0x338>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	b29a      	uxth	r2, r3
 8000b54:	4b41      	ldr	r3, [pc, #260]	; (8000c5c <main+0x328>)
 8000b56:	82da      	strh	r2, [r3, #22]
		 	  data_reg[12]=voltage_dc;
 8000b58:	4b45      	ldr	r3, [pc, #276]	; (8000c70 <main+0x33c>)
 8000b5a:	881a      	ldrh	r2, [r3, #0]
 8000b5c:	4b3f      	ldr	r3, [pc, #252]	; (8000c5c <main+0x328>)
 8000b5e:	831a      	strh	r2, [r3, #24]
		 	  data_reg[13]=current_dc;
 8000b60:	4b44      	ldr	r3, [pc, #272]	; (8000c74 <main+0x340>)
 8000b62:	881a      	ldrh	r2, [r3, #0]
 8000b64:	4b3d      	ldr	r3, [pc, #244]	; (8000c5c <main+0x328>)
 8000b66:	835a      	strh	r2, [r3, #26]
		 	  data_reg[14]=(sTime.Hours<<8)|(sTime.Minutes);
 8000b68:	4b3a      	ldr	r3, [pc, #232]	; (8000c54 <main+0x320>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	021b      	lsls	r3, r3, #8
 8000b6e:	b21a      	sxth	r2, r3
 8000b70:	4b38      	ldr	r3, [pc, #224]	; (8000c54 <main+0x320>)
 8000b72:	785b      	ldrb	r3, [r3, #1]
 8000b74:	b21b      	sxth	r3, r3
 8000b76:	4313      	orrs	r3, r2
 8000b78:	b21b      	sxth	r3, r3
 8000b7a:	b29a      	uxth	r2, r3
 8000b7c:	4b37      	ldr	r3, [pc, #220]	; (8000c5c <main+0x328>)
 8000b7e:	839a      	strh	r2, [r3, #28]
		      data_reg[15]=sTime.Seconds;
 8000b80:	4b34      	ldr	r3, [pc, #208]	; (8000c54 <main+0x320>)
 8000b82:	789b      	ldrb	r3, [r3, #2]
 8000b84:	b29a      	uxth	r2, r3
 8000b86:	4b35      	ldr	r3, [pc, #212]	; (8000c5c <main+0x328>)
 8000b88:	83da      	strh	r2, [r3, #30]

                current_avg=(current[0]+current[1]+current[2]+current[3])/4;
 8000b8a:	4b31      	ldr	r3, [pc, #196]	; (8000c50 <main+0x31c>)
 8000b8c:	881b      	ldrh	r3, [r3, #0]
 8000b8e:	461a      	mov	r2, r3
 8000b90:	4b2f      	ldr	r3, [pc, #188]	; (8000c50 <main+0x31c>)
 8000b92:	885b      	ldrh	r3, [r3, #2]
 8000b94:	4413      	add	r3, r2
 8000b96:	4a2e      	ldr	r2, [pc, #184]	; (8000c50 <main+0x31c>)
 8000b98:	8892      	ldrh	r2, [r2, #4]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	4a2c      	ldr	r2, [pc, #176]	; (8000c50 <main+0x31c>)
 8000b9e:	88d2      	ldrh	r2, [r2, #6]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	da00      	bge.n	8000ba8 <main+0x274>
 8000ba6:	3303      	adds	r3, #3
 8000ba8:	109b      	asrs	r3, r3, #2
 8000baa:	b29a      	uxth	r2, r3
 8000bac:	4b32      	ldr	r3, [pc, #200]	; (8000c78 <main+0x344>)
 8000bae:	801a      	strh	r2, [r3, #0]
                current_sum=current[0]+current[1]+current[2]+current[3];
 8000bb0:	4b27      	ldr	r3, [pc, #156]	; (8000c50 <main+0x31c>)
 8000bb2:	881a      	ldrh	r2, [r3, #0]
 8000bb4:	4b26      	ldr	r3, [pc, #152]	; (8000c50 <main+0x31c>)
 8000bb6:	885b      	ldrh	r3, [r3, #2]
 8000bb8:	4413      	add	r3, r2
 8000bba:	b29a      	uxth	r2, r3
 8000bbc:	4b24      	ldr	r3, [pc, #144]	; (8000c50 <main+0x31c>)
 8000bbe:	889b      	ldrh	r3, [r3, #4]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	b29a      	uxth	r2, r3
 8000bc4:	4b22      	ldr	r3, [pc, #136]	; (8000c50 <main+0x31c>)
 8000bc6:	88db      	ldrh	r3, [r3, #6]
 8000bc8:	4413      	add	r3, r2
 8000bca:	b29a      	uxth	r2, r3
 8000bcc:	4b2b      	ldr	r3, [pc, #172]	; (8000c7c <main+0x348>)
 8000bce:	801a      	strh	r2, [r3, #0]





                if(flt<=19){
 8000bd0:	4b2b      	ldr	r3, [pc, #172]	; (8000c80 <main+0x34c>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b13      	cmp	r3, #19
 8000bd6:	f200 8092 	bhi.w	8000cfe <main+0x3ca>
                adc_filter[flt]=current[0];
 8000bda:	4b29      	ldr	r3, [pc, #164]	; (8000c80 <main+0x34c>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	461a      	mov	r2, r3
 8000be0:	4b1b      	ldr	r3, [pc, #108]	; (8000c50 <main+0x31c>)
 8000be2:	8819      	ldrh	r1, [r3, #0]
 8000be4:	4b27      	ldr	r3, [pc, #156]	; (8000c84 <main+0x350>)
 8000be6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
                flt++;
 8000bea:	4b25      	ldr	r3, [pc, #148]	; (8000c80 <main+0x34c>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	4b23      	ldr	r3, [pc, #140]	; (8000c80 <main+0x34c>)
 8000bf4:	701a      	strb	r2, [r3, #0]
                for(uint8_t n=0; n<flt+1; ){
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	75fb      	strb	r3, [r7, #23]
 8000bfa:	e052      	b.n	8000ca2 <main+0x36e>
 8000bfc:	48001400 	.word	0x48001400
 8000c00:	20000000 	.word	0x20000000
 8000c04:	40012c00 	.word	0x40012c00
 8000c08:	40013400 	.word	0x40013400
 8000c0c:	40014000 	.word	0x40014000
 8000c10:	2000023c 	.word	0x2000023c
 8000c14:	2000036c 	.word	0x2000036c
 8000c18:	200003b8 	.word	0x200003b8
 8000c1c:	20000288 	.word	0x20000288
 8000c20:	48000400 	.word	0x48000400
 8000c24:	200000e4 	.word	0x200000e4
 8000c28:	20000094 	.word	0x20000094
 8000c2c:	20000134 	.word	0x20000134
 8000c30:	200005b7 	.word	0x200005b7
 8000c34:	0800c354 	.word	0x0800c354
 8000c38:	200005a4 	.word	0x200005a4
 8000c3c:	200005fc 	.word	0x200005fc
 8000c40:	2000048c 	.word	0x2000048c
 8000c44:	20000514 	.word	0x20000514
 8000c48:	20000008 	.word	0x20000008
 8000c4c:	200001c8 	.word	0x200001c8
 8000c50:	2000059c 	.word	0x2000059c
 8000c54:	20000778 	.word	0x20000778
 8000c58:	2000021c 	.word	0x2000021c
 8000c5c:	20000714 	.word	0x20000714
 8000c60:	200005be 	.word	0x200005be
 8000c64:	200005c0 	.word	0x200005c0
 8000c68:	20000010 	.word	0x20000010
 8000c6c:	20000018 	.word	0x20000018
 8000c70:	20000016 	.word	0x20000016
 8000c74:	20000014 	.word	0x20000014
 8000c78:	200005f2 	.word	0x200005f2
 8000c7c:	200005f4 	.word	0x200005f4
 8000c80:	200005ec 	.word	0x200005ec
 8000c84:	200005c4 	.word	0x200005c4

                filter=filter+adc_filter[n];
 8000c88:	7dfb      	ldrb	r3, [r7, #23]
 8000c8a:	4a11      	ldr	r2, [pc, #68]	; (8000cd0 <main+0x39c>)
 8000c8c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000c90:	4b10      	ldr	r3, [pc, #64]	; (8000cd4 <main+0x3a0>)
 8000c92:	881b      	ldrh	r3, [r3, #0]
 8000c94:	4413      	add	r3, r2
 8000c96:	b29a      	uxth	r2, r3
 8000c98:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <main+0x3a0>)
 8000c9a:	801a      	strh	r2, [r3, #0]
                 n++;
 8000c9c:	7dfb      	ldrb	r3, [r7, #23]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	75fb      	strb	r3, [r7, #23]
                for(uint8_t n=0; n<flt+1; ){
 8000ca2:	4b0d      	ldr	r3, [pc, #52]	; (8000cd8 <main+0x3a4>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	7dfa      	ldrb	r2, [r7, #23]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d9ed      	bls.n	8000c88 <main+0x354>

                }

                filter=filter/flt;
 8000cac:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <main+0x3a0>)
 8000cae:	881b      	ldrh	r3, [r3, #0]
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <main+0x3a4>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cba:	b29a      	uxth	r2, r3
 8000cbc:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <main+0x3a0>)
 8000cbe:	801a      	strh	r2, [r3, #0]

                  if(flt==19){
 8000cc0:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <main+0x3a4>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2b13      	cmp	r3, #19
 8000cc6:	d11a      	bne.n	8000cfe <main+0x3ca>
                	 for(uint8_t n=1;n==flt;){
 8000cc8:	2301      	movs	r3, #1
 8000cca:	73fb      	strb	r3, [r7, #15]
 8000ccc:	e00f      	b.n	8000cee <main+0x3ba>
 8000cce:	bf00      	nop
 8000cd0:	200005c4 	.word	0x200005c4
 8000cd4:	200005ee 	.word	0x200005ee
 8000cd8:	200005ec 	.word	0x200005ec

                		adc_filter[n-1]=adc_filter[n];  }
 8000cdc:	7bfa      	ldrb	r2, [r7, #15]
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
 8000ce0:	3b01      	subs	r3, #1
 8000ce2:	49b6      	ldr	r1, [pc, #728]	; (8000fbc <main+0x688>)
 8000ce4:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8000ce8:	4ab4      	ldr	r2, [pc, #720]	; (8000fbc <main+0x688>)
 8000cea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                	 for(uint8_t n=1;n==flt;){
 8000cee:	4bb4      	ldr	r3, [pc, #720]	; (8000fc0 <main+0x68c>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	7bfa      	ldrb	r2, [r7, #15]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d0f1      	beq.n	8000cdc <main+0x3a8>

                     flt=0;
 8000cf8:	4bb1      	ldr	r3, [pc, #708]	; (8000fc0 <main+0x68c>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	701a      	strb	r2, [r3, #0]
                }




		 	  	  if((lcd_status==0)&&(lcd_update==1)){lcd_init();HAL_Delay(100);lcd_clear();lcd_update=0;}
 8000cfe:	4bb1      	ldr	r3, [pc, #708]	; (8000fc4 <main+0x690>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	f083 0301 	eor.w	r3, r3, #1
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d00d      	beq.n	8000d28 <main+0x3f4>
 8000d0c:	4bae      	ldr	r3, [pc, #696]	; (8000fc8 <main+0x694>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d009      	beq.n	8000d28 <main+0x3f4>
 8000d14:	f7ff fc47 	bl	80005a6 <lcd_init>
 8000d18:	2064      	movs	r0, #100	; 0x64
 8000d1a:	f002 fab1 	bl	8003280 <HAL_Delay>
 8000d1e:	f7ff fcbd 	bl	800069c <lcd_clear>
 8000d22:	4ba9      	ldr	r3, [pc, #676]	; (8000fc8 <main+0x694>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	701a      	strb	r2, [r3, #0]
		 	  	  if((lcd_status==1)&&(lcd_update==1)){lcd_init();lcd_clear();lcd_update=0;}
 8000d28:	4ba6      	ldr	r3, [pc, #664]	; (8000fc4 <main+0x690>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d00a      	beq.n	8000d46 <main+0x412>
 8000d30:	4ba5      	ldr	r3, [pc, #660]	; (8000fc8 <main+0x694>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d006      	beq.n	8000d46 <main+0x412>
 8000d38:	f7ff fc35 	bl	80005a6 <lcd_init>
 8000d3c:	f7ff fcae 	bl	800069c <lcd_clear>
 8000d40:	4ba1      	ldr	r3, [pc, #644]	; (8000fc8 <main+0x694>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	701a      	strb	r2, [r3, #0]

		 	  	  if(lcd_status==1){
 8000d46:	4b9f      	ldr	r3, [pc, #636]	; (8000fc4 <main+0x690>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	f000 818f 	beq.w	800106e <main+0x73a>
		 	  		 adc_count++;
 8000d50:	4b9e      	ldr	r3, [pc, #632]	; (8000fcc <main+0x698>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	3301      	adds	r3, #1
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	4b9c      	ldr	r3, [pc, #624]	; (8000fcc <main+0x698>)
 8000d5a:	701a      	strb	r2, [r3, #0]

		 	  if(page_flag==1){lcd_clear();page_flag=0;}
 8000d5c:	4b9c      	ldr	r3, [pc, #624]	; (8000fd0 <main+0x69c>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d104      	bne.n	8000d6e <main+0x43a>
 8000d64:	f7ff fc9a 	bl	800069c <lcd_clear>
 8000d68:	4b99      	ldr	r3, [pc, #612]	; (8000fd0 <main+0x69c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	701a      	strb	r2, [r3, #0]
		 	  	  if((page_num==0)&&(adc_count==20)){
 8000d6e:	4b99      	ldr	r3, [pc, #612]	; (8000fd4 <main+0x6a0>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d14a      	bne.n	8000e0c <main+0x4d8>
 8000d76:	4b95      	ldr	r3, [pc, #596]	; (8000fcc <main+0x698>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2b14      	cmp	r3, #20
 8000d7c:	d146      	bne.n	8000e0c <main+0x4d8>


				 	  		sprintf(int_to_str, "RPM-%05d t/min     ",rpm);
 8000d7e:	4b96      	ldr	r3, [pc, #600]	; (8000fd8 <main+0x6a4>)
 8000d80:	881b      	ldrh	r3, [r3, #0]
 8000d82:	461a      	mov	r2, r3
 8000d84:	1d3b      	adds	r3, r7, #4
 8000d86:	4995      	ldr	r1, [pc, #596]	; (8000fdc <main+0x6a8>)
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f00a fe33 	bl	800b9f4 <siprintf>
				 	  		lcd_set_cursor(1, 0);
 8000d8e:	2100      	movs	r1, #0
 8000d90:	2001      	movs	r0, #1
 8000d92:	f7ff fc4d 	bl	8000630 <lcd_set_cursor>
				 	  	    lcd_write_string(int_to_str);
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fc33 	bl	8000604 <lcd_write_string>

				 	  	    sprintf(int_to_str, "PWM_CMD-%05d/%03d%% ",pwm_n,pwm_n/20);
 8000d9e:	4b90      	ldr	r3, [pc, #576]	; (8000fe0 <main+0x6ac>)
 8000da0:	881b      	ldrh	r3, [r3, #0]
 8000da2:	4619      	mov	r1, r3
 8000da4:	4b8e      	ldr	r3, [pc, #568]	; (8000fe0 <main+0x6ac>)
 8000da6:	881b      	ldrh	r3, [r3, #0]
 8000da8:	4a8e      	ldr	r2, [pc, #568]	; (8000fe4 <main+0x6b0>)
 8000daa:	fba2 2303 	umull	r2, r3, r2, r3
 8000dae:	091b      	lsrs	r3, r3, #4
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	1d38      	adds	r0, r7, #4
 8000db4:	460a      	mov	r2, r1
 8000db6:	498c      	ldr	r1, [pc, #560]	; (8000fe8 <main+0x6b4>)
 8000db8:	f00a fe1c 	bl	800b9f4 <siprintf>
				 	  	 	lcd_set_cursor(2, 0);
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	2002      	movs	r0, #2
 8000dc0:	f7ff fc36 	bl	8000630 <lcd_set_cursor>
				 	  	 	lcd_write_string(int_to_str);
 8000dc4:	1d3b      	adds	r3, r7, #4
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fc1c 	bl	8000604 <lcd_write_string>

				 	  	    sprintf(int_to_str, "ADC_avg-%05d ",current_avg);
 8000dcc:	4b87      	ldr	r3, [pc, #540]	; (8000fec <main+0x6b8>)
 8000dce:	881b      	ldrh	r3, [r3, #0]
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	4986      	ldr	r1, [pc, #536]	; (8000ff0 <main+0x6bc>)
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f00a fe0c 	bl	800b9f4 <siprintf>
				 	  	 	lcd_set_cursor(3, 0);
 8000ddc:	2100      	movs	r1, #0
 8000dde:	2003      	movs	r0, #3
 8000de0:	f7ff fc26 	bl	8000630 <lcd_set_cursor>
				 	  	 	lcd_write_string(int_to_str);
 8000de4:	1d3b      	adds	r3, r7, #4
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fc0c 	bl	8000604 <lcd_write_string>

				 	    	sprintf(int_to_str, "F=%05dHz ",f);
 8000dec:	4b81      	ldr	r3, [pc, #516]	; (8000ff4 <main+0x6c0>)
 8000dee:	881b      	ldrh	r3, [r3, #0]
 8000df0:	461a      	mov	r2, r3
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	4980      	ldr	r1, [pc, #512]	; (8000ff8 <main+0x6c4>)
 8000df6:	4618      	mov	r0, r3
 8000df8:	f00a fdfc 	bl	800b9f4 <siprintf>
				 	  	 	lcd_set_cursor(4, 0);
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	2004      	movs	r0, #4
 8000e00:	f7ff fc16 	bl	8000630 <lcd_set_cursor>
				 	  	 	lcd_write_string(int_to_str);	  }
 8000e04:	1d3b      	adds	r3, r7, #4
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff fbfc 	bl	8000604 <lcd_write_string>

		 	  	  if((page_num==2)&&(adc_count==22)){
 8000e0c:	4b71      	ldr	r3, [pc, #452]	; (8000fd4 <main+0x6a0>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d149      	bne.n	8000ea8 <main+0x574>
 8000e14:	4b6d      	ldr	r3, [pc, #436]	; (8000fcc <main+0x698>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b16      	cmp	r3, #22
 8000e1a:	d145      	bne.n	8000ea8 <main+0x574>

		 	  		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN); // RTC_FORMAT_BIN , RTC_FORMAT_BCD
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	4977      	ldr	r1, [pc, #476]	; (8000ffc <main+0x6c8>)
 8000e20:	4877      	ldr	r0, [pc, #476]	; (8001000 <main+0x6cc>)
 8000e22:	f007 f968 	bl	80080f6 <HAL_RTC_GetTime>
		 	  	 HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000e26:	2200      	movs	r2, #0
 8000e28:	4976      	ldr	r1, [pc, #472]	; (8001004 <main+0x6d0>)
 8000e2a:	4875      	ldr	r0, [pc, #468]	; (8001000 <main+0x6cc>)
 8000e2c:	f007 fa45 	bl	80082ba <HAL_RTC_GetDate>

		 	  	                            sprintf(int_to_str, "START_TIME:%02d:%02d:%02d",hour,min,sec);
 8000e30:	4b75      	ldr	r3, [pc, #468]	; (8001008 <main+0x6d4>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	461a      	mov	r2, r3
 8000e36:	4b75      	ldr	r3, [pc, #468]	; (800100c <main+0x6d8>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4b74      	ldr	r3, [pc, #464]	; (8001010 <main+0x6dc>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	1d38      	adds	r0, r7, #4
 8000e42:	9300      	str	r3, [sp, #0]
 8000e44:	460b      	mov	r3, r1
 8000e46:	4973      	ldr	r1, [pc, #460]	; (8001014 <main+0x6e0>)
 8000e48:	f00a fdd4 	bl	800b9f4 <siprintf>
		 	  			 	  				lcd_set_cursor(1, 0);
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	2001      	movs	r0, #1
 8000e50:	f7ff fbee 	bl	8000630 <lcd_set_cursor>
		 	  			 	  			    lcd_write_string(int_to_str);
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff fbd4 	bl	8000604 <lcd_write_string>

		 	  					 	  		sprintf(int_to_str, "TIME:%02d:%02d:%02d",sTime.Hours,sTime.Minutes,sTime.Seconds);
 8000e5c:	4b67      	ldr	r3, [pc, #412]	; (8000ffc <main+0x6c8>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	461a      	mov	r2, r3
 8000e62:	4b66      	ldr	r3, [pc, #408]	; (8000ffc <main+0x6c8>)
 8000e64:	785b      	ldrb	r3, [r3, #1]
 8000e66:	4619      	mov	r1, r3
 8000e68:	4b64      	ldr	r3, [pc, #400]	; (8000ffc <main+0x6c8>)
 8000e6a:	789b      	ldrb	r3, [r3, #2]
 8000e6c:	1d38      	adds	r0, r7, #4
 8000e6e:	9300      	str	r3, [sp, #0]
 8000e70:	460b      	mov	r3, r1
 8000e72:	4969      	ldr	r1, [pc, #420]	; (8001018 <main+0x6e4>)
 8000e74:	f00a fdbe 	bl	800b9f4 <siprintf>
		 	  					 	  		lcd_set_cursor(2, 0);
 8000e78:	2100      	movs	r1, #0
 8000e7a:	2002      	movs	r0, #2
 8000e7c:	f7ff fbd8 	bl	8000630 <lcd_set_cursor>
		 	  					 	  	    lcd_write_string(int_to_str);
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff fbbe 	bl	8000604 <lcd_write_string>


		 	  					 	  		sprintf(int_to_str, "ADC_filter:%02d",adc_filter[0]);
 8000e88:	4b4c      	ldr	r3, [pc, #304]	; (8000fbc <main+0x688>)
 8000e8a:	881b      	ldrh	r3, [r3, #0]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	1d3b      	adds	r3, r7, #4
 8000e90:	4962      	ldr	r1, [pc, #392]	; (800101c <main+0x6e8>)
 8000e92:	4618      	mov	r0, r3
 8000e94:	f00a fdae 	bl	800b9f4 <siprintf>
		 	  					 	  		lcd_set_cursor(3, 0);
 8000e98:	2100      	movs	r1, #0
 8000e9a:	2003      	movs	r0, #3
 8000e9c:	f7ff fbc8 	bl	8000630 <lcd_set_cursor>
		 	  					 	  	    lcd_write_string(int_to_str); }
 8000ea0:	1d3b      	adds	r3, r7, #4
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff fbae 	bl	8000604 <lcd_write_string>



		 	  	  if(page_num==1){
 8000ea8:	4b4a      	ldr	r3, [pc, #296]	; (8000fd4 <main+0x6a0>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	f040 80de 	bne.w	800106e <main+0x73a>
		 	  	                 	if(adc_count==18){
 8000eb2:	4b46      	ldr	r3, [pc, #280]	; (8000fcc <main+0x698>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	2b12      	cmp	r3, #18
 8000eb8:	d157      	bne.n	8000f6a <main+0x636>

		 	  				 	  		sprintf(int_to_str, "PWM-%02d%%/%04d",pwm[0]/20,pwm[0]);
 8000eba:	4b59      	ldr	r3, [pc, #356]	; (8001020 <main+0x6ec>)
 8000ebc:	881b      	ldrh	r3, [r3, #0]
 8000ebe:	4a49      	ldr	r2, [pc, #292]	; (8000fe4 <main+0x6b0>)
 8000ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec4:	091b      	lsrs	r3, r3, #4
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4b55      	ldr	r3, [pc, #340]	; (8001020 <main+0x6ec>)
 8000ecc:	881b      	ldrh	r3, [r3, #0]
 8000ece:	1d38      	adds	r0, r7, #4
 8000ed0:	4954      	ldr	r1, [pc, #336]	; (8001024 <main+0x6f0>)
 8000ed2:	f00a fd8f 	bl	800b9f4 <siprintf>
		 	  				 	  		lcd_set_cursor(1, 0);
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	2001      	movs	r0, #1
 8000eda:	f7ff fba9 	bl	8000630 <lcd_set_cursor>
		 	  				 	  	    lcd_write_string(int_to_str);
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff fb8f 	bl	8000604 <lcd_write_string>

		 	  				 	     	sprintf(int_to_str, "PWM-%02d%%/%04d",pwm[1]/20,pwm[1]);
 8000ee6:	4b4e      	ldr	r3, [pc, #312]	; (8001020 <main+0x6ec>)
 8000ee8:	885b      	ldrh	r3, [r3, #2]
 8000eea:	4a3e      	ldr	r2, [pc, #248]	; (8000fe4 <main+0x6b0>)
 8000eec:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef0:	091b      	lsrs	r3, r3, #4
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4b4a      	ldr	r3, [pc, #296]	; (8001020 <main+0x6ec>)
 8000ef8:	885b      	ldrh	r3, [r3, #2]
 8000efa:	1d38      	adds	r0, r7, #4
 8000efc:	4949      	ldr	r1, [pc, #292]	; (8001024 <main+0x6f0>)
 8000efe:	f00a fd79 	bl	800b9f4 <siprintf>
		 	  				 	  	    lcd_set_cursor(2, 0);
 8000f02:	2100      	movs	r1, #0
 8000f04:	2002      	movs	r0, #2
 8000f06:	f7ff fb93 	bl	8000630 <lcd_set_cursor>
		 	  				 	  	    lcd_write_string(int_to_str);
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fb79 	bl	8000604 <lcd_write_string>

		 	  				 	  	    sprintf(int_to_str, "PWM-%02d%%/%04d",pwm[2]/20,pwm[2]);
 8000f12:	4b43      	ldr	r3, [pc, #268]	; (8001020 <main+0x6ec>)
 8000f14:	889b      	ldrh	r3, [r3, #4]
 8000f16:	4a33      	ldr	r2, [pc, #204]	; (8000fe4 <main+0x6b0>)
 8000f18:	fba2 2303 	umull	r2, r3, r2, r3
 8000f1c:	091b      	lsrs	r3, r3, #4
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	461a      	mov	r2, r3
 8000f22:	4b3f      	ldr	r3, [pc, #252]	; (8001020 <main+0x6ec>)
 8000f24:	889b      	ldrh	r3, [r3, #4]
 8000f26:	1d38      	adds	r0, r7, #4
 8000f28:	493e      	ldr	r1, [pc, #248]	; (8001024 <main+0x6f0>)
 8000f2a:	f00a fd63 	bl	800b9f4 <siprintf>
		 	  				 	  	    lcd_set_cursor(3, 0);
 8000f2e:	2100      	movs	r1, #0
 8000f30:	2003      	movs	r0, #3
 8000f32:	f7ff fb7d 	bl	8000630 <lcd_set_cursor>
		 	  				 	  		lcd_write_string(int_to_str);
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff fb63 	bl	8000604 <lcd_write_string>

		 	  				 	    	sprintf(int_to_str, "PWM-%02d%%/%04d",pwm[3]/20,pwm[3]);
 8000f3e:	4b38      	ldr	r3, [pc, #224]	; (8001020 <main+0x6ec>)
 8000f40:	88db      	ldrh	r3, [r3, #6]
 8000f42:	4a28      	ldr	r2, [pc, #160]	; (8000fe4 <main+0x6b0>)
 8000f44:	fba2 2303 	umull	r2, r3, r2, r3
 8000f48:	091b      	lsrs	r3, r3, #4
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4b34      	ldr	r3, [pc, #208]	; (8001020 <main+0x6ec>)
 8000f50:	88db      	ldrh	r3, [r3, #6]
 8000f52:	1d38      	adds	r0, r7, #4
 8000f54:	4933      	ldr	r1, [pc, #204]	; (8001024 <main+0x6f0>)
 8000f56:	f00a fd4d 	bl	800b9f4 <siprintf>
		 	  				 	  	    lcd_set_cursor(4, 0);
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	2004      	movs	r0, #4
 8000f5e:	f7ff fb67 	bl	8000630 <lcd_set_cursor>
		 	  				 	  		lcd_write_string(int_to_str);
 8000f62:	1d3b      	adds	r3, r7, #4
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fb4d 	bl	8000604 <lcd_write_string>

		 	  				 	  		}

		 	  		if(adc_count>=180){
 8000f6a:	4b18      	ldr	r3, [pc, #96]	; (8000fcc <main+0x698>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2bb3      	cmp	r3, #179	; 0xb3
 8000f70:	d97d      	bls.n	800106e <main+0x73a>


		 	  			sprintf(int_to_str, "Adc-%03d",current[0]);
 8000f72:	4b2d      	ldr	r3, [pc, #180]	; (8001028 <main+0x6f4>)
 8000f74:	881b      	ldrh	r3, [r3, #0]
 8000f76:	461a      	mov	r2, r3
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	492c      	ldr	r1, [pc, #176]	; (800102c <main+0x6f8>)
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f00a fd39 	bl	800b9f4 <siprintf>
		 	  			lcd_set_cursor(1, 13);
 8000f82:	210d      	movs	r1, #13
 8000f84:	2001      	movs	r0, #1
 8000f86:	f7ff fb53 	bl	8000630 <lcd_set_cursor>
		 	  		    lcd_write_string(int_to_str);
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fb39 	bl	8000604 <lcd_write_string>

		 	  		    sprintf(int_to_str, "Adc-%03d",current[1]);
 8000f92:	4b25      	ldr	r3, [pc, #148]	; (8001028 <main+0x6f4>)
 8000f94:	885b      	ldrh	r3, [r3, #2]
 8000f96:	461a      	mov	r2, r3
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	4924      	ldr	r1, [pc, #144]	; (800102c <main+0x6f8>)
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f00a fd29 	bl	800b9f4 <siprintf>
		 	  		 	lcd_set_cursor(2, 13);
 8000fa2:	210d      	movs	r1, #13
 8000fa4:	2002      	movs	r0, #2
 8000fa6:	f7ff fb43 	bl	8000630 <lcd_set_cursor>
		 	  		    lcd_write_string(int_to_str);
 8000faa:	1d3b      	adds	r3, r7, #4
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff fb29 	bl	8000604 <lcd_write_string>

		 	  		    sprintf(int_to_str, "Adc-%03d",current[2]);
 8000fb2:	4b1d      	ldr	r3, [pc, #116]	; (8001028 <main+0x6f4>)
 8000fb4:	889b      	ldrh	r3, [r3, #4]
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	1d3b      	adds	r3, r7, #4
 8000fba:	e039      	b.n	8001030 <main+0x6fc>
 8000fbc:	200005c4 	.word	0x200005c4
 8000fc0:	200005ec 	.word	0x200005ec
 8000fc4:	200005ae 	.word	0x200005ae
 8000fc8:	200005af 	.word	0x200005af
 8000fcc:	200005c2 	.word	0x200005c2
 8000fd0:	200005f1 	.word	0x200005f1
 8000fd4:	200005f0 	.word	0x200005f0
 8000fd8:	200005be 	.word	0x200005be
 8000fdc:	0800c358 	.word	0x0800c358
 8000fe0:	200005b2 	.word	0x200005b2
 8000fe4:	cccccccd 	.word	0xcccccccd
 8000fe8:	0800c36c 	.word	0x0800c36c
 8000fec:	200005f2 	.word	0x200005f2
 8000ff0:	0800c384 	.word	0x0800c384
 8000ff4:	200005c0 	.word	0x200005c0
 8000ff8:	0800c394 	.word	0x0800c394
 8000ffc:	20000778 	.word	0x20000778
 8001000:	2000021c 	.word	0x2000021c
 8001004:	2000078c 	.word	0x2000078c
 8001008:	200005f7 	.word	0x200005f7
 800100c:	200005f6 	.word	0x200005f6
 8001010:	200005f8 	.word	0x200005f8
 8001014:	0800c3a0 	.word	0x0800c3a0
 8001018:	0800c3bc 	.word	0x0800c3bc
 800101c:	0800c3d0 	.word	0x0800c3d0
 8001020:	20000000 	.word	0x20000000
 8001024:	0800c3e0 	.word	0x0800c3e0
 8001028:	2000059c 	.word	0x2000059c
 800102c:	0800c3f0 	.word	0x0800c3f0
 8001030:	491c      	ldr	r1, [pc, #112]	; (80010a4 <main+0x770>)
 8001032:	4618      	mov	r0, r3
 8001034:	f00a fcde 	bl	800b9f4 <siprintf>
		 	  		    lcd_set_cursor(3, 13);
 8001038:	210d      	movs	r1, #13
 800103a:	2003      	movs	r0, #3
 800103c:	f7ff faf8 	bl	8000630 <lcd_set_cursor>
		 	  		    lcd_write_string(int_to_str);
 8001040:	1d3b      	adds	r3, r7, #4
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff fade 	bl	8000604 <lcd_write_string>

		 	  	        sprintf(int_to_str, "Adc-%03d",current[3]);
 8001048:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <main+0x774>)
 800104a:	88db      	ldrh	r3, [r3, #6]
 800104c:	461a      	mov	r2, r3
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	4914      	ldr	r1, [pc, #80]	; (80010a4 <main+0x770>)
 8001052:	4618      	mov	r0, r3
 8001054:	f00a fcce 	bl	800b9f4 <siprintf>
		 	  	 		lcd_set_cursor(4, 13);
 8001058:	210d      	movs	r1, #13
 800105a:	2004      	movs	r0, #4
 800105c:	f7ff fae8 	bl	8000630 <lcd_set_cursor>
		 	  	 		lcd_write_string(int_to_str);
 8001060:	1d3b      	adds	r3, r7, #4
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff face 	bl	8000604 <lcd_write_string>

		 	  	    adc_count=0;
 8001068:	4b10      	ldr	r3, [pc, #64]	; (80010ac <main+0x778>)
 800106a:	2200      	movs	r2, #0
 800106c:	701a      	strb	r2, [r3, #0]





	     PWM_correction();
 800106e:	f7ff f977 	bl	8000360 <PWM_correction>
	  	 TIM1->CCR1=pwm[0];
 8001072:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <main+0x77c>)
 8001074:	881a      	ldrh	r2, [r3, #0]
 8001076:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <main+0x780>)
 8001078:	635a      	str	r2, [r3, #52]	; 0x34
	  	 TIM1->CCR2=pwm[1];
 800107a:	4b0d      	ldr	r3, [pc, #52]	; (80010b0 <main+0x77c>)
 800107c:	885a      	ldrh	r2, [r3, #2]
 800107e:	4b0d      	ldr	r3, [pc, #52]	; (80010b4 <main+0x780>)
 8001080:	639a      	str	r2, [r3, #56]	; 0x38
	  	 TIM8->CCR1=pwm[2];
 8001082:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <main+0x77c>)
 8001084:	889a      	ldrh	r2, [r3, #4]
 8001086:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <main+0x784>)
 8001088:	635a      	str	r2, [r3, #52]	; 0x34
	  	 TIM15->CCR1=pwm[3];
 800108a:	4b09      	ldr	r3, [pc, #36]	; (80010b0 <main+0x77c>)
 800108c:	88da      	ldrh	r2, [r3, #6]
 800108e:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <main+0x788>)
 8001090:	635a      	str	r2, [r3, #52]	; 0x34
	  	 flag=0;
 8001092:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <main+0x78c>)
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]
	  	 HAL_ADC_Start_DMA(&hadc2, (uint16_t*)hall_sens, 5);
 8001098:	2205      	movs	r2, #5
 800109a:	490a      	ldr	r1, [pc, #40]	; (80010c4 <main+0x790>)
 800109c:	480a      	ldr	r0, [pc, #40]	; (80010c8 <main+0x794>)
 800109e:	f002 fd5f 	bl	8003b60 <HAL_ADC_Start_DMA>
	  HAL_I2C_Master_Transmit(&hi2c1, 0x20 << 1, butt, 1, HAL_MAX_DELAY);
 80010a2:	e4f1      	b.n	8000a88 <main+0x154>
 80010a4:	0800c3f0 	.word	0x0800c3f0
 80010a8:	2000059c 	.word	0x2000059c
 80010ac:	200005c2 	.word	0x200005c2
 80010b0:	20000000 	.word	0x20000000
 80010b4:	40012c00 	.word	0x40012c00
 80010b8:	40013400 	.word	0x40013400
 80010bc:	40014000 	.word	0x40014000
 80010c0:	200005b7 	.word	0x200005b7
 80010c4:	200005a4 	.word	0x200005a4
 80010c8:	200000e4 	.word	0x200000e4

080010cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b09e      	sub	sp, #120	; 0x78
 80010d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010d2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80010d6:	2228      	movs	r2, #40	; 0x28
 80010d8:	2100      	movs	r1, #0
 80010da:	4618      	mov	r0, r3
 80010dc:	f00a fcaa 	bl	800ba34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010f0:	463b      	mov	r3, r7
 80010f2:	223c      	movs	r2, #60	; 0x3c
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f00a fc9c 	bl	800ba34 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80010fc:	230a      	movs	r3, #10
 80010fe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001100:	2301      	movs	r3, #1
 8001102:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001104:	2310      	movs	r3, #16
 8001106:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001108:	2301      	movs	r3, #1
 800110a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800110c:	2302      	movs	r3, #2
 800110e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001110:	2300      	movs	r3, #0
 8001112:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001114:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001118:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800111a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800111e:	4618      	mov	r0, r3
 8001120:	f005 faa8 	bl	8006674 <HAL_RCC_OscConfig>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800112a:	f001 f923 	bl	8002374 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800112e:	230f      	movs	r3, #15
 8001130:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001132:	2302      	movs	r3, #2
 8001134:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001136:	2300      	movs	r3, #0
 8001138:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800113a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800113e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001140:	2300      	movs	r3, #0
 8001142:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001144:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001148:	2102      	movs	r1, #2
 800114a:	4618      	mov	r0, r3
 800114c:	f006 fad0 	bl	80076f0 <HAL_RCC_ClockConfig>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001156:	f001 f90d 	bl	8002374 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <SystemClock_Config+0xd4>)
 800115c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM8
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800115e:	2300      	movs	r3, #0
 8001160:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001166:	f44f 7380 	mov.w	r3, #256	; 0x100
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 800116c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001170:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001176:	f44f 7300 	mov.w	r3, #512	; 0x200
 800117a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800117c:	2300      	movs	r3, #0
 800117e:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 8001180:	2300      	movs	r3, #0
 8001182:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001184:	463b      	mov	r3, r7
 8001186:	4618      	mov	r0, r3
 8001188:	f006 fce8 	bl	8007b5c <HAL_RCCEx_PeriphCLKConfig>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001192:	f001 f8ef 	bl	8002374 <Error_Handler>
  }
}
 8001196:	bf00      	nop
 8001198:	3778      	adds	r7, #120	; 0x78
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	000131a3 	.word	0x000131a3

080011a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08a      	sub	sp, #40	; 0x28
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80011aa:	f107 031c 	add.w	r3, r7, #28
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80011b6:	1d3b      	adds	r3, r7, #4
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
 80011c4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011c6:	4b2e      	ldr	r3, [pc, #184]	; (8001280 <MX_ADC1_Init+0xdc>)
 80011c8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80011cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80011ce:	4b2c      	ldr	r3, [pc, #176]	; (8001280 <MX_ADC1_Init+0xdc>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011d4:	4b2a      	ldr	r3, [pc, #168]	; (8001280 <MX_ADC1_Init+0xdc>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011da:	4b29      	ldr	r3, [pc, #164]	; (8001280 <MX_ADC1_Init+0xdc>)
 80011dc:	2200      	movs	r2, #0
 80011de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011e0:	4b27      	ldr	r3, [pc, #156]	; (8001280 <MX_ADC1_Init+0xdc>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011e6:	4b26      	ldr	r3, [pc, #152]	; (8001280 <MX_ADC1_Init+0xdc>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011ee:	4b24      	ldr	r3, [pc, #144]	; (8001280 <MX_ADC1_Init+0xdc>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011f4:	4b22      	ldr	r3, [pc, #136]	; (8001280 <MX_ADC1_Init+0xdc>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011fa:	4b21      	ldr	r3, [pc, #132]	; (8001280 <MX_ADC1_Init+0xdc>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001200:	4b1f      	ldr	r3, [pc, #124]	; (8001280 <MX_ADC1_Init+0xdc>)
 8001202:	2201      	movs	r2, #1
 8001204:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001206:	4b1e      	ldr	r3, [pc, #120]	; (8001280 <MX_ADC1_Init+0xdc>)
 8001208:	2200      	movs	r2, #0
 800120a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800120e:	4b1c      	ldr	r3, [pc, #112]	; (8001280 <MX_ADC1_Init+0xdc>)
 8001210:	2204      	movs	r2, #4
 8001212:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001214:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <MX_ADC1_Init+0xdc>)
 8001216:	2200      	movs	r2, #0
 8001218:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800121a:	4b19      	ldr	r3, [pc, #100]	; (8001280 <MX_ADC1_Init+0xdc>)
 800121c:	2200      	movs	r2, #0
 800121e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001220:	4817      	ldr	r0, [pc, #92]	; (8001280 <MX_ADC1_Init+0xdc>)
 8001222:	f002 f86f 	bl	8003304 <HAL_ADC_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800122c:	f001 f8a2 	bl	8002374 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001230:	2300      	movs	r3, #0
 8001232:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001234:	f107 031c 	add.w	r3, r7, #28
 8001238:	4619      	mov	r1, r3
 800123a:	4811      	ldr	r0, [pc, #68]	; (8001280 <MX_ADC1_Init+0xdc>)
 800123c:	f003 fc86 	bl	8004b4c <HAL_ADCEx_MultiModeConfigChannel>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001246:	f001 f895 	bl	8002374 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800124a:	2304      	movs	r3, #4
 800124c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800124e:	2301      	movs	r3, #1
 8001250:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES_5;
 8001256:	2302      	movs	r3, #2
 8001258:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	4619      	mov	r1, r3
 8001266:	4806      	ldr	r0, [pc, #24]	; (8001280 <MX_ADC1_Init+0xdc>)
 8001268:	f003 f986 	bl	8004578 <HAL_ADC_ConfigChannel>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001272:	f001 f87f 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001276:	bf00      	nop
 8001278:	3728      	adds	r7, #40	; 0x28
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000094 	.word	0x20000094

08001284 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800128a:	463b      	mov	r3, r7
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
 8001298:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800129a:	4b43      	ldr	r3, [pc, #268]	; (80013a8 <MX_ADC2_Init+0x124>)
 800129c:	4a43      	ldr	r2, [pc, #268]	; (80013ac <MX_ADC2_Init+0x128>)
 800129e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80012a0:	4b41      	ldr	r3, [pc, #260]	; (80013a8 <MX_ADC2_Init+0x124>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80012a6:	4b40      	ldr	r3, [pc, #256]	; (80013a8 <MX_ADC2_Init+0x124>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80012ac:	4b3e      	ldr	r3, [pc, #248]	; (80013a8 <MX_ADC2_Init+0x124>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80012b2:	4b3d      	ldr	r3, [pc, #244]	; (80013a8 <MX_ADC2_Init+0x124>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80012b8:	4b3b      	ldr	r3, [pc, #236]	; (80013a8 <MX_ADC2_Init+0x124>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012c0:	4b39      	ldr	r3, [pc, #228]	; (80013a8 <MX_ADC2_Init+0x124>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012c6:	4b38      	ldr	r3, [pc, #224]	; (80013a8 <MX_ADC2_Init+0x124>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012cc:	4b36      	ldr	r3, [pc, #216]	; (80013a8 <MX_ADC2_Init+0x124>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 5;
 80012d2:	4b35      	ldr	r3, [pc, #212]	; (80013a8 <MX_ADC2_Init+0x124>)
 80012d4:	2205      	movs	r2, #5
 80012d6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80012d8:	4b33      	ldr	r3, [pc, #204]	; (80013a8 <MX_ADC2_Init+0x124>)
 80012da:	2200      	movs	r2, #0
 80012dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012e0:	4b31      	ldr	r3, [pc, #196]	; (80013a8 <MX_ADC2_Init+0x124>)
 80012e2:	2204      	movs	r2, #4
 80012e4:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80012e6:	4b30      	ldr	r3, [pc, #192]	; (80013a8 <MX_ADC2_Init+0x124>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80012ec:	4b2e      	ldr	r3, [pc, #184]	; (80013a8 <MX_ADC2_Init+0x124>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80012f2:	482d      	ldr	r0, [pc, #180]	; (80013a8 <MX_ADC2_Init+0x124>)
 80012f4:	f002 f806 	bl	8003304 <HAL_ADC_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 80012fe:	f001 f839 	bl	8002374 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001302:	2301      	movs	r3, #1
 8001304:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001306:	2301      	movs	r3, #1
 8001308:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES_5;
 800130e:	2302      	movs	r3, #2
 8001310:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001312:	2300      	movs	r3, #0
 8001314:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800131a:	463b      	mov	r3, r7
 800131c:	4619      	mov	r1, r3
 800131e:	4822      	ldr	r0, [pc, #136]	; (80013a8 <MX_ADC2_Init+0x124>)
 8001320:	f003 f92a 	bl	8004578 <HAL_ADC_ConfigChannel>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 800132a:	f001 f823 	bl	8002374 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800132e:	2302      	movs	r3, #2
 8001330:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001332:	2302      	movs	r3, #2
 8001334:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001336:	463b      	mov	r3, r7
 8001338:	4619      	mov	r1, r3
 800133a:	481b      	ldr	r0, [pc, #108]	; (80013a8 <MX_ADC2_Init+0x124>)
 800133c:	f003 f91c 	bl	8004578 <HAL_ADC_ConfigChannel>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_ADC2_Init+0xc6>
  {
    Error_Handler();
 8001346:	f001 f815 	bl	8002374 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800134a:	2303      	movs	r3, #3
 800134c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800134e:	2303      	movs	r3, #3
 8001350:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001352:	463b      	mov	r3, r7
 8001354:	4619      	mov	r1, r3
 8001356:	4814      	ldr	r0, [pc, #80]	; (80013a8 <MX_ADC2_Init+0x124>)
 8001358:	f003 f90e 	bl	8004578 <HAL_ADC_ConfigChannel>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_ADC2_Init+0xe2>
  {
    Error_Handler();
 8001362:	f001 f807 	bl	8002374 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001366:	2304      	movs	r3, #4
 8001368:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800136a:	2304      	movs	r3, #4
 800136c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800136e:	463b      	mov	r3, r7
 8001370:	4619      	mov	r1, r3
 8001372:	480d      	ldr	r0, [pc, #52]	; (80013a8 <MX_ADC2_Init+0x124>)
 8001374:	f003 f900 	bl	8004578 <HAL_ADC_ConfigChannel>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_ADC2_Init+0xfe>
  {
    Error_Handler();
 800137e:	f000 fff9 	bl	8002374 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001382:	230c      	movs	r3, #12
 8001384:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001386:	2305      	movs	r3, #5
 8001388:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800138a:	463b      	mov	r3, r7
 800138c:	4619      	mov	r1, r3
 800138e:	4806      	ldr	r0, [pc, #24]	; (80013a8 <MX_ADC2_Init+0x124>)
 8001390:	f003 f8f2 	bl	8004578 <HAL_ADC_ConfigChannel>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_ADC2_Init+0x11a>
  {
    Error_Handler();
 800139a:	f000 ffeb 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800139e:	bf00      	nop
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	200000e4 	.word	0x200000e4
 80013ac:	50000100 	.word	0x50000100

080013b0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08a      	sub	sp, #40	; 0x28
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80013b6:	f107 031c 	add.w	r3, r7, #28
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
 80013d0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80013d2:	4b2d      	ldr	r3, [pc, #180]	; (8001488 <MX_ADC3_Init+0xd8>)
 80013d4:	4a2d      	ldr	r2, [pc, #180]	; (800148c <MX_ADC3_Init+0xdc>)
 80013d6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80013d8:	4b2b      	ldr	r3, [pc, #172]	; (8001488 <MX_ADC3_Init+0xd8>)
 80013da:	2200      	movs	r2, #0
 80013dc:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80013de:	4b2a      	ldr	r3, [pc, #168]	; (8001488 <MX_ADC3_Init+0xd8>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013e4:	4b28      	ldr	r3, [pc, #160]	; (8001488 <MX_ADC3_Init+0xd8>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80013ea:	4b27      	ldr	r3, [pc, #156]	; (8001488 <MX_ADC3_Init+0xd8>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80013f0:	4b25      	ldr	r3, [pc, #148]	; (8001488 <MX_ADC3_Init+0xd8>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013f8:	4b23      	ldr	r3, [pc, #140]	; (8001488 <MX_ADC3_Init+0xd8>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013fe:	4b22      	ldr	r3, [pc, #136]	; (8001488 <MX_ADC3_Init+0xd8>)
 8001400:	2201      	movs	r2, #1
 8001402:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001404:	4b20      	ldr	r3, [pc, #128]	; (8001488 <MX_ADC3_Init+0xd8>)
 8001406:	2200      	movs	r2, #0
 8001408:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800140a:	4b1f      	ldr	r3, [pc, #124]	; (8001488 <MX_ADC3_Init+0xd8>)
 800140c:	2201      	movs	r2, #1
 800140e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001410:	4b1d      	ldr	r3, [pc, #116]	; (8001488 <MX_ADC3_Init+0xd8>)
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001418:	4b1b      	ldr	r3, [pc, #108]	; (8001488 <MX_ADC3_Init+0xd8>)
 800141a:	2204      	movs	r2, #4
 800141c:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800141e:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <MX_ADC3_Init+0xd8>)
 8001420:	2200      	movs	r2, #0
 8001422:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001424:	4b18      	ldr	r3, [pc, #96]	; (8001488 <MX_ADC3_Init+0xd8>)
 8001426:	2200      	movs	r2, #0
 8001428:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800142a:	4817      	ldr	r0, [pc, #92]	; (8001488 <MX_ADC3_Init+0xd8>)
 800142c:	f001 ff6a 	bl	8003304 <HAL_ADC_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 8001436:	f000 ff9d 	bl	8002374 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800143a:	2300      	movs	r3, #0
 800143c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800143e:	f107 031c 	add.w	r3, r7, #28
 8001442:	4619      	mov	r1, r3
 8001444:	4810      	ldr	r0, [pc, #64]	; (8001488 <MX_ADC3_Init+0xd8>)
 8001446:	f003 fb81 	bl	8004b4c <HAL_ADCEx_MultiModeConfigChannel>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 8001450:	f000 ff90 	bl	8002374 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001454:	2301      	movs	r3, #1
 8001456:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001458:	2301      	movs	r3, #1
 800145a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800145c:	2300      	movs	r3, #0
 800145e:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES_5;
 8001460:	2302      	movs	r3, #2
 8001462:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	4619      	mov	r1, r3
 8001470:	4805      	ldr	r0, [pc, #20]	; (8001488 <MX_ADC3_Init+0xd8>)
 8001472:	f003 f881 	bl	8004578 <HAL_ADC_ConfigChannel>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 800147c:	f000 ff7a 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001480:	bf00      	nop
 8001482:	3728      	adds	r7, #40	; 0x28
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000134 	.word	0x20000134
 800148c:	50000400 	.word	0x50000400

08001490 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001494:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <MX_I2C1_Init+0x74>)
 8001496:	4a1c      	ldr	r2, [pc, #112]	; (8001508 <MX_I2C1_Init+0x78>)
 8001498:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800149a:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <MX_I2C1_Init+0x74>)
 800149c:	4a1b      	ldr	r2, [pc, #108]	; (800150c <MX_I2C1_Init+0x7c>)
 800149e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 36;
 80014a0:	4b18      	ldr	r3, [pc, #96]	; (8001504 <MX_I2C1_Init+0x74>)
 80014a2:	2224      	movs	r2, #36	; 0x24
 80014a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014a6:	4b17      	ldr	r3, [pc, #92]	; (8001504 <MX_I2C1_Init+0x74>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014ac:	4b15      	ldr	r3, [pc, #84]	; (8001504 <MX_I2C1_Init+0x74>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014b2:	4b14      	ldr	r3, [pc, #80]	; (8001504 <MX_I2C1_Init+0x74>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014b8:	4b12      	ldr	r3, [pc, #72]	; (8001504 <MX_I2C1_Init+0x74>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014be:	4b11      	ldr	r3, [pc, #68]	; (8001504 <MX_I2C1_Init+0x74>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014c4:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <MX_I2C1_Init+0x74>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014ca:	480e      	ldr	r0, [pc, #56]	; (8001504 <MX_I2C1_Init+0x74>)
 80014cc:	f004 fb2e 	bl	8005b2c <HAL_I2C_Init>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80014d6:	f000 ff4d 	bl	8002374 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014da:	2100      	movs	r1, #0
 80014dc:	4809      	ldr	r0, [pc, #36]	; (8001504 <MX_I2C1_Init+0x74>)
 80014de:	f005 f831 	bl	8006544 <HAL_I2CEx_ConfigAnalogFilter>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80014e8:	f000 ff44 	bl	8002374 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014ec:	2100      	movs	r1, #0
 80014ee:	4805      	ldr	r0, [pc, #20]	; (8001504 <MX_I2C1_Init+0x74>)
 80014f0:	f005 f873 	bl	80065da <HAL_I2CEx_ConfigDigitalFilter>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80014fa:	f000 ff3b 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	200001c8 	.word	0x200001c8
 8001508:	40005400 	.word	0x40005400
 800150c:	2000090e 	.word	0x2000090e

08001510 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001516:	1d3b      	adds	r3, r7, #4
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001524:	2300      	movs	r3, #0
 8001526:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001528:	4b24      	ldr	r3, [pc, #144]	; (80015bc <MX_RTC_Init+0xac>)
 800152a:	4a25      	ldr	r2, [pc, #148]	; (80015c0 <MX_RTC_Init+0xb0>)
 800152c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800152e:	4b23      	ldr	r3, [pc, #140]	; (80015bc <MX_RTC_Init+0xac>)
 8001530:	2200      	movs	r2, #0
 8001532:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001534:	4b21      	ldr	r3, [pc, #132]	; (80015bc <MX_RTC_Init+0xac>)
 8001536:	227f      	movs	r2, #127	; 0x7f
 8001538:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 311;
 800153a:	4b20      	ldr	r3, [pc, #128]	; (80015bc <MX_RTC_Init+0xac>)
 800153c:	f240 1237 	movw	r2, #311	; 0x137
 8001540:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001542:	4b1e      	ldr	r3, [pc, #120]	; (80015bc <MX_RTC_Init+0xac>)
 8001544:	2200      	movs	r2, #0
 8001546:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001548:	4b1c      	ldr	r3, [pc, #112]	; (80015bc <MX_RTC_Init+0xac>)
 800154a:	2200      	movs	r2, #0
 800154c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800154e:	4b1b      	ldr	r3, [pc, #108]	; (80015bc <MX_RTC_Init+0xac>)
 8001550:	2200      	movs	r2, #0
 8001552:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001554:	4819      	ldr	r0, [pc, #100]	; (80015bc <MX_RTC_Init+0xac>)
 8001556:	f006 fcb1 	bl	8007ebc <HAL_RTC_Init>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8001560:	f000 ff08 	bl	8002374 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x9;
 8001564:	2309      	movs	r3, #9
 8001566:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001568:	2300      	movs	r3, #0
 800156a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800156c:	2300      	movs	r3, #0
 800156e:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001570:	2300      	movs	r3, #0
 8001572:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001578:	1d3b      	adds	r3, r7, #4
 800157a:	2201      	movs	r2, #1
 800157c:	4619      	mov	r1, r3
 800157e:	480f      	ldr	r0, [pc, #60]	; (80015bc <MX_RTC_Init+0xac>)
 8001580:	f006 fd1f 	bl	8007fc2 <HAL_RTC_SetTime>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 800158a:	f000 fef3 	bl	8002374 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800158e:	2301      	movs	r3, #1
 8001590:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JUNE;
 8001592:	2306      	movs	r3, #6
 8001594:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001596:	2301      	movs	r3, #1
 8001598:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800159a:	2300      	movs	r3, #0
 800159c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800159e:	463b      	mov	r3, r7
 80015a0:	2201      	movs	r2, #1
 80015a2:	4619      	mov	r1, r3
 80015a4:	4805      	ldr	r0, [pc, #20]	; (80015bc <MX_RTC_Init+0xac>)
 80015a6:	f006 fe04 	bl	80081b2 <HAL_RTC_SetDate>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 80015b0:	f000 fee0 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80015b4:	bf00      	nop
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	2000021c 	.word	0x2000021c
 80015c0:	40002800 	.word	0x40002800

080015c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b09a      	sub	sp, #104	; 0x68
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]
 80015f4:	615a      	str	r2, [r3, #20]
 80015f6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	222c      	movs	r2, #44	; 0x2c
 80015fc:	2100      	movs	r1, #0
 80015fe:	4618      	mov	r0, r3
 8001600:	f00a fa18 	bl	800ba34 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001604:	4b4a      	ldr	r3, [pc, #296]	; (8001730 <MX_TIM1_Init+0x16c>)
 8001606:	4a4b      	ldr	r2, [pc, #300]	; (8001734 <MX_TIM1_Init+0x170>)
 8001608:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800160a:	4b49      	ldr	r3, [pc, #292]	; (8001730 <MX_TIM1_Init+0x16c>)
 800160c:	2200      	movs	r2, #0
 800160e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001610:	4b47      	ldr	r3, [pc, #284]	; (8001730 <MX_TIM1_Init+0x16c>)
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8001616:	4b46      	ldr	r3, [pc, #280]	; (8001730 <MX_TIM1_Init+0x16c>)
 8001618:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800161c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800161e:	4b44      	ldr	r3, [pc, #272]	; (8001730 <MX_TIM1_Init+0x16c>)
 8001620:	2200      	movs	r2, #0
 8001622:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001624:	4b42      	ldr	r3, [pc, #264]	; (8001730 <MX_TIM1_Init+0x16c>)
 8001626:	2200      	movs	r2, #0
 8001628:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800162a:	4b41      	ldr	r3, [pc, #260]	; (8001730 <MX_TIM1_Init+0x16c>)
 800162c:	2280      	movs	r2, #128	; 0x80
 800162e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001630:	483f      	ldr	r0, [pc, #252]	; (8001730 <MX_TIM1_Init+0x16c>)
 8001632:	f006 ff4f 	bl	80084d4 <HAL_TIM_Base_Init>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800163c:	f000 fe9a 	bl	8002374 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001640:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001644:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001646:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800164a:	4619      	mov	r1, r3
 800164c:	4838      	ldr	r0, [pc, #224]	; (8001730 <MX_TIM1_Init+0x16c>)
 800164e:	f007 fe9d 	bl	800938c <HAL_TIM_ConfigClockSource>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001658:	f000 fe8c 	bl	8002374 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800165c:	4834      	ldr	r0, [pc, #208]	; (8001730 <MX_TIM1_Init+0x16c>)
 800165e:	f007 f82a 	bl	80086b6 <HAL_TIM_PWM_Init>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001668:	f000 fe84 	bl	8002374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800166c:	2300      	movs	r3, #0
 800166e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001670:	2300      	movs	r3, #0
 8001672:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001674:	2300      	movs	r3, #0
 8001676:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001678:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800167c:	4619      	mov	r1, r3
 800167e:	482c      	ldr	r0, [pc, #176]	; (8001730 <MX_TIM1_Init+0x16c>)
 8001680:	f008 fe06 	bl	800a290 <HAL_TIMEx_MasterConfigSynchronization>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800168a:	f000 fe73 	bl	8002374 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800168e:	2360      	movs	r3, #96	; 0x60
 8001690:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1000;
 8001692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001696:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001698:	2300      	movs	r3, #0
 800169a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800169c:	2300      	movs	r3, #0
 800169e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80016a0:	2304      	movs	r3, #4
 80016a2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016a4:	2300      	movs	r3, #0
 80016a6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016a8:	2300      	movs	r3, #0
 80016aa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016b0:	2200      	movs	r2, #0
 80016b2:	4619      	mov	r1, r3
 80016b4:	481e      	ldr	r0, [pc, #120]	; (8001730 <MX_TIM1_Init+0x16c>)
 80016b6:	f007 fd55 	bl	8009164 <HAL_TIM_PWM_ConfigChannel>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80016c0:	f000 fe58 	bl	8002374 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016c8:	2204      	movs	r2, #4
 80016ca:	4619      	mov	r1, r3
 80016cc:	4818      	ldr	r0, [pc, #96]	; (8001730 <MX_TIM1_Init+0x16c>)
 80016ce:	f007 fd49 	bl	8009164 <HAL_TIM_PWM_ConfigChannel>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 80016d8:	f000 fe4c 	bl	8002374 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016dc:	2300      	movs	r3, #0
 80016de:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016e0:	2300      	movs	r3, #0
 80016e2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016e4:	2300      	movs	r3, #0
 80016e6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 100;
 80016e8:	2364      	movs	r3, #100	; 0x64
 80016ea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016f4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80016fa:	2300      	movs	r3, #0
 80016fc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80016fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001702:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001704:	2300      	movs	r3, #0
 8001706:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001708:	2300      	movs	r3, #0
 800170a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800170c:	1d3b      	adds	r3, r7, #4
 800170e:	4619      	mov	r1, r3
 8001710:	4807      	ldr	r0, [pc, #28]	; (8001730 <MX_TIM1_Init+0x16c>)
 8001712:	f008 fe3d 	bl	800a390 <HAL_TIMEx_ConfigBreakDeadTime>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 800171c:	f000 fe2a 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001720:	4803      	ldr	r0, [pc, #12]	; (8001730 <MX_TIM1_Init+0x16c>)
 8001722:	f001 fa95 	bl	8002c50 <HAL_TIM_MspPostInit>

}
 8001726:	bf00      	nop
 8001728:	3768      	adds	r7, #104	; 0x68
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	2000023c 	.word	0x2000023c
 8001734:	40012c00 	.word	0x40012c00

08001738 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08c      	sub	sp, #48	; 0x30
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800173e:	f107 0320 	add.w	r3, r7, #32
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800174c:	f107 0314 	add.w	r3, r7, #20
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001758:	1d3b      	adds	r3, r7, #4
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	605a      	str	r2, [r3, #4]
 8001760:	609a      	str	r2, [r3, #8]
 8001762:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001764:	4b33      	ldr	r3, [pc, #204]	; (8001834 <MX_TIM2_Init+0xfc>)
 8001766:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800176a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800176c:	4b31      	ldr	r3, [pc, #196]	; (8001834 <MX_TIM2_Init+0xfc>)
 800176e:	2200      	movs	r2, #0
 8001770:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001772:	4b30      	ldr	r3, [pc, #192]	; (8001834 <MX_TIM2_Init+0xfc>)
 8001774:	2200      	movs	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64000000;
 8001778:	4b2e      	ldr	r3, [pc, #184]	; (8001834 <MX_TIM2_Init+0xfc>)
 800177a:	4a2f      	ldr	r2, [pc, #188]	; (8001838 <MX_TIM2_Init+0x100>)
 800177c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800177e:	4b2d      	ldr	r3, [pc, #180]	; (8001834 <MX_TIM2_Init+0xfc>)
 8001780:	2200      	movs	r2, #0
 8001782:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001784:	4b2b      	ldr	r3, [pc, #172]	; (8001834 <MX_TIM2_Init+0xfc>)
 8001786:	2200      	movs	r2, #0
 8001788:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800178a:	482a      	ldr	r0, [pc, #168]	; (8001834 <MX_TIM2_Init+0xfc>)
 800178c:	f006 fea2 	bl	80084d4 <HAL_TIM_Base_Init>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001796:	f000 fded 	bl	8002374 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800179a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800179e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017a0:	f107 0320 	add.w	r3, r7, #32
 80017a4:	4619      	mov	r1, r3
 80017a6:	4823      	ldr	r0, [pc, #140]	; (8001834 <MX_TIM2_Init+0xfc>)
 80017a8:	f007 fdf0 	bl	800938c <HAL_TIM_ConfigClockSource>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80017b2:	f000 fddf 	bl	8002374 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80017b6:	481f      	ldr	r0, [pc, #124]	; (8001834 <MX_TIM2_Init+0xfc>)
 80017b8:	f007 f974 	bl	8008aa4 <HAL_TIM_IC_Init>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80017c2:	f000 fdd7 	bl	8002374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017ce:	f107 0314 	add.w	r3, r7, #20
 80017d2:	4619      	mov	r1, r3
 80017d4:	4817      	ldr	r0, [pc, #92]	; (8001834 <MX_TIM2_Init+0xfc>)
 80017d6:	f008 fd5b 	bl	800a290 <HAL_TIMEx_MasterConfigSynchronization>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80017e0:	f000 fdc8 	bl	8002374 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80017e4:	2300      	movs	r3, #0
 80017e6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80017e8:	2301      	movs	r3, #1
 80017ea:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80017ec:	2300      	movs	r3, #0
 80017ee:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 12;
 80017f0:	230c      	movs	r3, #12
 80017f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80017f4:	1d3b      	adds	r3, r7, #4
 80017f6:	2200      	movs	r2, #0
 80017f8:	4619      	mov	r1, r3
 80017fa:	480e      	ldr	r0, [pc, #56]	; (8001834 <MX_TIM2_Init+0xfc>)
 80017fc:	f007 fc15 	bl	800902a <HAL_TIM_IC_ConfigChannel>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001806:	f000 fdb5 	bl	8002374 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800180a:	2302      	movs	r3, #2
 800180c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800180e:	2302      	movs	r3, #2
 8001810:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001816:	1d3b      	adds	r3, r7, #4
 8001818:	2204      	movs	r2, #4
 800181a:	4619      	mov	r1, r3
 800181c:	4805      	ldr	r0, [pc, #20]	; (8001834 <MX_TIM2_Init+0xfc>)
 800181e:	f007 fc04 	bl	800902a <HAL_TIM_IC_ConfigChannel>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_TIM2_Init+0xf4>
  {
    Error_Handler();
 8001828:	f000 fda4 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800182c:	bf00      	nop
 800182e:	3730      	adds	r7, #48	; 0x30
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20000288 	.word	0x20000288
 8001838:	03d09000 	.word	0x03d09000

0800183c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b088      	sub	sp, #32
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001842:	f107 0310 	add.w	r3, r7, #16
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	605a      	str	r2, [r3, #4]
 800184c:	609a      	str	r2, [r3, #8]
 800184e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001850:	1d3b      	adds	r3, r7, #4
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	605a      	str	r2, [r3, #4]
 8001858:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800185a:	4b1d      	ldr	r3, [pc, #116]	; (80018d0 <MX_TIM3_Init+0x94>)
 800185c:	4a1d      	ldr	r2, [pc, #116]	; (80018d4 <MX_TIM3_Init+0x98>)
 800185e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001860:	4b1b      	ldr	r3, [pc, #108]	; (80018d0 <MX_TIM3_Init+0x94>)
 8001862:	2200      	movs	r2, #0
 8001864:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001866:	4b1a      	ldr	r3, [pc, #104]	; (80018d0 <MX_TIM3_Init+0x94>)
 8001868:	2200      	movs	r2, #0
 800186a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800186c:	4b18      	ldr	r3, [pc, #96]	; (80018d0 <MX_TIM3_Init+0x94>)
 800186e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001872:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001874:	4b16      	ldr	r3, [pc, #88]	; (80018d0 <MX_TIM3_Init+0x94>)
 8001876:	2200      	movs	r2, #0
 8001878:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800187a:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <MX_TIM3_Init+0x94>)
 800187c:	2280      	movs	r2, #128	; 0x80
 800187e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001880:	4813      	ldr	r0, [pc, #76]	; (80018d0 <MX_TIM3_Init+0x94>)
 8001882:	f006 fe27 	bl	80084d4 <HAL_TIM_Base_Init>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800188c:	f000 fd72 	bl	8002374 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001894:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001896:	f107 0310 	add.w	r3, r7, #16
 800189a:	4619      	mov	r1, r3
 800189c:	480c      	ldr	r0, [pc, #48]	; (80018d0 <MX_TIM3_Init+0x94>)
 800189e:	f007 fd75 	bl	800938c <HAL_TIM_ConfigClockSource>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80018a8:	f000 fd64 	bl	8002374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ac:	2300      	movs	r3, #0
 80018ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018b0:	2300      	movs	r3, #0
 80018b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018b4:	1d3b      	adds	r3, r7, #4
 80018b6:	4619      	mov	r1, r3
 80018b8:	4805      	ldr	r0, [pc, #20]	; (80018d0 <MX_TIM3_Init+0x94>)
 80018ba:	f008 fce9 	bl	800a290 <HAL_TIMEx_MasterConfigSynchronization>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80018c4:	f000 fd56 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018c8:	bf00      	nop
 80018ca:	3720      	adds	r7, #32
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	200002d4 	.word	0x200002d4
 80018d4:	40000400 	.word	0x40000400

080018d8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b088      	sub	sp, #32
 80018dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018de:	f107 0310 	add.w	r3, r7, #16
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	605a      	str	r2, [r3, #4]
 80018e8:	609a      	str	r2, [r3, #8]
 80018ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ec:	1d3b      	adds	r3, r7, #4
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80018f6:	4b1d      	ldr	r3, [pc, #116]	; (800196c <MX_TIM4_Init+0x94>)
 80018f8:	4a1d      	ldr	r2, [pc, #116]	; (8001970 <MX_TIM4_Init+0x98>)
 80018fa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80018fc:	4b1b      	ldr	r3, [pc, #108]	; (800196c <MX_TIM4_Init+0x94>)
 80018fe:	2200      	movs	r2, #0
 8001900:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001902:	4b1a      	ldr	r3, [pc, #104]	; (800196c <MX_TIM4_Init+0x94>)
 8001904:	2200      	movs	r2, #0
 8001906:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001908:	4b18      	ldr	r3, [pc, #96]	; (800196c <MX_TIM4_Init+0x94>)
 800190a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800190e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001910:	4b16      	ldr	r3, [pc, #88]	; (800196c <MX_TIM4_Init+0x94>)
 8001912:	2200      	movs	r2, #0
 8001914:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001916:	4b15      	ldr	r3, [pc, #84]	; (800196c <MX_TIM4_Init+0x94>)
 8001918:	2280      	movs	r2, #128	; 0x80
 800191a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800191c:	4813      	ldr	r0, [pc, #76]	; (800196c <MX_TIM4_Init+0x94>)
 800191e:	f006 fdd9 	bl	80084d4 <HAL_TIM_Base_Init>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001928:	f000 fd24 	bl	8002374 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800192c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001930:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001932:	f107 0310 	add.w	r3, r7, #16
 8001936:	4619      	mov	r1, r3
 8001938:	480c      	ldr	r0, [pc, #48]	; (800196c <MX_TIM4_Init+0x94>)
 800193a:	f007 fd27 	bl	800938c <HAL_TIM_ConfigClockSource>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001944:	f000 fd16 	bl	8002374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001948:	2300      	movs	r3, #0
 800194a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800194c:	2300      	movs	r3, #0
 800194e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001950:	1d3b      	adds	r3, r7, #4
 8001952:	4619      	mov	r1, r3
 8001954:	4805      	ldr	r0, [pc, #20]	; (800196c <MX_TIM4_Init+0x94>)
 8001956:	f008 fc9b 	bl	800a290 <HAL_TIMEx_MasterConfigSynchronization>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001960:	f000 fd08 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001964:	bf00      	nop
 8001966:	3720      	adds	r7, #32
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20000320 	.word	0x20000320
 8001970:	40000800 	.word	0x40000800

08001974 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b09a      	sub	sp, #104	; 0x68
 8001978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800197a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	605a      	str	r2, [r3, #4]
 8001984:	609a      	str	r2, [r3, #8]
 8001986:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001988:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001994:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]
 80019a2:	611a      	str	r2, [r3, #16]
 80019a4:	615a      	str	r2, [r3, #20]
 80019a6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019a8:	1d3b      	adds	r3, r7, #4
 80019aa:	222c      	movs	r2, #44	; 0x2c
 80019ac:	2100      	movs	r1, #0
 80019ae:	4618      	mov	r0, r3
 80019b0:	f00a f840 	bl	800ba34 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80019b4:	4b44      	ldr	r3, [pc, #272]	; (8001ac8 <MX_TIM8_Init+0x154>)
 80019b6:	4a45      	ldr	r2, [pc, #276]	; (8001acc <MX_TIM8_Init+0x158>)
 80019b8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80019ba:	4b43      	ldr	r3, [pc, #268]	; (8001ac8 <MX_TIM8_Init+0x154>)
 80019bc:	2200      	movs	r2, #0
 80019be:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019c0:	4b41      	ldr	r3, [pc, #260]	; (8001ac8 <MX_TIM8_Init+0x154>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 2000;
 80019c6:	4b40      	ldr	r3, [pc, #256]	; (8001ac8 <MX_TIM8_Init+0x154>)
 80019c8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80019cc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ce:	4b3e      	ldr	r3, [pc, #248]	; (8001ac8 <MX_TIM8_Init+0x154>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80019d4:	4b3c      	ldr	r3, [pc, #240]	; (8001ac8 <MX_TIM8_Init+0x154>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019da:	4b3b      	ldr	r3, [pc, #236]	; (8001ac8 <MX_TIM8_Init+0x154>)
 80019dc:	2280      	movs	r2, #128	; 0x80
 80019de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80019e0:	4839      	ldr	r0, [pc, #228]	; (8001ac8 <MX_TIM8_Init+0x154>)
 80019e2:	f006 fd77 	bl	80084d4 <HAL_TIM_Base_Init>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80019ec:	f000 fcc2 	bl	8002374 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019f4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80019f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80019fa:	4619      	mov	r1, r3
 80019fc:	4832      	ldr	r0, [pc, #200]	; (8001ac8 <MX_TIM8_Init+0x154>)
 80019fe:	f007 fcc5 	bl	800938c <HAL_TIM_ConfigClockSource>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001a08:	f000 fcb4 	bl	8002374 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001a0c:	482e      	ldr	r0, [pc, #184]	; (8001ac8 <MX_TIM8_Init+0x154>)
 8001a0e:	f006 fe52 	bl	80086b6 <HAL_TIM_PWM_Init>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001a18:	f000 fcac 	bl	8002374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a20:	2300      	movs	r3, #0
 8001a22:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a24:	2300      	movs	r3, #0
 8001a26:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001a28:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4826      	ldr	r0, [pc, #152]	; (8001ac8 <MX_TIM8_Init+0x154>)
 8001a30:	f008 fc2e 	bl	800a290 <HAL_TIMEx_MasterConfigSynchronization>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8001a3a:	f000 fc9b 	bl	8002374 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a3e:	2360      	movs	r3, #96	; 0x60
 8001a40:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1000;
 8001a42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a46:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a50:	2300      	movs	r3, #0
 8001a52:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a54:	2300      	movs	r3, #0
 8001a56:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a5c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a60:	2200      	movs	r2, #0
 8001a62:	4619      	mov	r1, r3
 8001a64:	4818      	ldr	r0, [pc, #96]	; (8001ac8 <MX_TIM8_Init+0x154>)
 8001a66:	f007 fb7d 	bl	8009164 <HAL_TIM_PWM_ConfigChannel>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8001a70:	f000 fc80 	bl	8002374 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a74:	2300      	movs	r3, #0
 8001a76:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 100;
 8001a80:	2364      	movs	r3, #100	; 0x64
 8001a82:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a8c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a92:	2300      	movs	r3, #0
 8001a94:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a9a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001aa4:	1d3b      	adds	r3, r7, #4
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4807      	ldr	r0, [pc, #28]	; (8001ac8 <MX_TIM8_Init+0x154>)
 8001aaa:	f008 fc71 	bl	800a390 <HAL_TIMEx_ConfigBreakDeadTime>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_TIM8_Init+0x144>
  {
    Error_Handler();
 8001ab4:	f000 fc5e 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001ab8:	4803      	ldr	r0, [pc, #12]	; (8001ac8 <MX_TIM8_Init+0x154>)
 8001aba:	f001 f8c9 	bl	8002c50 <HAL_TIM_MspPostInit>

}
 8001abe:	bf00      	nop
 8001ac0:	3768      	adds	r7, #104	; 0x68
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	2000036c 	.word	0x2000036c
 8001acc:	40013400 	.word	0x40013400

08001ad0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b09a      	sub	sp, #104	; 0x68
 8001ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ad6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]
 8001ae0:	609a      	str	r2, [r3, #8]
 8001ae2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001af0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]
 8001b00:	615a      	str	r2, [r3, #20]
 8001b02:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b04:	1d3b      	adds	r3, r7, #4
 8001b06:	222c      	movs	r2, #44	; 0x2c
 8001b08:	2100      	movs	r1, #0
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f009 ff92 	bl	800ba34 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001b10:	4b3f      	ldr	r3, [pc, #252]	; (8001c10 <MX_TIM15_Init+0x140>)
 8001b12:	4a40      	ldr	r2, [pc, #256]	; (8001c14 <MX_TIM15_Init+0x144>)
 8001b14:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001b16:	4b3e      	ldr	r3, [pc, #248]	; (8001c10 <MX_TIM15_Init+0x140>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b1c:	4b3c      	ldr	r3, [pc, #240]	; (8001c10 <MX_TIM15_Init+0x140>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 2000;
 8001b22:	4b3b      	ldr	r3, [pc, #236]	; (8001c10 <MX_TIM15_Init+0x140>)
 8001b24:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001b28:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b2a:	4b39      	ldr	r3, [pc, #228]	; (8001c10 <MX_TIM15_Init+0x140>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001b30:	4b37      	ldr	r3, [pc, #220]	; (8001c10 <MX_TIM15_Init+0x140>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b36:	4b36      	ldr	r3, [pc, #216]	; (8001c10 <MX_TIM15_Init+0x140>)
 8001b38:	2280      	movs	r2, #128	; 0x80
 8001b3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001b3c:	4834      	ldr	r0, [pc, #208]	; (8001c10 <MX_TIM15_Init+0x140>)
 8001b3e:	f006 fcc9 	bl	80084d4 <HAL_TIM_Base_Init>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8001b48:	f000 fc14 	bl	8002374 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b50:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001b52:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b56:	4619      	mov	r1, r3
 8001b58:	482d      	ldr	r0, [pc, #180]	; (8001c10 <MX_TIM15_Init+0x140>)
 8001b5a:	f007 fc17 	bl	800938c <HAL_TIM_ConfigClockSource>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8001b64:	f000 fc06 	bl	8002374 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001b68:	4829      	ldr	r0, [pc, #164]	; (8001c10 <MX_TIM15_Init+0x140>)
 8001b6a:	f006 fda4 	bl	80086b6 <HAL_TIM_PWM_Init>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8001b74:	f000 fbfe 	bl	8002374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001b80:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b84:	4619      	mov	r1, r3
 8001b86:	4822      	ldr	r0, [pc, #136]	; (8001c10 <MX_TIM15_Init+0x140>)
 8001b88:	f008 fb82 	bl	800a290 <HAL_TIMEx_MasterConfigSynchronization>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8001b92:	f000 fbef 	bl	8002374 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b96:	2360      	movs	r3, #96	; 0x60
 8001b98:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1000;
 8001b9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b9e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bac:	2300      	movs	r3, #0
 8001bae:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bb4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bb8:	2200      	movs	r2, #0
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4814      	ldr	r0, [pc, #80]	; (8001c10 <MX_TIM15_Init+0x140>)
 8001bbe:	f007 fad1 	bl	8009164 <HAL_TIM_PWM_ConfigChannel>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8001bc8:	f000 fbd4 	bl	8002374 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 100;
 8001bd8:	2364      	movs	r3, #100	; 0x64
 8001bda:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001be0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001be4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bea:	2300      	movs	r3, #0
 8001bec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001bee:	1d3b      	adds	r3, r7, #4
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4807      	ldr	r0, [pc, #28]	; (8001c10 <MX_TIM15_Init+0x140>)
 8001bf4:	f008 fbcc 	bl	800a390 <HAL_TIMEx_ConfigBreakDeadTime>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8001bfe:	f000 fbb9 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001c02:	4803      	ldr	r0, [pc, #12]	; (8001c10 <MX_TIM15_Init+0x140>)
 8001c04:	f001 f824 	bl	8002c50 <HAL_TIM_MspPostInit>

}
 8001c08:	bf00      	nop
 8001c0a:	3768      	adds	r7, #104	; 0x68
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	200003b8 	.word	0x200003b8
 8001c14:	40014000 	.word	0x40014000

08001c18 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c1c:	4b14      	ldr	r3, [pc, #80]	; (8001c70 <MX_USART1_UART_Init+0x58>)
 8001c1e:	4a15      	ldr	r2, [pc, #84]	; (8001c74 <MX_USART1_UART_Init+0x5c>)
 8001c20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001c22:	4b13      	ldr	r3, [pc, #76]	; (8001c70 <MX_USART1_UART_Init+0x58>)
 8001c24:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c2a:	4b11      	ldr	r3, [pc, #68]	; (8001c70 <MX_USART1_UART_Init+0x58>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c30:	4b0f      	ldr	r3, [pc, #60]	; (8001c70 <MX_USART1_UART_Init+0x58>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c36:	4b0e      	ldr	r3, [pc, #56]	; (8001c70 <MX_USART1_UART_Init+0x58>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <MX_USART1_UART_Init+0x58>)
 8001c3e:	220c      	movs	r2, #12
 8001c40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c42:	4b0b      	ldr	r3, [pc, #44]	; (8001c70 <MX_USART1_UART_Init+0x58>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c48:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <MX_USART1_UART_Init+0x58>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c4e:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <MX_USART1_UART_Init+0x58>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c54:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <MX_USART1_UART_Init+0x58>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c5a:	4805      	ldr	r0, [pc, #20]	; (8001c70 <MX_USART1_UART_Init+0x58>)
 8001c5c:	f008 fc59 	bl	800a512 <HAL_UART_Init>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001c66:	f000 fb85 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000404 	.word	0x20000404
 8001c74:	40013800 	.word	0x40013800

08001c78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c7c:	4b14      	ldr	r3, [pc, #80]	; (8001cd0 <MX_USART2_UART_Init+0x58>)
 8001c7e:	4a15      	ldr	r2, [pc, #84]	; (8001cd4 <MX_USART2_UART_Init+0x5c>)
 8001c80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8001c82:	4b13      	ldr	r3, [pc, #76]	; (8001cd0 <MX_USART2_UART_Init+0x58>)
 8001c84:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001c88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c8a:	4b11      	ldr	r3, [pc, #68]	; (8001cd0 <MX_USART2_UART_Init+0x58>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c90:	4b0f      	ldr	r3, [pc, #60]	; (8001cd0 <MX_USART2_UART_Init+0x58>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c96:	4b0e      	ldr	r3, [pc, #56]	; (8001cd0 <MX_USART2_UART_Init+0x58>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c9c:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <MX_USART2_UART_Init+0x58>)
 8001c9e:	220c      	movs	r2, #12
 8001ca0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ca2:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <MX_USART2_UART_Init+0x58>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ca8:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <MX_USART2_UART_Init+0x58>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cae:	4b08      	ldr	r3, [pc, #32]	; (8001cd0 <MX_USART2_UART_Init+0x58>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cb4:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <MX_USART2_UART_Init+0x58>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cba:	4805      	ldr	r0, [pc, #20]	; (8001cd0 <MX_USART2_UART_Init+0x58>)
 8001cbc:	f008 fc29 	bl	800a512 <HAL_UART_Init>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001cc6:	f000 fb55 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	2000048c 	.word	0x2000048c
 8001cd4:	40004400 	.word	0x40004400

08001cd8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001cde:	4b1a      	ldr	r3, [pc, #104]	; (8001d48 <MX_DMA_Init+0x70>)
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	4a19      	ldr	r2, [pc, #100]	; (8001d48 <MX_DMA_Init+0x70>)
 8001ce4:	f043 0302 	orr.w	r3, r3, #2
 8001ce8:	6153      	str	r3, [r2, #20]
 8001cea:	4b17      	ldr	r3, [pc, #92]	; (8001d48 <MX_DMA_Init+0x70>)
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	607b      	str	r3, [r7, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cf6:	4b14      	ldr	r3, [pc, #80]	; (8001d48 <MX_DMA_Init+0x70>)
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	4a13      	ldr	r2, [pc, #76]	; (8001d48 <MX_DMA_Init+0x70>)
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	6153      	str	r3, [r2, #20]
 8001d02:	4b11      	ldr	r3, [pc, #68]	; (8001d48 <MX_DMA_Init+0x70>)
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	603b      	str	r3, [r7, #0]
 8001d0c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	2100      	movs	r1, #0
 8001d12:	2010      	movs	r0, #16
 8001d14:	f003 facd 	bl	80052b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001d18:	2010      	movs	r0, #16
 8001d1a:	f003 fae6 	bl	80052ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001d1e:	2200      	movs	r2, #0
 8001d20:	2100      	movs	r1, #0
 8001d22:	2011      	movs	r0, #17
 8001d24:	f003 fac5 	bl	80052b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001d28:	2011      	movs	r0, #17
 8001d2a:	f003 fade 	bl	80052ea <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2100      	movs	r1, #0
 8001d32:	2038      	movs	r0, #56	; 0x38
 8001d34:	f003 fabd 	bl	80052b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8001d38:	2038      	movs	r0, #56	; 0x38
 8001d3a:	f003 fad6 	bl	80052ea <HAL_NVIC_EnableIRQ>

}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40021000 	.word	0x40021000

08001d4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b08a      	sub	sp, #40	; 0x28
 8001d50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d52:	f107 0314 	add.w	r3, r7, #20
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	605a      	str	r2, [r3, #4]
 8001d5c:	609a      	str	r2, [r3, #8]
 8001d5e:	60da      	str	r2, [r3, #12]
 8001d60:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d62:	4b64      	ldr	r3, [pc, #400]	; (8001ef4 <MX_GPIO_Init+0x1a8>)
 8001d64:	695b      	ldr	r3, [r3, #20]
 8001d66:	4a63      	ldr	r2, [pc, #396]	; (8001ef4 <MX_GPIO_Init+0x1a8>)
 8001d68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d6c:	6153      	str	r3, [r2, #20]
 8001d6e:	4b61      	ldr	r3, [pc, #388]	; (8001ef4 <MX_GPIO_Init+0x1a8>)
 8001d70:	695b      	ldr	r3, [r3, #20]
 8001d72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d76:	613b      	str	r3, [r7, #16]
 8001d78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d7a:	4b5e      	ldr	r3, [pc, #376]	; (8001ef4 <MX_GPIO_Init+0x1a8>)
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	4a5d      	ldr	r2, [pc, #372]	; (8001ef4 <MX_GPIO_Init+0x1a8>)
 8001d80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d84:	6153      	str	r3, [r2, #20]
 8001d86:	4b5b      	ldr	r3, [pc, #364]	; (8001ef4 <MX_GPIO_Init+0x1a8>)
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d92:	4b58      	ldr	r3, [pc, #352]	; (8001ef4 <MX_GPIO_Init+0x1a8>)
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	4a57      	ldr	r2, [pc, #348]	; (8001ef4 <MX_GPIO_Init+0x1a8>)
 8001d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d9c:	6153      	str	r3, [r2, #20]
 8001d9e:	4b55      	ldr	r3, [pc, #340]	; (8001ef4 <MX_GPIO_Init+0x1a8>)
 8001da0:	695b      	ldr	r3, [r3, #20]
 8001da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da6:	60bb      	str	r3, [r7, #8]
 8001da8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001daa:	4b52      	ldr	r3, [pc, #328]	; (8001ef4 <MX_GPIO_Init+0x1a8>)
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	4a51      	ldr	r2, [pc, #324]	; (8001ef4 <MX_GPIO_Init+0x1a8>)
 8001db0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001db4:	6153      	str	r3, [r2, #20]
 8001db6:	4b4f      	ldr	r3, [pc, #316]	; (8001ef4 <MX_GPIO_Init+0x1a8>)
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dbe:	607b      	str	r3, [r7, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001dc8:	484b      	ldr	r0, [pc, #300]	; (8001ef8 <MX_GPIO_Init+0x1ac>)
 8001dca:	f003 fe65 	bl	8005a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	2103      	movs	r1, #3
 8001dd2:	484a      	ldr	r0, [pc, #296]	; (8001efc <MX_GPIO_Init+0x1b0>)
 8001dd4:	f003 fe60 	bl	8005a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Port_2_Pin|Port_1_Pin|Port_3_Pin|Port_4_Pin, GPIO_PIN_RESET);
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 8001dde:	4848      	ldr	r0, [pc, #288]	; (8001f00 <MX_GPIO_Init+0x1b4>)
 8001de0:	f003 fe5a 	bl	8005a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Direct_GPIO_Port, Direct_Pin, GPIO_PIN_RESET);
 8001de4:	2200      	movs	r2, #0
 8001de6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dee:	f003 fe53 	bl	8005a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : START_Pin STOP_Pin */
  GPIO_InitStruct.Pin = START_Pin|STOP_Pin;
 8001df2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001df6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001df8:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001dfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e02:	f107 0314 	add.w	r3, r7, #20
 8001e06:	4619      	mov	r1, r3
 8001e08:	483b      	ldr	r0, [pc, #236]	; (8001ef8 <MX_GPIO_Init+0x1ac>)
 8001e0a:	f003 fcb3 	bl	8005774 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_1_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin;
 8001e0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e14:	2301      	movs	r3, #1
 8001e16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 8001e20:	f107 0314 	add.w	r3, r7, #20
 8001e24:	4619      	mov	r1, r3
 8001e26:	4834      	ldr	r0, [pc, #208]	; (8001ef8 <MX_GPIO_Init+0x1ac>)
 8001e28:	f003 fca4 	bl	8005774 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_2_Pin LED_3_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin|LED_3_Pin;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e30:	2301      	movs	r3, #1
 8001e32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e3c:	f107 0314 	add.w	r3, r7, #20
 8001e40:	4619      	mov	r1, r3
 8001e42:	482e      	ldr	r0, [pc, #184]	; (8001efc <MX_GPIO_Init+0x1b0>)
 8001e44:	f003 fc96 	bl	8005774 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_Pin */
  GPIO_InitStruct.Pin = INT_Pin;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001e4c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001e50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8001e56:	f107 0314 	add.w	r3, r7, #20
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e60:	f003 fc88 	bl	8005774 <HAL_GPIO_Init>

  /*Configure GPIO pins : Port_2_Pin Port_1_Pin Port_3_Pin Port_4_Pin */
  GPIO_InitStruct.Pin = Port_2_Pin|Port_1_Pin|Port_3_Pin|Port_4_Pin;
 8001e64:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001e68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e72:	2300      	movs	r3, #0
 8001e74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e76:	f107 0314 	add.w	r3, r7, #20
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4820      	ldr	r0, [pc, #128]	; (8001f00 <MX_GPIO_Init+0x1b4>)
 8001e7e:	f003 fc79 	bl	8005774 <HAL_GPIO_Init>

  /*Configure GPIO pin : Direct_Pin */
  GPIO_InitStruct.Pin = Direct_Pin;
 8001e82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e90:	2300      	movs	r3, #0
 8001e92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Direct_GPIO_Port, &GPIO_InitStruct);
 8001e94:	f107 0314 	add.w	r3, r7, #20
 8001e98:	4619      	mov	r1, r3
 8001e9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e9e:	f003 fc69 	bl	8005774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001ea2:	2320      	movs	r3, #32
 8001ea4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001ea6:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001eaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb0:	f107 0314 	add.w	r3, r7, #20
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4812      	ldr	r0, [pc, #72]	; (8001f00 <MX_GPIO_Init+0x1b4>)
 8001eb8:	f003 fc5c 	bl	8005774 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 4, 0);
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	2104      	movs	r1, #4
 8001ec0:	2007      	movs	r0, #7
 8001ec2:	f003 f9f6 	bl	80052b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001ec6:	2007      	movs	r0, #7
 8001ec8:	f003 fa0f 	bl	80052ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001ecc:	2200      	movs	r2, #0
 8001ece:	2105      	movs	r1, #5
 8001ed0:	2017      	movs	r0, #23
 8001ed2:	f003 f9ee 	bl	80052b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001ed6:	2017      	movs	r0, #23
 8001ed8:	f003 fa07 	bl	80052ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8001edc:	2200      	movs	r2, #0
 8001ede:	2103      	movs	r1, #3
 8001ee0:	2028      	movs	r0, #40	; 0x28
 8001ee2:	f003 f9e6 	bl	80052b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ee6:	2028      	movs	r0, #40	; 0x28
 8001ee8:	f003 f9ff 	bl	80052ea <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001eec:	bf00      	nop
 8001eee:	3728      	adds	r7, #40	; 0x28
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	48000800 	.word	0x48000800
 8001efc:	48001400 	.word	0x48001400
 8001f00:	48000400 	.word	0x48000400

08001f04 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f14:	f040 80be 	bne.w	8002094 <HAL_TIM_IC_CaptureCallback+0x190>
    {
        if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	7f1b      	ldrb	r3, [r3, #28]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d16b      	bne.n	8001ff8 <HAL_TIM_IC_CaptureCallback+0xf4>
        {


                    	 if(rpm>=1000){zenit=1;
 8001f20:	4b5e      	ldr	r3, [pc, #376]	; (800209c <HAL_TIM_IC_CaptureCallback+0x198>)
 8001f22:	881b      	ldrh	r3, [r3, #0]
 8001f24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f28:	d328      	bcc.n	8001f7c <HAL_TIM_IC_CaptureCallback+0x78>
 8001f2a:	4b5d      	ldr	r3, [pc, #372]	; (80020a0 <HAL_TIM_IC_CaptureCallback+0x19c>)
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	701a      	strb	r2, [r3, #0]

        	               TIM3->CNT = 0;
 8001f30:	4b5c      	ldr	r3, [pc, #368]	; (80020a4 <HAL_TIM_IC_CaptureCallback+0x1a0>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	625a      	str	r2, [r3, #36]	; 0x24
        	               TIM4->CNT = 0;
 8001f36:	4b5c      	ldr	r3, [pc, #368]	; (80020a8 <HAL_TIM_IC_CaptureCallback+0x1a4>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	625a      	str	r2, [r3, #36]	; 0x24
        	               TIM3->ARR = period-(period/20);
 8001f3c:	4b5b      	ldr	r3, [pc, #364]	; (80020ac <HAL_TIM_IC_CaptureCallback+0x1a8>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a5b      	ldr	r2, [pc, #364]	; (80020b0 <HAL_TIM_IC_CaptureCallback+0x1ac>)
 8001f42:	fb82 1203 	smull	r1, r2, r2, r3
 8001f46:	10d2      	asrs	r2, r2, #3
 8001f48:	17db      	asrs	r3, r3, #31
 8001f4a:	1a9a      	subs	r2, r3, r2
 8001f4c:	4b57      	ldr	r3, [pc, #348]	; (80020ac <HAL_TIM_IC_CaptureCallback+0x1a8>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	441a      	add	r2, r3
 8001f52:	4b54      	ldr	r3, [pc, #336]	; (80020a4 <HAL_TIM_IC_CaptureCallback+0x1a0>)
 8001f54:	62da      	str	r2, [r3, #44]	; 0x2c
        	               TIM4->ARR = (period/20);
 8001f56:	4b55      	ldr	r3, [pc, #340]	; (80020ac <HAL_TIM_IC_CaptureCallback+0x1a8>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a55      	ldr	r2, [pc, #340]	; (80020b0 <HAL_TIM_IC_CaptureCallback+0x1ac>)
 8001f5c:	fb82 1203 	smull	r1, r2, r2, r3
 8001f60:	10d2      	asrs	r2, r2, #3
 8001f62:	17db      	asrs	r3, r3, #31
 8001f64:	1ad2      	subs	r2, r2, r3
 8001f66:	4b50      	ldr	r3, [pc, #320]	; (80020a8 <HAL_TIM_IC_CaptureCallback+0x1a4>)
 8001f68:	62da      	str	r2, [r3, #44]	; 0x2c
        	               HAL_TIM_Base_Start_IT(&htim3);
 8001f6a:	4852      	ldr	r0, [pc, #328]	; (80020b4 <HAL_TIM_IC_CaptureCallback+0x1b0>)
 8001f6c:	f006 fb0a 	bl	8008584 <HAL_TIM_Base_Start_IT>
        	               HAL_TIM_Base_Start_IT(&htim4);
 8001f70:	4851      	ldr	r0, [pc, #324]	; (80020b8 <HAL_TIM_IC_CaptureCallback+0x1b4>)
 8001f72:	f006 fb07 	bl	8008584 <HAL_TIM_Base_Start_IT>
                    	   ch_state=1;
 8001f76:	4b51      	ldr	r3, [pc, #324]	; (80020bc <HAL_TIM_IC_CaptureCallback+0x1b8>)
 8001f78:	2201      	movs	r2, #1
 8001f7a:	701a      	strb	r2, [r3, #0]
                    	 }

        	 if(rpm<1000){ Chanel_1_TIM_3();
 8001f7c:	4b47      	ldr	r3, [pc, #284]	; (800209c <HAL_TIM_IC_CaptureCallback+0x198>)
 8001f7e:	881b      	ldrh	r3, [r3, #0]
 8001f80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f84:	d207      	bcs.n	8001f96 <HAL_TIM_IC_CaptureCallback+0x92>
 8001f86:	f7fe fb93 	bl	80006b0 <Chanel_1_TIM_3>
        	 HAL_TIM_Base_Stop_IT(&htim3);
 8001f8a:	484a      	ldr	r0, [pc, #296]	; (80020b4 <HAL_TIM_IC_CaptureCallback+0x1b0>)
 8001f8c:	f006 fb64 	bl	8008658 <HAL_TIM_Base_Stop_IT>
        	 HAL_TIM_Base_Stop_IT(&htim4);
 8001f90:	4849      	ldr	r0, [pc, #292]	; (80020b8 <HAL_TIM_IC_CaptureCallback+0x1b4>)
 8001f92:	f006 fb61 	bl	8008658 <HAL_TIM_Base_Stop_IT>

        	 }

        	 period = 0;
 8001f96:	4b45      	ldr	r3, [pc, #276]	; (80020ac <HAL_TIM_IC_CaptureCallback+0x1a8>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]

             TIM2->CNT = 0;
 8001f9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	625a      	str	r2, [r3, #36]	; 0x24

             period = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	4846      	ldr	r0, [pc, #280]	; (80020c0 <HAL_TIM_IC_CaptureCallback+0x1bc>)
 8001fa8:	f007 faba 	bl	8009520 <HAL_TIM_ReadCapturedValue>
 8001fac:	4603      	mov	r3, r0
 8001fae:	461a      	mov	r2, r3
 8001fb0:	4b3e      	ldr	r3, [pc, #248]	; (80020ac <HAL_TIM_IC_CaptureCallback+0x1a8>)
 8001fb2:	601a      	str	r2, [r3, #0]
             pulseWidth = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
 8001fb4:	2104      	movs	r1, #4
 8001fb6:	4842      	ldr	r0, [pc, #264]	; (80020c0 <HAL_TIM_IC_CaptureCallback+0x1bc>)
 8001fb8:	f007 fab2 	bl	8009520 <HAL_TIM_ReadCapturedValue>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	4b40      	ldr	r3, [pc, #256]	; (80020c4 <HAL_TIM_IC_CaptureCallback+0x1c0>)
 8001fc2:	801a      	strh	r2, [r3, #0]

             rpm= 480000000/period;
 8001fc4:	4b39      	ldr	r3, [pc, #228]	; (80020ac <HAL_TIM_IC_CaptureCallback+0x1a8>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a3f      	ldr	r2, [pc, #252]	; (80020c8 <HAL_TIM_IC_CaptureCallback+0x1c4>)
 8001fca:	fb92 f3f3 	sdiv	r3, r2, r3
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	4b32      	ldr	r3, [pc, #200]	; (800209c <HAL_TIM_IC_CaptureCallback+0x198>)
 8001fd2:	801a      	strh	r2, [r3, #0]
             f=32000000/period;
 8001fd4:	4b35      	ldr	r3, [pc, #212]	; (80020ac <HAL_TIM_IC_CaptureCallback+0x1a8>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a3c      	ldr	r2, [pc, #240]	; (80020cc <HAL_TIM_IC_CaptureCallback+0x1c8>)
 8001fda:	fb92 f3f3 	sdiv	r3, r2, r3
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	4b3b      	ldr	r3, [pc, #236]	; (80020d0 <HAL_TIM_IC_CaptureCallback+0x1cc>)
 8001fe2:	801a      	strh	r2, [r3, #0]

            if(rpm<1000){zenit=0; Chanel_1_TIM_4(); }
 8001fe4:	4b2d      	ldr	r3, [pc, #180]	; (800209c <HAL_TIM_IC_CaptureCallback+0x198>)
 8001fe6:	881b      	ldrh	r3, [r3, #0]
 8001fe8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fec:	d204      	bcs.n	8001ff8 <HAL_TIM_IC_CaptureCallback+0xf4>
 8001fee:	4b2c      	ldr	r3, [pc, #176]	; (80020a0 <HAL_TIM_IC_CaptureCallback+0x19c>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	701a      	strb	r2, [r3, #0]
 8001ff4:	f7fe fb90 	bl	8000718 <Chanel_1_TIM_4>
          }



        if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	7f1b      	ldrb	r3, [r3, #28]
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d149      	bne.n	8002094 <HAL_TIM_IC_CaptureCallback+0x190>
             {

        	 if(rpm>=1000){zenit=1;
 8002000:	4b26      	ldr	r3, [pc, #152]	; (800209c <HAL_TIM_IC_CaptureCallback+0x198>)
 8002002:	881b      	ldrh	r3, [r3, #0]
 8002004:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002008:	d32d      	bcc.n	8002066 <HAL_TIM_IC_CaptureCallback+0x162>
 800200a:	4b25      	ldr	r3, [pc, #148]	; (80020a0 <HAL_TIM_IC_CaptureCallback+0x19c>)
 800200c:	2201      	movs	r2, #1
 800200e:	701a      	strb	r2, [r3, #0]
        	    ch_state=2;
 8002010:	4b2a      	ldr	r3, [pc, #168]	; (80020bc <HAL_TIM_IC_CaptureCallback+0x1b8>)
 8002012:	2202      	movs	r2, #2
 8002014:	701a      	strb	r2, [r3, #0]
        	    TIM3->CNT = 0;
 8002016:	4b23      	ldr	r3, [pc, #140]	; (80020a4 <HAL_TIM_IC_CaptureCallback+0x1a0>)
 8002018:	2200      	movs	r2, #0
 800201a:	625a      	str	r2, [r3, #36]	; 0x24
        	    TIM4->CNT = 0;
 800201c:	4b22      	ldr	r3, [pc, #136]	; (80020a8 <HAL_TIM_IC_CaptureCallback+0x1a4>)
 800201e:	2200      	movs	r2, #0
 8002020:	625a      	str	r2, [r3, #36]	; 0x24
        	    TIM3->ARR = period-(period/20);
 8002022:	4b22      	ldr	r3, [pc, #136]	; (80020ac <HAL_TIM_IC_CaptureCallback+0x1a8>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a22      	ldr	r2, [pc, #136]	; (80020b0 <HAL_TIM_IC_CaptureCallback+0x1ac>)
 8002028:	fb82 1203 	smull	r1, r2, r2, r3
 800202c:	10d2      	asrs	r2, r2, #3
 800202e:	17db      	asrs	r3, r3, #31
 8002030:	1a9a      	subs	r2, r3, r2
 8002032:	4b1e      	ldr	r3, [pc, #120]	; (80020ac <HAL_TIM_IC_CaptureCallback+0x1a8>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	441a      	add	r2, r3
 8002038:	4b1a      	ldr	r3, [pc, #104]	; (80020a4 <HAL_TIM_IC_CaptureCallback+0x1a0>)
 800203a:	62da      	str	r2, [r3, #44]	; 0x2c
        	    TIM4->ARR = (period/20);
 800203c:	4b1b      	ldr	r3, [pc, #108]	; (80020ac <HAL_TIM_IC_CaptureCallback+0x1a8>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a1b      	ldr	r2, [pc, #108]	; (80020b0 <HAL_TIM_IC_CaptureCallback+0x1ac>)
 8002042:	fb82 1203 	smull	r1, r2, r2, r3
 8002046:	10d2      	asrs	r2, r2, #3
 8002048:	17db      	asrs	r3, r3, #31
 800204a:	1ad2      	subs	r2, r2, r3
 800204c:	4b16      	ldr	r3, [pc, #88]	; (80020a8 <HAL_TIM_IC_CaptureCallback+0x1a4>)
 800204e:	62da      	str	r2, [r3, #44]	; 0x2c
        	    HAL_TIM_Base_Start_IT(&htim3);
 8002050:	4818      	ldr	r0, [pc, #96]	; (80020b4 <HAL_TIM_IC_CaptureCallback+0x1b0>)
 8002052:	f006 fa97 	bl	8008584 <HAL_TIM_Base_Start_IT>
        	    HAL_TIM_Base_Start_IT(&htim4);
 8002056:	4818      	ldr	r0, [pc, #96]	; (80020b8 <HAL_TIM_IC_CaptureCallback+0x1b4>)
 8002058:	f006 fa94 	bl	8008584 <HAL_TIM_Base_Start_IT>

        	    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 800205c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002060:	481c      	ldr	r0, [pc, #112]	; (80020d4 <HAL_TIM_IC_CaptureCallback+0x1d0>)
 8002062:	f003 fd31 	bl	8005ac8 <HAL_GPIO_TogglePin>
        	 }

        	 if(rpm<1000){
 8002066:	4b0d      	ldr	r3, [pc, #52]	; (800209c <HAL_TIM_IC_CaptureCallback+0x198>)
 8002068:	881b      	ldrh	r3, [r3, #0]
 800206a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800206e:	d211      	bcs.n	8002094 <HAL_TIM_IC_CaptureCallback+0x190>


        	  Chanel_2_TIM_3();
 8002070:	f7fe fb38 	bl	80006e4 <Chanel_2_TIM_3>
        	  zenit=0;
 8002074:	4b0a      	ldr	r3, [pc, #40]	; (80020a0 <HAL_TIM_IC_CaptureCallback+0x19c>)
 8002076:	2200      	movs	r2, #0
 8002078:	701a      	strb	r2, [r3, #0]
        	  HAL_TIM_Base_Stop_IT(&htim3);
 800207a:	480e      	ldr	r0, [pc, #56]	; (80020b4 <HAL_TIM_IC_CaptureCallback+0x1b0>)
 800207c:	f006 faec 	bl	8008658 <HAL_TIM_Base_Stop_IT>
        	  HAL_TIM_Base_Stop_IT(&htim4);
 8002080:	480d      	ldr	r0, [pc, #52]	; (80020b8 <HAL_TIM_IC_CaptureCallback+0x1b4>)
 8002082:	f006 fae9 	bl	8008658 <HAL_TIM_Base_Stop_IT>
        	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8002086:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800208a:	4812      	ldr	r0, [pc, #72]	; (80020d4 <HAL_TIM_IC_CaptureCallback+0x1d0>)
 800208c:	f003 fd1c 	bl	8005ac8 <HAL_GPIO_TogglePin>
        	  Chanel_2_TIM_4();}
 8002090:	f7fe fb5c 	bl	800074c <Chanel_2_TIM_4>


        	                          }

    }
}
 8002094:	bf00      	nop
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	200005be 	.word	0x200005be
 80020a0:	200005b0 	.word	0x200005b0
 80020a4:	40000400 	.word	0x40000400
 80020a8:	40000800 	.word	0x40000800
 80020ac:	200005b8 	.word	0x200005b8
 80020b0:	66666667 	.word	0x66666667
 80020b4:	200002d4 	.word	0x200002d4
 80020b8:	20000320 	.word	0x20000320
 80020bc:	200005fa 	.word	0x200005fa
 80020c0:	20000288 	.word	0x20000288
 80020c4:	200005bc 	.word	0x200005bc
 80020c8:	1c9c3800 	.word	0x1c9c3800
 80020cc:	01e84800 	.word	0x01e84800
 80020d0:	200005c0 	.word	0x200005c0
 80020d4:	48000800 	.word	0x48000800

080020d8 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	80fb      	strh	r3, [r7, #6]
   if(GPIO_Pin == GPIO_PIN_13) // если прерывание поступило от ножки PC13
 80020e2:	88fb      	ldrh	r3, [r7, #6]
 80020e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020e8:	d149      	bne.n	800217e <HAL_GPIO_EXTI_Callback+0xa6>
   {
      // Переключение в противоположное состояние ножки
      // выхода для управления светодиодом (LED):
      HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 80020ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020ee:	487c      	ldr	r0, [pc, #496]	; (80022e0 <HAL_GPIO_EXTI_Callback+0x208>)
 80020f0:	f003 fcea 	bl	8005ac8 <HAL_GPIO_TogglePin>
      if (GPIO_PIN_RESET == HAL_GPIO_ReadPin (GPIOC, GPIO_PIN_13)){
 80020f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020f8:	4879      	ldr	r0, [pc, #484]	; (80022e0 <HAL_GPIO_EXTI_Callback+0x208>)
 80020fa:	f003 fcb5 	bl	8005a68 <HAL_GPIO_ReadPin>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d13c      	bne.n	800217e <HAL_GPIO_EXTI_Callback+0xa6>



            if((pwm_cmd>=0)&&(pwm_cmd<=19)&&(status==0)){
 8002104:	4b77      	ldr	r3, [pc, #476]	; (80022e4 <HAL_GPIO_EXTI_Callback+0x20c>)
 8002106:	881b      	ldrh	r3, [r3, #0]
 8002108:	4b76      	ldr	r3, [pc, #472]	; (80022e4 <HAL_GPIO_EXTI_Callback+0x20c>)
 800210a:	881b      	ldrh	r3, [r3, #0]
 800210c:	b29b      	uxth	r3, r3
 800210e:	2b13      	cmp	r3, #19
 8002110:	d81c      	bhi.n	800214c <HAL_GPIO_EXTI_Callback+0x74>
 8002112:	4b75      	ldr	r3, [pc, #468]	; (80022e8 <HAL_GPIO_EXTI_Callback+0x210>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d118      	bne.n	800214c <HAL_GPIO_EXTI_Callback+0x74>

            	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN); // RTC_FORMAT_BIN , RTC_FORMAT_BCD
 800211a:	2200      	movs	r2, #0
 800211c:	4973      	ldr	r1, [pc, #460]	; (80022ec <HAL_GPIO_EXTI_Callback+0x214>)
 800211e:	4874      	ldr	r0, [pc, #464]	; (80022f0 <HAL_GPIO_EXTI_Callback+0x218>)
 8002120:	f005 ffe9 	bl	80080f6 <HAL_RTC_GetTime>
            	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002124:	2200      	movs	r2, #0
 8002126:	4973      	ldr	r1, [pc, #460]	; (80022f4 <HAL_GPIO_EXTI_Callback+0x21c>)
 8002128:	4871      	ldr	r0, [pc, #452]	; (80022f0 <HAL_GPIO_EXTI_Callback+0x218>)
 800212a:	f006 f8c6 	bl	80082ba <HAL_RTC_GetDate>

            	hour=sTime.Hours;
 800212e:	4b6f      	ldr	r3, [pc, #444]	; (80022ec <HAL_GPIO_EXTI_Callback+0x214>)
 8002130:	781a      	ldrb	r2, [r3, #0]
 8002132:	4b71      	ldr	r3, [pc, #452]	; (80022f8 <HAL_GPIO_EXTI_Callback+0x220>)
 8002134:	701a      	strb	r2, [r3, #0]
            	min=sTime.Minutes;
 8002136:	4b6d      	ldr	r3, [pc, #436]	; (80022ec <HAL_GPIO_EXTI_Callback+0x214>)
 8002138:	785a      	ldrb	r2, [r3, #1]
 800213a:	4b70      	ldr	r3, [pc, #448]	; (80022fc <HAL_GPIO_EXTI_Callback+0x224>)
 800213c:	701a      	strb	r2, [r3, #0]
            	sec=sTime.Seconds;
 800213e:	4b6b      	ldr	r3, [pc, #428]	; (80022ec <HAL_GPIO_EXTI_Callback+0x214>)
 8002140:	789a      	ldrb	r2, [r3, #2]
 8002142:	4b6f      	ldr	r3, [pc, #444]	; (8002300 <HAL_GPIO_EXTI_Callback+0x228>)
 8002144:	701a      	strb	r2, [r3, #0]

            	status=1;
 8002146:	4b68      	ldr	r3, [pc, #416]	; (80022e8 <HAL_GPIO_EXTI_Callback+0x210>)
 8002148:	2201      	movs	r2, #1
 800214a:	701a      	strb	r2, [r3, #0]
            }

        		   pwm_cmd=pwm_cmd+10;
 800214c:	4b65      	ldr	r3, [pc, #404]	; (80022e4 <HAL_GPIO_EXTI_Callback+0x20c>)
 800214e:	881b      	ldrh	r3, [r3, #0]
 8002150:	b29b      	uxth	r3, r3
 8002152:	330a      	adds	r3, #10
 8002154:	b29a      	uxth	r2, r3
 8002156:	4b63      	ldr	r3, [pc, #396]	; (80022e4 <HAL_GPIO_EXTI_Callback+0x20c>)
 8002158:	801a      	strh	r2, [r3, #0]
        		   if(pwm_cmd>=1999){pwm_cmd=2000;}
 800215a:	4b62      	ldr	r3, [pc, #392]	; (80022e4 <HAL_GPIO_EXTI_Callback+0x20c>)
 800215c:	881b      	ldrh	r3, [r3, #0]
 800215e:	b29b      	uxth	r3, r3
 8002160:	f240 72ce 	movw	r2, #1998	; 0x7ce
 8002164:	4293      	cmp	r3, r2
 8002166:	d903      	bls.n	8002170 <HAL_GPIO_EXTI_Callback+0x98>
 8002168:	4b5e      	ldr	r3, [pc, #376]	; (80022e4 <HAL_GPIO_EXTI_Callback+0x20c>)
 800216a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800216e:	801a      	strh	r2, [r3, #0]
        		   pwm_tgr=4;
 8002170:	4b64      	ldr	r3, [pc, #400]	; (8002304 <HAL_GPIO_EXTI_Callback+0x22c>)
 8002172:	2204      	movs	r2, #4
 8002174:	701a      	strb	r2, [r3, #0]

        		   EXTI->PR = EXTI_PR_PR13;
 8002176:	4b64      	ldr	r3, [pc, #400]	; (8002308 <HAL_GPIO_EXTI_Callback+0x230>)
 8002178:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800217c:	615a      	str	r2, [r3, #20]


   }


   if(GPIO_Pin == GPIO_PIN_14) // если прерывание поступило от ножки PC14
 800217e:	88fb      	ldrh	r3, [r7, #6]
 8002180:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002184:	d149      	bne.n	800221a <HAL_GPIO_EXTI_Callback+0x142>
     {

	   if (GPIO_PIN_SET == HAL_GPIO_ReadPin (GPIOC, GPIO_PIN_14)){
 8002186:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800218a:	4855      	ldr	r0, [pc, #340]	; (80022e0 <HAL_GPIO_EXTI_Callback+0x208>)
 800218c:	f003 fc6c 	bl	8005a68 <HAL_GPIO_ReadPin>
 8002190:	4603      	mov	r3, r0
 8002192:	2b01      	cmp	r3, #1
 8002194:	d104      	bne.n	80021a0 <HAL_GPIO_EXTI_Callback+0xc8>
        // Переключение в противоположное состояние ножки
        // выхода для управления светодиодом (LED):
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);}
 8002196:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800219a:	4851      	ldr	r0, [pc, #324]	; (80022e0 <HAL_GPIO_EXTI_Callback+0x208>)
 800219c:	f003 fc94 	bl	8005ac8 <HAL_GPIO_TogglePin>
	   if (GPIO_PIN_RESET == HAL_GPIO_ReadPin (GPIOC, GPIO_PIN_14)){
 80021a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021a4:	484e      	ldr	r0, [pc, #312]	; (80022e0 <HAL_GPIO_EXTI_Callback+0x208>)
 80021a6:	f003 fc5f 	bl	8005a68 <HAL_GPIO_ReadPin>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d134      	bne.n	800221a <HAL_GPIO_EXTI_Callback+0x142>

		   if((pwm_cmd==0)&&(status==1)){
 80021b0:	4b4c      	ldr	r3, [pc, #304]	; (80022e4 <HAL_GPIO_EXTI_Callback+0x20c>)
 80021b2:	881b      	ldrh	r3, [r3, #0]
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10f      	bne.n	80021da <HAL_GPIO_EXTI_Callback+0x102>
 80021ba:	4b4b      	ldr	r3, [pc, #300]	; (80022e8 <HAL_GPIO_EXTI_Callback+0x210>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d10b      	bne.n	80021da <HAL_GPIO_EXTI_Callback+0x102>
		              	status=0;
 80021c2:	4b49      	ldr	r3, [pc, #292]	; (80022e8 <HAL_GPIO_EXTI_Callback+0x210>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	701a      	strb	r2, [r3, #0]

		              	hour=0;
 80021c8:	4b4b      	ldr	r3, [pc, #300]	; (80022f8 <HAL_GPIO_EXTI_Callback+0x220>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	701a      	strb	r2, [r3, #0]
		              	min=0;
 80021ce:	4b4b      	ldr	r3, [pc, #300]	; (80022fc <HAL_GPIO_EXTI_Callback+0x224>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	701a      	strb	r2, [r3, #0]
		              	sec=0;
 80021d4:	4b4a      	ldr	r3, [pc, #296]	; (8002300 <HAL_GPIO_EXTI_Callback+0x228>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	701a      	strb	r2, [r3, #0]
		              }


		   pwm_cmd=pwm_cmd-10;
 80021da:	4b42      	ldr	r3, [pc, #264]	; (80022e4 <HAL_GPIO_EXTI_Callback+0x20c>)
 80021dc:	881b      	ldrh	r3, [r3, #0]
 80021de:	b29b      	uxth	r3, r3
 80021e0:	3b0a      	subs	r3, #10
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	4b3f      	ldr	r3, [pc, #252]	; (80022e4 <HAL_GPIO_EXTI_Callback+0x20c>)
 80021e6:	801a      	strh	r2, [r3, #0]
		   if(pwm_cmd>=2100){pwm_cmd=0;}
 80021e8:	4b3e      	ldr	r3, [pc, #248]	; (80022e4 <HAL_GPIO_EXTI_Callback+0x20c>)
 80021ea:	881b      	ldrh	r3, [r3, #0]
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	f640 0233 	movw	r2, #2099	; 0x833
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d902      	bls.n	80021fc <HAL_GPIO_EXTI_Callback+0x124>
 80021f6:	4b3b      	ldr	r3, [pc, #236]	; (80022e4 <HAL_GPIO_EXTI_Callback+0x20c>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	801a      	strh	r2, [r3, #0]
		   if(pwm_cmd<=1){pwm_cmd=0;}
 80021fc:	4b39      	ldr	r3, [pc, #228]	; (80022e4 <HAL_GPIO_EXTI_Callback+0x20c>)
 80021fe:	881b      	ldrh	r3, [r3, #0]
 8002200:	b29b      	uxth	r3, r3
 8002202:	2b01      	cmp	r3, #1
 8002204:	d802      	bhi.n	800220c <HAL_GPIO_EXTI_Callback+0x134>
 8002206:	4b37      	ldr	r3, [pc, #220]	; (80022e4 <HAL_GPIO_EXTI_Callback+0x20c>)
 8002208:	2200      	movs	r2, #0
 800220a:	801a      	strh	r2, [r3, #0]
		   pwm_tgr=4;
 800220c:	4b3d      	ldr	r3, [pc, #244]	; (8002304 <HAL_GPIO_EXTI_Callback+0x22c>)
 800220e:	2204      	movs	r2, #4
 8002210:	701a      	strb	r2, [r3, #0]
		   EXTI->PR = EXTI_PR_PR14;
 8002212:	4b3d      	ldr	r3, [pc, #244]	; (8002308 <HAL_GPIO_EXTI_Callback+0x230>)
 8002214:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002218:	615a      	str	r2, [r3, #20]


     }


   if(GPIO_Pin == GPIO_PIN_5) // если прерывание поступило от ножки PB_5
 800221a:	88fb      	ldrh	r3, [r7, #6]
 800221c:	2b20      	cmp	r3, #32
 800221e:	d15a      	bne.n	80022d6 <HAL_GPIO_EXTI_Callback+0x1fe>
      {
	   if (GPIO_PIN_SET == HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_5)){
 8002220:	2120      	movs	r1, #32
 8002222:	483a      	ldr	r0, [pc, #232]	; (800230c <HAL_GPIO_EXTI_Callback+0x234>)
 8002224:	f003 fc20 	bl	8005a68 <HAL_GPIO_ReadPin>
 8002228:	4603      	mov	r3, r0
 800222a:	2b01      	cmp	r3, #1
 800222c:	d12a      	bne.n	8002284 <HAL_GPIO_EXTI_Callback+0x1ac>
	             LED_3_OFF;
 800222e:	2200      	movs	r2, #0
 8002230:	2102      	movs	r1, #2
 8002232:	4837      	ldr	r0, [pc, #220]	; (8002310 <HAL_GPIO_EXTI_Callback+0x238>)
 8002234:	f003 fc30 	bl	8005a98 <HAL_GPIO_WritePin>

	   			// if(page_num>2){page_num=0;}
	   			// page_flag=0;

	             if((HAL_GetTick()-timing)>=3000){
 8002238:	f001 f816 	bl	8003268 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	4b35      	ldr	r3, [pc, #212]	; (8002314 <HAL_GPIO_EXTI_Callback+0x23c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8002248:	4293      	cmp	r3, r2
 800224a:	d918      	bls.n	800227e <HAL_GPIO_EXTI_Callback+0x1a6>
	            	 if(lcd_status==0){lcd_update=1;}
 800224c:	4b32      	ldr	r3, [pc, #200]	; (8002318 <HAL_GPIO_EXTI_Callback+0x240>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	f083 0301 	eor.w	r3, r3, #1
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d002      	beq.n	8002260 <HAL_GPIO_EXTI_Callback+0x188>
 800225a:	4b30      	ldr	r3, [pc, #192]	; (800231c <HAL_GPIO_EXTI_Callback+0x244>)
 800225c:	2201      	movs	r2, #1
 800225e:	701a      	strb	r2, [r3, #0]
	            	 lcd_status=!lcd_status;}
 8002260:	4b2d      	ldr	r3, [pc, #180]	; (8002318 <HAL_GPIO_EXTI_Callback+0x240>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	bf14      	ite	ne
 8002268:	2301      	movne	r3, #1
 800226a:	2300      	moveq	r3, #0
 800226c:	b2db      	uxtb	r3, r3
 800226e:	f083 0301 	eor.w	r3, r3, #1
 8002272:	b2db      	uxtb	r3, r3
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	b2da      	uxtb	r2, r3
 800227a:	4b27      	ldr	r3, [pc, #156]	; (8002318 <HAL_GPIO_EXTI_Callback+0x240>)
 800227c:	701a      	strb	r2, [r3, #0]
	   		         EXTI->PR = EXTI_PR_PR5;
 800227e:	4b22      	ldr	r3, [pc, #136]	; (8002308 <HAL_GPIO_EXTI_Callback+0x230>)
 8002280:	2220      	movs	r2, #32
 8002282:	615a      	str	r2, [r3, #20]
      }

     if (GPIO_PIN_RESET == HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_5)){
 8002284:	2120      	movs	r1, #32
 8002286:	4821      	ldr	r0, [pc, #132]	; (800230c <HAL_GPIO_EXTI_Callback+0x234>)
 8002288:	f003 fbee 	bl	8005a68 <HAL_GPIO_ReadPin>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d121      	bne.n	80022d6 <HAL_GPIO_EXTI_Callback+0x1fe>

    	         LED_3_ON;
 8002292:	2201      	movs	r2, #1
 8002294:	2102      	movs	r1, #2
 8002296:	481e      	ldr	r0, [pc, #120]	; (8002310 <HAL_GPIO_EXTI_Callback+0x238>)
 8002298:	f003 fbfe 	bl	8005a98 <HAL_GPIO_WritePin>
    	 	     page_flag=1;
 800229c:	4b20      	ldr	r3, [pc, #128]	; (8002320 <HAL_GPIO_EXTI_Callback+0x248>)
 800229e:	2201      	movs	r2, #1
 80022a0:	701a      	strb	r2, [r3, #0]
    	         page_num++;
 80022a2:	4b20      	ldr	r3, [pc, #128]	; (8002324 <HAL_GPIO_EXTI_Callback+0x24c>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	3301      	adds	r3, #1
 80022a8:	b2da      	uxtb	r2, r3
 80022aa:	4b1e      	ldr	r3, [pc, #120]	; (8002324 <HAL_GPIO_EXTI_Callback+0x24c>)
 80022ac:	701a      	strb	r2, [r3, #0]
    	         if(page_num>2){page_num=0;}
 80022ae:	4b1d      	ldr	r3, [pc, #116]	; (8002324 <HAL_GPIO_EXTI_Callback+0x24c>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d902      	bls.n	80022bc <HAL_GPIO_EXTI_Callback+0x1e4>
 80022b6:	4b1b      	ldr	r3, [pc, #108]	; (8002324 <HAL_GPIO_EXTI_Callback+0x24c>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	701a      	strb	r2, [r3, #0]
    	         timing=HAL_GetTick();
 80022bc:	f000 ffd4 	bl	8003268 <HAL_GetTick>
 80022c0:	4603      	mov	r3, r0
 80022c2:	4a14      	ldr	r2, [pc, #80]	; (8002314 <HAL_GPIO_EXTI_Callback+0x23c>)
 80022c4:	6013      	str	r3, [r2, #0]
    	         EXTI->PR = EXTI_PR_PR5;
 80022c6:	4b10      	ldr	r3, [pc, #64]	; (8002308 <HAL_GPIO_EXTI_Callback+0x230>)
 80022c8:	2220      	movs	r2, #32
 80022ca:	615a      	str	r2, [r3, #20]
    	         timing=HAL_GetTick();
 80022cc:	f000 ffcc 	bl	8003268 <HAL_GetTick>
 80022d0:	4603      	mov	r3, r0
 80022d2:	4a10      	ldr	r2, [pc, #64]	; (8002314 <HAL_GPIO_EXTI_Callback+0x23c>)
 80022d4:	6013      	str	r3, [r2, #0]
     }



}
}
 80022d6:	bf00      	nop
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	48000800 	.word	0x48000800
 80022e4:	200005b4 	.word	0x200005b4
 80022e8:	200005f9 	.word	0x200005f9
 80022ec:	20000778 	.word	0x20000778
 80022f0:	2000021c 	.word	0x2000021c
 80022f4:	2000078c 	.word	0x2000078c
 80022f8:	200005f7 	.word	0x200005f7
 80022fc:	200005f6 	.word	0x200005f6
 8002300:	200005f8 	.word	0x200005f8
 8002304:	200005b6 	.word	0x200005b6
 8002308:	40010400 	.word	0x40010400
 800230c:	48000400 	.word	0x48000400
 8002310:	48001400 	.word	0x48001400
 8002314:	20000774 	.word	0x20000774
 8002318:	200005ae 	.word	0x200005ae
 800231c:	200005af 	.word	0x200005af
 8002320:	200005f1 	.word	0x200005f1
 8002324:	200005f0 	.word	0x200005f0

08002328 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)

{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]

RX_2;
 8002330:	2200      	movs	r2, #0
 8002332:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002336:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800233a:	f003 fbad 	bl	8005a98 <HAL_GPIO_WritePin>
}
 800233e:	bf00      	nop
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
	...

08002348 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC2)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a05      	ldr	r2, [pc, #20]	; (800236c <HAL_ADC_ConvCpltCallback+0x24>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d102      	bne.n	8002360 <HAL_ADC_ConvCpltCallback+0x18>
    {
        flag = 1;
 800235a:	4b05      	ldr	r3, [pc, #20]	; (8002370 <HAL_ADC_ConvCpltCallback+0x28>)
 800235c:	2201      	movs	r2, #1
 800235e:	701a      	strb	r2, [r3, #0]
    }
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	50000100 	.word	0x50000100
 8002370:	200005b7 	.word	0x200005b7

08002374 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002378:	b672      	cpsid	i
}
 800237a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800237c:	e7fe      	b.n	800237c <Error_Handler+0x8>

0800237e <calcCRC16ModBus>:

#include "modbusDevice.h"


// Compute the MODBUS RTU CRC
uint16_t calcCRC16ModBus(uint8_t *buffer, uint8_t u8length) {
 800237e:	b480      	push	{r7}
 8002380:	b087      	sub	sp, #28
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
 8002386:	460b      	mov	r3, r1
 8002388:	70fb      	strb	r3, [r7, #3]
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
 800238a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800238e:	617b      	str	r3, [r7, #20]
	for (unsigned char i = 0; i < u8length; i++) {
 8002390:	2300      	movs	r3, #0
 8002392:	74fb      	strb	r3, [r7, #19]
 8002394:	e023      	b.n	80023de <calcCRC16ModBus+0x60>
		temp = temp ^ buffer[i];
 8002396:	7cfb      	ldrb	r3, [r7, #19]
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	4413      	add	r3, r2
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	461a      	mov	r2, r3
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	4053      	eors	r3, r2
 80023a4:	617b      	str	r3, [r7, #20]
		for (unsigned char j = 1; j <= 8; j++) {
 80023a6:	2301      	movs	r3, #1
 80023a8:	74bb      	strb	r3, [r7, #18]
 80023aa:	e012      	b.n	80023d2 <calcCRC16ModBus+0x54>
			flag = temp & 0x0001;
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	60bb      	str	r3, [r7, #8]
			temp >>= 1;
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	085b      	lsrs	r3, r3, #1
 80023b8:	617b      	str	r3, [r7, #20]
			if (flag)
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d005      	beq.n	80023cc <calcCRC16ModBus+0x4e>
				temp ^= 0xA001;
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	f483 4320 	eor.w	r3, r3, #40960	; 0xa000
 80023c6:	f083 0301 	eor.w	r3, r3, #1
 80023ca:	617b      	str	r3, [r7, #20]
		for (unsigned char j = 1; j <= 8; j++) {
 80023cc:	7cbb      	ldrb	r3, [r7, #18]
 80023ce:	3301      	adds	r3, #1
 80023d0:	74bb      	strb	r3, [r7, #18]
 80023d2:	7cbb      	ldrb	r3, [r7, #18]
 80023d4:	2b08      	cmp	r3, #8
 80023d6:	d9e9      	bls.n	80023ac <calcCRC16ModBus+0x2e>
	for (unsigned char i = 0; i < u8length; i++) {
 80023d8:	7cfb      	ldrb	r3, [r7, #19]
 80023da:	3301      	adds	r3, #1
 80023dc:	74fb      	strb	r3, [r7, #19]
 80023de:	7cfa      	ldrb	r2, [r7, #19]
 80023e0:	78fb      	ldrb	r3, [r7, #3]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d3d7      	bcc.n	8002396 <calcCRC16ModBus+0x18>
		}
	}
	// Reverse byte order.
	temp2 = temp >> 8;
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	0a1b      	lsrs	r3, r3, #8
 80023ea:	60fb      	str	r3, [r7, #12]
	temp = (temp << 8) | temp2;
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	021b      	lsls	r3, r3, #8
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	617b      	str	r3, [r7, #20]
	temp &= 0xFFFF;
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	617b      	str	r3, [r7, #20]
	// the returned value is already swapped
	// crcLo byte is first & crcHi byte is last
	return temp;
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	b29b      	uxth	r3, r3

}
 8002400:	4618      	mov	r0, r3
 8002402:	371c      	adds	r7, #28
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <sendModBusRequest>:
			rxDataCursor++;
		}
	}
}

modbusResult sendModBusRequest(UART_HandleTypeDef* huart, uint8_t* frame,uint8_t len) {
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	4613      	mov	r3, r2
 8002418:	71fb      	strb	r3, [r7, #7]

    uint16_t crc = calcCRC16ModBus(frame, len);
 800241a:	79fb      	ldrb	r3, [r7, #7]
 800241c:	4619      	mov	r1, r3
 800241e:	68b8      	ldr	r0, [r7, #8]
 8002420:	f7ff ffad 	bl	800237e <calcCRC16ModBus>
 8002424:	4603      	mov	r3, r0
 8002426:	82fb      	strh	r3, [r7, #22]
    frame[len+1] = crc & 0xFF;       // CRC LOW
 8002428:	79fb      	ldrb	r3, [r7, #7]
 800242a:	3301      	adds	r3, #1
 800242c:	68ba      	ldr	r2, [r7, #8]
 800242e:	4413      	add	r3, r2
 8002430:	8afa      	ldrh	r2, [r7, #22]
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	701a      	strb	r2, [r3, #0]
    frame[len] = (crc >> 8) & 0xFF;  // CRC HIGH
 8002436:	8afb      	ldrh	r3, [r7, #22]
 8002438:	0a1b      	lsrs	r3, r3, #8
 800243a:	b299      	uxth	r1, r3
 800243c:	79fb      	ldrb	r3, [r7, #7]
 800243e:	68ba      	ldr	r2, [r7, #8]
 8002440:	4413      	add	r3, r2
 8002442:	b2ca      	uxtb	r2, r1
 8002444:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,GPIO_PIN_SET);
 8002446:	2201      	movs	r2, #1
 8002448:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800244c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002450:	f003 fb22 	bl	8005a98 <HAL_GPIO_WritePin>

	HAL_UART_Transmit_DMA(huart, frame, len+2);
 8002454:	79fb      	ldrb	r3, [r7, #7]
 8002456:	b29b      	uxth	r3, r3
 8002458:	3302      	adds	r3, #2
 800245a:	b29b      	uxth	r3, r3
 800245c:	461a      	mov	r2, r3
 800245e:	68b9      	ldr	r1, [r7, #8]
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f008 f8a5 	bl	800a5b0 <HAL_UART_Transmit_DMA>

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1,GPIO_PIN_RESET);
 8002466:	2200      	movs	r2, #0
 8002468:	2102      	movs	r1, #2
 800246a:	4804      	ldr	r0, [pc, #16]	; (800247c <sendModBusRequest+0x70>)
 800246c:	f003 fb14 	bl	8005a98 <HAL_GPIO_WritePin>
//	else{

	//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,GPIO_PIN_RESET);
	//	return MODBUS_ERROR;
	//}
}
 8002470:	bf00      	nop
 8002472:	4618      	mov	r0, r3
 8002474:	3718      	adds	r7, #24
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	48001400 	.word	0x48001400

08002480 <handleReadHoldingRegs>:
extern uint8_t rxFrame[255];
extern uint8_t txFrame[255];

extern uint8_t SLAVE_ID;

modbusResult handleReadHoldingRegs(UART_HandleTypeDef* huart,uint16_t* holdingRegisterValues){
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]

	uint16_t startingReg = (rxFrame[2]<<8) | rxFrame[3];
 800248a:	4b39      	ldr	r3, [pc, #228]	; (8002570 <handleReadHoldingRegs+0xf0>)
 800248c:	789b      	ldrb	r3, [r3, #2]
 800248e:	021b      	lsls	r3, r3, #8
 8002490:	b21a      	sxth	r2, r3
 8002492:	4b37      	ldr	r3, [pc, #220]	; (8002570 <handleReadHoldingRegs+0xf0>)
 8002494:	78db      	ldrb	r3, [r3, #3]
 8002496:	b21b      	sxth	r3, r3
 8002498:	4313      	orrs	r3, r2
 800249a:	b21b      	sxth	r3, r3
 800249c:	82fb      	strh	r3, [r7, #22]
	uint16_t numOfregs = (rxFrame[4]<<8) | rxFrame[5];
 800249e:	4b34      	ldr	r3, [pc, #208]	; (8002570 <handleReadHoldingRegs+0xf0>)
 80024a0:	791b      	ldrb	r3, [r3, #4]
 80024a2:	021b      	lsls	r3, r3, #8
 80024a4:	b21a      	sxth	r2, r3
 80024a6:	4b32      	ldr	r3, [pc, #200]	; (8002570 <handleReadHoldingRegs+0xf0>)
 80024a8:	795b      	ldrb	r3, [r3, #5]
 80024aa:	b21b      	sxth	r3, r3
 80024ac:	4313      	orrs	r3, r2
 80024ae:	b21b      	sxth	r3, r3
 80024b0:	817b      	strh	r3, [r7, #10]

	startingReg=startingReg-30001;
 80024b2:	8afb      	ldrh	r3, [r7, #22]
 80024b4:	f5a3 43ea 	sub.w	r3, r3, #29952	; 0x7500
 80024b8:	3b31      	subs	r3, #49	; 0x31
 80024ba:	82fb      	strh	r3, [r7, #22]

	uint16_t endAddr = startingReg+numOfregs-1;
 80024bc:	8afa      	ldrh	r2, [r7, #22]
 80024be:	897b      	ldrh	r3, [r7, #10]
 80024c0:	4413      	add	r3, r2
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	3b01      	subs	r3, #1
 80024c6:	813b      	strh	r3, [r7, #8]

	if((numOfregs<0)|(numOfregs >125)){
 80024c8:	897b      	ldrh	r3, [r7, #10]
 80024ca:	2b7d      	cmp	r3, #125	; 0x7d
 80024cc:	d905      	bls.n	80024da <handleReadHoldingRegs+0x5a>
		sendModbusException(huart,ILLEGAL_DATA_VALUE);
 80024ce:	2103      	movs	r1, #3
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 f94b 	bl	800276c <sendModbusException>
		return MODBUS_ERROR;
 80024d6:	2300      	movs	r3, #0
 80024d8:	e045      	b.n	8002566 <handleReadHoldingRegs+0xe6>
	}
	if(endAddr > NUM_OF_HOLDING_REGS){
 80024da:	893b      	ldrh	r3, [r7, #8]
 80024dc:	2b1e      	cmp	r3, #30
 80024de:	d905      	bls.n	80024ec <handleReadHoldingRegs+0x6c>
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);
 80024e0:	2102      	movs	r1, #2
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 f942 	bl	800276c <sendModbusException>
		return MODBUS_ERROR;
 80024e8:	2300      	movs	r3, #0
 80024ea:	e03c      	b.n	8002566 <handleReadHoldingRegs+0xe6>
	}
	//  | SLAVE_ID | FUNC_CODE | BYTE_COUNT |    DATA     |    CRC    |
	//  |  1 byte  |   1 byte  |    1 byte  |   N*2 Bytes |   2 bytes |

	txFrame[0] = SLAVE_ID;
 80024ec:	4b21      	ldr	r3, [pc, #132]	; (8002574 <handleReadHoldingRegs+0xf4>)
 80024ee:	781a      	ldrb	r2, [r3, #0]
 80024f0:	4b21      	ldr	r3, [pc, #132]	; (8002578 <handleReadHoldingRegs+0xf8>)
 80024f2:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];
 80024f4:	4b1e      	ldr	r3, [pc, #120]	; (8002570 <handleReadHoldingRegs+0xf0>)
 80024f6:	785a      	ldrb	r2, [r3, #1]
 80024f8:	4b1f      	ldr	r3, [pc, #124]	; (8002578 <handleReadHoldingRegs+0xf8>)
 80024fa:	705a      	strb	r2, [r3, #1]
	txFrame[2] = numOfregs *2;
 80024fc:	897b      	ldrh	r3, [r7, #10]
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	b2da      	uxtb	r2, r3
 8002504:	4b1c      	ldr	r3, [pc, #112]	; (8002578 <handleReadHoldingRegs+0xf8>)
 8002506:	709a      	strb	r2, [r3, #2]

	int byteCursor=3;
 8002508:	2303      	movs	r3, #3
 800250a:	613b      	str	r3, [r7, #16]

	for(int i = 0; i<numOfregs;i++){
 800250c:	2300      	movs	r3, #0
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	e01d      	b.n	800254e <handleReadHoldingRegs+0xce>
		txFrame[byteCursor++] =(holdingRegisterValues[startingReg]>>8) & 0xff; // Higher byte
 8002512:	8afb      	ldrh	r3, [r7, #22]
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	4413      	add	r3, r2
 800251a:	881b      	ldrh	r3, [r3, #0]
 800251c:	0a1b      	lsrs	r3, r3, #8
 800251e:	b299      	uxth	r1, r3
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1c5a      	adds	r2, r3, #1
 8002524:	613a      	str	r2, [r7, #16]
 8002526:	b2c9      	uxtb	r1, r1
 8002528:	4a13      	ldr	r2, [pc, #76]	; (8002578 <handleReadHoldingRegs+0xf8>)
 800252a:	54d1      	strb	r1, [r2, r3]
		txFrame[byteCursor++] =(holdingRegisterValues[startingReg]) & 0xff;    // Lower  byte
 800252c:	8afb      	ldrh	r3, [r7, #22]
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	4413      	add	r3, r2
 8002534:	8819      	ldrh	r1, [r3, #0]
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1c5a      	adds	r2, r3, #1
 800253a:	613a      	str	r2, [r7, #16]
 800253c:	b2c9      	uxtb	r1, r1
 800253e:	4a0e      	ldr	r2, [pc, #56]	; (8002578 <handleReadHoldingRegs+0xf8>)
 8002540:	54d1      	strb	r1, [r2, r3]
		startingReg++;
 8002542:	8afb      	ldrh	r3, [r7, #22]
 8002544:	3301      	adds	r3, #1
 8002546:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i<numOfregs;i++){
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	3301      	adds	r3, #1
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	897b      	ldrh	r3, [r7, #10]
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	429a      	cmp	r2, r3
 8002554:	dbdd      	blt.n	8002512 <handleReadHoldingRegs+0x92>
	}
	sendModBusRequest(huart,txFrame,byteCursor);
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	b2db      	uxtb	r3, r3
 800255a:	461a      	mov	r2, r3
 800255c:	4906      	ldr	r1, [pc, #24]	; (8002578 <handleReadHoldingRegs+0xf8>)
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f7ff ff54 	bl	800240c <sendModBusRequest>
	return 1;
 8002564:	2301      	movs	r3, #1

}
 8002566:	4618      	mov	r0, r3
 8002568:	3718      	adds	r7, #24
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	200005fc 	.word	0x200005fc
 8002574:	20000018 	.word	0x20000018
 8002578:	20000614 	.word	0x20000614

0800257c <handleReadInputRegs>:

modbusResult handleReadInputRegs(UART_HandleTypeDef* huart,uint16_t* inputRegisterValues){
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]

	uint16_t startingReg = (rxFrame[2]<<8) | rxFrame[3];
 8002586:	4b36      	ldr	r3, [pc, #216]	; (8002660 <handleReadInputRegs+0xe4>)
 8002588:	789b      	ldrb	r3, [r3, #2]
 800258a:	021b      	lsls	r3, r3, #8
 800258c:	b21a      	sxth	r2, r3
 800258e:	4b34      	ldr	r3, [pc, #208]	; (8002660 <handleReadInputRegs+0xe4>)
 8002590:	78db      	ldrb	r3, [r3, #3]
 8002592:	b21b      	sxth	r3, r3
 8002594:	4313      	orrs	r3, r2
 8002596:	b21b      	sxth	r3, r3
 8002598:	82fb      	strh	r3, [r7, #22]
	uint16_t numOfregs = (rxFrame[4]<<8) | rxFrame[5];
 800259a:	4b31      	ldr	r3, [pc, #196]	; (8002660 <handleReadInputRegs+0xe4>)
 800259c:	791b      	ldrb	r3, [r3, #4]
 800259e:	021b      	lsls	r3, r3, #8
 80025a0:	b21a      	sxth	r2, r3
 80025a2:	4b2f      	ldr	r3, [pc, #188]	; (8002660 <handleReadInputRegs+0xe4>)
 80025a4:	795b      	ldrb	r3, [r3, #5]
 80025a6:	b21b      	sxth	r3, r3
 80025a8:	4313      	orrs	r3, r2
 80025aa:	b21b      	sxth	r3, r3
 80025ac:	817b      	strh	r3, [r7, #10]

	uint16_t endAddr = startingReg+numOfregs-1;
 80025ae:	8afa      	ldrh	r2, [r7, #22]
 80025b0:	897b      	ldrh	r3, [r7, #10]
 80025b2:	4413      	add	r3, r2
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	3b01      	subs	r3, #1
 80025b8:	813b      	strh	r3, [r7, #8]

	if((numOfregs<0)|(numOfregs >125)){
 80025ba:	897b      	ldrh	r3, [r7, #10]
 80025bc:	2b7d      	cmp	r3, #125	; 0x7d
 80025be:	d905      	bls.n	80025cc <handleReadInputRegs+0x50>
		sendModbusException(huart,ILLEGAL_DATA_VALUE);
 80025c0:	2103      	movs	r1, #3
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 f8d2 	bl	800276c <sendModbusException>
		return MODBUS_ERROR;
 80025c8:	2300      	movs	r3, #0
 80025ca:	e045      	b.n	8002658 <handleReadInputRegs+0xdc>
	}
	if(endAddr > NUM_OF_HOLDING_REGS){
 80025cc:	893b      	ldrh	r3, [r7, #8]
 80025ce:	2b1e      	cmp	r3, #30
 80025d0:	d905      	bls.n	80025de <handleReadInputRegs+0x62>
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);
 80025d2:	2102      	movs	r1, #2
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 f8c9 	bl	800276c <sendModbusException>
		return MODBUS_ERROR;
 80025da:	2300      	movs	r3, #0
 80025dc:	e03c      	b.n	8002658 <handleReadInputRegs+0xdc>
	}
	//  | SLAVE_ID | FUNC_CODE | BYTE_COUNT |    DATA     |    CRC    |
	//  |  1 byte  |   1 byte  |    1 byte  |   N*2 Bytes |   2 bytes |

	txFrame[0] = SLAVE_ID;
 80025de:	4b21      	ldr	r3, [pc, #132]	; (8002664 <handleReadInputRegs+0xe8>)
 80025e0:	781a      	ldrb	r2, [r3, #0]
 80025e2:	4b21      	ldr	r3, [pc, #132]	; (8002668 <handleReadInputRegs+0xec>)
 80025e4:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];
 80025e6:	4b1e      	ldr	r3, [pc, #120]	; (8002660 <handleReadInputRegs+0xe4>)
 80025e8:	785a      	ldrb	r2, [r3, #1]
 80025ea:	4b1f      	ldr	r3, [pc, #124]	; (8002668 <handleReadInputRegs+0xec>)
 80025ec:	705a      	strb	r2, [r3, #1]
	txFrame[2] = numOfregs *2;
 80025ee:	897b      	ldrh	r3, [r7, #10]
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	b2da      	uxtb	r2, r3
 80025f6:	4b1c      	ldr	r3, [pc, #112]	; (8002668 <handleReadInputRegs+0xec>)
 80025f8:	709a      	strb	r2, [r3, #2]

	int byteCursor=3;
 80025fa:	2303      	movs	r3, #3
 80025fc:	613b      	str	r3, [r7, #16]

	for(int i = 0; i<numOfregs;i++){
 80025fe:	2300      	movs	r3, #0
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	e01d      	b.n	8002640 <handleReadInputRegs+0xc4>
		txFrame[byteCursor++] =(inputRegisterValues[startingReg]>>8) & 0xff; // Higher byte
 8002604:	8afb      	ldrh	r3, [r7, #22]
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	4413      	add	r3, r2
 800260c:	881b      	ldrh	r3, [r3, #0]
 800260e:	0a1b      	lsrs	r3, r3, #8
 8002610:	b299      	uxth	r1, r3
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	1c5a      	adds	r2, r3, #1
 8002616:	613a      	str	r2, [r7, #16]
 8002618:	b2c9      	uxtb	r1, r1
 800261a:	4a13      	ldr	r2, [pc, #76]	; (8002668 <handleReadInputRegs+0xec>)
 800261c:	54d1      	strb	r1, [r2, r3]
		txFrame[byteCursor++] =(inputRegisterValues[startingReg]) & 0xff;    // Lower  byte
 800261e:	8afb      	ldrh	r3, [r7, #22]
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	4413      	add	r3, r2
 8002626:	8819      	ldrh	r1, [r3, #0]
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1c5a      	adds	r2, r3, #1
 800262c:	613a      	str	r2, [r7, #16]
 800262e:	b2c9      	uxtb	r1, r1
 8002630:	4a0d      	ldr	r2, [pc, #52]	; (8002668 <handleReadInputRegs+0xec>)
 8002632:	54d1      	strb	r1, [r2, r3]
		startingReg++;
 8002634:	8afb      	ldrh	r3, [r7, #22]
 8002636:	3301      	adds	r3, #1
 8002638:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i<numOfregs;i++){
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	3301      	adds	r3, #1
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	897b      	ldrh	r3, [r7, #10]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	429a      	cmp	r2, r3
 8002646:	dbdd      	blt.n	8002604 <handleReadInputRegs+0x88>
	}
	sendModBusRequest(huart,txFrame,byteCursor);
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	b2db      	uxtb	r3, r3
 800264c:	461a      	mov	r2, r3
 800264e:	4906      	ldr	r1, [pc, #24]	; (8002668 <handleReadInputRegs+0xec>)
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f7ff fedb 	bl	800240c <sendModBusRequest>
	return 1;
 8002656:	2301      	movs	r3, #1
}
 8002658:	4618      	mov	r0, r3
 800265a:	3718      	adds	r7, #24
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	200005fc 	.word	0x200005fc
 8002664:	20000018 	.word	0x20000018
 8002668:	20000614 	.word	0x20000614

0800266c <handleWriteMulyipleHandlingRegister>:
	sendModBusRequest(huart,txFrame, 6);
	return 1;

}

modbusResult handleWriteMulyipleHandlingRegister (UART_HandleTypeDef* huart,uint16_t* holdingRegisterValues){
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]

	uint16_t staringtAddr = ((rxFrame[2]<<8)| rxFrame[3]);
 8002676:	4b3a      	ldr	r3, [pc, #232]	; (8002760 <handleWriteMulyipleHandlingRegister+0xf4>)
 8002678:	789b      	ldrb	r3, [r3, #2]
 800267a:	021b      	lsls	r3, r3, #8
 800267c:	b21a      	sxth	r2, r3
 800267e:	4b38      	ldr	r3, [pc, #224]	; (8002760 <handleWriteMulyipleHandlingRegister+0xf4>)
 8002680:	78db      	ldrb	r3, [r3, #3]
 8002682:	b21b      	sxth	r3, r3
 8002684:	4313      	orrs	r3, r2
 8002686:	b21b      	sxth	r3, r3
 8002688:	82fb      	strh	r3, [r7, #22]

	uint16_t numRegs = ((rxFrame[4]<<8) | rxFrame[5]);   // number to registers master has requested
 800268a:	4b35      	ldr	r3, [pc, #212]	; (8002760 <handleWriteMulyipleHandlingRegister+0xf4>)
 800268c:	791b      	ldrb	r3, [r3, #4]
 800268e:	021b      	lsls	r3, r3, #8
 8002690:	b21a      	sxth	r2, r3
 8002692:	4b33      	ldr	r3, [pc, #204]	; (8002760 <handleWriteMulyipleHandlingRegister+0xf4>)
 8002694:	795b      	ldrb	r3, [r3, #5]
 8002696:	b21b      	sxth	r3, r3
 8002698:	4313      	orrs	r3, r2
 800269a:	b21b      	sxth	r3, r3
 800269c:	817b      	strh	r3, [r7, #10]

	if ((numRegs<1)||(numRegs>123))  // maximum no. of Registers as per Modbus Specification
 800269e:	897b      	ldrh	r3, [r7, #10]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d002      	beq.n	80026aa <handleWriteMulyipleHandlingRegister+0x3e>
 80026a4:	897b      	ldrh	r3, [r7, #10]
 80026a6:	2b7b      	cmp	r3, #123	; 0x7b
 80026a8:	d905      	bls.n	80026b6 <handleWriteMulyipleHandlingRegister+0x4a>
	{
		sendModbusException(huart,ILLEGAL_DATA_VALUE);  // send an exception
 80026aa:	2103      	movs	r1, #3
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 f85d 	bl	800276c <sendModbusException>
		return MODBUS_ERROR;
 80026b2:	2300      	movs	r3, #0
 80026b4:	e04f      	b.n	8002756 <handleWriteMulyipleHandlingRegister+0xea>
	}

	uint16_t endAddr = staringtAddr + numRegs - 1;  // end Register
 80026b6:	8afa      	ldrh	r2, [r7, #22]
 80026b8:	897b      	ldrh	r3, [r7, #10]
 80026ba:	4413      	add	r3, r2
 80026bc:	b29b      	uxth	r3, r3
 80026be:	3b01      	subs	r3, #1
 80026c0:	813b      	strh	r3, [r7, #8]
	if (endAddr> NUM_OF_HOLDING_REGS)  	// end Register can not be more than NUM_OF_HOLDING_REGS as
 80026c2:	893b      	ldrh	r3, [r7, #8]
 80026c4:	2b1e      	cmp	r3, #30
 80026c6:	d905      	bls.n	80026d4 <handleWriteMulyipleHandlingRegister+0x68>
										// we only have record of NUM_OF_HOLDING_REGS Registers in total
	{
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);   // send an exception
 80026c8:	2102      	movs	r1, #2
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 f84e 	bl	800276c <sendModbusException>
		return MODBUS_ERROR;
 80026d0:	2300      	movs	r3, #0
 80026d2:	e040      	b.n	8002756 <handleWriteMulyipleHandlingRegister+0xea>
	}

	int indx = 7;  // we need to keep track of index in rxFrame
 80026d4:	2307      	movs	r3, #7
 80026d6:	613b      	str	r3, [r7, #16]

	for (int regCorsor=0; regCorsor<numRegs; regCorsor++){
 80026d8:	2300      	movs	r3, #0
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	e019      	b.n	8002712 <handleWriteMulyipleHandlingRegister+0xa6>

		holdingRegisterValues[staringtAddr++] = (rxFrame[indx++]<<8)|rxFrame[indx++];
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1c5a      	adds	r2, r3, #1
 80026e2:	613a      	str	r2, [r7, #16]
 80026e4:	4a1e      	ldr	r2, [pc, #120]	; (8002760 <handleWriteMulyipleHandlingRegister+0xf4>)
 80026e6:	5cd3      	ldrb	r3, [r2, r3]
 80026e8:	021b      	lsls	r3, r3, #8
 80026ea:	b21a      	sxth	r2, r3
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1c59      	adds	r1, r3, #1
 80026f0:	6139      	str	r1, [r7, #16]
 80026f2:	491b      	ldr	r1, [pc, #108]	; (8002760 <handleWriteMulyipleHandlingRegister+0xf4>)
 80026f4:	5ccb      	ldrb	r3, [r1, r3]
 80026f6:	b21b      	sxth	r3, r3
 80026f8:	4313      	orrs	r3, r2
 80026fa:	b219      	sxth	r1, r3
 80026fc:	8afb      	ldrh	r3, [r7, #22]
 80026fe:	1c5a      	adds	r2, r3, #1
 8002700:	82fa      	strh	r2, [r7, #22]
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	4413      	add	r3, r2
 8002708:	b28a      	uxth	r2, r1
 800270a:	801a      	strh	r2, [r3, #0]
	for (int regCorsor=0; regCorsor<numRegs; regCorsor++){
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	3301      	adds	r3, #1
 8002710:	60fb      	str	r3, [r7, #12]
 8002712:	897b      	ldrh	r3, [r7, #10]
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	429a      	cmp	r2, r3
 8002718:	dbe1      	blt.n	80026de <handleWriteMulyipleHandlingRegister+0x72>

	}
	//   | SLAVE_ID | FUNCTION_CODE | Start Addr |  num of Regs |   CRC   |
	//   | 1 BYTE   |     1 BYTE    |  2 BYTE    |    2 BYTES   | 2 BYTES |

	txFrame[0] = SLAVE_ID;     // Slave ID
 800271a:	4b12      	ldr	r3, [pc, #72]	; (8002764 <handleWriteMulyipleHandlingRegister+0xf8>)
 800271c:	781a      	ldrb	r2, [r3, #0]
 800271e:	4b12      	ldr	r3, [pc, #72]	; (8002768 <handleWriteMulyipleHandlingRegister+0xfc>)
 8002720:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];   // Function code
 8002722:	4b0f      	ldr	r3, [pc, #60]	; (8002760 <handleWriteMulyipleHandlingRegister+0xf4>)
 8002724:	785a      	ldrb	r2, [r3, #1]
 8002726:	4b10      	ldr	r3, [pc, #64]	; (8002768 <handleWriteMulyipleHandlingRegister+0xfc>)
 8002728:	705a      	strb	r2, [r3, #1]

	txFrame[2] = rxFrame[2];   // Start Addr HIGH Byte
 800272a:	4b0d      	ldr	r3, [pc, #52]	; (8002760 <handleWriteMulyipleHandlingRegister+0xf4>)
 800272c:	789a      	ldrb	r2, [r3, #2]
 800272e:	4b0e      	ldr	r3, [pc, #56]	; (8002768 <handleWriteMulyipleHandlingRegister+0xfc>)
 8002730:	709a      	strb	r2, [r3, #2]
	txFrame[3] = rxFrame[3];   // Start Addr LOW Byte
 8002732:	4b0b      	ldr	r3, [pc, #44]	; (8002760 <handleWriteMulyipleHandlingRegister+0xf4>)
 8002734:	78da      	ldrb	r2, [r3, #3]
 8002736:	4b0c      	ldr	r3, [pc, #48]	; (8002768 <handleWriteMulyipleHandlingRegister+0xfc>)
 8002738:	70da      	strb	r2, [r3, #3]

	txFrame[4] = rxFrame[4];   // Num of Regs HIGH Byte
 800273a:	4b09      	ldr	r3, [pc, #36]	; (8002760 <handleWriteMulyipleHandlingRegister+0xf4>)
 800273c:	791a      	ldrb	r2, [r3, #4]
 800273e:	4b0a      	ldr	r3, [pc, #40]	; (8002768 <handleWriteMulyipleHandlingRegister+0xfc>)
 8002740:	711a      	strb	r2, [r3, #4]
	txFrame[5] = rxFrame[5];   // Num of Regs LOW Byte
 8002742:	4b07      	ldr	r3, [pc, #28]	; (8002760 <handleWriteMulyipleHandlingRegister+0xf4>)
 8002744:	795a      	ldrb	r2, [r3, #5]
 8002746:	4b08      	ldr	r3, [pc, #32]	; (8002768 <handleWriteMulyipleHandlingRegister+0xfc>)
 8002748:	715a      	strb	r2, [r3, #5]

	sendModBusRequest(huart,txFrame, 6);  // send data... CRC will be calculated in the function itself
 800274a:	2206      	movs	r2, #6
 800274c:	4906      	ldr	r1, [pc, #24]	; (8002768 <handleWriteMulyipleHandlingRegister+0xfc>)
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f7ff fe5c 	bl	800240c <sendModBusRequest>
	return 1;   // success
 8002754:	2301      	movs	r3, #1

}
 8002756:	4618      	mov	r0, r3
 8002758:	3718      	adds	r7, #24
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	200005fc 	.word	0x200005fc
 8002764:	20000018 	.word	0x20000018
 8002768:	20000614 	.word	0x20000614

0800276c <sendModbusException>:

	sendModBusRequest(huart,txFrame, 6);
	return MODBUS_OK;
}

modbusResult sendModbusException(UART_HandleTypeDef* huart,modbusExceptionCode exceptionCode){
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	460b      	mov	r3, r1
 8002776:	70fb      	strb	r3, [r7, #3]

	// | SLAVE_ID | FUNCTION_CODE | Exception code | CRC     |
	// | 1 BYTE   |  1 BYTE       |    1 BYTE      | 2 BYTES |

	txFrame[0] = rxFrame[0];       		// Slave ID
 8002778:	4b0b      	ldr	r3, [pc, #44]	; (80027a8 <sendModbusException+0x3c>)
 800277a:	781a      	ldrb	r2, [r3, #0]
 800277c:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <sendModbusException+0x40>)
 800277e:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1] | 0x80;  	// Adding 1 to the MSB of the function code
 8002780:	4b09      	ldr	r3, [pc, #36]	; (80027a8 <sendModbusException+0x3c>)
 8002782:	785b      	ldrb	r3, [r3, #1]
 8002784:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002788:	b2da      	uxtb	r2, r3
 800278a:	4b08      	ldr	r3, [pc, #32]	; (80027ac <sendModbusException+0x40>)
 800278c:	705a      	strb	r2, [r3, #1]
	txFrame[2] =  exceptionCode;   		// Load the Exception code
 800278e:	4a07      	ldr	r2, [pc, #28]	; (80027ac <sendModbusException+0x40>)
 8002790:	78fb      	ldrb	r3, [r7, #3]
 8002792:	7093      	strb	r3, [r2, #2]

	return 	sendModBusRequest(huart,txFrame, 3);  // send Data... CRC will be calculated in the function
 8002794:	2203      	movs	r2, #3
 8002796:	4905      	ldr	r1, [pc, #20]	; (80027ac <sendModbusException+0x40>)
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f7ff fe37 	bl	800240c <sendModBusRequest>
 800279e:	4603      	mov	r3, r0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	200005fc 	.word	0x200005fc
 80027ac:	20000614 	.word	0x20000614

080027b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027b6:	4b12      	ldr	r3, [pc, #72]	; (8002800 <HAL_MspInit+0x50>)
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	4a11      	ldr	r2, [pc, #68]	; (8002800 <HAL_MspInit+0x50>)
 80027bc:	f043 0301 	orr.w	r3, r3, #1
 80027c0:	6193      	str	r3, [r2, #24]
 80027c2:	4b0f      	ldr	r3, [pc, #60]	; (8002800 <HAL_MspInit+0x50>)
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	607b      	str	r3, [r7, #4]
 80027cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027ce:	4b0c      	ldr	r3, [pc, #48]	; (8002800 <HAL_MspInit+0x50>)
 80027d0:	69db      	ldr	r3, [r3, #28]
 80027d2:	4a0b      	ldr	r2, [pc, #44]	; (8002800 <HAL_MspInit+0x50>)
 80027d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027d8:	61d3      	str	r3, [r2, #28]
 80027da:	4b09      	ldr	r3, [pc, #36]	; (8002800 <HAL_MspInit+0x50>)
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e2:	603b      	str	r3, [r7, #0]
 80027e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80027e6:	2200      	movs	r2, #0
 80027e8:	2100      	movs	r1, #0
 80027ea:	2005      	movs	r0, #5
 80027ec:	f002 fd61 	bl	80052b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80027f0:	2005      	movs	r0, #5
 80027f2:	f002 fd7a 	bl	80052ea <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027f6:	bf00      	nop
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	40021000 	.word	0x40021000

08002804 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b08e      	sub	sp, #56	; 0x38
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800280c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	605a      	str	r2, [r3, #4]
 8002816:	609a      	str	r2, [r3, #8]
 8002818:	60da      	str	r2, [r3, #12]
 800281a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002824:	d136      	bne.n	8002894 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002826:	4b70      	ldr	r3, [pc, #448]	; (80029e8 <HAL_ADC_MspInit+0x1e4>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	3301      	adds	r3, #1
 800282c:	4a6e      	ldr	r2, [pc, #440]	; (80029e8 <HAL_ADC_MspInit+0x1e4>)
 800282e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002830:	4b6d      	ldr	r3, [pc, #436]	; (80029e8 <HAL_ADC_MspInit+0x1e4>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d10b      	bne.n	8002850 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002838:	4b6c      	ldr	r3, [pc, #432]	; (80029ec <HAL_ADC_MspInit+0x1e8>)
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	4a6b      	ldr	r2, [pc, #428]	; (80029ec <HAL_ADC_MspInit+0x1e8>)
 800283e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002842:	6153      	str	r3, [r2, #20]
 8002844:	4b69      	ldr	r3, [pc, #420]	; (80029ec <HAL_ADC_MspInit+0x1e8>)
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284c:	623b      	str	r3, [r7, #32]
 800284e:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002850:	4b66      	ldr	r3, [pc, #408]	; (80029ec <HAL_ADC_MspInit+0x1e8>)
 8002852:	695b      	ldr	r3, [r3, #20]
 8002854:	4a65      	ldr	r2, [pc, #404]	; (80029ec <HAL_ADC_MspInit+0x1e8>)
 8002856:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800285a:	6153      	str	r3, [r2, #20]
 800285c:	4b63      	ldr	r3, [pc, #396]	; (80029ec <HAL_ADC_MspInit+0x1e8>)
 800285e:	695b      	ldr	r3, [r3, #20]
 8002860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002864:	61fb      	str	r3, [r7, #28]
 8002866:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = SENS_4_Pin;
 8002868:	2308      	movs	r3, #8
 800286a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800286c:	2303      	movs	r3, #3
 800286e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002870:	2300      	movs	r3, #0
 8002872:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SENS_4_GPIO_Port, &GPIO_InitStruct);
 8002874:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002878:	4619      	mov	r1, r3
 800287a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800287e:	f002 ff79 	bl	8005774 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8002882:	2200      	movs	r2, #0
 8002884:	2102      	movs	r1, #2
 8002886:	2012      	movs	r0, #18
 8002888:	f002 fd13 	bl	80052b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800288c:	2012      	movs	r0, #18
 800288e:	f002 fd2c 	bl	80052ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002892:	e0a4      	b.n	80029de <HAL_ADC_MspInit+0x1da>
  else if(hadc->Instance==ADC2)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a55      	ldr	r2, [pc, #340]	; (80029f0 <HAL_ADC_MspInit+0x1ec>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d176      	bne.n	800298c <HAL_ADC_MspInit+0x188>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800289e:	4b52      	ldr	r3, [pc, #328]	; (80029e8 <HAL_ADC_MspInit+0x1e4>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	3301      	adds	r3, #1
 80028a4:	4a50      	ldr	r2, [pc, #320]	; (80029e8 <HAL_ADC_MspInit+0x1e4>)
 80028a6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80028a8:	4b4f      	ldr	r3, [pc, #316]	; (80029e8 <HAL_ADC_MspInit+0x1e4>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d10b      	bne.n	80028c8 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80028b0:	4b4e      	ldr	r3, [pc, #312]	; (80029ec <HAL_ADC_MspInit+0x1e8>)
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	4a4d      	ldr	r2, [pc, #308]	; (80029ec <HAL_ADC_MspInit+0x1e8>)
 80028b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ba:	6153      	str	r3, [r2, #20]
 80028bc:	4b4b      	ldr	r3, [pc, #300]	; (80029ec <HAL_ADC_MspInit+0x1e8>)
 80028be:	695b      	ldr	r3, [r3, #20]
 80028c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c4:	61bb      	str	r3, [r7, #24]
 80028c6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028c8:	4b48      	ldr	r3, [pc, #288]	; (80029ec <HAL_ADC_MspInit+0x1e8>)
 80028ca:	695b      	ldr	r3, [r3, #20]
 80028cc:	4a47      	ldr	r2, [pc, #284]	; (80029ec <HAL_ADC_MspInit+0x1e8>)
 80028ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028d2:	6153      	str	r3, [r2, #20]
 80028d4:	4b45      	ldr	r3, [pc, #276]	; (80029ec <HAL_ADC_MspInit+0x1e8>)
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028dc:	617b      	str	r3, [r7, #20]
 80028de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e0:	4b42      	ldr	r3, [pc, #264]	; (80029ec <HAL_ADC_MspInit+0x1e8>)
 80028e2:	695b      	ldr	r3, [r3, #20]
 80028e4:	4a41      	ldr	r2, [pc, #260]	; (80029ec <HAL_ADC_MspInit+0x1e8>)
 80028e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028ea:	6153      	str	r3, [r2, #20]
 80028ec:	4b3f      	ldr	r3, [pc, #252]	; (80029ec <HAL_ADC_MspInit+0x1e8>)
 80028ee:	695b      	ldr	r3, [r3, #20]
 80028f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028f4:	613b      	str	r3, [r7, #16]
 80028f6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = HAL_1_Pin|HAL_2_Pin|HAL_3_Pin|HAL_4_Pin;
 80028f8:	23f0      	movs	r3, #240	; 0xf0
 80028fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028fc:	2303      	movs	r3, #3
 80028fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002900:	2300      	movs	r3, #0
 8002902:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002904:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002908:	4619      	mov	r1, r3
 800290a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800290e:	f002 ff31 	bl	8005774 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SENS_3_Pin;
 8002912:	2304      	movs	r3, #4
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002916:	2303      	movs	r3, #3
 8002918:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291a:	2300      	movs	r3, #0
 800291c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SENS_3_GPIO_Port, &GPIO_InitStruct);
 800291e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002922:	4619      	mov	r1, r3
 8002924:	4833      	ldr	r0, [pc, #204]	; (80029f4 <HAL_ADC_MspInit+0x1f0>)
 8002926:	f002 ff25 	bl	8005774 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 800292a:	4b33      	ldr	r3, [pc, #204]	; (80029f8 <HAL_ADC_MspInit+0x1f4>)
 800292c:	4a33      	ldr	r2, [pc, #204]	; (80029fc <HAL_ADC_MspInit+0x1f8>)
 800292e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002930:	4b31      	ldr	r3, [pc, #196]	; (80029f8 <HAL_ADC_MspInit+0x1f4>)
 8002932:	2200      	movs	r2, #0
 8002934:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002936:	4b30      	ldr	r3, [pc, #192]	; (80029f8 <HAL_ADC_MspInit+0x1f4>)
 8002938:	2200      	movs	r2, #0
 800293a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800293c:	4b2e      	ldr	r3, [pc, #184]	; (80029f8 <HAL_ADC_MspInit+0x1f4>)
 800293e:	2280      	movs	r2, #128	; 0x80
 8002940:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002942:	4b2d      	ldr	r3, [pc, #180]	; (80029f8 <HAL_ADC_MspInit+0x1f4>)
 8002944:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002948:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800294a:	4b2b      	ldr	r3, [pc, #172]	; (80029f8 <HAL_ADC_MspInit+0x1f4>)
 800294c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002950:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8002952:	4b29      	ldr	r3, [pc, #164]	; (80029f8 <HAL_ADC_MspInit+0x1f4>)
 8002954:	2200      	movs	r2, #0
 8002956:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002958:	4b27      	ldr	r3, [pc, #156]	; (80029f8 <HAL_ADC_MspInit+0x1f4>)
 800295a:	2200      	movs	r2, #0
 800295c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800295e:	4826      	ldr	r0, [pc, #152]	; (80029f8 <HAL_ADC_MspInit+0x1f4>)
 8002960:	f002 fcdd 	bl	800531e <HAL_DMA_Init>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <HAL_ADC_MspInit+0x16a>
      Error_Handler();
 800296a:	f7ff fd03 	bl	8002374 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a21      	ldr	r2, [pc, #132]	; (80029f8 <HAL_ADC_MspInit+0x1f4>)
 8002972:	639a      	str	r2, [r3, #56]	; 0x38
 8002974:	4a20      	ldr	r2, [pc, #128]	; (80029f8 <HAL_ADC_MspInit+0x1f4>)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 800297a:	2200      	movs	r2, #0
 800297c:	2102      	movs	r1, #2
 800297e:	2012      	movs	r0, #18
 8002980:	f002 fc97 	bl	80052b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002984:	2012      	movs	r0, #18
 8002986:	f002 fcb0 	bl	80052ea <HAL_NVIC_EnableIRQ>
}
 800298a:	e028      	b.n	80029de <HAL_ADC_MspInit+0x1da>
  else if(hadc->Instance==ADC3)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a1b      	ldr	r2, [pc, #108]	; (8002a00 <HAL_ADC_MspInit+0x1fc>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d123      	bne.n	80029de <HAL_ADC_MspInit+0x1da>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8002996:	4b15      	ldr	r3, [pc, #84]	; (80029ec <HAL_ADC_MspInit+0x1e8>)
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	4a14      	ldr	r2, [pc, #80]	; (80029ec <HAL_ADC_MspInit+0x1e8>)
 800299c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80029a0:	6153      	str	r3, [r2, #20]
 80029a2:	4b12      	ldr	r3, [pc, #72]	; (80029ec <HAL_ADC_MspInit+0x1e8>)
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029aa:	60fb      	str	r3, [r7, #12]
 80029ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ae:	4b0f      	ldr	r3, [pc, #60]	; (80029ec <HAL_ADC_MspInit+0x1e8>)
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	4a0e      	ldr	r2, [pc, #56]	; (80029ec <HAL_ADC_MspInit+0x1e8>)
 80029b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029b8:	6153      	str	r3, [r2, #20]
 80029ba:	4b0c      	ldr	r3, [pc, #48]	; (80029ec <HAL_ADC_MspInit+0x1e8>)
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029c2:	60bb      	str	r3, [r7, #8]
 80029c4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SENS_1_Pin|SENS_2_Pin;
 80029c6:	2303      	movs	r3, #3
 80029c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029ca:	2303      	movs	r3, #3
 80029cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ce:	2300      	movs	r3, #0
 80029d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029d6:	4619      	mov	r1, r3
 80029d8:	4806      	ldr	r0, [pc, #24]	; (80029f4 <HAL_ADC_MspInit+0x1f0>)
 80029da:	f002 fecb 	bl	8005774 <HAL_GPIO_Init>
}
 80029de:	bf00      	nop
 80029e0:	3738      	adds	r7, #56	; 0x38
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	20000790 	.word	0x20000790
 80029ec:	40021000 	.word	0x40021000
 80029f0:	50000100 	.word	0x50000100
 80029f4:	48000400 	.word	0x48000400
 80029f8:	20000184 	.word	0x20000184
 80029fc:	40020408 	.word	0x40020408
 8002a00:	50000400 	.word	0x50000400

08002a04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b08a      	sub	sp, #40	; 0x28
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a0c:	f107 0314 	add.w	r3, r7, #20
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	605a      	str	r2, [r3, #4]
 8002a16:	609a      	str	r2, [r3, #8]
 8002a18:	60da      	str	r2, [r3, #12]
 8002a1a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a17      	ldr	r2, [pc, #92]	; (8002a80 <HAL_I2C_MspInit+0x7c>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d128      	bne.n	8002a78 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a26:	4b17      	ldr	r3, [pc, #92]	; (8002a84 <HAL_I2C_MspInit+0x80>)
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	4a16      	ldr	r2, [pc, #88]	; (8002a84 <HAL_I2C_MspInit+0x80>)
 8002a2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a30:	6153      	str	r3, [r2, #20]
 8002a32:	4b14      	ldr	r3, [pc, #80]	; (8002a84 <HAL_I2C_MspInit+0x80>)
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a3a:	613b      	str	r3, [r7, #16]
 8002a3c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a3e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a44:	2312      	movs	r3, #18
 8002a46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a50:	2304      	movs	r3, #4
 8002a52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a54:	f107 0314 	add.w	r3, r7, #20
 8002a58:	4619      	mov	r1, r3
 8002a5a:	480b      	ldr	r0, [pc, #44]	; (8002a88 <HAL_I2C_MspInit+0x84>)
 8002a5c:	f002 fe8a 	bl	8005774 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a60:	4b08      	ldr	r3, [pc, #32]	; (8002a84 <HAL_I2C_MspInit+0x80>)
 8002a62:	69db      	ldr	r3, [r3, #28]
 8002a64:	4a07      	ldr	r2, [pc, #28]	; (8002a84 <HAL_I2C_MspInit+0x80>)
 8002a66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a6a:	61d3      	str	r3, [r2, #28]
 8002a6c:	4b05      	ldr	r3, [pc, #20]	; (8002a84 <HAL_I2C_MspInit+0x80>)
 8002a6e:	69db      	ldr	r3, [r3, #28]
 8002a70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a74:	60fb      	str	r3, [r7, #12]
 8002a76:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002a78:	bf00      	nop
 8002a7a:	3728      	adds	r7, #40	; 0x28
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40005400 	.word	0x40005400
 8002a84:	40021000 	.word	0x40021000
 8002a88:	48000400 	.word	0x48000400

08002a8c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a0d      	ldr	r2, [pc, #52]	; (8002ad0 <HAL_RTC_MspInit+0x44>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d111      	bne.n	8002ac2 <HAL_RTC_MspInit+0x36>
 8002a9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002aa2:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	fa93 f3a3 	rbit	r3, r3
 8002aaa:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002aac:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002aae:	fab3 f383 	clz	r3, r3
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	4b07      	ldr	r3, [pc, #28]	; (8002ad4 <HAL_RTC_MspInit+0x48>)
 8002ab8:	4413      	add	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	461a      	mov	r2, r3
 8002abe:	2301      	movs	r3, #1
 8002ac0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002ac2:	bf00      	nop
 8002ac4:	3714      	adds	r7, #20
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	40002800 	.word	0x40002800
 8002ad4:	10908100 	.word	0x10908100

08002ad8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b08e      	sub	sp, #56	; 0x38
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	605a      	str	r2, [r3, #4]
 8002aea:	609a      	str	r2, [r3, #8]
 8002aec:	60da      	str	r2, [r3, #12]
 8002aee:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a50      	ldr	r2, [pc, #320]	; (8002c38 <HAL_TIM_Base_MspInit+0x160>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d10c      	bne.n	8002b14 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002afa:	4b50      	ldr	r3, [pc, #320]	; (8002c3c <HAL_TIM_Base_MspInit+0x164>)
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	4a4f      	ldr	r2, [pc, #316]	; (8002c3c <HAL_TIM_Base_MspInit+0x164>)
 8002b00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b04:	6193      	str	r3, [r2, #24]
 8002b06:	4b4d      	ldr	r3, [pc, #308]	; (8002c3c <HAL_TIM_Base_MspInit+0x164>)
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b0e:	623b      	str	r3, [r7, #32]
 8002b10:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002b12:	e08d      	b.n	8002c30 <HAL_TIM_Base_MspInit+0x158>
  else if(htim_base->Instance==TIM2)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b1c:	d131      	bne.n	8002b82 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b1e:	4b47      	ldr	r3, [pc, #284]	; (8002c3c <HAL_TIM_Base_MspInit+0x164>)
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	4a46      	ldr	r2, [pc, #280]	; (8002c3c <HAL_TIM_Base_MspInit+0x164>)
 8002b24:	f043 0301 	orr.w	r3, r3, #1
 8002b28:	61d3      	str	r3, [r2, #28]
 8002b2a:	4b44      	ldr	r3, [pc, #272]	; (8002c3c <HAL_TIM_Base_MspInit+0x164>)
 8002b2c:	69db      	ldr	r3, [r3, #28]
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	61fb      	str	r3, [r7, #28]
 8002b34:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b36:	4b41      	ldr	r3, [pc, #260]	; (8002c3c <HAL_TIM_Base_MspInit+0x164>)
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	4a40      	ldr	r2, [pc, #256]	; (8002c3c <HAL_TIM_Base_MspInit+0x164>)
 8002b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b40:	6153      	str	r3, [r2, #20]
 8002b42:	4b3e      	ldr	r3, [pc, #248]	; (8002c3c <HAL_TIM_Base_MspInit+0x164>)
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4a:	61bb      	str	r3, [r7, #24]
 8002b4c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b52:	2302      	movs	r3, #2
 8002b54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b56:	2300      	movs	r3, #0
 8002b58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b66:	4619      	mov	r1, r3
 8002b68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b6c:	f002 fe02 	bl	8005774 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002b70:	2200      	movs	r2, #0
 8002b72:	2100      	movs	r1, #0
 8002b74:	201c      	movs	r0, #28
 8002b76:	f002 fb9c 	bl	80052b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002b7a:	201c      	movs	r0, #28
 8002b7c:	f002 fbb5 	bl	80052ea <HAL_NVIC_EnableIRQ>
}
 8002b80:	e056      	b.n	8002c30 <HAL_TIM_Base_MspInit+0x158>
  else if(htim_base->Instance==TIM3)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a2e      	ldr	r2, [pc, #184]	; (8002c40 <HAL_TIM_Base_MspInit+0x168>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d114      	bne.n	8002bb6 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b8c:	4b2b      	ldr	r3, [pc, #172]	; (8002c3c <HAL_TIM_Base_MspInit+0x164>)
 8002b8e:	69db      	ldr	r3, [r3, #28]
 8002b90:	4a2a      	ldr	r2, [pc, #168]	; (8002c3c <HAL_TIM_Base_MspInit+0x164>)
 8002b92:	f043 0302 	orr.w	r3, r3, #2
 8002b96:	61d3      	str	r3, [r2, #28]
 8002b98:	4b28      	ldr	r3, [pc, #160]	; (8002c3c <HAL_TIM_Base_MspInit+0x164>)
 8002b9a:	69db      	ldr	r3, [r3, #28]
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	617b      	str	r3, [r7, #20]
 8002ba2:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	201d      	movs	r0, #29
 8002baa:	f002 fb82 	bl	80052b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002bae:	201d      	movs	r0, #29
 8002bb0:	f002 fb9b 	bl	80052ea <HAL_NVIC_EnableIRQ>
}
 8002bb4:	e03c      	b.n	8002c30 <HAL_TIM_Base_MspInit+0x158>
  else if(htim_base->Instance==TIM4)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a22      	ldr	r2, [pc, #136]	; (8002c44 <HAL_TIM_Base_MspInit+0x16c>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d114      	bne.n	8002bea <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002bc0:	4b1e      	ldr	r3, [pc, #120]	; (8002c3c <HAL_TIM_Base_MspInit+0x164>)
 8002bc2:	69db      	ldr	r3, [r3, #28]
 8002bc4:	4a1d      	ldr	r2, [pc, #116]	; (8002c3c <HAL_TIM_Base_MspInit+0x164>)
 8002bc6:	f043 0304 	orr.w	r3, r3, #4
 8002bca:	61d3      	str	r3, [r2, #28]
 8002bcc:	4b1b      	ldr	r3, [pc, #108]	; (8002c3c <HAL_TIM_Base_MspInit+0x164>)
 8002bce:	69db      	ldr	r3, [r3, #28]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	613b      	str	r3, [r7, #16]
 8002bd6:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002bd8:	2200      	movs	r2, #0
 8002bda:	2100      	movs	r1, #0
 8002bdc:	201e      	movs	r0, #30
 8002bde:	f002 fb68 	bl	80052b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002be2:	201e      	movs	r0, #30
 8002be4:	f002 fb81 	bl	80052ea <HAL_NVIC_EnableIRQ>
}
 8002be8:	e022      	b.n	8002c30 <HAL_TIM_Base_MspInit+0x158>
  else if(htim_base->Instance==TIM8)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a16      	ldr	r2, [pc, #88]	; (8002c48 <HAL_TIM_Base_MspInit+0x170>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d10c      	bne.n	8002c0e <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002bf4:	4b11      	ldr	r3, [pc, #68]	; (8002c3c <HAL_TIM_Base_MspInit+0x164>)
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	4a10      	ldr	r2, [pc, #64]	; (8002c3c <HAL_TIM_Base_MspInit+0x164>)
 8002bfa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002bfe:	6193      	str	r3, [r2, #24]
 8002c00:	4b0e      	ldr	r3, [pc, #56]	; (8002c3c <HAL_TIM_Base_MspInit+0x164>)
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
}
 8002c0c:	e010      	b.n	8002c30 <HAL_TIM_Base_MspInit+0x158>
  else if(htim_base->Instance==TIM15)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a0e      	ldr	r2, [pc, #56]	; (8002c4c <HAL_TIM_Base_MspInit+0x174>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d10b      	bne.n	8002c30 <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002c18:	4b08      	ldr	r3, [pc, #32]	; (8002c3c <HAL_TIM_Base_MspInit+0x164>)
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	4a07      	ldr	r2, [pc, #28]	; (8002c3c <HAL_TIM_Base_MspInit+0x164>)
 8002c1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c22:	6193      	str	r3, [r2, #24]
 8002c24:	4b05      	ldr	r3, [pc, #20]	; (8002c3c <HAL_TIM_Base_MspInit+0x164>)
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c2c:	60bb      	str	r3, [r7, #8]
 8002c2e:	68bb      	ldr	r3, [r7, #8]
}
 8002c30:	bf00      	nop
 8002c32:	3738      	adds	r7, #56	; 0x38
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40012c00 	.word	0x40012c00
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	40000400 	.word	0x40000400
 8002c44:	40000800 	.word	0x40000800
 8002c48:	40013400 	.word	0x40013400
 8002c4c:	40014000 	.word	0x40014000

08002c50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b08c      	sub	sp, #48	; 0x30
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c58:	f107 031c 	add.w	r3, r7, #28
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	605a      	str	r2, [r3, #4]
 8002c62:	609a      	str	r2, [r3, #8]
 8002c64:	60da      	str	r2, [r3, #12]
 8002c66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a4c      	ldr	r2, [pc, #304]	; (8002da0 <HAL_TIM_MspPostInit+0x150>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d11e      	bne.n	8002cb0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c72:	4b4c      	ldr	r3, [pc, #304]	; (8002da4 <HAL_TIM_MspPostInit+0x154>)
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	4a4b      	ldr	r2, [pc, #300]	; (8002da4 <HAL_TIM_MspPostInit+0x154>)
 8002c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c7c:	6153      	str	r3, [r2, #20]
 8002c7e:	4b49      	ldr	r3, [pc, #292]	; (8002da4 <HAL_TIM_MspPostInit+0x154>)
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c86:	61bb      	str	r3, [r7, #24]
 8002c88:	69bb      	ldr	r3, [r7, #24]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 8002c8a:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8002c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c90:	2302      	movs	r3, #2
 8002c92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c94:	2300      	movs	r3, #0
 8002c96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002c9c:	2306      	movs	r3, #6
 8002c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ca0:	f107 031c 	add.w	r3, r7, #28
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002caa:	f002 fd63 	bl	8005774 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8002cae:	e072      	b.n	8002d96 <HAL_TIM_MspPostInit+0x146>
  else if(htim->Instance==TIM8)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a3c      	ldr	r2, [pc, #240]	; (8002da8 <HAL_TIM_MspPostInit+0x158>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d13a      	bne.n	8002d30 <HAL_TIM_MspPostInit+0xe0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cba:	4b3a      	ldr	r3, [pc, #232]	; (8002da4 <HAL_TIM_MspPostInit+0x154>)
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	4a39      	ldr	r2, [pc, #228]	; (8002da4 <HAL_TIM_MspPostInit+0x154>)
 8002cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cc4:	6153      	str	r3, [r2, #20]
 8002cc6:	4b37      	ldr	r3, [pc, #220]	; (8002da4 <HAL_TIM_MspPostInit+0x154>)
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cce:	617b      	str	r3, [r7, #20]
 8002cd0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cd2:	4b34      	ldr	r3, [pc, #208]	; (8002da4 <HAL_TIM_MspPostInit+0x154>)
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	4a33      	ldr	r2, [pc, #204]	; (8002da4 <HAL_TIM_MspPostInit+0x154>)
 8002cd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cdc:	6153      	str	r3, [r2, #20]
 8002cde:	4b31      	ldr	r3, [pc, #196]	; (8002da4 <HAL_TIM_MspPostInit+0x154>)
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ce6:	613b      	str	r3, [r7, #16]
 8002ce8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d00:	f107 031c 	add.w	r3, r7, #28
 8002d04:	4619      	mov	r1, r3
 8002d06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d0a:	f002 fd33 	bl	8005774 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002d0e:	2308      	movs	r3, #8
 8002d10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d12:	2302      	movs	r3, #2
 8002d14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d16:	2300      	movs	r3, #0
 8002d18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8002d1e:	2304      	movs	r3, #4
 8002d20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d22:	f107 031c 	add.w	r3, r7, #28
 8002d26:	4619      	mov	r1, r3
 8002d28:	4820      	ldr	r0, [pc, #128]	; (8002dac <HAL_TIM_MspPostInit+0x15c>)
 8002d2a:	f002 fd23 	bl	8005774 <HAL_GPIO_Init>
}
 8002d2e:	e032      	b.n	8002d96 <HAL_TIM_MspPostInit+0x146>
  else if(htim->Instance==TIM15)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a1e      	ldr	r2, [pc, #120]	; (8002db0 <HAL_TIM_MspPostInit+0x160>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d12d      	bne.n	8002d96 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d3a:	4b1a      	ldr	r3, [pc, #104]	; (8002da4 <HAL_TIM_MspPostInit+0x154>)
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	4a19      	ldr	r2, [pc, #100]	; (8002da4 <HAL_TIM_MspPostInit+0x154>)
 8002d40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d44:	6153      	str	r3, [r2, #20]
 8002d46:	4b17      	ldr	r3, [pc, #92]	; (8002da4 <HAL_TIM_MspPostInit+0x154>)
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d4e:	60fb      	str	r3, [r7, #12]
 8002d50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002d52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d58:	2302      	movs	r3, #2
 8002d5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d60:	2300      	movs	r3, #0
 8002d62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8002d64:	2301      	movs	r3, #1
 8002d66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d68:	f107 031c 	add.w	r3, r7, #28
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	480f      	ldr	r0, [pc, #60]	; (8002dac <HAL_TIM_MspPostInit+0x15c>)
 8002d70:	f002 fd00 	bl	8005774 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002d74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d82:	2300      	movs	r3, #0
 8002d84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM15;
 8002d86:	2302      	movs	r3, #2
 8002d88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d8a:	f107 031c 	add.w	r3, r7, #28
 8002d8e:	4619      	mov	r1, r3
 8002d90:	4806      	ldr	r0, [pc, #24]	; (8002dac <HAL_TIM_MspPostInit+0x15c>)
 8002d92:	f002 fcef 	bl	8005774 <HAL_GPIO_Init>
}
 8002d96:	bf00      	nop
 8002d98:	3730      	adds	r7, #48	; 0x30
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	40012c00 	.word	0x40012c00
 8002da4:	40021000 	.word	0x40021000
 8002da8:	40013400 	.word	0x40013400
 8002dac:	48000400 	.word	0x48000400
 8002db0:	40014000 	.word	0x40014000

08002db4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b08c      	sub	sp, #48	; 0x30
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dbc:	f107 031c 	add.w	r3, r7, #28
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	605a      	str	r2, [r3, #4]
 8002dc6:	609a      	str	r2, [r3, #8]
 8002dc8:	60da      	str	r2, [r3, #12]
 8002dca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a67      	ldr	r2, [pc, #412]	; (8002f70 <HAL_UART_MspInit+0x1bc>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d128      	bne.n	8002e28 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002dd6:	4b67      	ldr	r3, [pc, #412]	; (8002f74 <HAL_UART_MspInit+0x1c0>)
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	4a66      	ldr	r2, [pc, #408]	; (8002f74 <HAL_UART_MspInit+0x1c0>)
 8002ddc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002de0:	6193      	str	r3, [r2, #24]
 8002de2:	4b64      	ldr	r3, [pc, #400]	; (8002f74 <HAL_UART_MspInit+0x1c0>)
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dea:	61bb      	str	r3, [r7, #24]
 8002dec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dee:	4b61      	ldr	r3, [pc, #388]	; (8002f74 <HAL_UART_MspInit+0x1c0>)
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	4a60      	ldr	r2, [pc, #384]	; (8002f74 <HAL_UART_MspInit+0x1c0>)
 8002df4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002df8:	6153      	str	r3, [r2, #20]
 8002dfa:	4b5e      	ldr	r3, [pc, #376]	; (8002f74 <HAL_UART_MspInit+0x1c0>)
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e02:	617b      	str	r3, [r7, #20]
 8002e04:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e06:	23c0      	movs	r3, #192	; 0xc0
 8002e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e12:	2303      	movs	r3, #3
 8002e14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e16:	2307      	movs	r3, #7
 8002e18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e1a:	f107 031c 	add.w	r3, r7, #28
 8002e1e:	4619      	mov	r1, r3
 8002e20:	4855      	ldr	r0, [pc, #340]	; (8002f78 <HAL_UART_MspInit+0x1c4>)
 8002e22:	f002 fca7 	bl	8005774 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002e26:	e09f      	b.n	8002f68 <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==USART2)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a53      	ldr	r2, [pc, #332]	; (8002f7c <HAL_UART_MspInit+0x1c8>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	f040 809a 	bne.w	8002f68 <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e34:	4b4f      	ldr	r3, [pc, #316]	; (8002f74 <HAL_UART_MspInit+0x1c0>)
 8002e36:	69db      	ldr	r3, [r3, #28]
 8002e38:	4a4e      	ldr	r2, [pc, #312]	; (8002f74 <HAL_UART_MspInit+0x1c0>)
 8002e3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e3e:	61d3      	str	r3, [r2, #28]
 8002e40:	4b4c      	ldr	r3, [pc, #304]	; (8002f74 <HAL_UART_MspInit+0x1c0>)
 8002e42:	69db      	ldr	r3, [r3, #28]
 8002e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e48:	613b      	str	r3, [r7, #16]
 8002e4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e4c:	4b49      	ldr	r3, [pc, #292]	; (8002f74 <HAL_UART_MspInit+0x1c0>)
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	4a48      	ldr	r2, [pc, #288]	; (8002f74 <HAL_UART_MspInit+0x1c0>)
 8002e52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e56:	6153      	str	r3, [r2, #20]
 8002e58:	4b46      	ldr	r3, [pc, #280]	; (8002f74 <HAL_UART_MspInit+0x1c0>)
 8002e5a:	695b      	ldr	r3, [r3, #20]
 8002e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e60:	60fb      	str	r3, [r7, #12]
 8002e62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e64:	4b43      	ldr	r3, [pc, #268]	; (8002f74 <HAL_UART_MspInit+0x1c0>)
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	4a42      	ldr	r2, [pc, #264]	; (8002f74 <HAL_UART_MspInit+0x1c0>)
 8002e6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e6e:	6153      	str	r3, [r2, #20]
 8002e70:	4b40      	ldr	r3, [pc, #256]	; (8002f74 <HAL_UART_MspInit+0x1c0>)
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e78:	60bb      	str	r3, [r7, #8]
 8002e7a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002e7c:	2304      	movs	r3, #4
 8002e7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e80:	2302      	movs	r3, #2
 8002e82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e84:	2300      	movs	r3, #0
 8002e86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e8c:	2307      	movs	r3, #7
 8002e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e90:	f107 031c 	add.w	r3, r7, #28
 8002e94:	4619      	mov	r1, r3
 8002e96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e9a:	f002 fc6b 	bl	8005774 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002e9e:	2310      	movs	r3, #16
 8002ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002eae:	2307      	movs	r3, #7
 8002eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eb2:	f107 031c 	add.w	r3, r7, #28
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	482f      	ldr	r0, [pc, #188]	; (8002f78 <HAL_UART_MspInit+0x1c4>)
 8002eba:	f002 fc5b 	bl	8005774 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002ebe:	4b30      	ldr	r3, [pc, #192]	; (8002f80 <HAL_UART_MspInit+0x1cc>)
 8002ec0:	4a30      	ldr	r2, [pc, #192]	; (8002f84 <HAL_UART_MspInit+0x1d0>)
 8002ec2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ec4:	4b2e      	ldr	r3, [pc, #184]	; (8002f80 <HAL_UART_MspInit+0x1cc>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002eca:	4b2d      	ldr	r3, [pc, #180]	; (8002f80 <HAL_UART_MspInit+0x1cc>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ed0:	4b2b      	ldr	r3, [pc, #172]	; (8002f80 <HAL_UART_MspInit+0x1cc>)
 8002ed2:	2280      	movs	r2, #128	; 0x80
 8002ed4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ed6:	4b2a      	ldr	r3, [pc, #168]	; (8002f80 <HAL_UART_MspInit+0x1cc>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002edc:	4b28      	ldr	r3, [pc, #160]	; (8002f80 <HAL_UART_MspInit+0x1cc>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002ee2:	4b27      	ldr	r3, [pc, #156]	; (8002f80 <HAL_UART_MspInit+0x1cc>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002ee8:	4b25      	ldr	r3, [pc, #148]	; (8002f80 <HAL_UART_MspInit+0x1cc>)
 8002eea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002eee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002ef0:	4823      	ldr	r0, [pc, #140]	; (8002f80 <HAL_UART_MspInit+0x1cc>)
 8002ef2:	f002 fa14 	bl	800531e <HAL_DMA_Init>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <HAL_UART_MspInit+0x14c>
      Error_Handler();
 8002efc:	f7ff fa3a 	bl	8002374 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a1f      	ldr	r2, [pc, #124]	; (8002f80 <HAL_UART_MspInit+0x1cc>)
 8002f04:	675a      	str	r2, [r3, #116]	; 0x74
 8002f06:	4a1e      	ldr	r2, [pc, #120]	; (8002f80 <HAL_UART_MspInit+0x1cc>)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8002f0c:	4b1e      	ldr	r3, [pc, #120]	; (8002f88 <HAL_UART_MspInit+0x1d4>)
 8002f0e:	4a1f      	ldr	r2, [pc, #124]	; (8002f8c <HAL_UART_MspInit+0x1d8>)
 8002f10:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f12:	4b1d      	ldr	r3, [pc, #116]	; (8002f88 <HAL_UART_MspInit+0x1d4>)
 8002f14:	2210      	movs	r2, #16
 8002f16:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f18:	4b1b      	ldr	r3, [pc, #108]	; (8002f88 <HAL_UART_MspInit+0x1d4>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f1e:	4b1a      	ldr	r3, [pc, #104]	; (8002f88 <HAL_UART_MspInit+0x1d4>)
 8002f20:	2280      	movs	r2, #128	; 0x80
 8002f22:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f24:	4b18      	ldr	r3, [pc, #96]	; (8002f88 <HAL_UART_MspInit+0x1d4>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f2a:	4b17      	ldr	r3, [pc, #92]	; (8002f88 <HAL_UART_MspInit+0x1d4>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002f30:	4b15      	ldr	r3, [pc, #84]	; (8002f88 <HAL_UART_MspInit+0x1d4>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f36:	4b14      	ldr	r3, [pc, #80]	; (8002f88 <HAL_UART_MspInit+0x1d4>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002f3c:	4812      	ldr	r0, [pc, #72]	; (8002f88 <HAL_UART_MspInit+0x1d4>)
 8002f3e:	f002 f9ee 	bl	800531e <HAL_DMA_Init>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <HAL_UART_MspInit+0x198>
      Error_Handler();
 8002f48:	f7ff fa14 	bl	8002374 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a0e      	ldr	r2, [pc, #56]	; (8002f88 <HAL_UART_MspInit+0x1d4>)
 8002f50:	671a      	str	r2, [r3, #112]	; 0x70
 8002f52:	4a0d      	ldr	r2, [pc, #52]	; (8002f88 <HAL_UART_MspInit+0x1d4>)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8002f58:	2200      	movs	r2, #0
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	2026      	movs	r0, #38	; 0x26
 8002f5e:	f002 f9a8 	bl	80052b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002f62:	2026      	movs	r0, #38	; 0x26
 8002f64:	f002 f9c1 	bl	80052ea <HAL_NVIC_EnableIRQ>
}
 8002f68:	bf00      	nop
 8002f6a:	3730      	adds	r7, #48	; 0x30
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40013800 	.word	0x40013800
 8002f74:	40021000 	.word	0x40021000
 8002f78:	48000400 	.word	0x48000400
 8002f7c:	40004400 	.word	0x40004400
 8002f80:	20000514 	.word	0x20000514
 8002f84:	4002006c 	.word	0x4002006c
 8002f88:	20000558 	.word	0x20000558
 8002f8c:	40020080 	.word	0x40020080

08002f90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f94:	e7fe      	b.n	8002f94 <NMI_Handler+0x4>

08002f96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f96:	b480      	push	{r7}
 8002f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f9a:	e7fe      	b.n	8002f9a <HardFault_Handler+0x4>

08002f9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fa0:	e7fe      	b.n	8002fa0 <MemManage_Handler+0x4>

08002fa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fa6:	e7fe      	b.n	8002fa6 <BusFault_Handler+0x4>

08002fa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fac:	e7fe      	b.n	8002fac <UsageFault_Handler+0x4>

08002fae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fb2:	bf00      	nop
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fc0:	bf00      	nop
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr

08002fca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fce:	bf00      	nop
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fdc:	f000 f930 	bl	8003240 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fe0:	bf00      	nop
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002fe8:	bf00      	nop
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr

08002ff2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_Pin);
 8002ff6:	2002      	movs	r0, #2
 8002ff8:	f002 fd80 	bl	8005afc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002ffc:	bf00      	nop
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003004:	4802      	ldr	r0, [pc, #8]	; (8003010 <DMA1_Channel6_IRQHandler+0x10>)
 8003006:	f002 faa7 	bl	8005558 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800300a:	bf00      	nop
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	20000514 	.word	0x20000514

08003014 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003018:	4802      	ldr	r0, [pc, #8]	; (8003024 <DMA1_Channel7_IRQHandler+0x10>)
 800301a:	f002 fa9d 	bl	8005558 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800301e:	bf00      	nop
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	20000558 	.word	0x20000558

08003028 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800302c:	4803      	ldr	r0, [pc, #12]	; (800303c <ADC1_2_IRQHandler+0x14>)
 800302e:	f000 ff23 	bl	8003e78 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8003032:	4803      	ldr	r0, [pc, #12]	; (8003040 <ADC1_2_IRQHandler+0x18>)
 8003034:	f000 ff20 	bl	8003e78 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003038:	bf00      	nop
 800303a:	bd80      	pop	{r7, pc}
 800303c:	20000094 	.word	0x20000094
 8003040:	200000e4 	.word	0x200000e4

08003044 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8003048:	2020      	movs	r0, #32
 800304a:	f002 fd57 	bl	8005afc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800304e:	bf00      	nop
 8003050:	bd80      	pop	{r7, pc}
	...

08003054 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003058:	4802      	ldr	r0, [pc, #8]	; (8003064 <TIM2_IRQHandler+0x10>)
 800305a:	f005 fec7 	bl	8008dec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800305e:	bf00      	nop
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	20000288 	.word	0x20000288

08003068 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800306c:	4802      	ldr	r0, [pc, #8]	; (8003078 <TIM3_IRQHandler+0x10>)
 800306e:	f005 febd 	bl	8008dec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003072:	bf00      	nop
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	200002d4 	.word	0x200002d4

0800307c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003080:	4802      	ldr	r0, [pc, #8]	; (800308c <TIM4_IRQHandler+0x10>)
 8003082:	f005 feb3 	bl	8008dec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003086:	bf00      	nop
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	20000320 	.word	0x20000320

08003090 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003094:	4802      	ldr	r0, [pc, #8]	; (80030a0 <USART2_IRQHandler+0x10>)
 8003096:	f007 fb07 	bl	800a6a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800309a:	bf00      	nop
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	2000048c 	.word	0x2000048c

080030a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(START_Pin);
 80030a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80030ac:	f002 fd26 	bl	8005afc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(STOP_Pin);
 80030b0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80030b4:	f002 fd22 	bl	8005afc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80030b8:	bf00      	nop
 80030ba:	bd80      	pop	{r7, pc}

080030bc <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80030c0:	4802      	ldr	r0, [pc, #8]	; (80030cc <DMA2_Channel1_IRQHandler+0x10>)
 80030c2:	f002 fa49 	bl	8005558 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 80030c6:	bf00      	nop
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	20000184 	.word	0x20000184

080030d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030d8:	4a14      	ldr	r2, [pc, #80]	; (800312c <_sbrk+0x5c>)
 80030da:	4b15      	ldr	r3, [pc, #84]	; (8003130 <_sbrk+0x60>)
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030e4:	4b13      	ldr	r3, [pc, #76]	; (8003134 <_sbrk+0x64>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d102      	bne.n	80030f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030ec:	4b11      	ldr	r3, [pc, #68]	; (8003134 <_sbrk+0x64>)
 80030ee:	4a12      	ldr	r2, [pc, #72]	; (8003138 <_sbrk+0x68>)
 80030f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030f2:	4b10      	ldr	r3, [pc, #64]	; (8003134 <_sbrk+0x64>)
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4413      	add	r3, r2
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d207      	bcs.n	8003110 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003100:	f008 fca0 	bl	800ba44 <__errno>
 8003104:	4603      	mov	r3, r0
 8003106:	220c      	movs	r2, #12
 8003108:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800310a:	f04f 33ff 	mov.w	r3, #4294967295
 800310e:	e009      	b.n	8003124 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003110:	4b08      	ldr	r3, [pc, #32]	; (8003134 <_sbrk+0x64>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003116:	4b07      	ldr	r3, [pc, #28]	; (8003134 <_sbrk+0x64>)
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4413      	add	r3, r2
 800311e:	4a05      	ldr	r2, [pc, #20]	; (8003134 <_sbrk+0x64>)
 8003120:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003122:	68fb      	ldr	r3, [r7, #12]
}
 8003124:	4618      	mov	r0, r3
 8003126:	3718      	adds	r7, #24
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	2000a000 	.word	0x2000a000
 8003130:	00000400 	.word	0x00000400
 8003134:	20000794 	.word	0x20000794
 8003138:	200008e8 	.word	0x200008e8

0800313c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003140:	4b06      	ldr	r3, [pc, #24]	; (800315c <SystemInit+0x20>)
 8003142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003146:	4a05      	ldr	r2, [pc, #20]	; (800315c <SystemInit+0x20>)
 8003148:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800314c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003150:	bf00      	nop
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	e000ed00 	.word	0xe000ed00

08003160 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003160:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003198 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003164:	f7ff ffea 	bl	800313c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003168:	480c      	ldr	r0, [pc, #48]	; (800319c <LoopForever+0x6>)
  ldr r1, =_edata
 800316a:	490d      	ldr	r1, [pc, #52]	; (80031a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800316c:	4a0d      	ldr	r2, [pc, #52]	; (80031a4 <LoopForever+0xe>)
  movs r3, #0
 800316e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003170:	e002      	b.n	8003178 <LoopCopyDataInit>

08003172 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003172:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003174:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003176:	3304      	adds	r3, #4

08003178 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003178:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800317a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800317c:	d3f9      	bcc.n	8003172 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800317e:	4a0a      	ldr	r2, [pc, #40]	; (80031a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003180:	4c0a      	ldr	r4, [pc, #40]	; (80031ac <LoopForever+0x16>)
  movs r3, #0
 8003182:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003184:	e001      	b.n	800318a <LoopFillZerobss>

08003186 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003186:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003188:	3204      	adds	r2, #4

0800318a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800318a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800318c:	d3fb      	bcc.n	8003186 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800318e:	f008 fc5f 	bl	800ba50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003192:	f7fd fbcf 	bl	8000934 <main>

08003196 <LoopForever>:

LoopForever:
    b LoopForever
 8003196:	e7fe      	b.n	8003196 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003198:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800319c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031a0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80031a4:	0800c470 	.word	0x0800c470
  ldr r2, =_sbss
 80031a8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80031ac:	200008e4 	.word	0x200008e4

080031b0 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80031b0:	e7fe      	b.n	80031b0 <ADC3_IRQHandler>
	...

080031b4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031b8:	4b08      	ldr	r3, [pc, #32]	; (80031dc <HAL_Init+0x28>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a07      	ldr	r2, [pc, #28]	; (80031dc <HAL_Init+0x28>)
 80031be:	f043 0310 	orr.w	r3, r3, #16
 80031c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031c4:	2003      	movs	r0, #3
 80031c6:	f002 f869 	bl	800529c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031ca:	200f      	movs	r0, #15
 80031cc:	f000 f808 	bl	80031e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031d0:	f7ff faee 	bl	80027b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	40022000 	.word	0x40022000

080031e0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031e8:	4b12      	ldr	r3, [pc, #72]	; (8003234 <HAL_InitTick+0x54>)
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	4b12      	ldr	r3, [pc, #72]	; (8003238 <HAL_InitTick+0x58>)
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	4619      	mov	r1, r3
 80031f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80031fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80031fe:	4618      	mov	r0, r3
 8003200:	f002 f881 	bl	8005306 <HAL_SYSTICK_Config>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e00e      	b.n	800322c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2b0f      	cmp	r3, #15
 8003212:	d80a      	bhi.n	800322a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003214:	2200      	movs	r2, #0
 8003216:	6879      	ldr	r1, [r7, #4]
 8003218:	f04f 30ff 	mov.w	r0, #4294967295
 800321c:	f002 f849 	bl	80052b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003220:	4a06      	ldr	r2, [pc, #24]	; (800323c <HAL_InitTick+0x5c>)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8003226:	2300      	movs	r3, #0
 8003228:	e000      	b.n	800322c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
}
 800322c:	4618      	mov	r0, r3
 800322e:	3708      	adds	r7, #8
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	2000001c 	.word	0x2000001c
 8003238:	20000024 	.word	0x20000024
 800323c:	20000020 	.word	0x20000020

08003240 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003244:	4b06      	ldr	r3, [pc, #24]	; (8003260 <HAL_IncTick+0x20>)
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	461a      	mov	r2, r3
 800324a:	4b06      	ldr	r3, [pc, #24]	; (8003264 <HAL_IncTick+0x24>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4413      	add	r3, r2
 8003250:	4a04      	ldr	r2, [pc, #16]	; (8003264 <HAL_IncTick+0x24>)
 8003252:	6013      	str	r3, [r2, #0]
}
 8003254:	bf00      	nop
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	20000024 	.word	0x20000024
 8003264:	20000798 	.word	0x20000798

08003268 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
  return uwTick;  
 800326c:	4b03      	ldr	r3, [pc, #12]	; (800327c <HAL_GetTick+0x14>)
 800326e:	681b      	ldr	r3, [r3, #0]
}
 8003270:	4618      	mov	r0, r3
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	20000798 	.word	0x20000798

08003280 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003288:	f7ff ffee 	bl	8003268 <HAL_GetTick>
 800328c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003298:	d005      	beq.n	80032a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800329a:	4b0a      	ldr	r3, [pc, #40]	; (80032c4 <HAL_Delay+0x44>)
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	461a      	mov	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	4413      	add	r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80032a6:	bf00      	nop
 80032a8:	f7ff ffde 	bl	8003268 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d8f7      	bhi.n	80032a8 <HAL_Delay+0x28>
  {
  }
}
 80032b8:	bf00      	nop
 80032ba:	bf00      	nop
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	20000024 	.word	0x20000024

080032c8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b09a      	sub	sp, #104	; 0x68
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800330c:	2300      	movs	r3, #0
 800330e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8003312:	2300      	movs	r3, #0
 8003314:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8003316:	2300      	movs	r3, #0
 8003318:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d101      	bne.n	8003324 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e1c9      	b.n	80036b8 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	f003 0310 	and.w	r3, r3, #16
 8003332:	2b00      	cmp	r3, #0
 8003334:	d176      	bne.n	8003424 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333a:	2b00      	cmp	r3, #0
 800333c:	d152      	bne.n	80033e4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f7ff fa53 	bl	8002804 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d13b      	bne.n	80033e4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f001 fda9 	bl	8004ec4 <ADC_Disable>
 8003372:	4603      	mov	r3, r0
 8003374:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337c:	f003 0310 	and.w	r3, r3, #16
 8003380:	2b00      	cmp	r3, #0
 8003382:	d12f      	bne.n	80033e4 <HAL_ADC_Init+0xe0>
 8003384:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003388:	2b00      	cmp	r3, #0
 800338a:	d12b      	bne.n	80033e4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003390:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003394:	f023 0302 	bic.w	r3, r3, #2
 8003398:	f043 0202 	orr.w	r2, r3, #2
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689a      	ldr	r2, [r3, #8]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80033ae:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689a      	ldr	r2, [r3, #8]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80033be:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80033c0:	4b86      	ldr	r3, [pc, #536]	; (80035dc <HAL_ADC_Init+0x2d8>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a86      	ldr	r2, [pc, #536]	; (80035e0 <HAL_ADC_Init+0x2dc>)
 80033c6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ca:	0c9a      	lsrs	r2, r3, #18
 80033cc:	4613      	mov	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4413      	add	r3, r2
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80033d6:	e002      	b.n	80033de <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	3b01      	subs	r3, #1
 80033dc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1f9      	bne.n	80033d8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d007      	beq.n	8003402 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80033fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003400:	d110      	bne.n	8003424 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	f023 0312 	bic.w	r3, r3, #18
 800340a:	f043 0210 	orr.w	r2, r3, #16
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003416:	f043 0201 	orr.w	r2, r3, #1
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003428:	f003 0310 	and.w	r3, r3, #16
 800342c:	2b00      	cmp	r3, #0
 800342e:	f040 8136 	bne.w	800369e <HAL_ADC_Init+0x39a>
 8003432:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003436:	2b00      	cmp	r3, #0
 8003438:	f040 8131 	bne.w	800369e <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8003446:	2b00      	cmp	r3, #0
 8003448:	f040 8129 	bne.w	800369e <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003450:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003454:	f043 0202 	orr.w	r2, r3, #2
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003464:	d004      	beq.n	8003470 <HAL_ADC_Init+0x16c>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a5e      	ldr	r2, [pc, #376]	; (80035e4 <HAL_ADC_Init+0x2e0>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d101      	bne.n	8003474 <HAL_ADC_Init+0x170>
 8003470:	4b5d      	ldr	r3, [pc, #372]	; (80035e8 <HAL_ADC_Init+0x2e4>)
 8003472:	e000      	b.n	8003476 <HAL_ADC_Init+0x172>
 8003474:	4b5d      	ldr	r3, [pc, #372]	; (80035ec <HAL_ADC_Init+0x2e8>)
 8003476:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003480:	d102      	bne.n	8003488 <HAL_ADC_Init+0x184>
 8003482:	4b58      	ldr	r3, [pc, #352]	; (80035e4 <HAL_ADC_Init+0x2e0>)
 8003484:	60fb      	str	r3, [r7, #12]
 8003486:	e01a      	b.n	80034be <HAL_ADC_Init+0x1ba>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a55      	ldr	r2, [pc, #340]	; (80035e4 <HAL_ADC_Init+0x2e0>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d103      	bne.n	800349a <HAL_ADC_Init+0x196>
 8003492:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003496:	60fb      	str	r3, [r7, #12]
 8003498:	e011      	b.n	80034be <HAL_ADC_Init+0x1ba>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a54      	ldr	r2, [pc, #336]	; (80035f0 <HAL_ADC_Init+0x2ec>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d102      	bne.n	80034aa <HAL_ADC_Init+0x1a6>
 80034a4:	4b53      	ldr	r3, [pc, #332]	; (80035f4 <HAL_ADC_Init+0x2f0>)
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	e009      	b.n	80034be <HAL_ADC_Init+0x1ba>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a51      	ldr	r2, [pc, #324]	; (80035f4 <HAL_ADC_Init+0x2f0>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d102      	bne.n	80034ba <HAL_ADC_Init+0x1b6>
 80034b4:	4b4e      	ldr	r3, [pc, #312]	; (80035f0 <HAL_ADC_Init+0x2ec>)
 80034b6:	60fb      	str	r3, [r7, #12]
 80034b8:	e001      	b.n	80034be <HAL_ADC_Init+0x1ba>
 80034ba:	2300      	movs	r3, #0
 80034bc:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f003 0303 	and.w	r3, r3, #3
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d108      	bne.n	80034de <HAL_ADC_Init+0x1da>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d101      	bne.n	80034de <HAL_ADC_Init+0x1da>
 80034da:	2301      	movs	r3, #1
 80034dc:	e000      	b.n	80034e0 <HAL_ADC_Init+0x1dc>
 80034de:	2300      	movs	r3, #0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d11c      	bne.n	800351e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80034e4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d010      	beq.n	800350c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f003 0303 	and.w	r3, r3, #3
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d107      	bne.n	8003506 <HAL_ADC_Init+0x202>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d101      	bne.n	8003506 <HAL_ADC_Init+0x202>
 8003502:	2301      	movs	r3, #1
 8003504:	e000      	b.n	8003508 <HAL_ADC_Init+0x204>
 8003506:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003508:	2b00      	cmp	r3, #0
 800350a:	d108      	bne.n	800351e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800350c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	431a      	orrs	r2, r3
 800351a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800351c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	7e5b      	ldrb	r3, [r3, #25]
 8003522:	035b      	lsls	r3, r3, #13
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003528:	2a01      	cmp	r2, #1
 800352a:	d002      	beq.n	8003532 <HAL_ADC_Init+0x22e>
 800352c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003530:	e000      	b.n	8003534 <HAL_ADC_Init+0x230>
 8003532:	2200      	movs	r2, #0
 8003534:	431a      	orrs	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	431a      	orrs	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	4313      	orrs	r3, r2
 8003542:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003544:	4313      	orrs	r3, r2
 8003546:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d11b      	bne.n	800358a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	7e5b      	ldrb	r3, [r3, #25]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d109      	bne.n	800356e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355e:	3b01      	subs	r3, #1
 8003560:	045a      	lsls	r2, r3, #17
 8003562:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003564:	4313      	orrs	r3, r2
 8003566:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800356a:	663b      	str	r3, [r7, #96]	; 0x60
 800356c:	e00d      	b.n	800358a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003576:	f043 0220 	orr.w	r2, r3, #32
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003582:	f043 0201 	orr.w	r2, r3, #1
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358e:	2b01      	cmp	r3, #1
 8003590:	d03a      	beq.n	8003608 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a16      	ldr	r2, [pc, #88]	; (80035f0 <HAL_ADC_Init+0x2ec>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d004      	beq.n	80035a6 <HAL_ADC_Init+0x2a2>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a14      	ldr	r2, [pc, #80]	; (80035f4 <HAL_ADC_Init+0x2f0>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d128      	bne.n	80035f8 <HAL_ADC_Init+0x2f4>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035aa:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80035ae:	d012      	beq.n	80035d6 <HAL_ADC_Init+0x2d2>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035b8:	d00a      	beq.n	80035d0 <HAL_ADC_Init+0x2cc>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035be:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80035c2:	d002      	beq.n	80035ca <HAL_ADC_Init+0x2c6>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c8:	e018      	b.n	80035fc <HAL_ADC_Init+0x2f8>
 80035ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035ce:	e015      	b.n	80035fc <HAL_ADC_Init+0x2f8>
 80035d0:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80035d4:	e012      	b.n	80035fc <HAL_ADC_Init+0x2f8>
 80035d6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80035da:	e00f      	b.n	80035fc <HAL_ADC_Init+0x2f8>
 80035dc:	2000001c 	.word	0x2000001c
 80035e0:	431bde83 	.word	0x431bde83
 80035e4:	50000100 	.word	0x50000100
 80035e8:	50000300 	.word	0x50000300
 80035ec:	50000700 	.word	0x50000700
 80035f0:	50000400 	.word	0x50000400
 80035f4:	50000500 	.word	0x50000500
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003600:	4313      	orrs	r3, r2
 8003602:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003604:	4313      	orrs	r3, r2
 8003606:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 030c 	and.w	r3, r3, #12
 8003612:	2b00      	cmp	r3, #0
 8003614:	d114      	bne.n	8003640 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	6812      	ldr	r2, [r2, #0]
 8003620:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003624:	f023 0302 	bic.w	r3, r3, #2
 8003628:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	7e1b      	ldrb	r3, [r3, #24]
 800362e:	039a      	lsls	r2, r3, #14
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	4313      	orrs	r3, r2
 800363a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800363c:	4313      	orrs	r3, r2
 800363e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68da      	ldr	r2, [r3, #12]
 8003646:	4b1e      	ldr	r3, [pc, #120]	; (80036c0 <HAL_ADC_Init+0x3bc>)
 8003648:	4013      	ands	r3, r2
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	6812      	ldr	r2, [r2, #0]
 800364e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003650:	430b      	orrs	r3, r1
 8003652:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d10c      	bne.n	8003676 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003662:	f023 010f 	bic.w	r1, r3, #15
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	69db      	ldr	r3, [r3, #28]
 800366a:	1e5a      	subs	r2, r3, #1
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	430a      	orrs	r2, r1
 8003672:	631a      	str	r2, [r3, #48]	; 0x30
 8003674:	e007      	b.n	8003686 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f022 020f 	bic.w	r2, r2, #15
 8003684:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003690:	f023 0303 	bic.w	r3, r3, #3
 8003694:	f043 0201 	orr.w	r2, r3, #1
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	641a      	str	r2, [r3, #64]	; 0x40
 800369c:	e00a      	b.n	80036b4 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	f023 0312 	bic.w	r3, r3, #18
 80036a6:	f043 0210 	orr.w	r2, r3, #16
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80036ae:	2301      	movs	r3, #1
 80036b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80036b4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3768      	adds	r7, #104	; 0x68
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	fff0c007 	.word	0xfff0c007

080036c4 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036cc:	2300      	movs	r3, #0
 80036ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f003 0304 	and.w	r3, r3, #4
 80036da:	2b00      	cmp	r3, #0
 80036dc:	f040 80f9 	bne.w	80038d2 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d101      	bne.n	80036ee <HAL_ADC_Start+0x2a>
 80036ea:	2302      	movs	r3, #2
 80036ec:	e0f4      	b.n	80038d8 <HAL_ADC_Start+0x214>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f001 fb80 	bl	8004dfc <ADC_Enable>
 80036fc:	4603      	mov	r3, r0
 80036fe:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003700:	7bfb      	ldrb	r3, [r7, #15]
 8003702:	2b00      	cmp	r3, #0
 8003704:	f040 80e0 	bne.w	80038c8 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003710:	f023 0301 	bic.w	r3, r3, #1
 8003714:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003724:	d004      	beq.n	8003730 <HAL_ADC_Start+0x6c>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a6d      	ldr	r2, [pc, #436]	; (80038e0 <HAL_ADC_Start+0x21c>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d106      	bne.n	800373e <HAL_ADC_Start+0x7a>
 8003730:	4b6c      	ldr	r3, [pc, #432]	; (80038e4 <HAL_ADC_Start+0x220>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f003 031f 	and.w	r3, r3, #31
 8003738:	2b00      	cmp	r3, #0
 800373a:	d010      	beq.n	800375e <HAL_ADC_Start+0x9a>
 800373c:	e005      	b.n	800374a <HAL_ADC_Start+0x86>
 800373e:	4b6a      	ldr	r3, [pc, #424]	; (80038e8 <HAL_ADC_Start+0x224>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f003 031f 	and.w	r3, r3, #31
 8003746:	2b00      	cmp	r3, #0
 8003748:	d009      	beq.n	800375e <HAL_ADC_Start+0x9a>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003752:	d004      	beq.n	800375e <HAL_ADC_Start+0x9a>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a64      	ldr	r2, [pc, #400]	; (80038ec <HAL_ADC_Start+0x228>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d115      	bne.n	800378a <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d036      	beq.n	80037e6 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003780:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003788:	e02d      	b.n	80037e6 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800379e:	d004      	beq.n	80037aa <HAL_ADC_Start+0xe6>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a4e      	ldr	r2, [pc, #312]	; (80038e0 <HAL_ADC_Start+0x21c>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d10a      	bne.n	80037c0 <HAL_ADC_Start+0xfc>
 80037aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	bf14      	ite	ne
 80037b8:	2301      	movne	r3, #1
 80037ba:	2300      	moveq	r3, #0
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	e008      	b.n	80037d2 <HAL_ADC_Start+0x10e>
 80037c0:	4b4a      	ldr	r3, [pc, #296]	; (80038ec <HAL_ADC_Start+0x228>)
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	bf14      	ite	ne
 80037cc:	2301      	movne	r3, #1
 80037ce:	2300      	moveq	r3, #0
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d007      	beq.n	80037e6 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037da:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80037de:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037f2:	d106      	bne.n	8003802 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f8:	f023 0206 	bic.w	r2, r3, #6
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	645a      	str	r2, [r3, #68]	; 0x44
 8003800:	e002      	b.n	8003808 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	221c      	movs	r2, #28
 8003816:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003820:	d004      	beq.n	800382c <HAL_ADC_Start+0x168>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a2e      	ldr	r2, [pc, #184]	; (80038e0 <HAL_ADC_Start+0x21c>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d106      	bne.n	800383a <HAL_ADC_Start+0x176>
 800382c:	4b2d      	ldr	r3, [pc, #180]	; (80038e4 <HAL_ADC_Start+0x220>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f003 031f 	and.w	r3, r3, #31
 8003834:	2b00      	cmp	r3, #0
 8003836:	d03e      	beq.n	80038b6 <HAL_ADC_Start+0x1f2>
 8003838:	e005      	b.n	8003846 <HAL_ADC_Start+0x182>
 800383a:	4b2b      	ldr	r3, [pc, #172]	; (80038e8 <HAL_ADC_Start+0x224>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 031f 	and.w	r3, r3, #31
 8003842:	2b00      	cmp	r3, #0
 8003844:	d037      	beq.n	80038b6 <HAL_ADC_Start+0x1f2>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800384e:	d004      	beq.n	800385a <HAL_ADC_Start+0x196>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a22      	ldr	r2, [pc, #136]	; (80038e0 <HAL_ADC_Start+0x21c>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d106      	bne.n	8003868 <HAL_ADC_Start+0x1a4>
 800385a:	4b22      	ldr	r3, [pc, #136]	; (80038e4 <HAL_ADC_Start+0x220>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f003 031f 	and.w	r3, r3, #31
 8003862:	2b05      	cmp	r3, #5
 8003864:	d027      	beq.n	80038b6 <HAL_ADC_Start+0x1f2>
 8003866:	e005      	b.n	8003874 <HAL_ADC_Start+0x1b0>
 8003868:	4b1f      	ldr	r3, [pc, #124]	; (80038e8 <HAL_ADC_Start+0x224>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f003 031f 	and.w	r3, r3, #31
 8003870:	2b05      	cmp	r3, #5
 8003872:	d020      	beq.n	80038b6 <HAL_ADC_Start+0x1f2>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800387c:	d004      	beq.n	8003888 <HAL_ADC_Start+0x1c4>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a17      	ldr	r2, [pc, #92]	; (80038e0 <HAL_ADC_Start+0x21c>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d106      	bne.n	8003896 <HAL_ADC_Start+0x1d2>
 8003888:	4b16      	ldr	r3, [pc, #88]	; (80038e4 <HAL_ADC_Start+0x220>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f003 031f 	and.w	r3, r3, #31
 8003890:	2b09      	cmp	r3, #9
 8003892:	d010      	beq.n	80038b6 <HAL_ADC_Start+0x1f2>
 8003894:	e005      	b.n	80038a2 <HAL_ADC_Start+0x1de>
 8003896:	4b14      	ldr	r3, [pc, #80]	; (80038e8 <HAL_ADC_Start+0x224>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f003 031f 	and.w	r3, r3, #31
 800389e:	2b09      	cmp	r3, #9
 80038a0:	d009      	beq.n	80038b6 <HAL_ADC_Start+0x1f2>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038aa:	d004      	beq.n	80038b6 <HAL_ADC_Start+0x1f2>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a0e      	ldr	r2, [pc, #56]	; (80038ec <HAL_ADC_Start+0x228>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d10f      	bne.n	80038d6 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f042 0204 	orr.w	r2, r2, #4
 80038c4:	609a      	str	r2, [r3, #8]
 80038c6:	e006      	b.n	80038d6 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80038d0:	e001      	b.n	80038d6 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80038d2:	2302      	movs	r3, #2
 80038d4:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80038d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	50000100 	.word	0x50000100
 80038e4:	50000300 	.word	0x50000300
 80038e8:	50000700 	.word	0x50000700
 80038ec:	50000400 	.word	0x50000400

080038f0 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038f8:	2300      	movs	r3, #0
 80038fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003902:	2b01      	cmp	r3, #1
 8003904:	d101      	bne.n	800390a <HAL_ADC_Stop+0x1a>
 8003906:	2302      	movs	r3, #2
 8003908:	e023      	b.n	8003952 <HAL_ADC_Stop+0x62>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003912:	216c      	movs	r1, #108	; 0x6c
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f001 fb3b 	bl	8004f90 <ADC_ConversionStop>
 800391a:	4603      	mov	r3, r0
 800391c:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800391e:	7bfb      	ldrb	r3, [r7, #15]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d111      	bne.n	8003948 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f001 facd 	bl	8004ec4 <ADC_Disable>
 800392a:	4603      	mov	r3, r0
 800392c:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800392e:	7bfb      	ldrb	r3, [r7, #15]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d109      	bne.n	8003948 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003938:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800393c:	f023 0301 	bic.w	r3, r3, #1
 8003940:	f043 0201 	orr.w	r2, r3, #1
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003950:	7bfb      	ldrb	r3, [r7, #15]
}
 8003952:	4618      	mov	r0, r3
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
	...

0800395c <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8003966:	2300      	movs	r3, #0
 8003968:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	2b08      	cmp	r3, #8
 8003970:	d102      	bne.n	8003978 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8003972:	2308      	movs	r3, #8
 8003974:	617b      	str	r3, [r7, #20]
 8003976:	e03a      	b.n	80039ee <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003980:	d004      	beq.n	800398c <HAL_ADC_PollForConversion+0x30>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a72      	ldr	r2, [pc, #456]	; (8003b50 <HAL_ADC_PollForConversion+0x1f4>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d101      	bne.n	8003990 <HAL_ADC_PollForConversion+0x34>
 800398c:	4b71      	ldr	r3, [pc, #452]	; (8003b54 <HAL_ADC_PollForConversion+0x1f8>)
 800398e:	e000      	b.n	8003992 <HAL_ADC_PollForConversion+0x36>
 8003990:	4b71      	ldr	r3, [pc, #452]	; (8003b58 <HAL_ADC_PollForConversion+0x1fc>)
 8003992:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f003 031f 	and.w	r3, r3, #31
 800399c:	2b00      	cmp	r3, #0
 800399e:	d112      	bne.n	80039c6 <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d11d      	bne.n	80039ea <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b2:	f043 0220 	orr.w	r2, r3, #32
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e0bf      	b.n	8003b46 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00b      	beq.n	80039ea <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	f043 0220 	orr.w	r2, r3, #32
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e0ad      	b.n	8003b46 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80039ea:	230c      	movs	r3, #12
 80039ec:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039f6:	d004      	beq.n	8003a02 <HAL_ADC_PollForConversion+0xa6>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a54      	ldr	r2, [pc, #336]	; (8003b50 <HAL_ADC_PollForConversion+0x1f4>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d106      	bne.n	8003a10 <HAL_ADC_PollForConversion+0xb4>
 8003a02:	4b54      	ldr	r3, [pc, #336]	; (8003b54 <HAL_ADC_PollForConversion+0x1f8>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f003 031f 	and.w	r3, r3, #31
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d010      	beq.n	8003a30 <HAL_ADC_PollForConversion+0xd4>
 8003a0e:	e005      	b.n	8003a1c <HAL_ADC_PollForConversion+0xc0>
 8003a10:	4b51      	ldr	r3, [pc, #324]	; (8003b58 <HAL_ADC_PollForConversion+0x1fc>)
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f003 031f 	and.w	r3, r3, #31
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d009      	beq.n	8003a30 <HAL_ADC_PollForConversion+0xd4>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a24:	d004      	beq.n	8003a30 <HAL_ADC_PollForConversion+0xd4>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a4c      	ldr	r2, [pc, #304]	; (8003b5c <HAL_ADC_PollForConversion+0x200>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d104      	bne.n	8003a3a <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	613b      	str	r3, [r7, #16]
 8003a38:	e00f      	b.n	8003a5a <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a42:	d004      	beq.n	8003a4e <HAL_ADC_PollForConversion+0xf2>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a41      	ldr	r2, [pc, #260]	; (8003b50 <HAL_ADC_PollForConversion+0x1f4>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d102      	bne.n	8003a54 <HAL_ADC_PollForConversion+0xf8>
 8003a4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003a52:	e000      	b.n	8003a56 <HAL_ADC_PollForConversion+0xfa>
 8003a54:	4b41      	ldr	r3, [pc, #260]	; (8003b5c <HAL_ADC_PollForConversion+0x200>)
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8003a5a:	f7ff fc05 	bl	8003268 <HAL_GetTick>
 8003a5e:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003a60:	e021      	b.n	8003aa6 <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a68:	d01d      	beq.n	8003aa6 <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d007      	beq.n	8003a80 <HAL_ADC_PollForConversion+0x124>
 8003a70:	f7ff fbfa 	bl	8003268 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	683a      	ldr	r2, [r7, #0]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d212      	bcs.n	8003aa6 <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10b      	bne.n	8003aa6 <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a92:	f043 0204 	orr.w	r2, r3, #4
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e04f      	b.n	8003b46 <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d0d6      	beq.n	8003a62 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d131      	bne.n	8003b32 <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d12c      	bne.n	8003b32 <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0308 	and.w	r3, r3, #8
 8003ae2:	2b08      	cmp	r3, #8
 8003ae4:	d125      	bne.n	8003b32 <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d112      	bne.n	8003b1a <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d112      	bne.n	8003b32 <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b10:	f043 0201 	orr.w	r2, r3, #1
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	641a      	str	r2, [r3, #64]	; 0x40
 8003b18:	e00b      	b.n	8003b32 <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	f043 0220 	orr.w	r2, r3, #32
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2a:	f043 0201 	orr.w	r2, r3, #1
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d103      	bne.n	8003b44 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3718      	adds	r7, #24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	50000100 	.word	0x50000100
 8003b54:	50000300 	.word	0x50000300
 8003b58:	50000700 	.word	0x50000700
 8003b5c:	50000400 	.word	0x50000400

08003b60 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f003 0304 	and.w	r3, r3, #4
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f040 80f7 	bne.w	8003d6e <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d101      	bne.n	8003b8e <HAL_ADC_Start_DMA+0x2e>
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	e0f2      	b.n	8003d74 <HAL_ADC_Start_DMA+0x214>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b9e:	d004      	beq.n	8003baa <HAL_ADC_Start_DMA+0x4a>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a75      	ldr	r2, [pc, #468]	; (8003d7c <HAL_ADC_Start_DMA+0x21c>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d109      	bne.n	8003bbe <HAL_ADC_Start_DMA+0x5e>
 8003baa:	4b75      	ldr	r3, [pc, #468]	; (8003d80 <HAL_ADC_Start_DMA+0x220>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f003 031f 	and.w	r3, r3, #31
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	bf0c      	ite	eq
 8003bb6:	2301      	moveq	r3, #1
 8003bb8:	2300      	movne	r3, #0
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	e008      	b.n	8003bd0 <HAL_ADC_Start_DMA+0x70>
 8003bbe:	4b71      	ldr	r3, [pc, #452]	; (8003d84 <HAL_ADC_Start_DMA+0x224>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f003 031f 	and.w	r3, r3, #31
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	bf0c      	ite	eq
 8003bca:	2301      	moveq	r3, #1
 8003bcc:	2300      	movne	r3, #0
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f000 80c5 	beq.w	8003d60 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f001 f910 	bl	8004dfc <ADC_Enable>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003be0:	7dfb      	ldrb	r3, [r7, #23]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	f040 80b7 	bne.w	8003d56 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003bf0:	f023 0301 	bic.w	r3, r3, #1
 8003bf4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c04:	d004      	beq.n	8003c10 <HAL_ADC_Start_DMA+0xb0>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a5c      	ldr	r2, [pc, #368]	; (8003d7c <HAL_ADC_Start_DMA+0x21c>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d106      	bne.n	8003c1e <HAL_ADC_Start_DMA+0xbe>
 8003c10:	4b5b      	ldr	r3, [pc, #364]	; (8003d80 <HAL_ADC_Start_DMA+0x220>)
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f003 031f 	and.w	r3, r3, #31
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d010      	beq.n	8003c3e <HAL_ADC_Start_DMA+0xde>
 8003c1c:	e005      	b.n	8003c2a <HAL_ADC_Start_DMA+0xca>
 8003c1e:	4b59      	ldr	r3, [pc, #356]	; (8003d84 <HAL_ADC_Start_DMA+0x224>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f003 031f 	and.w	r3, r3, #31
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d009      	beq.n	8003c3e <HAL_ADC_Start_DMA+0xde>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c32:	d004      	beq.n	8003c3e <HAL_ADC_Start_DMA+0xde>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a53      	ldr	r2, [pc, #332]	; (8003d88 <HAL_ADC_Start_DMA+0x228>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d115      	bne.n	8003c6a <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d036      	beq.n	8003cc6 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003c60:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003c68:	e02d      	b.n	8003cc6 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c7e:	d004      	beq.n	8003c8a <HAL_ADC_Start_DMA+0x12a>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a3d      	ldr	r2, [pc, #244]	; (8003d7c <HAL_ADC_Start_DMA+0x21c>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d10a      	bne.n	8003ca0 <HAL_ADC_Start_DMA+0x140>
 8003c8a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	bf14      	ite	ne
 8003c98:	2301      	movne	r3, #1
 8003c9a:	2300      	moveq	r3, #0
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	e008      	b.n	8003cb2 <HAL_ADC_Start_DMA+0x152>
 8003ca0:	4b39      	ldr	r3, [pc, #228]	; (8003d88 <HAL_ADC_Start_DMA+0x228>)
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	bf14      	ite	ne
 8003cac:	2301      	movne	r3, #1
 8003cae:	2300      	moveq	r3, #0
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d007      	beq.n	8003cc6 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003cbe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cd2:	d106      	bne.n	8003ce2 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd8:	f023 0206 	bic.w	r2, r3, #6
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	645a      	str	r2, [r3, #68]	; 0x44
 8003ce0:	e002      	b.n	8003ce8 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf4:	4a25      	ldr	r2, [pc, #148]	; (8003d8c <HAL_ADC_Start_DMA+0x22c>)
 8003cf6:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfc:	4a24      	ldr	r2, [pc, #144]	; (8003d90 <HAL_ADC_Start_DMA+0x230>)
 8003cfe:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d04:	4a23      	ldr	r2, [pc, #140]	; (8003d94 <HAL_ADC_Start_DMA+0x234>)
 8003d06:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	221c      	movs	r2, #28
 8003d0e:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f042 0210 	orr.w	r2, r2, #16
 8003d1e:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68da      	ldr	r2, [r3, #12]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f042 0201 	orr.w	r2, r2, #1
 8003d2e:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	3340      	adds	r3, #64	; 0x40
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	68ba      	ldr	r2, [r7, #8]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f001 fb34 	bl	80053ac <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	689a      	ldr	r2, [r3, #8]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f042 0204 	orr.w	r2, r2, #4
 8003d52:	609a      	str	r2, [r3, #8]
 8003d54:	e00d      	b.n	8003d72 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003d5e:	e008      	b.n	8003d72 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003d6c:	e001      	b.n	8003d72 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003d6e:	2302      	movs	r3, #2
 8003d70:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003d72:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3718      	adds	r7, #24
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	50000100 	.word	0x50000100
 8003d80:	50000300 	.word	0x50000300
 8003d84:	50000700 	.word	0x50000700
 8003d88:	50000400 	.word	0x50000400
 8003d8c:	08004d31 	.word	0x08004d31
 8003d90:	08004dab 	.word	0x08004dab
 8003d94:	08004dc7 	.word	0x08004dc7

08003d98 <HAL_ADC_Stop_DMA>:
  *         dedicated MultimodeStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003da0:	2300      	movs	r3, #0
 8003da2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d101      	bne.n	8003db2 <HAL_ADC_Stop_DMA+0x1a>
 8003dae:	2302      	movs	r3, #2
 8003db0:	e050      	b.n	8003e54 <HAL_ADC_Stop_DMA+0xbc>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003dba:	216c      	movs	r1, #108	; 0x6c
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f001 f8e7 	bl	8004f90 <ADC_ConversionStop>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003dc6:	7bfb      	ldrb	r3, [r7, #15]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d13e      	bne.n	8003e4a <HAL_ADC_Stop_DMA+0xb2>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68da      	ldr	r2, [r3, #12]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 0201 	bic.w	r2, r2, #1
 8003dda:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d10f      	bne.n	8003e08 <HAL_ADC_Stop_DMA+0x70>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dec:	4618      	mov	r0, r3
 8003dee:	f001 fb3c 	bl	800546a <HAL_DMA_Abort>
 8003df2:	4603      	mov	r3, r0
 8003df4:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003df6:	7bfb      	ldrb	r3, [r7, #15]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d005      	beq.n	8003e08 <HAL_ADC_Stop_DMA+0x70>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e00:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f022 0210 	bic.w	r2, r2, #16
 8003e16:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 8003e18:	7bfb      	ldrb	r3, [r7, #15]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d105      	bne.n	8003e2a <HAL_ADC_Stop_DMA+0x92>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f001 f850 	bl	8004ec4 <ADC_Disable>
 8003e24:	4603      	mov	r3, r0
 8003e26:	73fb      	strb	r3, [r7, #15]
 8003e28:	e002      	b.n	8003e30 <HAL_ADC_Stop_DMA+0x98>
    }
    else
    {
      ADC_Disable(hadc);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f001 f84a 	bl	8004ec4 <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003e30:	7bfb      	ldrb	r3, [r7, #15]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d109      	bne.n	8003e4a <HAL_ADC_Stop_DMA+0xb2>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003e3e:	f023 0301 	bic.w	r3, r3, #1
 8003e42:	f043 0201 	orr.w	r2, r3, #1
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
	...

08003e78 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b088      	sub	sp, #32
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8003e80:	2300      	movs	r3, #0
 8003e82:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8003e84:	2300      	movs	r3, #0
 8003e86:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	f003 0304 	and.w	r3, r3, #4
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d004      	beq.n	8003eb0 <HAL_ADC_IRQHandler+0x38>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f003 0304 	and.w	r3, r3, #4
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d10b      	bne.n	8003ec8 <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f000 80bc 	beq.w	8004034 <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f003 0308 	and.w	r3, r3, #8
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f000 80b6 	beq.w	8004034 <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ecc:	f003 0310 	and.w	r3, r3, #16
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d105      	bne.n	8003ee0 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ee8:	d004      	beq.n	8003ef4 <HAL_ADC_IRQHandler+0x7c>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a90      	ldr	r2, [pc, #576]	; (8004130 <HAL_ADC_IRQHandler+0x2b8>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d106      	bne.n	8003f02 <HAL_ADC_IRQHandler+0x8a>
 8003ef4:	4b8f      	ldr	r3, [pc, #572]	; (8004134 <HAL_ADC_IRQHandler+0x2bc>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f003 031f 	and.w	r3, r3, #31
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d03e      	beq.n	8003f7e <HAL_ADC_IRQHandler+0x106>
 8003f00:	e005      	b.n	8003f0e <HAL_ADC_IRQHandler+0x96>
 8003f02:	4b8d      	ldr	r3, [pc, #564]	; (8004138 <HAL_ADC_IRQHandler+0x2c0>)
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f003 031f 	and.w	r3, r3, #31
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d037      	beq.n	8003f7e <HAL_ADC_IRQHandler+0x106>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f16:	d004      	beq.n	8003f22 <HAL_ADC_IRQHandler+0xaa>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a84      	ldr	r2, [pc, #528]	; (8004130 <HAL_ADC_IRQHandler+0x2b8>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d106      	bne.n	8003f30 <HAL_ADC_IRQHandler+0xb8>
 8003f22:	4b84      	ldr	r3, [pc, #528]	; (8004134 <HAL_ADC_IRQHandler+0x2bc>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f003 031f 	and.w	r3, r3, #31
 8003f2a:	2b05      	cmp	r3, #5
 8003f2c:	d027      	beq.n	8003f7e <HAL_ADC_IRQHandler+0x106>
 8003f2e:	e005      	b.n	8003f3c <HAL_ADC_IRQHandler+0xc4>
 8003f30:	4b81      	ldr	r3, [pc, #516]	; (8004138 <HAL_ADC_IRQHandler+0x2c0>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f003 031f 	and.w	r3, r3, #31
 8003f38:	2b05      	cmp	r3, #5
 8003f3a:	d020      	beq.n	8003f7e <HAL_ADC_IRQHandler+0x106>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f44:	d004      	beq.n	8003f50 <HAL_ADC_IRQHandler+0xd8>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a79      	ldr	r2, [pc, #484]	; (8004130 <HAL_ADC_IRQHandler+0x2b8>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d106      	bne.n	8003f5e <HAL_ADC_IRQHandler+0xe6>
 8003f50:	4b78      	ldr	r3, [pc, #480]	; (8004134 <HAL_ADC_IRQHandler+0x2bc>)
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f003 031f 	and.w	r3, r3, #31
 8003f58:	2b09      	cmp	r3, #9
 8003f5a:	d010      	beq.n	8003f7e <HAL_ADC_IRQHandler+0x106>
 8003f5c:	e005      	b.n	8003f6a <HAL_ADC_IRQHandler+0xf2>
 8003f5e:	4b76      	ldr	r3, [pc, #472]	; (8004138 <HAL_ADC_IRQHandler+0x2c0>)
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f003 031f 	and.w	r3, r3, #31
 8003f66:	2b09      	cmp	r3, #9
 8003f68:	d009      	beq.n	8003f7e <HAL_ADC_IRQHandler+0x106>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f72:	d004      	beq.n	8003f7e <HAL_ADC_IRQHandler+0x106>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a70      	ldr	r2, [pc, #448]	; (800413c <HAL_ADC_IRQHandler+0x2c4>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d104      	bne.n	8003f88 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	61bb      	str	r3, [r7, #24]
 8003f86:	e00f      	b.n	8003fa8 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f90:	d004      	beq.n	8003f9c <HAL_ADC_IRQHandler+0x124>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a66      	ldr	r2, [pc, #408]	; (8004130 <HAL_ADC_IRQHandler+0x2b8>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d102      	bne.n	8003fa2 <HAL_ADC_IRQHandler+0x12a>
 8003f9c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003fa0:	e000      	b.n	8003fa4 <HAL_ADC_IRQHandler+0x12c>
 8003fa2:	4b66      	ldr	r3, [pc, #408]	; (800413c <HAL_ADC_IRQHandler+0x2c4>)
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d137      	bne.n	8004026 <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d132      	bne.n	8004026 <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	f003 0308 	and.w	r3, r3, #8
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d02d      	beq.n	8004026 <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f003 0304 	and.w	r3, r3, #4
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d11a      	bne.n	800400e <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f022 020c 	bic.w	r2, r2, #12
 8003fe6:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d112      	bne.n	8004026 <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004004:	f043 0201 	orr.w	r2, r3, #1
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	641a      	str	r2, [r3, #64]	; 0x40
 800400c:	e00b      	b.n	8004026 <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004012:	f043 0210 	orr.w	r2, r3, #16
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401e:	f043 0201 	orr.w	r2, r3, #1
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f7fe f98e 	bl	8002348 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	220c      	movs	r2, #12
 8004032:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	f003 0320 	and.w	r3, r3, #32
 800403a:	2b00      	cmp	r3, #0
 800403c:	d004      	beq.n	8004048 <HAL_ADC_IRQHandler+0x1d0>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f003 0320 	and.w	r3, r3, #32
 8004044:	2b00      	cmp	r3, #0
 8004046:	d10b      	bne.n	8004060 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800404e:	2b00      	cmp	r3, #0
 8004050:	f000 8138 	beq.w	80042c4 <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800405a:	2b00      	cmp	r3, #0
 800405c:	f000 8132 	beq.w	80042c4 <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004064:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004074:	d004      	beq.n	8004080 <HAL_ADC_IRQHandler+0x208>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a2d      	ldr	r2, [pc, #180]	; (8004130 <HAL_ADC_IRQHandler+0x2b8>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d106      	bne.n	800408e <HAL_ADC_IRQHandler+0x216>
 8004080:	4b2c      	ldr	r3, [pc, #176]	; (8004134 <HAL_ADC_IRQHandler+0x2bc>)
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f003 031f 	and.w	r3, r3, #31
 8004088:	2b00      	cmp	r3, #0
 800408a:	d03e      	beq.n	800410a <HAL_ADC_IRQHandler+0x292>
 800408c:	e005      	b.n	800409a <HAL_ADC_IRQHandler+0x222>
 800408e:	4b2a      	ldr	r3, [pc, #168]	; (8004138 <HAL_ADC_IRQHandler+0x2c0>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f003 031f 	and.w	r3, r3, #31
 8004096:	2b00      	cmp	r3, #0
 8004098:	d037      	beq.n	800410a <HAL_ADC_IRQHandler+0x292>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040a2:	d004      	beq.n	80040ae <HAL_ADC_IRQHandler+0x236>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a21      	ldr	r2, [pc, #132]	; (8004130 <HAL_ADC_IRQHandler+0x2b8>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d106      	bne.n	80040bc <HAL_ADC_IRQHandler+0x244>
 80040ae:	4b21      	ldr	r3, [pc, #132]	; (8004134 <HAL_ADC_IRQHandler+0x2bc>)
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f003 031f 	and.w	r3, r3, #31
 80040b6:	2b05      	cmp	r3, #5
 80040b8:	d027      	beq.n	800410a <HAL_ADC_IRQHandler+0x292>
 80040ba:	e005      	b.n	80040c8 <HAL_ADC_IRQHandler+0x250>
 80040bc:	4b1e      	ldr	r3, [pc, #120]	; (8004138 <HAL_ADC_IRQHandler+0x2c0>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f003 031f 	and.w	r3, r3, #31
 80040c4:	2b05      	cmp	r3, #5
 80040c6:	d020      	beq.n	800410a <HAL_ADC_IRQHandler+0x292>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040d0:	d004      	beq.n	80040dc <HAL_ADC_IRQHandler+0x264>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a16      	ldr	r2, [pc, #88]	; (8004130 <HAL_ADC_IRQHandler+0x2b8>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d106      	bne.n	80040ea <HAL_ADC_IRQHandler+0x272>
 80040dc:	4b15      	ldr	r3, [pc, #84]	; (8004134 <HAL_ADC_IRQHandler+0x2bc>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f003 031f 	and.w	r3, r3, #31
 80040e4:	2b09      	cmp	r3, #9
 80040e6:	d010      	beq.n	800410a <HAL_ADC_IRQHandler+0x292>
 80040e8:	e005      	b.n	80040f6 <HAL_ADC_IRQHandler+0x27e>
 80040ea:	4b13      	ldr	r3, [pc, #76]	; (8004138 <HAL_ADC_IRQHandler+0x2c0>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f003 031f 	and.w	r3, r3, #31
 80040f2:	2b09      	cmp	r3, #9
 80040f4:	d009      	beq.n	800410a <HAL_ADC_IRQHandler+0x292>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040fe:	d004      	beq.n	800410a <HAL_ADC_IRQHandler+0x292>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a0d      	ldr	r2, [pc, #52]	; (800413c <HAL_ADC_IRQHandler+0x2c4>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d104      	bne.n	8004114 <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	61bb      	str	r3, [r7, #24]
 8004112:	e018      	b.n	8004146 <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800411c:	d004      	beq.n	8004128 <HAL_ADC_IRQHandler+0x2b0>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a03      	ldr	r2, [pc, #12]	; (8004130 <HAL_ADC_IRQHandler+0x2b8>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d10b      	bne.n	8004140 <HAL_ADC_IRQHandler+0x2c8>
 8004128:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800412c:	e009      	b.n	8004142 <HAL_ADC_IRQHandler+0x2ca>
 800412e:	bf00      	nop
 8004130:	50000100 	.word	0x50000100
 8004134:	50000300 	.word	0x50000300
 8004138:	50000700 	.word	0x50000700
 800413c:	50000400 	.word	0x50000400
 8004140:	4b92      	ldr	r3, [pc, #584]	; (800438c <HAL_ADC_IRQHandler+0x514>)
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800414c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004150:	2b00      	cmp	r3, #0
 8004152:	f040 80b0 	bne.w	80042b6 <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00d      	beq.n	800417c <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800416a:	2b00      	cmp	r3, #0
 800416c:	f040 80a3 	bne.w	80042b6 <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8004176:	2b00      	cmp	r3, #0
 8004178:	f040 809d 	bne.w	80042b6 <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004182:	2b00      	cmp	r3, #0
 8004184:	f000 8097 	beq.w	80042b6 <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004190:	d004      	beq.n	800419c <HAL_ADC_IRQHandler+0x324>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a7e      	ldr	r2, [pc, #504]	; (8004390 <HAL_ADC_IRQHandler+0x518>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d106      	bne.n	80041aa <HAL_ADC_IRQHandler+0x332>
 800419c:	4b7d      	ldr	r3, [pc, #500]	; (8004394 <HAL_ADC_IRQHandler+0x51c>)
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f003 031f 	and.w	r3, r3, #31
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d03e      	beq.n	8004226 <HAL_ADC_IRQHandler+0x3ae>
 80041a8:	e005      	b.n	80041b6 <HAL_ADC_IRQHandler+0x33e>
 80041aa:	4b7b      	ldr	r3, [pc, #492]	; (8004398 <HAL_ADC_IRQHandler+0x520>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f003 031f 	and.w	r3, r3, #31
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d037      	beq.n	8004226 <HAL_ADC_IRQHandler+0x3ae>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041be:	d004      	beq.n	80041ca <HAL_ADC_IRQHandler+0x352>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a72      	ldr	r2, [pc, #456]	; (8004390 <HAL_ADC_IRQHandler+0x518>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d106      	bne.n	80041d8 <HAL_ADC_IRQHandler+0x360>
 80041ca:	4b72      	ldr	r3, [pc, #456]	; (8004394 <HAL_ADC_IRQHandler+0x51c>)
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f003 031f 	and.w	r3, r3, #31
 80041d2:	2b06      	cmp	r3, #6
 80041d4:	d027      	beq.n	8004226 <HAL_ADC_IRQHandler+0x3ae>
 80041d6:	e005      	b.n	80041e4 <HAL_ADC_IRQHandler+0x36c>
 80041d8:	4b6f      	ldr	r3, [pc, #444]	; (8004398 <HAL_ADC_IRQHandler+0x520>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f003 031f 	and.w	r3, r3, #31
 80041e0:	2b06      	cmp	r3, #6
 80041e2:	d020      	beq.n	8004226 <HAL_ADC_IRQHandler+0x3ae>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041ec:	d004      	beq.n	80041f8 <HAL_ADC_IRQHandler+0x380>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a67      	ldr	r2, [pc, #412]	; (8004390 <HAL_ADC_IRQHandler+0x518>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d106      	bne.n	8004206 <HAL_ADC_IRQHandler+0x38e>
 80041f8:	4b66      	ldr	r3, [pc, #408]	; (8004394 <HAL_ADC_IRQHandler+0x51c>)
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f003 031f 	and.w	r3, r3, #31
 8004200:	2b07      	cmp	r3, #7
 8004202:	d010      	beq.n	8004226 <HAL_ADC_IRQHandler+0x3ae>
 8004204:	e005      	b.n	8004212 <HAL_ADC_IRQHandler+0x39a>
 8004206:	4b64      	ldr	r3, [pc, #400]	; (8004398 <HAL_ADC_IRQHandler+0x520>)
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f003 031f 	and.w	r3, r3, #31
 800420e:	2b07      	cmp	r3, #7
 8004210:	d009      	beq.n	8004226 <HAL_ADC_IRQHandler+0x3ae>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800421a:	d004      	beq.n	8004226 <HAL_ADC_IRQHandler+0x3ae>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a5a      	ldr	r2, [pc, #360]	; (800438c <HAL_ADC_IRQHandler+0x514>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d104      	bne.n	8004230 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	617b      	str	r3, [r7, #20]
 800422e:	e00f      	b.n	8004250 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004238:	d004      	beq.n	8004244 <HAL_ADC_IRQHandler+0x3cc>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a54      	ldr	r2, [pc, #336]	; (8004390 <HAL_ADC_IRQHandler+0x518>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d102      	bne.n	800424a <HAL_ADC_IRQHandler+0x3d2>
 8004244:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004248:	e000      	b.n	800424c <HAL_ADC_IRQHandler+0x3d4>
 800424a:	4b50      	ldr	r3, [pc, #320]	; (800438c <HAL_ADC_IRQHandler+0x514>)
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d12d      	bne.n	80042b6 <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f003 0308 	and.w	r3, r3, #8
 8004264:	2b00      	cmp	r3, #0
 8004266:	d11a      	bne.n	800429e <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	685a      	ldr	r2, [r3, #4]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004276:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800428c:	2b00      	cmp	r3, #0
 800428e:	d112      	bne.n	80042b6 <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004294:	f043 0201 	orr.w	r2, r3, #1
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	641a      	str	r2, [r3, #64]	; 0x40
 800429c:	e00b      	b.n	80042b6 <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	f043 0210 	orr.w	r2, r3, #16
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ae:	f043 0201 	orr.w	r2, r3, #1
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f936 	bl	8004528 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2260      	movs	r2, #96	; 0x60
 80042c2:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d011      	beq.n	80042f2 <HAL_ADC_IRQHandler+0x47a>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d00c      	beq.n	80042f2 <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042dc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f7fe fff9 	bl	80032dc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2280      	movs	r2, #128	; 0x80
 80042f0:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d012      	beq.n	8004322 <HAL_ADC_IRQHandler+0x4aa>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00d      	beq.n	8004322 <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f91c 	bl	8004550 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004320:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004328:	2b00      	cmp	r3, #0
 800432a:	d012      	beq.n	8004352 <HAL_ADC_IRQHandler+0x4da>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00d      	beq.n	8004352 <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f90e 	bl	8004564 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004350:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	f003 0310 	and.w	r3, r3, #16
 8004358:	2b00      	cmp	r3, #0
 800435a:	d04f      	beq.n	80043fc <HAL_ADC_IRQHandler+0x584>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f003 0310 	and.w	r3, r3, #16
 8004362:	2b00      	cmp	r3, #0
 8004364:	d04a      	beq.n	80043fc <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800436a:	2b01      	cmp	r3, #1
 800436c:	d102      	bne.n	8004374 <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 800436e:	2301      	movs	r3, #1
 8004370:	61fb      	str	r3, [r7, #28]
 8004372:	e02d      	b.n	80043d0 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800437c:	d004      	beq.n	8004388 <HAL_ADC_IRQHandler+0x510>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a03      	ldr	r2, [pc, #12]	; (8004390 <HAL_ADC_IRQHandler+0x518>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d109      	bne.n	800439c <HAL_ADC_IRQHandler+0x524>
 8004388:	4b02      	ldr	r3, [pc, #8]	; (8004394 <HAL_ADC_IRQHandler+0x51c>)
 800438a:	e008      	b.n	800439e <HAL_ADC_IRQHandler+0x526>
 800438c:	50000400 	.word	0x50000400
 8004390:	50000100 	.word	0x50000100
 8004394:	50000300 	.word	0x50000300
 8004398:	50000700 	.word	0x50000700
 800439c:	4b28      	ldr	r3, [pc, #160]	; (8004440 <HAL_ADC_IRQHandler+0x5c8>)
 800439e:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f003 031f 	and.w	r3, r3, #31
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d109      	bne.n	80043c0 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d10a      	bne.n	80043d0 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 80043ba:	2301      	movs	r3, #1
 80043bc:	61fb      	str	r3, [r7, #28]
 80043be:	e007      	b.n	80043d0 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d001      	beq.n	80043d0 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 80043cc:	2301      	movs	r3, #1
 80043ce:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d10e      	bne.n	80043f4 <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e6:	f043 0202 	orr.w	r2, r3, #2
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f7fe ff7e 	bl	80032f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2210      	movs	r2, #16
 80043fa:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004402:	2b00      	cmp	r3, #0
 8004404:	d018      	beq.n	8004438 <HAL_ADC_IRQHandler+0x5c0>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800440c:	2b00      	cmp	r3, #0
 800440e:	d013      	beq.n	8004438 <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004414:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004420:	f043 0208 	orr.w	r2, r3, #8
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004430:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 f882 	bl	800453c <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8004438:	bf00      	nop
 800443a:	3720      	adds	r7, #32
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	50000700 	.word	0x50000700

08004444 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800444e:	2300      	movs	r3, #0
 8004450:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004458:	2b01      	cmp	r3, #1
 800445a:	d101      	bne.n	8004460 <HAL_ADCEx_Calibration_Start+0x1c>
 800445c:	2302      	movs	r3, #2
 800445e:	e05f      	b.n	8004520 <HAL_ADCEx_Calibration_Start+0xdc>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 fd2b 	bl	8004ec4 <ADC_Disable>
 800446e:	4603      	mov	r3, r0
 8004470:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004472:	7bfb      	ldrb	r3, [r7, #15]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d14e      	bne.n	8004516 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	689a      	ldr	r2, [r3, #8]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800448c:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d107      	bne.n	80044a4 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689a      	ldr	r2, [r3, #8]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80044a2:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	689a      	ldr	r2, [r3, #8]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80044b2:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80044b4:	f7fe fed8 	bl	8003268 <HAL_GetTick>
 80044b8:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80044ba:	e01c      	b.n	80044f6 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80044bc:	f7fe fed4 	bl	8003268 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b0a      	cmp	r3, #10
 80044c8:	d915      	bls.n	80044f6 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044d8:	d10d      	bne.n	80044f6 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044de:	f023 0312 	bic.w	r3, r3, #18
 80044e2:	f043 0210 	orr.w	r2, r3, #16
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e014      	b.n	8004520 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004500:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004504:	d0da      	beq.n	80044bc <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450a:	f023 0303 	bic.w	r3, r3, #3
 800450e:	f043 0201 	orr.w	r2, r3, #1
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800451e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004520:	4618      	mov	r0, r3
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8004558:	bf00      	nop
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004578:	b480      	push	{r7}
 800457a:	b09b      	sub	sp, #108	; 0x6c
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004582:	2300      	movs	r3, #0
 8004584:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8004588:	2300      	movs	r3, #0
 800458a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004592:	2b01      	cmp	r3, #1
 8004594:	d101      	bne.n	800459a <HAL_ADC_ConfigChannel+0x22>
 8004596:	2302      	movs	r3, #2
 8004598:	e2c8      	b.n	8004b2c <HAL_ADC_ConfigChannel+0x5b4>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f003 0304 	and.w	r3, r3, #4
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f040 82ac 	bne.w	8004b0a <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	2b04      	cmp	r3, #4
 80045b8:	d81c      	bhi.n	80045f4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	685a      	ldr	r2, [r3, #4]
 80045c4:	4613      	mov	r3, r2
 80045c6:	005b      	lsls	r3, r3, #1
 80045c8:	4413      	add	r3, r2
 80045ca:	005b      	lsls	r3, r3, #1
 80045cc:	461a      	mov	r2, r3
 80045ce:	231f      	movs	r3, #31
 80045d0:	4093      	lsls	r3, r2
 80045d2:	43db      	mvns	r3, r3
 80045d4:	4019      	ands	r1, r3
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	6818      	ldr	r0, [r3, #0]
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	685a      	ldr	r2, [r3, #4]
 80045de:	4613      	mov	r3, r2
 80045e0:	005b      	lsls	r3, r3, #1
 80045e2:	4413      	add	r3, r2
 80045e4:	005b      	lsls	r3, r3, #1
 80045e6:	fa00 f203 	lsl.w	r2, r0, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	631a      	str	r2, [r3, #48]	; 0x30
 80045f2:	e063      	b.n	80046bc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	2b09      	cmp	r3, #9
 80045fa:	d81e      	bhi.n	800463a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	685a      	ldr	r2, [r3, #4]
 8004606:	4613      	mov	r3, r2
 8004608:	005b      	lsls	r3, r3, #1
 800460a:	4413      	add	r3, r2
 800460c:	005b      	lsls	r3, r3, #1
 800460e:	3b1e      	subs	r3, #30
 8004610:	221f      	movs	r2, #31
 8004612:	fa02 f303 	lsl.w	r3, r2, r3
 8004616:	43db      	mvns	r3, r3
 8004618:	4019      	ands	r1, r3
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	6818      	ldr	r0, [r3, #0]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	685a      	ldr	r2, [r3, #4]
 8004622:	4613      	mov	r3, r2
 8004624:	005b      	lsls	r3, r3, #1
 8004626:	4413      	add	r3, r2
 8004628:	005b      	lsls	r3, r3, #1
 800462a:	3b1e      	subs	r3, #30
 800462c:	fa00 f203 	lsl.w	r2, r0, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	430a      	orrs	r2, r1
 8004636:	635a      	str	r2, [r3, #52]	; 0x34
 8004638:	e040      	b.n	80046bc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	2b0e      	cmp	r3, #14
 8004640:	d81e      	bhi.n	8004680 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	685a      	ldr	r2, [r3, #4]
 800464c:	4613      	mov	r3, r2
 800464e:	005b      	lsls	r3, r3, #1
 8004650:	4413      	add	r3, r2
 8004652:	005b      	lsls	r3, r3, #1
 8004654:	3b3c      	subs	r3, #60	; 0x3c
 8004656:	221f      	movs	r2, #31
 8004658:	fa02 f303 	lsl.w	r3, r2, r3
 800465c:	43db      	mvns	r3, r3
 800465e:	4019      	ands	r1, r3
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	6818      	ldr	r0, [r3, #0]
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	685a      	ldr	r2, [r3, #4]
 8004668:	4613      	mov	r3, r2
 800466a:	005b      	lsls	r3, r3, #1
 800466c:	4413      	add	r3, r2
 800466e:	005b      	lsls	r3, r3, #1
 8004670:	3b3c      	subs	r3, #60	; 0x3c
 8004672:	fa00 f203 	lsl.w	r2, r0, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	430a      	orrs	r2, r1
 800467c:	639a      	str	r2, [r3, #56]	; 0x38
 800467e:	e01d      	b.n	80046bc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	685a      	ldr	r2, [r3, #4]
 800468a:	4613      	mov	r3, r2
 800468c:	005b      	lsls	r3, r3, #1
 800468e:	4413      	add	r3, r2
 8004690:	005b      	lsls	r3, r3, #1
 8004692:	3b5a      	subs	r3, #90	; 0x5a
 8004694:	221f      	movs	r2, #31
 8004696:	fa02 f303 	lsl.w	r3, r2, r3
 800469a:	43db      	mvns	r3, r3
 800469c:	4019      	ands	r1, r3
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	6818      	ldr	r0, [r3, #0]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	685a      	ldr	r2, [r3, #4]
 80046a6:	4613      	mov	r3, r2
 80046a8:	005b      	lsls	r3, r3, #1
 80046aa:	4413      	add	r3, r2
 80046ac:	005b      	lsls	r3, r3, #1
 80046ae:	3b5a      	subs	r3, #90	; 0x5a
 80046b0:	fa00 f203 	lsl.w	r2, r0, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	430a      	orrs	r2, r1
 80046ba:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f003 030c 	and.w	r3, r3, #12
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f040 80e5 	bne.w	8004896 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2b09      	cmp	r3, #9
 80046d2:	d91c      	bls.n	800470e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6999      	ldr	r1, [r3, #24]
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	4613      	mov	r3, r2
 80046e0:	005b      	lsls	r3, r3, #1
 80046e2:	4413      	add	r3, r2
 80046e4:	3b1e      	subs	r3, #30
 80046e6:	2207      	movs	r2, #7
 80046e8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ec:	43db      	mvns	r3, r3
 80046ee:	4019      	ands	r1, r3
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	6898      	ldr	r0, [r3, #8]
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	4613      	mov	r3, r2
 80046fa:	005b      	lsls	r3, r3, #1
 80046fc:	4413      	add	r3, r2
 80046fe:	3b1e      	subs	r3, #30
 8004700:	fa00 f203 	lsl.w	r2, r0, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	430a      	orrs	r2, r1
 800470a:	619a      	str	r2, [r3, #24]
 800470c:	e019      	b.n	8004742 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	6959      	ldr	r1, [r3, #20]
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	4613      	mov	r3, r2
 800471a:	005b      	lsls	r3, r3, #1
 800471c:	4413      	add	r3, r2
 800471e:	2207      	movs	r2, #7
 8004720:	fa02 f303 	lsl.w	r3, r2, r3
 8004724:	43db      	mvns	r3, r3
 8004726:	4019      	ands	r1, r3
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	6898      	ldr	r0, [r3, #8]
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	4613      	mov	r3, r2
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	4413      	add	r3, r2
 8004736:	fa00 f203 	lsl.w	r2, r0, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	430a      	orrs	r2, r1
 8004740:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	695a      	ldr	r2, [r3, #20]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	08db      	lsrs	r3, r3, #3
 800474e:	f003 0303 	and.w	r3, r3, #3
 8004752:	005b      	lsls	r3, r3, #1
 8004754:	fa02 f303 	lsl.w	r3, r2, r3
 8004758:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	3b01      	subs	r3, #1
 8004760:	2b03      	cmp	r3, #3
 8004762:	d84f      	bhi.n	8004804 <HAL_ADC_ConfigChannel+0x28c>
 8004764:	a201      	add	r2, pc, #4	; (adr r2, 800476c <HAL_ADC_ConfigChannel+0x1f4>)
 8004766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800476a:	bf00      	nop
 800476c:	0800477d 	.word	0x0800477d
 8004770:	0800479f 	.word	0x0800479f
 8004774:	080047c1 	.word	0x080047c1
 8004778:	080047e3 	.word	0x080047e3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004782:	4b99      	ldr	r3, [pc, #612]	; (80049e8 <HAL_ADC_ConfigChannel+0x470>)
 8004784:	4013      	ands	r3, r2
 8004786:	683a      	ldr	r2, [r7, #0]
 8004788:	6812      	ldr	r2, [r2, #0]
 800478a:	0691      	lsls	r1, r2, #26
 800478c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800478e:	430a      	orrs	r2, r1
 8004790:	431a      	orrs	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800479a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800479c:	e07b      	b.n	8004896 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80047a4:	4b90      	ldr	r3, [pc, #576]	; (80049e8 <HAL_ADC_ConfigChannel+0x470>)
 80047a6:	4013      	ands	r3, r2
 80047a8:	683a      	ldr	r2, [r7, #0]
 80047aa:	6812      	ldr	r2, [r2, #0]
 80047ac:	0691      	lsls	r1, r2, #26
 80047ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80047b0:	430a      	orrs	r2, r1
 80047b2:	431a      	orrs	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80047bc:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80047be:	e06a      	b.n	8004896 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80047c6:	4b88      	ldr	r3, [pc, #544]	; (80049e8 <HAL_ADC_ConfigChannel+0x470>)
 80047c8:	4013      	ands	r3, r2
 80047ca:	683a      	ldr	r2, [r7, #0]
 80047cc:	6812      	ldr	r2, [r2, #0]
 80047ce:	0691      	lsls	r1, r2, #26
 80047d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80047d2:	430a      	orrs	r2, r1
 80047d4:	431a      	orrs	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80047de:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80047e0:	e059      	b.n	8004896 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80047e8:	4b7f      	ldr	r3, [pc, #508]	; (80049e8 <HAL_ADC_ConfigChannel+0x470>)
 80047ea:	4013      	ands	r3, r2
 80047ec:	683a      	ldr	r2, [r7, #0]
 80047ee:	6812      	ldr	r2, [r2, #0]
 80047f0:	0691      	lsls	r1, r2, #26
 80047f2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80047f4:	430a      	orrs	r2, r1
 80047f6:	431a      	orrs	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004800:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004802:	e048      	b.n	8004896 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800480a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	069b      	lsls	r3, r3, #26
 8004814:	429a      	cmp	r2, r3
 8004816:	d107      	bne.n	8004828 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004826:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800482e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	069b      	lsls	r3, r3, #26
 8004838:	429a      	cmp	r2, r3
 800483a:	d107      	bne.n	800484c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800484a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004852:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	069b      	lsls	r3, r3, #26
 800485c:	429a      	cmp	r2, r3
 800485e:	d107      	bne.n	8004870 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800486e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004876:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	069b      	lsls	r3, r3, #26
 8004880:	429a      	cmp	r2, r3
 8004882:	d107      	bne.n	8004894 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004892:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8004894:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f003 0303 	and.w	r3, r3, #3
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d108      	bne.n	80048b6 <HAL_ADC_ConfigChannel+0x33e>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d101      	bne.n	80048b6 <HAL_ADC_ConfigChannel+0x33e>
 80048b2:	2301      	movs	r3, #1
 80048b4:	e000      	b.n	80048b8 <HAL_ADC_ConfigChannel+0x340>
 80048b6:	2300      	movs	r3, #0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f040 8131 	bne.w	8004b20 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d00f      	beq.n	80048e6 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2201      	movs	r2, #1
 80048d4:	fa02 f303 	lsl.w	r3, r2, r3
 80048d8:	43da      	mvns	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	400a      	ands	r2, r1
 80048e0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80048e4:	e049      	b.n	800497a <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2201      	movs	r2, #1
 80048f4:	409a      	lsls	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	430a      	orrs	r2, r1
 80048fc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2b09      	cmp	r3, #9
 8004906:	d91c      	bls.n	8004942 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6999      	ldr	r1, [r3, #24]
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	4613      	mov	r3, r2
 8004914:	005b      	lsls	r3, r3, #1
 8004916:	4413      	add	r3, r2
 8004918:	3b1b      	subs	r3, #27
 800491a:	2207      	movs	r2, #7
 800491c:	fa02 f303 	lsl.w	r3, r2, r3
 8004920:	43db      	mvns	r3, r3
 8004922:	4019      	ands	r1, r3
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	6898      	ldr	r0, [r3, #8]
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	4613      	mov	r3, r2
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	4413      	add	r3, r2
 8004932:	3b1b      	subs	r3, #27
 8004934:	fa00 f203 	lsl.w	r2, r0, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	430a      	orrs	r2, r1
 800493e:	619a      	str	r2, [r3, #24]
 8004940:	e01b      	b.n	800497a <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	6959      	ldr	r1, [r3, #20]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	1c5a      	adds	r2, r3, #1
 800494e:	4613      	mov	r3, r2
 8004950:	005b      	lsls	r3, r3, #1
 8004952:	4413      	add	r3, r2
 8004954:	2207      	movs	r2, #7
 8004956:	fa02 f303 	lsl.w	r3, r2, r3
 800495a:	43db      	mvns	r3, r3
 800495c:	4019      	ands	r1, r3
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	6898      	ldr	r0, [r3, #8]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	1c5a      	adds	r2, r3, #1
 8004968:	4613      	mov	r3, r2
 800496a:	005b      	lsls	r3, r3, #1
 800496c:	4413      	add	r3, r2
 800496e:	fa00 f203 	lsl.w	r2, r0, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	430a      	orrs	r2, r1
 8004978:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004982:	d004      	beq.n	800498e <HAL_ADC_ConfigChannel+0x416>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a18      	ldr	r2, [pc, #96]	; (80049ec <HAL_ADC_ConfigChannel+0x474>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d101      	bne.n	8004992 <HAL_ADC_ConfigChannel+0x41a>
 800498e:	4b18      	ldr	r3, [pc, #96]	; (80049f0 <HAL_ADC_ConfigChannel+0x478>)
 8004990:	e000      	b.n	8004994 <HAL_ADC_ConfigChannel+0x41c>
 8004992:	4b18      	ldr	r3, [pc, #96]	; (80049f4 <HAL_ADC_ConfigChannel+0x47c>)
 8004994:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2b10      	cmp	r3, #16
 800499c:	d105      	bne.n	80049aa <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800499e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d015      	beq.n	80049d6 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80049ae:	2b11      	cmp	r3, #17
 80049b0:	d105      	bne.n	80049be <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80049b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00b      	beq.n	80049d6 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80049c2:	2b12      	cmp	r3, #18
 80049c4:	f040 80ac 	bne.w	8004b20 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80049c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	f040 80a5 	bne.w	8004b20 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049de:	d10b      	bne.n	80049f8 <HAL_ADC_ConfigChannel+0x480>
 80049e0:	4b02      	ldr	r3, [pc, #8]	; (80049ec <HAL_ADC_ConfigChannel+0x474>)
 80049e2:	60fb      	str	r3, [r7, #12]
 80049e4:	e023      	b.n	8004a2e <HAL_ADC_ConfigChannel+0x4b6>
 80049e6:	bf00      	nop
 80049e8:	83fff000 	.word	0x83fff000
 80049ec:	50000100 	.word	0x50000100
 80049f0:	50000300 	.word	0x50000300
 80049f4:	50000700 	.word	0x50000700
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a4e      	ldr	r2, [pc, #312]	; (8004b38 <HAL_ADC_ConfigChannel+0x5c0>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d103      	bne.n	8004a0a <HAL_ADC_ConfigChannel+0x492>
 8004a02:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004a06:	60fb      	str	r3, [r7, #12]
 8004a08:	e011      	b.n	8004a2e <HAL_ADC_ConfigChannel+0x4b6>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a4b      	ldr	r2, [pc, #300]	; (8004b3c <HAL_ADC_ConfigChannel+0x5c4>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d102      	bne.n	8004a1a <HAL_ADC_ConfigChannel+0x4a2>
 8004a14:	4b4a      	ldr	r3, [pc, #296]	; (8004b40 <HAL_ADC_ConfigChannel+0x5c8>)
 8004a16:	60fb      	str	r3, [r7, #12]
 8004a18:	e009      	b.n	8004a2e <HAL_ADC_ConfigChannel+0x4b6>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a48      	ldr	r2, [pc, #288]	; (8004b40 <HAL_ADC_ConfigChannel+0x5c8>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d102      	bne.n	8004a2a <HAL_ADC_ConfigChannel+0x4b2>
 8004a24:	4b45      	ldr	r3, [pc, #276]	; (8004b3c <HAL_ADC_ConfigChannel+0x5c4>)
 8004a26:	60fb      	str	r3, [r7, #12]
 8004a28:	e001      	b.n	8004a2e <HAL_ADC_ConfigChannel+0x4b6>
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f003 0303 	and.w	r3, r3, #3
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d108      	bne.n	8004a4e <HAL_ADC_ConfigChannel+0x4d6>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d101      	bne.n	8004a4e <HAL_ADC_ConfigChannel+0x4d6>
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e000      	b.n	8004a50 <HAL_ADC_ConfigChannel+0x4d8>
 8004a4e:	2300      	movs	r3, #0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d150      	bne.n	8004af6 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004a54:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d010      	beq.n	8004a7c <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f003 0303 	and.w	r3, r3, #3
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d107      	bne.n	8004a76 <HAL_ADC_ConfigChannel+0x4fe>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0301 	and.w	r3, r3, #1
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d101      	bne.n	8004a76 <HAL_ADC_ConfigChannel+0x4fe>
 8004a72:	2301      	movs	r3, #1
 8004a74:	e000      	b.n	8004a78 <HAL_ADC_ConfigChannel+0x500>
 8004a76:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d13c      	bne.n	8004af6 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2b10      	cmp	r3, #16
 8004a82:	d11d      	bne.n	8004ac0 <HAL_ADC_ConfigChannel+0x548>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a8c:	d118      	bne.n	8004ac0 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8004a8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004a96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a98:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004a9a:	4b2a      	ldr	r3, [pc, #168]	; (8004b44 <HAL_ADC_ConfigChannel+0x5cc>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a2a      	ldr	r2, [pc, #168]	; (8004b48 <HAL_ADC_ConfigChannel+0x5d0>)
 8004aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa4:	0c9a      	lsrs	r2, r3, #18
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	4413      	add	r3, r2
 8004aac:	005b      	lsls	r3, r3, #1
 8004aae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004ab0:	e002      	b.n	8004ab8 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d1f9      	bne.n	8004ab2 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004abe:	e02e      	b.n	8004b1e <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2b11      	cmp	r3, #17
 8004ac6:	d10b      	bne.n	8004ae0 <HAL_ADC_ConfigChannel+0x568>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ad0:	d106      	bne.n	8004ae0 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8004ad2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004ada:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004adc:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004ade:	e01e      	b.n	8004b1e <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2b12      	cmp	r3, #18
 8004ae6:	d11a      	bne.n	8004b1e <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8004ae8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004af0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004af2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004af4:	e013      	b.n	8004b1e <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afa:	f043 0220 	orr.w	r2, r3, #32
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004b08:	e00a      	b.n	8004b20 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0e:	f043 0220 	orr.w	r2, r3, #32
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004b1c:	e000      	b.n	8004b20 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004b1e:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004b28:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	376c      	adds	r7, #108	; 0x6c
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr
 8004b38:	50000100 	.word	0x50000100
 8004b3c:	50000400 	.word	0x50000400
 8004b40:	50000500 	.word	0x50000500
 8004b44:	2000001c 	.word	0x2000001c
 8004b48:	431bde83 	.word	0x431bde83

08004b4c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b099      	sub	sp, #100	; 0x64
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b56:	2300      	movs	r3, #0
 8004b58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b64:	d102      	bne.n	8004b6c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8004b66:	4b6d      	ldr	r3, [pc, #436]	; (8004d1c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004b68:	60bb      	str	r3, [r7, #8]
 8004b6a:	e01a      	b.n	8004ba2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a6a      	ldr	r2, [pc, #424]	; (8004d1c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d103      	bne.n	8004b7e <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8004b76:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004b7a:	60bb      	str	r3, [r7, #8]
 8004b7c:	e011      	b.n	8004ba2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a67      	ldr	r2, [pc, #412]	; (8004d20 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d102      	bne.n	8004b8e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004b88:	4b66      	ldr	r3, [pc, #408]	; (8004d24 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8004b8a:	60bb      	str	r3, [r7, #8]
 8004b8c:	e009      	b.n	8004ba2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a64      	ldr	r2, [pc, #400]	; (8004d24 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d102      	bne.n	8004b9e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004b98:	4b61      	ldr	r3, [pc, #388]	; (8004d20 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8004b9a:	60bb      	str	r3, [r7, #8]
 8004b9c:	e001      	b.n	8004ba2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d101      	bne.n	8004bac <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e0b0      	b.n	8004d0e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d101      	bne.n	8004bba <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8004bb6:	2302      	movs	r3, #2
 8004bb8:	e0a9      	b.n	8004d0e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f003 0304 	and.w	r3, r3, #4
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f040 808d 	bne.w	8004cec <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f003 0304 	and.w	r3, r3, #4
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	f040 8086 	bne.w	8004cec <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004be8:	d004      	beq.n	8004bf4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a4b      	ldr	r2, [pc, #300]	; (8004d1c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d101      	bne.n	8004bf8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004bf4:	4b4c      	ldr	r3, [pc, #304]	; (8004d28 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8004bf6:	e000      	b.n	8004bfa <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004bf8:	4b4c      	ldr	r3, [pc, #304]	; (8004d2c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8004bfa:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d040      	beq.n	8004c86 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004c04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	6859      	ldr	r1, [r3, #4]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004c16:	035b      	lsls	r3, r3, #13
 8004c18:	430b      	orrs	r3, r1
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c1e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f003 0303 	and.w	r3, r3, #3
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d108      	bne.n	8004c40 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d101      	bne.n	8004c40 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e000      	b.n	8004c42 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8004c40:	2300      	movs	r3, #0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d15c      	bne.n	8004d00 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f003 0303 	and.w	r3, r3, #3
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d107      	bne.n	8004c62 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d101      	bne.n	8004c62 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e000      	b.n	8004c64 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8004c62:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d14b      	bne.n	8004d00 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004c68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004c70:	f023 030f 	bic.w	r3, r3, #15
 8004c74:	683a      	ldr	r2, [r7, #0]
 8004c76:	6811      	ldr	r1, [r2, #0]
 8004c78:	683a      	ldr	r2, [r7, #0]
 8004c7a:	6892      	ldr	r2, [r2, #8]
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	431a      	orrs	r2, r3
 8004c80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c82:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004c84:	e03c      	b.n	8004d00 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004c86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c90:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f003 0303 	and.w	r3, r3, #3
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d108      	bne.n	8004cb2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d101      	bne.n	8004cb2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e000      	b.n	8004cb4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d123      	bne.n	8004d00 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	f003 0303 	and.w	r3, r3, #3
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d107      	bne.n	8004cd4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0301 	and.w	r3, r3, #1
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d101      	bne.n	8004cd4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e000      	b.n	8004cd6 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8004cd4:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d112      	bne.n	8004d00 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8004cda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004ce2:	f023 030f 	bic.w	r3, r3, #15
 8004ce6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ce8:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004cea:	e009      	b.n	8004d00 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf0:	f043 0220 	orr.w	r2, r3, #32
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004cfe:	e000      	b.n	8004d02 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004d00:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004d0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3764      	adds	r7, #100	; 0x64
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	50000100 	.word	0x50000100
 8004d20:	50000400 	.word	0x50000400
 8004d24:	50000500 	.word	0x50000500
 8004d28:	50000300 	.word	0x50000300
 8004d2c:	50000700 	.word	0x50000700

08004d30 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d42:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d126      	bne.n	8004d98 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d115      	bne.n	8004d90 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d111      	bne.n	8004d90 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d105      	bne.n	8004d90 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d88:	f043 0201 	orr.w	r2, r3, #1
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8004d90:	68f8      	ldr	r0, [r7, #12]
 8004d92:	f7fd fad9 	bl	8002348 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8004d96:	e004      	b.n	8004da2 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	4798      	blx	r3
}
 8004da2:	bf00      	nop
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004daa:	b580      	push	{r7, lr}
 8004dac:	b084      	sub	sp, #16
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f7fe fa85 	bl	80032c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8004dbe:	bf00      	nop
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b084      	sub	sp, #16
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de4:	f043 0204 	orr.w	r2, r3, #4
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f7fe fa7f 	bl	80032f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004df2:	bf00      	nop
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
	...

08004dfc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e04:	2300      	movs	r3, #0
 8004e06:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f003 0303 	and.w	r3, r3, #3
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d108      	bne.n	8004e28 <ADC_Enable+0x2c>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0301 	and.w	r3, r3, #1
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d101      	bne.n	8004e28 <ADC_Enable+0x2c>
 8004e24:	2301      	movs	r3, #1
 8004e26:	e000      	b.n	8004e2a <ADC_Enable+0x2e>
 8004e28:	2300      	movs	r3, #0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d143      	bne.n	8004eb6 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	689a      	ldr	r2, [r3, #8]
 8004e34:	4b22      	ldr	r3, [pc, #136]	; (8004ec0 <ADC_Enable+0xc4>)
 8004e36:	4013      	ands	r3, r2
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00d      	beq.n	8004e58 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e40:	f043 0210 	orr.w	r2, r3, #16
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e4c:	f043 0201 	orr.w	r2, r3, #1
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e02f      	b.n	8004eb8 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	689a      	ldr	r2, [r3, #8]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f042 0201 	orr.w	r2, r2, #1
 8004e66:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8004e68:	f7fe f9fe 	bl	8003268 <HAL_GetTick>
 8004e6c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004e6e:	e01b      	b.n	8004ea8 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004e70:	f7fe f9fa 	bl	8003268 <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d914      	bls.n	8004ea8 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0301 	and.w	r3, r3, #1
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d00d      	beq.n	8004ea8 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e90:	f043 0210 	orr.w	r2, r3, #16
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e9c:	f043 0201 	orr.w	r2, r3, #1
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e007      	b.n	8004eb8 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0301 	and.w	r3, r3, #1
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d1dc      	bne.n	8004e70 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3710      	adds	r7, #16
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	8000003f 	.word	0x8000003f

08004ec4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f003 0303 	and.w	r3, r3, #3
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d108      	bne.n	8004ef0 <ADC_Disable+0x2c>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0301 	and.w	r3, r3, #1
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d101      	bne.n	8004ef0 <ADC_Disable+0x2c>
 8004eec:	2301      	movs	r3, #1
 8004eee:	e000      	b.n	8004ef2 <ADC_Disable+0x2e>
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d047      	beq.n	8004f86 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f003 030d 	and.w	r3, r3, #13
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d10f      	bne.n	8004f24 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	689a      	ldr	r2, [r3, #8]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f042 0202 	orr.w	r2, r2, #2
 8004f12:	609a      	str	r2, [r3, #8]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2203      	movs	r2, #3
 8004f1a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8004f1c:	f7fe f9a4 	bl	8003268 <HAL_GetTick>
 8004f20:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004f22:	e029      	b.n	8004f78 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f28:	f043 0210 	orr.w	r2, r3, #16
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f34:	f043 0201 	orr.w	r2, r3, #1
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e023      	b.n	8004f88 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004f40:	f7fe f992 	bl	8003268 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d914      	bls.n	8004f78 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f003 0301 	and.w	r3, r3, #1
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d10d      	bne.n	8004f78 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f60:	f043 0210 	orr.w	r2, r3, #16
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f6c:	f043 0201 	orr.w	r2, r3, #1
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e007      	b.n	8004f88 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d0dc      	beq.n	8004f40 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3710      	adds	r7, #16
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b086      	sub	sp, #24
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f003 030c 	and.w	r3, r3, #12
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f000 809b 	beq.w	80050ec <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004fc4:	d12a      	bne.n	800501c <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d126      	bne.n	800501c <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d122      	bne.n	800501c <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8004fd6:	230c      	movs	r3, #12
 8004fd8:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8004fda:	e014      	b.n	8005006 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	4a46      	ldr	r2, [pc, #280]	; (80050f8 <ADC_ConversionStop+0x168>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d90d      	bls.n	8005000 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe8:	f043 0210 	orr.w	r2, r3, #16
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ff4:	f043 0201 	orr.w	r2, r3, #1
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e076      	b.n	80050ee <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	3301      	adds	r3, #1
 8005004:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005010:	2b40      	cmp	r3, #64	; 0x40
 8005012:	d1e3      	bne.n	8004fdc <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2240      	movs	r2, #64	; 0x40
 800501a:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	2b60      	cmp	r3, #96	; 0x60
 8005020:	d015      	beq.n	800504e <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f003 0304 	and.w	r3, r3, #4
 800502c:	2b04      	cmp	r3, #4
 800502e:	d10e      	bne.n	800504e <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800503a:	2b00      	cmp	r3, #0
 800503c:	d107      	bne.n	800504e <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	689a      	ldr	r2, [r3, #8]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f042 0210 	orr.w	r2, r2, #16
 800504c:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	2b0c      	cmp	r3, #12
 8005052:	d015      	beq.n	8005080 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f003 0308 	and.w	r3, r3, #8
 800505e:	2b08      	cmp	r3, #8
 8005060:	d10e      	bne.n	8005080 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 800506c:	2b00      	cmp	r3, #0
 800506e:	d107      	bne.n	8005080 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	689a      	ldr	r2, [r3, #8]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f042 0220 	orr.w	r2, r2, #32
 800507e:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	2b60      	cmp	r3, #96	; 0x60
 8005084:	d005      	beq.n	8005092 <ADC_ConversionStop+0x102>
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	2b6c      	cmp	r3, #108	; 0x6c
 800508a:	d105      	bne.n	8005098 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800508c:	230c      	movs	r3, #12
 800508e:	617b      	str	r3, [r7, #20]
        break;
 8005090:	e005      	b.n	800509e <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8005092:	2308      	movs	r3, #8
 8005094:	617b      	str	r3, [r7, #20]
        break;
 8005096:	e002      	b.n	800509e <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005098:	2304      	movs	r3, #4
 800509a:	617b      	str	r3, [r7, #20]
        break;
 800509c:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800509e:	f7fe f8e3 	bl	8003268 <HAL_GetTick>
 80050a2:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80050a4:	e01b      	b.n	80050de <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80050a6:	f7fe f8df 	bl	8003268 <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	2b0b      	cmp	r3, #11
 80050b2:	d914      	bls.n	80050de <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	689a      	ldr	r2, [r3, #8]
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	4013      	ands	r3, r2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00d      	beq.n	80050de <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c6:	f043 0210 	orr.w	r2, r3, #16
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d2:	f043 0201 	orr.w	r2, r3, #1
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e007      	b.n	80050ee <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	689a      	ldr	r2, [r3, #8]
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	4013      	ands	r3, r2
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1dc      	bne.n	80050a6 <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3718      	adds	r7, #24
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	000993ff 	.word	0x000993ff

080050fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f003 0307 	and.w	r3, r3, #7
 800510a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800510c:	4b0c      	ldr	r3, [pc, #48]	; (8005140 <__NVIC_SetPriorityGrouping+0x44>)
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005112:	68ba      	ldr	r2, [r7, #8]
 8005114:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005118:	4013      	ands	r3, r2
 800511a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005124:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005128:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800512c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800512e:	4a04      	ldr	r2, [pc, #16]	; (8005140 <__NVIC_SetPriorityGrouping+0x44>)
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	60d3      	str	r3, [r2, #12]
}
 8005134:	bf00      	nop
 8005136:	3714      	adds	r7, #20
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr
 8005140:	e000ed00 	.word	0xe000ed00

08005144 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005144:	b480      	push	{r7}
 8005146:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005148:	4b04      	ldr	r3, [pc, #16]	; (800515c <__NVIC_GetPriorityGrouping+0x18>)
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	0a1b      	lsrs	r3, r3, #8
 800514e:	f003 0307 	and.w	r3, r3, #7
}
 8005152:	4618      	mov	r0, r3
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr
 800515c:	e000ed00 	.word	0xe000ed00

08005160 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	4603      	mov	r3, r0
 8005168:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800516a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800516e:	2b00      	cmp	r3, #0
 8005170:	db0b      	blt.n	800518a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005172:	79fb      	ldrb	r3, [r7, #7]
 8005174:	f003 021f 	and.w	r2, r3, #31
 8005178:	4907      	ldr	r1, [pc, #28]	; (8005198 <__NVIC_EnableIRQ+0x38>)
 800517a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800517e:	095b      	lsrs	r3, r3, #5
 8005180:	2001      	movs	r0, #1
 8005182:	fa00 f202 	lsl.w	r2, r0, r2
 8005186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800518a:	bf00      	nop
 800518c:	370c      	adds	r7, #12
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	e000e100 	.word	0xe000e100

0800519c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	4603      	mov	r3, r0
 80051a4:	6039      	str	r1, [r7, #0]
 80051a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	db0a      	blt.n	80051c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	b2da      	uxtb	r2, r3
 80051b4:	490c      	ldr	r1, [pc, #48]	; (80051e8 <__NVIC_SetPriority+0x4c>)
 80051b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051ba:	0112      	lsls	r2, r2, #4
 80051bc:	b2d2      	uxtb	r2, r2
 80051be:	440b      	add	r3, r1
 80051c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80051c4:	e00a      	b.n	80051dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	b2da      	uxtb	r2, r3
 80051ca:	4908      	ldr	r1, [pc, #32]	; (80051ec <__NVIC_SetPriority+0x50>)
 80051cc:	79fb      	ldrb	r3, [r7, #7]
 80051ce:	f003 030f 	and.w	r3, r3, #15
 80051d2:	3b04      	subs	r3, #4
 80051d4:	0112      	lsls	r2, r2, #4
 80051d6:	b2d2      	uxtb	r2, r2
 80051d8:	440b      	add	r3, r1
 80051da:	761a      	strb	r2, [r3, #24]
}
 80051dc:	bf00      	nop
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr
 80051e8:	e000e100 	.word	0xe000e100
 80051ec:	e000ed00 	.word	0xe000ed00

080051f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b089      	sub	sp, #36	; 0x24
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f003 0307 	and.w	r3, r3, #7
 8005202:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	f1c3 0307 	rsb	r3, r3, #7
 800520a:	2b04      	cmp	r3, #4
 800520c:	bf28      	it	cs
 800520e:	2304      	movcs	r3, #4
 8005210:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	3304      	adds	r3, #4
 8005216:	2b06      	cmp	r3, #6
 8005218:	d902      	bls.n	8005220 <NVIC_EncodePriority+0x30>
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	3b03      	subs	r3, #3
 800521e:	e000      	b.n	8005222 <NVIC_EncodePriority+0x32>
 8005220:	2300      	movs	r3, #0
 8005222:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005224:	f04f 32ff 	mov.w	r2, #4294967295
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	fa02 f303 	lsl.w	r3, r2, r3
 800522e:	43da      	mvns	r2, r3
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	401a      	ands	r2, r3
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005238:	f04f 31ff 	mov.w	r1, #4294967295
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	fa01 f303 	lsl.w	r3, r1, r3
 8005242:	43d9      	mvns	r1, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005248:	4313      	orrs	r3, r2
         );
}
 800524a:	4618      	mov	r0, r3
 800524c:	3724      	adds	r7, #36	; 0x24
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
	...

08005258 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	3b01      	subs	r3, #1
 8005264:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005268:	d301      	bcc.n	800526e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800526a:	2301      	movs	r3, #1
 800526c:	e00f      	b.n	800528e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800526e:	4a0a      	ldr	r2, [pc, #40]	; (8005298 <SysTick_Config+0x40>)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	3b01      	subs	r3, #1
 8005274:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005276:	210f      	movs	r1, #15
 8005278:	f04f 30ff 	mov.w	r0, #4294967295
 800527c:	f7ff ff8e 	bl	800519c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005280:	4b05      	ldr	r3, [pc, #20]	; (8005298 <SysTick_Config+0x40>)
 8005282:	2200      	movs	r2, #0
 8005284:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005286:	4b04      	ldr	r3, [pc, #16]	; (8005298 <SysTick_Config+0x40>)
 8005288:	2207      	movs	r2, #7
 800528a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3708      	adds	r7, #8
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	e000e010 	.word	0xe000e010

0800529c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f7ff ff29 	bl	80050fc <__NVIC_SetPriorityGrouping>
}
 80052aa:	bf00      	nop
 80052ac:	3708      	adds	r7, #8
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b086      	sub	sp, #24
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	4603      	mov	r3, r0
 80052ba:	60b9      	str	r1, [r7, #8]
 80052bc:	607a      	str	r2, [r7, #4]
 80052be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80052c0:	2300      	movs	r3, #0
 80052c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80052c4:	f7ff ff3e 	bl	8005144 <__NVIC_GetPriorityGrouping>
 80052c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	68b9      	ldr	r1, [r7, #8]
 80052ce:	6978      	ldr	r0, [r7, #20]
 80052d0:	f7ff ff8e 	bl	80051f0 <NVIC_EncodePriority>
 80052d4:	4602      	mov	r2, r0
 80052d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052da:	4611      	mov	r1, r2
 80052dc:	4618      	mov	r0, r3
 80052de:	f7ff ff5d 	bl	800519c <__NVIC_SetPriority>
}
 80052e2:	bf00      	nop
 80052e4:	3718      	adds	r7, #24
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}

080052ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052ea:	b580      	push	{r7, lr}
 80052ec:	b082      	sub	sp, #8
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	4603      	mov	r3, r0
 80052f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80052f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052f8:	4618      	mov	r0, r3
 80052fa:	f7ff ff31 	bl	8005160 <__NVIC_EnableIRQ>
}
 80052fe:	bf00      	nop
 8005300:	3708      	adds	r7, #8
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}

08005306 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005306:	b580      	push	{r7, lr}
 8005308:	b082      	sub	sp, #8
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f7ff ffa2 	bl	8005258 <SysTick_Config>
 8005314:	4603      	mov	r3, r0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3708      	adds	r7, #8
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800531e:	b580      	push	{r7, lr}
 8005320:	b084      	sub	sp, #16
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005326:	2300      	movs	r3, #0
 8005328:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d101      	bne.n	8005334 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e037      	b.n	80053a4 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2202      	movs	r2, #2
 8005338:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800534a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800534e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005358:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005364:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005370:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	69db      	ldr	r3, [r3, #28]
 8005376:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	4313      	orrs	r3, r2
 800537c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 f9b8 	bl	80056fc <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2201      	movs	r2, #1
 8005396:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80053a2:	2300      	movs	r3, #0
}  
 80053a4:	4618      	mov	r0, r3
 80053a6:	3710      	adds	r7, #16
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b086      	sub	sp, #24
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
 80053b8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80053ba:	2300      	movs	r3, #0
 80053bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d101      	bne.n	80053cc <HAL_DMA_Start_IT+0x20>
 80053c8:	2302      	movs	r3, #2
 80053ca:	e04a      	b.n	8005462 <HAL_DMA_Start_IT+0xb6>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d13a      	bne.n	8005454 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2202      	movs	r2, #2
 80053e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2200      	movs	r2, #0
 80053ea:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f022 0201 	bic.w	r2, r2, #1
 80053fa:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	68b9      	ldr	r1, [r7, #8]
 8005402:	68f8      	ldr	r0, [r7, #12]
 8005404:	f000 f94b 	bl	800569e <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800540c:	2b00      	cmp	r3, #0
 800540e:	d008      	beq.n	8005422 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f042 020e 	orr.w	r2, r2, #14
 800541e:	601a      	str	r2, [r3, #0]
 8005420:	e00f      	b.n	8005442 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f042 020a 	orr.w	r2, r2, #10
 8005430:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f022 0204 	bic.w	r2, r2, #4
 8005440:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f042 0201 	orr.w	r2, r2, #1
 8005450:	601a      	str	r2, [r3, #0]
 8005452:	e005      	b.n	8005460 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800545c:	2302      	movs	r3, #2
 800545e:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8005460:	7dfb      	ldrb	r3, [r7, #23]
} 
 8005462:	4618      	mov	r0, r3
 8005464:	3718      	adds	r7, #24
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800546a:	b480      	push	{r7}
 800546c:	b083      	sub	sp, #12
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005478:	2b02      	cmp	r3, #2
 800547a:	d008      	beq.n	800548e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2204      	movs	r2, #4
 8005480:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e020      	b.n	80054d0 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f022 020e 	bic.w	r2, r2, #14
 800549c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f022 0201 	bic.w	r2, r2, #1
 80054ac:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054b6:	2101      	movs	r1, #1
 80054b8:	fa01 f202 	lsl.w	r2, r1, r2
 80054bc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054e4:	2300      	movs	r3, #0
 80054e6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d005      	beq.n	80054fe <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2204      	movs	r2, #4
 80054f6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	73fb      	strb	r3, [r7, #15]
 80054fc:	e027      	b.n	800554e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f022 020e 	bic.w	r2, r2, #14
 800550c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f022 0201 	bic.w	r2, r2, #1
 800551c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005526:	2101      	movs	r1, #1
 8005528:	fa01 f202 	lsl.w	r2, r1, r2
 800552c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2201      	movs	r2, #1
 8005532:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005542:	2b00      	cmp	r3, #0
 8005544:	d003      	beq.n	800554e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	4798      	blx	r3
    } 
  }
  return status;
 800554e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005550:	4618      	mov	r0, r3
 8005552:	3710      	adds	r7, #16
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005574:	2204      	movs	r2, #4
 8005576:	409a      	lsls	r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	4013      	ands	r3, r2
 800557c:	2b00      	cmp	r3, #0
 800557e:	d024      	beq.n	80055ca <HAL_DMA_IRQHandler+0x72>
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	f003 0304 	and.w	r3, r3, #4
 8005586:	2b00      	cmp	r3, #0
 8005588:	d01f      	beq.n	80055ca <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0320 	and.w	r3, r3, #32
 8005594:	2b00      	cmp	r3, #0
 8005596:	d107      	bne.n	80055a8 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f022 0204 	bic.w	r2, r2, #4
 80055a6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055b0:	2104      	movs	r1, #4
 80055b2:	fa01 f202 	lsl.w	r2, r1, r2
 80055b6:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d06a      	beq.n	8005696 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80055c8:	e065      	b.n	8005696 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ce:	2202      	movs	r2, #2
 80055d0:	409a      	lsls	r2, r3
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	4013      	ands	r3, r2
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d02c      	beq.n	8005634 <HAL_DMA_IRQHandler+0xdc>
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	f003 0302 	and.w	r3, r3, #2
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d027      	beq.n	8005634 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0320 	and.w	r3, r3, #32
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d10b      	bne.n	800560a <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f022 020a 	bic.w	r2, r2, #10
 8005600:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005612:	2102      	movs	r1, #2
 8005614:	fa01 f202 	lsl.w	r2, r1, r2
 8005618:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005626:	2b00      	cmp	r3, #0
 8005628:	d035      	beq.n	8005696 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8005632:	e030      	b.n	8005696 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005638:	2208      	movs	r2, #8
 800563a:	409a      	lsls	r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	4013      	ands	r3, r2
 8005640:	2b00      	cmp	r3, #0
 8005642:	d028      	beq.n	8005696 <HAL_DMA_IRQHandler+0x13e>
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	f003 0308 	and.w	r3, r3, #8
 800564a:	2b00      	cmp	r3, #0
 800564c:	d023      	beq.n	8005696 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f022 020e 	bic.w	r2, r2, #14
 800565c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005666:	2101      	movs	r1, #1
 8005668:	fa01 f202 	lsl.w	r2, r1, r2
 800566c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2201      	movs	r2, #1
 8005672:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005688:	2b00      	cmp	r3, #0
 800568a:	d004      	beq.n	8005696 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	4798      	blx	r3
    }
  }
}  
 8005694:	e7ff      	b.n	8005696 <HAL_DMA_IRQHandler+0x13e>
 8005696:	bf00      	nop
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}

0800569e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800569e:	b480      	push	{r7}
 80056a0:	b085      	sub	sp, #20
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	60f8      	str	r0, [r7, #12]
 80056a6:	60b9      	str	r1, [r7, #8]
 80056a8:	607a      	str	r2, [r7, #4]
 80056aa:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056b4:	2101      	movs	r1, #1
 80056b6:	fa01 f202 	lsl.w	r2, r1, r2
 80056ba:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	683a      	ldr	r2, [r7, #0]
 80056c2:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	2b10      	cmp	r3, #16
 80056ca:	d108      	bne.n	80056de <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68ba      	ldr	r2, [r7, #8]
 80056da:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80056dc:	e007      	b.n	80056ee <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68ba      	ldr	r2, [r7, #8]
 80056e4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	60da      	str	r2, [r3, #12]
}
 80056ee:	bf00      	nop
 80056f0:	3714      	adds	r7, #20
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
	...

080056fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	461a      	mov	r2, r3
 800570a:	4b14      	ldr	r3, [pc, #80]	; (800575c <DMA_CalcBaseAndBitshift+0x60>)
 800570c:	429a      	cmp	r2, r3
 800570e:	d80f      	bhi.n	8005730 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	461a      	mov	r2, r3
 8005716:	4b12      	ldr	r3, [pc, #72]	; (8005760 <DMA_CalcBaseAndBitshift+0x64>)
 8005718:	4413      	add	r3, r2
 800571a:	4a12      	ldr	r2, [pc, #72]	; (8005764 <DMA_CalcBaseAndBitshift+0x68>)
 800571c:	fba2 2303 	umull	r2, r3, r2, r3
 8005720:	091b      	lsrs	r3, r3, #4
 8005722:	009a      	lsls	r2, r3, #2
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a0f      	ldr	r2, [pc, #60]	; (8005768 <DMA_CalcBaseAndBitshift+0x6c>)
 800572c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800572e:	e00e      	b.n	800574e <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	461a      	mov	r2, r3
 8005736:	4b0d      	ldr	r3, [pc, #52]	; (800576c <DMA_CalcBaseAndBitshift+0x70>)
 8005738:	4413      	add	r3, r2
 800573a:	4a0a      	ldr	r2, [pc, #40]	; (8005764 <DMA_CalcBaseAndBitshift+0x68>)
 800573c:	fba2 2303 	umull	r2, r3, r2, r3
 8005740:	091b      	lsrs	r3, r3, #4
 8005742:	009a      	lsls	r2, r3, #2
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a09      	ldr	r2, [pc, #36]	; (8005770 <DMA_CalcBaseAndBitshift+0x74>)
 800574c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800574e:	bf00      	nop
 8005750:	370c      	adds	r7, #12
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	40020407 	.word	0x40020407
 8005760:	bffdfff8 	.word	0xbffdfff8
 8005764:	cccccccd 	.word	0xcccccccd
 8005768:	40020000 	.word	0x40020000
 800576c:	bffdfbf8 	.word	0xbffdfbf8
 8005770:	40020400 	.word	0x40020400

08005774 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005774:	b480      	push	{r7}
 8005776:	b087      	sub	sp, #28
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800577e:	2300      	movs	r3, #0
 8005780:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005782:	e154      	b.n	8005a2e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	2101      	movs	r1, #1
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	fa01 f303 	lsl.w	r3, r1, r3
 8005790:	4013      	ands	r3, r2
 8005792:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2b00      	cmp	r3, #0
 8005798:	f000 8146 	beq.w	8005a28 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f003 0303 	and.w	r3, r3, #3
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d005      	beq.n	80057b4 <HAL_GPIO_Init+0x40>
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	f003 0303 	and.w	r3, r3, #3
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d130      	bne.n	8005816 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	005b      	lsls	r3, r3, #1
 80057be:	2203      	movs	r2, #3
 80057c0:	fa02 f303 	lsl.w	r3, r2, r3
 80057c4:	43db      	mvns	r3, r3
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	4013      	ands	r3, r2
 80057ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	68da      	ldr	r2, [r3, #12]
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	005b      	lsls	r3, r3, #1
 80057d4:	fa02 f303 	lsl.w	r3, r2, r3
 80057d8:	693a      	ldr	r2, [r7, #16]
 80057da:	4313      	orrs	r3, r2
 80057dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	693a      	ldr	r2, [r7, #16]
 80057e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80057ea:	2201      	movs	r2, #1
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	fa02 f303 	lsl.w	r3, r2, r3
 80057f2:	43db      	mvns	r3, r3
 80057f4:	693a      	ldr	r2, [r7, #16]
 80057f6:	4013      	ands	r3, r2
 80057f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	091b      	lsrs	r3, r3, #4
 8005800:	f003 0201 	and.w	r2, r3, #1
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	fa02 f303 	lsl.w	r3, r2, r3
 800580a:	693a      	ldr	r2, [r7, #16]
 800580c:	4313      	orrs	r3, r2
 800580e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	693a      	ldr	r2, [r7, #16]
 8005814:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f003 0303 	and.w	r3, r3, #3
 800581e:	2b03      	cmp	r3, #3
 8005820:	d017      	beq.n	8005852 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	005b      	lsls	r3, r3, #1
 800582c:	2203      	movs	r2, #3
 800582e:	fa02 f303 	lsl.w	r3, r2, r3
 8005832:	43db      	mvns	r3, r3
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	4013      	ands	r3, r2
 8005838:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	689a      	ldr	r2, [r3, #8]
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	005b      	lsls	r3, r3, #1
 8005842:	fa02 f303 	lsl.w	r3, r2, r3
 8005846:	693a      	ldr	r2, [r7, #16]
 8005848:	4313      	orrs	r3, r2
 800584a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	f003 0303 	and.w	r3, r3, #3
 800585a:	2b02      	cmp	r3, #2
 800585c:	d123      	bne.n	80058a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	08da      	lsrs	r2, r3, #3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	3208      	adds	r2, #8
 8005866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800586a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	f003 0307 	and.w	r3, r3, #7
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	220f      	movs	r2, #15
 8005876:	fa02 f303 	lsl.w	r3, r2, r3
 800587a:	43db      	mvns	r3, r3
 800587c:	693a      	ldr	r2, [r7, #16]
 800587e:	4013      	ands	r3, r2
 8005880:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	691a      	ldr	r2, [r3, #16]
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	f003 0307 	and.w	r3, r3, #7
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	fa02 f303 	lsl.w	r3, r2, r3
 8005892:	693a      	ldr	r2, [r7, #16]
 8005894:	4313      	orrs	r3, r2
 8005896:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	08da      	lsrs	r2, r3, #3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	3208      	adds	r2, #8
 80058a0:	6939      	ldr	r1, [r7, #16]
 80058a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	005b      	lsls	r3, r3, #1
 80058b0:	2203      	movs	r2, #3
 80058b2:	fa02 f303 	lsl.w	r3, r2, r3
 80058b6:	43db      	mvns	r3, r3
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	4013      	ands	r3, r2
 80058bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	f003 0203 	and.w	r2, r3, #3
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	005b      	lsls	r3, r3, #1
 80058ca:	fa02 f303 	lsl.w	r3, r2, r3
 80058ce:	693a      	ldr	r2, [r7, #16]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	f000 80a0 	beq.w	8005a28 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058e8:	4b58      	ldr	r3, [pc, #352]	; (8005a4c <HAL_GPIO_Init+0x2d8>)
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	4a57      	ldr	r2, [pc, #348]	; (8005a4c <HAL_GPIO_Init+0x2d8>)
 80058ee:	f043 0301 	orr.w	r3, r3, #1
 80058f2:	6193      	str	r3, [r2, #24]
 80058f4:	4b55      	ldr	r3, [pc, #340]	; (8005a4c <HAL_GPIO_Init+0x2d8>)
 80058f6:	699b      	ldr	r3, [r3, #24]
 80058f8:	f003 0301 	and.w	r3, r3, #1
 80058fc:	60bb      	str	r3, [r7, #8]
 80058fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005900:	4a53      	ldr	r2, [pc, #332]	; (8005a50 <HAL_GPIO_Init+0x2dc>)
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	089b      	lsrs	r3, r3, #2
 8005906:	3302      	adds	r3, #2
 8005908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800590c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	f003 0303 	and.w	r3, r3, #3
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	220f      	movs	r2, #15
 8005918:	fa02 f303 	lsl.w	r3, r2, r3
 800591c:	43db      	mvns	r3, r3
 800591e:	693a      	ldr	r2, [r7, #16]
 8005920:	4013      	ands	r3, r2
 8005922:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800592a:	d019      	beq.n	8005960 <HAL_GPIO_Init+0x1ec>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a49      	ldr	r2, [pc, #292]	; (8005a54 <HAL_GPIO_Init+0x2e0>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d013      	beq.n	800595c <HAL_GPIO_Init+0x1e8>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a48      	ldr	r2, [pc, #288]	; (8005a58 <HAL_GPIO_Init+0x2e4>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d00d      	beq.n	8005958 <HAL_GPIO_Init+0x1e4>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a47      	ldr	r2, [pc, #284]	; (8005a5c <HAL_GPIO_Init+0x2e8>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d007      	beq.n	8005954 <HAL_GPIO_Init+0x1e0>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a46      	ldr	r2, [pc, #280]	; (8005a60 <HAL_GPIO_Init+0x2ec>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d101      	bne.n	8005950 <HAL_GPIO_Init+0x1dc>
 800594c:	2304      	movs	r3, #4
 800594e:	e008      	b.n	8005962 <HAL_GPIO_Init+0x1ee>
 8005950:	2305      	movs	r3, #5
 8005952:	e006      	b.n	8005962 <HAL_GPIO_Init+0x1ee>
 8005954:	2303      	movs	r3, #3
 8005956:	e004      	b.n	8005962 <HAL_GPIO_Init+0x1ee>
 8005958:	2302      	movs	r3, #2
 800595a:	e002      	b.n	8005962 <HAL_GPIO_Init+0x1ee>
 800595c:	2301      	movs	r3, #1
 800595e:	e000      	b.n	8005962 <HAL_GPIO_Init+0x1ee>
 8005960:	2300      	movs	r3, #0
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	f002 0203 	and.w	r2, r2, #3
 8005968:	0092      	lsls	r2, r2, #2
 800596a:	4093      	lsls	r3, r2
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	4313      	orrs	r3, r2
 8005970:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005972:	4937      	ldr	r1, [pc, #220]	; (8005a50 <HAL_GPIO_Init+0x2dc>)
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	089b      	lsrs	r3, r3, #2
 8005978:	3302      	adds	r3, #2
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005980:	4b38      	ldr	r3, [pc, #224]	; (8005a64 <HAL_GPIO_Init+0x2f0>)
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	43db      	mvns	r3, r3
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	4013      	ands	r3, r2
 800598e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d003      	beq.n	80059a4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800599c:	693a      	ldr	r2, [r7, #16]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80059a4:	4a2f      	ldr	r2, [pc, #188]	; (8005a64 <HAL_GPIO_Init+0x2f0>)
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80059aa:	4b2e      	ldr	r3, [pc, #184]	; (8005a64 <HAL_GPIO_Init+0x2f0>)
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	43db      	mvns	r3, r3
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	4013      	ands	r3, r2
 80059b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d003      	beq.n	80059ce <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80059c6:	693a      	ldr	r2, [r7, #16]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80059ce:	4a25      	ldr	r2, [pc, #148]	; (8005a64 <HAL_GPIO_Init+0x2f0>)
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80059d4:	4b23      	ldr	r3, [pc, #140]	; (8005a64 <HAL_GPIO_Init+0x2f0>)
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	43db      	mvns	r3, r3
 80059de:	693a      	ldr	r2, [r7, #16]
 80059e0:	4013      	ands	r3, r2
 80059e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d003      	beq.n	80059f8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80059f0:	693a      	ldr	r2, [r7, #16]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80059f8:	4a1a      	ldr	r2, [pc, #104]	; (8005a64 <HAL_GPIO_Init+0x2f0>)
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80059fe:	4b19      	ldr	r3, [pc, #100]	; (8005a64 <HAL_GPIO_Init+0x2f0>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	43db      	mvns	r3, r3
 8005a08:	693a      	ldr	r2, [r7, #16]
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d003      	beq.n	8005a22 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005a1a:	693a      	ldr	r2, [r7, #16]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005a22:	4a10      	ldr	r2, [pc, #64]	; (8005a64 <HAL_GPIO_Init+0x2f0>)
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	fa22 f303 	lsr.w	r3, r2, r3
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f47f aea3 	bne.w	8005784 <HAL_GPIO_Init+0x10>
  }
}
 8005a3e:	bf00      	nop
 8005a40:	bf00      	nop
 8005a42:	371c      	adds	r7, #28
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr
 8005a4c:	40021000 	.word	0x40021000
 8005a50:	40010000 	.word	0x40010000
 8005a54:	48000400 	.word	0x48000400
 8005a58:	48000800 	.word	0x48000800
 8005a5c:	48000c00 	.word	0x48000c00
 8005a60:	48001000 	.word	0x48001000
 8005a64:	40010400 	.word	0x40010400

08005a68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	460b      	mov	r3, r1
 8005a72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	691a      	ldr	r2, [r3, #16]
 8005a78:	887b      	ldrh	r3, [r7, #2]
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d002      	beq.n	8005a86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005a80:	2301      	movs	r3, #1
 8005a82:	73fb      	strb	r3, [r7, #15]
 8005a84:	e001      	b.n	8005a8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005a86:	2300      	movs	r3, #0
 8005a88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3714      	adds	r7, #20
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	807b      	strh	r3, [r7, #2]
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005aa8:	787b      	ldrb	r3, [r7, #1]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d003      	beq.n	8005ab6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005aae:	887a      	ldrh	r2, [r7, #2]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005ab4:	e002      	b.n	8005abc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005ab6:	887a      	ldrh	r2, [r7, #2]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005abc:	bf00      	nop
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b085      	sub	sp, #20
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	695b      	ldr	r3, [r3, #20]
 8005ad8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005ada:	887a      	ldrh	r2, [r7, #2]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	4013      	ands	r3, r2
 8005ae0:	041a      	lsls	r2, r3, #16
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	43d9      	mvns	r1, r3
 8005ae6:	887b      	ldrh	r3, [r7, #2]
 8005ae8:	400b      	ands	r3, r1
 8005aea:	431a      	orrs	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	619a      	str	r2, [r3, #24]
}
 8005af0:	bf00      	nop
 8005af2:	3714      	adds	r7, #20
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	4603      	mov	r3, r0
 8005b04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005b06:	4b08      	ldr	r3, [pc, #32]	; (8005b28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b08:	695a      	ldr	r2, [r3, #20]
 8005b0a:	88fb      	ldrh	r3, [r7, #6]
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d006      	beq.n	8005b20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005b12:	4a05      	ldr	r2, [pc, #20]	; (8005b28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b14:	88fb      	ldrh	r3, [r7, #6]
 8005b16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005b18:	88fb      	ldrh	r3, [r7, #6]
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f7fc fadc 	bl	80020d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8005b20:	bf00      	nop
 8005b22:	3708      	adds	r7, #8
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	40010400 	.word	0x40010400

08005b2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d101      	bne.n	8005b3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e081      	b.n	8005c42 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d106      	bne.n	8005b58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f7fc ff56 	bl	8002a04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2224      	movs	r2, #36	; 0x24
 8005b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f022 0201 	bic.w	r2, r2, #1
 8005b6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685a      	ldr	r2, [r3, #4]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005b7c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	689a      	ldr	r2, [r3, #8]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b8c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d107      	bne.n	8005ba6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	689a      	ldr	r2, [r3, #8]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ba2:	609a      	str	r2, [r3, #8]
 8005ba4:	e006      	b.n	8005bb4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	689a      	ldr	r2, [r3, #8]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005bb2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	d104      	bne.n	8005bc6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005bc4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	6812      	ldr	r2, [r2, #0]
 8005bd0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005bd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bd8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68da      	ldr	r2, [r3, #12]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005be8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	691a      	ldr	r2, [r3, #16]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	695b      	ldr	r3, [r3, #20]
 8005bf2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	430a      	orrs	r2, r1
 8005c02:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	69d9      	ldr	r1, [r3, #28]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a1a      	ldr	r2, [r3, #32]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	430a      	orrs	r2, r1
 8005c12:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f042 0201 	orr.w	r2, r2, #1
 8005c22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2220      	movs	r2, #32
 8005c2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3708      	adds	r7, #8
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
	...

08005c4c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b088      	sub	sp, #32
 8005c50:	af02      	add	r7, sp, #8
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	607a      	str	r2, [r7, #4]
 8005c56:	461a      	mov	r2, r3
 8005c58:	460b      	mov	r3, r1
 8005c5a:	817b      	strh	r3, [r7, #10]
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	2b20      	cmp	r3, #32
 8005c6a:	f040 80da 	bne.w	8005e22 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d101      	bne.n	8005c7c <HAL_I2C_Master_Transmit+0x30>
 8005c78:	2302      	movs	r3, #2
 8005c7a:	e0d3      	b.n	8005e24 <HAL_I2C_Master_Transmit+0x1d8>
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005c84:	f7fd faf0 	bl	8003268 <HAL_GetTick>
 8005c88:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	9300      	str	r3, [sp, #0]
 8005c8e:	2319      	movs	r3, #25
 8005c90:	2201      	movs	r2, #1
 8005c92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005c96:	68f8      	ldr	r0, [r7, #12]
 8005c98:	f000 f9e6 	bl	8006068 <I2C_WaitOnFlagUntilTimeout>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d001      	beq.n	8005ca6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e0be      	b.n	8005e24 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2221      	movs	r2, #33	; 0x21
 8005caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2210      	movs	r2, #16
 8005cb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	893a      	ldrh	r2, [r7, #8]
 8005cc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	2bff      	cmp	r3, #255	; 0xff
 8005cd6:	d90e      	bls.n	8005cf6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	22ff      	movs	r2, #255	; 0xff
 8005cdc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ce2:	b2da      	uxtb	r2, r3
 8005ce4:	8979      	ldrh	r1, [r7, #10]
 8005ce6:	4b51      	ldr	r3, [pc, #324]	; (8005e2c <HAL_I2C_Master_Transmit+0x1e0>)
 8005ce8:	9300      	str	r3, [sp, #0]
 8005cea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f000 fbf6 	bl	80064e0 <I2C_TransferConfig>
 8005cf4:	e06c      	b.n	8005dd0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d04:	b2da      	uxtb	r2, r3
 8005d06:	8979      	ldrh	r1, [r7, #10]
 8005d08:	4b48      	ldr	r3, [pc, #288]	; (8005e2c <HAL_I2C_Master_Transmit+0x1e0>)
 8005d0a:	9300      	str	r3, [sp, #0]
 8005d0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	f000 fbe5 	bl	80064e0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005d16:	e05b      	b.n	8005dd0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	6a39      	ldr	r1, [r7, #32]
 8005d1c:	68f8      	ldr	r0, [r7, #12]
 8005d1e:	f000 f9f2 	bl	8006106 <I2C_WaitOnTXISFlagUntilTimeout>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d001      	beq.n	8005d2c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e07b      	b.n	8005e24 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d30:	781a      	ldrb	r2, [r3, #0]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3c:	1c5a      	adds	r2, r3, #1
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	b29a      	uxth	r2, r3
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d54:	3b01      	subs	r3, #1
 8005d56:	b29a      	uxth	r2, r3
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d034      	beq.n	8005dd0 <HAL_I2C_Master_Transmit+0x184>
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d130      	bne.n	8005dd0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	9300      	str	r3, [sp, #0]
 8005d72:	6a3b      	ldr	r3, [r7, #32]
 8005d74:	2200      	movs	r2, #0
 8005d76:	2180      	movs	r1, #128	; 0x80
 8005d78:	68f8      	ldr	r0, [r7, #12]
 8005d7a:	f000 f975 	bl	8006068 <I2C_WaitOnFlagUntilTimeout>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d001      	beq.n	8005d88 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e04d      	b.n	8005e24 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	2bff      	cmp	r3, #255	; 0xff
 8005d90:	d90e      	bls.n	8005db0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	22ff      	movs	r2, #255	; 0xff
 8005d96:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d9c:	b2da      	uxtb	r2, r3
 8005d9e:	8979      	ldrh	r1, [r7, #10]
 8005da0:	2300      	movs	r3, #0
 8005da2:	9300      	str	r3, [sp, #0]
 8005da4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005da8:	68f8      	ldr	r0, [r7, #12]
 8005daa:	f000 fb99 	bl	80064e0 <I2C_TransferConfig>
 8005dae:	e00f      	b.n	8005dd0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005db4:	b29a      	uxth	r2, r3
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dbe:	b2da      	uxtb	r2, r3
 8005dc0:	8979      	ldrh	r1, [r7, #10]
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	9300      	str	r3, [sp, #0]
 8005dc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005dca:	68f8      	ldr	r0, [r7, #12]
 8005dcc:	f000 fb88 	bl	80064e0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d19e      	bne.n	8005d18 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	6a39      	ldr	r1, [r7, #32]
 8005dde:	68f8      	ldr	r0, [r7, #12]
 8005de0:	f000 f9d8 	bl	8006194 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d001      	beq.n	8005dee <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e01a      	b.n	8005e24 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2220      	movs	r2, #32
 8005df4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	6859      	ldr	r1, [r3, #4]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	4b0b      	ldr	r3, [pc, #44]	; (8005e30 <HAL_I2C_Master_Transmit+0x1e4>)
 8005e02:	400b      	ands	r3, r1
 8005e04:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2220      	movs	r2, #32
 8005e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2200      	movs	r2, #0
 8005e12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	e000      	b.n	8005e24 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005e22:	2302      	movs	r3, #2
  }
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3718      	adds	r7, #24
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	80002000 	.word	0x80002000
 8005e30:	fe00e800 	.word	0xfe00e800

08005e34 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b088      	sub	sp, #32
 8005e38:	af02      	add	r7, sp, #8
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	607a      	str	r2, [r7, #4]
 8005e3e:	461a      	mov	r2, r3
 8005e40:	460b      	mov	r3, r1
 8005e42:	817b      	strh	r3, [r7, #10]
 8005e44:	4613      	mov	r3, r2
 8005e46:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	2b20      	cmp	r3, #32
 8005e52:	f040 80db 	bne.w	800600c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d101      	bne.n	8005e64 <HAL_I2C_Master_Receive+0x30>
 8005e60:	2302      	movs	r3, #2
 8005e62:	e0d4      	b.n	800600e <HAL_I2C_Master_Receive+0x1da>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005e6c:	f7fd f9fc 	bl	8003268 <HAL_GetTick>
 8005e70:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	9300      	str	r3, [sp, #0]
 8005e76:	2319      	movs	r3, #25
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005e7e:	68f8      	ldr	r0, [r7, #12]
 8005e80:	f000 f8f2 	bl	8006068 <I2C_WaitOnFlagUntilTimeout>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d001      	beq.n	8005e8e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e0bf      	b.n	800600e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2222      	movs	r2, #34	; 0x22
 8005e92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2210      	movs	r2, #16
 8005e9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	893a      	ldrh	r2, [r7, #8]
 8005eae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	2bff      	cmp	r3, #255	; 0xff
 8005ebe:	d90e      	bls.n	8005ede <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	22ff      	movs	r2, #255	; 0xff
 8005ec4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eca:	b2da      	uxtb	r2, r3
 8005ecc:	8979      	ldrh	r1, [r7, #10]
 8005ece:	4b52      	ldr	r3, [pc, #328]	; (8006018 <HAL_I2C_Master_Receive+0x1e4>)
 8005ed0:	9300      	str	r3, [sp, #0]
 8005ed2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ed6:	68f8      	ldr	r0, [r7, #12]
 8005ed8:	f000 fb02 	bl	80064e0 <I2C_TransferConfig>
 8005edc:	e06d      	b.n	8005fba <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ee2:	b29a      	uxth	r2, r3
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eec:	b2da      	uxtb	r2, r3
 8005eee:	8979      	ldrh	r1, [r7, #10]
 8005ef0:	4b49      	ldr	r3, [pc, #292]	; (8006018 <HAL_I2C_Master_Receive+0x1e4>)
 8005ef2:	9300      	str	r3, [sp, #0]
 8005ef4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ef8:	68f8      	ldr	r0, [r7, #12]
 8005efa:	f000 faf1 	bl	80064e0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005efe:	e05c      	b.n	8005fba <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f00:	697a      	ldr	r2, [r7, #20]
 8005f02:	6a39      	ldr	r1, [r7, #32]
 8005f04:	68f8      	ldr	r0, [r7, #12]
 8005f06:	f000 f989 	bl	800621c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d001      	beq.n	8005f14 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e07c      	b.n	800600e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1e:	b2d2      	uxtb	r2, r2
 8005f20:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f26:	1c5a      	adds	r2, r3, #1
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f30:	3b01      	subs	r3, #1
 8005f32:	b29a      	uxth	r2, r3
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	b29a      	uxth	r2, r3
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d034      	beq.n	8005fba <HAL_I2C_Master_Receive+0x186>
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d130      	bne.n	8005fba <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	9300      	str	r3, [sp, #0]
 8005f5c:	6a3b      	ldr	r3, [r7, #32]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	2180      	movs	r1, #128	; 0x80
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	f000 f880 	bl	8006068 <I2C_WaitOnFlagUntilTimeout>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d001      	beq.n	8005f72 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e04d      	b.n	800600e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	2bff      	cmp	r3, #255	; 0xff
 8005f7a:	d90e      	bls.n	8005f9a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	22ff      	movs	r2, #255	; 0xff
 8005f80:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f86:	b2da      	uxtb	r2, r3
 8005f88:	8979      	ldrh	r1, [r7, #10]
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	9300      	str	r3, [sp, #0]
 8005f8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f92:	68f8      	ldr	r0, [r7, #12]
 8005f94:	f000 faa4 	bl	80064e0 <I2C_TransferConfig>
 8005f98:	e00f      	b.n	8005fba <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f9e:	b29a      	uxth	r2, r3
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fa8:	b2da      	uxtb	r2, r3
 8005faa:	8979      	ldrh	r1, [r7, #10]
 8005fac:	2300      	movs	r3, #0
 8005fae:	9300      	str	r3, [sp, #0]
 8005fb0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	f000 fa93 	bl	80064e0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d19d      	bne.n	8005f00 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fc4:	697a      	ldr	r2, [r7, #20]
 8005fc6:	6a39      	ldr	r1, [r7, #32]
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	f000 f8e3 	bl	8006194 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d001      	beq.n	8005fd8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e01a      	b.n	800600e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2220      	movs	r2, #32
 8005fde:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	6859      	ldr	r1, [r3, #4]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	4b0c      	ldr	r3, [pc, #48]	; (800601c <HAL_I2C_Master_Receive+0x1e8>)
 8005fec:	400b      	ands	r3, r1
 8005fee:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2220      	movs	r2, #32
 8005ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2200      	movs	r2, #0
 8006004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006008:	2300      	movs	r3, #0
 800600a:	e000      	b.n	800600e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800600c:	2302      	movs	r3, #2
  }
}
 800600e:	4618      	mov	r0, r3
 8006010:	3718      	adds	r7, #24
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
 8006016:	bf00      	nop
 8006018:	80002400 	.word	0x80002400
 800601c:	fe00e800 	.word	0xfe00e800

08006020 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	f003 0302 	and.w	r3, r3, #2
 8006032:	2b02      	cmp	r3, #2
 8006034:	d103      	bne.n	800603e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2200      	movs	r2, #0
 800603c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	699b      	ldr	r3, [r3, #24]
 8006044:	f003 0301 	and.w	r3, r3, #1
 8006048:	2b01      	cmp	r3, #1
 800604a:	d007      	beq.n	800605c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	699a      	ldr	r2, [r3, #24]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f042 0201 	orr.w	r2, r2, #1
 800605a:	619a      	str	r2, [r3, #24]
  }
}
 800605c:	bf00      	nop
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	603b      	str	r3, [r7, #0]
 8006074:	4613      	mov	r3, r2
 8006076:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006078:	e031      	b.n	80060de <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006080:	d02d      	beq.n	80060de <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006082:	f7fd f8f1 	bl	8003268 <HAL_GetTick>
 8006086:	4602      	mov	r2, r0
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	1ad3      	subs	r3, r2, r3
 800608c:	683a      	ldr	r2, [r7, #0]
 800608e:	429a      	cmp	r2, r3
 8006090:	d302      	bcc.n	8006098 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d122      	bne.n	80060de <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	699a      	ldr	r2, [r3, #24]
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	4013      	ands	r3, r2
 80060a2:	68ba      	ldr	r2, [r7, #8]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	bf0c      	ite	eq
 80060a8:	2301      	moveq	r3, #1
 80060aa:	2300      	movne	r3, #0
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	461a      	mov	r2, r3
 80060b0:	79fb      	ldrb	r3, [r7, #7]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d113      	bne.n	80060de <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ba:	f043 0220 	orr.w	r2, r3, #32
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2220      	movs	r2, #32
 80060c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e00f      	b.n	80060fe <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	699a      	ldr	r2, [r3, #24]
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	4013      	ands	r3, r2
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	bf0c      	ite	eq
 80060ee:	2301      	moveq	r3, #1
 80060f0:	2300      	movne	r3, #0
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	461a      	mov	r2, r3
 80060f6:	79fb      	ldrb	r3, [r7, #7]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d0be      	beq.n	800607a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3710      	adds	r7, #16
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}

08006106 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006106:	b580      	push	{r7, lr}
 8006108:	b084      	sub	sp, #16
 800610a:	af00      	add	r7, sp, #0
 800610c:	60f8      	str	r0, [r7, #12]
 800610e:	60b9      	str	r1, [r7, #8]
 8006110:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006112:	e033      	b.n	800617c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	68b9      	ldr	r1, [r7, #8]
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	f000 f901 	bl	8006320 <I2C_IsErrorOccurred>
 800611e:	4603      	mov	r3, r0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d001      	beq.n	8006128 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e031      	b.n	800618c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800612e:	d025      	beq.n	800617c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006130:	f7fd f89a 	bl	8003268 <HAL_GetTick>
 8006134:	4602      	mov	r2, r0
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	68ba      	ldr	r2, [r7, #8]
 800613c:	429a      	cmp	r2, r3
 800613e:	d302      	bcc.n	8006146 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d11a      	bne.n	800617c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	699b      	ldr	r3, [r3, #24]
 800614c:	f003 0302 	and.w	r3, r3, #2
 8006150:	2b02      	cmp	r3, #2
 8006152:	d013      	beq.n	800617c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006158:	f043 0220 	orr.w	r2, r3, #32
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2220      	movs	r2, #32
 8006164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2200      	movs	r2, #0
 8006174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e007      	b.n	800618c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	f003 0302 	and.w	r3, r3, #2
 8006186:	2b02      	cmp	r3, #2
 8006188:	d1c4      	bne.n	8006114 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	3710      	adds	r7, #16
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80061a0:	e02f      	b.n	8006202 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	68b9      	ldr	r1, [r7, #8]
 80061a6:	68f8      	ldr	r0, [r7, #12]
 80061a8:	f000 f8ba 	bl	8006320 <I2C_IsErrorOccurred>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d001      	beq.n	80061b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e02d      	b.n	8006212 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061b6:	f7fd f857 	bl	8003268 <HAL_GetTick>
 80061ba:	4602      	mov	r2, r0
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	68ba      	ldr	r2, [r7, #8]
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d302      	bcc.n	80061cc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d11a      	bne.n	8006202 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	f003 0320 	and.w	r3, r3, #32
 80061d6:	2b20      	cmp	r3, #32
 80061d8:	d013      	beq.n	8006202 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061de:	f043 0220 	orr.w	r2, r3, #32
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2220      	movs	r2, #32
 80061ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e007      	b.n	8006212 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	699b      	ldr	r3, [r3, #24]
 8006208:	f003 0320 	and.w	r3, r3, #32
 800620c:	2b20      	cmp	r3, #32
 800620e:	d1c8      	bne.n	80061a2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
	...

0800621c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006228:	e06b      	b.n	8006302 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	68b9      	ldr	r1, [r7, #8]
 800622e:	68f8      	ldr	r0, [r7, #12]
 8006230:	f000 f876 	bl	8006320 <I2C_IsErrorOccurred>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d001      	beq.n	800623e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e069      	b.n	8006312 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	699b      	ldr	r3, [r3, #24]
 8006244:	f003 0320 	and.w	r3, r3, #32
 8006248:	2b20      	cmp	r3, #32
 800624a:	d138      	bne.n	80062be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	699b      	ldr	r3, [r3, #24]
 8006252:	f003 0304 	and.w	r3, r3, #4
 8006256:	2b04      	cmp	r3, #4
 8006258:	d105      	bne.n	8006266 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800625e:	2b00      	cmp	r3, #0
 8006260:	d001      	beq.n	8006266 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8006262:	2300      	movs	r3, #0
 8006264:	e055      	b.n	8006312 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	699b      	ldr	r3, [r3, #24]
 800626c:	f003 0310 	and.w	r3, r3, #16
 8006270:	2b10      	cmp	r3, #16
 8006272:	d107      	bne.n	8006284 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2210      	movs	r2, #16
 800627a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2204      	movs	r2, #4
 8006280:	645a      	str	r2, [r3, #68]	; 0x44
 8006282:	e002      	b.n	800628a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2220      	movs	r2, #32
 8006290:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	6859      	ldr	r1, [r3, #4]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	4b1f      	ldr	r3, [pc, #124]	; (800631c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800629e:	400b      	ands	r3, r1
 80062a0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2220      	movs	r2, #32
 80062a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e029      	b.n	8006312 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062be:	f7fc ffd3 	bl	8003268 <HAL_GetTick>
 80062c2:	4602      	mov	r2, r0
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	1ad3      	subs	r3, r2, r3
 80062c8:	68ba      	ldr	r2, [r7, #8]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d302      	bcc.n	80062d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d116      	bne.n	8006302 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	699b      	ldr	r3, [r3, #24]
 80062da:	f003 0304 	and.w	r3, r3, #4
 80062de:	2b04      	cmp	r3, #4
 80062e0:	d00f      	beq.n	8006302 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062e6:	f043 0220 	orr.w	r2, r3, #32
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2220      	movs	r2, #32
 80062f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e007      	b.n	8006312 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	699b      	ldr	r3, [r3, #24]
 8006308:	f003 0304 	and.w	r3, r3, #4
 800630c:	2b04      	cmp	r3, #4
 800630e:	d18c      	bne.n	800622a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	fe00e800 	.word	0xfe00e800

08006320 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b08a      	sub	sp, #40	; 0x28
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800632c:	2300      	movs	r3, #0
 800632e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	699b      	ldr	r3, [r3, #24]
 8006338:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800633a:	2300      	movs	r3, #0
 800633c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	f003 0310 	and.w	r3, r3, #16
 8006348:	2b00      	cmp	r3, #0
 800634a:	d068      	beq.n	800641e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2210      	movs	r2, #16
 8006352:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006354:	e049      	b.n	80063ea <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800635c:	d045      	beq.n	80063ea <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800635e:	f7fc ff83 	bl	8003268 <HAL_GetTick>
 8006362:	4602      	mov	r2, r0
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	68ba      	ldr	r2, [r7, #8]
 800636a:	429a      	cmp	r2, r3
 800636c:	d302      	bcc.n	8006374 <I2C_IsErrorOccurred+0x54>
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d13a      	bne.n	80063ea <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800637e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006386:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006392:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006396:	d121      	bne.n	80063dc <I2C_IsErrorOccurred+0xbc>
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800639e:	d01d      	beq.n	80063dc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80063a0:	7cfb      	ldrb	r3, [r7, #19]
 80063a2:	2b20      	cmp	r3, #32
 80063a4:	d01a      	beq.n	80063dc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	685a      	ldr	r2, [r3, #4]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063b4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80063b6:	f7fc ff57 	bl	8003268 <HAL_GetTick>
 80063ba:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80063bc:	e00e      	b.n	80063dc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80063be:	f7fc ff53 	bl	8003268 <HAL_GetTick>
 80063c2:	4602      	mov	r2, r0
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	2b19      	cmp	r3, #25
 80063ca:	d907      	bls.n	80063dc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80063cc:	6a3b      	ldr	r3, [r7, #32]
 80063ce:	f043 0320 	orr.w	r3, r3, #32
 80063d2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80063da:	e006      	b.n	80063ea <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	699b      	ldr	r3, [r3, #24]
 80063e2:	f003 0320 	and.w	r3, r3, #32
 80063e6:	2b20      	cmp	r3, #32
 80063e8:	d1e9      	bne.n	80063be <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	699b      	ldr	r3, [r3, #24]
 80063f0:	f003 0320 	and.w	r3, r3, #32
 80063f4:	2b20      	cmp	r3, #32
 80063f6:	d003      	beq.n	8006400 <I2C_IsErrorOccurred+0xe0>
 80063f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d0aa      	beq.n	8006356 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006400:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006404:	2b00      	cmp	r3, #0
 8006406:	d103      	bne.n	8006410 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2220      	movs	r2, #32
 800640e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006410:	6a3b      	ldr	r3, [r7, #32]
 8006412:	f043 0304 	orr.w	r3, r3, #4
 8006416:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	699b      	ldr	r3, [r3, #24]
 8006424:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00b      	beq.n	8006448 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006430:	6a3b      	ldr	r3, [r7, #32]
 8006432:	f043 0301 	orr.w	r3, r3, #1
 8006436:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006440:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00b      	beq.n	800646a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006452:	6a3b      	ldr	r3, [r7, #32]
 8006454:	f043 0308 	orr.w	r3, r3, #8
 8006458:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006462:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800646a:	69bb      	ldr	r3, [r7, #24]
 800646c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00b      	beq.n	800648c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006474:	6a3b      	ldr	r3, [r7, #32]
 8006476:	f043 0302 	orr.w	r3, r3, #2
 800647a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006484:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800648c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006490:	2b00      	cmp	r3, #0
 8006492:	d01c      	beq.n	80064ce <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006494:	68f8      	ldr	r0, [r7, #12]
 8006496:	f7ff fdc3 	bl	8006020 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	6859      	ldr	r1, [r3, #4]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	4b0d      	ldr	r3, [pc, #52]	; (80064dc <I2C_IsErrorOccurred+0x1bc>)
 80064a6:	400b      	ands	r3, r1
 80064a8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064ae:	6a3b      	ldr	r3, [r7, #32]
 80064b0:	431a      	orrs	r2, r3
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2220      	movs	r2, #32
 80064ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80064ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3728      	adds	r7, #40	; 0x28
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	bf00      	nop
 80064dc:	fe00e800 	.word	0xfe00e800

080064e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b087      	sub	sp, #28
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	607b      	str	r3, [r7, #4]
 80064ea:	460b      	mov	r3, r1
 80064ec:	817b      	strh	r3, [r7, #10]
 80064ee:	4613      	mov	r3, r2
 80064f0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80064f2:	897b      	ldrh	r3, [r7, #10]
 80064f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80064f8:	7a7b      	ldrb	r3, [r7, #9]
 80064fa:	041b      	lsls	r3, r3, #16
 80064fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006500:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006506:	6a3b      	ldr	r3, [r7, #32]
 8006508:	4313      	orrs	r3, r2
 800650a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800650e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	685a      	ldr	r2, [r3, #4]
 8006516:	6a3b      	ldr	r3, [r7, #32]
 8006518:	0d5b      	lsrs	r3, r3, #21
 800651a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800651e:	4b08      	ldr	r3, [pc, #32]	; (8006540 <I2C_TransferConfig+0x60>)
 8006520:	430b      	orrs	r3, r1
 8006522:	43db      	mvns	r3, r3
 8006524:	ea02 0103 	and.w	r1, r2, r3
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	697a      	ldr	r2, [r7, #20]
 800652e:	430a      	orrs	r2, r1
 8006530:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006532:	bf00      	nop
 8006534:	371c      	adds	r7, #28
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	03ff63ff 	.word	0x03ff63ff

08006544 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006554:	b2db      	uxtb	r3, r3
 8006556:	2b20      	cmp	r3, #32
 8006558:	d138      	bne.n	80065cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006560:	2b01      	cmp	r3, #1
 8006562:	d101      	bne.n	8006568 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006564:	2302      	movs	r3, #2
 8006566:	e032      	b.n	80065ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2224      	movs	r2, #36	; 0x24
 8006574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f022 0201 	bic.w	r2, r2, #1
 8006586:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006596:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	6819      	ldr	r1, [r3, #0]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	683a      	ldr	r2, [r7, #0]
 80065a4:	430a      	orrs	r2, r1
 80065a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f042 0201 	orr.w	r2, r2, #1
 80065b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2220      	movs	r2, #32
 80065bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80065c8:	2300      	movs	r3, #0
 80065ca:	e000      	b.n	80065ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80065cc:	2302      	movs	r3, #2
  }
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	370c      	adds	r7, #12
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr

080065da <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80065da:	b480      	push	{r7}
 80065dc:	b085      	sub	sp, #20
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
 80065e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	2b20      	cmp	r3, #32
 80065ee:	d139      	bne.n	8006664 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d101      	bne.n	80065fe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80065fa:	2302      	movs	r3, #2
 80065fc:	e033      	b.n	8006666 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2201      	movs	r2, #1
 8006602:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2224      	movs	r2, #36	; 0x24
 800660a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f022 0201 	bic.w	r2, r2, #1
 800661c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800662c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	021b      	lsls	r3, r3, #8
 8006632:	68fa      	ldr	r2, [r7, #12]
 8006634:	4313      	orrs	r3, r2
 8006636:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f042 0201 	orr.w	r2, r2, #1
 800664e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2220      	movs	r2, #32
 8006654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006660:	2300      	movs	r3, #0
 8006662:	e000      	b.n	8006666 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006664:	2302      	movs	r3, #2
  }
}
 8006666:	4618      	mov	r0, r3
 8006668:	3714      	adds	r7, #20
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr
	...

08006674 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800667a:	af00      	add	r7, sp, #0
 800667c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006680:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006684:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800668a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d102      	bne.n	800669a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	f001 b823 	b.w	80076e0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800669a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800669e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 0301 	and.w	r3, r3, #1
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	f000 817d 	beq.w	80069aa <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80066b0:	4bbc      	ldr	r3, [pc, #752]	; (80069a4 <HAL_RCC_OscConfig+0x330>)
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	f003 030c 	and.w	r3, r3, #12
 80066b8:	2b04      	cmp	r3, #4
 80066ba:	d00c      	beq.n	80066d6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80066bc:	4bb9      	ldr	r3, [pc, #740]	; (80069a4 <HAL_RCC_OscConfig+0x330>)
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	f003 030c 	and.w	r3, r3, #12
 80066c4:	2b08      	cmp	r3, #8
 80066c6:	d15c      	bne.n	8006782 <HAL_RCC_OscConfig+0x10e>
 80066c8:	4bb6      	ldr	r3, [pc, #728]	; (80069a4 <HAL_RCC_OscConfig+0x330>)
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066d4:	d155      	bne.n	8006782 <HAL_RCC_OscConfig+0x10e>
 80066d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80066da:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066de:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80066e2:	fa93 f3a3 	rbit	r3, r3
 80066e6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 80066ea:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066ee:	fab3 f383 	clz	r3, r3
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	095b      	lsrs	r3, r3, #5
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	f043 0301 	orr.w	r3, r3, #1
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d102      	bne.n	8006708 <HAL_RCC_OscConfig+0x94>
 8006702:	4ba8      	ldr	r3, [pc, #672]	; (80069a4 <HAL_RCC_OscConfig+0x330>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	e015      	b.n	8006734 <HAL_RCC_OscConfig+0xc0>
 8006708:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800670c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006710:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8006714:	fa93 f3a3 	rbit	r3, r3
 8006718:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800671c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006720:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8006724:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8006728:	fa93 f3a3 	rbit	r3, r3
 800672c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8006730:	4b9c      	ldr	r3, [pc, #624]	; (80069a4 <HAL_RCC_OscConfig+0x330>)
 8006732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006734:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006738:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800673c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8006740:	fa92 f2a2 	rbit	r2, r2
 8006744:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8006748:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800674c:	fab2 f282 	clz	r2, r2
 8006750:	b2d2      	uxtb	r2, r2
 8006752:	f042 0220 	orr.w	r2, r2, #32
 8006756:	b2d2      	uxtb	r2, r2
 8006758:	f002 021f 	and.w	r2, r2, #31
 800675c:	2101      	movs	r1, #1
 800675e:	fa01 f202 	lsl.w	r2, r1, r2
 8006762:	4013      	ands	r3, r2
 8006764:	2b00      	cmp	r3, #0
 8006766:	f000 811f 	beq.w	80069a8 <HAL_RCC_OscConfig+0x334>
 800676a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800676e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	2b00      	cmp	r3, #0
 8006778:	f040 8116 	bne.w	80069a8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	f000 bfaf 	b.w	80076e0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006782:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006786:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006792:	d106      	bne.n	80067a2 <HAL_RCC_OscConfig+0x12e>
 8006794:	4b83      	ldr	r3, [pc, #524]	; (80069a4 <HAL_RCC_OscConfig+0x330>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a82      	ldr	r2, [pc, #520]	; (80069a4 <HAL_RCC_OscConfig+0x330>)
 800679a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800679e:	6013      	str	r3, [r2, #0]
 80067a0:	e036      	b.n	8006810 <HAL_RCC_OscConfig+0x19c>
 80067a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80067a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d10c      	bne.n	80067cc <HAL_RCC_OscConfig+0x158>
 80067b2:	4b7c      	ldr	r3, [pc, #496]	; (80069a4 <HAL_RCC_OscConfig+0x330>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a7b      	ldr	r2, [pc, #492]	; (80069a4 <HAL_RCC_OscConfig+0x330>)
 80067b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067bc:	6013      	str	r3, [r2, #0]
 80067be:	4b79      	ldr	r3, [pc, #484]	; (80069a4 <HAL_RCC_OscConfig+0x330>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a78      	ldr	r2, [pc, #480]	; (80069a4 <HAL_RCC_OscConfig+0x330>)
 80067c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067c8:	6013      	str	r3, [r2, #0]
 80067ca:	e021      	b.n	8006810 <HAL_RCC_OscConfig+0x19c>
 80067cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80067d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80067dc:	d10c      	bne.n	80067f8 <HAL_RCC_OscConfig+0x184>
 80067de:	4b71      	ldr	r3, [pc, #452]	; (80069a4 <HAL_RCC_OscConfig+0x330>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a70      	ldr	r2, [pc, #448]	; (80069a4 <HAL_RCC_OscConfig+0x330>)
 80067e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067e8:	6013      	str	r3, [r2, #0]
 80067ea:	4b6e      	ldr	r3, [pc, #440]	; (80069a4 <HAL_RCC_OscConfig+0x330>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a6d      	ldr	r2, [pc, #436]	; (80069a4 <HAL_RCC_OscConfig+0x330>)
 80067f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067f4:	6013      	str	r3, [r2, #0]
 80067f6:	e00b      	b.n	8006810 <HAL_RCC_OscConfig+0x19c>
 80067f8:	4b6a      	ldr	r3, [pc, #424]	; (80069a4 <HAL_RCC_OscConfig+0x330>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a69      	ldr	r2, [pc, #420]	; (80069a4 <HAL_RCC_OscConfig+0x330>)
 80067fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006802:	6013      	str	r3, [r2, #0]
 8006804:	4b67      	ldr	r3, [pc, #412]	; (80069a4 <HAL_RCC_OscConfig+0x330>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a66      	ldr	r2, [pc, #408]	; (80069a4 <HAL_RCC_OscConfig+0x330>)
 800680a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800680e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006810:	4b64      	ldr	r3, [pc, #400]	; (80069a4 <HAL_RCC_OscConfig+0x330>)
 8006812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006814:	f023 020f 	bic.w	r2, r3, #15
 8006818:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800681c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	495f      	ldr	r1, [pc, #380]	; (80069a4 <HAL_RCC_OscConfig+0x330>)
 8006826:	4313      	orrs	r3, r2
 8006828:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800682a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800682e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d059      	beq.n	80068ee <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800683a:	f7fc fd15 	bl	8003268 <HAL_GetTick>
 800683e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006842:	e00a      	b.n	800685a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006844:	f7fc fd10 	bl	8003268 <HAL_GetTick>
 8006848:	4602      	mov	r2, r0
 800684a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800684e:	1ad3      	subs	r3, r2, r3
 8006850:	2b64      	cmp	r3, #100	; 0x64
 8006852:	d902      	bls.n	800685a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8006854:	2303      	movs	r3, #3
 8006856:	f000 bf43 	b.w	80076e0 <HAL_RCC_OscConfig+0x106c>
 800685a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800685e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006862:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8006866:	fa93 f3a3 	rbit	r3, r3
 800686a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800686e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006872:	fab3 f383 	clz	r3, r3
 8006876:	b2db      	uxtb	r3, r3
 8006878:	095b      	lsrs	r3, r3, #5
 800687a:	b2db      	uxtb	r3, r3
 800687c:	f043 0301 	orr.w	r3, r3, #1
 8006880:	b2db      	uxtb	r3, r3
 8006882:	2b01      	cmp	r3, #1
 8006884:	d102      	bne.n	800688c <HAL_RCC_OscConfig+0x218>
 8006886:	4b47      	ldr	r3, [pc, #284]	; (80069a4 <HAL_RCC_OscConfig+0x330>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	e015      	b.n	80068b8 <HAL_RCC_OscConfig+0x244>
 800688c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006890:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006894:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8006898:	fa93 f3a3 	rbit	r3, r3
 800689c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80068a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80068a4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80068a8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80068ac:	fa93 f3a3 	rbit	r3, r3
 80068b0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80068b4:	4b3b      	ldr	r3, [pc, #236]	; (80069a4 <HAL_RCC_OscConfig+0x330>)
 80068b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80068bc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80068c0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80068c4:	fa92 f2a2 	rbit	r2, r2
 80068c8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80068cc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80068d0:	fab2 f282 	clz	r2, r2
 80068d4:	b2d2      	uxtb	r2, r2
 80068d6:	f042 0220 	orr.w	r2, r2, #32
 80068da:	b2d2      	uxtb	r2, r2
 80068dc:	f002 021f 	and.w	r2, r2, #31
 80068e0:	2101      	movs	r1, #1
 80068e2:	fa01 f202 	lsl.w	r2, r1, r2
 80068e6:	4013      	ands	r3, r2
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d0ab      	beq.n	8006844 <HAL_RCC_OscConfig+0x1d0>
 80068ec:	e05d      	b.n	80069aa <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068ee:	f7fc fcbb 	bl	8003268 <HAL_GetTick>
 80068f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068f6:	e00a      	b.n	800690e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068f8:	f7fc fcb6 	bl	8003268 <HAL_GetTick>
 80068fc:	4602      	mov	r2, r0
 80068fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006902:	1ad3      	subs	r3, r2, r3
 8006904:	2b64      	cmp	r3, #100	; 0x64
 8006906:	d902      	bls.n	800690e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8006908:	2303      	movs	r3, #3
 800690a:	f000 bee9 	b.w	80076e0 <HAL_RCC_OscConfig+0x106c>
 800690e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006912:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006916:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800691a:	fa93 f3a3 	rbit	r3, r3
 800691e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8006922:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006926:	fab3 f383 	clz	r3, r3
 800692a:	b2db      	uxtb	r3, r3
 800692c:	095b      	lsrs	r3, r3, #5
 800692e:	b2db      	uxtb	r3, r3
 8006930:	f043 0301 	orr.w	r3, r3, #1
 8006934:	b2db      	uxtb	r3, r3
 8006936:	2b01      	cmp	r3, #1
 8006938:	d102      	bne.n	8006940 <HAL_RCC_OscConfig+0x2cc>
 800693a:	4b1a      	ldr	r3, [pc, #104]	; (80069a4 <HAL_RCC_OscConfig+0x330>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	e015      	b.n	800696c <HAL_RCC_OscConfig+0x2f8>
 8006940:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006944:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006948:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800694c:	fa93 f3a3 	rbit	r3, r3
 8006950:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8006954:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006958:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800695c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8006960:	fa93 f3a3 	rbit	r3, r3
 8006964:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8006968:	4b0e      	ldr	r3, [pc, #56]	; (80069a4 <HAL_RCC_OscConfig+0x330>)
 800696a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006970:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8006974:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8006978:	fa92 f2a2 	rbit	r2, r2
 800697c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8006980:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8006984:	fab2 f282 	clz	r2, r2
 8006988:	b2d2      	uxtb	r2, r2
 800698a:	f042 0220 	orr.w	r2, r2, #32
 800698e:	b2d2      	uxtb	r2, r2
 8006990:	f002 021f 	and.w	r2, r2, #31
 8006994:	2101      	movs	r1, #1
 8006996:	fa01 f202 	lsl.w	r2, r1, r2
 800699a:	4013      	ands	r3, r2
 800699c:	2b00      	cmp	r3, #0
 800699e:	d1ab      	bne.n	80068f8 <HAL_RCC_OscConfig+0x284>
 80069a0:	e003      	b.n	80069aa <HAL_RCC_OscConfig+0x336>
 80069a2:	bf00      	nop
 80069a4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80069ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 0302 	and.w	r3, r3, #2
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	f000 817d 	beq.w	8006cba <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80069c0:	4ba6      	ldr	r3, [pc, #664]	; (8006c5c <HAL_RCC_OscConfig+0x5e8>)
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	f003 030c 	and.w	r3, r3, #12
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d00b      	beq.n	80069e4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80069cc:	4ba3      	ldr	r3, [pc, #652]	; (8006c5c <HAL_RCC_OscConfig+0x5e8>)
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	f003 030c 	and.w	r3, r3, #12
 80069d4:	2b08      	cmp	r3, #8
 80069d6:	d172      	bne.n	8006abe <HAL_RCC_OscConfig+0x44a>
 80069d8:	4ba0      	ldr	r3, [pc, #640]	; (8006c5c <HAL_RCC_OscConfig+0x5e8>)
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d16c      	bne.n	8006abe <HAL_RCC_OscConfig+0x44a>
 80069e4:	2302      	movs	r3, #2
 80069e6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069ea:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80069ee:	fa93 f3a3 	rbit	r3, r3
 80069f2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80069f6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069fa:	fab3 f383 	clz	r3, r3
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	095b      	lsrs	r3, r3, #5
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	f043 0301 	orr.w	r3, r3, #1
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d102      	bne.n	8006a14 <HAL_RCC_OscConfig+0x3a0>
 8006a0e:	4b93      	ldr	r3, [pc, #588]	; (8006c5c <HAL_RCC_OscConfig+0x5e8>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	e013      	b.n	8006a3c <HAL_RCC_OscConfig+0x3c8>
 8006a14:	2302      	movs	r3, #2
 8006a16:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a1a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8006a1e:	fa93 f3a3 	rbit	r3, r3
 8006a22:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8006a26:	2302      	movs	r3, #2
 8006a28:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8006a2c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8006a30:	fa93 f3a3 	rbit	r3, r3
 8006a34:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8006a38:	4b88      	ldr	r3, [pc, #544]	; (8006c5c <HAL_RCC_OscConfig+0x5e8>)
 8006a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3c:	2202      	movs	r2, #2
 8006a3e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8006a42:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8006a46:	fa92 f2a2 	rbit	r2, r2
 8006a4a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8006a4e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8006a52:	fab2 f282 	clz	r2, r2
 8006a56:	b2d2      	uxtb	r2, r2
 8006a58:	f042 0220 	orr.w	r2, r2, #32
 8006a5c:	b2d2      	uxtb	r2, r2
 8006a5e:	f002 021f 	and.w	r2, r2, #31
 8006a62:	2101      	movs	r1, #1
 8006a64:	fa01 f202 	lsl.w	r2, r1, r2
 8006a68:	4013      	ands	r3, r2
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00a      	beq.n	8006a84 <HAL_RCC_OscConfig+0x410>
 8006a6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	691b      	ldr	r3, [r3, #16]
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d002      	beq.n	8006a84 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	f000 be2e 	b.w	80076e0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a84:	4b75      	ldr	r3, [pc, #468]	; (8006c5c <HAL_RCC_OscConfig+0x5e8>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	695b      	ldr	r3, [r3, #20]
 8006a98:	21f8      	movs	r1, #248	; 0xf8
 8006a9a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a9e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8006aa2:	fa91 f1a1 	rbit	r1, r1
 8006aa6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8006aaa:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8006aae:	fab1 f181 	clz	r1, r1
 8006ab2:	b2c9      	uxtb	r1, r1
 8006ab4:	408b      	lsls	r3, r1
 8006ab6:	4969      	ldr	r1, [pc, #420]	; (8006c5c <HAL_RCC_OscConfig+0x5e8>)
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006abc:	e0fd      	b.n	8006cba <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006abe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ac2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	f000 8088 	beq.w	8006be0 <HAL_RCC_OscConfig+0x56c>
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ad6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8006ada:	fa93 f3a3 	rbit	r3, r3
 8006ade:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8006ae2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ae6:	fab3 f383 	clz	r3, r3
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006af0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	461a      	mov	r2, r3
 8006af8:	2301      	movs	r3, #1
 8006afa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006afc:	f7fc fbb4 	bl	8003268 <HAL_GetTick>
 8006b00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b04:	e00a      	b.n	8006b1c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b06:	f7fc fbaf 	bl	8003268 <HAL_GetTick>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	2b02      	cmp	r3, #2
 8006b14:	d902      	bls.n	8006b1c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8006b16:	2303      	movs	r3, #3
 8006b18:	f000 bde2 	b.w	80076e0 <HAL_RCC_OscConfig+0x106c>
 8006b1c:	2302      	movs	r3, #2
 8006b1e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b22:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8006b26:	fa93 f3a3 	rbit	r3, r3
 8006b2a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8006b2e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b32:	fab3 f383 	clz	r3, r3
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	095b      	lsrs	r3, r3, #5
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	f043 0301 	orr.w	r3, r3, #1
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d102      	bne.n	8006b4c <HAL_RCC_OscConfig+0x4d8>
 8006b46:	4b45      	ldr	r3, [pc, #276]	; (8006c5c <HAL_RCC_OscConfig+0x5e8>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	e013      	b.n	8006b74 <HAL_RCC_OscConfig+0x500>
 8006b4c:	2302      	movs	r3, #2
 8006b4e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b52:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8006b56:	fa93 f3a3 	rbit	r3, r3
 8006b5a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8006b5e:	2302      	movs	r3, #2
 8006b60:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8006b64:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006b68:	fa93 f3a3 	rbit	r3, r3
 8006b6c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8006b70:	4b3a      	ldr	r3, [pc, #232]	; (8006c5c <HAL_RCC_OscConfig+0x5e8>)
 8006b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b74:	2202      	movs	r2, #2
 8006b76:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8006b7a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8006b7e:	fa92 f2a2 	rbit	r2, r2
 8006b82:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8006b86:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8006b8a:	fab2 f282 	clz	r2, r2
 8006b8e:	b2d2      	uxtb	r2, r2
 8006b90:	f042 0220 	orr.w	r2, r2, #32
 8006b94:	b2d2      	uxtb	r2, r2
 8006b96:	f002 021f 	and.w	r2, r2, #31
 8006b9a:	2101      	movs	r1, #1
 8006b9c:	fa01 f202 	lsl.w	r2, r1, r2
 8006ba0:	4013      	ands	r3, r2
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d0af      	beq.n	8006b06 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ba6:	4b2d      	ldr	r3, [pc, #180]	; (8006c5c <HAL_RCC_OscConfig+0x5e8>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006bae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006bb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	695b      	ldr	r3, [r3, #20]
 8006bba:	21f8      	movs	r1, #248	; 0xf8
 8006bbc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bc0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006bc4:	fa91 f1a1 	rbit	r1, r1
 8006bc8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8006bcc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8006bd0:	fab1 f181 	clz	r1, r1
 8006bd4:	b2c9      	uxtb	r1, r1
 8006bd6:	408b      	lsls	r3, r1
 8006bd8:	4920      	ldr	r1, [pc, #128]	; (8006c5c <HAL_RCC_OscConfig+0x5e8>)
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	600b      	str	r3, [r1, #0]
 8006bde:	e06c      	b.n	8006cba <HAL_RCC_OscConfig+0x646>
 8006be0:	2301      	movs	r3, #1
 8006be2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006be6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006bea:	fa93 f3a3 	rbit	r3, r3
 8006bee:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8006bf2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006bf6:	fab3 f383 	clz	r3, r3
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006c00:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	461a      	mov	r2, r3
 8006c08:	2300      	movs	r3, #0
 8006c0a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c0c:	f7fc fb2c 	bl	8003268 <HAL_GetTick>
 8006c10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c14:	e00a      	b.n	8006c2c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c16:	f7fc fb27 	bl	8003268 <HAL_GetTick>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	2b02      	cmp	r3, #2
 8006c24:	d902      	bls.n	8006c2c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8006c26:	2303      	movs	r3, #3
 8006c28:	f000 bd5a 	b.w	80076e0 <HAL_RCC_OscConfig+0x106c>
 8006c2c:	2302      	movs	r3, #2
 8006c2e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c32:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006c36:	fa93 f3a3 	rbit	r3, r3
 8006c3a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8006c3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c42:	fab3 f383 	clz	r3, r3
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	095b      	lsrs	r3, r3, #5
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	f043 0301 	orr.w	r3, r3, #1
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d104      	bne.n	8006c60 <HAL_RCC_OscConfig+0x5ec>
 8006c56:	4b01      	ldr	r3, [pc, #4]	; (8006c5c <HAL_RCC_OscConfig+0x5e8>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	e015      	b.n	8006c88 <HAL_RCC_OscConfig+0x614>
 8006c5c:	40021000 	.word	0x40021000
 8006c60:	2302      	movs	r3, #2
 8006c62:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c66:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006c6a:	fa93 f3a3 	rbit	r3, r3
 8006c6e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006c72:	2302      	movs	r3, #2
 8006c74:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006c78:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006c7c:	fa93 f3a3 	rbit	r3, r3
 8006c80:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006c84:	4bc8      	ldr	r3, [pc, #800]	; (8006fa8 <HAL_RCC_OscConfig+0x934>)
 8006c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c88:	2202      	movs	r2, #2
 8006c8a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8006c8e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006c92:	fa92 f2a2 	rbit	r2, r2
 8006c96:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8006c9a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8006c9e:	fab2 f282 	clz	r2, r2
 8006ca2:	b2d2      	uxtb	r2, r2
 8006ca4:	f042 0220 	orr.w	r2, r2, #32
 8006ca8:	b2d2      	uxtb	r2, r2
 8006caa:	f002 021f 	and.w	r2, r2, #31
 8006cae:	2101      	movs	r1, #1
 8006cb0:	fa01 f202 	lsl.w	r2, r1, r2
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d1ad      	bne.n	8006c16 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006cba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006cbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f003 0308 	and.w	r3, r3, #8
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	f000 8110 	beq.w	8006ef0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006cd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006cd4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	699b      	ldr	r3, [r3, #24]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d079      	beq.n	8006dd4 <HAL_RCC_OscConfig+0x760>
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ce6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006cea:	fa93 f3a3 	rbit	r3, r3
 8006cee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8006cf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006cf6:	fab3 f383 	clz	r3, r3
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	4bab      	ldr	r3, [pc, #684]	; (8006fac <HAL_RCC_OscConfig+0x938>)
 8006d00:	4413      	add	r3, r2
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	461a      	mov	r2, r3
 8006d06:	2301      	movs	r3, #1
 8006d08:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d0a:	f7fc faad 	bl	8003268 <HAL_GetTick>
 8006d0e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d12:	e00a      	b.n	8006d2a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d14:	f7fc faa8 	bl	8003268 <HAL_GetTick>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006d1e:	1ad3      	subs	r3, r2, r3
 8006d20:	2b02      	cmp	r3, #2
 8006d22:	d902      	bls.n	8006d2a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8006d24:	2303      	movs	r3, #3
 8006d26:	f000 bcdb 	b.w	80076e0 <HAL_RCC_OscConfig+0x106c>
 8006d2a:	2302      	movs	r3, #2
 8006d2c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d30:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d34:	fa93 f3a3 	rbit	r3, r3
 8006d38:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006d3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d40:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006d44:	2202      	movs	r2, #2
 8006d46:	601a      	str	r2, [r3, #0]
 8006d48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d4c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	fa93 f2a3 	rbit	r2, r3
 8006d56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d5e:	601a      	str	r2, [r3, #0]
 8006d60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d68:	2202      	movs	r2, #2
 8006d6a:	601a      	str	r2, [r3, #0]
 8006d6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	fa93 f2a3 	rbit	r2, r3
 8006d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d7e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006d82:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d84:	4b88      	ldr	r3, [pc, #544]	; (8006fa8 <HAL_RCC_OscConfig+0x934>)
 8006d86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d8c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006d90:	2102      	movs	r1, #2
 8006d92:	6019      	str	r1, [r3, #0]
 8006d94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d98:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	fa93 f1a3 	rbit	r1, r3
 8006da2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006da6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006daa:	6019      	str	r1, [r3, #0]
  return result;
 8006dac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006db0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	fab3 f383 	clz	r3, r3
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	f003 031f 	and.w	r3, r3, #31
 8006dc6:	2101      	movs	r1, #1
 8006dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8006dcc:	4013      	ands	r3, r2
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d0a0      	beq.n	8006d14 <HAL_RCC_OscConfig+0x6a0>
 8006dd2:	e08d      	b.n	8006ef0 <HAL_RCC_OscConfig+0x87c>
 8006dd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006dd8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006ddc:	2201      	movs	r2, #1
 8006dde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006de0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006de4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	fa93 f2a3 	rbit	r2, r3
 8006dee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006df2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006df6:	601a      	str	r2, [r3, #0]
  return result;
 8006df8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006dfc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006e00:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e02:	fab3 f383 	clz	r3, r3
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	461a      	mov	r2, r3
 8006e0a:	4b68      	ldr	r3, [pc, #416]	; (8006fac <HAL_RCC_OscConfig+0x938>)
 8006e0c:	4413      	add	r3, r2
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	461a      	mov	r2, r3
 8006e12:	2300      	movs	r3, #0
 8006e14:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e16:	f7fc fa27 	bl	8003268 <HAL_GetTick>
 8006e1a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e1e:	e00a      	b.n	8006e36 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e20:	f7fc fa22 	bl	8003268 <HAL_GetTick>
 8006e24:	4602      	mov	r2, r0
 8006e26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006e2a:	1ad3      	subs	r3, r2, r3
 8006e2c:	2b02      	cmp	r3, #2
 8006e2e:	d902      	bls.n	8006e36 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8006e30:	2303      	movs	r3, #3
 8006e32:	f000 bc55 	b.w	80076e0 <HAL_RCC_OscConfig+0x106c>
 8006e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e3a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006e3e:	2202      	movs	r2, #2
 8006e40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e46:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	fa93 f2a3 	rbit	r2, r3
 8006e50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e54:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006e58:	601a      	str	r2, [r3, #0]
 8006e5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e5e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006e62:	2202      	movs	r2, #2
 8006e64:	601a      	str	r2, [r3, #0]
 8006e66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e6a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	fa93 f2a3 	rbit	r2, r3
 8006e74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e7c:	601a      	str	r2, [r3, #0]
 8006e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e86:	2202      	movs	r2, #2
 8006e88:	601a      	str	r2, [r3, #0]
 8006e8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	fa93 f2a3 	rbit	r2, r3
 8006e98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e9c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006ea0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ea2:	4b41      	ldr	r3, [pc, #260]	; (8006fa8 <HAL_RCC_OscConfig+0x934>)
 8006ea4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ea6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006eaa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8006eae:	2102      	movs	r1, #2
 8006eb0:	6019      	str	r1, [r3, #0]
 8006eb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006eb6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	fa93 f1a3 	rbit	r1, r3
 8006ec0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ec4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8006ec8:	6019      	str	r1, [r3, #0]
  return result;
 8006eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ece:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	fab3 f383 	clz	r3, r3
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	f003 031f 	and.w	r3, r3, #31
 8006ee4:	2101      	movs	r1, #1
 8006ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8006eea:	4013      	ands	r3, r2
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d197      	bne.n	8006e20 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ef0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ef4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 0304 	and.w	r3, r3, #4
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	f000 81a1 	beq.w	8007248 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f06:	2300      	movs	r3, #0
 8006f08:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f0c:	4b26      	ldr	r3, [pc, #152]	; (8006fa8 <HAL_RCC_OscConfig+0x934>)
 8006f0e:	69db      	ldr	r3, [r3, #28]
 8006f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d116      	bne.n	8006f46 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f18:	4b23      	ldr	r3, [pc, #140]	; (8006fa8 <HAL_RCC_OscConfig+0x934>)
 8006f1a:	69db      	ldr	r3, [r3, #28]
 8006f1c:	4a22      	ldr	r2, [pc, #136]	; (8006fa8 <HAL_RCC_OscConfig+0x934>)
 8006f1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f22:	61d3      	str	r3, [r2, #28]
 8006f24:	4b20      	ldr	r3, [pc, #128]	; (8006fa8 <HAL_RCC_OscConfig+0x934>)
 8006f26:	69db      	ldr	r3, [r3, #28]
 8006f28:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8006f2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f30:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8006f34:	601a      	str	r2, [r3, #0]
 8006f36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f3a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8006f3e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8006f40:	2301      	movs	r3, #1
 8006f42:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f46:	4b1a      	ldr	r3, [pc, #104]	; (8006fb0 <HAL_RCC_OscConfig+0x93c>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d11a      	bne.n	8006f88 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f52:	4b17      	ldr	r3, [pc, #92]	; (8006fb0 <HAL_RCC_OscConfig+0x93c>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a16      	ldr	r2, [pc, #88]	; (8006fb0 <HAL_RCC_OscConfig+0x93c>)
 8006f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f5c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f5e:	f7fc f983 	bl	8003268 <HAL_GetTick>
 8006f62:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f66:	e009      	b.n	8006f7c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f68:	f7fc f97e 	bl	8003268 <HAL_GetTick>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006f72:	1ad3      	subs	r3, r2, r3
 8006f74:	2b64      	cmp	r3, #100	; 0x64
 8006f76:	d901      	bls.n	8006f7c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	e3b1      	b.n	80076e0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f7c:	4b0c      	ldr	r3, [pc, #48]	; (8006fb0 <HAL_RCC_OscConfig+0x93c>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d0ef      	beq.n	8006f68 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f8c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d10d      	bne.n	8006fb4 <HAL_RCC_OscConfig+0x940>
 8006f98:	4b03      	ldr	r3, [pc, #12]	; (8006fa8 <HAL_RCC_OscConfig+0x934>)
 8006f9a:	6a1b      	ldr	r3, [r3, #32]
 8006f9c:	4a02      	ldr	r2, [pc, #8]	; (8006fa8 <HAL_RCC_OscConfig+0x934>)
 8006f9e:	f043 0301 	orr.w	r3, r3, #1
 8006fa2:	6213      	str	r3, [r2, #32]
 8006fa4:	e03c      	b.n	8007020 <HAL_RCC_OscConfig+0x9ac>
 8006fa6:	bf00      	nop
 8006fa8:	40021000 	.word	0x40021000
 8006fac:	10908120 	.word	0x10908120
 8006fb0:	40007000 	.word	0x40007000
 8006fb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006fb8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d10c      	bne.n	8006fde <HAL_RCC_OscConfig+0x96a>
 8006fc4:	4bc1      	ldr	r3, [pc, #772]	; (80072cc <HAL_RCC_OscConfig+0xc58>)
 8006fc6:	6a1b      	ldr	r3, [r3, #32]
 8006fc8:	4ac0      	ldr	r2, [pc, #768]	; (80072cc <HAL_RCC_OscConfig+0xc58>)
 8006fca:	f023 0301 	bic.w	r3, r3, #1
 8006fce:	6213      	str	r3, [r2, #32]
 8006fd0:	4bbe      	ldr	r3, [pc, #760]	; (80072cc <HAL_RCC_OscConfig+0xc58>)
 8006fd2:	6a1b      	ldr	r3, [r3, #32]
 8006fd4:	4abd      	ldr	r2, [pc, #756]	; (80072cc <HAL_RCC_OscConfig+0xc58>)
 8006fd6:	f023 0304 	bic.w	r3, r3, #4
 8006fda:	6213      	str	r3, [r2, #32]
 8006fdc:	e020      	b.n	8007020 <HAL_RCC_OscConfig+0x9ac>
 8006fde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006fe2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	2b05      	cmp	r3, #5
 8006fec:	d10c      	bne.n	8007008 <HAL_RCC_OscConfig+0x994>
 8006fee:	4bb7      	ldr	r3, [pc, #732]	; (80072cc <HAL_RCC_OscConfig+0xc58>)
 8006ff0:	6a1b      	ldr	r3, [r3, #32]
 8006ff2:	4ab6      	ldr	r2, [pc, #728]	; (80072cc <HAL_RCC_OscConfig+0xc58>)
 8006ff4:	f043 0304 	orr.w	r3, r3, #4
 8006ff8:	6213      	str	r3, [r2, #32]
 8006ffa:	4bb4      	ldr	r3, [pc, #720]	; (80072cc <HAL_RCC_OscConfig+0xc58>)
 8006ffc:	6a1b      	ldr	r3, [r3, #32]
 8006ffe:	4ab3      	ldr	r2, [pc, #716]	; (80072cc <HAL_RCC_OscConfig+0xc58>)
 8007000:	f043 0301 	orr.w	r3, r3, #1
 8007004:	6213      	str	r3, [r2, #32]
 8007006:	e00b      	b.n	8007020 <HAL_RCC_OscConfig+0x9ac>
 8007008:	4bb0      	ldr	r3, [pc, #704]	; (80072cc <HAL_RCC_OscConfig+0xc58>)
 800700a:	6a1b      	ldr	r3, [r3, #32]
 800700c:	4aaf      	ldr	r2, [pc, #700]	; (80072cc <HAL_RCC_OscConfig+0xc58>)
 800700e:	f023 0301 	bic.w	r3, r3, #1
 8007012:	6213      	str	r3, [r2, #32]
 8007014:	4bad      	ldr	r3, [pc, #692]	; (80072cc <HAL_RCC_OscConfig+0xc58>)
 8007016:	6a1b      	ldr	r3, [r3, #32]
 8007018:	4aac      	ldr	r2, [pc, #688]	; (80072cc <HAL_RCC_OscConfig+0xc58>)
 800701a:	f023 0304 	bic.w	r3, r3, #4
 800701e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007020:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007024:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	2b00      	cmp	r3, #0
 800702e:	f000 8081 	beq.w	8007134 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007032:	f7fc f919 	bl	8003268 <HAL_GetTick>
 8007036:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800703a:	e00b      	b.n	8007054 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800703c:	f7fc f914 	bl	8003268 <HAL_GetTick>
 8007040:	4602      	mov	r2, r0
 8007042:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007046:	1ad3      	subs	r3, r2, r3
 8007048:	f241 3288 	movw	r2, #5000	; 0x1388
 800704c:	4293      	cmp	r3, r2
 800704e:	d901      	bls.n	8007054 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8007050:	2303      	movs	r3, #3
 8007052:	e345      	b.n	80076e0 <HAL_RCC_OscConfig+0x106c>
 8007054:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007058:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800705c:	2202      	movs	r2, #2
 800705e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007060:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007064:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	fa93 f2a3 	rbit	r2, r3
 800706e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007072:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8007076:	601a      	str	r2, [r3, #0]
 8007078:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800707c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007080:	2202      	movs	r2, #2
 8007082:	601a      	str	r2, [r3, #0]
 8007084:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007088:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	fa93 f2a3 	rbit	r2, r3
 8007092:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007096:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800709a:	601a      	str	r2, [r3, #0]
  return result;
 800709c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80070a0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80070a4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070a6:	fab3 f383 	clz	r3, r3
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	095b      	lsrs	r3, r3, #5
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	f043 0302 	orr.w	r3, r3, #2
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	2b02      	cmp	r3, #2
 80070b8:	d102      	bne.n	80070c0 <HAL_RCC_OscConfig+0xa4c>
 80070ba:	4b84      	ldr	r3, [pc, #528]	; (80072cc <HAL_RCC_OscConfig+0xc58>)
 80070bc:	6a1b      	ldr	r3, [r3, #32]
 80070be:	e013      	b.n	80070e8 <HAL_RCC_OscConfig+0xa74>
 80070c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80070c4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80070c8:	2202      	movs	r2, #2
 80070ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80070d0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	fa93 f2a3 	rbit	r2, r3
 80070da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80070de:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80070e2:	601a      	str	r2, [r3, #0]
 80070e4:	4b79      	ldr	r3, [pc, #484]	; (80072cc <HAL_RCC_OscConfig+0xc58>)
 80070e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80070ec:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80070f0:	2102      	movs	r1, #2
 80070f2:	6011      	str	r1, [r2, #0]
 80070f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80070f8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80070fc:	6812      	ldr	r2, [r2, #0]
 80070fe:	fa92 f1a2 	rbit	r1, r2
 8007102:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007106:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800710a:	6011      	str	r1, [r2, #0]
  return result;
 800710c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007110:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8007114:	6812      	ldr	r2, [r2, #0]
 8007116:	fab2 f282 	clz	r2, r2
 800711a:	b2d2      	uxtb	r2, r2
 800711c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007120:	b2d2      	uxtb	r2, r2
 8007122:	f002 021f 	and.w	r2, r2, #31
 8007126:	2101      	movs	r1, #1
 8007128:	fa01 f202 	lsl.w	r2, r1, r2
 800712c:	4013      	ands	r3, r2
 800712e:	2b00      	cmp	r3, #0
 8007130:	d084      	beq.n	800703c <HAL_RCC_OscConfig+0x9c8>
 8007132:	e07f      	b.n	8007234 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007134:	f7fc f898 	bl	8003268 <HAL_GetTick>
 8007138:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800713c:	e00b      	b.n	8007156 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800713e:	f7fc f893 	bl	8003268 <HAL_GetTick>
 8007142:	4602      	mov	r2, r0
 8007144:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007148:	1ad3      	subs	r3, r2, r3
 800714a:	f241 3288 	movw	r2, #5000	; 0x1388
 800714e:	4293      	cmp	r3, r2
 8007150:	d901      	bls.n	8007156 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8007152:	2303      	movs	r3, #3
 8007154:	e2c4      	b.n	80076e0 <HAL_RCC_OscConfig+0x106c>
 8007156:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800715a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800715e:	2202      	movs	r2, #2
 8007160:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007162:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007166:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	fa93 f2a3 	rbit	r2, r3
 8007170:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007174:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8007178:	601a      	str	r2, [r3, #0]
 800717a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800717e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8007182:	2202      	movs	r2, #2
 8007184:	601a      	str	r2, [r3, #0]
 8007186:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800718a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	fa93 f2a3 	rbit	r2, r3
 8007194:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007198:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800719c:	601a      	str	r2, [r3, #0]
  return result;
 800719e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80071a2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80071a6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071a8:	fab3 f383 	clz	r3, r3
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	095b      	lsrs	r3, r3, #5
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	f043 0302 	orr.w	r3, r3, #2
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	2b02      	cmp	r3, #2
 80071ba:	d102      	bne.n	80071c2 <HAL_RCC_OscConfig+0xb4e>
 80071bc:	4b43      	ldr	r3, [pc, #268]	; (80072cc <HAL_RCC_OscConfig+0xc58>)
 80071be:	6a1b      	ldr	r3, [r3, #32]
 80071c0:	e013      	b.n	80071ea <HAL_RCC_OscConfig+0xb76>
 80071c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80071c6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80071ca:	2202      	movs	r2, #2
 80071cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80071d2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	fa93 f2a3 	rbit	r2, r3
 80071dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80071e0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80071e4:	601a      	str	r2, [r3, #0]
 80071e6:	4b39      	ldr	r3, [pc, #228]	; (80072cc <HAL_RCC_OscConfig+0xc58>)
 80071e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80071ee:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80071f2:	2102      	movs	r1, #2
 80071f4:	6011      	str	r1, [r2, #0]
 80071f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80071fa:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80071fe:	6812      	ldr	r2, [r2, #0]
 8007200:	fa92 f1a2 	rbit	r1, r2
 8007204:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007208:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800720c:	6011      	str	r1, [r2, #0]
  return result;
 800720e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007212:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8007216:	6812      	ldr	r2, [r2, #0]
 8007218:	fab2 f282 	clz	r2, r2
 800721c:	b2d2      	uxtb	r2, r2
 800721e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007222:	b2d2      	uxtb	r2, r2
 8007224:	f002 021f 	and.w	r2, r2, #31
 8007228:	2101      	movs	r1, #1
 800722a:	fa01 f202 	lsl.w	r2, r1, r2
 800722e:	4013      	ands	r3, r2
 8007230:	2b00      	cmp	r3, #0
 8007232:	d184      	bne.n	800713e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007234:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8007238:	2b01      	cmp	r3, #1
 800723a:	d105      	bne.n	8007248 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800723c:	4b23      	ldr	r3, [pc, #140]	; (80072cc <HAL_RCC_OscConfig+0xc58>)
 800723e:	69db      	ldr	r3, [r3, #28]
 8007240:	4a22      	ldr	r2, [pc, #136]	; (80072cc <HAL_RCC_OscConfig+0xc58>)
 8007242:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007246:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007248:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800724c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	69db      	ldr	r3, [r3, #28]
 8007254:	2b00      	cmp	r3, #0
 8007256:	f000 8242 	beq.w	80076de <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800725a:	4b1c      	ldr	r3, [pc, #112]	; (80072cc <HAL_RCC_OscConfig+0xc58>)
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	f003 030c 	and.w	r3, r3, #12
 8007262:	2b08      	cmp	r3, #8
 8007264:	f000 8213 	beq.w	800768e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007268:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800726c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	69db      	ldr	r3, [r3, #28]
 8007274:	2b02      	cmp	r3, #2
 8007276:	f040 8162 	bne.w	800753e <HAL_RCC_OscConfig+0xeca>
 800727a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800727e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8007282:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007286:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007288:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800728c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	fa93 f2a3 	rbit	r2, r3
 8007296:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800729a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800729e:	601a      	str	r2, [r3, #0]
  return result;
 80072a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80072a4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80072a8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072aa:	fab3 f383 	clz	r3, r3
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80072b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	461a      	mov	r2, r3
 80072bc:	2300      	movs	r3, #0
 80072be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072c0:	f7fb ffd2 	bl	8003268 <HAL_GetTick>
 80072c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80072c8:	e00c      	b.n	80072e4 <HAL_RCC_OscConfig+0xc70>
 80072ca:	bf00      	nop
 80072cc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072d0:	f7fb ffca 	bl	8003268 <HAL_GetTick>
 80072d4:	4602      	mov	r2, r0
 80072d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80072da:	1ad3      	subs	r3, r2, r3
 80072dc:	2b02      	cmp	r3, #2
 80072de:	d901      	bls.n	80072e4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80072e0:	2303      	movs	r3, #3
 80072e2:	e1fd      	b.n	80076e0 <HAL_RCC_OscConfig+0x106c>
 80072e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80072e8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80072ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80072f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80072f6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	fa93 f2a3 	rbit	r2, r3
 8007300:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007304:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8007308:	601a      	str	r2, [r3, #0]
  return result;
 800730a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800730e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8007312:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007314:	fab3 f383 	clz	r3, r3
 8007318:	b2db      	uxtb	r3, r3
 800731a:	095b      	lsrs	r3, r3, #5
 800731c:	b2db      	uxtb	r3, r3
 800731e:	f043 0301 	orr.w	r3, r3, #1
 8007322:	b2db      	uxtb	r3, r3
 8007324:	2b01      	cmp	r3, #1
 8007326:	d102      	bne.n	800732e <HAL_RCC_OscConfig+0xcba>
 8007328:	4bb0      	ldr	r3, [pc, #704]	; (80075ec <HAL_RCC_OscConfig+0xf78>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	e027      	b.n	800737e <HAL_RCC_OscConfig+0xd0a>
 800732e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007332:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8007336:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800733a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800733c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007340:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	fa93 f2a3 	rbit	r2, r3
 800734a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800734e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8007352:	601a      	str	r2, [r3, #0]
 8007354:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007358:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800735c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007360:	601a      	str	r2, [r3, #0]
 8007362:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007366:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	fa93 f2a3 	rbit	r2, r3
 8007370:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007374:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007378:	601a      	str	r2, [r3, #0]
 800737a:	4b9c      	ldr	r3, [pc, #624]	; (80075ec <HAL_RCC_OscConfig+0xf78>)
 800737c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007382:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8007386:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800738a:	6011      	str	r1, [r2, #0]
 800738c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007390:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8007394:	6812      	ldr	r2, [r2, #0]
 8007396:	fa92 f1a2 	rbit	r1, r2
 800739a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800739e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80073a2:	6011      	str	r1, [r2, #0]
  return result;
 80073a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80073a8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80073ac:	6812      	ldr	r2, [r2, #0]
 80073ae:	fab2 f282 	clz	r2, r2
 80073b2:	b2d2      	uxtb	r2, r2
 80073b4:	f042 0220 	orr.w	r2, r2, #32
 80073b8:	b2d2      	uxtb	r2, r2
 80073ba:	f002 021f 	and.w	r2, r2, #31
 80073be:	2101      	movs	r1, #1
 80073c0:	fa01 f202 	lsl.w	r2, r1, r2
 80073c4:	4013      	ands	r3, r2
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d182      	bne.n	80072d0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80073ca:	4b88      	ldr	r3, [pc, #544]	; (80075ec <HAL_RCC_OscConfig+0xf78>)
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80073d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80073de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	6a1b      	ldr	r3, [r3, #32]
 80073ea:	430b      	orrs	r3, r1
 80073ec:	497f      	ldr	r1, [pc, #508]	; (80075ec <HAL_RCC_OscConfig+0xf78>)
 80073ee:	4313      	orrs	r3, r2
 80073f0:	604b      	str	r3, [r1, #4]
 80073f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073f6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80073fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80073fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007400:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007404:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	fa93 f2a3 	rbit	r2, r3
 800740e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007412:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8007416:	601a      	str	r2, [r3, #0]
  return result;
 8007418:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800741c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8007420:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007422:	fab3 f383 	clz	r3, r3
 8007426:	b2db      	uxtb	r3, r3
 8007428:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800742c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	461a      	mov	r2, r3
 8007434:	2301      	movs	r3, #1
 8007436:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007438:	f7fb ff16 	bl	8003268 <HAL_GetTick>
 800743c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007440:	e009      	b.n	8007456 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007442:	f7fb ff11 	bl	8003268 <HAL_GetTick>
 8007446:	4602      	mov	r2, r0
 8007448:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800744c:	1ad3      	subs	r3, r2, r3
 800744e:	2b02      	cmp	r3, #2
 8007450:	d901      	bls.n	8007456 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8007452:	2303      	movs	r3, #3
 8007454:	e144      	b.n	80076e0 <HAL_RCC_OscConfig+0x106c>
 8007456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800745a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800745e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007462:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007464:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007468:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	fa93 f2a3 	rbit	r2, r3
 8007472:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007476:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800747a:	601a      	str	r2, [r3, #0]
  return result;
 800747c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007480:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8007484:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007486:	fab3 f383 	clz	r3, r3
 800748a:	b2db      	uxtb	r3, r3
 800748c:	095b      	lsrs	r3, r3, #5
 800748e:	b2db      	uxtb	r3, r3
 8007490:	f043 0301 	orr.w	r3, r3, #1
 8007494:	b2db      	uxtb	r3, r3
 8007496:	2b01      	cmp	r3, #1
 8007498:	d102      	bne.n	80074a0 <HAL_RCC_OscConfig+0xe2c>
 800749a:	4b54      	ldr	r3, [pc, #336]	; (80075ec <HAL_RCC_OscConfig+0xf78>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	e027      	b.n	80074f0 <HAL_RCC_OscConfig+0xe7c>
 80074a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074a4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80074a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80074ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074b2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	fa93 f2a3 	rbit	r2, r3
 80074bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074c0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80074c4:	601a      	str	r2, [r3, #0]
 80074c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074ca:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80074ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80074d2:	601a      	str	r2, [r3, #0]
 80074d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074d8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	fa93 f2a3 	rbit	r2, r3
 80074e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074e6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80074ea:	601a      	str	r2, [r3, #0]
 80074ec:	4b3f      	ldr	r3, [pc, #252]	; (80075ec <HAL_RCC_OscConfig+0xf78>)
 80074ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80074f4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80074f8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80074fc:	6011      	str	r1, [r2, #0]
 80074fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007502:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8007506:	6812      	ldr	r2, [r2, #0]
 8007508:	fa92 f1a2 	rbit	r1, r2
 800750c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007510:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8007514:	6011      	str	r1, [r2, #0]
  return result;
 8007516:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800751a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800751e:	6812      	ldr	r2, [r2, #0]
 8007520:	fab2 f282 	clz	r2, r2
 8007524:	b2d2      	uxtb	r2, r2
 8007526:	f042 0220 	orr.w	r2, r2, #32
 800752a:	b2d2      	uxtb	r2, r2
 800752c:	f002 021f 	and.w	r2, r2, #31
 8007530:	2101      	movs	r1, #1
 8007532:	fa01 f202 	lsl.w	r2, r1, r2
 8007536:	4013      	ands	r3, r2
 8007538:	2b00      	cmp	r3, #0
 800753a:	d082      	beq.n	8007442 <HAL_RCC_OscConfig+0xdce>
 800753c:	e0cf      	b.n	80076de <HAL_RCC_OscConfig+0x106a>
 800753e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007542:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8007546:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800754a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800754c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007550:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	fa93 f2a3 	rbit	r2, r3
 800755a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800755e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8007562:	601a      	str	r2, [r3, #0]
  return result;
 8007564:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007568:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800756c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800756e:	fab3 f383 	clz	r3, r3
 8007572:	b2db      	uxtb	r3, r3
 8007574:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007578:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	461a      	mov	r2, r3
 8007580:	2300      	movs	r3, #0
 8007582:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007584:	f7fb fe70 	bl	8003268 <HAL_GetTick>
 8007588:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800758c:	e009      	b.n	80075a2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800758e:	f7fb fe6b 	bl	8003268 <HAL_GetTick>
 8007592:	4602      	mov	r2, r0
 8007594:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007598:	1ad3      	subs	r3, r2, r3
 800759a:	2b02      	cmp	r3, #2
 800759c:	d901      	bls.n	80075a2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800759e:	2303      	movs	r3, #3
 80075a0:	e09e      	b.n	80076e0 <HAL_RCC_OscConfig+0x106c>
 80075a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075a6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80075aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80075ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075b4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	fa93 f2a3 	rbit	r2, r3
 80075be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075c2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80075c6:	601a      	str	r2, [r3, #0]
  return result;
 80075c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075cc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80075d0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80075d2:	fab3 f383 	clz	r3, r3
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	095b      	lsrs	r3, r3, #5
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	f043 0301 	orr.w	r3, r3, #1
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d104      	bne.n	80075f0 <HAL_RCC_OscConfig+0xf7c>
 80075e6:	4b01      	ldr	r3, [pc, #4]	; (80075ec <HAL_RCC_OscConfig+0xf78>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	e029      	b.n	8007640 <HAL_RCC_OscConfig+0xfcc>
 80075ec:	40021000 	.word	0x40021000
 80075f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075f4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80075f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80075fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007602:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	fa93 f2a3 	rbit	r2, r3
 800760c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007610:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8007614:	601a      	str	r2, [r3, #0]
 8007616:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800761a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800761e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007622:	601a      	str	r2, [r3, #0]
 8007624:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007628:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	fa93 f2a3 	rbit	r2, r3
 8007632:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007636:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800763a:	601a      	str	r2, [r3, #0]
 800763c:	4b2b      	ldr	r3, [pc, #172]	; (80076ec <HAL_RCC_OscConfig+0x1078>)
 800763e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007640:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007644:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8007648:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800764c:	6011      	str	r1, [r2, #0]
 800764e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007652:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8007656:	6812      	ldr	r2, [r2, #0]
 8007658:	fa92 f1a2 	rbit	r1, r2
 800765c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007660:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8007664:	6011      	str	r1, [r2, #0]
  return result;
 8007666:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800766a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800766e:	6812      	ldr	r2, [r2, #0]
 8007670:	fab2 f282 	clz	r2, r2
 8007674:	b2d2      	uxtb	r2, r2
 8007676:	f042 0220 	orr.w	r2, r2, #32
 800767a:	b2d2      	uxtb	r2, r2
 800767c:	f002 021f 	and.w	r2, r2, #31
 8007680:	2101      	movs	r1, #1
 8007682:	fa01 f202 	lsl.w	r2, r1, r2
 8007686:	4013      	ands	r3, r2
 8007688:	2b00      	cmp	r3, #0
 800768a:	d180      	bne.n	800758e <HAL_RCC_OscConfig+0xf1a>
 800768c:	e027      	b.n	80076de <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800768e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007692:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	69db      	ldr	r3, [r3, #28]
 800769a:	2b01      	cmp	r3, #1
 800769c:	d101      	bne.n	80076a2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800769e:	2301      	movs	r3, #1
 80076a0:	e01e      	b.n	80076e0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80076a2:	4b12      	ldr	r3, [pc, #72]	; (80076ec <HAL_RCC_OscConfig+0x1078>)
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80076aa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80076ae:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80076b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	6a1b      	ldr	r3, [r3, #32]
 80076be:	429a      	cmp	r2, r3
 80076c0:	d10b      	bne.n	80076da <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80076c2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80076c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80076ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d001      	beq.n	80076de <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	e000      	b.n	80076e0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80076de:	2300      	movs	r3, #0
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	bf00      	nop
 80076ec:	40021000 	.word	0x40021000

080076f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b09e      	sub	sp, #120	; 0x78
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80076fa:	2300      	movs	r3, #0
 80076fc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d101      	bne.n	8007708 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	e162      	b.n	80079ce <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007708:	4b90      	ldr	r3, [pc, #576]	; (800794c <HAL_RCC_ClockConfig+0x25c>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f003 0307 	and.w	r3, r3, #7
 8007710:	683a      	ldr	r2, [r7, #0]
 8007712:	429a      	cmp	r2, r3
 8007714:	d910      	bls.n	8007738 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007716:	4b8d      	ldr	r3, [pc, #564]	; (800794c <HAL_RCC_ClockConfig+0x25c>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f023 0207 	bic.w	r2, r3, #7
 800771e:	498b      	ldr	r1, [pc, #556]	; (800794c <HAL_RCC_ClockConfig+0x25c>)
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	4313      	orrs	r3, r2
 8007724:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007726:	4b89      	ldr	r3, [pc, #548]	; (800794c <HAL_RCC_ClockConfig+0x25c>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f003 0307 	and.w	r3, r3, #7
 800772e:	683a      	ldr	r2, [r7, #0]
 8007730:	429a      	cmp	r2, r3
 8007732:	d001      	beq.n	8007738 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	e14a      	b.n	80079ce <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f003 0302 	and.w	r3, r3, #2
 8007740:	2b00      	cmp	r3, #0
 8007742:	d008      	beq.n	8007756 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007744:	4b82      	ldr	r3, [pc, #520]	; (8007950 <HAL_RCC_ClockConfig+0x260>)
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	497f      	ldr	r1, [pc, #508]	; (8007950 <HAL_RCC_ClockConfig+0x260>)
 8007752:	4313      	orrs	r3, r2
 8007754:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f003 0301 	and.w	r3, r3, #1
 800775e:	2b00      	cmp	r3, #0
 8007760:	f000 80dc 	beq.w	800791c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	2b01      	cmp	r3, #1
 800776a:	d13c      	bne.n	80077e6 <HAL_RCC_ClockConfig+0xf6>
 800776c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007770:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007772:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007774:	fa93 f3a3 	rbit	r3, r3
 8007778:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800777a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800777c:	fab3 f383 	clz	r3, r3
 8007780:	b2db      	uxtb	r3, r3
 8007782:	095b      	lsrs	r3, r3, #5
 8007784:	b2db      	uxtb	r3, r3
 8007786:	f043 0301 	orr.w	r3, r3, #1
 800778a:	b2db      	uxtb	r3, r3
 800778c:	2b01      	cmp	r3, #1
 800778e:	d102      	bne.n	8007796 <HAL_RCC_ClockConfig+0xa6>
 8007790:	4b6f      	ldr	r3, [pc, #444]	; (8007950 <HAL_RCC_ClockConfig+0x260>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	e00f      	b.n	80077b6 <HAL_RCC_ClockConfig+0xc6>
 8007796:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800779a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800779c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800779e:	fa93 f3a3 	rbit	r3, r3
 80077a2:	667b      	str	r3, [r7, #100]	; 0x64
 80077a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80077a8:	663b      	str	r3, [r7, #96]	; 0x60
 80077aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077ac:	fa93 f3a3 	rbit	r3, r3
 80077b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077b2:	4b67      	ldr	r3, [pc, #412]	; (8007950 <HAL_RCC_ClockConfig+0x260>)
 80077b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80077ba:	65ba      	str	r2, [r7, #88]	; 0x58
 80077bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80077be:	fa92 f2a2 	rbit	r2, r2
 80077c2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80077c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80077c6:	fab2 f282 	clz	r2, r2
 80077ca:	b2d2      	uxtb	r2, r2
 80077cc:	f042 0220 	orr.w	r2, r2, #32
 80077d0:	b2d2      	uxtb	r2, r2
 80077d2:	f002 021f 	and.w	r2, r2, #31
 80077d6:	2101      	movs	r1, #1
 80077d8:	fa01 f202 	lsl.w	r2, r1, r2
 80077dc:	4013      	ands	r3, r2
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d17b      	bne.n	80078da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e0f3      	b.n	80079ce <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	2b02      	cmp	r3, #2
 80077ec:	d13c      	bne.n	8007868 <HAL_RCC_ClockConfig+0x178>
 80077ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80077f2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077f6:	fa93 f3a3 	rbit	r3, r3
 80077fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80077fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077fe:	fab3 f383 	clz	r3, r3
 8007802:	b2db      	uxtb	r3, r3
 8007804:	095b      	lsrs	r3, r3, #5
 8007806:	b2db      	uxtb	r3, r3
 8007808:	f043 0301 	orr.w	r3, r3, #1
 800780c:	b2db      	uxtb	r3, r3
 800780e:	2b01      	cmp	r3, #1
 8007810:	d102      	bne.n	8007818 <HAL_RCC_ClockConfig+0x128>
 8007812:	4b4f      	ldr	r3, [pc, #316]	; (8007950 <HAL_RCC_ClockConfig+0x260>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	e00f      	b.n	8007838 <HAL_RCC_ClockConfig+0x148>
 8007818:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800781c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800781e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007820:	fa93 f3a3 	rbit	r3, r3
 8007824:	647b      	str	r3, [r7, #68]	; 0x44
 8007826:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800782a:	643b      	str	r3, [r7, #64]	; 0x40
 800782c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800782e:	fa93 f3a3 	rbit	r3, r3
 8007832:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007834:	4b46      	ldr	r3, [pc, #280]	; (8007950 <HAL_RCC_ClockConfig+0x260>)
 8007836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007838:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800783c:	63ba      	str	r2, [r7, #56]	; 0x38
 800783e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007840:	fa92 f2a2 	rbit	r2, r2
 8007844:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8007846:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007848:	fab2 f282 	clz	r2, r2
 800784c:	b2d2      	uxtb	r2, r2
 800784e:	f042 0220 	orr.w	r2, r2, #32
 8007852:	b2d2      	uxtb	r2, r2
 8007854:	f002 021f 	and.w	r2, r2, #31
 8007858:	2101      	movs	r1, #1
 800785a:	fa01 f202 	lsl.w	r2, r1, r2
 800785e:	4013      	ands	r3, r2
 8007860:	2b00      	cmp	r3, #0
 8007862:	d13a      	bne.n	80078da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007864:	2301      	movs	r3, #1
 8007866:	e0b2      	b.n	80079ce <HAL_RCC_ClockConfig+0x2de>
 8007868:	2302      	movs	r3, #2
 800786a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800786c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800786e:	fa93 f3a3 	rbit	r3, r3
 8007872:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007876:	fab3 f383 	clz	r3, r3
 800787a:	b2db      	uxtb	r3, r3
 800787c:	095b      	lsrs	r3, r3, #5
 800787e:	b2db      	uxtb	r3, r3
 8007880:	f043 0301 	orr.w	r3, r3, #1
 8007884:	b2db      	uxtb	r3, r3
 8007886:	2b01      	cmp	r3, #1
 8007888:	d102      	bne.n	8007890 <HAL_RCC_ClockConfig+0x1a0>
 800788a:	4b31      	ldr	r3, [pc, #196]	; (8007950 <HAL_RCC_ClockConfig+0x260>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	e00d      	b.n	80078ac <HAL_RCC_ClockConfig+0x1bc>
 8007890:	2302      	movs	r3, #2
 8007892:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007896:	fa93 f3a3 	rbit	r3, r3
 800789a:	627b      	str	r3, [r7, #36]	; 0x24
 800789c:	2302      	movs	r3, #2
 800789e:	623b      	str	r3, [r7, #32]
 80078a0:	6a3b      	ldr	r3, [r7, #32]
 80078a2:	fa93 f3a3 	rbit	r3, r3
 80078a6:	61fb      	str	r3, [r7, #28]
 80078a8:	4b29      	ldr	r3, [pc, #164]	; (8007950 <HAL_RCC_ClockConfig+0x260>)
 80078aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ac:	2202      	movs	r2, #2
 80078ae:	61ba      	str	r2, [r7, #24]
 80078b0:	69ba      	ldr	r2, [r7, #24]
 80078b2:	fa92 f2a2 	rbit	r2, r2
 80078b6:	617a      	str	r2, [r7, #20]
  return result;
 80078b8:	697a      	ldr	r2, [r7, #20]
 80078ba:	fab2 f282 	clz	r2, r2
 80078be:	b2d2      	uxtb	r2, r2
 80078c0:	f042 0220 	orr.w	r2, r2, #32
 80078c4:	b2d2      	uxtb	r2, r2
 80078c6:	f002 021f 	and.w	r2, r2, #31
 80078ca:	2101      	movs	r1, #1
 80078cc:	fa01 f202 	lsl.w	r2, r1, r2
 80078d0:	4013      	ands	r3, r2
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d101      	bne.n	80078da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80078d6:	2301      	movs	r3, #1
 80078d8:	e079      	b.n	80079ce <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80078da:	4b1d      	ldr	r3, [pc, #116]	; (8007950 <HAL_RCC_ClockConfig+0x260>)
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	f023 0203 	bic.w	r2, r3, #3
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	491a      	ldr	r1, [pc, #104]	; (8007950 <HAL_RCC_ClockConfig+0x260>)
 80078e8:	4313      	orrs	r3, r2
 80078ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80078ec:	f7fb fcbc 	bl	8003268 <HAL_GetTick>
 80078f0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078f2:	e00a      	b.n	800790a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078f4:	f7fb fcb8 	bl	8003268 <HAL_GetTick>
 80078f8:	4602      	mov	r2, r0
 80078fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078fc:	1ad3      	subs	r3, r2, r3
 80078fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007902:	4293      	cmp	r3, r2
 8007904:	d901      	bls.n	800790a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8007906:	2303      	movs	r3, #3
 8007908:	e061      	b.n	80079ce <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800790a:	4b11      	ldr	r3, [pc, #68]	; (8007950 <HAL_RCC_ClockConfig+0x260>)
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	f003 020c 	and.w	r2, r3, #12
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	009b      	lsls	r3, r3, #2
 8007918:	429a      	cmp	r2, r3
 800791a:	d1eb      	bne.n	80078f4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800791c:	4b0b      	ldr	r3, [pc, #44]	; (800794c <HAL_RCC_ClockConfig+0x25c>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f003 0307 	and.w	r3, r3, #7
 8007924:	683a      	ldr	r2, [r7, #0]
 8007926:	429a      	cmp	r2, r3
 8007928:	d214      	bcs.n	8007954 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800792a:	4b08      	ldr	r3, [pc, #32]	; (800794c <HAL_RCC_ClockConfig+0x25c>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f023 0207 	bic.w	r2, r3, #7
 8007932:	4906      	ldr	r1, [pc, #24]	; (800794c <HAL_RCC_ClockConfig+0x25c>)
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	4313      	orrs	r3, r2
 8007938:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800793a:	4b04      	ldr	r3, [pc, #16]	; (800794c <HAL_RCC_ClockConfig+0x25c>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f003 0307 	and.w	r3, r3, #7
 8007942:	683a      	ldr	r2, [r7, #0]
 8007944:	429a      	cmp	r2, r3
 8007946:	d005      	beq.n	8007954 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	e040      	b.n	80079ce <HAL_RCC_ClockConfig+0x2de>
 800794c:	40022000 	.word	0x40022000
 8007950:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 0304 	and.w	r3, r3, #4
 800795c:	2b00      	cmp	r3, #0
 800795e:	d008      	beq.n	8007972 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007960:	4b1d      	ldr	r3, [pc, #116]	; (80079d8 <HAL_RCC_ClockConfig+0x2e8>)
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	491a      	ldr	r1, [pc, #104]	; (80079d8 <HAL_RCC_ClockConfig+0x2e8>)
 800796e:	4313      	orrs	r3, r2
 8007970:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f003 0308 	and.w	r3, r3, #8
 800797a:	2b00      	cmp	r3, #0
 800797c:	d009      	beq.n	8007992 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800797e:	4b16      	ldr	r3, [pc, #88]	; (80079d8 <HAL_RCC_ClockConfig+0x2e8>)
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	00db      	lsls	r3, r3, #3
 800798c:	4912      	ldr	r1, [pc, #72]	; (80079d8 <HAL_RCC_ClockConfig+0x2e8>)
 800798e:	4313      	orrs	r3, r2
 8007990:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8007992:	f000 f829 	bl	80079e8 <HAL_RCC_GetSysClockFreq>
 8007996:	4601      	mov	r1, r0
 8007998:	4b0f      	ldr	r3, [pc, #60]	; (80079d8 <HAL_RCC_ClockConfig+0x2e8>)
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80079a0:	22f0      	movs	r2, #240	; 0xf0
 80079a2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079a4:	693a      	ldr	r2, [r7, #16]
 80079a6:	fa92 f2a2 	rbit	r2, r2
 80079aa:	60fa      	str	r2, [r7, #12]
  return result;
 80079ac:	68fa      	ldr	r2, [r7, #12]
 80079ae:	fab2 f282 	clz	r2, r2
 80079b2:	b2d2      	uxtb	r2, r2
 80079b4:	40d3      	lsrs	r3, r2
 80079b6:	4a09      	ldr	r2, [pc, #36]	; (80079dc <HAL_RCC_ClockConfig+0x2ec>)
 80079b8:	5cd3      	ldrb	r3, [r2, r3]
 80079ba:	fa21 f303 	lsr.w	r3, r1, r3
 80079be:	4a08      	ldr	r2, [pc, #32]	; (80079e0 <HAL_RCC_ClockConfig+0x2f0>)
 80079c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80079c2:	4b08      	ldr	r3, [pc, #32]	; (80079e4 <HAL_RCC_ClockConfig+0x2f4>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4618      	mov	r0, r3
 80079c8:	f7fb fc0a 	bl	80031e0 <HAL_InitTick>
  
  return HAL_OK;
 80079cc:	2300      	movs	r3, #0
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3778      	adds	r7, #120	; 0x78
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	bf00      	nop
 80079d8:	40021000 	.word	0x40021000
 80079dc:	0800c3fc 	.word	0x0800c3fc
 80079e0:	2000001c 	.word	0x2000001c
 80079e4:	20000020 	.word	0x20000020

080079e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b08b      	sub	sp, #44	; 0x2c
 80079ec:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80079ee:	2300      	movs	r3, #0
 80079f0:	61fb      	str	r3, [r7, #28]
 80079f2:	2300      	movs	r3, #0
 80079f4:	61bb      	str	r3, [r7, #24]
 80079f6:	2300      	movs	r3, #0
 80079f8:	627b      	str	r3, [r7, #36]	; 0x24
 80079fa:	2300      	movs	r3, #0
 80079fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80079fe:	2300      	movs	r3, #0
 8007a00:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8007a02:	4b29      	ldr	r3, [pc, #164]	; (8007aa8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007a08:	69fb      	ldr	r3, [r7, #28]
 8007a0a:	f003 030c 	and.w	r3, r3, #12
 8007a0e:	2b04      	cmp	r3, #4
 8007a10:	d002      	beq.n	8007a18 <HAL_RCC_GetSysClockFreq+0x30>
 8007a12:	2b08      	cmp	r3, #8
 8007a14:	d003      	beq.n	8007a1e <HAL_RCC_GetSysClockFreq+0x36>
 8007a16:	e03c      	b.n	8007a92 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007a18:	4b24      	ldr	r3, [pc, #144]	; (8007aac <HAL_RCC_GetSysClockFreq+0xc4>)
 8007a1a:	623b      	str	r3, [r7, #32]
      break;
 8007a1c:	e03c      	b.n	8007a98 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8007a1e:	69fb      	ldr	r3, [r7, #28]
 8007a20:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8007a24:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8007a28:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a2a:	68ba      	ldr	r2, [r7, #8]
 8007a2c:	fa92 f2a2 	rbit	r2, r2
 8007a30:	607a      	str	r2, [r7, #4]
  return result;
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	fab2 f282 	clz	r2, r2
 8007a38:	b2d2      	uxtb	r2, r2
 8007a3a:	40d3      	lsrs	r3, r2
 8007a3c:	4a1c      	ldr	r2, [pc, #112]	; (8007ab0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007a3e:	5cd3      	ldrb	r3, [r2, r3]
 8007a40:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8007a42:	4b19      	ldr	r3, [pc, #100]	; (8007aa8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a46:	f003 030f 	and.w	r3, r3, #15
 8007a4a:	220f      	movs	r2, #15
 8007a4c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a4e:	693a      	ldr	r2, [r7, #16]
 8007a50:	fa92 f2a2 	rbit	r2, r2
 8007a54:	60fa      	str	r2, [r7, #12]
  return result;
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	fab2 f282 	clz	r2, r2
 8007a5c:	b2d2      	uxtb	r2, r2
 8007a5e:	40d3      	lsrs	r3, r2
 8007a60:	4a14      	ldr	r2, [pc, #80]	; (8007ab4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007a62:	5cd3      	ldrb	r3, [r2, r3]
 8007a64:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8007a66:	69fb      	ldr	r3, [r7, #28]
 8007a68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d008      	beq.n	8007a82 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007a70:	4a0e      	ldr	r2, [pc, #56]	; (8007aac <HAL_RCC_GetSysClockFreq+0xc4>)
 8007a72:	69bb      	ldr	r3, [r7, #24]
 8007a74:	fbb2 f2f3 	udiv	r2, r2, r3
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	fb02 f303 	mul.w	r3, r2, r3
 8007a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8007a80:	e004      	b.n	8007a8c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	4a0c      	ldr	r2, [pc, #48]	; (8007ab8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007a86:	fb02 f303 	mul.w	r3, r2, r3
 8007a8a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8007a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8e:	623b      	str	r3, [r7, #32]
      break;
 8007a90:	e002      	b.n	8007a98 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007a92:	4b06      	ldr	r3, [pc, #24]	; (8007aac <HAL_RCC_GetSysClockFreq+0xc4>)
 8007a94:	623b      	str	r3, [r7, #32]
      break;
 8007a96:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007a98:	6a3b      	ldr	r3, [r7, #32]
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	372c      	adds	r7, #44	; 0x2c
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	40021000 	.word	0x40021000
 8007aac:	007a1200 	.word	0x007a1200
 8007ab0:	0800c414 	.word	0x0800c414
 8007ab4:	0800c424 	.word	0x0800c424
 8007ab8:	003d0900 	.word	0x003d0900

08007abc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007abc:	b480      	push	{r7}
 8007abe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ac0:	4b03      	ldr	r3, [pc, #12]	; (8007ad0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr
 8007ace:	bf00      	nop
 8007ad0:	2000001c 	.word	0x2000001c

08007ad4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b082      	sub	sp, #8
 8007ad8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8007ada:	f7ff ffef 	bl	8007abc <HAL_RCC_GetHCLKFreq>
 8007ade:	4601      	mov	r1, r0
 8007ae0:	4b0b      	ldr	r3, [pc, #44]	; (8007b10 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007ae8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007aec:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	fa92 f2a2 	rbit	r2, r2
 8007af4:	603a      	str	r2, [r7, #0]
  return result;
 8007af6:	683a      	ldr	r2, [r7, #0]
 8007af8:	fab2 f282 	clz	r2, r2
 8007afc:	b2d2      	uxtb	r2, r2
 8007afe:	40d3      	lsrs	r3, r2
 8007b00:	4a04      	ldr	r2, [pc, #16]	; (8007b14 <HAL_RCC_GetPCLK1Freq+0x40>)
 8007b02:	5cd3      	ldrb	r3, [r2, r3]
 8007b04:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3708      	adds	r7, #8
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	40021000 	.word	0x40021000
 8007b14:	0800c40c 	.word	0x0800c40c

08007b18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8007b1e:	f7ff ffcd 	bl	8007abc <HAL_RCC_GetHCLKFreq>
 8007b22:	4601      	mov	r1, r0
 8007b24:	4b0b      	ldr	r3, [pc, #44]	; (8007b54 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8007b2c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007b30:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	fa92 f2a2 	rbit	r2, r2
 8007b38:	603a      	str	r2, [r7, #0]
  return result;
 8007b3a:	683a      	ldr	r2, [r7, #0]
 8007b3c:	fab2 f282 	clz	r2, r2
 8007b40:	b2d2      	uxtb	r2, r2
 8007b42:	40d3      	lsrs	r3, r2
 8007b44:	4a04      	ldr	r2, [pc, #16]	; (8007b58 <HAL_RCC_GetPCLK2Freq+0x40>)
 8007b46:	5cd3      	ldrb	r3, [r2, r3]
 8007b48:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3708      	adds	r7, #8
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	40021000 	.word	0x40021000
 8007b58:	0800c40c 	.word	0x0800c40c

08007b5c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b092      	sub	sp, #72	; 0x48
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007b64:	2300      	movs	r3, #0
 8007b66:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	f000 80d4 	beq.w	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b80:	4b4e      	ldr	r3, [pc, #312]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b82:	69db      	ldr	r3, [r3, #28]
 8007b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d10e      	bne.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b8c:	4b4b      	ldr	r3, [pc, #300]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b8e:	69db      	ldr	r3, [r3, #28]
 8007b90:	4a4a      	ldr	r2, [pc, #296]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b96:	61d3      	str	r3, [r2, #28]
 8007b98:	4b48      	ldr	r3, [pc, #288]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b9a:	69db      	ldr	r3, [r3, #28]
 8007b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ba0:	60bb      	str	r3, [r7, #8]
 8007ba2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007baa:	4b45      	ldr	r3, [pc, #276]	; (8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d118      	bne.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007bb6:	4b42      	ldr	r3, [pc, #264]	; (8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a41      	ldr	r2, [pc, #260]	; (8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bc0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007bc2:	f7fb fb51 	bl	8003268 <HAL_GetTick>
 8007bc6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007bc8:	e008      	b.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007bca:	f7fb fb4d 	bl	8003268 <HAL_GetTick>
 8007bce:	4602      	mov	r2, r0
 8007bd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bd2:	1ad3      	subs	r3, r2, r3
 8007bd4:	2b64      	cmp	r3, #100	; 0x64
 8007bd6:	d901      	bls.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8007bd8:	2303      	movs	r3, #3
 8007bda:	e169      	b.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007bdc:	4b38      	ldr	r3, [pc, #224]	; (8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d0f0      	beq.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007be8:	4b34      	ldr	r3, [pc, #208]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007bea:	6a1b      	ldr	r3, [r3, #32]
 8007bec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	f000 8084 	beq.w	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d07c      	beq.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007c08:	4b2c      	ldr	r3, [pc, #176]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c0a:	6a1b      	ldr	r3, [r3, #32]
 8007c0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007c16:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c1a:	fa93 f3a3 	rbit	r3, r3
 8007c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007c22:	fab3 f383 	clz	r3, r3
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	461a      	mov	r2, r3
 8007c2a:	4b26      	ldr	r3, [pc, #152]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007c2c:	4413      	add	r3, r2
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	461a      	mov	r2, r3
 8007c32:	2301      	movs	r3, #1
 8007c34:	6013      	str	r3, [r2, #0]
 8007c36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007c3a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c3e:	fa93 f3a3 	rbit	r3, r3
 8007c42:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8007c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007c46:	fab3 f383 	clz	r3, r3
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	4b1d      	ldr	r3, [pc, #116]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007c50:	4413      	add	r3, r2
 8007c52:	009b      	lsls	r3, r3, #2
 8007c54:	461a      	mov	r2, r3
 8007c56:	2300      	movs	r3, #0
 8007c58:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007c5a:	4a18      	ldr	r2, [pc, #96]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c5e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c62:	f003 0301 	and.w	r3, r3, #1
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d04b      	beq.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c6a:	f7fb fafd 	bl	8003268 <HAL_GetTick>
 8007c6e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c70:	e00a      	b.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c72:	f7fb faf9 	bl	8003268 <HAL_GetTick>
 8007c76:	4602      	mov	r2, r0
 8007c78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c7a:	1ad3      	subs	r3, r2, r3
 8007c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d901      	bls.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8007c84:	2303      	movs	r3, #3
 8007c86:	e113      	b.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8007c88:	2302      	movs	r3, #2
 8007c8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c8e:	fa93 f3a3 	rbit	r3, r3
 8007c92:	627b      	str	r3, [r7, #36]	; 0x24
 8007c94:	2302      	movs	r3, #2
 8007c96:	623b      	str	r3, [r7, #32]
 8007c98:	6a3b      	ldr	r3, [r7, #32]
 8007c9a:	fa93 f3a3 	rbit	r3, r3
 8007c9e:	61fb      	str	r3, [r7, #28]
  return result;
 8007ca0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ca2:	fab3 f383 	clz	r3, r3
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	095b      	lsrs	r3, r3, #5
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	f043 0302 	orr.w	r3, r3, #2
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	2b02      	cmp	r3, #2
 8007cb4:	d108      	bne.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8007cb6:	4b01      	ldr	r3, [pc, #4]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007cb8:	6a1b      	ldr	r3, [r3, #32]
 8007cba:	e00d      	b.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8007cbc:	40021000 	.word	0x40021000
 8007cc0:	40007000 	.word	0x40007000
 8007cc4:	10908100 	.word	0x10908100
 8007cc8:	2302      	movs	r3, #2
 8007cca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ccc:	69bb      	ldr	r3, [r7, #24]
 8007cce:	fa93 f3a3 	rbit	r3, r3
 8007cd2:	617b      	str	r3, [r7, #20]
 8007cd4:	4b78      	ldr	r3, [pc, #480]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd8:	2202      	movs	r2, #2
 8007cda:	613a      	str	r2, [r7, #16]
 8007cdc:	693a      	ldr	r2, [r7, #16]
 8007cde:	fa92 f2a2 	rbit	r2, r2
 8007ce2:	60fa      	str	r2, [r7, #12]
  return result;
 8007ce4:	68fa      	ldr	r2, [r7, #12]
 8007ce6:	fab2 f282 	clz	r2, r2
 8007cea:	b2d2      	uxtb	r2, r2
 8007cec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cf0:	b2d2      	uxtb	r2, r2
 8007cf2:	f002 021f 	and.w	r2, r2, #31
 8007cf6:	2101      	movs	r1, #1
 8007cf8:	fa01 f202 	lsl.w	r2, r1, r2
 8007cfc:	4013      	ands	r3, r2
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d0b7      	beq.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8007d02:	4b6d      	ldr	r3, [pc, #436]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007d04:	6a1b      	ldr	r3, [r3, #32]
 8007d06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	496a      	ldr	r1, [pc, #424]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007d10:	4313      	orrs	r3, r2
 8007d12:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007d14:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d105      	bne.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d1c:	4b66      	ldr	r3, [pc, #408]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007d1e:	69db      	ldr	r3, [r3, #28]
 8007d20:	4a65      	ldr	r2, [pc, #404]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007d22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d26:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f003 0301 	and.w	r3, r3, #1
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d008      	beq.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007d34:	4b60      	ldr	r3, [pc, #384]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d38:	f023 0203 	bic.w	r2, r3, #3
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	495d      	ldr	r1, [pc, #372]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007d42:	4313      	orrs	r3, r2
 8007d44:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f003 0302 	and.w	r3, r3, #2
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d008      	beq.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007d52:	4b59      	ldr	r3, [pc, #356]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d56:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	68db      	ldr	r3, [r3, #12]
 8007d5e:	4956      	ldr	r1, [pc, #344]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007d60:	4313      	orrs	r3, r2
 8007d62:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f003 0304 	and.w	r3, r3, #4
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d008      	beq.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007d70:	4b51      	ldr	r3, [pc, #324]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d74:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	691b      	ldr	r3, [r3, #16]
 8007d7c:	494e      	ldr	r1, [pc, #312]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f003 0320 	and.w	r3, r3, #32
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d008      	beq.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007d8e:	4b4a      	ldr	r3, [pc, #296]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d92:	f023 0210 	bic.w	r2, r3, #16
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	69db      	ldr	r3, [r3, #28]
 8007d9a:	4947      	ldr	r1, [pc, #284]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d008      	beq.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8007dac:	4b42      	ldr	r3, [pc, #264]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db8:	493f      	ldr	r1, [pc, #252]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d008      	beq.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007dca:	4b3b      	ldr	r3, [pc, #236]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dce:	f023 0220 	bic.w	r2, r3, #32
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6a1b      	ldr	r3, [r3, #32]
 8007dd6:	4938      	ldr	r1, [pc, #224]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f003 0308 	and.w	r3, r3, #8
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d008      	beq.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007de8:	4b33      	ldr	r3, [pc, #204]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	695b      	ldr	r3, [r3, #20]
 8007df4:	4930      	ldr	r1, [pc, #192]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007df6:	4313      	orrs	r3, r2
 8007df8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f003 0310 	and.w	r3, r3, #16
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d008      	beq.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007e06:	4b2c      	ldr	r3, [pc, #176]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e0a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	699b      	ldr	r3, [r3, #24]
 8007e12:	4929      	ldr	r1, [pc, #164]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e14:	4313      	orrs	r3, r2
 8007e16:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d008      	beq.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007e24:	4b24      	ldr	r3, [pc, #144]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e30:	4921      	ldr	r1, [pc, #132]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e32:	4313      	orrs	r3, r2
 8007e34:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d008      	beq.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007e42:	4b1d      	ldr	r3, [pc, #116]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e46:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4e:	491a      	ldr	r1, [pc, #104]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e50:	4313      	orrs	r3, r2
 8007e52:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d008      	beq.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8007e60:	4b15      	ldr	r3, [pc, #84]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e64:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e6c:	4912      	ldr	r1, [pc, #72]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d008      	beq.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007e7e:	4b0e      	ldr	r3, [pc, #56]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e8a:	490b      	ldr	r1, [pc, #44]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d008      	beq.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8007e9c:	4b06      	ldr	r3, [pc, #24]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ea0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ea8:	4903      	ldr	r1, [pc, #12]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8007eae:	2300      	movs	r3, #0
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3748      	adds	r7, #72	; 0x48
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	40021000 	.word	0x40021000

08007ebc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d101      	bne.n	8007ed2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e073      	b.n	8007fba <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	7f5b      	ldrb	r3, [r3, #29]
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d105      	bne.n	8007ee8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f7fa fdd2 	bl	8002a8c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2202      	movs	r2, #2
 8007eec:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	f003 0310 	and.w	r3, r3, #16
 8007ef8:	2b10      	cmp	r3, #16
 8007efa:	d055      	beq.n	8007fa8 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	22ca      	movs	r2, #202	; 0xca
 8007f02:	625a      	str	r2, [r3, #36]	; 0x24
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	2253      	movs	r2, #83	; 0x53
 8007f0a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 fa49 	bl	80083a4 <RTC_EnterInitMode>
 8007f12:	4603      	mov	r3, r0
 8007f14:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8007f16:	7bfb      	ldrb	r3, [r7, #15]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d12c      	bne.n	8007f76 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	6812      	ldr	r2, [r2, #0]
 8007f26:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007f2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f2e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	6899      	ldr	r1, [r3, #8]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	685a      	ldr	r2, [r3, #4]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	691b      	ldr	r3, [r3, #16]
 8007f3e:	431a      	orrs	r2, r3
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	695b      	ldr	r3, [r3, #20]
 8007f44:	431a      	orrs	r2, r3
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	430a      	orrs	r2, r1
 8007f4c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	68d2      	ldr	r2, [r2, #12]
 8007f56:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	6919      	ldr	r1, [r3, #16]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	041a      	lsls	r2, r3, #16
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	430a      	orrs	r2, r1
 8007f6a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 fa50 	bl	8008412 <RTC_ExitInitMode>
 8007f72:	4603      	mov	r3, r0
 8007f74:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007f76:	7bfb      	ldrb	r3, [r7, #15]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d110      	bne.n	8007f9e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007f8a:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	699a      	ldr	r2, [r3, #24]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	430a      	orrs	r2, r1
 8007f9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	22ff      	movs	r2, #255	; 0xff
 8007fa4:	625a      	str	r2, [r3, #36]	; 0x24
 8007fa6:	e001      	b.n	8007fac <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8007fac:	7bfb      	ldrb	r3, [r7, #15]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d102      	bne.n	8007fb8 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8007fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3710      	adds	r7, #16
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}

08007fc2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007fc2:	b590      	push	{r4, r7, lr}
 8007fc4:	b087      	sub	sp, #28
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	60f8      	str	r0, [r7, #12]
 8007fca:	60b9      	str	r1, [r7, #8]
 8007fcc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	7f1b      	ldrb	r3, [r3, #28]
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d101      	bne.n	8007fde <HAL_RTC_SetTime+0x1c>
 8007fda:	2302      	movs	r3, #2
 8007fdc:	e087      	b.n	80080ee <HAL_RTC_SetTime+0x12c>
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2202      	movs	r2, #2
 8007fe8:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d126      	bne.n	800803e <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d102      	bne.n	8008004 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	2200      	movs	r2, #0
 8008002:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	4618      	mov	r0, r3
 800800a:	f000 fa27 	bl	800845c <RTC_ByteToBcd2>
 800800e:	4603      	mov	r3, r0
 8008010:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	785b      	ldrb	r3, [r3, #1]
 8008016:	4618      	mov	r0, r3
 8008018:	f000 fa20 	bl	800845c <RTC_ByteToBcd2>
 800801c:	4603      	mov	r3, r0
 800801e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008020:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	789b      	ldrb	r3, [r3, #2]
 8008026:	4618      	mov	r0, r3
 8008028:	f000 fa18 	bl	800845c <RTC_ByteToBcd2>
 800802c:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800802e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	78db      	ldrb	r3, [r3, #3]
 8008036:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008038:	4313      	orrs	r3, r2
 800803a:	617b      	str	r3, [r7, #20]
 800803c:	e018      	b.n	8008070 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008048:	2b00      	cmp	r3, #0
 800804a:	d102      	bne.n	8008052 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	2200      	movs	r2, #0
 8008050:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	785b      	ldrb	r3, [r3, #1]
 800805c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800805e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8008060:	68ba      	ldr	r2, [r7, #8]
 8008062:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008064:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	78db      	ldrb	r3, [r3, #3]
 800806a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800806c:	4313      	orrs	r3, r2
 800806e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	22ca      	movs	r2, #202	; 0xca
 8008076:	625a      	str	r2, [r3, #36]	; 0x24
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	2253      	movs	r2, #83	; 0x53
 800807e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008080:	68f8      	ldr	r0, [r7, #12]
 8008082:	f000 f98f 	bl	80083a4 <RTC_EnterInitMode>
 8008086:	4603      	mov	r3, r0
 8008088:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800808a:	7cfb      	ldrb	r3, [r7, #19]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d120      	bne.n	80080d2 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800809a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800809e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	689a      	ldr	r2, [r3, #8]
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80080ae:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	6899      	ldr	r1, [r3, #8]
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	68da      	ldr	r2, [r3, #12]
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	691b      	ldr	r3, [r3, #16]
 80080be:	431a      	orrs	r2, r3
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	430a      	orrs	r2, r1
 80080c6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80080c8:	68f8      	ldr	r0, [r7, #12]
 80080ca:	f000 f9a2 	bl	8008412 <RTC_ExitInitMode>
 80080ce:	4603      	mov	r3, r0
 80080d0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80080d2:	7cfb      	ldrb	r3, [r7, #19]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d102      	bne.n	80080de <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2201      	movs	r2, #1
 80080dc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	22ff      	movs	r2, #255	; 0xff
 80080e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2200      	movs	r2, #0
 80080ea:	771a      	strb	r2, [r3, #28]

  return status;
 80080ec:	7cfb      	ldrb	r3, [r7, #19]
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	371c      	adds	r7, #28
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd90      	pop	{r4, r7, pc}

080080f6 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80080f6:	b580      	push	{r7, lr}
 80080f8:	b086      	sub	sp, #24
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	60f8      	str	r0, [r7, #12]
 80080fe:	60b9      	str	r1, [r7, #8]
 8008100:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008102:	2300      	movs	r3, #0
 8008104:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	691b      	ldr	r3, [r3, #16]
 8008116:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008128:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800812c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	0c1b      	lsrs	r3, r3, #16
 8008132:	b2db      	uxtb	r3, r3
 8008134:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008138:	b2da      	uxtb	r2, r3
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	0a1b      	lsrs	r3, r3, #8
 8008142:	b2db      	uxtb	r3, r3
 8008144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008148:	b2da      	uxtb	r2, r3
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	b2db      	uxtb	r3, r3
 8008152:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008156:	b2da      	uxtb	r2, r3
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	0d9b      	lsrs	r3, r3, #22
 8008160:	b2db      	uxtb	r3, r3
 8008162:	f003 0301 	and.w	r3, r3, #1
 8008166:	b2da      	uxtb	r2, r3
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d11a      	bne.n	80081a8 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	4618      	mov	r0, r3
 8008178:	f000 f98e 	bl	8008498 <RTC_Bcd2ToByte>
 800817c:	4603      	mov	r3, r0
 800817e:	461a      	mov	r2, r3
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	785b      	ldrb	r3, [r3, #1]
 8008188:	4618      	mov	r0, r3
 800818a:	f000 f985 	bl	8008498 <RTC_Bcd2ToByte>
 800818e:	4603      	mov	r3, r0
 8008190:	461a      	mov	r2, r3
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	789b      	ldrb	r3, [r3, #2]
 800819a:	4618      	mov	r0, r3
 800819c:	f000 f97c 	bl	8008498 <RTC_Bcd2ToByte>
 80081a0:	4603      	mov	r3, r0
 80081a2:	461a      	mov	r2, r3
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80081a8:	2300      	movs	r3, #0
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3718      	adds	r7, #24
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80081b2:	b590      	push	{r4, r7, lr}
 80081b4:	b087      	sub	sp, #28
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	60f8      	str	r0, [r7, #12]
 80081ba:	60b9      	str	r1, [r7, #8]
 80081bc:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80081be:	2300      	movs	r3, #0
 80081c0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	7f1b      	ldrb	r3, [r3, #28]
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d101      	bne.n	80081ce <HAL_RTC_SetDate+0x1c>
 80081ca:	2302      	movs	r3, #2
 80081cc:	e071      	b.n	80082b2 <HAL_RTC_SetDate+0x100>
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2201      	movs	r2, #1
 80081d2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2202      	movs	r2, #2
 80081d8:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d10e      	bne.n	80081fe <HAL_RTC_SetDate+0x4c>
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	785b      	ldrb	r3, [r3, #1]
 80081e4:	f003 0310 	and.w	r3, r3, #16
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d008      	beq.n	80081fe <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	785b      	ldrb	r3, [r3, #1]
 80081f0:	f023 0310 	bic.w	r3, r3, #16
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	330a      	adds	r3, #10
 80081f8:	b2da      	uxtb	r2, r3
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d11c      	bne.n	800823e <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	78db      	ldrb	r3, [r3, #3]
 8008208:	4618      	mov	r0, r3
 800820a:	f000 f927 	bl	800845c <RTC_ByteToBcd2>
 800820e:	4603      	mov	r3, r0
 8008210:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	785b      	ldrb	r3, [r3, #1]
 8008216:	4618      	mov	r0, r3
 8008218:	f000 f920 	bl	800845c <RTC_ByteToBcd2>
 800821c:	4603      	mov	r3, r0
 800821e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008220:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	789b      	ldrb	r3, [r3, #2]
 8008226:	4618      	mov	r0, r3
 8008228:	f000 f918 	bl	800845c <RTC_ByteToBcd2>
 800822c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800822e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008238:	4313      	orrs	r3, r2
 800823a:	617b      	str	r3, [r7, #20]
 800823c:	e00e      	b.n	800825c <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	78db      	ldrb	r3, [r3, #3]
 8008242:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	785b      	ldrb	r3, [r3, #1]
 8008248:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800824a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800824c:	68ba      	ldr	r2, [r7, #8]
 800824e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008250:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008258:	4313      	orrs	r3, r2
 800825a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	22ca      	movs	r2, #202	; 0xca
 8008262:	625a      	str	r2, [r3, #36]	; 0x24
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	2253      	movs	r2, #83	; 0x53
 800826a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800826c:	68f8      	ldr	r0, [r7, #12]
 800826e:	f000 f899 	bl	80083a4 <RTC_EnterInitMode>
 8008272:	4603      	mov	r3, r0
 8008274:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008276:	7cfb      	ldrb	r3, [r7, #19]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d10c      	bne.n	8008296 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008286:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800828a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800828c:	68f8      	ldr	r0, [r7, #12]
 800828e:	f000 f8c0 	bl	8008412 <RTC_ExitInitMode>
 8008292:	4603      	mov	r3, r0
 8008294:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008296:	7cfb      	ldrb	r3, [r7, #19]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d102      	bne.n	80082a2 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2201      	movs	r2, #1
 80082a0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	22ff      	movs	r2, #255	; 0xff
 80082a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2200      	movs	r2, #0
 80082ae:	771a      	strb	r2, [r3, #28]

  return status;
 80082b0:	7cfb      	ldrb	r3, [r7, #19]
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	371c      	adds	r7, #28
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd90      	pop	{r4, r7, pc}

080082ba <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b086      	sub	sp, #24
 80082be:	af00      	add	r7, sp, #0
 80082c0:	60f8      	str	r0, [r7, #12]
 80082c2:	60b9      	str	r1, [r7, #8]
 80082c4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80082c6:	2300      	movs	r3, #0
 80082c8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80082d4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80082d8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	0c1b      	lsrs	r3, r3, #16
 80082de:	b2da      	uxtb	r2, r3
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	0a1b      	lsrs	r3, r3, #8
 80082e8:	b2db      	uxtb	r3, r3
 80082ea:	f003 031f 	and.w	r3, r3, #31
 80082ee:	b2da      	uxtb	r2, r3
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082fc:	b2da      	uxtb	r2, r3
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	0b5b      	lsrs	r3, r3, #13
 8008306:	b2db      	uxtb	r3, r3
 8008308:	f003 0307 	and.w	r3, r3, #7
 800830c:	b2da      	uxtb	r2, r3
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d11a      	bne.n	800834e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	78db      	ldrb	r3, [r3, #3]
 800831c:	4618      	mov	r0, r3
 800831e:	f000 f8bb 	bl	8008498 <RTC_Bcd2ToByte>
 8008322:	4603      	mov	r3, r0
 8008324:	461a      	mov	r2, r3
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	785b      	ldrb	r3, [r3, #1]
 800832e:	4618      	mov	r0, r3
 8008330:	f000 f8b2 	bl	8008498 <RTC_Bcd2ToByte>
 8008334:	4603      	mov	r3, r0
 8008336:	461a      	mov	r2, r3
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	789b      	ldrb	r3, [r3, #2]
 8008340:	4618      	mov	r0, r3
 8008342:	f000 f8a9 	bl	8008498 <RTC_Bcd2ToByte>
 8008346:	4603      	mov	r3, r0
 8008348:	461a      	mov	r2, r3
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800834e:	2300      	movs	r3, #0
}
 8008350:	4618      	mov	r0, r3
 8008352:	3718      	adds	r7, #24
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008360:	2300      	movs	r3, #0
 8008362:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a0d      	ldr	r2, [pc, #52]	; (80083a0 <HAL_RTC_WaitForSynchro+0x48>)
 800836a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800836c:	f7fa ff7c 	bl	8003268 <HAL_GetTick>
 8008370:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008372:	e009      	b.n	8008388 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008374:	f7fa ff78 	bl	8003268 <HAL_GetTick>
 8008378:	4602      	mov	r2, r0
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	1ad3      	subs	r3, r2, r3
 800837e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008382:	d901      	bls.n	8008388 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8008384:	2303      	movs	r3, #3
 8008386:	e007      	b.n	8008398 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	68db      	ldr	r3, [r3, #12]
 800838e:	f003 0320 	and.w	r3, r3, #32
 8008392:	2b00      	cmp	r3, #0
 8008394:	d0ee      	beq.n	8008374 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8008396:	2300      	movs	r3, #0
}
 8008398:	4618      	mov	r0, r3
 800839a:	3710      	adds	r7, #16
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}
 80083a0:	0001ff5f 	.word	0x0001ff5f

080083a4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b084      	sub	sp, #16
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80083ac:	2300      	movs	r3, #0
 80083ae:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80083b0:	2300      	movs	r3, #0
 80083b2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	68db      	ldr	r3, [r3, #12]
 80083ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d122      	bne.n	8008408 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	68da      	ldr	r2, [r3, #12]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80083d0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80083d2:	f7fa ff49 	bl	8003268 <HAL_GetTick>
 80083d6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80083d8:	e00c      	b.n	80083f4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80083da:	f7fa ff45 	bl	8003268 <HAL_GetTick>
 80083de:	4602      	mov	r2, r0
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	1ad3      	subs	r3, r2, r3
 80083e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80083e8:	d904      	bls.n	80083f4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2204      	movs	r2, #4
 80083ee:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80083f0:	2301      	movs	r3, #1
 80083f2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	68db      	ldr	r3, [r3, #12]
 80083fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d102      	bne.n	8008408 <RTC_EnterInitMode+0x64>
 8008402:	7bfb      	ldrb	r3, [r7, #15]
 8008404:	2b01      	cmp	r3, #1
 8008406:	d1e8      	bne.n	80083da <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8008408:	7bfb      	ldrb	r3, [r7, #15]
}
 800840a:	4618      	mov	r0, r3
 800840c:	3710      	adds	r7, #16
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}

08008412 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008412:	b580      	push	{r7, lr}
 8008414:	b084      	sub	sp, #16
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800841a:	2300      	movs	r3, #0
 800841c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	68da      	ldr	r2, [r3, #12]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800842c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	689b      	ldr	r3, [r3, #8]
 8008434:	f003 0320 	and.w	r3, r3, #32
 8008438:	2b00      	cmp	r3, #0
 800843a:	d10a      	bne.n	8008452 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f7ff ff8b 	bl	8008358 <HAL_RTC_WaitForSynchro>
 8008442:	4603      	mov	r3, r0
 8008444:	2b00      	cmp	r3, #0
 8008446:	d004      	beq.n	8008452 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2204      	movs	r2, #4
 800844c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008452:	7bfb      	ldrb	r3, [r7, #15]
}
 8008454:	4618      	mov	r0, r3
 8008456:	3710      	adds	r7, #16
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800845c:	b480      	push	{r7}
 800845e:	b085      	sub	sp, #20
 8008460:	af00      	add	r7, sp, #0
 8008462:	4603      	mov	r3, r0
 8008464:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008466:	2300      	movs	r3, #0
 8008468:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800846a:	e005      	b.n	8008478 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	3301      	adds	r3, #1
 8008470:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8008472:	79fb      	ldrb	r3, [r7, #7]
 8008474:	3b0a      	subs	r3, #10
 8008476:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8008478:	79fb      	ldrb	r3, [r7, #7]
 800847a:	2b09      	cmp	r3, #9
 800847c:	d8f6      	bhi.n	800846c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	b2db      	uxtb	r3, r3
 8008482:	011b      	lsls	r3, r3, #4
 8008484:	b2da      	uxtb	r2, r3
 8008486:	79fb      	ldrb	r3, [r7, #7]
 8008488:	4313      	orrs	r3, r2
 800848a:	b2db      	uxtb	r3, r3
}
 800848c:	4618      	mov	r0, r3
 800848e:	3714      	adds	r7, #20
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr

08008498 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8008498:	b480      	push	{r7}
 800849a:	b085      	sub	sp, #20
 800849c:	af00      	add	r7, sp, #0
 800849e:	4603      	mov	r3, r0
 80084a0:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 80084a2:	2300      	movs	r3, #0
 80084a4:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80084a6:	79fb      	ldrb	r3, [r7, #7]
 80084a8:	091b      	lsrs	r3, r3, #4
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	461a      	mov	r2, r3
 80084ae:	4613      	mov	r3, r2
 80084b0:	009b      	lsls	r3, r3, #2
 80084b2:	4413      	add	r3, r2
 80084b4:	005b      	lsls	r3, r3, #1
 80084b6:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	b2da      	uxtb	r2, r3
 80084bc:	79fb      	ldrb	r3, [r7, #7]
 80084be:	f003 030f 	and.w	r3, r3, #15
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	4413      	add	r3, r2
 80084c6:	b2db      	uxtb	r3, r3
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3714      	adds	r7, #20
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr

080084d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b082      	sub	sp, #8
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d101      	bne.n	80084e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80084e2:	2301      	movs	r3, #1
 80084e4:	e049      	b.n	800857a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d106      	bne.n	8008500 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2200      	movs	r2, #0
 80084f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f7fa faec 	bl	8002ad8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2202      	movs	r2, #2
 8008504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	3304      	adds	r3, #4
 8008510:	4619      	mov	r1, r3
 8008512:	4610      	mov	r0, r2
 8008514:	f001 f866 	bl	80095e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2201      	movs	r2, #1
 800851c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2201      	movs	r2, #1
 8008524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2201      	movs	r2, #1
 800852c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2201      	movs	r2, #1
 8008534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2201      	movs	r2, #1
 800853c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2201      	movs	r2, #1
 8008544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2201      	movs	r2, #1
 800854c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2201      	movs	r2, #1
 8008554:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2201      	movs	r2, #1
 800855c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2201      	movs	r2, #1
 8008564:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2201      	movs	r2, #1
 800856c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2201      	movs	r2, #1
 8008574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008578:	2300      	movs	r3, #0
}
 800857a:	4618      	mov	r0, r3
 800857c:	3708      	adds	r7, #8
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
	...

08008584 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008584:	b480      	push	{r7}
 8008586:	b085      	sub	sp, #20
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008592:	b2db      	uxtb	r3, r3
 8008594:	2b01      	cmp	r3, #1
 8008596:	d001      	beq.n	800859c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008598:	2301      	movs	r3, #1
 800859a:	e04a      	b.n	8008632 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2202      	movs	r2, #2
 80085a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	68da      	ldr	r2, [r3, #12]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f042 0201 	orr.w	r2, r2, #1
 80085b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a21      	ldr	r2, [pc, #132]	; (8008640 <HAL_TIM_Base_Start_IT+0xbc>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d018      	beq.n	80085f0 <HAL_TIM_Base_Start_IT+0x6c>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085c6:	d013      	beq.n	80085f0 <HAL_TIM_Base_Start_IT+0x6c>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a1d      	ldr	r2, [pc, #116]	; (8008644 <HAL_TIM_Base_Start_IT+0xc0>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d00e      	beq.n	80085f0 <HAL_TIM_Base_Start_IT+0x6c>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a1c      	ldr	r2, [pc, #112]	; (8008648 <HAL_TIM_Base_Start_IT+0xc4>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d009      	beq.n	80085f0 <HAL_TIM_Base_Start_IT+0x6c>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a1a      	ldr	r2, [pc, #104]	; (800864c <HAL_TIM_Base_Start_IT+0xc8>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d004      	beq.n	80085f0 <HAL_TIM_Base_Start_IT+0x6c>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a19      	ldr	r2, [pc, #100]	; (8008650 <HAL_TIM_Base_Start_IT+0xcc>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d115      	bne.n	800861c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	689a      	ldr	r2, [r3, #8]
 80085f6:	4b17      	ldr	r3, [pc, #92]	; (8008654 <HAL_TIM_Base_Start_IT+0xd0>)
 80085f8:	4013      	ands	r3, r2
 80085fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2b06      	cmp	r3, #6
 8008600:	d015      	beq.n	800862e <HAL_TIM_Base_Start_IT+0xaa>
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008608:	d011      	beq.n	800862e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	681a      	ldr	r2, [r3, #0]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f042 0201 	orr.w	r2, r2, #1
 8008618:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800861a:	e008      	b.n	800862e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	681a      	ldr	r2, [r3, #0]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f042 0201 	orr.w	r2, r2, #1
 800862a:	601a      	str	r2, [r3, #0]
 800862c:	e000      	b.n	8008630 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800862e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008630:	2300      	movs	r3, #0
}
 8008632:	4618      	mov	r0, r3
 8008634:	3714      	adds	r7, #20
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr
 800863e:	bf00      	nop
 8008640:	40012c00 	.word	0x40012c00
 8008644:	40000400 	.word	0x40000400
 8008648:	40000800 	.word	0x40000800
 800864c:	40013400 	.word	0x40013400
 8008650:	40014000 	.word	0x40014000
 8008654:	00010007 	.word	0x00010007

08008658 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008658:	b480      	push	{r7}
 800865a:	b083      	sub	sp, #12
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	68da      	ldr	r2, [r3, #12]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f022 0201 	bic.w	r2, r2, #1
 800866e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	6a1a      	ldr	r2, [r3, #32]
 8008676:	f241 1311 	movw	r3, #4369	; 0x1111
 800867a:	4013      	ands	r3, r2
 800867c:	2b00      	cmp	r3, #0
 800867e:	d10f      	bne.n	80086a0 <HAL_TIM_Base_Stop_IT+0x48>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	6a1a      	ldr	r2, [r3, #32]
 8008686:	f240 4344 	movw	r3, #1092	; 0x444
 800868a:	4013      	ands	r3, r2
 800868c:	2b00      	cmp	r3, #0
 800868e:	d107      	bne.n	80086a0 <HAL_TIM_Base_Stop_IT+0x48>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f022 0201 	bic.w	r2, r2, #1
 800869e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2201      	movs	r2, #1
 80086a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80086a8:	2300      	movs	r3, #0
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	370c      	adds	r7, #12
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr

080086b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80086b6:	b580      	push	{r7, lr}
 80086b8:	b082      	sub	sp, #8
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d101      	bne.n	80086c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80086c4:	2301      	movs	r3, #1
 80086c6:	e049      	b.n	800875c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086ce:	b2db      	uxtb	r3, r3
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d106      	bne.n	80086e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2200      	movs	r2, #0
 80086d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 f841 	bl	8008764 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2202      	movs	r2, #2
 80086e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681a      	ldr	r2, [r3, #0]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	3304      	adds	r3, #4
 80086f2:	4619      	mov	r1, r3
 80086f4:	4610      	mov	r0, r2
 80086f6:	f000 ff75 	bl	80095e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2201      	movs	r2, #1
 80086fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2201      	movs	r2, #1
 8008706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2201      	movs	r2, #1
 800870e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2201      	movs	r2, #1
 8008716:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2201      	movs	r2, #1
 800871e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2201      	movs	r2, #1
 8008726:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2201      	movs	r2, #1
 800872e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2201      	movs	r2, #1
 8008736:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2201      	movs	r2, #1
 800873e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2201      	movs	r2, #1
 8008746:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2201      	movs	r2, #1
 800874e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2201      	movs	r2, #1
 8008756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800875a:	2300      	movs	r3, #0
}
 800875c:	4618      	mov	r0, r3
 800875e:	3708      	adds	r7, #8
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008764:	b480      	push	{r7}
 8008766:	b083      	sub	sp, #12
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800876c:	bf00      	nop
 800876e:	370c      	adds	r7, #12
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b084      	sub	sp, #16
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d109      	bne.n	800879c <HAL_TIM_PWM_Start+0x24>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800878e:	b2db      	uxtb	r3, r3
 8008790:	2b01      	cmp	r3, #1
 8008792:	bf14      	ite	ne
 8008794:	2301      	movne	r3, #1
 8008796:	2300      	moveq	r3, #0
 8008798:	b2db      	uxtb	r3, r3
 800879a:	e03c      	b.n	8008816 <HAL_TIM_PWM_Start+0x9e>
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	2b04      	cmp	r3, #4
 80087a0:	d109      	bne.n	80087b6 <HAL_TIM_PWM_Start+0x3e>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80087a8:	b2db      	uxtb	r3, r3
 80087aa:	2b01      	cmp	r3, #1
 80087ac:	bf14      	ite	ne
 80087ae:	2301      	movne	r3, #1
 80087b0:	2300      	moveq	r3, #0
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	e02f      	b.n	8008816 <HAL_TIM_PWM_Start+0x9e>
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	2b08      	cmp	r3, #8
 80087ba:	d109      	bne.n	80087d0 <HAL_TIM_PWM_Start+0x58>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80087c2:	b2db      	uxtb	r3, r3
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	bf14      	ite	ne
 80087c8:	2301      	movne	r3, #1
 80087ca:	2300      	moveq	r3, #0
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	e022      	b.n	8008816 <HAL_TIM_PWM_Start+0x9e>
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	2b0c      	cmp	r3, #12
 80087d4:	d109      	bne.n	80087ea <HAL_TIM_PWM_Start+0x72>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	2b01      	cmp	r3, #1
 80087e0:	bf14      	ite	ne
 80087e2:	2301      	movne	r3, #1
 80087e4:	2300      	moveq	r3, #0
 80087e6:	b2db      	uxtb	r3, r3
 80087e8:	e015      	b.n	8008816 <HAL_TIM_PWM_Start+0x9e>
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	2b10      	cmp	r3, #16
 80087ee:	d109      	bne.n	8008804 <HAL_TIM_PWM_Start+0x8c>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80087f6:	b2db      	uxtb	r3, r3
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	bf14      	ite	ne
 80087fc:	2301      	movne	r3, #1
 80087fe:	2300      	moveq	r3, #0
 8008800:	b2db      	uxtb	r3, r3
 8008802:	e008      	b.n	8008816 <HAL_TIM_PWM_Start+0x9e>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800880a:	b2db      	uxtb	r3, r3
 800880c:	2b01      	cmp	r3, #1
 800880e:	bf14      	ite	ne
 8008810:	2301      	movne	r3, #1
 8008812:	2300      	moveq	r3, #0
 8008814:	b2db      	uxtb	r3, r3
 8008816:	2b00      	cmp	r3, #0
 8008818:	d001      	beq.n	800881e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800881a:	2301      	movs	r3, #1
 800881c:	e097      	b.n	800894e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d104      	bne.n	800882e <HAL_TIM_PWM_Start+0xb6>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2202      	movs	r2, #2
 8008828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800882c:	e023      	b.n	8008876 <HAL_TIM_PWM_Start+0xfe>
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	2b04      	cmp	r3, #4
 8008832:	d104      	bne.n	800883e <HAL_TIM_PWM_Start+0xc6>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2202      	movs	r2, #2
 8008838:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800883c:	e01b      	b.n	8008876 <HAL_TIM_PWM_Start+0xfe>
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	2b08      	cmp	r3, #8
 8008842:	d104      	bne.n	800884e <HAL_TIM_PWM_Start+0xd6>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2202      	movs	r2, #2
 8008848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800884c:	e013      	b.n	8008876 <HAL_TIM_PWM_Start+0xfe>
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	2b0c      	cmp	r3, #12
 8008852:	d104      	bne.n	800885e <HAL_TIM_PWM_Start+0xe6>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2202      	movs	r2, #2
 8008858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800885c:	e00b      	b.n	8008876 <HAL_TIM_PWM_Start+0xfe>
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	2b10      	cmp	r3, #16
 8008862:	d104      	bne.n	800886e <HAL_TIM_PWM_Start+0xf6>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2202      	movs	r2, #2
 8008868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800886c:	e003      	b.n	8008876 <HAL_TIM_PWM_Start+0xfe>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2202      	movs	r2, #2
 8008872:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	2201      	movs	r2, #1
 800887c:	6839      	ldr	r1, [r7, #0]
 800887e:	4618      	mov	r0, r3
 8008880:	f001 fbce 	bl	800a020 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a33      	ldr	r2, [pc, #204]	; (8008958 <HAL_TIM_PWM_Start+0x1e0>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d013      	beq.n	80088b6 <HAL_TIM_PWM_Start+0x13e>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a32      	ldr	r2, [pc, #200]	; (800895c <HAL_TIM_PWM_Start+0x1e4>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d00e      	beq.n	80088b6 <HAL_TIM_PWM_Start+0x13e>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a30      	ldr	r2, [pc, #192]	; (8008960 <HAL_TIM_PWM_Start+0x1e8>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d009      	beq.n	80088b6 <HAL_TIM_PWM_Start+0x13e>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a2f      	ldr	r2, [pc, #188]	; (8008964 <HAL_TIM_PWM_Start+0x1ec>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d004      	beq.n	80088b6 <HAL_TIM_PWM_Start+0x13e>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a2d      	ldr	r2, [pc, #180]	; (8008968 <HAL_TIM_PWM_Start+0x1f0>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d101      	bne.n	80088ba <HAL_TIM_PWM_Start+0x142>
 80088b6:	2301      	movs	r3, #1
 80088b8:	e000      	b.n	80088bc <HAL_TIM_PWM_Start+0x144>
 80088ba:	2300      	movs	r3, #0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d007      	beq.n	80088d0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80088ce:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a20      	ldr	r2, [pc, #128]	; (8008958 <HAL_TIM_PWM_Start+0x1e0>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d018      	beq.n	800890c <HAL_TIM_PWM_Start+0x194>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088e2:	d013      	beq.n	800890c <HAL_TIM_PWM_Start+0x194>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a20      	ldr	r2, [pc, #128]	; (800896c <HAL_TIM_PWM_Start+0x1f4>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d00e      	beq.n	800890c <HAL_TIM_PWM_Start+0x194>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a1f      	ldr	r2, [pc, #124]	; (8008970 <HAL_TIM_PWM_Start+0x1f8>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d009      	beq.n	800890c <HAL_TIM_PWM_Start+0x194>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a17      	ldr	r2, [pc, #92]	; (800895c <HAL_TIM_PWM_Start+0x1e4>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d004      	beq.n	800890c <HAL_TIM_PWM_Start+0x194>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4a16      	ldr	r2, [pc, #88]	; (8008960 <HAL_TIM_PWM_Start+0x1e8>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d115      	bne.n	8008938 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	689a      	ldr	r2, [r3, #8]
 8008912:	4b18      	ldr	r3, [pc, #96]	; (8008974 <HAL_TIM_PWM_Start+0x1fc>)
 8008914:	4013      	ands	r3, r2
 8008916:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2b06      	cmp	r3, #6
 800891c:	d015      	beq.n	800894a <HAL_TIM_PWM_Start+0x1d2>
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008924:	d011      	beq.n	800894a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f042 0201 	orr.w	r2, r2, #1
 8008934:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008936:	e008      	b.n	800894a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	681a      	ldr	r2, [r3, #0]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f042 0201 	orr.w	r2, r2, #1
 8008946:	601a      	str	r2, [r3, #0]
 8008948:	e000      	b.n	800894c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800894a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800894c:	2300      	movs	r3, #0
}
 800894e:	4618      	mov	r0, r3
 8008950:	3710      	adds	r7, #16
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
 8008956:	bf00      	nop
 8008958:	40012c00 	.word	0x40012c00
 800895c:	40013400 	.word	0x40013400
 8008960:	40014000 	.word	0x40014000
 8008964:	40014400 	.word	0x40014400
 8008968:	40014800 	.word	0x40014800
 800896c:	40000400 	.word	0x40000400
 8008970:	40000800 	.word	0x40000800
 8008974:	00010007 	.word	0x00010007

08008978 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b082      	sub	sp, #8
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	2200      	movs	r2, #0
 8008988:	6839      	ldr	r1, [r7, #0]
 800898a:	4618      	mov	r0, r3
 800898c:	f001 fb48 	bl	800a020 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a3e      	ldr	r2, [pc, #248]	; (8008a90 <HAL_TIM_PWM_Stop+0x118>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d013      	beq.n	80089c2 <HAL_TIM_PWM_Stop+0x4a>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a3d      	ldr	r2, [pc, #244]	; (8008a94 <HAL_TIM_PWM_Stop+0x11c>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d00e      	beq.n	80089c2 <HAL_TIM_PWM_Stop+0x4a>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a3b      	ldr	r2, [pc, #236]	; (8008a98 <HAL_TIM_PWM_Stop+0x120>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d009      	beq.n	80089c2 <HAL_TIM_PWM_Stop+0x4a>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a3a      	ldr	r2, [pc, #232]	; (8008a9c <HAL_TIM_PWM_Stop+0x124>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d004      	beq.n	80089c2 <HAL_TIM_PWM_Stop+0x4a>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a38      	ldr	r2, [pc, #224]	; (8008aa0 <HAL_TIM_PWM_Stop+0x128>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d101      	bne.n	80089c6 <HAL_TIM_PWM_Stop+0x4e>
 80089c2:	2301      	movs	r3, #1
 80089c4:	e000      	b.n	80089c8 <HAL_TIM_PWM_Stop+0x50>
 80089c6:	2300      	movs	r3, #0
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d017      	beq.n	80089fc <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	6a1a      	ldr	r2, [r3, #32]
 80089d2:	f241 1311 	movw	r3, #4369	; 0x1111
 80089d6:	4013      	ands	r3, r2
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d10f      	bne.n	80089fc <HAL_TIM_PWM_Stop+0x84>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	6a1a      	ldr	r2, [r3, #32]
 80089e2:	f240 4344 	movw	r3, #1092	; 0x444
 80089e6:	4013      	ands	r3, r2
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d107      	bne.n	80089fc <HAL_TIM_PWM_Stop+0x84>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80089fa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	6a1a      	ldr	r2, [r3, #32]
 8008a02:	f241 1311 	movw	r3, #4369	; 0x1111
 8008a06:	4013      	ands	r3, r2
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d10f      	bne.n	8008a2c <HAL_TIM_PWM_Stop+0xb4>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	6a1a      	ldr	r2, [r3, #32]
 8008a12:	f240 4344 	movw	r3, #1092	; 0x444
 8008a16:	4013      	ands	r3, r2
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d107      	bne.n	8008a2c <HAL_TIM_PWM_Stop+0xb4>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f022 0201 	bic.w	r2, r2, #1
 8008a2a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d104      	bne.n	8008a3c <HAL_TIM_PWM_Stop+0xc4>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2201      	movs	r2, #1
 8008a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a3a:	e023      	b.n	8008a84 <HAL_TIM_PWM_Stop+0x10c>
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	2b04      	cmp	r3, #4
 8008a40:	d104      	bne.n	8008a4c <HAL_TIM_PWM_Stop+0xd4>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2201      	movs	r2, #1
 8008a46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a4a:	e01b      	b.n	8008a84 <HAL_TIM_PWM_Stop+0x10c>
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	2b08      	cmp	r3, #8
 8008a50:	d104      	bne.n	8008a5c <HAL_TIM_PWM_Stop+0xe4>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2201      	movs	r2, #1
 8008a56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a5a:	e013      	b.n	8008a84 <HAL_TIM_PWM_Stop+0x10c>
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	2b0c      	cmp	r3, #12
 8008a60:	d104      	bne.n	8008a6c <HAL_TIM_PWM_Stop+0xf4>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2201      	movs	r2, #1
 8008a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008a6a:	e00b      	b.n	8008a84 <HAL_TIM_PWM_Stop+0x10c>
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	2b10      	cmp	r3, #16
 8008a70:	d104      	bne.n	8008a7c <HAL_TIM_PWM_Stop+0x104>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2201      	movs	r2, #1
 8008a76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a7a:	e003      	b.n	8008a84 <HAL_TIM_PWM_Stop+0x10c>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8008a84:	2300      	movs	r3, #0
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3708      	adds	r7, #8
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
 8008a8e:	bf00      	nop
 8008a90:	40012c00 	.word	0x40012c00
 8008a94:	40013400 	.word	0x40013400
 8008a98:	40014000 	.word	0x40014000
 8008a9c:	40014400 	.word	0x40014400
 8008aa0:	40014800 	.word	0x40014800

08008aa4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b082      	sub	sp, #8
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d101      	bne.n	8008ab6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	e049      	b.n	8008b4a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d106      	bne.n	8008ad0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 f841 	bl	8008b52 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2202      	movs	r2, #2
 8008ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681a      	ldr	r2, [r3, #0]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	3304      	adds	r3, #4
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	4610      	mov	r0, r2
 8008ae4:	f000 fd7e 	bl	80095e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2201      	movs	r2, #1
 8008aec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2201      	movs	r2, #1
 8008af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2201      	movs	r2, #1
 8008afc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2201      	movs	r2, #1
 8008b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2201      	movs	r2, #1
 8008b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2201      	movs	r2, #1
 8008b24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2201      	movs	r2, #1
 8008b34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2201      	movs	r2, #1
 8008b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b48:	2300      	movs	r3, #0
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3708      	adds	r7, #8
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}

08008b52 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008b52:	b480      	push	{r7}
 8008b54:	b083      	sub	sp, #12
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008b5a:	bf00      	nop
 8008b5c:	370c      	adds	r7, #12
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr
	...

08008b68 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b084      	sub	sp, #16
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008b72:	2300      	movs	r3, #0
 8008b74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d104      	bne.n	8008b86 <HAL_TIM_IC_Start_IT+0x1e>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	e023      	b.n	8008bce <HAL_TIM_IC_Start_IT+0x66>
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	2b04      	cmp	r3, #4
 8008b8a:	d104      	bne.n	8008b96 <HAL_TIM_IC_Start_IT+0x2e>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008b92:	b2db      	uxtb	r3, r3
 8008b94:	e01b      	b.n	8008bce <HAL_TIM_IC_Start_IT+0x66>
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	2b08      	cmp	r3, #8
 8008b9a:	d104      	bne.n	8008ba6 <HAL_TIM_IC_Start_IT+0x3e>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008ba2:	b2db      	uxtb	r3, r3
 8008ba4:	e013      	b.n	8008bce <HAL_TIM_IC_Start_IT+0x66>
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	2b0c      	cmp	r3, #12
 8008baa:	d104      	bne.n	8008bb6 <HAL_TIM_IC_Start_IT+0x4e>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008bb2:	b2db      	uxtb	r3, r3
 8008bb4:	e00b      	b.n	8008bce <HAL_TIM_IC_Start_IT+0x66>
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	2b10      	cmp	r3, #16
 8008bba:	d104      	bne.n	8008bc6 <HAL_TIM_IC_Start_IT+0x5e>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008bc2:	b2db      	uxtb	r3, r3
 8008bc4:	e003      	b.n	8008bce <HAL_TIM_IC_Start_IT+0x66>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008bcc:	b2db      	uxtb	r3, r3
 8008bce:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d104      	bne.n	8008be0 <HAL_TIM_IC_Start_IT+0x78>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008bdc:	b2db      	uxtb	r3, r3
 8008bde:	e013      	b.n	8008c08 <HAL_TIM_IC_Start_IT+0xa0>
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	2b04      	cmp	r3, #4
 8008be4:	d104      	bne.n	8008bf0 <HAL_TIM_IC_Start_IT+0x88>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	e00b      	b.n	8008c08 <HAL_TIM_IC_Start_IT+0xa0>
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	2b08      	cmp	r3, #8
 8008bf4:	d104      	bne.n	8008c00 <HAL_TIM_IC_Start_IT+0x98>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	e003      	b.n	8008c08 <HAL_TIM_IC_Start_IT+0xa0>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8008c06:	b2db      	uxtb	r3, r3
 8008c08:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c0a:	7bbb      	ldrb	r3, [r7, #14]
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d102      	bne.n	8008c16 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008c10:	7b7b      	ldrb	r3, [r7, #13]
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d001      	beq.n	8008c1a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8008c16:	2301      	movs	r3, #1
 8008c18:	e0d8      	b.n	8008dcc <HAL_TIM_IC_Start_IT+0x264>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d104      	bne.n	8008c2a <HAL_TIM_IC_Start_IT+0xc2>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2202      	movs	r2, #2
 8008c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c28:	e023      	b.n	8008c72 <HAL_TIM_IC_Start_IT+0x10a>
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	2b04      	cmp	r3, #4
 8008c2e:	d104      	bne.n	8008c3a <HAL_TIM_IC_Start_IT+0xd2>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2202      	movs	r2, #2
 8008c34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c38:	e01b      	b.n	8008c72 <HAL_TIM_IC_Start_IT+0x10a>
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	2b08      	cmp	r3, #8
 8008c3e:	d104      	bne.n	8008c4a <HAL_TIM_IC_Start_IT+0xe2>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2202      	movs	r2, #2
 8008c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c48:	e013      	b.n	8008c72 <HAL_TIM_IC_Start_IT+0x10a>
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	2b0c      	cmp	r3, #12
 8008c4e:	d104      	bne.n	8008c5a <HAL_TIM_IC_Start_IT+0xf2>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2202      	movs	r2, #2
 8008c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008c58:	e00b      	b.n	8008c72 <HAL_TIM_IC_Start_IT+0x10a>
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	2b10      	cmp	r3, #16
 8008c5e:	d104      	bne.n	8008c6a <HAL_TIM_IC_Start_IT+0x102>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2202      	movs	r2, #2
 8008c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c68:	e003      	b.n	8008c72 <HAL_TIM_IC_Start_IT+0x10a>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2202      	movs	r2, #2
 8008c6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d104      	bne.n	8008c82 <HAL_TIM_IC_Start_IT+0x11a>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2202      	movs	r2, #2
 8008c7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c80:	e013      	b.n	8008caa <HAL_TIM_IC_Start_IT+0x142>
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	2b04      	cmp	r3, #4
 8008c86:	d104      	bne.n	8008c92 <HAL_TIM_IC_Start_IT+0x12a>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2202      	movs	r2, #2
 8008c8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c90:	e00b      	b.n	8008caa <HAL_TIM_IC_Start_IT+0x142>
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	2b08      	cmp	r3, #8
 8008c96:	d104      	bne.n	8008ca2 <HAL_TIM_IC_Start_IT+0x13a>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2202      	movs	r2, #2
 8008c9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008ca0:	e003      	b.n	8008caa <HAL_TIM_IC_Start_IT+0x142>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2202      	movs	r2, #2
 8008ca6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	2b0c      	cmp	r3, #12
 8008cae:	d841      	bhi.n	8008d34 <HAL_TIM_IC_Start_IT+0x1cc>
 8008cb0:	a201      	add	r2, pc, #4	; (adr r2, 8008cb8 <HAL_TIM_IC_Start_IT+0x150>)
 8008cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cb6:	bf00      	nop
 8008cb8:	08008ced 	.word	0x08008ced
 8008cbc:	08008d35 	.word	0x08008d35
 8008cc0:	08008d35 	.word	0x08008d35
 8008cc4:	08008d35 	.word	0x08008d35
 8008cc8:	08008cff 	.word	0x08008cff
 8008ccc:	08008d35 	.word	0x08008d35
 8008cd0:	08008d35 	.word	0x08008d35
 8008cd4:	08008d35 	.word	0x08008d35
 8008cd8:	08008d11 	.word	0x08008d11
 8008cdc:	08008d35 	.word	0x08008d35
 8008ce0:	08008d35 	.word	0x08008d35
 8008ce4:	08008d35 	.word	0x08008d35
 8008ce8:	08008d23 	.word	0x08008d23
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	68da      	ldr	r2, [r3, #12]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f042 0202 	orr.w	r2, r2, #2
 8008cfa:	60da      	str	r2, [r3, #12]
      break;
 8008cfc:	e01d      	b.n	8008d3a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	68da      	ldr	r2, [r3, #12]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f042 0204 	orr.w	r2, r2, #4
 8008d0c:	60da      	str	r2, [r3, #12]
      break;
 8008d0e:	e014      	b.n	8008d3a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	68da      	ldr	r2, [r3, #12]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f042 0208 	orr.w	r2, r2, #8
 8008d1e:	60da      	str	r2, [r3, #12]
      break;
 8008d20:	e00b      	b.n	8008d3a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	68da      	ldr	r2, [r3, #12]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f042 0210 	orr.w	r2, r2, #16
 8008d30:	60da      	str	r2, [r3, #12]
      break;
 8008d32:	e002      	b.n	8008d3a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8008d34:	2301      	movs	r3, #1
 8008d36:	73fb      	strb	r3, [r7, #15]
      break;
 8008d38:	bf00      	nop
  }

  if (status == HAL_OK)
 8008d3a:	7bfb      	ldrb	r3, [r7, #15]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d144      	bne.n	8008dca <HAL_TIM_IC_Start_IT+0x262>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	2201      	movs	r2, #1
 8008d46:	6839      	ldr	r1, [r7, #0]
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f001 f969 	bl	800a020 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4a20      	ldr	r2, [pc, #128]	; (8008dd4 <HAL_TIM_IC_Start_IT+0x26c>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d018      	beq.n	8008d8a <HAL_TIM_IC_Start_IT+0x222>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d60:	d013      	beq.n	8008d8a <HAL_TIM_IC_Start_IT+0x222>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a1c      	ldr	r2, [pc, #112]	; (8008dd8 <HAL_TIM_IC_Start_IT+0x270>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d00e      	beq.n	8008d8a <HAL_TIM_IC_Start_IT+0x222>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a1a      	ldr	r2, [pc, #104]	; (8008ddc <HAL_TIM_IC_Start_IT+0x274>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d009      	beq.n	8008d8a <HAL_TIM_IC_Start_IT+0x222>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a19      	ldr	r2, [pc, #100]	; (8008de0 <HAL_TIM_IC_Start_IT+0x278>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d004      	beq.n	8008d8a <HAL_TIM_IC_Start_IT+0x222>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4a17      	ldr	r2, [pc, #92]	; (8008de4 <HAL_TIM_IC_Start_IT+0x27c>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d115      	bne.n	8008db6 <HAL_TIM_IC_Start_IT+0x24e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	689a      	ldr	r2, [r3, #8]
 8008d90:	4b15      	ldr	r3, [pc, #84]	; (8008de8 <HAL_TIM_IC_Start_IT+0x280>)
 8008d92:	4013      	ands	r3, r2
 8008d94:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	2b06      	cmp	r3, #6
 8008d9a:	d015      	beq.n	8008dc8 <HAL_TIM_IC_Start_IT+0x260>
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008da2:	d011      	beq.n	8008dc8 <HAL_TIM_IC_Start_IT+0x260>
      {
        __HAL_TIM_ENABLE(htim);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	681a      	ldr	r2, [r3, #0]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f042 0201 	orr.w	r2, r2, #1
 8008db2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008db4:	e008      	b.n	8008dc8 <HAL_TIM_IC_Start_IT+0x260>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f042 0201 	orr.w	r2, r2, #1
 8008dc4:	601a      	str	r2, [r3, #0]
 8008dc6:	e000      	b.n	8008dca <HAL_TIM_IC_Start_IT+0x262>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dc8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8008dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3710      	adds	r7, #16
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}
 8008dd4:	40012c00 	.word	0x40012c00
 8008dd8:	40000400 	.word	0x40000400
 8008ddc:	40000800 	.word	0x40000800
 8008de0:	40013400 	.word	0x40013400
 8008de4:	40014000 	.word	0x40014000
 8008de8:	00010007 	.word	0x00010007

08008dec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b082      	sub	sp, #8
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	691b      	ldr	r3, [r3, #16]
 8008dfa:	f003 0302 	and.w	r3, r3, #2
 8008dfe:	2b02      	cmp	r3, #2
 8008e00:	d122      	bne.n	8008e48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	68db      	ldr	r3, [r3, #12]
 8008e08:	f003 0302 	and.w	r3, r3, #2
 8008e0c:	2b02      	cmp	r3, #2
 8008e0e:	d11b      	bne.n	8008e48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f06f 0202 	mvn.w	r2, #2
 8008e18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	699b      	ldr	r3, [r3, #24]
 8008e26:	f003 0303 	and.w	r3, r3, #3
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d003      	beq.n	8008e36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f7f9 f868 	bl	8001f04 <HAL_TIM_IC_CaptureCallback>
 8008e34:	e005      	b.n	8008e42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 fbb6 	bl	80095a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f000 fbbd 	bl	80095bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2200      	movs	r2, #0
 8008e46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	691b      	ldr	r3, [r3, #16]
 8008e4e:	f003 0304 	and.w	r3, r3, #4
 8008e52:	2b04      	cmp	r3, #4
 8008e54:	d122      	bne.n	8008e9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	68db      	ldr	r3, [r3, #12]
 8008e5c:	f003 0304 	and.w	r3, r3, #4
 8008e60:	2b04      	cmp	r3, #4
 8008e62:	d11b      	bne.n	8008e9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f06f 0204 	mvn.w	r2, #4
 8008e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2202      	movs	r2, #2
 8008e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	699b      	ldr	r3, [r3, #24]
 8008e7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d003      	beq.n	8008e8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f7f9 f83e 	bl	8001f04 <HAL_TIM_IC_CaptureCallback>
 8008e88:	e005      	b.n	8008e96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 fb8c 	bl	80095a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f000 fb93 	bl	80095bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	691b      	ldr	r3, [r3, #16]
 8008ea2:	f003 0308 	and.w	r3, r3, #8
 8008ea6:	2b08      	cmp	r3, #8
 8008ea8:	d122      	bne.n	8008ef0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	68db      	ldr	r3, [r3, #12]
 8008eb0:	f003 0308 	and.w	r3, r3, #8
 8008eb4:	2b08      	cmp	r3, #8
 8008eb6:	d11b      	bne.n	8008ef0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f06f 0208 	mvn.w	r2, #8
 8008ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2204      	movs	r2, #4
 8008ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	69db      	ldr	r3, [r3, #28]
 8008ece:	f003 0303 	and.w	r3, r3, #3
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d003      	beq.n	8008ede <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f7f9 f814 	bl	8001f04 <HAL_TIM_IC_CaptureCallback>
 8008edc:	e005      	b.n	8008eea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 fb62 	bl	80095a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 fb69 	bl	80095bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2200      	movs	r2, #0
 8008eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	691b      	ldr	r3, [r3, #16]
 8008ef6:	f003 0310 	and.w	r3, r3, #16
 8008efa:	2b10      	cmp	r3, #16
 8008efc:	d122      	bne.n	8008f44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	68db      	ldr	r3, [r3, #12]
 8008f04:	f003 0310 	and.w	r3, r3, #16
 8008f08:	2b10      	cmp	r3, #16
 8008f0a:	d11b      	bne.n	8008f44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f06f 0210 	mvn.w	r2, #16
 8008f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2208      	movs	r2, #8
 8008f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	69db      	ldr	r3, [r3, #28]
 8008f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d003      	beq.n	8008f32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f7f8 ffea 	bl	8001f04 <HAL_TIM_IC_CaptureCallback>
 8008f30:	e005      	b.n	8008f3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 fb38 	bl	80095a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f000 fb3f 	bl	80095bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2200      	movs	r2, #0
 8008f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	691b      	ldr	r3, [r3, #16]
 8008f4a:	f003 0301 	and.w	r3, r3, #1
 8008f4e:	2b01      	cmp	r3, #1
 8008f50:	d10e      	bne.n	8008f70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	68db      	ldr	r3, [r3, #12]
 8008f58:	f003 0301 	and.w	r3, r3, #1
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d107      	bne.n	8008f70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f06f 0201 	mvn.w	r2, #1
 8008f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f7f7 fc08 	bl	8000780 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	691b      	ldr	r3, [r3, #16]
 8008f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f7a:	2b80      	cmp	r3, #128	; 0x80
 8008f7c:	d10e      	bne.n	8008f9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	68db      	ldr	r3, [r3, #12]
 8008f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f88:	2b80      	cmp	r3, #128	; 0x80
 8008f8a:	d107      	bne.n	8008f9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f001 fa82 	bl	800a4a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	691b      	ldr	r3, [r3, #16]
 8008fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008faa:	d10e      	bne.n	8008fca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	68db      	ldr	r3, [r3, #12]
 8008fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fb6:	2b80      	cmp	r3, #128	; 0x80
 8008fb8:	d107      	bne.n	8008fca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008fc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f001 fa75 	bl	800a4b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	691b      	ldr	r3, [r3, #16]
 8008fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fd4:	2b40      	cmp	r3, #64	; 0x40
 8008fd6:	d10e      	bne.n	8008ff6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	68db      	ldr	r3, [r3, #12]
 8008fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fe2:	2b40      	cmp	r3, #64	; 0x40
 8008fe4:	d107      	bne.n	8008ff6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008fee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f000 faed 	bl	80095d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	691b      	ldr	r3, [r3, #16]
 8008ffc:	f003 0320 	and.w	r3, r3, #32
 8009000:	2b20      	cmp	r3, #32
 8009002:	d10e      	bne.n	8009022 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	68db      	ldr	r3, [r3, #12]
 800900a:	f003 0320 	and.w	r3, r3, #32
 800900e:	2b20      	cmp	r3, #32
 8009010:	d107      	bne.n	8009022 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f06f 0220 	mvn.w	r2, #32
 800901a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f001 fa35 	bl	800a48c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009022:	bf00      	nop
 8009024:	3708      	adds	r7, #8
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}

0800902a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800902a:	b580      	push	{r7, lr}
 800902c:	b086      	sub	sp, #24
 800902e:	af00      	add	r7, sp, #0
 8009030:	60f8      	str	r0, [r7, #12]
 8009032:	60b9      	str	r1, [r7, #8]
 8009034:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009036:	2300      	movs	r3, #0
 8009038:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009040:	2b01      	cmp	r3, #1
 8009042:	d101      	bne.n	8009048 <HAL_TIM_IC_ConfigChannel+0x1e>
 8009044:	2302      	movs	r3, #2
 8009046:	e088      	b.n	800915a <HAL_TIM_IC_ConfigChannel+0x130>
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2201      	movs	r2, #1
 800904c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d11b      	bne.n	800908e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8009066:	f000 fe23 	bl	8009cb0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	699a      	ldr	r2, [r3, #24]
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f022 020c 	bic.w	r2, r2, #12
 8009078:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	6999      	ldr	r1, [r3, #24]
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	689a      	ldr	r2, [r3, #8]
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	430a      	orrs	r2, r1
 800908a:	619a      	str	r2, [r3, #24]
 800908c:	e060      	b.n	8009150 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2b04      	cmp	r3, #4
 8009092:	d11c      	bne.n	80090ce <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80090a4:	f000 fe9b 	bl	8009dde <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	699a      	ldr	r2, [r3, #24]
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80090b6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	6999      	ldr	r1, [r3, #24]
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	689b      	ldr	r3, [r3, #8]
 80090c2:	021a      	lsls	r2, r3, #8
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	430a      	orrs	r2, r1
 80090ca:	619a      	str	r2, [r3, #24]
 80090cc:	e040      	b.n	8009150 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2b08      	cmp	r3, #8
 80090d2:	d11b      	bne.n	800910c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80090e4:	f000 fee8 	bl	8009eb8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	69da      	ldr	r2, [r3, #28]
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f022 020c 	bic.w	r2, r2, #12
 80090f6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	69d9      	ldr	r1, [r3, #28]
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	689a      	ldr	r2, [r3, #8]
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	430a      	orrs	r2, r1
 8009108:	61da      	str	r2, [r3, #28]
 800910a:	e021      	b.n	8009150 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2b0c      	cmp	r3, #12
 8009110:	d11c      	bne.n	800914c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8009122:	f000 ff05 	bl	8009f30 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	69da      	ldr	r2, [r3, #28]
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009134:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	69d9      	ldr	r1, [r3, #28]
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	689b      	ldr	r3, [r3, #8]
 8009140:	021a      	lsls	r2, r3, #8
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	430a      	orrs	r2, r1
 8009148:	61da      	str	r2, [r3, #28]
 800914a:	e001      	b.n	8009150 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800914c:	2301      	movs	r3, #1
 800914e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2200      	movs	r2, #0
 8009154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009158:	7dfb      	ldrb	r3, [r7, #23]
}
 800915a:	4618      	mov	r0, r3
 800915c:	3718      	adds	r7, #24
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}
	...

08009164 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b086      	sub	sp, #24
 8009168:	af00      	add	r7, sp, #0
 800916a:	60f8      	str	r0, [r7, #12]
 800916c:	60b9      	str	r1, [r7, #8]
 800916e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009170:	2300      	movs	r3, #0
 8009172:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800917a:	2b01      	cmp	r3, #1
 800917c:	d101      	bne.n	8009182 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800917e:	2302      	movs	r3, #2
 8009180:	e0ff      	b.n	8009382 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2201      	movs	r2, #1
 8009186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2b14      	cmp	r3, #20
 800918e:	f200 80f0 	bhi.w	8009372 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009192:	a201      	add	r2, pc, #4	; (adr r2, 8009198 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009198:	080091ed 	.word	0x080091ed
 800919c:	08009373 	.word	0x08009373
 80091a0:	08009373 	.word	0x08009373
 80091a4:	08009373 	.word	0x08009373
 80091a8:	0800922d 	.word	0x0800922d
 80091ac:	08009373 	.word	0x08009373
 80091b0:	08009373 	.word	0x08009373
 80091b4:	08009373 	.word	0x08009373
 80091b8:	0800926f 	.word	0x0800926f
 80091bc:	08009373 	.word	0x08009373
 80091c0:	08009373 	.word	0x08009373
 80091c4:	08009373 	.word	0x08009373
 80091c8:	080092af 	.word	0x080092af
 80091cc:	08009373 	.word	0x08009373
 80091d0:	08009373 	.word	0x08009373
 80091d4:	08009373 	.word	0x08009373
 80091d8:	080092f1 	.word	0x080092f1
 80091dc:	08009373 	.word	0x08009373
 80091e0:	08009373 	.word	0x08009373
 80091e4:	08009373 	.word	0x08009373
 80091e8:	08009331 	.word	0x08009331
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	68b9      	ldr	r1, [r7, #8]
 80091f2:	4618      	mov	r0, r3
 80091f4:	f000 fa86 	bl	8009704 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	699a      	ldr	r2, [r3, #24]
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f042 0208 	orr.w	r2, r2, #8
 8009206:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	699a      	ldr	r2, [r3, #24]
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f022 0204 	bic.w	r2, r2, #4
 8009216:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	6999      	ldr	r1, [r3, #24]
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	691a      	ldr	r2, [r3, #16]
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	430a      	orrs	r2, r1
 8009228:	619a      	str	r2, [r3, #24]
      break;
 800922a:	e0a5      	b.n	8009378 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	68b9      	ldr	r1, [r7, #8]
 8009232:	4618      	mov	r0, r3
 8009234:	f000 faf6 	bl	8009824 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	699a      	ldr	r2, [r3, #24]
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009246:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	699a      	ldr	r2, [r3, #24]
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009256:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	6999      	ldr	r1, [r3, #24]
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	691b      	ldr	r3, [r3, #16]
 8009262:	021a      	lsls	r2, r3, #8
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	430a      	orrs	r2, r1
 800926a:	619a      	str	r2, [r3, #24]
      break;
 800926c:	e084      	b.n	8009378 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	68b9      	ldr	r1, [r7, #8]
 8009274:	4618      	mov	r0, r3
 8009276:	f000 fb5f 	bl	8009938 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	69da      	ldr	r2, [r3, #28]
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f042 0208 	orr.w	r2, r2, #8
 8009288:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	69da      	ldr	r2, [r3, #28]
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f022 0204 	bic.w	r2, r2, #4
 8009298:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	69d9      	ldr	r1, [r3, #28]
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	691a      	ldr	r2, [r3, #16]
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	430a      	orrs	r2, r1
 80092aa:	61da      	str	r2, [r3, #28]
      break;
 80092ac:	e064      	b.n	8009378 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	68b9      	ldr	r1, [r7, #8]
 80092b4:	4618      	mov	r0, r3
 80092b6:	f000 fbc7 	bl	8009a48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	69da      	ldr	r2, [r3, #28]
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80092c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	69da      	ldr	r2, [r3, #28]
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	69d9      	ldr	r1, [r3, #28]
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	691b      	ldr	r3, [r3, #16]
 80092e4:	021a      	lsls	r2, r3, #8
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	430a      	orrs	r2, r1
 80092ec:	61da      	str	r2, [r3, #28]
      break;
 80092ee:	e043      	b.n	8009378 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	68b9      	ldr	r1, [r7, #8]
 80092f6:	4618      	mov	r0, r3
 80092f8:	f000 fc10 	bl	8009b1c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f042 0208 	orr.w	r2, r2, #8
 800930a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f022 0204 	bic.w	r2, r2, #4
 800931a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	691a      	ldr	r2, [r3, #16]
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	430a      	orrs	r2, r1
 800932c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800932e:	e023      	b.n	8009378 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	68b9      	ldr	r1, [r7, #8]
 8009336:	4618      	mov	r0, r3
 8009338:	f000 fc54 	bl	8009be4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800934a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800935a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	691b      	ldr	r3, [r3, #16]
 8009366:	021a      	lsls	r2, r3, #8
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	430a      	orrs	r2, r1
 800936e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009370:	e002      	b.n	8009378 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8009372:	2301      	movs	r3, #1
 8009374:	75fb      	strb	r3, [r7, #23]
      break;
 8009376:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2200      	movs	r2, #0
 800937c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009380:	7dfb      	ldrb	r3, [r7, #23]
}
 8009382:	4618      	mov	r0, r3
 8009384:	3718      	adds	r7, #24
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
 800938a:	bf00      	nop

0800938c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b084      	sub	sp, #16
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009396:	2300      	movs	r3, #0
 8009398:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d101      	bne.n	80093a8 <HAL_TIM_ConfigClockSource+0x1c>
 80093a4:	2302      	movs	r3, #2
 80093a6:	e0b6      	b.n	8009516 <HAL_TIM_ConfigClockSource+0x18a>
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2201      	movs	r2, #1
 80093ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2202      	movs	r2, #2
 80093b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	689b      	ldr	r3, [r3, #8]
 80093be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80093ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80093d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	68ba      	ldr	r2, [r7, #8]
 80093da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093e4:	d03e      	beq.n	8009464 <HAL_TIM_ConfigClockSource+0xd8>
 80093e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093ea:	f200 8087 	bhi.w	80094fc <HAL_TIM_ConfigClockSource+0x170>
 80093ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093f2:	f000 8086 	beq.w	8009502 <HAL_TIM_ConfigClockSource+0x176>
 80093f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093fa:	d87f      	bhi.n	80094fc <HAL_TIM_ConfigClockSource+0x170>
 80093fc:	2b70      	cmp	r3, #112	; 0x70
 80093fe:	d01a      	beq.n	8009436 <HAL_TIM_ConfigClockSource+0xaa>
 8009400:	2b70      	cmp	r3, #112	; 0x70
 8009402:	d87b      	bhi.n	80094fc <HAL_TIM_ConfigClockSource+0x170>
 8009404:	2b60      	cmp	r3, #96	; 0x60
 8009406:	d050      	beq.n	80094aa <HAL_TIM_ConfigClockSource+0x11e>
 8009408:	2b60      	cmp	r3, #96	; 0x60
 800940a:	d877      	bhi.n	80094fc <HAL_TIM_ConfigClockSource+0x170>
 800940c:	2b50      	cmp	r3, #80	; 0x50
 800940e:	d03c      	beq.n	800948a <HAL_TIM_ConfigClockSource+0xfe>
 8009410:	2b50      	cmp	r3, #80	; 0x50
 8009412:	d873      	bhi.n	80094fc <HAL_TIM_ConfigClockSource+0x170>
 8009414:	2b40      	cmp	r3, #64	; 0x40
 8009416:	d058      	beq.n	80094ca <HAL_TIM_ConfigClockSource+0x13e>
 8009418:	2b40      	cmp	r3, #64	; 0x40
 800941a:	d86f      	bhi.n	80094fc <HAL_TIM_ConfigClockSource+0x170>
 800941c:	2b30      	cmp	r3, #48	; 0x30
 800941e:	d064      	beq.n	80094ea <HAL_TIM_ConfigClockSource+0x15e>
 8009420:	2b30      	cmp	r3, #48	; 0x30
 8009422:	d86b      	bhi.n	80094fc <HAL_TIM_ConfigClockSource+0x170>
 8009424:	2b20      	cmp	r3, #32
 8009426:	d060      	beq.n	80094ea <HAL_TIM_ConfigClockSource+0x15e>
 8009428:	2b20      	cmp	r3, #32
 800942a:	d867      	bhi.n	80094fc <HAL_TIM_ConfigClockSource+0x170>
 800942c:	2b00      	cmp	r3, #0
 800942e:	d05c      	beq.n	80094ea <HAL_TIM_ConfigClockSource+0x15e>
 8009430:	2b10      	cmp	r3, #16
 8009432:	d05a      	beq.n	80094ea <HAL_TIM_ConfigClockSource+0x15e>
 8009434:	e062      	b.n	80094fc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009446:	f000 fdcb 	bl	8009fe0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	689b      	ldr	r3, [r3, #8]
 8009450:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009458:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	68ba      	ldr	r2, [r7, #8]
 8009460:	609a      	str	r2, [r3, #8]
      break;
 8009462:	e04f      	b.n	8009504 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009474:	f000 fdb4 	bl	8009fe0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	689a      	ldr	r2, [r3, #8]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009486:	609a      	str	r2, [r3, #8]
      break;
 8009488:	e03c      	b.n	8009504 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009496:	461a      	mov	r2, r3
 8009498:	f000 fc72 	bl	8009d80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	2150      	movs	r1, #80	; 0x50
 80094a2:	4618      	mov	r0, r3
 80094a4:	f000 fd81 	bl	8009faa <TIM_ITRx_SetConfig>
      break;
 80094a8:	e02c      	b.n	8009504 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80094b6:	461a      	mov	r2, r3
 80094b8:	f000 fcce 	bl	8009e58 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	2160      	movs	r1, #96	; 0x60
 80094c2:	4618      	mov	r0, r3
 80094c4:	f000 fd71 	bl	8009faa <TIM_ITRx_SetConfig>
      break;
 80094c8:	e01c      	b.n	8009504 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80094d6:	461a      	mov	r2, r3
 80094d8:	f000 fc52 	bl	8009d80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	2140      	movs	r1, #64	; 0x40
 80094e2:	4618      	mov	r0, r3
 80094e4:	f000 fd61 	bl	8009faa <TIM_ITRx_SetConfig>
      break;
 80094e8:	e00c      	b.n	8009504 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681a      	ldr	r2, [r3, #0]
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	4619      	mov	r1, r3
 80094f4:	4610      	mov	r0, r2
 80094f6:	f000 fd58 	bl	8009faa <TIM_ITRx_SetConfig>
      break;
 80094fa:	e003      	b.n	8009504 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80094fc:	2301      	movs	r3, #1
 80094fe:	73fb      	strb	r3, [r7, #15]
      break;
 8009500:	e000      	b.n	8009504 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8009502:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2201      	movs	r2, #1
 8009508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2200      	movs	r2, #0
 8009510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009514:	7bfb      	ldrb	r3, [r7, #15]
}
 8009516:	4618      	mov	r0, r3
 8009518:	3710      	adds	r7, #16
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
	...

08009520 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009520:	b480      	push	{r7}
 8009522:	b085      	sub	sp, #20
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800952a:	2300      	movs	r3, #0
 800952c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	2b0c      	cmp	r3, #12
 8009532:	d831      	bhi.n	8009598 <HAL_TIM_ReadCapturedValue+0x78>
 8009534:	a201      	add	r2, pc, #4	; (adr r2, 800953c <HAL_TIM_ReadCapturedValue+0x1c>)
 8009536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800953a:	bf00      	nop
 800953c:	08009571 	.word	0x08009571
 8009540:	08009599 	.word	0x08009599
 8009544:	08009599 	.word	0x08009599
 8009548:	08009599 	.word	0x08009599
 800954c:	0800957b 	.word	0x0800957b
 8009550:	08009599 	.word	0x08009599
 8009554:	08009599 	.word	0x08009599
 8009558:	08009599 	.word	0x08009599
 800955c:	08009585 	.word	0x08009585
 8009560:	08009599 	.word	0x08009599
 8009564:	08009599 	.word	0x08009599
 8009568:	08009599 	.word	0x08009599
 800956c:	0800958f 	.word	0x0800958f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009576:	60fb      	str	r3, [r7, #12]

      break;
 8009578:	e00f      	b.n	800959a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009580:	60fb      	str	r3, [r7, #12]

      break;
 8009582:	e00a      	b.n	800959a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800958a:	60fb      	str	r3, [r7, #12]

      break;
 800958c:	e005      	b.n	800959a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009594:	60fb      	str	r3, [r7, #12]

      break;
 8009596:	e000      	b.n	800959a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8009598:	bf00      	nop
  }

  return tmpreg;
 800959a:	68fb      	ldr	r3, [r7, #12]
}
 800959c:	4618      	mov	r0, r3
 800959e:	3714      	adds	r7, #20
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr

080095a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b083      	sub	sp, #12
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80095b0:	bf00      	nop
 80095b2:	370c      	adds	r7, #12
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr

080095bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80095bc:	b480      	push	{r7}
 80095be:	b083      	sub	sp, #12
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80095c4:	bf00      	nop
 80095c6:	370c      	adds	r7, #12
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr

080095d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b083      	sub	sp, #12
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80095d8:	bf00      	nop
 80095da:	370c      	adds	r7, #12
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr

080095e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b085      	sub	sp, #20
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	4a3c      	ldr	r2, [pc, #240]	; (80096e8 <TIM_Base_SetConfig+0x104>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d00f      	beq.n	800961c <TIM_Base_SetConfig+0x38>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009602:	d00b      	beq.n	800961c <TIM_Base_SetConfig+0x38>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	4a39      	ldr	r2, [pc, #228]	; (80096ec <TIM_Base_SetConfig+0x108>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d007      	beq.n	800961c <TIM_Base_SetConfig+0x38>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	4a38      	ldr	r2, [pc, #224]	; (80096f0 <TIM_Base_SetConfig+0x10c>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d003      	beq.n	800961c <TIM_Base_SetConfig+0x38>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	4a37      	ldr	r2, [pc, #220]	; (80096f4 <TIM_Base_SetConfig+0x110>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d108      	bne.n	800962e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009622:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	68fa      	ldr	r2, [r7, #12]
 800962a:	4313      	orrs	r3, r2
 800962c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	4a2d      	ldr	r2, [pc, #180]	; (80096e8 <TIM_Base_SetConfig+0x104>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d01b      	beq.n	800966e <TIM_Base_SetConfig+0x8a>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800963c:	d017      	beq.n	800966e <TIM_Base_SetConfig+0x8a>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	4a2a      	ldr	r2, [pc, #168]	; (80096ec <TIM_Base_SetConfig+0x108>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d013      	beq.n	800966e <TIM_Base_SetConfig+0x8a>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	4a29      	ldr	r2, [pc, #164]	; (80096f0 <TIM_Base_SetConfig+0x10c>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d00f      	beq.n	800966e <TIM_Base_SetConfig+0x8a>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	4a28      	ldr	r2, [pc, #160]	; (80096f4 <TIM_Base_SetConfig+0x110>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d00b      	beq.n	800966e <TIM_Base_SetConfig+0x8a>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	4a27      	ldr	r2, [pc, #156]	; (80096f8 <TIM_Base_SetConfig+0x114>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d007      	beq.n	800966e <TIM_Base_SetConfig+0x8a>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	4a26      	ldr	r2, [pc, #152]	; (80096fc <TIM_Base_SetConfig+0x118>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d003      	beq.n	800966e <TIM_Base_SetConfig+0x8a>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	4a25      	ldr	r2, [pc, #148]	; (8009700 <TIM_Base_SetConfig+0x11c>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d108      	bne.n	8009680 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009674:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	68db      	ldr	r3, [r3, #12]
 800967a:	68fa      	ldr	r2, [r7, #12]
 800967c:	4313      	orrs	r3, r2
 800967e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	695b      	ldr	r3, [r3, #20]
 800968a:	4313      	orrs	r3, r2
 800968c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	68fa      	ldr	r2, [r7, #12]
 8009692:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	689a      	ldr	r2, [r3, #8]
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	681a      	ldr	r2, [r3, #0]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	4a10      	ldr	r2, [pc, #64]	; (80096e8 <TIM_Base_SetConfig+0x104>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d00f      	beq.n	80096cc <TIM_Base_SetConfig+0xe8>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	4a11      	ldr	r2, [pc, #68]	; (80096f4 <TIM_Base_SetConfig+0x110>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d00b      	beq.n	80096cc <TIM_Base_SetConfig+0xe8>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	4a10      	ldr	r2, [pc, #64]	; (80096f8 <TIM_Base_SetConfig+0x114>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d007      	beq.n	80096cc <TIM_Base_SetConfig+0xe8>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	4a0f      	ldr	r2, [pc, #60]	; (80096fc <TIM_Base_SetConfig+0x118>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d003      	beq.n	80096cc <TIM_Base_SetConfig+0xe8>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	4a0e      	ldr	r2, [pc, #56]	; (8009700 <TIM_Base_SetConfig+0x11c>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d103      	bne.n	80096d4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	691a      	ldr	r2, [r3, #16]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2201      	movs	r2, #1
 80096d8:	615a      	str	r2, [r3, #20]
}
 80096da:	bf00      	nop
 80096dc:	3714      	adds	r7, #20
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr
 80096e6:	bf00      	nop
 80096e8:	40012c00 	.word	0x40012c00
 80096ec:	40000400 	.word	0x40000400
 80096f0:	40000800 	.word	0x40000800
 80096f4:	40013400 	.word	0x40013400
 80096f8:	40014000 	.word	0x40014000
 80096fc:	40014400 	.word	0x40014400
 8009700:	40014800 	.word	0x40014800

08009704 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009704:	b480      	push	{r7}
 8009706:	b087      	sub	sp, #28
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6a1b      	ldr	r3, [r3, #32]
 8009712:	f023 0201 	bic.w	r2, r3, #1
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6a1b      	ldr	r3, [r3, #32]
 800971e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	699b      	ldr	r3, [r3, #24]
 800972a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f023 0303 	bic.w	r3, r3, #3
 800973e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	68fa      	ldr	r2, [r7, #12]
 8009746:	4313      	orrs	r3, r2
 8009748:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	f023 0302 	bic.w	r3, r3, #2
 8009750:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	689b      	ldr	r3, [r3, #8]
 8009756:	697a      	ldr	r2, [r7, #20]
 8009758:	4313      	orrs	r3, r2
 800975a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	4a2c      	ldr	r2, [pc, #176]	; (8009810 <TIM_OC1_SetConfig+0x10c>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d00f      	beq.n	8009784 <TIM_OC1_SetConfig+0x80>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	4a2b      	ldr	r2, [pc, #172]	; (8009814 <TIM_OC1_SetConfig+0x110>)
 8009768:	4293      	cmp	r3, r2
 800976a:	d00b      	beq.n	8009784 <TIM_OC1_SetConfig+0x80>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	4a2a      	ldr	r2, [pc, #168]	; (8009818 <TIM_OC1_SetConfig+0x114>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d007      	beq.n	8009784 <TIM_OC1_SetConfig+0x80>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	4a29      	ldr	r2, [pc, #164]	; (800981c <TIM_OC1_SetConfig+0x118>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d003      	beq.n	8009784 <TIM_OC1_SetConfig+0x80>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	4a28      	ldr	r2, [pc, #160]	; (8009820 <TIM_OC1_SetConfig+0x11c>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d10c      	bne.n	800979e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	f023 0308 	bic.w	r3, r3, #8
 800978a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	68db      	ldr	r3, [r3, #12]
 8009790:	697a      	ldr	r2, [r7, #20]
 8009792:	4313      	orrs	r3, r2
 8009794:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	f023 0304 	bic.w	r3, r3, #4
 800979c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	4a1b      	ldr	r2, [pc, #108]	; (8009810 <TIM_OC1_SetConfig+0x10c>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d00f      	beq.n	80097c6 <TIM_OC1_SetConfig+0xc2>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	4a1a      	ldr	r2, [pc, #104]	; (8009814 <TIM_OC1_SetConfig+0x110>)
 80097aa:	4293      	cmp	r3, r2
 80097ac:	d00b      	beq.n	80097c6 <TIM_OC1_SetConfig+0xc2>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	4a19      	ldr	r2, [pc, #100]	; (8009818 <TIM_OC1_SetConfig+0x114>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d007      	beq.n	80097c6 <TIM_OC1_SetConfig+0xc2>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	4a18      	ldr	r2, [pc, #96]	; (800981c <TIM_OC1_SetConfig+0x118>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d003      	beq.n	80097c6 <TIM_OC1_SetConfig+0xc2>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	4a17      	ldr	r2, [pc, #92]	; (8009820 <TIM_OC1_SetConfig+0x11c>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d111      	bne.n	80097ea <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80097d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	695b      	ldr	r3, [r3, #20]
 80097da:	693a      	ldr	r2, [r7, #16]
 80097dc:	4313      	orrs	r3, r2
 80097de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	699b      	ldr	r3, [r3, #24]
 80097e4:	693a      	ldr	r2, [r7, #16]
 80097e6:	4313      	orrs	r3, r2
 80097e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	693a      	ldr	r2, [r7, #16]
 80097ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	68fa      	ldr	r2, [r7, #12]
 80097f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	685a      	ldr	r2, [r3, #4]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	697a      	ldr	r2, [r7, #20]
 8009802:	621a      	str	r2, [r3, #32]
}
 8009804:	bf00      	nop
 8009806:	371c      	adds	r7, #28
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr
 8009810:	40012c00 	.word	0x40012c00
 8009814:	40013400 	.word	0x40013400
 8009818:	40014000 	.word	0x40014000
 800981c:	40014400 	.word	0x40014400
 8009820:	40014800 	.word	0x40014800

08009824 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009824:	b480      	push	{r7}
 8009826:	b087      	sub	sp, #28
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6a1b      	ldr	r3, [r3, #32]
 8009832:	f023 0210 	bic.w	r2, r3, #16
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6a1b      	ldr	r3, [r3, #32]
 800983e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	685b      	ldr	r3, [r3, #4]
 8009844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	699b      	ldr	r3, [r3, #24]
 800984a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009852:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800985e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	021b      	lsls	r3, r3, #8
 8009866:	68fa      	ldr	r2, [r7, #12]
 8009868:	4313      	orrs	r3, r2
 800986a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	f023 0320 	bic.w	r3, r3, #32
 8009872:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	689b      	ldr	r3, [r3, #8]
 8009878:	011b      	lsls	r3, r3, #4
 800987a:	697a      	ldr	r2, [r7, #20]
 800987c:	4313      	orrs	r3, r2
 800987e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	4a28      	ldr	r2, [pc, #160]	; (8009924 <TIM_OC2_SetConfig+0x100>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d003      	beq.n	8009890 <TIM_OC2_SetConfig+0x6c>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	4a27      	ldr	r2, [pc, #156]	; (8009928 <TIM_OC2_SetConfig+0x104>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d10d      	bne.n	80098ac <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009896:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	68db      	ldr	r3, [r3, #12]
 800989c:	011b      	lsls	r3, r3, #4
 800989e:	697a      	ldr	r2, [r7, #20]
 80098a0:	4313      	orrs	r3, r2
 80098a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	4a1d      	ldr	r2, [pc, #116]	; (8009924 <TIM_OC2_SetConfig+0x100>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d00f      	beq.n	80098d4 <TIM_OC2_SetConfig+0xb0>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	4a1c      	ldr	r2, [pc, #112]	; (8009928 <TIM_OC2_SetConfig+0x104>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d00b      	beq.n	80098d4 <TIM_OC2_SetConfig+0xb0>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	4a1b      	ldr	r2, [pc, #108]	; (800992c <TIM_OC2_SetConfig+0x108>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d007      	beq.n	80098d4 <TIM_OC2_SetConfig+0xb0>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	4a1a      	ldr	r2, [pc, #104]	; (8009930 <TIM_OC2_SetConfig+0x10c>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d003      	beq.n	80098d4 <TIM_OC2_SetConfig+0xb0>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	4a19      	ldr	r2, [pc, #100]	; (8009934 <TIM_OC2_SetConfig+0x110>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d113      	bne.n	80098fc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80098da:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80098e2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	695b      	ldr	r3, [r3, #20]
 80098e8:	009b      	lsls	r3, r3, #2
 80098ea:	693a      	ldr	r2, [r7, #16]
 80098ec:	4313      	orrs	r3, r2
 80098ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	699b      	ldr	r3, [r3, #24]
 80098f4:	009b      	lsls	r3, r3, #2
 80098f6:	693a      	ldr	r2, [r7, #16]
 80098f8:	4313      	orrs	r3, r2
 80098fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	693a      	ldr	r2, [r7, #16]
 8009900:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	68fa      	ldr	r2, [r7, #12]
 8009906:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	685a      	ldr	r2, [r3, #4]
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	697a      	ldr	r2, [r7, #20]
 8009914:	621a      	str	r2, [r3, #32]
}
 8009916:	bf00      	nop
 8009918:	371c      	adds	r7, #28
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr
 8009922:	bf00      	nop
 8009924:	40012c00 	.word	0x40012c00
 8009928:	40013400 	.word	0x40013400
 800992c:	40014000 	.word	0x40014000
 8009930:	40014400 	.word	0x40014400
 8009934:	40014800 	.word	0x40014800

08009938 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009938:	b480      	push	{r7}
 800993a:	b087      	sub	sp, #28
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
 8009940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6a1b      	ldr	r3, [r3, #32]
 8009946:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6a1b      	ldr	r3, [r3, #32]
 8009952:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	685b      	ldr	r3, [r3, #4]
 8009958:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	69db      	ldr	r3, [r3, #28]
 800995e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800996a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	f023 0303 	bic.w	r3, r3, #3
 8009972:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	68fa      	ldr	r2, [r7, #12]
 800997a:	4313      	orrs	r3, r2
 800997c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009984:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	689b      	ldr	r3, [r3, #8]
 800998a:	021b      	lsls	r3, r3, #8
 800998c:	697a      	ldr	r2, [r7, #20]
 800998e:	4313      	orrs	r3, r2
 8009990:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	4a27      	ldr	r2, [pc, #156]	; (8009a34 <TIM_OC3_SetConfig+0xfc>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d003      	beq.n	80099a2 <TIM_OC3_SetConfig+0x6a>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	4a26      	ldr	r2, [pc, #152]	; (8009a38 <TIM_OC3_SetConfig+0x100>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d10d      	bne.n	80099be <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80099a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	68db      	ldr	r3, [r3, #12]
 80099ae:	021b      	lsls	r3, r3, #8
 80099b0:	697a      	ldr	r2, [r7, #20]
 80099b2:	4313      	orrs	r3, r2
 80099b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80099bc:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	4a1c      	ldr	r2, [pc, #112]	; (8009a34 <TIM_OC3_SetConfig+0xfc>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d00f      	beq.n	80099e6 <TIM_OC3_SetConfig+0xae>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	4a1b      	ldr	r2, [pc, #108]	; (8009a38 <TIM_OC3_SetConfig+0x100>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d00b      	beq.n	80099e6 <TIM_OC3_SetConfig+0xae>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	4a1a      	ldr	r2, [pc, #104]	; (8009a3c <TIM_OC3_SetConfig+0x104>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d007      	beq.n	80099e6 <TIM_OC3_SetConfig+0xae>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	4a19      	ldr	r2, [pc, #100]	; (8009a40 <TIM_OC3_SetConfig+0x108>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d003      	beq.n	80099e6 <TIM_OC3_SetConfig+0xae>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	4a18      	ldr	r2, [pc, #96]	; (8009a44 <TIM_OC3_SetConfig+0x10c>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d113      	bne.n	8009a0e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80099ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80099f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	695b      	ldr	r3, [r3, #20]
 80099fa:	011b      	lsls	r3, r3, #4
 80099fc:	693a      	ldr	r2, [r7, #16]
 80099fe:	4313      	orrs	r3, r2
 8009a00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	699b      	ldr	r3, [r3, #24]
 8009a06:	011b      	lsls	r3, r3, #4
 8009a08:	693a      	ldr	r2, [r7, #16]
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	693a      	ldr	r2, [r7, #16]
 8009a12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	68fa      	ldr	r2, [r7, #12]
 8009a18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	685a      	ldr	r2, [r3, #4]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	697a      	ldr	r2, [r7, #20]
 8009a26:	621a      	str	r2, [r3, #32]
}
 8009a28:	bf00      	nop
 8009a2a:	371c      	adds	r7, #28
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr
 8009a34:	40012c00 	.word	0x40012c00
 8009a38:	40013400 	.word	0x40013400
 8009a3c:	40014000 	.word	0x40014000
 8009a40:	40014400 	.word	0x40014400
 8009a44:	40014800 	.word	0x40014800

08009a48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b087      	sub	sp, #28
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6a1b      	ldr	r3, [r3, #32]
 8009a56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6a1b      	ldr	r3, [r3, #32]
 8009a62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	685b      	ldr	r3, [r3, #4]
 8009a68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	69db      	ldr	r3, [r3, #28]
 8009a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009a76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	021b      	lsls	r3, r3, #8
 8009a8a:	68fa      	ldr	r2, [r7, #12]
 8009a8c:	4313      	orrs	r3, r2
 8009a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009a96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	689b      	ldr	r3, [r3, #8]
 8009a9c:	031b      	lsls	r3, r3, #12
 8009a9e:	693a      	ldr	r2, [r7, #16]
 8009aa0:	4313      	orrs	r3, r2
 8009aa2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	4a18      	ldr	r2, [pc, #96]	; (8009b08 <TIM_OC4_SetConfig+0xc0>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d00f      	beq.n	8009acc <TIM_OC4_SetConfig+0x84>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	4a17      	ldr	r2, [pc, #92]	; (8009b0c <TIM_OC4_SetConfig+0xc4>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d00b      	beq.n	8009acc <TIM_OC4_SetConfig+0x84>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	4a16      	ldr	r2, [pc, #88]	; (8009b10 <TIM_OC4_SetConfig+0xc8>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d007      	beq.n	8009acc <TIM_OC4_SetConfig+0x84>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	4a15      	ldr	r2, [pc, #84]	; (8009b14 <TIM_OC4_SetConfig+0xcc>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d003      	beq.n	8009acc <TIM_OC4_SetConfig+0x84>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	4a14      	ldr	r2, [pc, #80]	; (8009b18 <TIM_OC4_SetConfig+0xd0>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d109      	bne.n	8009ae0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ad2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	695b      	ldr	r3, [r3, #20]
 8009ad8:	019b      	lsls	r3, r3, #6
 8009ada:	697a      	ldr	r2, [r7, #20]
 8009adc:	4313      	orrs	r3, r2
 8009ade:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	697a      	ldr	r2, [r7, #20]
 8009ae4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	68fa      	ldr	r2, [r7, #12]
 8009aea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	685a      	ldr	r2, [r3, #4]
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	693a      	ldr	r2, [r7, #16]
 8009af8:	621a      	str	r2, [r3, #32]
}
 8009afa:	bf00      	nop
 8009afc:	371c      	adds	r7, #28
 8009afe:	46bd      	mov	sp, r7
 8009b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b04:	4770      	bx	lr
 8009b06:	bf00      	nop
 8009b08:	40012c00 	.word	0x40012c00
 8009b0c:	40013400 	.word	0x40013400
 8009b10:	40014000 	.word	0x40014000
 8009b14:	40014400 	.word	0x40014400
 8009b18:	40014800 	.word	0x40014800

08009b1c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b087      	sub	sp, #28
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
 8009b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6a1b      	ldr	r3, [r3, #32]
 8009b2a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6a1b      	ldr	r3, [r3, #32]
 8009b36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	68fa      	ldr	r2, [r7, #12]
 8009b56:	4313      	orrs	r3, r2
 8009b58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009b60:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	689b      	ldr	r3, [r3, #8]
 8009b66:	041b      	lsls	r3, r3, #16
 8009b68:	693a      	ldr	r2, [r7, #16]
 8009b6a:	4313      	orrs	r3, r2
 8009b6c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	4a17      	ldr	r2, [pc, #92]	; (8009bd0 <TIM_OC5_SetConfig+0xb4>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d00f      	beq.n	8009b96 <TIM_OC5_SetConfig+0x7a>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	4a16      	ldr	r2, [pc, #88]	; (8009bd4 <TIM_OC5_SetConfig+0xb8>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d00b      	beq.n	8009b96 <TIM_OC5_SetConfig+0x7a>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	4a15      	ldr	r2, [pc, #84]	; (8009bd8 <TIM_OC5_SetConfig+0xbc>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d007      	beq.n	8009b96 <TIM_OC5_SetConfig+0x7a>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	4a14      	ldr	r2, [pc, #80]	; (8009bdc <TIM_OC5_SetConfig+0xc0>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d003      	beq.n	8009b96 <TIM_OC5_SetConfig+0x7a>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	4a13      	ldr	r2, [pc, #76]	; (8009be0 <TIM_OC5_SetConfig+0xc4>)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d109      	bne.n	8009baa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b9c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	695b      	ldr	r3, [r3, #20]
 8009ba2:	021b      	lsls	r3, r3, #8
 8009ba4:	697a      	ldr	r2, [r7, #20]
 8009ba6:	4313      	orrs	r3, r2
 8009ba8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	697a      	ldr	r2, [r7, #20]
 8009bae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	68fa      	ldr	r2, [r7, #12]
 8009bb4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	685a      	ldr	r2, [r3, #4]
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	693a      	ldr	r2, [r7, #16]
 8009bc2:	621a      	str	r2, [r3, #32]
}
 8009bc4:	bf00      	nop
 8009bc6:	371c      	adds	r7, #28
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bce:	4770      	bx	lr
 8009bd0:	40012c00 	.word	0x40012c00
 8009bd4:	40013400 	.word	0x40013400
 8009bd8:	40014000 	.word	0x40014000
 8009bdc:	40014400 	.word	0x40014400
 8009be0:	40014800 	.word	0x40014800

08009be4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b087      	sub	sp, #28
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6a1b      	ldr	r3, [r3, #32]
 8009bf2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6a1b      	ldr	r3, [r3, #32]
 8009bfe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	685b      	ldr	r3, [r3, #4]
 8009c04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009c12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	021b      	lsls	r3, r3, #8
 8009c1e:	68fa      	ldr	r2, [r7, #12]
 8009c20:	4313      	orrs	r3, r2
 8009c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009c2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	689b      	ldr	r3, [r3, #8]
 8009c30:	051b      	lsls	r3, r3, #20
 8009c32:	693a      	ldr	r2, [r7, #16]
 8009c34:	4313      	orrs	r3, r2
 8009c36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	4a18      	ldr	r2, [pc, #96]	; (8009c9c <TIM_OC6_SetConfig+0xb8>)
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d00f      	beq.n	8009c60 <TIM_OC6_SetConfig+0x7c>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	4a17      	ldr	r2, [pc, #92]	; (8009ca0 <TIM_OC6_SetConfig+0xbc>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d00b      	beq.n	8009c60 <TIM_OC6_SetConfig+0x7c>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	4a16      	ldr	r2, [pc, #88]	; (8009ca4 <TIM_OC6_SetConfig+0xc0>)
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d007      	beq.n	8009c60 <TIM_OC6_SetConfig+0x7c>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	4a15      	ldr	r2, [pc, #84]	; (8009ca8 <TIM_OC6_SetConfig+0xc4>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d003      	beq.n	8009c60 <TIM_OC6_SetConfig+0x7c>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	4a14      	ldr	r2, [pc, #80]	; (8009cac <TIM_OC6_SetConfig+0xc8>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d109      	bne.n	8009c74 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009c66:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	695b      	ldr	r3, [r3, #20]
 8009c6c:	029b      	lsls	r3, r3, #10
 8009c6e:	697a      	ldr	r2, [r7, #20]
 8009c70:	4313      	orrs	r3, r2
 8009c72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	697a      	ldr	r2, [r7, #20]
 8009c78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	68fa      	ldr	r2, [r7, #12]
 8009c7e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	685a      	ldr	r2, [r3, #4]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	693a      	ldr	r2, [r7, #16]
 8009c8c:	621a      	str	r2, [r3, #32]
}
 8009c8e:	bf00      	nop
 8009c90:	371c      	adds	r7, #28
 8009c92:	46bd      	mov	sp, r7
 8009c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c98:	4770      	bx	lr
 8009c9a:	bf00      	nop
 8009c9c:	40012c00 	.word	0x40012c00
 8009ca0:	40013400 	.word	0x40013400
 8009ca4:	40014000 	.word	0x40014000
 8009ca8:	40014400 	.word	0x40014400
 8009cac:	40014800 	.word	0x40014800

08009cb0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b087      	sub	sp, #28
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	60f8      	str	r0, [r7, #12]
 8009cb8:	60b9      	str	r1, [r7, #8]
 8009cba:	607a      	str	r2, [r7, #4]
 8009cbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	6a1b      	ldr	r3, [r3, #32]
 8009cc2:	f023 0201 	bic.w	r2, r3, #1
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	699b      	ldr	r3, [r3, #24]
 8009cce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	6a1b      	ldr	r3, [r3, #32]
 8009cd4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	4a24      	ldr	r2, [pc, #144]	; (8009d6c <TIM_TI1_SetConfig+0xbc>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d013      	beq.n	8009d06 <TIM_TI1_SetConfig+0x56>
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ce4:	d00f      	beq.n	8009d06 <TIM_TI1_SetConfig+0x56>
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	4a21      	ldr	r2, [pc, #132]	; (8009d70 <TIM_TI1_SetConfig+0xc0>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d00b      	beq.n	8009d06 <TIM_TI1_SetConfig+0x56>
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	4a20      	ldr	r2, [pc, #128]	; (8009d74 <TIM_TI1_SetConfig+0xc4>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d007      	beq.n	8009d06 <TIM_TI1_SetConfig+0x56>
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	4a1f      	ldr	r2, [pc, #124]	; (8009d78 <TIM_TI1_SetConfig+0xc8>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d003      	beq.n	8009d06 <TIM_TI1_SetConfig+0x56>
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	4a1e      	ldr	r2, [pc, #120]	; (8009d7c <TIM_TI1_SetConfig+0xcc>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d101      	bne.n	8009d0a <TIM_TI1_SetConfig+0x5a>
 8009d06:	2301      	movs	r3, #1
 8009d08:	e000      	b.n	8009d0c <TIM_TI1_SetConfig+0x5c>
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d008      	beq.n	8009d22 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	f023 0303 	bic.w	r3, r3, #3
 8009d16:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009d18:	697a      	ldr	r2, [r7, #20]
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	617b      	str	r3, [r7, #20]
 8009d20:	e003      	b.n	8009d2a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	f043 0301 	orr.w	r3, r3, #1
 8009d28:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009d30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	011b      	lsls	r3, r3, #4
 8009d36:	b2db      	uxtb	r3, r3
 8009d38:	697a      	ldr	r2, [r7, #20]
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	f023 030a 	bic.w	r3, r3, #10
 8009d44:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	f003 030a 	and.w	r3, r3, #10
 8009d4c:	693a      	ldr	r2, [r7, #16]
 8009d4e:	4313      	orrs	r3, r2
 8009d50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	697a      	ldr	r2, [r7, #20]
 8009d56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	693a      	ldr	r2, [r7, #16]
 8009d5c:	621a      	str	r2, [r3, #32]
}
 8009d5e:	bf00      	nop
 8009d60:	371c      	adds	r7, #28
 8009d62:	46bd      	mov	sp, r7
 8009d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d68:	4770      	bx	lr
 8009d6a:	bf00      	nop
 8009d6c:	40012c00 	.word	0x40012c00
 8009d70:	40000400 	.word	0x40000400
 8009d74:	40000800 	.word	0x40000800
 8009d78:	40013400 	.word	0x40013400
 8009d7c:	40014000 	.word	0x40014000

08009d80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d80:	b480      	push	{r7}
 8009d82:	b087      	sub	sp, #28
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	60f8      	str	r0, [r7, #12]
 8009d88:	60b9      	str	r1, [r7, #8]
 8009d8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	6a1b      	ldr	r3, [r3, #32]
 8009d90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	6a1b      	ldr	r3, [r3, #32]
 8009d96:	f023 0201 	bic.w	r2, r3, #1
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	699b      	ldr	r3, [r3, #24]
 8009da2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009da4:	693b      	ldr	r3, [r7, #16]
 8009da6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009daa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	011b      	lsls	r3, r3, #4
 8009db0:	693a      	ldr	r2, [r7, #16]
 8009db2:	4313      	orrs	r3, r2
 8009db4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	f023 030a 	bic.w	r3, r3, #10
 8009dbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009dbe:	697a      	ldr	r2, [r7, #20]
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	693a      	ldr	r2, [r7, #16]
 8009dca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	697a      	ldr	r2, [r7, #20]
 8009dd0:	621a      	str	r2, [r3, #32]
}
 8009dd2:	bf00      	nop
 8009dd4:	371c      	adds	r7, #28
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ddc:	4770      	bx	lr

08009dde <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009dde:	b480      	push	{r7}
 8009de0:	b087      	sub	sp, #28
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	60f8      	str	r0, [r7, #12]
 8009de6:	60b9      	str	r1, [r7, #8]
 8009de8:	607a      	str	r2, [r7, #4]
 8009dea:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	6a1b      	ldr	r3, [r3, #32]
 8009df0:	f023 0210 	bic.w	r2, r3, #16
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	699b      	ldr	r3, [r3, #24]
 8009dfc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	6a1b      	ldr	r3, [r3, #32]
 8009e02:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e0a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	021b      	lsls	r3, r3, #8
 8009e10:	697a      	ldr	r2, [r7, #20]
 8009e12:	4313      	orrs	r3, r2
 8009e14:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009e1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	031b      	lsls	r3, r3, #12
 8009e22:	b29b      	uxth	r3, r3
 8009e24:	697a      	ldr	r2, [r7, #20]
 8009e26:	4313      	orrs	r3, r2
 8009e28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009e30:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	011b      	lsls	r3, r3, #4
 8009e36:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009e3a:	693a      	ldr	r2, [r7, #16]
 8009e3c:	4313      	orrs	r3, r2
 8009e3e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	697a      	ldr	r2, [r7, #20]
 8009e44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	693a      	ldr	r2, [r7, #16]
 8009e4a:	621a      	str	r2, [r3, #32]
}
 8009e4c:	bf00      	nop
 8009e4e:	371c      	adds	r7, #28
 8009e50:	46bd      	mov	sp, r7
 8009e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e56:	4770      	bx	lr

08009e58 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b087      	sub	sp, #28
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	60f8      	str	r0, [r7, #12]
 8009e60:	60b9      	str	r1, [r7, #8]
 8009e62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	6a1b      	ldr	r3, [r3, #32]
 8009e68:	f023 0210 	bic.w	r2, r3, #16
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	699b      	ldr	r3, [r3, #24]
 8009e74:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	6a1b      	ldr	r3, [r3, #32]
 8009e7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009e82:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	031b      	lsls	r3, r3, #12
 8009e88:	697a      	ldr	r2, [r7, #20]
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009e8e:	693b      	ldr	r3, [r7, #16]
 8009e90:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009e94:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	011b      	lsls	r3, r3, #4
 8009e9a:	693a      	ldr	r2, [r7, #16]
 8009e9c:	4313      	orrs	r3, r2
 8009e9e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	697a      	ldr	r2, [r7, #20]
 8009ea4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	693a      	ldr	r2, [r7, #16]
 8009eaa:	621a      	str	r2, [r3, #32]
}
 8009eac:	bf00      	nop
 8009eae:	371c      	adds	r7, #28
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb6:	4770      	bx	lr

08009eb8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b087      	sub	sp, #28
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	60f8      	str	r0, [r7, #12]
 8009ec0:	60b9      	str	r1, [r7, #8]
 8009ec2:	607a      	str	r2, [r7, #4]
 8009ec4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	6a1b      	ldr	r3, [r3, #32]
 8009eca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	69db      	ldr	r3, [r3, #28]
 8009ed6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	6a1b      	ldr	r3, [r3, #32]
 8009edc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	f023 0303 	bic.w	r3, r3, #3
 8009ee4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009ee6:	697a      	ldr	r2, [r7, #20]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	4313      	orrs	r3, r2
 8009eec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009ef4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	011b      	lsls	r3, r3, #4
 8009efa:	b2db      	uxtb	r3, r3
 8009efc:	697a      	ldr	r2, [r7, #20]
 8009efe:	4313      	orrs	r3, r2
 8009f00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8009f08:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	021b      	lsls	r3, r3, #8
 8009f0e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8009f12:	693a      	ldr	r2, [r7, #16]
 8009f14:	4313      	orrs	r3, r2
 8009f16:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	697a      	ldr	r2, [r7, #20]
 8009f1c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	693a      	ldr	r2, [r7, #16]
 8009f22:	621a      	str	r2, [r3, #32]
}
 8009f24:	bf00      	nop
 8009f26:	371c      	adds	r7, #28
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr

08009f30 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b087      	sub	sp, #28
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	60f8      	str	r0, [r7, #12]
 8009f38:	60b9      	str	r1, [r7, #8]
 8009f3a:	607a      	str	r2, [r7, #4]
 8009f3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	6a1b      	ldr	r3, [r3, #32]
 8009f42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	69db      	ldr	r3, [r3, #28]
 8009f4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	6a1b      	ldr	r3, [r3, #32]
 8009f54:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f5c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	021b      	lsls	r3, r3, #8
 8009f62:	697a      	ldr	r2, [r7, #20]
 8009f64:	4313      	orrs	r3, r2
 8009f66:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009f6e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	031b      	lsls	r3, r3, #12
 8009f74:	b29b      	uxth	r3, r3
 8009f76:	697a      	ldr	r2, [r7, #20]
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8009f82:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	031b      	lsls	r3, r3, #12
 8009f88:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009f8c:	693a      	ldr	r2, [r7, #16]
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	697a      	ldr	r2, [r7, #20]
 8009f96:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	693a      	ldr	r2, [r7, #16]
 8009f9c:	621a      	str	r2, [r3, #32]
}
 8009f9e:	bf00      	nop
 8009fa0:	371c      	adds	r7, #28
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa8:	4770      	bx	lr

08009faa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009faa:	b480      	push	{r7}
 8009fac:	b085      	sub	sp, #20
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	6078      	str	r0, [r7, #4]
 8009fb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	689b      	ldr	r3, [r3, #8]
 8009fb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009fc2:	683a      	ldr	r2, [r7, #0]
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	4313      	orrs	r3, r2
 8009fc8:	f043 0307 	orr.w	r3, r3, #7
 8009fcc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	68fa      	ldr	r2, [r7, #12]
 8009fd2:	609a      	str	r2, [r3, #8]
}
 8009fd4:	bf00      	nop
 8009fd6:	3714      	adds	r7, #20
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fde:	4770      	bx	lr

08009fe0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b087      	sub	sp, #28
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	60f8      	str	r0, [r7, #12]
 8009fe8:	60b9      	str	r1, [r7, #8]
 8009fea:	607a      	str	r2, [r7, #4]
 8009fec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	689b      	ldr	r3, [r3, #8]
 8009ff2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009ffa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	021a      	lsls	r2, r3, #8
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	431a      	orrs	r2, r3
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	4313      	orrs	r3, r2
 800a008:	697a      	ldr	r2, [r7, #20]
 800a00a:	4313      	orrs	r3, r2
 800a00c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	697a      	ldr	r2, [r7, #20]
 800a012:	609a      	str	r2, [r3, #8]
}
 800a014:	bf00      	nop
 800a016:	371c      	adds	r7, #28
 800a018:	46bd      	mov	sp, r7
 800a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01e:	4770      	bx	lr

0800a020 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a020:	b480      	push	{r7}
 800a022:	b087      	sub	sp, #28
 800a024:	af00      	add	r7, sp, #0
 800a026:	60f8      	str	r0, [r7, #12]
 800a028:	60b9      	str	r1, [r7, #8]
 800a02a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	f003 031f 	and.w	r3, r3, #31
 800a032:	2201      	movs	r2, #1
 800a034:	fa02 f303 	lsl.w	r3, r2, r3
 800a038:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	6a1a      	ldr	r2, [r3, #32]
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	43db      	mvns	r3, r3
 800a042:	401a      	ands	r2, r3
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	6a1a      	ldr	r2, [r3, #32]
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	f003 031f 	and.w	r3, r3, #31
 800a052:	6879      	ldr	r1, [r7, #4]
 800a054:	fa01 f303 	lsl.w	r3, r1, r3
 800a058:	431a      	orrs	r2, r3
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	621a      	str	r2, [r3, #32]
}
 800a05e:	bf00      	nop
 800a060:	371c      	adds	r7, #28
 800a062:	46bd      	mov	sp, r7
 800a064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a068:	4770      	bx	lr
	...

0800a06c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b084      	sub	sp, #16
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d109      	bne.n	800a090 <HAL_TIMEx_PWMN_Start+0x24>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a082:	b2db      	uxtb	r3, r3
 800a084:	2b01      	cmp	r3, #1
 800a086:	bf14      	ite	ne
 800a088:	2301      	movne	r3, #1
 800a08a:	2300      	moveq	r3, #0
 800a08c:	b2db      	uxtb	r3, r3
 800a08e:	e022      	b.n	800a0d6 <HAL_TIMEx_PWMN_Start+0x6a>
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	2b04      	cmp	r3, #4
 800a094:	d109      	bne.n	800a0aa <HAL_TIMEx_PWMN_Start+0x3e>
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a09c:	b2db      	uxtb	r3, r3
 800a09e:	2b01      	cmp	r3, #1
 800a0a0:	bf14      	ite	ne
 800a0a2:	2301      	movne	r3, #1
 800a0a4:	2300      	moveq	r3, #0
 800a0a6:	b2db      	uxtb	r3, r3
 800a0a8:	e015      	b.n	800a0d6 <HAL_TIMEx_PWMN_Start+0x6a>
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	2b08      	cmp	r3, #8
 800a0ae:	d109      	bne.n	800a0c4 <HAL_TIMEx_PWMN_Start+0x58>
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a0b6:	b2db      	uxtb	r3, r3
 800a0b8:	2b01      	cmp	r3, #1
 800a0ba:	bf14      	ite	ne
 800a0bc:	2301      	movne	r3, #1
 800a0be:	2300      	moveq	r3, #0
 800a0c0:	b2db      	uxtb	r3, r3
 800a0c2:	e008      	b.n	800a0d6 <HAL_TIMEx_PWMN_Start+0x6a>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800a0ca:	b2db      	uxtb	r3, r3
 800a0cc:	2b01      	cmp	r3, #1
 800a0ce:	bf14      	ite	ne
 800a0d0:	2301      	movne	r3, #1
 800a0d2:	2300      	moveq	r3, #0
 800a0d4:	b2db      	uxtb	r3, r3
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d001      	beq.n	800a0de <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800a0da:	2301      	movs	r3, #1
 800a0dc:	e069      	b.n	800a1b2 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d104      	bne.n	800a0ee <HAL_TIMEx_PWMN_Start+0x82>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2202      	movs	r2, #2
 800a0e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a0ec:	e013      	b.n	800a116 <HAL_TIMEx_PWMN_Start+0xaa>
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	2b04      	cmp	r3, #4
 800a0f2:	d104      	bne.n	800a0fe <HAL_TIMEx_PWMN_Start+0x92>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2202      	movs	r2, #2
 800a0f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a0fc:	e00b      	b.n	800a116 <HAL_TIMEx_PWMN_Start+0xaa>
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	2b08      	cmp	r3, #8
 800a102:	d104      	bne.n	800a10e <HAL_TIMEx_PWMN_Start+0xa2>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2202      	movs	r2, #2
 800a108:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a10c:	e003      	b.n	800a116 <HAL_TIMEx_PWMN_Start+0xaa>
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2202      	movs	r2, #2
 800a112:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	2204      	movs	r2, #4
 800a11c:	6839      	ldr	r1, [r7, #0]
 800a11e:	4618      	mov	r0, r3
 800a120:	f000 f9d2 	bl	800a4c8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a132:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	4a20      	ldr	r2, [pc, #128]	; (800a1bc <HAL_TIMEx_PWMN_Start+0x150>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d018      	beq.n	800a170 <HAL_TIMEx_PWMN_Start+0x104>
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a146:	d013      	beq.n	800a170 <HAL_TIMEx_PWMN_Start+0x104>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	4a1c      	ldr	r2, [pc, #112]	; (800a1c0 <HAL_TIMEx_PWMN_Start+0x154>)
 800a14e:	4293      	cmp	r3, r2
 800a150:	d00e      	beq.n	800a170 <HAL_TIMEx_PWMN_Start+0x104>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	4a1b      	ldr	r2, [pc, #108]	; (800a1c4 <HAL_TIMEx_PWMN_Start+0x158>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	d009      	beq.n	800a170 <HAL_TIMEx_PWMN_Start+0x104>
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4a19      	ldr	r2, [pc, #100]	; (800a1c8 <HAL_TIMEx_PWMN_Start+0x15c>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d004      	beq.n	800a170 <HAL_TIMEx_PWMN_Start+0x104>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	4a18      	ldr	r2, [pc, #96]	; (800a1cc <HAL_TIMEx_PWMN_Start+0x160>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d115      	bne.n	800a19c <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	689a      	ldr	r2, [r3, #8]
 800a176:	4b16      	ldr	r3, [pc, #88]	; (800a1d0 <HAL_TIMEx_PWMN_Start+0x164>)
 800a178:	4013      	ands	r3, r2
 800a17a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	2b06      	cmp	r3, #6
 800a180:	d015      	beq.n	800a1ae <HAL_TIMEx_PWMN_Start+0x142>
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a188:	d011      	beq.n	800a1ae <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	681a      	ldr	r2, [r3, #0]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f042 0201 	orr.w	r2, r2, #1
 800a198:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a19a:	e008      	b.n	800a1ae <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	681a      	ldr	r2, [r3, #0]
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f042 0201 	orr.w	r2, r2, #1
 800a1aa:	601a      	str	r2, [r3, #0]
 800a1ac:	e000      	b.n	800a1b0 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a1b0:	2300      	movs	r3, #0
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3710      	adds	r7, #16
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}
 800a1ba:	bf00      	nop
 800a1bc:	40012c00 	.word	0x40012c00
 800a1c0:	40000400 	.word	0x40000400
 800a1c4:	40000800 	.word	0x40000800
 800a1c8:	40013400 	.word	0x40013400
 800a1cc:	40014000 	.word	0x40014000
 800a1d0:	00010007 	.word	0x00010007

0800a1d4 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b082      	sub	sp, #8
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
 800a1dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	6839      	ldr	r1, [r7, #0]
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f000 f96e 	bl	800a4c8 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	6a1a      	ldr	r2, [r3, #32]
 800a1f2:	f241 1311 	movw	r3, #4369	; 0x1111
 800a1f6:	4013      	ands	r3, r2
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d10f      	bne.n	800a21c <HAL_TIMEx_PWMN_Stop+0x48>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	6a1a      	ldr	r2, [r3, #32]
 800a202:	f240 4344 	movw	r3, #1092	; 0x444
 800a206:	4013      	ands	r3, r2
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d107      	bne.n	800a21c <HAL_TIMEx_PWMN_Stop+0x48>
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a21a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	6a1a      	ldr	r2, [r3, #32]
 800a222:	f241 1311 	movw	r3, #4369	; 0x1111
 800a226:	4013      	ands	r3, r2
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d10f      	bne.n	800a24c <HAL_TIMEx_PWMN_Stop+0x78>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	6a1a      	ldr	r2, [r3, #32]
 800a232:	f240 4344 	movw	r3, #1092	; 0x444
 800a236:	4013      	ands	r3, r2
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d107      	bne.n	800a24c <HAL_TIMEx_PWMN_Stop+0x78>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	681a      	ldr	r2, [r3, #0]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f022 0201 	bic.w	r2, r2, #1
 800a24a:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d104      	bne.n	800a25c <HAL_TIMEx_PWMN_Stop+0x88>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2201      	movs	r2, #1
 800a256:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a25a:	e013      	b.n	800a284 <HAL_TIMEx_PWMN_Stop+0xb0>
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	2b04      	cmp	r3, #4
 800a260:	d104      	bne.n	800a26c <HAL_TIMEx_PWMN_Stop+0x98>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2201      	movs	r2, #1
 800a266:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a26a:	e00b      	b.n	800a284 <HAL_TIMEx_PWMN_Stop+0xb0>
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	2b08      	cmp	r3, #8
 800a270:	d104      	bne.n	800a27c <HAL_TIMEx_PWMN_Stop+0xa8>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2201      	movs	r2, #1
 800a276:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a27a:	e003      	b.n	800a284 <HAL_TIMEx_PWMN_Stop+0xb0>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2201      	movs	r2, #1
 800a280:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 800a284:	2300      	movs	r3, #0
}
 800a286:	4618      	mov	r0, r3
 800a288:	3708      	adds	r7, #8
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}
	...

0800a290 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a290:	b480      	push	{r7}
 800a292:	b085      	sub	sp, #20
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2a0:	2b01      	cmp	r3, #1
 800a2a2:	d101      	bne.n	800a2a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a2a4:	2302      	movs	r3, #2
 800a2a6:	e063      	b.n	800a370 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2202      	movs	r2, #2
 800a2b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	689b      	ldr	r3, [r3, #8]
 800a2c6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	4a2b      	ldr	r2, [pc, #172]	; (800a37c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d004      	beq.n	800a2dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	4a2a      	ldr	r2, [pc, #168]	; (800a380 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	d108      	bne.n	800a2ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a2e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	68fa      	ldr	r2, [r7, #12]
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	68fa      	ldr	r2, [r7, #12]
 800a2fc:	4313      	orrs	r3, r2
 800a2fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	68fa      	ldr	r2, [r7, #12]
 800a306:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	4a1b      	ldr	r2, [pc, #108]	; (800a37c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d018      	beq.n	800a344 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a31a:	d013      	beq.n	800a344 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4a18      	ldr	r2, [pc, #96]	; (800a384 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d00e      	beq.n	800a344 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	4a17      	ldr	r2, [pc, #92]	; (800a388 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d009      	beq.n	800a344 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	4a12      	ldr	r2, [pc, #72]	; (800a380 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a336:	4293      	cmp	r3, r2
 800a338:	d004      	beq.n	800a344 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	4a13      	ldr	r2, [pc, #76]	; (800a38c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d10c      	bne.n	800a35e <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a34a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	689b      	ldr	r3, [r3, #8]
 800a350:	68ba      	ldr	r2, [r7, #8]
 800a352:	4313      	orrs	r3, r2
 800a354:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	68ba      	ldr	r2, [r7, #8]
 800a35c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2201      	movs	r2, #1
 800a362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2200      	movs	r2, #0
 800a36a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a36e:	2300      	movs	r3, #0
}
 800a370:	4618      	mov	r0, r3
 800a372:	3714      	adds	r7, #20
 800a374:	46bd      	mov	sp, r7
 800a376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37a:	4770      	bx	lr
 800a37c:	40012c00 	.word	0x40012c00
 800a380:	40013400 	.word	0x40013400
 800a384:	40000400 	.word	0x40000400
 800a388:	40000800 	.word	0x40000800
 800a38c:	40014000 	.word	0x40014000

0800a390 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a390:	b480      	push	{r7}
 800a392:	b085      	sub	sp, #20
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
 800a398:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a39a:	2300      	movs	r3, #0
 800a39c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3a4:	2b01      	cmp	r3, #1
 800a3a6:	d101      	bne.n	800a3ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a3a8:	2302      	movs	r3, #2
 800a3aa:	e065      	b.n	800a478 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	68db      	ldr	r3, [r3, #12]
 800a3be:	4313      	orrs	r3, r2
 800a3c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	689b      	ldr	r3, [r3, #8]
 800a3cc:	4313      	orrs	r3, r2
 800a3ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	685b      	ldr	r3, [r3, #4]
 800a3da:	4313      	orrs	r3, r2
 800a3dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	691b      	ldr	r3, [r3, #16]
 800a3f6:	4313      	orrs	r3, r2
 800a3f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	695b      	ldr	r3, [r3, #20]
 800a404:	4313      	orrs	r3, r2
 800a406:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a412:	4313      	orrs	r3, r2
 800a414:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	699b      	ldr	r3, [r3, #24]
 800a420:	041b      	lsls	r3, r3, #16
 800a422:	4313      	orrs	r3, r2
 800a424:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	4a16      	ldr	r2, [pc, #88]	; (800a484 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a42c:	4293      	cmp	r3, r2
 800a42e:	d004      	beq.n	800a43a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	4a14      	ldr	r2, [pc, #80]	; (800a488 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d115      	bne.n	800a466 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a444:	051b      	lsls	r3, r3, #20
 800a446:	4313      	orrs	r3, r2
 800a448:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	69db      	ldr	r3, [r3, #28]
 800a454:	4313      	orrs	r3, r2
 800a456:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	6a1b      	ldr	r3, [r3, #32]
 800a462:	4313      	orrs	r3, r2
 800a464:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	68fa      	ldr	r2, [r7, #12]
 800a46c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2200      	movs	r2, #0
 800a472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a476:	2300      	movs	r3, #0
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3714      	adds	r7, #20
 800a47c:	46bd      	mov	sp, r7
 800a47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a482:	4770      	bx	lr
 800a484:	40012c00 	.word	0x40012c00
 800a488:	40013400 	.word	0x40013400

0800a48c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b083      	sub	sp, #12
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a494:	bf00      	nop
 800a496:	370c      	adds	r7, #12
 800a498:	46bd      	mov	sp, r7
 800a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49e:	4770      	bx	lr

0800a4a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b083      	sub	sp, #12
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a4a8:	bf00      	nop
 800a4aa:	370c      	adds	r7, #12
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr

0800a4b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b083      	sub	sp, #12
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a4bc:	bf00      	nop
 800a4be:	370c      	adds	r7, #12
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c6:	4770      	bx	lr

0800a4c8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b087      	sub	sp, #28
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	60f8      	str	r0, [r7, #12]
 800a4d0:	60b9      	str	r1, [r7, #8]
 800a4d2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	f003 031f 	and.w	r3, r3, #31
 800a4da:	2204      	movs	r2, #4
 800a4dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a4e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	6a1a      	ldr	r2, [r3, #32]
 800a4e6:	697b      	ldr	r3, [r7, #20]
 800a4e8:	43db      	mvns	r3, r3
 800a4ea:	401a      	ands	r2, r3
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	6a1a      	ldr	r2, [r3, #32]
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	f003 031f 	and.w	r3, r3, #31
 800a4fa:	6879      	ldr	r1, [r7, #4]
 800a4fc:	fa01 f303 	lsl.w	r3, r1, r3
 800a500:	431a      	orrs	r2, r3
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	621a      	str	r2, [r3, #32]
}
 800a506:	bf00      	nop
 800a508:	371c      	adds	r7, #28
 800a50a:	46bd      	mov	sp, r7
 800a50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a510:	4770      	bx	lr

0800a512 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a512:	b580      	push	{r7, lr}
 800a514:	b082      	sub	sp, #8
 800a516:	af00      	add	r7, sp, #0
 800a518:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d101      	bne.n	800a524 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a520:	2301      	movs	r3, #1
 800a522:	e040      	b.n	800a5a6 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d106      	bne.n	800a53a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2200      	movs	r2, #0
 800a530:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f7f8 fc3d 	bl	8002db4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2224      	movs	r2, #36	; 0x24
 800a53e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	681a      	ldr	r2, [r3, #0]
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f022 0201 	bic.w	r2, r2, #1
 800a54e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f000 fbb7 	bl	800acc4 <UART_SetConfig>
 800a556:	4603      	mov	r3, r0
 800a558:	2b01      	cmp	r3, #1
 800a55a:	d101      	bne.n	800a560 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a55c:	2301      	movs	r3, #1
 800a55e:	e022      	b.n	800a5a6 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a564:	2b00      	cmp	r3, #0
 800a566:	d002      	beq.n	800a56e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f000 fd7f 	bl	800b06c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	685a      	ldr	r2, [r3, #4]
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a57c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	689a      	ldr	r2, [r3, #8]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a58c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	681a      	ldr	r2, [r3, #0]
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f042 0201 	orr.w	r2, r2, #1
 800a59c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f000 fe06 	bl	800b1b0 <UART_CheckIdleState>
 800a5a4:	4603      	mov	r3, r0
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3708      	adds	r7, #8
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}
	...

0800a5b0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b08a      	sub	sp, #40	; 0x28
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	60f8      	str	r0, [r7, #12]
 800a5b8:	60b9      	str	r1, [r7, #8]
 800a5ba:	4613      	mov	r3, r2
 800a5bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a5c2:	2b20      	cmp	r3, #32
 800a5c4:	d165      	bne.n	800a692 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d002      	beq.n	800a5d2 <HAL_UART_Transmit_DMA+0x22>
 800a5cc:	88fb      	ldrh	r3, [r7, #6]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d101      	bne.n	800a5d6 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	e05e      	b.n	800a694 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	68ba      	ldr	r2, [r7, #8]
 800a5da:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	88fa      	ldrh	r2, [r7, #6]
 800a5e0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	88fa      	ldrh	r2, [r7, #6]
 800a5e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	2221      	movs	r2, #33	; 0x21
 800a5f8:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d027      	beq.n	800a652 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a606:	4a25      	ldr	r2, [pc, #148]	; (800a69c <HAL_UART_Transmit_DMA+0xec>)
 800a608:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a60e:	4a24      	ldr	r2, [pc, #144]	; (800a6a0 <HAL_UART_Transmit_DMA+0xf0>)
 800a610:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a616:	4a23      	ldr	r2, [pc, #140]	; (800a6a4 <HAL_UART_Transmit_DMA+0xf4>)
 800a618:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a61e:	2200      	movs	r2, #0
 800a620:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a62a:	4619      	mov	r1, r3
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	3328      	adds	r3, #40	; 0x28
 800a632:	461a      	mov	r2, r3
 800a634:	88fb      	ldrh	r3, [r7, #6]
 800a636:	f7fa feb9 	bl	80053ac <HAL_DMA_Start_IT>
 800a63a:	4603      	mov	r3, r0
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d008      	beq.n	800a652 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	2210      	movs	r2, #16
 800a644:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	2220      	movs	r2, #32
 800a64c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 800a64e:	2301      	movs	r3, #1
 800a650:	e020      	b.n	800a694 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	2240      	movs	r2, #64	; 0x40
 800a658:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	3308      	adds	r3, #8
 800a660:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	e853 3f00 	ldrex	r3, [r3]
 800a668:	613b      	str	r3, [r7, #16]
   return(result);
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a670:	627b      	str	r3, [r7, #36]	; 0x24
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	3308      	adds	r3, #8
 800a678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a67a:	623a      	str	r2, [r7, #32]
 800a67c:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a67e:	69f9      	ldr	r1, [r7, #28]
 800a680:	6a3a      	ldr	r2, [r7, #32]
 800a682:	e841 2300 	strex	r3, r2, [r1]
 800a686:	61bb      	str	r3, [r7, #24]
   return(result);
 800a688:	69bb      	ldr	r3, [r7, #24]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d1e5      	bne.n	800a65a <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800a68e:	2300      	movs	r3, #0
 800a690:	e000      	b.n	800a694 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800a692:	2302      	movs	r3, #2
  }
}
 800a694:	4618      	mov	r0, r3
 800a696:	3728      	adds	r7, #40	; 0x28
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}
 800a69c:	0800b625 	.word	0x0800b625
 800a6a0:	0800b6b9 	.word	0x0800b6b9
 800a6a4:	0800b839 	.word	0x0800b839

0800a6a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b0ba      	sub	sp, #232	; 0xe8
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	69db      	ldr	r3, [r3, #28]
 800a6b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	689b      	ldr	r3, [r3, #8]
 800a6ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a6ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a6d2:	f640 030f 	movw	r3, #2063	; 0x80f
 800a6d6:	4013      	ands	r3, r2
 800a6d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a6dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d115      	bne.n	800a710 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a6e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6e8:	f003 0320 	and.w	r3, r3, #32
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d00f      	beq.n	800a710 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a6f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6f4:	f003 0320 	and.w	r3, r3, #32
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d009      	beq.n	800a710 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a700:	2b00      	cmp	r3, #0
 800a702:	f000 82ab 	beq.w	800ac5c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	4798      	blx	r3
      }
      return;
 800a70e:	e2a5      	b.n	800ac5c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a710:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a714:	2b00      	cmp	r3, #0
 800a716:	f000 8117 	beq.w	800a948 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a71a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a71e:	f003 0301 	and.w	r3, r3, #1
 800a722:	2b00      	cmp	r3, #0
 800a724:	d106      	bne.n	800a734 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a726:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a72a:	4b85      	ldr	r3, [pc, #532]	; (800a940 <HAL_UART_IRQHandler+0x298>)
 800a72c:	4013      	ands	r3, r2
 800a72e:	2b00      	cmp	r3, #0
 800a730:	f000 810a 	beq.w	800a948 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a738:	f003 0301 	and.w	r3, r3, #1
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d011      	beq.n	800a764 <HAL_UART_IRQHandler+0xbc>
 800a740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d00b      	beq.n	800a764 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	2201      	movs	r2, #1
 800a752:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a75a:	f043 0201 	orr.w	r2, r3, #1
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a768:	f003 0302 	and.w	r3, r3, #2
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d011      	beq.n	800a794 <HAL_UART_IRQHandler+0xec>
 800a770:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a774:	f003 0301 	and.w	r3, r3, #1
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d00b      	beq.n	800a794 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	2202      	movs	r2, #2
 800a782:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a78a:	f043 0204 	orr.w	r2, r3, #4
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a798:	f003 0304 	and.w	r3, r3, #4
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d011      	beq.n	800a7c4 <HAL_UART_IRQHandler+0x11c>
 800a7a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a7a4:	f003 0301 	and.w	r3, r3, #1
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d00b      	beq.n	800a7c4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	2204      	movs	r2, #4
 800a7b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a7ba:	f043 0202 	orr.w	r2, r3, #2
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a7c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7c8:	f003 0308 	and.w	r3, r3, #8
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d017      	beq.n	800a800 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a7d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7d4:	f003 0320 	and.w	r3, r3, #32
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d105      	bne.n	800a7e8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a7dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a7e0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d00b      	beq.n	800a800 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	2208      	movs	r2, #8
 800a7ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a7f6:	f043 0208 	orr.w	r2, r3, #8
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a804:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d012      	beq.n	800a832 <HAL_UART_IRQHandler+0x18a>
 800a80c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a810:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a814:	2b00      	cmp	r3, #0
 800a816:	d00c      	beq.n	800a832 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a820:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a828:	f043 0220 	orr.w	r2, r3, #32
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a838:	2b00      	cmp	r3, #0
 800a83a:	f000 8211 	beq.w	800ac60 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a83e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a842:	f003 0320 	and.w	r3, r3, #32
 800a846:	2b00      	cmp	r3, #0
 800a848:	d00d      	beq.n	800a866 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a84a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a84e:	f003 0320 	and.w	r3, r3, #32
 800a852:	2b00      	cmp	r3, #0
 800a854:	d007      	beq.n	800a866 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d003      	beq.n	800a866 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a86c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	689b      	ldr	r3, [r3, #8]
 800a876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a87a:	2b40      	cmp	r3, #64	; 0x40
 800a87c:	d005      	beq.n	800a88a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a87e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a882:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a886:	2b00      	cmp	r3, #0
 800a888:	d04f      	beq.n	800a92a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f000 fe66 	bl	800b55c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	689b      	ldr	r3, [r3, #8]
 800a896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a89a:	2b40      	cmp	r3, #64	; 0x40
 800a89c:	d141      	bne.n	800a922 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	3308      	adds	r3, #8
 800a8a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a8ac:	e853 3f00 	ldrex	r3, [r3]
 800a8b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a8b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a8b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a8bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	3308      	adds	r3, #8
 800a8c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a8ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a8ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a8d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a8da:	e841 2300 	strex	r3, r2, [r1]
 800a8de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a8e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d1d9      	bne.n	800a89e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d013      	beq.n	800a91a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8f6:	4a13      	ldr	r2, [pc, #76]	; (800a944 <HAL_UART_IRQHandler+0x29c>)
 800a8f8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8fe:	4618      	mov	r0, r3
 800a900:	f7fa fdec 	bl	80054dc <HAL_DMA_Abort_IT>
 800a904:	4603      	mov	r3, r0
 800a906:	2b00      	cmp	r3, #0
 800a908:	d017      	beq.n	800a93a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a90e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a910:	687a      	ldr	r2, [r7, #4]
 800a912:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a914:	4610      	mov	r0, r2
 800a916:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a918:	e00f      	b.n	800a93a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f000 f9c8 	bl	800acb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a920:	e00b      	b.n	800a93a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f000 f9c4 	bl	800acb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a928:	e007      	b.n	800a93a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f000 f9c0 	bl	800acb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2200      	movs	r2, #0
 800a934:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800a938:	e192      	b.n	800ac60 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a93a:	bf00      	nop
    return;
 800a93c:	e190      	b.n	800ac60 <HAL_UART_IRQHandler+0x5b8>
 800a93e:	bf00      	nop
 800a940:	04000120 	.word	0x04000120
 800a944:	0800b8b7 	.word	0x0800b8b7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a94c:	2b01      	cmp	r3, #1
 800a94e:	f040 814b 	bne.w	800abe8 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a956:	f003 0310 	and.w	r3, r3, #16
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	f000 8144 	beq.w	800abe8 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a964:	f003 0310 	and.w	r3, r3, #16
 800a968:	2b00      	cmp	r3, #0
 800a96a:	f000 813d 	beq.w	800abe8 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	2210      	movs	r2, #16
 800a974:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	689b      	ldr	r3, [r3, #8]
 800a97c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a980:	2b40      	cmp	r3, #64	; 0x40
 800a982:	f040 80b5 	bne.w	800aaf0 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	685b      	ldr	r3, [r3, #4]
 800a98e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a992:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a996:	2b00      	cmp	r3, #0
 800a998:	f000 8164 	beq.w	800ac64 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a9a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a9a6:	429a      	cmp	r2, r3
 800a9a8:	f080 815c 	bcs.w	800ac64 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a9b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9ba:	699b      	ldr	r3, [r3, #24]
 800a9bc:	2b20      	cmp	r3, #32
 800a9be:	f000 8086 	beq.w	800aace <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a9ce:	e853 3f00 	ldrex	r3, [r3]
 800a9d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a9d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a9da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a9de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a9ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a9f0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9f4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a9f8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a9fc:	e841 2300 	strex	r3, r2, [r1]
 800aa00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800aa04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d1da      	bne.n	800a9c2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	3308      	adds	r3, #8
 800aa12:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa16:	e853 3f00 	ldrex	r3, [r3]
 800aa1a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800aa1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aa1e:	f023 0301 	bic.w	r3, r3, #1
 800aa22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	3308      	adds	r3, #8
 800aa2c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800aa30:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800aa34:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa36:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800aa38:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800aa3c:	e841 2300 	strex	r3, r2, [r1]
 800aa40:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800aa42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d1e1      	bne.n	800aa0c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	3308      	adds	r3, #8
 800aa4e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aa52:	e853 3f00 	ldrex	r3, [r3]
 800aa56:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800aa58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	3308      	adds	r3, #8
 800aa68:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800aa6c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800aa6e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa70:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800aa72:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800aa74:	e841 2300 	strex	r3, r2, [r1]
 800aa78:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800aa7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d1e3      	bne.n	800aa48 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2220      	movs	r2, #32
 800aa84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa96:	e853 3f00 	ldrex	r3, [r3]
 800aa9a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800aa9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa9e:	f023 0310 	bic.w	r3, r3, #16
 800aaa2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	461a      	mov	r2, r3
 800aaac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aab0:	65bb      	str	r3, [r7, #88]	; 0x58
 800aab2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aab4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aab6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aab8:	e841 2300 	strex	r3, r2, [r1]
 800aabc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800aabe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d1e4      	bne.n	800aa8e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aac8:	4618      	mov	r0, r3
 800aaca:	f7fa fcce 	bl	800546a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2202      	movs	r2, #2
 800aad2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800aae0:	b29b      	uxth	r3, r3
 800aae2:	1ad3      	subs	r3, r2, r3
 800aae4:	b29b      	uxth	r3, r3
 800aae6:	4619      	mov	r1, r3
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f7f5 fe89 	bl	8000800 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800aaee:	e0b9      	b.n	800ac64 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800aafc:	b29b      	uxth	r3, r3
 800aafe:	1ad3      	subs	r3, r2, r3
 800ab00:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ab0a:	b29b      	uxth	r3, r3
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	f000 80ab 	beq.w	800ac68 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800ab12:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	f000 80a6 	beq.w	800ac68 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab24:	e853 3f00 	ldrex	r3, [r3]
 800ab28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ab2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ab30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	461a      	mov	r2, r3
 800ab3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ab3e:	647b      	str	r3, [r7, #68]	; 0x44
 800ab40:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ab44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab46:	e841 2300 	strex	r3, r2, [r1]
 800ab4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ab4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d1e4      	bne.n	800ab1c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	3308      	adds	r3, #8
 800ab58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5c:	e853 3f00 	ldrex	r3, [r3]
 800ab60:	623b      	str	r3, [r7, #32]
   return(result);
 800ab62:	6a3b      	ldr	r3, [r7, #32]
 800ab64:	f023 0301 	bic.w	r3, r3, #1
 800ab68:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	3308      	adds	r3, #8
 800ab72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ab76:	633a      	str	r2, [r7, #48]	; 0x30
 800ab78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ab7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab7e:	e841 2300 	strex	r3, r2, [r1]
 800ab82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ab84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d1e3      	bne.n	800ab52 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2220      	movs	r2, #32
 800ab8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2200      	movs	r2, #0
 800ab96:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	e853 3f00 	ldrex	r3, [r3]
 800abaa:	60fb      	str	r3, [r7, #12]
   return(result);
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	f023 0310 	bic.w	r3, r3, #16
 800abb2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	461a      	mov	r2, r3
 800abbc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800abc0:	61fb      	str	r3, [r7, #28]
 800abc2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abc4:	69b9      	ldr	r1, [r7, #24]
 800abc6:	69fa      	ldr	r2, [r7, #28]
 800abc8:	e841 2300 	strex	r3, r2, [r1]
 800abcc:	617b      	str	r3, [r7, #20]
   return(result);
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d1e4      	bne.n	800ab9e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2202      	movs	r2, #2
 800abd8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800abda:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800abde:	4619      	mov	r1, r3
 800abe0:	6878      	ldr	r0, [r7, #4]
 800abe2:	f7f5 fe0d 	bl	8000800 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800abe6:	e03f      	b.n	800ac68 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800abe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d00e      	beq.n	800ac12 <HAL_UART_IRQHandler+0x56a>
 800abf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800abf8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d008      	beq.n	800ac12 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ac08:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f000 fe93 	bl	800b936 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ac10:	e02d      	b.n	800ac6e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800ac12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d00e      	beq.n	800ac3c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800ac1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d008      	beq.n	800ac3c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d01c      	beq.n	800ac6c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	4798      	blx	r3
    }
    return;
 800ac3a:	e017      	b.n	800ac6c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ac3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d012      	beq.n	800ac6e <HAL_UART_IRQHandler+0x5c6>
 800ac48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d00c      	beq.n	800ac6e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	f000 fe44 	bl	800b8e2 <UART_EndTransmit_IT>
    return;
 800ac5a:	e008      	b.n	800ac6e <HAL_UART_IRQHandler+0x5c6>
      return;
 800ac5c:	bf00      	nop
 800ac5e:	e006      	b.n	800ac6e <HAL_UART_IRQHandler+0x5c6>
    return;
 800ac60:	bf00      	nop
 800ac62:	e004      	b.n	800ac6e <HAL_UART_IRQHandler+0x5c6>
      return;
 800ac64:	bf00      	nop
 800ac66:	e002      	b.n	800ac6e <HAL_UART_IRQHandler+0x5c6>
      return;
 800ac68:	bf00      	nop
 800ac6a:	e000      	b.n	800ac6e <HAL_UART_IRQHandler+0x5c6>
    return;
 800ac6c:	bf00      	nop
  }

}
 800ac6e:	37e8      	adds	r7, #232	; 0xe8
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd80      	pop	{r7, pc}

0800ac74 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ac74:	b480      	push	{r7}
 800ac76:	b083      	sub	sp, #12
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800ac7c:	bf00      	nop
 800ac7e:	370c      	adds	r7, #12
 800ac80:	46bd      	mov	sp, r7
 800ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac86:	4770      	bx	lr

0800ac88 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b083      	sub	sp, #12
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800ac90:	bf00      	nop
 800ac92:	370c      	adds	r7, #12
 800ac94:	46bd      	mov	sp, r7
 800ac96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9a:	4770      	bx	lr

0800ac9c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b083      	sub	sp, #12
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800aca4:	bf00      	nop
 800aca6:	370c      	adds	r7, #12
 800aca8:	46bd      	mov	sp, r7
 800acaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acae:	4770      	bx	lr

0800acb0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800acb0:	b480      	push	{r7}
 800acb2:	b083      	sub	sp, #12
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800acb8:	bf00      	nop
 800acba:	370c      	adds	r7, #12
 800acbc:	46bd      	mov	sp, r7
 800acbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc2:	4770      	bx	lr

0800acc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b088      	sub	sp, #32
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800accc:	2300      	movs	r3, #0
 800acce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	689a      	ldr	r2, [r3, #8]
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	691b      	ldr	r3, [r3, #16]
 800acd8:	431a      	orrs	r2, r3
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	695b      	ldr	r3, [r3, #20]
 800acde:	431a      	orrs	r2, r3
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	69db      	ldr	r3, [r3, #28]
 800ace4:	4313      	orrs	r3, r2
 800ace6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800acf2:	f023 030c 	bic.w	r3, r3, #12
 800acf6:	687a      	ldr	r2, [r7, #4]
 800acf8:	6812      	ldr	r2, [r2, #0]
 800acfa:	6979      	ldr	r1, [r7, #20]
 800acfc:	430b      	orrs	r3, r1
 800acfe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	685b      	ldr	r3, [r3, #4]
 800ad06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	68da      	ldr	r2, [r3, #12]
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	430a      	orrs	r2, r1
 800ad14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	699b      	ldr	r3, [r3, #24]
 800ad1a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6a1b      	ldr	r3, [r3, #32]
 800ad20:	697a      	ldr	r2, [r7, #20]
 800ad22:	4313      	orrs	r3, r2
 800ad24:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	689b      	ldr	r3, [r3, #8]
 800ad2c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	697a      	ldr	r2, [r7, #20]
 800ad36:	430a      	orrs	r2, r1
 800ad38:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	4aa7      	ldr	r2, [pc, #668]	; (800afdc <UART_SetConfig+0x318>)
 800ad40:	4293      	cmp	r3, r2
 800ad42:	d120      	bne.n	800ad86 <UART_SetConfig+0xc2>
 800ad44:	4ba6      	ldr	r3, [pc, #664]	; (800afe0 <UART_SetConfig+0x31c>)
 800ad46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad48:	f003 0303 	and.w	r3, r3, #3
 800ad4c:	2b03      	cmp	r3, #3
 800ad4e:	d817      	bhi.n	800ad80 <UART_SetConfig+0xbc>
 800ad50:	a201      	add	r2, pc, #4	; (adr r2, 800ad58 <UART_SetConfig+0x94>)
 800ad52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad56:	bf00      	nop
 800ad58:	0800ad69 	.word	0x0800ad69
 800ad5c:	0800ad75 	.word	0x0800ad75
 800ad60:	0800ad7b 	.word	0x0800ad7b
 800ad64:	0800ad6f 	.word	0x0800ad6f
 800ad68:	2301      	movs	r3, #1
 800ad6a:	77fb      	strb	r3, [r7, #31]
 800ad6c:	e0b5      	b.n	800aeda <UART_SetConfig+0x216>
 800ad6e:	2302      	movs	r3, #2
 800ad70:	77fb      	strb	r3, [r7, #31]
 800ad72:	e0b2      	b.n	800aeda <UART_SetConfig+0x216>
 800ad74:	2304      	movs	r3, #4
 800ad76:	77fb      	strb	r3, [r7, #31]
 800ad78:	e0af      	b.n	800aeda <UART_SetConfig+0x216>
 800ad7a:	2308      	movs	r3, #8
 800ad7c:	77fb      	strb	r3, [r7, #31]
 800ad7e:	e0ac      	b.n	800aeda <UART_SetConfig+0x216>
 800ad80:	2310      	movs	r3, #16
 800ad82:	77fb      	strb	r3, [r7, #31]
 800ad84:	e0a9      	b.n	800aeda <UART_SetConfig+0x216>
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	4a96      	ldr	r2, [pc, #600]	; (800afe4 <UART_SetConfig+0x320>)
 800ad8c:	4293      	cmp	r3, r2
 800ad8e:	d124      	bne.n	800adda <UART_SetConfig+0x116>
 800ad90:	4b93      	ldr	r3, [pc, #588]	; (800afe0 <UART_SetConfig+0x31c>)
 800ad92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ad98:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ad9c:	d011      	beq.n	800adc2 <UART_SetConfig+0xfe>
 800ad9e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ada2:	d817      	bhi.n	800add4 <UART_SetConfig+0x110>
 800ada4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ada8:	d011      	beq.n	800adce <UART_SetConfig+0x10a>
 800adaa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800adae:	d811      	bhi.n	800add4 <UART_SetConfig+0x110>
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d003      	beq.n	800adbc <UART_SetConfig+0xf8>
 800adb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800adb8:	d006      	beq.n	800adc8 <UART_SetConfig+0x104>
 800adba:	e00b      	b.n	800add4 <UART_SetConfig+0x110>
 800adbc:	2300      	movs	r3, #0
 800adbe:	77fb      	strb	r3, [r7, #31]
 800adc0:	e08b      	b.n	800aeda <UART_SetConfig+0x216>
 800adc2:	2302      	movs	r3, #2
 800adc4:	77fb      	strb	r3, [r7, #31]
 800adc6:	e088      	b.n	800aeda <UART_SetConfig+0x216>
 800adc8:	2304      	movs	r3, #4
 800adca:	77fb      	strb	r3, [r7, #31]
 800adcc:	e085      	b.n	800aeda <UART_SetConfig+0x216>
 800adce:	2308      	movs	r3, #8
 800add0:	77fb      	strb	r3, [r7, #31]
 800add2:	e082      	b.n	800aeda <UART_SetConfig+0x216>
 800add4:	2310      	movs	r3, #16
 800add6:	77fb      	strb	r3, [r7, #31]
 800add8:	e07f      	b.n	800aeda <UART_SetConfig+0x216>
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	4a82      	ldr	r2, [pc, #520]	; (800afe8 <UART_SetConfig+0x324>)
 800ade0:	4293      	cmp	r3, r2
 800ade2:	d124      	bne.n	800ae2e <UART_SetConfig+0x16a>
 800ade4:	4b7e      	ldr	r3, [pc, #504]	; (800afe0 <UART_SetConfig+0x31c>)
 800ade6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ade8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800adec:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800adf0:	d011      	beq.n	800ae16 <UART_SetConfig+0x152>
 800adf2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800adf6:	d817      	bhi.n	800ae28 <UART_SetConfig+0x164>
 800adf8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800adfc:	d011      	beq.n	800ae22 <UART_SetConfig+0x15e>
 800adfe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ae02:	d811      	bhi.n	800ae28 <UART_SetConfig+0x164>
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d003      	beq.n	800ae10 <UART_SetConfig+0x14c>
 800ae08:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ae0c:	d006      	beq.n	800ae1c <UART_SetConfig+0x158>
 800ae0e:	e00b      	b.n	800ae28 <UART_SetConfig+0x164>
 800ae10:	2300      	movs	r3, #0
 800ae12:	77fb      	strb	r3, [r7, #31]
 800ae14:	e061      	b.n	800aeda <UART_SetConfig+0x216>
 800ae16:	2302      	movs	r3, #2
 800ae18:	77fb      	strb	r3, [r7, #31]
 800ae1a:	e05e      	b.n	800aeda <UART_SetConfig+0x216>
 800ae1c:	2304      	movs	r3, #4
 800ae1e:	77fb      	strb	r3, [r7, #31]
 800ae20:	e05b      	b.n	800aeda <UART_SetConfig+0x216>
 800ae22:	2308      	movs	r3, #8
 800ae24:	77fb      	strb	r3, [r7, #31]
 800ae26:	e058      	b.n	800aeda <UART_SetConfig+0x216>
 800ae28:	2310      	movs	r3, #16
 800ae2a:	77fb      	strb	r3, [r7, #31]
 800ae2c:	e055      	b.n	800aeda <UART_SetConfig+0x216>
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	4a6e      	ldr	r2, [pc, #440]	; (800afec <UART_SetConfig+0x328>)
 800ae34:	4293      	cmp	r3, r2
 800ae36:	d124      	bne.n	800ae82 <UART_SetConfig+0x1be>
 800ae38:	4b69      	ldr	r3, [pc, #420]	; (800afe0 <UART_SetConfig+0x31c>)
 800ae3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae3c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800ae40:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ae44:	d011      	beq.n	800ae6a <UART_SetConfig+0x1a6>
 800ae46:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ae4a:	d817      	bhi.n	800ae7c <UART_SetConfig+0x1b8>
 800ae4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ae50:	d011      	beq.n	800ae76 <UART_SetConfig+0x1b2>
 800ae52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ae56:	d811      	bhi.n	800ae7c <UART_SetConfig+0x1b8>
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d003      	beq.n	800ae64 <UART_SetConfig+0x1a0>
 800ae5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae60:	d006      	beq.n	800ae70 <UART_SetConfig+0x1ac>
 800ae62:	e00b      	b.n	800ae7c <UART_SetConfig+0x1b8>
 800ae64:	2300      	movs	r3, #0
 800ae66:	77fb      	strb	r3, [r7, #31]
 800ae68:	e037      	b.n	800aeda <UART_SetConfig+0x216>
 800ae6a:	2302      	movs	r3, #2
 800ae6c:	77fb      	strb	r3, [r7, #31]
 800ae6e:	e034      	b.n	800aeda <UART_SetConfig+0x216>
 800ae70:	2304      	movs	r3, #4
 800ae72:	77fb      	strb	r3, [r7, #31]
 800ae74:	e031      	b.n	800aeda <UART_SetConfig+0x216>
 800ae76:	2308      	movs	r3, #8
 800ae78:	77fb      	strb	r3, [r7, #31]
 800ae7a:	e02e      	b.n	800aeda <UART_SetConfig+0x216>
 800ae7c:	2310      	movs	r3, #16
 800ae7e:	77fb      	strb	r3, [r7, #31]
 800ae80:	e02b      	b.n	800aeda <UART_SetConfig+0x216>
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	4a5a      	ldr	r2, [pc, #360]	; (800aff0 <UART_SetConfig+0x32c>)
 800ae88:	4293      	cmp	r3, r2
 800ae8a:	d124      	bne.n	800aed6 <UART_SetConfig+0x212>
 800ae8c:	4b54      	ldr	r3, [pc, #336]	; (800afe0 <UART_SetConfig+0x31c>)
 800ae8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae90:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800ae94:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800ae98:	d011      	beq.n	800aebe <UART_SetConfig+0x1fa>
 800ae9a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800ae9e:	d817      	bhi.n	800aed0 <UART_SetConfig+0x20c>
 800aea0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aea4:	d011      	beq.n	800aeca <UART_SetConfig+0x206>
 800aea6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aeaa:	d811      	bhi.n	800aed0 <UART_SetConfig+0x20c>
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d003      	beq.n	800aeb8 <UART_SetConfig+0x1f4>
 800aeb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aeb4:	d006      	beq.n	800aec4 <UART_SetConfig+0x200>
 800aeb6:	e00b      	b.n	800aed0 <UART_SetConfig+0x20c>
 800aeb8:	2300      	movs	r3, #0
 800aeba:	77fb      	strb	r3, [r7, #31]
 800aebc:	e00d      	b.n	800aeda <UART_SetConfig+0x216>
 800aebe:	2302      	movs	r3, #2
 800aec0:	77fb      	strb	r3, [r7, #31]
 800aec2:	e00a      	b.n	800aeda <UART_SetConfig+0x216>
 800aec4:	2304      	movs	r3, #4
 800aec6:	77fb      	strb	r3, [r7, #31]
 800aec8:	e007      	b.n	800aeda <UART_SetConfig+0x216>
 800aeca:	2308      	movs	r3, #8
 800aecc:	77fb      	strb	r3, [r7, #31]
 800aece:	e004      	b.n	800aeda <UART_SetConfig+0x216>
 800aed0:	2310      	movs	r3, #16
 800aed2:	77fb      	strb	r3, [r7, #31]
 800aed4:	e001      	b.n	800aeda <UART_SetConfig+0x216>
 800aed6:	2310      	movs	r3, #16
 800aed8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	69db      	ldr	r3, [r3, #28]
 800aede:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aee2:	d15b      	bne.n	800af9c <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 800aee4:	7ffb      	ldrb	r3, [r7, #31]
 800aee6:	2b08      	cmp	r3, #8
 800aee8:	d827      	bhi.n	800af3a <UART_SetConfig+0x276>
 800aeea:	a201      	add	r2, pc, #4	; (adr r2, 800aef0 <UART_SetConfig+0x22c>)
 800aeec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aef0:	0800af15 	.word	0x0800af15
 800aef4:	0800af1d 	.word	0x0800af1d
 800aef8:	0800af25 	.word	0x0800af25
 800aefc:	0800af3b 	.word	0x0800af3b
 800af00:	0800af2b 	.word	0x0800af2b
 800af04:	0800af3b 	.word	0x0800af3b
 800af08:	0800af3b 	.word	0x0800af3b
 800af0c:	0800af3b 	.word	0x0800af3b
 800af10:	0800af33 	.word	0x0800af33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af14:	f7fc fdde 	bl	8007ad4 <HAL_RCC_GetPCLK1Freq>
 800af18:	61b8      	str	r0, [r7, #24]
        break;
 800af1a:	e013      	b.n	800af44 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af1c:	f7fc fdfc 	bl	8007b18 <HAL_RCC_GetPCLK2Freq>
 800af20:	61b8      	str	r0, [r7, #24]
        break;
 800af22:	e00f      	b.n	800af44 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800af24:	4b33      	ldr	r3, [pc, #204]	; (800aff4 <UART_SetConfig+0x330>)
 800af26:	61bb      	str	r3, [r7, #24]
        break;
 800af28:	e00c      	b.n	800af44 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800af2a:	f7fc fd5d 	bl	80079e8 <HAL_RCC_GetSysClockFreq>
 800af2e:	61b8      	str	r0, [r7, #24]
        break;
 800af30:	e008      	b.n	800af44 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af36:	61bb      	str	r3, [r7, #24]
        break;
 800af38:	e004      	b.n	800af44 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800af3a:	2300      	movs	r3, #0
 800af3c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800af3e:	2301      	movs	r3, #1
 800af40:	77bb      	strb	r3, [r7, #30]
        break;
 800af42:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800af44:	69bb      	ldr	r3, [r7, #24]
 800af46:	2b00      	cmp	r3, #0
 800af48:	f000 8082 	beq.w	800b050 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800af4c:	69bb      	ldr	r3, [r7, #24]
 800af4e:	005a      	lsls	r2, r3, #1
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	685b      	ldr	r3, [r3, #4]
 800af54:	085b      	lsrs	r3, r3, #1
 800af56:	441a      	add	r2, r3
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	685b      	ldr	r3, [r3, #4]
 800af5c:	fbb2 f3f3 	udiv	r3, r2, r3
 800af60:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	2b0f      	cmp	r3, #15
 800af66:	d916      	bls.n	800af96 <UART_SetConfig+0x2d2>
 800af68:	693b      	ldr	r3, [r7, #16]
 800af6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af6e:	d212      	bcs.n	800af96 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800af70:	693b      	ldr	r3, [r7, #16]
 800af72:	b29b      	uxth	r3, r3
 800af74:	f023 030f 	bic.w	r3, r3, #15
 800af78:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	085b      	lsrs	r3, r3, #1
 800af7e:	b29b      	uxth	r3, r3
 800af80:	f003 0307 	and.w	r3, r3, #7
 800af84:	b29a      	uxth	r2, r3
 800af86:	89fb      	ldrh	r3, [r7, #14]
 800af88:	4313      	orrs	r3, r2
 800af8a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	89fa      	ldrh	r2, [r7, #14]
 800af92:	60da      	str	r2, [r3, #12]
 800af94:	e05c      	b.n	800b050 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800af96:	2301      	movs	r3, #1
 800af98:	77bb      	strb	r3, [r7, #30]
 800af9a:	e059      	b.n	800b050 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800af9c:	7ffb      	ldrb	r3, [r7, #31]
 800af9e:	2b08      	cmp	r3, #8
 800afa0:	d835      	bhi.n	800b00e <UART_SetConfig+0x34a>
 800afa2:	a201      	add	r2, pc, #4	; (adr r2, 800afa8 <UART_SetConfig+0x2e4>)
 800afa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afa8:	0800afcd 	.word	0x0800afcd
 800afac:	0800afd5 	.word	0x0800afd5
 800afb0:	0800aff9 	.word	0x0800aff9
 800afb4:	0800b00f 	.word	0x0800b00f
 800afb8:	0800afff 	.word	0x0800afff
 800afbc:	0800b00f 	.word	0x0800b00f
 800afc0:	0800b00f 	.word	0x0800b00f
 800afc4:	0800b00f 	.word	0x0800b00f
 800afc8:	0800b007 	.word	0x0800b007
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800afcc:	f7fc fd82 	bl	8007ad4 <HAL_RCC_GetPCLK1Freq>
 800afd0:	61b8      	str	r0, [r7, #24]
        break;
 800afd2:	e021      	b.n	800b018 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800afd4:	f7fc fda0 	bl	8007b18 <HAL_RCC_GetPCLK2Freq>
 800afd8:	61b8      	str	r0, [r7, #24]
        break;
 800afda:	e01d      	b.n	800b018 <UART_SetConfig+0x354>
 800afdc:	40013800 	.word	0x40013800
 800afe0:	40021000 	.word	0x40021000
 800afe4:	40004400 	.word	0x40004400
 800afe8:	40004800 	.word	0x40004800
 800afec:	40004c00 	.word	0x40004c00
 800aff0:	40005000 	.word	0x40005000
 800aff4:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aff8:	4b1b      	ldr	r3, [pc, #108]	; (800b068 <UART_SetConfig+0x3a4>)
 800affa:	61bb      	str	r3, [r7, #24]
        break;
 800affc:	e00c      	b.n	800b018 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800affe:	f7fc fcf3 	bl	80079e8 <HAL_RCC_GetSysClockFreq>
 800b002:	61b8      	str	r0, [r7, #24]
        break;
 800b004:	e008      	b.n	800b018 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b006:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b00a:	61bb      	str	r3, [r7, #24]
        break;
 800b00c:	e004      	b.n	800b018 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800b00e:	2300      	movs	r3, #0
 800b010:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b012:	2301      	movs	r3, #1
 800b014:	77bb      	strb	r3, [r7, #30]
        break;
 800b016:	bf00      	nop
    }

    if (pclk != 0U)
 800b018:	69bb      	ldr	r3, [r7, #24]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d018      	beq.n	800b050 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	685b      	ldr	r3, [r3, #4]
 800b022:	085a      	lsrs	r2, r3, #1
 800b024:	69bb      	ldr	r3, [r7, #24]
 800b026:	441a      	add	r2, r3
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	685b      	ldr	r3, [r3, #4]
 800b02c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b030:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	2b0f      	cmp	r3, #15
 800b036:	d909      	bls.n	800b04c <UART_SetConfig+0x388>
 800b038:	693b      	ldr	r3, [r7, #16]
 800b03a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b03e:	d205      	bcs.n	800b04c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	b29a      	uxth	r2, r3
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	60da      	str	r2, [r3, #12]
 800b04a:	e001      	b.n	800b050 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800b04c:	2301      	movs	r3, #1
 800b04e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2200      	movs	r2, #0
 800b054:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2200      	movs	r2, #0
 800b05a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800b05c:	7fbb      	ldrb	r3, [r7, #30]
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3720      	adds	r7, #32
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}
 800b066:	bf00      	nop
 800b068:	007a1200 	.word	0x007a1200

0800b06c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b06c:	b480      	push	{r7}
 800b06e:	b083      	sub	sp, #12
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b078:	f003 0301 	and.w	r3, r3, #1
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d00a      	beq.n	800b096 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	685b      	ldr	r3, [r3, #4]
 800b086:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	430a      	orrs	r2, r1
 800b094:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b09a:	f003 0302 	and.w	r3, r3, #2
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d00a      	beq.n	800b0b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	685b      	ldr	r3, [r3, #4]
 800b0a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	430a      	orrs	r2, r1
 800b0b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0bc:	f003 0304 	and.w	r3, r3, #4
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d00a      	beq.n	800b0da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	685b      	ldr	r3, [r3, #4]
 800b0ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	430a      	orrs	r2, r1
 800b0d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0de:	f003 0308 	and.w	r3, r3, #8
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d00a      	beq.n	800b0fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	685b      	ldr	r3, [r3, #4]
 800b0ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	430a      	orrs	r2, r1
 800b0fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b100:	f003 0310 	and.w	r3, r3, #16
 800b104:	2b00      	cmp	r3, #0
 800b106:	d00a      	beq.n	800b11e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	689b      	ldr	r3, [r3, #8]
 800b10e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	430a      	orrs	r2, r1
 800b11c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b122:	f003 0320 	and.w	r3, r3, #32
 800b126:	2b00      	cmp	r3, #0
 800b128:	d00a      	beq.n	800b140 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	689b      	ldr	r3, [r3, #8]
 800b130:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	430a      	orrs	r2, r1
 800b13e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d01a      	beq.n	800b182 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	430a      	orrs	r2, r1
 800b160:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b166:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b16a:	d10a      	bne.n	800b182 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	685b      	ldr	r3, [r3, #4]
 800b172:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	430a      	orrs	r2, r1
 800b180:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d00a      	beq.n	800b1a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	685b      	ldr	r3, [r3, #4]
 800b194:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	430a      	orrs	r2, r1
 800b1a2:	605a      	str	r2, [r3, #4]
  }
}
 800b1a4:	bf00      	nop
 800b1a6:	370c      	adds	r7, #12
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ae:	4770      	bx	lr

0800b1b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b098      	sub	sp, #96	; 0x60
 800b1b4:	af02      	add	r7, sp, #8
 800b1b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b1c0:	f7f8 f852 	bl	8003268 <HAL_GetTick>
 800b1c4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	f003 0308 	and.w	r3, r3, #8
 800b1d0:	2b08      	cmp	r3, #8
 800b1d2:	d12e      	bne.n	800b232 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b1d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b1d8:	9300      	str	r3, [sp, #0]
 800b1da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b1dc:	2200      	movs	r2, #0
 800b1de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f000 f88c 	bl	800b300 <UART_WaitOnFlagUntilTimeout>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d021      	beq.n	800b232 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1f6:	e853 3f00 	ldrex	r3, [r3]
 800b1fa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b1fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b202:	653b      	str	r3, [r7, #80]	; 0x50
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	461a      	mov	r2, r3
 800b20a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b20c:	647b      	str	r3, [r7, #68]	; 0x44
 800b20e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b210:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b212:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b214:	e841 2300 	strex	r3, r2, [r1]
 800b218:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b21a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d1e6      	bne.n	800b1ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2220      	movs	r2, #32
 800b224:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2200      	movs	r2, #0
 800b22a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b22e:	2303      	movs	r3, #3
 800b230:	e062      	b.n	800b2f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f003 0304 	and.w	r3, r3, #4
 800b23c:	2b04      	cmp	r3, #4
 800b23e:	d149      	bne.n	800b2d4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b240:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b244:	9300      	str	r3, [sp, #0]
 800b246:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b248:	2200      	movs	r2, #0
 800b24a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f000 f856 	bl	800b300 <UART_WaitOnFlagUntilTimeout>
 800b254:	4603      	mov	r3, r0
 800b256:	2b00      	cmp	r3, #0
 800b258:	d03c      	beq.n	800b2d4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b262:	e853 3f00 	ldrex	r3, [r3]
 800b266:	623b      	str	r3, [r7, #32]
   return(result);
 800b268:	6a3b      	ldr	r3, [r7, #32]
 800b26a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b26e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	461a      	mov	r2, r3
 800b276:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b278:	633b      	str	r3, [r7, #48]	; 0x30
 800b27a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b27c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b27e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b280:	e841 2300 	strex	r3, r2, [r1]
 800b284:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d1e6      	bne.n	800b25a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	3308      	adds	r3, #8
 800b292:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b294:	693b      	ldr	r3, [r7, #16]
 800b296:	e853 3f00 	ldrex	r3, [r3]
 800b29a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	f023 0301 	bic.w	r3, r3, #1
 800b2a2:	64bb      	str	r3, [r7, #72]	; 0x48
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	3308      	adds	r3, #8
 800b2aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b2ac:	61fa      	str	r2, [r7, #28]
 800b2ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2b0:	69b9      	ldr	r1, [r7, #24]
 800b2b2:	69fa      	ldr	r2, [r7, #28]
 800b2b4:	e841 2300 	strex	r3, r2, [r1]
 800b2b8:	617b      	str	r3, [r7, #20]
   return(result);
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d1e5      	bne.n	800b28c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2220      	movs	r2, #32
 800b2c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b2d0:	2303      	movs	r3, #3
 800b2d2:	e011      	b.n	800b2f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2220      	movs	r2, #32
 800b2d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2220      	movs	r2, #32
 800b2de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800b2f6:	2300      	movs	r3, #0
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3758      	adds	r7, #88	; 0x58
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}

0800b300 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b084      	sub	sp, #16
 800b304:	af00      	add	r7, sp, #0
 800b306:	60f8      	str	r0, [r7, #12]
 800b308:	60b9      	str	r1, [r7, #8]
 800b30a:	603b      	str	r3, [r7, #0]
 800b30c:	4613      	mov	r3, r2
 800b30e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b310:	e049      	b.n	800b3a6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b312:	69bb      	ldr	r3, [r7, #24]
 800b314:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b318:	d045      	beq.n	800b3a6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b31a:	f7f7 ffa5 	bl	8003268 <HAL_GetTick>
 800b31e:	4602      	mov	r2, r0
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	1ad3      	subs	r3, r2, r3
 800b324:	69ba      	ldr	r2, [r7, #24]
 800b326:	429a      	cmp	r2, r3
 800b328:	d302      	bcc.n	800b330 <UART_WaitOnFlagUntilTimeout+0x30>
 800b32a:	69bb      	ldr	r3, [r7, #24]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d101      	bne.n	800b334 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b330:	2303      	movs	r3, #3
 800b332:	e048      	b.n	800b3c6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	f003 0304 	and.w	r3, r3, #4
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d031      	beq.n	800b3a6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	69db      	ldr	r3, [r3, #28]
 800b348:	f003 0308 	and.w	r3, r3, #8
 800b34c:	2b08      	cmp	r3, #8
 800b34e:	d110      	bne.n	800b372 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	2208      	movs	r2, #8
 800b356:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800b358:	68f8      	ldr	r0, [r7, #12]
 800b35a:	f000 f8ff 	bl	800b55c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	2208      	movs	r2, #8
 800b362:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	2200      	movs	r2, #0
 800b36a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800b36e:	2301      	movs	r3, #1
 800b370:	e029      	b.n	800b3c6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	69db      	ldr	r3, [r3, #28]
 800b378:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b37c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b380:	d111      	bne.n	800b3a6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b38a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b38c:	68f8      	ldr	r0, [r7, #12]
 800b38e:	f000 f8e5 	bl	800b55c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	2220      	movs	r2, #32
 800b396:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	2200      	movs	r2, #0
 800b39e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800b3a2:	2303      	movs	r3, #3
 800b3a4:	e00f      	b.n	800b3c6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	69da      	ldr	r2, [r3, #28]
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	4013      	ands	r3, r2
 800b3b0:	68ba      	ldr	r2, [r7, #8]
 800b3b2:	429a      	cmp	r2, r3
 800b3b4:	bf0c      	ite	eq
 800b3b6:	2301      	moveq	r3, #1
 800b3b8:	2300      	movne	r3, #0
 800b3ba:	b2db      	uxtb	r3, r3
 800b3bc:	461a      	mov	r2, r3
 800b3be:	79fb      	ldrb	r3, [r7, #7]
 800b3c0:	429a      	cmp	r2, r3
 800b3c2:	d0a6      	beq.n	800b312 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b3c4:	2300      	movs	r3, #0
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3710      	adds	r7, #16
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}
	...

0800b3d0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b096      	sub	sp, #88	; 0x58
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	60f8      	str	r0, [r7, #12]
 800b3d8:	60b9      	str	r1, [r7, #8]
 800b3da:	4613      	mov	r3, r2
 800b3dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	68ba      	ldr	r2, [r7, #8]
 800b3e2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	88fa      	ldrh	r2, [r7, #6]
 800b3e8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	2222      	movs	r2, #34	; 0x22
 800b3f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b400:	2b00      	cmp	r3, #0
 800b402:	d028      	beq.n	800b456 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b408:	4a3e      	ldr	r2, [pc, #248]	; (800b504 <UART_Start_Receive_DMA+0x134>)
 800b40a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b410:	4a3d      	ldr	r2, [pc, #244]	; (800b508 <UART_Start_Receive_DMA+0x138>)
 800b412:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b418:	4a3c      	ldr	r2, [pc, #240]	; (800b50c <UART_Start_Receive_DMA+0x13c>)
 800b41a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b420:	2200      	movs	r2, #0
 800b422:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	3324      	adds	r3, #36	; 0x24
 800b42e:	4619      	mov	r1, r3
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b434:	461a      	mov	r2, r3
 800b436:	88fb      	ldrh	r3, [r7, #6]
 800b438:	f7f9 ffb8 	bl	80053ac <HAL_DMA_Start_IT>
 800b43c:	4603      	mov	r3, r0
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d009      	beq.n	800b456 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	2210      	movs	r2, #16
 800b446:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	2220      	movs	r2, #32
 800b44e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800b452:	2301      	movs	r3, #1
 800b454:	e051      	b.n	800b4fa <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	691b      	ldr	r3, [r3, #16]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d018      	beq.n	800b490 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b464:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b466:	e853 3f00 	ldrex	r3, [r3]
 800b46a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b46e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b472:	657b      	str	r3, [r7, #84]	; 0x54
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	461a      	mov	r2, r3
 800b47a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b47c:	64bb      	str	r3, [r7, #72]	; 0x48
 800b47e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b480:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b482:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b484:	e841 2300 	strex	r3, r2, [r1]
 800b488:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b48a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d1e6      	bne.n	800b45e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	3308      	adds	r3, #8
 800b496:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b49a:	e853 3f00 	ldrex	r3, [r3]
 800b49e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4a2:	f043 0301 	orr.w	r3, r3, #1
 800b4a6:	653b      	str	r3, [r7, #80]	; 0x50
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	3308      	adds	r3, #8
 800b4ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b4b0:	637a      	str	r2, [r7, #52]	; 0x34
 800b4b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b4b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b4b8:	e841 2300 	strex	r3, r2, [r1]
 800b4bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d1e5      	bne.n	800b490 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	3308      	adds	r3, #8
 800b4ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4cc:	697b      	ldr	r3, [r7, #20]
 800b4ce:	e853 3f00 	ldrex	r3, [r3]
 800b4d2:	613b      	str	r3, [r7, #16]
   return(result);
 800b4d4:	693b      	ldr	r3, [r7, #16]
 800b4d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4da:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	3308      	adds	r3, #8
 800b4e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b4e4:	623a      	str	r2, [r7, #32]
 800b4e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4e8:	69f9      	ldr	r1, [r7, #28]
 800b4ea:	6a3a      	ldr	r2, [r7, #32]
 800b4ec:	e841 2300 	strex	r3, r2, [r1]
 800b4f0:	61bb      	str	r3, [r7, #24]
   return(result);
 800b4f2:	69bb      	ldr	r3, [r7, #24]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d1e5      	bne.n	800b4c4 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800b4f8:	2300      	movs	r3, #0
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	3758      	adds	r7, #88	; 0x58
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd80      	pop	{r7, pc}
 800b502:	bf00      	nop
 800b504:	0800b6d5 	.word	0x0800b6d5
 800b508:	0800b7fb 	.word	0x0800b7fb
 800b50c:	0800b839 	.word	0x0800b839

0800b510 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b510:	b480      	push	{r7}
 800b512:	b089      	sub	sp, #36	; 0x24
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	e853 3f00 	ldrex	r3, [r3]
 800b524:	60bb      	str	r3, [r7, #8]
   return(result);
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b52c:	61fb      	str	r3, [r7, #28]
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	461a      	mov	r2, r3
 800b534:	69fb      	ldr	r3, [r7, #28]
 800b536:	61bb      	str	r3, [r7, #24]
 800b538:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b53a:	6979      	ldr	r1, [r7, #20]
 800b53c:	69ba      	ldr	r2, [r7, #24]
 800b53e:	e841 2300 	strex	r3, r2, [r1]
 800b542:	613b      	str	r3, [r7, #16]
   return(result);
 800b544:	693b      	ldr	r3, [r7, #16]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d1e6      	bne.n	800b518 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2220      	movs	r2, #32
 800b54e:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800b550:	bf00      	nop
 800b552:	3724      	adds	r7, #36	; 0x24
 800b554:	46bd      	mov	sp, r7
 800b556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55a:	4770      	bx	lr

0800b55c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b55c:	b480      	push	{r7}
 800b55e:	b095      	sub	sp, #84	; 0x54
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b56a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b56c:	e853 3f00 	ldrex	r3, [r3]
 800b570:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b574:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b578:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	461a      	mov	r2, r3
 800b580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b582:	643b      	str	r3, [r7, #64]	; 0x40
 800b584:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b586:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b588:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b58a:	e841 2300 	strex	r3, r2, [r1]
 800b58e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b592:	2b00      	cmp	r3, #0
 800b594:	d1e6      	bne.n	800b564 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	3308      	adds	r3, #8
 800b59c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b59e:	6a3b      	ldr	r3, [r7, #32]
 800b5a0:	e853 3f00 	ldrex	r3, [r3]
 800b5a4:	61fb      	str	r3, [r7, #28]
   return(result);
 800b5a6:	69fb      	ldr	r3, [r7, #28]
 800b5a8:	f023 0301 	bic.w	r3, r3, #1
 800b5ac:	64bb      	str	r3, [r7, #72]	; 0x48
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	3308      	adds	r3, #8
 800b5b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b5b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b5b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b5bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b5be:	e841 2300 	strex	r3, r2, [r1]
 800b5c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d1e5      	bne.n	800b596 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b5ce:	2b01      	cmp	r3, #1
 800b5d0:	d118      	bne.n	800b604 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	e853 3f00 	ldrex	r3, [r3]
 800b5de:	60bb      	str	r3, [r7, #8]
   return(result);
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	f023 0310 	bic.w	r3, r3, #16
 800b5e6:	647b      	str	r3, [r7, #68]	; 0x44
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	461a      	mov	r2, r3
 800b5ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5f0:	61bb      	str	r3, [r7, #24]
 800b5f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5f4:	6979      	ldr	r1, [r7, #20]
 800b5f6:	69ba      	ldr	r2, [r7, #24]
 800b5f8:	e841 2300 	strex	r3, r2, [r1]
 800b5fc:	613b      	str	r3, [r7, #16]
   return(result);
 800b5fe:	693b      	ldr	r3, [r7, #16]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d1e6      	bne.n	800b5d2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2220      	movs	r2, #32
 800b608:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2200      	movs	r2, #0
 800b610:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2200      	movs	r2, #0
 800b616:	669a      	str	r2, [r3, #104]	; 0x68
}
 800b618:	bf00      	nop
 800b61a:	3754      	adds	r7, #84	; 0x54
 800b61c:	46bd      	mov	sp, r7
 800b61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b622:	4770      	bx	lr

0800b624 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b090      	sub	sp, #64	; 0x40
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b630:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	699b      	ldr	r3, [r3, #24]
 800b636:	2b20      	cmp	r3, #32
 800b638:	d037      	beq.n	800b6aa <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800b63a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b63c:	2200      	movs	r2, #0
 800b63e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	3308      	adds	r3, #8
 800b648:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b64c:	e853 3f00 	ldrex	r3, [r3]
 800b650:	623b      	str	r3, [r7, #32]
   return(result);
 800b652:	6a3b      	ldr	r3, [r7, #32]
 800b654:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b658:	63bb      	str	r3, [r7, #56]	; 0x38
 800b65a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	3308      	adds	r3, #8
 800b660:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b662:	633a      	str	r2, [r7, #48]	; 0x30
 800b664:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b666:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b66a:	e841 2300 	strex	r3, r2, [r1]
 800b66e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b672:	2b00      	cmp	r3, #0
 800b674:	d1e5      	bne.n	800b642 <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b67c:	693b      	ldr	r3, [r7, #16]
 800b67e:	e853 3f00 	ldrex	r3, [r3]
 800b682:	60fb      	str	r3, [r7, #12]
   return(result);
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b68a:	637b      	str	r3, [r7, #52]	; 0x34
 800b68c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	461a      	mov	r2, r3
 800b692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b694:	61fb      	str	r3, [r7, #28]
 800b696:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b698:	69b9      	ldr	r1, [r7, #24]
 800b69a:	69fa      	ldr	r2, [r7, #28]
 800b69c:	e841 2300 	strex	r3, r2, [r1]
 800b6a0:	617b      	str	r3, [r7, #20]
   return(result);
 800b6a2:	697b      	ldr	r3, [r7, #20]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d1e6      	bne.n	800b676 <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b6a8:	e002      	b.n	800b6b0 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 800b6aa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b6ac:	f7f6 fe3c 	bl	8002328 <HAL_UART_TxCpltCallback>
}
 800b6b0:	bf00      	nop
 800b6b2:	3740      	adds	r7, #64	; 0x40
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}

0800b6b8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b084      	sub	sp, #16
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b6c6:	68f8      	ldr	r0, [r7, #12]
 800b6c8:	f7ff fad4 	bl	800ac74 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b6cc:	bf00      	nop
 800b6ce:	3710      	adds	r7, #16
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bd80      	pop	{r7, pc}

0800b6d4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b09c      	sub	sp, #112	; 0x70
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6e0:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	699b      	ldr	r3, [r3, #24]
 800b6e6:	2b20      	cmp	r3, #32
 800b6e8:	d071      	beq.n	800b7ce <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800b6ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b6f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6fa:	e853 3f00 	ldrex	r3, [r3]
 800b6fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b700:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b702:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b706:	66bb      	str	r3, [r7, #104]	; 0x68
 800b708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	461a      	mov	r2, r3
 800b70e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b710:	65bb      	str	r3, [r7, #88]	; 0x58
 800b712:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b714:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b716:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b718:	e841 2300 	strex	r3, r2, [r1]
 800b71c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b71e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b720:	2b00      	cmp	r3, #0
 800b722:	d1e6      	bne.n	800b6f2 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b724:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	3308      	adds	r3, #8
 800b72a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b72c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b72e:	e853 3f00 	ldrex	r3, [r3]
 800b732:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b736:	f023 0301 	bic.w	r3, r3, #1
 800b73a:	667b      	str	r3, [r7, #100]	; 0x64
 800b73c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	3308      	adds	r3, #8
 800b742:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b744:	647a      	str	r2, [r7, #68]	; 0x44
 800b746:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b748:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b74a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b74c:	e841 2300 	strex	r3, r2, [r1]
 800b750:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b754:	2b00      	cmp	r3, #0
 800b756:	d1e5      	bne.n	800b724 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b758:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	3308      	adds	r3, #8
 800b75e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b762:	e853 3f00 	ldrex	r3, [r3]
 800b766:	623b      	str	r3, [r7, #32]
   return(result);
 800b768:	6a3b      	ldr	r3, [r7, #32]
 800b76a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b76e:	663b      	str	r3, [r7, #96]	; 0x60
 800b770:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	3308      	adds	r3, #8
 800b776:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b778:	633a      	str	r2, [r7, #48]	; 0x30
 800b77a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b77c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b77e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b780:	e841 2300 	strex	r3, r2, [r1]
 800b784:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d1e5      	bne.n	800b758 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b78c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b78e:	2220      	movs	r2, #32
 800b790:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b794:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b798:	2b01      	cmp	r3, #1
 800b79a:	d118      	bne.n	800b7ce <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b79c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	e853 3f00 	ldrex	r3, [r3]
 800b7a8:	60fb      	str	r3, [r7, #12]
   return(result);
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	f023 0310 	bic.w	r3, r3, #16
 800b7b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b7b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	461a      	mov	r2, r3
 800b7b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b7ba:	61fb      	str	r3, [r7, #28]
 800b7bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7be:	69b9      	ldr	r1, [r7, #24]
 800b7c0:	69fa      	ldr	r2, [r7, #28]
 800b7c2:	e841 2300 	strex	r3, r2, [r1]
 800b7c6:	617b      	str	r3, [r7, #20]
   return(result);
 800b7c8:	697b      	ldr	r3, [r7, #20]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d1e6      	bne.n	800b79c <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b7ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b7d8:	2b01      	cmp	r3, #1
 800b7da:	d107      	bne.n	800b7ec <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b7dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b7e2:	4619      	mov	r1, r3
 800b7e4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b7e6:	f7f5 f80b 	bl	8000800 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b7ea:	e002      	b.n	800b7f2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800b7ec:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b7ee:	f7ff fa4b 	bl	800ac88 <HAL_UART_RxCpltCallback>
}
 800b7f2:	bf00      	nop
 800b7f4:	3770      	adds	r7, #112	; 0x70
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}

0800b7fa <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b7fa:	b580      	push	{r7, lr}
 800b7fc:	b084      	sub	sp, #16
 800b7fe:	af00      	add	r7, sp, #0
 800b800:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b806:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	2201      	movs	r2, #1
 800b80c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b812:	2b01      	cmp	r3, #1
 800b814:	d109      	bne.n	800b82a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b81c:	085b      	lsrs	r3, r3, #1
 800b81e:	b29b      	uxth	r3, r3
 800b820:	4619      	mov	r1, r3
 800b822:	68f8      	ldr	r0, [r7, #12]
 800b824:	f7f4 ffec 	bl	8000800 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b828:	e002      	b.n	800b830 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800b82a:	68f8      	ldr	r0, [r7, #12]
 800b82c:	f7ff fa36 	bl	800ac9c <HAL_UART_RxHalfCpltCallback>
}
 800b830:	bf00      	nop
 800b832:	3710      	adds	r7, #16
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}

0800b838 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b086      	sub	sp, #24
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b844:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b846:	697b      	ldr	r3, [r7, #20]
 800b848:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b84a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b84c:	697b      	ldr	r3, [r7, #20]
 800b84e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b852:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	689b      	ldr	r3, [r3, #8]
 800b85a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b85e:	2b80      	cmp	r3, #128	; 0x80
 800b860:	d109      	bne.n	800b876 <UART_DMAError+0x3e>
 800b862:	693b      	ldr	r3, [r7, #16]
 800b864:	2b21      	cmp	r3, #33	; 0x21
 800b866:	d106      	bne.n	800b876 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b868:	697b      	ldr	r3, [r7, #20]
 800b86a:	2200      	movs	r2, #0
 800b86c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800b870:	6978      	ldr	r0, [r7, #20]
 800b872:	f7ff fe4d 	bl	800b510 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	689b      	ldr	r3, [r3, #8]
 800b87c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b880:	2b40      	cmp	r3, #64	; 0x40
 800b882:	d109      	bne.n	800b898 <UART_DMAError+0x60>
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	2b22      	cmp	r3, #34	; 0x22
 800b888:	d106      	bne.n	800b898 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	2200      	movs	r2, #0
 800b88e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800b892:	6978      	ldr	r0, [r7, #20]
 800b894:	f7ff fe62 	bl	800b55c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b898:	697b      	ldr	r3, [r7, #20]
 800b89a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b89e:	f043 0210 	orr.w	r2, r3, #16
 800b8a2:	697b      	ldr	r3, [r7, #20]
 800b8a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b8a8:	6978      	ldr	r0, [r7, #20]
 800b8aa:	f7ff fa01 	bl	800acb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b8ae:	bf00      	nop
 800b8b0:	3718      	adds	r7, #24
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}

0800b8b6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b8b6:	b580      	push	{r7, lr}
 800b8b8:	b084      	sub	sp, #16
 800b8ba:	af00      	add	r7, sp, #0
 800b8bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b8d4:	68f8      	ldr	r0, [r7, #12]
 800b8d6:	f7ff f9eb 	bl	800acb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b8da:	bf00      	nop
 800b8dc:	3710      	adds	r7, #16
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}

0800b8e2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b8e2:	b580      	push	{r7, lr}
 800b8e4:	b088      	sub	sp, #32
 800b8e6:	af00      	add	r7, sp, #0
 800b8e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	e853 3f00 	ldrex	r3, [r3]
 800b8f6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8fe:	61fb      	str	r3, [r7, #28]
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	461a      	mov	r2, r3
 800b906:	69fb      	ldr	r3, [r7, #28]
 800b908:	61bb      	str	r3, [r7, #24]
 800b90a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b90c:	6979      	ldr	r1, [r7, #20]
 800b90e:	69ba      	ldr	r2, [r7, #24]
 800b910:	e841 2300 	strex	r3, r2, [r1]
 800b914:	613b      	str	r3, [r7, #16]
   return(result);
 800b916:	693b      	ldr	r3, [r7, #16]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d1e6      	bne.n	800b8ea <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2220      	movs	r2, #32
 800b920:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2200      	movs	r2, #0
 800b926:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f7f6 fcfd 	bl	8002328 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b92e:	bf00      	nop
 800b930:	3720      	adds	r7, #32
 800b932:	46bd      	mov	sp, r7
 800b934:	bd80      	pop	{r7, pc}

0800b936 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b936:	b480      	push	{r7}
 800b938:	b083      	sub	sp, #12
 800b93a:	af00      	add	r7, sp, #0
 800b93c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b93e:	bf00      	nop
 800b940:	370c      	adds	r7, #12
 800b942:	46bd      	mov	sp, r7
 800b944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b948:	4770      	bx	lr

0800b94a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b94a:	b580      	push	{r7, lr}
 800b94c:	b08c      	sub	sp, #48	; 0x30
 800b94e:	af00      	add	r7, sp, #0
 800b950:	60f8      	str	r0, [r7, #12]
 800b952:	60b9      	str	r1, [r7, #8]
 800b954:	4613      	mov	r3, r2
 800b956:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b95e:	2b20      	cmp	r3, #32
 800b960:	d142      	bne.n	800b9e8 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b962:	68bb      	ldr	r3, [r7, #8]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d002      	beq.n	800b96e <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800b968:	88fb      	ldrh	r3, [r7, #6]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d101      	bne.n	800b972 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800b96e:	2301      	movs	r3, #1
 800b970:	e03b      	b.n	800b9ea <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	2201      	movs	r2, #1
 800b976:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	2200      	movs	r2, #0
 800b97c:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800b97e:	88fb      	ldrh	r3, [r7, #6]
 800b980:	461a      	mov	r2, r3
 800b982:	68b9      	ldr	r1, [r7, #8]
 800b984:	68f8      	ldr	r0, [r7, #12]
 800b986:	f7ff fd23 	bl	800b3d0 <UART_Start_Receive_DMA>
 800b98a:	4603      	mov	r3, r0
 800b98c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800b990:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b994:	2b00      	cmp	r3, #0
 800b996:	d124      	bne.n	800b9e2 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b99c:	2b01      	cmp	r3, #1
 800b99e:	d11d      	bne.n	800b9dc <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	2210      	movs	r2, #16
 800b9a6:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9ae:	69bb      	ldr	r3, [r7, #24]
 800b9b0:	e853 3f00 	ldrex	r3, [r3]
 800b9b4:	617b      	str	r3, [r7, #20]
   return(result);
 800b9b6:	697b      	ldr	r3, [r7, #20]
 800b9b8:	f043 0310 	orr.w	r3, r3, #16
 800b9bc:	62bb      	str	r3, [r7, #40]	; 0x28
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	461a      	mov	r2, r3
 800b9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9c6:	627b      	str	r3, [r7, #36]	; 0x24
 800b9c8:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ca:	6a39      	ldr	r1, [r7, #32]
 800b9cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9ce:	e841 2300 	strex	r3, r2, [r1]
 800b9d2:	61fb      	str	r3, [r7, #28]
   return(result);
 800b9d4:	69fb      	ldr	r3, [r7, #28]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d1e6      	bne.n	800b9a8 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800b9da:	e002      	b.n	800b9e2 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800b9dc:	2301      	movs	r3, #1
 800b9de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800b9e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b9e6:	e000      	b.n	800b9ea <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800b9e8:	2302      	movs	r3, #2
  }
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3730      	adds	r7, #48	; 0x30
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}
	...

0800b9f4 <siprintf>:
 800b9f4:	b40e      	push	{r1, r2, r3}
 800b9f6:	b500      	push	{lr}
 800b9f8:	b09c      	sub	sp, #112	; 0x70
 800b9fa:	ab1d      	add	r3, sp, #116	; 0x74
 800b9fc:	9002      	str	r0, [sp, #8]
 800b9fe:	9006      	str	r0, [sp, #24]
 800ba00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ba04:	4809      	ldr	r0, [pc, #36]	; (800ba2c <siprintf+0x38>)
 800ba06:	9107      	str	r1, [sp, #28]
 800ba08:	9104      	str	r1, [sp, #16]
 800ba0a:	4909      	ldr	r1, [pc, #36]	; (800ba30 <siprintf+0x3c>)
 800ba0c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba10:	9105      	str	r1, [sp, #20]
 800ba12:	6800      	ldr	r0, [r0, #0]
 800ba14:	9301      	str	r3, [sp, #4]
 800ba16:	a902      	add	r1, sp, #8
 800ba18:	f000 f992 	bl	800bd40 <_svfiprintf_r>
 800ba1c:	9b02      	ldr	r3, [sp, #8]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	701a      	strb	r2, [r3, #0]
 800ba22:	b01c      	add	sp, #112	; 0x70
 800ba24:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba28:	b003      	add	sp, #12
 800ba2a:	4770      	bx	lr
 800ba2c:	20000074 	.word	0x20000074
 800ba30:	ffff0208 	.word	0xffff0208

0800ba34 <memset>:
 800ba34:	4402      	add	r2, r0
 800ba36:	4603      	mov	r3, r0
 800ba38:	4293      	cmp	r3, r2
 800ba3a:	d100      	bne.n	800ba3e <memset+0xa>
 800ba3c:	4770      	bx	lr
 800ba3e:	f803 1b01 	strb.w	r1, [r3], #1
 800ba42:	e7f9      	b.n	800ba38 <memset+0x4>

0800ba44 <__errno>:
 800ba44:	4b01      	ldr	r3, [pc, #4]	; (800ba4c <__errno+0x8>)
 800ba46:	6818      	ldr	r0, [r3, #0]
 800ba48:	4770      	bx	lr
 800ba4a:	bf00      	nop
 800ba4c:	20000074 	.word	0x20000074

0800ba50 <__libc_init_array>:
 800ba50:	b570      	push	{r4, r5, r6, lr}
 800ba52:	4d0d      	ldr	r5, [pc, #52]	; (800ba88 <__libc_init_array+0x38>)
 800ba54:	4c0d      	ldr	r4, [pc, #52]	; (800ba8c <__libc_init_array+0x3c>)
 800ba56:	1b64      	subs	r4, r4, r5
 800ba58:	10a4      	asrs	r4, r4, #2
 800ba5a:	2600      	movs	r6, #0
 800ba5c:	42a6      	cmp	r6, r4
 800ba5e:	d109      	bne.n	800ba74 <__libc_init_array+0x24>
 800ba60:	4d0b      	ldr	r5, [pc, #44]	; (800ba90 <__libc_init_array+0x40>)
 800ba62:	4c0c      	ldr	r4, [pc, #48]	; (800ba94 <__libc_init_array+0x44>)
 800ba64:	f000 fc6a 	bl	800c33c <_init>
 800ba68:	1b64      	subs	r4, r4, r5
 800ba6a:	10a4      	asrs	r4, r4, #2
 800ba6c:	2600      	movs	r6, #0
 800ba6e:	42a6      	cmp	r6, r4
 800ba70:	d105      	bne.n	800ba7e <__libc_init_array+0x2e>
 800ba72:	bd70      	pop	{r4, r5, r6, pc}
 800ba74:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba78:	4798      	blx	r3
 800ba7a:	3601      	adds	r6, #1
 800ba7c:	e7ee      	b.n	800ba5c <__libc_init_array+0xc>
 800ba7e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba82:	4798      	blx	r3
 800ba84:	3601      	adds	r6, #1
 800ba86:	e7f2      	b.n	800ba6e <__libc_init_array+0x1e>
 800ba88:	0800c468 	.word	0x0800c468
 800ba8c:	0800c468 	.word	0x0800c468
 800ba90:	0800c468 	.word	0x0800c468
 800ba94:	0800c46c 	.word	0x0800c46c

0800ba98 <__retarget_lock_acquire_recursive>:
 800ba98:	4770      	bx	lr

0800ba9a <__retarget_lock_release_recursive>:
 800ba9a:	4770      	bx	lr

0800ba9c <_free_r>:
 800ba9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba9e:	2900      	cmp	r1, #0
 800baa0:	d044      	beq.n	800bb2c <_free_r+0x90>
 800baa2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800baa6:	9001      	str	r0, [sp, #4]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	f1a1 0404 	sub.w	r4, r1, #4
 800baae:	bfb8      	it	lt
 800bab0:	18e4      	addlt	r4, r4, r3
 800bab2:	f000 f8df 	bl	800bc74 <__malloc_lock>
 800bab6:	4a1e      	ldr	r2, [pc, #120]	; (800bb30 <_free_r+0x94>)
 800bab8:	9801      	ldr	r0, [sp, #4]
 800baba:	6813      	ldr	r3, [r2, #0]
 800babc:	b933      	cbnz	r3, 800bacc <_free_r+0x30>
 800babe:	6063      	str	r3, [r4, #4]
 800bac0:	6014      	str	r4, [r2, #0]
 800bac2:	b003      	add	sp, #12
 800bac4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bac8:	f000 b8da 	b.w	800bc80 <__malloc_unlock>
 800bacc:	42a3      	cmp	r3, r4
 800bace:	d908      	bls.n	800bae2 <_free_r+0x46>
 800bad0:	6825      	ldr	r5, [r4, #0]
 800bad2:	1961      	adds	r1, r4, r5
 800bad4:	428b      	cmp	r3, r1
 800bad6:	bf01      	itttt	eq
 800bad8:	6819      	ldreq	r1, [r3, #0]
 800bada:	685b      	ldreq	r3, [r3, #4]
 800badc:	1949      	addeq	r1, r1, r5
 800bade:	6021      	streq	r1, [r4, #0]
 800bae0:	e7ed      	b.n	800babe <_free_r+0x22>
 800bae2:	461a      	mov	r2, r3
 800bae4:	685b      	ldr	r3, [r3, #4]
 800bae6:	b10b      	cbz	r3, 800baec <_free_r+0x50>
 800bae8:	42a3      	cmp	r3, r4
 800baea:	d9fa      	bls.n	800bae2 <_free_r+0x46>
 800baec:	6811      	ldr	r1, [r2, #0]
 800baee:	1855      	adds	r5, r2, r1
 800baf0:	42a5      	cmp	r5, r4
 800baf2:	d10b      	bne.n	800bb0c <_free_r+0x70>
 800baf4:	6824      	ldr	r4, [r4, #0]
 800baf6:	4421      	add	r1, r4
 800baf8:	1854      	adds	r4, r2, r1
 800bafa:	42a3      	cmp	r3, r4
 800bafc:	6011      	str	r1, [r2, #0]
 800bafe:	d1e0      	bne.n	800bac2 <_free_r+0x26>
 800bb00:	681c      	ldr	r4, [r3, #0]
 800bb02:	685b      	ldr	r3, [r3, #4]
 800bb04:	6053      	str	r3, [r2, #4]
 800bb06:	440c      	add	r4, r1
 800bb08:	6014      	str	r4, [r2, #0]
 800bb0a:	e7da      	b.n	800bac2 <_free_r+0x26>
 800bb0c:	d902      	bls.n	800bb14 <_free_r+0x78>
 800bb0e:	230c      	movs	r3, #12
 800bb10:	6003      	str	r3, [r0, #0]
 800bb12:	e7d6      	b.n	800bac2 <_free_r+0x26>
 800bb14:	6825      	ldr	r5, [r4, #0]
 800bb16:	1961      	adds	r1, r4, r5
 800bb18:	428b      	cmp	r3, r1
 800bb1a:	bf04      	itt	eq
 800bb1c:	6819      	ldreq	r1, [r3, #0]
 800bb1e:	685b      	ldreq	r3, [r3, #4]
 800bb20:	6063      	str	r3, [r4, #4]
 800bb22:	bf04      	itt	eq
 800bb24:	1949      	addeq	r1, r1, r5
 800bb26:	6021      	streq	r1, [r4, #0]
 800bb28:	6054      	str	r4, [r2, #4]
 800bb2a:	e7ca      	b.n	800bac2 <_free_r+0x26>
 800bb2c:	b003      	add	sp, #12
 800bb2e:	bd30      	pop	{r4, r5, pc}
 800bb30:	200008dc 	.word	0x200008dc

0800bb34 <sbrk_aligned>:
 800bb34:	b570      	push	{r4, r5, r6, lr}
 800bb36:	4e0e      	ldr	r6, [pc, #56]	; (800bb70 <sbrk_aligned+0x3c>)
 800bb38:	460c      	mov	r4, r1
 800bb3a:	6831      	ldr	r1, [r6, #0]
 800bb3c:	4605      	mov	r5, r0
 800bb3e:	b911      	cbnz	r1, 800bb46 <sbrk_aligned+0x12>
 800bb40:	f000 fba6 	bl	800c290 <_sbrk_r>
 800bb44:	6030      	str	r0, [r6, #0]
 800bb46:	4621      	mov	r1, r4
 800bb48:	4628      	mov	r0, r5
 800bb4a:	f000 fba1 	bl	800c290 <_sbrk_r>
 800bb4e:	1c43      	adds	r3, r0, #1
 800bb50:	d00a      	beq.n	800bb68 <sbrk_aligned+0x34>
 800bb52:	1cc4      	adds	r4, r0, #3
 800bb54:	f024 0403 	bic.w	r4, r4, #3
 800bb58:	42a0      	cmp	r0, r4
 800bb5a:	d007      	beq.n	800bb6c <sbrk_aligned+0x38>
 800bb5c:	1a21      	subs	r1, r4, r0
 800bb5e:	4628      	mov	r0, r5
 800bb60:	f000 fb96 	bl	800c290 <_sbrk_r>
 800bb64:	3001      	adds	r0, #1
 800bb66:	d101      	bne.n	800bb6c <sbrk_aligned+0x38>
 800bb68:	f04f 34ff 	mov.w	r4, #4294967295
 800bb6c:	4620      	mov	r0, r4
 800bb6e:	bd70      	pop	{r4, r5, r6, pc}
 800bb70:	200008e0 	.word	0x200008e0

0800bb74 <_malloc_r>:
 800bb74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb78:	1ccd      	adds	r5, r1, #3
 800bb7a:	f025 0503 	bic.w	r5, r5, #3
 800bb7e:	3508      	adds	r5, #8
 800bb80:	2d0c      	cmp	r5, #12
 800bb82:	bf38      	it	cc
 800bb84:	250c      	movcc	r5, #12
 800bb86:	2d00      	cmp	r5, #0
 800bb88:	4607      	mov	r7, r0
 800bb8a:	db01      	blt.n	800bb90 <_malloc_r+0x1c>
 800bb8c:	42a9      	cmp	r1, r5
 800bb8e:	d905      	bls.n	800bb9c <_malloc_r+0x28>
 800bb90:	230c      	movs	r3, #12
 800bb92:	603b      	str	r3, [r7, #0]
 800bb94:	2600      	movs	r6, #0
 800bb96:	4630      	mov	r0, r6
 800bb98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb9c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bc70 <_malloc_r+0xfc>
 800bba0:	f000 f868 	bl	800bc74 <__malloc_lock>
 800bba4:	f8d8 3000 	ldr.w	r3, [r8]
 800bba8:	461c      	mov	r4, r3
 800bbaa:	bb5c      	cbnz	r4, 800bc04 <_malloc_r+0x90>
 800bbac:	4629      	mov	r1, r5
 800bbae:	4638      	mov	r0, r7
 800bbb0:	f7ff ffc0 	bl	800bb34 <sbrk_aligned>
 800bbb4:	1c43      	adds	r3, r0, #1
 800bbb6:	4604      	mov	r4, r0
 800bbb8:	d155      	bne.n	800bc66 <_malloc_r+0xf2>
 800bbba:	f8d8 4000 	ldr.w	r4, [r8]
 800bbbe:	4626      	mov	r6, r4
 800bbc0:	2e00      	cmp	r6, #0
 800bbc2:	d145      	bne.n	800bc50 <_malloc_r+0xdc>
 800bbc4:	2c00      	cmp	r4, #0
 800bbc6:	d048      	beq.n	800bc5a <_malloc_r+0xe6>
 800bbc8:	6823      	ldr	r3, [r4, #0]
 800bbca:	4631      	mov	r1, r6
 800bbcc:	4638      	mov	r0, r7
 800bbce:	eb04 0903 	add.w	r9, r4, r3
 800bbd2:	f000 fb5d 	bl	800c290 <_sbrk_r>
 800bbd6:	4581      	cmp	r9, r0
 800bbd8:	d13f      	bne.n	800bc5a <_malloc_r+0xe6>
 800bbda:	6821      	ldr	r1, [r4, #0]
 800bbdc:	1a6d      	subs	r5, r5, r1
 800bbde:	4629      	mov	r1, r5
 800bbe0:	4638      	mov	r0, r7
 800bbe2:	f7ff ffa7 	bl	800bb34 <sbrk_aligned>
 800bbe6:	3001      	adds	r0, #1
 800bbe8:	d037      	beq.n	800bc5a <_malloc_r+0xe6>
 800bbea:	6823      	ldr	r3, [r4, #0]
 800bbec:	442b      	add	r3, r5
 800bbee:	6023      	str	r3, [r4, #0]
 800bbf0:	f8d8 3000 	ldr.w	r3, [r8]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d038      	beq.n	800bc6a <_malloc_r+0xf6>
 800bbf8:	685a      	ldr	r2, [r3, #4]
 800bbfa:	42a2      	cmp	r2, r4
 800bbfc:	d12b      	bne.n	800bc56 <_malloc_r+0xe2>
 800bbfe:	2200      	movs	r2, #0
 800bc00:	605a      	str	r2, [r3, #4]
 800bc02:	e00f      	b.n	800bc24 <_malloc_r+0xb0>
 800bc04:	6822      	ldr	r2, [r4, #0]
 800bc06:	1b52      	subs	r2, r2, r5
 800bc08:	d41f      	bmi.n	800bc4a <_malloc_r+0xd6>
 800bc0a:	2a0b      	cmp	r2, #11
 800bc0c:	d917      	bls.n	800bc3e <_malloc_r+0xca>
 800bc0e:	1961      	adds	r1, r4, r5
 800bc10:	42a3      	cmp	r3, r4
 800bc12:	6025      	str	r5, [r4, #0]
 800bc14:	bf18      	it	ne
 800bc16:	6059      	strne	r1, [r3, #4]
 800bc18:	6863      	ldr	r3, [r4, #4]
 800bc1a:	bf08      	it	eq
 800bc1c:	f8c8 1000 	streq.w	r1, [r8]
 800bc20:	5162      	str	r2, [r4, r5]
 800bc22:	604b      	str	r3, [r1, #4]
 800bc24:	4638      	mov	r0, r7
 800bc26:	f104 060b 	add.w	r6, r4, #11
 800bc2a:	f000 f829 	bl	800bc80 <__malloc_unlock>
 800bc2e:	f026 0607 	bic.w	r6, r6, #7
 800bc32:	1d23      	adds	r3, r4, #4
 800bc34:	1af2      	subs	r2, r6, r3
 800bc36:	d0ae      	beq.n	800bb96 <_malloc_r+0x22>
 800bc38:	1b9b      	subs	r3, r3, r6
 800bc3a:	50a3      	str	r3, [r4, r2]
 800bc3c:	e7ab      	b.n	800bb96 <_malloc_r+0x22>
 800bc3e:	42a3      	cmp	r3, r4
 800bc40:	6862      	ldr	r2, [r4, #4]
 800bc42:	d1dd      	bne.n	800bc00 <_malloc_r+0x8c>
 800bc44:	f8c8 2000 	str.w	r2, [r8]
 800bc48:	e7ec      	b.n	800bc24 <_malloc_r+0xb0>
 800bc4a:	4623      	mov	r3, r4
 800bc4c:	6864      	ldr	r4, [r4, #4]
 800bc4e:	e7ac      	b.n	800bbaa <_malloc_r+0x36>
 800bc50:	4634      	mov	r4, r6
 800bc52:	6876      	ldr	r6, [r6, #4]
 800bc54:	e7b4      	b.n	800bbc0 <_malloc_r+0x4c>
 800bc56:	4613      	mov	r3, r2
 800bc58:	e7cc      	b.n	800bbf4 <_malloc_r+0x80>
 800bc5a:	230c      	movs	r3, #12
 800bc5c:	603b      	str	r3, [r7, #0]
 800bc5e:	4638      	mov	r0, r7
 800bc60:	f000 f80e 	bl	800bc80 <__malloc_unlock>
 800bc64:	e797      	b.n	800bb96 <_malloc_r+0x22>
 800bc66:	6025      	str	r5, [r4, #0]
 800bc68:	e7dc      	b.n	800bc24 <_malloc_r+0xb0>
 800bc6a:	605b      	str	r3, [r3, #4]
 800bc6c:	deff      	udf	#255	; 0xff
 800bc6e:	bf00      	nop
 800bc70:	200008dc 	.word	0x200008dc

0800bc74 <__malloc_lock>:
 800bc74:	4801      	ldr	r0, [pc, #4]	; (800bc7c <__malloc_lock+0x8>)
 800bc76:	f7ff bf0f 	b.w	800ba98 <__retarget_lock_acquire_recursive>
 800bc7a:	bf00      	nop
 800bc7c:	200008d8 	.word	0x200008d8

0800bc80 <__malloc_unlock>:
 800bc80:	4801      	ldr	r0, [pc, #4]	; (800bc88 <__malloc_unlock+0x8>)
 800bc82:	f7ff bf0a 	b.w	800ba9a <__retarget_lock_release_recursive>
 800bc86:	bf00      	nop
 800bc88:	200008d8 	.word	0x200008d8

0800bc8c <__ssputs_r>:
 800bc8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc90:	688e      	ldr	r6, [r1, #8]
 800bc92:	461f      	mov	r7, r3
 800bc94:	42be      	cmp	r6, r7
 800bc96:	680b      	ldr	r3, [r1, #0]
 800bc98:	4682      	mov	sl, r0
 800bc9a:	460c      	mov	r4, r1
 800bc9c:	4690      	mov	r8, r2
 800bc9e:	d82c      	bhi.n	800bcfa <__ssputs_r+0x6e>
 800bca0:	898a      	ldrh	r2, [r1, #12]
 800bca2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bca6:	d026      	beq.n	800bcf6 <__ssputs_r+0x6a>
 800bca8:	6965      	ldr	r5, [r4, #20]
 800bcaa:	6909      	ldr	r1, [r1, #16]
 800bcac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bcb0:	eba3 0901 	sub.w	r9, r3, r1
 800bcb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bcb8:	1c7b      	adds	r3, r7, #1
 800bcba:	444b      	add	r3, r9
 800bcbc:	106d      	asrs	r5, r5, #1
 800bcbe:	429d      	cmp	r5, r3
 800bcc0:	bf38      	it	cc
 800bcc2:	461d      	movcc	r5, r3
 800bcc4:	0553      	lsls	r3, r2, #21
 800bcc6:	d527      	bpl.n	800bd18 <__ssputs_r+0x8c>
 800bcc8:	4629      	mov	r1, r5
 800bcca:	f7ff ff53 	bl	800bb74 <_malloc_r>
 800bcce:	4606      	mov	r6, r0
 800bcd0:	b360      	cbz	r0, 800bd2c <__ssputs_r+0xa0>
 800bcd2:	6921      	ldr	r1, [r4, #16]
 800bcd4:	464a      	mov	r2, r9
 800bcd6:	f000 faeb 	bl	800c2b0 <memcpy>
 800bcda:	89a3      	ldrh	r3, [r4, #12]
 800bcdc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bce4:	81a3      	strh	r3, [r4, #12]
 800bce6:	6126      	str	r6, [r4, #16]
 800bce8:	6165      	str	r5, [r4, #20]
 800bcea:	444e      	add	r6, r9
 800bcec:	eba5 0509 	sub.w	r5, r5, r9
 800bcf0:	6026      	str	r6, [r4, #0]
 800bcf2:	60a5      	str	r5, [r4, #8]
 800bcf4:	463e      	mov	r6, r7
 800bcf6:	42be      	cmp	r6, r7
 800bcf8:	d900      	bls.n	800bcfc <__ssputs_r+0x70>
 800bcfa:	463e      	mov	r6, r7
 800bcfc:	6820      	ldr	r0, [r4, #0]
 800bcfe:	4632      	mov	r2, r6
 800bd00:	4641      	mov	r1, r8
 800bd02:	f000 faab 	bl	800c25c <memmove>
 800bd06:	68a3      	ldr	r3, [r4, #8]
 800bd08:	1b9b      	subs	r3, r3, r6
 800bd0a:	60a3      	str	r3, [r4, #8]
 800bd0c:	6823      	ldr	r3, [r4, #0]
 800bd0e:	4433      	add	r3, r6
 800bd10:	6023      	str	r3, [r4, #0]
 800bd12:	2000      	movs	r0, #0
 800bd14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd18:	462a      	mov	r2, r5
 800bd1a:	f000 fad7 	bl	800c2cc <_realloc_r>
 800bd1e:	4606      	mov	r6, r0
 800bd20:	2800      	cmp	r0, #0
 800bd22:	d1e0      	bne.n	800bce6 <__ssputs_r+0x5a>
 800bd24:	6921      	ldr	r1, [r4, #16]
 800bd26:	4650      	mov	r0, sl
 800bd28:	f7ff feb8 	bl	800ba9c <_free_r>
 800bd2c:	230c      	movs	r3, #12
 800bd2e:	f8ca 3000 	str.w	r3, [sl]
 800bd32:	89a3      	ldrh	r3, [r4, #12]
 800bd34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd38:	81a3      	strh	r3, [r4, #12]
 800bd3a:	f04f 30ff 	mov.w	r0, #4294967295
 800bd3e:	e7e9      	b.n	800bd14 <__ssputs_r+0x88>

0800bd40 <_svfiprintf_r>:
 800bd40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd44:	4698      	mov	r8, r3
 800bd46:	898b      	ldrh	r3, [r1, #12]
 800bd48:	061b      	lsls	r3, r3, #24
 800bd4a:	b09d      	sub	sp, #116	; 0x74
 800bd4c:	4607      	mov	r7, r0
 800bd4e:	460d      	mov	r5, r1
 800bd50:	4614      	mov	r4, r2
 800bd52:	d50e      	bpl.n	800bd72 <_svfiprintf_r+0x32>
 800bd54:	690b      	ldr	r3, [r1, #16]
 800bd56:	b963      	cbnz	r3, 800bd72 <_svfiprintf_r+0x32>
 800bd58:	2140      	movs	r1, #64	; 0x40
 800bd5a:	f7ff ff0b 	bl	800bb74 <_malloc_r>
 800bd5e:	6028      	str	r0, [r5, #0]
 800bd60:	6128      	str	r0, [r5, #16]
 800bd62:	b920      	cbnz	r0, 800bd6e <_svfiprintf_r+0x2e>
 800bd64:	230c      	movs	r3, #12
 800bd66:	603b      	str	r3, [r7, #0]
 800bd68:	f04f 30ff 	mov.w	r0, #4294967295
 800bd6c:	e0d0      	b.n	800bf10 <_svfiprintf_r+0x1d0>
 800bd6e:	2340      	movs	r3, #64	; 0x40
 800bd70:	616b      	str	r3, [r5, #20]
 800bd72:	2300      	movs	r3, #0
 800bd74:	9309      	str	r3, [sp, #36]	; 0x24
 800bd76:	2320      	movs	r3, #32
 800bd78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd7c:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd80:	2330      	movs	r3, #48	; 0x30
 800bd82:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bf28 <_svfiprintf_r+0x1e8>
 800bd86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd8a:	f04f 0901 	mov.w	r9, #1
 800bd8e:	4623      	mov	r3, r4
 800bd90:	469a      	mov	sl, r3
 800bd92:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd96:	b10a      	cbz	r2, 800bd9c <_svfiprintf_r+0x5c>
 800bd98:	2a25      	cmp	r2, #37	; 0x25
 800bd9a:	d1f9      	bne.n	800bd90 <_svfiprintf_r+0x50>
 800bd9c:	ebba 0b04 	subs.w	fp, sl, r4
 800bda0:	d00b      	beq.n	800bdba <_svfiprintf_r+0x7a>
 800bda2:	465b      	mov	r3, fp
 800bda4:	4622      	mov	r2, r4
 800bda6:	4629      	mov	r1, r5
 800bda8:	4638      	mov	r0, r7
 800bdaa:	f7ff ff6f 	bl	800bc8c <__ssputs_r>
 800bdae:	3001      	adds	r0, #1
 800bdb0:	f000 80a9 	beq.w	800bf06 <_svfiprintf_r+0x1c6>
 800bdb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bdb6:	445a      	add	r2, fp
 800bdb8:	9209      	str	r2, [sp, #36]	; 0x24
 800bdba:	f89a 3000 	ldrb.w	r3, [sl]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	f000 80a1 	beq.w	800bf06 <_svfiprintf_r+0x1c6>
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	f04f 32ff 	mov.w	r2, #4294967295
 800bdca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bdce:	f10a 0a01 	add.w	sl, sl, #1
 800bdd2:	9304      	str	r3, [sp, #16]
 800bdd4:	9307      	str	r3, [sp, #28]
 800bdd6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bdda:	931a      	str	r3, [sp, #104]	; 0x68
 800bddc:	4654      	mov	r4, sl
 800bdde:	2205      	movs	r2, #5
 800bde0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bde4:	4850      	ldr	r0, [pc, #320]	; (800bf28 <_svfiprintf_r+0x1e8>)
 800bde6:	f7f4 f9f3 	bl	80001d0 <memchr>
 800bdea:	9a04      	ldr	r2, [sp, #16]
 800bdec:	b9d8      	cbnz	r0, 800be26 <_svfiprintf_r+0xe6>
 800bdee:	06d0      	lsls	r0, r2, #27
 800bdf0:	bf44      	itt	mi
 800bdf2:	2320      	movmi	r3, #32
 800bdf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bdf8:	0711      	lsls	r1, r2, #28
 800bdfa:	bf44      	itt	mi
 800bdfc:	232b      	movmi	r3, #43	; 0x2b
 800bdfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be02:	f89a 3000 	ldrb.w	r3, [sl]
 800be06:	2b2a      	cmp	r3, #42	; 0x2a
 800be08:	d015      	beq.n	800be36 <_svfiprintf_r+0xf6>
 800be0a:	9a07      	ldr	r2, [sp, #28]
 800be0c:	4654      	mov	r4, sl
 800be0e:	2000      	movs	r0, #0
 800be10:	f04f 0c0a 	mov.w	ip, #10
 800be14:	4621      	mov	r1, r4
 800be16:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be1a:	3b30      	subs	r3, #48	; 0x30
 800be1c:	2b09      	cmp	r3, #9
 800be1e:	d94d      	bls.n	800bebc <_svfiprintf_r+0x17c>
 800be20:	b1b0      	cbz	r0, 800be50 <_svfiprintf_r+0x110>
 800be22:	9207      	str	r2, [sp, #28]
 800be24:	e014      	b.n	800be50 <_svfiprintf_r+0x110>
 800be26:	eba0 0308 	sub.w	r3, r0, r8
 800be2a:	fa09 f303 	lsl.w	r3, r9, r3
 800be2e:	4313      	orrs	r3, r2
 800be30:	9304      	str	r3, [sp, #16]
 800be32:	46a2      	mov	sl, r4
 800be34:	e7d2      	b.n	800bddc <_svfiprintf_r+0x9c>
 800be36:	9b03      	ldr	r3, [sp, #12]
 800be38:	1d19      	adds	r1, r3, #4
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	9103      	str	r1, [sp, #12]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	bfbb      	ittet	lt
 800be42:	425b      	neglt	r3, r3
 800be44:	f042 0202 	orrlt.w	r2, r2, #2
 800be48:	9307      	strge	r3, [sp, #28]
 800be4a:	9307      	strlt	r3, [sp, #28]
 800be4c:	bfb8      	it	lt
 800be4e:	9204      	strlt	r2, [sp, #16]
 800be50:	7823      	ldrb	r3, [r4, #0]
 800be52:	2b2e      	cmp	r3, #46	; 0x2e
 800be54:	d10c      	bne.n	800be70 <_svfiprintf_r+0x130>
 800be56:	7863      	ldrb	r3, [r4, #1]
 800be58:	2b2a      	cmp	r3, #42	; 0x2a
 800be5a:	d134      	bne.n	800bec6 <_svfiprintf_r+0x186>
 800be5c:	9b03      	ldr	r3, [sp, #12]
 800be5e:	1d1a      	adds	r2, r3, #4
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	9203      	str	r2, [sp, #12]
 800be64:	2b00      	cmp	r3, #0
 800be66:	bfb8      	it	lt
 800be68:	f04f 33ff 	movlt.w	r3, #4294967295
 800be6c:	3402      	adds	r4, #2
 800be6e:	9305      	str	r3, [sp, #20]
 800be70:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800bf38 <_svfiprintf_r+0x1f8>
 800be74:	7821      	ldrb	r1, [r4, #0]
 800be76:	2203      	movs	r2, #3
 800be78:	4650      	mov	r0, sl
 800be7a:	f7f4 f9a9 	bl	80001d0 <memchr>
 800be7e:	b138      	cbz	r0, 800be90 <_svfiprintf_r+0x150>
 800be80:	9b04      	ldr	r3, [sp, #16]
 800be82:	eba0 000a 	sub.w	r0, r0, sl
 800be86:	2240      	movs	r2, #64	; 0x40
 800be88:	4082      	lsls	r2, r0
 800be8a:	4313      	orrs	r3, r2
 800be8c:	3401      	adds	r4, #1
 800be8e:	9304      	str	r3, [sp, #16]
 800be90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be94:	4825      	ldr	r0, [pc, #148]	; (800bf2c <_svfiprintf_r+0x1ec>)
 800be96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be9a:	2206      	movs	r2, #6
 800be9c:	f7f4 f998 	bl	80001d0 <memchr>
 800bea0:	2800      	cmp	r0, #0
 800bea2:	d038      	beq.n	800bf16 <_svfiprintf_r+0x1d6>
 800bea4:	4b22      	ldr	r3, [pc, #136]	; (800bf30 <_svfiprintf_r+0x1f0>)
 800bea6:	bb1b      	cbnz	r3, 800bef0 <_svfiprintf_r+0x1b0>
 800bea8:	9b03      	ldr	r3, [sp, #12]
 800beaa:	3307      	adds	r3, #7
 800beac:	f023 0307 	bic.w	r3, r3, #7
 800beb0:	3308      	adds	r3, #8
 800beb2:	9303      	str	r3, [sp, #12]
 800beb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800beb6:	4433      	add	r3, r6
 800beb8:	9309      	str	r3, [sp, #36]	; 0x24
 800beba:	e768      	b.n	800bd8e <_svfiprintf_r+0x4e>
 800bebc:	fb0c 3202 	mla	r2, ip, r2, r3
 800bec0:	460c      	mov	r4, r1
 800bec2:	2001      	movs	r0, #1
 800bec4:	e7a6      	b.n	800be14 <_svfiprintf_r+0xd4>
 800bec6:	2300      	movs	r3, #0
 800bec8:	3401      	adds	r4, #1
 800beca:	9305      	str	r3, [sp, #20]
 800becc:	4619      	mov	r1, r3
 800bece:	f04f 0c0a 	mov.w	ip, #10
 800bed2:	4620      	mov	r0, r4
 800bed4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bed8:	3a30      	subs	r2, #48	; 0x30
 800beda:	2a09      	cmp	r2, #9
 800bedc:	d903      	bls.n	800bee6 <_svfiprintf_r+0x1a6>
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d0c6      	beq.n	800be70 <_svfiprintf_r+0x130>
 800bee2:	9105      	str	r1, [sp, #20]
 800bee4:	e7c4      	b.n	800be70 <_svfiprintf_r+0x130>
 800bee6:	fb0c 2101 	mla	r1, ip, r1, r2
 800beea:	4604      	mov	r4, r0
 800beec:	2301      	movs	r3, #1
 800beee:	e7f0      	b.n	800bed2 <_svfiprintf_r+0x192>
 800bef0:	ab03      	add	r3, sp, #12
 800bef2:	9300      	str	r3, [sp, #0]
 800bef4:	462a      	mov	r2, r5
 800bef6:	4b0f      	ldr	r3, [pc, #60]	; (800bf34 <_svfiprintf_r+0x1f4>)
 800bef8:	a904      	add	r1, sp, #16
 800befa:	4638      	mov	r0, r7
 800befc:	f3af 8000 	nop.w
 800bf00:	1c42      	adds	r2, r0, #1
 800bf02:	4606      	mov	r6, r0
 800bf04:	d1d6      	bne.n	800beb4 <_svfiprintf_r+0x174>
 800bf06:	89ab      	ldrh	r3, [r5, #12]
 800bf08:	065b      	lsls	r3, r3, #25
 800bf0a:	f53f af2d 	bmi.w	800bd68 <_svfiprintf_r+0x28>
 800bf0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf10:	b01d      	add	sp, #116	; 0x74
 800bf12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf16:	ab03      	add	r3, sp, #12
 800bf18:	9300      	str	r3, [sp, #0]
 800bf1a:	462a      	mov	r2, r5
 800bf1c:	4b05      	ldr	r3, [pc, #20]	; (800bf34 <_svfiprintf_r+0x1f4>)
 800bf1e:	a904      	add	r1, sp, #16
 800bf20:	4638      	mov	r0, r7
 800bf22:	f000 f879 	bl	800c018 <_printf_i>
 800bf26:	e7eb      	b.n	800bf00 <_svfiprintf_r+0x1c0>
 800bf28:	0800c434 	.word	0x0800c434
 800bf2c:	0800c43e 	.word	0x0800c43e
 800bf30:	00000000 	.word	0x00000000
 800bf34:	0800bc8d 	.word	0x0800bc8d
 800bf38:	0800c43a 	.word	0x0800c43a

0800bf3c <_printf_common>:
 800bf3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf40:	4616      	mov	r6, r2
 800bf42:	4699      	mov	r9, r3
 800bf44:	688a      	ldr	r2, [r1, #8]
 800bf46:	690b      	ldr	r3, [r1, #16]
 800bf48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bf4c:	4293      	cmp	r3, r2
 800bf4e:	bfb8      	it	lt
 800bf50:	4613      	movlt	r3, r2
 800bf52:	6033      	str	r3, [r6, #0]
 800bf54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bf58:	4607      	mov	r7, r0
 800bf5a:	460c      	mov	r4, r1
 800bf5c:	b10a      	cbz	r2, 800bf62 <_printf_common+0x26>
 800bf5e:	3301      	adds	r3, #1
 800bf60:	6033      	str	r3, [r6, #0]
 800bf62:	6823      	ldr	r3, [r4, #0]
 800bf64:	0699      	lsls	r1, r3, #26
 800bf66:	bf42      	ittt	mi
 800bf68:	6833      	ldrmi	r3, [r6, #0]
 800bf6a:	3302      	addmi	r3, #2
 800bf6c:	6033      	strmi	r3, [r6, #0]
 800bf6e:	6825      	ldr	r5, [r4, #0]
 800bf70:	f015 0506 	ands.w	r5, r5, #6
 800bf74:	d106      	bne.n	800bf84 <_printf_common+0x48>
 800bf76:	f104 0a19 	add.w	sl, r4, #25
 800bf7a:	68e3      	ldr	r3, [r4, #12]
 800bf7c:	6832      	ldr	r2, [r6, #0]
 800bf7e:	1a9b      	subs	r3, r3, r2
 800bf80:	42ab      	cmp	r3, r5
 800bf82:	dc26      	bgt.n	800bfd2 <_printf_common+0x96>
 800bf84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bf88:	1e13      	subs	r3, r2, #0
 800bf8a:	6822      	ldr	r2, [r4, #0]
 800bf8c:	bf18      	it	ne
 800bf8e:	2301      	movne	r3, #1
 800bf90:	0692      	lsls	r2, r2, #26
 800bf92:	d42b      	bmi.n	800bfec <_printf_common+0xb0>
 800bf94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bf98:	4649      	mov	r1, r9
 800bf9a:	4638      	mov	r0, r7
 800bf9c:	47c0      	blx	r8
 800bf9e:	3001      	adds	r0, #1
 800bfa0:	d01e      	beq.n	800bfe0 <_printf_common+0xa4>
 800bfa2:	6823      	ldr	r3, [r4, #0]
 800bfa4:	6922      	ldr	r2, [r4, #16]
 800bfa6:	f003 0306 	and.w	r3, r3, #6
 800bfaa:	2b04      	cmp	r3, #4
 800bfac:	bf02      	ittt	eq
 800bfae:	68e5      	ldreq	r5, [r4, #12]
 800bfb0:	6833      	ldreq	r3, [r6, #0]
 800bfb2:	1aed      	subeq	r5, r5, r3
 800bfb4:	68a3      	ldr	r3, [r4, #8]
 800bfb6:	bf0c      	ite	eq
 800bfb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bfbc:	2500      	movne	r5, #0
 800bfbe:	4293      	cmp	r3, r2
 800bfc0:	bfc4      	itt	gt
 800bfc2:	1a9b      	subgt	r3, r3, r2
 800bfc4:	18ed      	addgt	r5, r5, r3
 800bfc6:	2600      	movs	r6, #0
 800bfc8:	341a      	adds	r4, #26
 800bfca:	42b5      	cmp	r5, r6
 800bfcc:	d11a      	bne.n	800c004 <_printf_common+0xc8>
 800bfce:	2000      	movs	r0, #0
 800bfd0:	e008      	b.n	800bfe4 <_printf_common+0xa8>
 800bfd2:	2301      	movs	r3, #1
 800bfd4:	4652      	mov	r2, sl
 800bfd6:	4649      	mov	r1, r9
 800bfd8:	4638      	mov	r0, r7
 800bfda:	47c0      	blx	r8
 800bfdc:	3001      	adds	r0, #1
 800bfde:	d103      	bne.n	800bfe8 <_printf_common+0xac>
 800bfe0:	f04f 30ff 	mov.w	r0, #4294967295
 800bfe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfe8:	3501      	adds	r5, #1
 800bfea:	e7c6      	b.n	800bf7a <_printf_common+0x3e>
 800bfec:	18e1      	adds	r1, r4, r3
 800bfee:	1c5a      	adds	r2, r3, #1
 800bff0:	2030      	movs	r0, #48	; 0x30
 800bff2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bff6:	4422      	add	r2, r4
 800bff8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bffc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c000:	3302      	adds	r3, #2
 800c002:	e7c7      	b.n	800bf94 <_printf_common+0x58>
 800c004:	2301      	movs	r3, #1
 800c006:	4622      	mov	r2, r4
 800c008:	4649      	mov	r1, r9
 800c00a:	4638      	mov	r0, r7
 800c00c:	47c0      	blx	r8
 800c00e:	3001      	adds	r0, #1
 800c010:	d0e6      	beq.n	800bfe0 <_printf_common+0xa4>
 800c012:	3601      	adds	r6, #1
 800c014:	e7d9      	b.n	800bfca <_printf_common+0x8e>
	...

0800c018 <_printf_i>:
 800c018:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c01c:	7e0f      	ldrb	r7, [r1, #24]
 800c01e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c020:	2f78      	cmp	r7, #120	; 0x78
 800c022:	4691      	mov	r9, r2
 800c024:	4680      	mov	r8, r0
 800c026:	460c      	mov	r4, r1
 800c028:	469a      	mov	sl, r3
 800c02a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c02e:	d807      	bhi.n	800c040 <_printf_i+0x28>
 800c030:	2f62      	cmp	r7, #98	; 0x62
 800c032:	d80a      	bhi.n	800c04a <_printf_i+0x32>
 800c034:	2f00      	cmp	r7, #0
 800c036:	f000 80d4 	beq.w	800c1e2 <_printf_i+0x1ca>
 800c03a:	2f58      	cmp	r7, #88	; 0x58
 800c03c:	f000 80c0 	beq.w	800c1c0 <_printf_i+0x1a8>
 800c040:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c044:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c048:	e03a      	b.n	800c0c0 <_printf_i+0xa8>
 800c04a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c04e:	2b15      	cmp	r3, #21
 800c050:	d8f6      	bhi.n	800c040 <_printf_i+0x28>
 800c052:	a101      	add	r1, pc, #4	; (adr r1, 800c058 <_printf_i+0x40>)
 800c054:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c058:	0800c0b1 	.word	0x0800c0b1
 800c05c:	0800c0c5 	.word	0x0800c0c5
 800c060:	0800c041 	.word	0x0800c041
 800c064:	0800c041 	.word	0x0800c041
 800c068:	0800c041 	.word	0x0800c041
 800c06c:	0800c041 	.word	0x0800c041
 800c070:	0800c0c5 	.word	0x0800c0c5
 800c074:	0800c041 	.word	0x0800c041
 800c078:	0800c041 	.word	0x0800c041
 800c07c:	0800c041 	.word	0x0800c041
 800c080:	0800c041 	.word	0x0800c041
 800c084:	0800c1c9 	.word	0x0800c1c9
 800c088:	0800c0f1 	.word	0x0800c0f1
 800c08c:	0800c183 	.word	0x0800c183
 800c090:	0800c041 	.word	0x0800c041
 800c094:	0800c041 	.word	0x0800c041
 800c098:	0800c1eb 	.word	0x0800c1eb
 800c09c:	0800c041 	.word	0x0800c041
 800c0a0:	0800c0f1 	.word	0x0800c0f1
 800c0a4:	0800c041 	.word	0x0800c041
 800c0a8:	0800c041 	.word	0x0800c041
 800c0ac:	0800c18b 	.word	0x0800c18b
 800c0b0:	682b      	ldr	r3, [r5, #0]
 800c0b2:	1d1a      	adds	r2, r3, #4
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	602a      	str	r2, [r5, #0]
 800c0b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c0bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	e09f      	b.n	800c204 <_printf_i+0x1ec>
 800c0c4:	6820      	ldr	r0, [r4, #0]
 800c0c6:	682b      	ldr	r3, [r5, #0]
 800c0c8:	0607      	lsls	r7, r0, #24
 800c0ca:	f103 0104 	add.w	r1, r3, #4
 800c0ce:	6029      	str	r1, [r5, #0]
 800c0d0:	d501      	bpl.n	800c0d6 <_printf_i+0xbe>
 800c0d2:	681e      	ldr	r6, [r3, #0]
 800c0d4:	e003      	b.n	800c0de <_printf_i+0xc6>
 800c0d6:	0646      	lsls	r6, r0, #25
 800c0d8:	d5fb      	bpl.n	800c0d2 <_printf_i+0xba>
 800c0da:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c0de:	2e00      	cmp	r6, #0
 800c0e0:	da03      	bge.n	800c0ea <_printf_i+0xd2>
 800c0e2:	232d      	movs	r3, #45	; 0x2d
 800c0e4:	4276      	negs	r6, r6
 800c0e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c0ea:	485a      	ldr	r0, [pc, #360]	; (800c254 <_printf_i+0x23c>)
 800c0ec:	230a      	movs	r3, #10
 800c0ee:	e012      	b.n	800c116 <_printf_i+0xfe>
 800c0f0:	682b      	ldr	r3, [r5, #0]
 800c0f2:	6820      	ldr	r0, [r4, #0]
 800c0f4:	1d19      	adds	r1, r3, #4
 800c0f6:	6029      	str	r1, [r5, #0]
 800c0f8:	0605      	lsls	r5, r0, #24
 800c0fa:	d501      	bpl.n	800c100 <_printf_i+0xe8>
 800c0fc:	681e      	ldr	r6, [r3, #0]
 800c0fe:	e002      	b.n	800c106 <_printf_i+0xee>
 800c100:	0641      	lsls	r1, r0, #25
 800c102:	d5fb      	bpl.n	800c0fc <_printf_i+0xe4>
 800c104:	881e      	ldrh	r6, [r3, #0]
 800c106:	4853      	ldr	r0, [pc, #332]	; (800c254 <_printf_i+0x23c>)
 800c108:	2f6f      	cmp	r7, #111	; 0x6f
 800c10a:	bf0c      	ite	eq
 800c10c:	2308      	moveq	r3, #8
 800c10e:	230a      	movne	r3, #10
 800c110:	2100      	movs	r1, #0
 800c112:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c116:	6865      	ldr	r5, [r4, #4]
 800c118:	60a5      	str	r5, [r4, #8]
 800c11a:	2d00      	cmp	r5, #0
 800c11c:	bfa2      	ittt	ge
 800c11e:	6821      	ldrge	r1, [r4, #0]
 800c120:	f021 0104 	bicge.w	r1, r1, #4
 800c124:	6021      	strge	r1, [r4, #0]
 800c126:	b90e      	cbnz	r6, 800c12c <_printf_i+0x114>
 800c128:	2d00      	cmp	r5, #0
 800c12a:	d04b      	beq.n	800c1c4 <_printf_i+0x1ac>
 800c12c:	4615      	mov	r5, r2
 800c12e:	fbb6 f1f3 	udiv	r1, r6, r3
 800c132:	fb03 6711 	mls	r7, r3, r1, r6
 800c136:	5dc7      	ldrb	r7, [r0, r7]
 800c138:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c13c:	4637      	mov	r7, r6
 800c13e:	42bb      	cmp	r3, r7
 800c140:	460e      	mov	r6, r1
 800c142:	d9f4      	bls.n	800c12e <_printf_i+0x116>
 800c144:	2b08      	cmp	r3, #8
 800c146:	d10b      	bne.n	800c160 <_printf_i+0x148>
 800c148:	6823      	ldr	r3, [r4, #0]
 800c14a:	07de      	lsls	r6, r3, #31
 800c14c:	d508      	bpl.n	800c160 <_printf_i+0x148>
 800c14e:	6923      	ldr	r3, [r4, #16]
 800c150:	6861      	ldr	r1, [r4, #4]
 800c152:	4299      	cmp	r1, r3
 800c154:	bfde      	ittt	le
 800c156:	2330      	movle	r3, #48	; 0x30
 800c158:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c15c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c160:	1b52      	subs	r2, r2, r5
 800c162:	6122      	str	r2, [r4, #16]
 800c164:	f8cd a000 	str.w	sl, [sp]
 800c168:	464b      	mov	r3, r9
 800c16a:	aa03      	add	r2, sp, #12
 800c16c:	4621      	mov	r1, r4
 800c16e:	4640      	mov	r0, r8
 800c170:	f7ff fee4 	bl	800bf3c <_printf_common>
 800c174:	3001      	adds	r0, #1
 800c176:	d14a      	bne.n	800c20e <_printf_i+0x1f6>
 800c178:	f04f 30ff 	mov.w	r0, #4294967295
 800c17c:	b004      	add	sp, #16
 800c17e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c182:	6823      	ldr	r3, [r4, #0]
 800c184:	f043 0320 	orr.w	r3, r3, #32
 800c188:	6023      	str	r3, [r4, #0]
 800c18a:	4833      	ldr	r0, [pc, #204]	; (800c258 <_printf_i+0x240>)
 800c18c:	2778      	movs	r7, #120	; 0x78
 800c18e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c192:	6823      	ldr	r3, [r4, #0]
 800c194:	6829      	ldr	r1, [r5, #0]
 800c196:	061f      	lsls	r7, r3, #24
 800c198:	f851 6b04 	ldr.w	r6, [r1], #4
 800c19c:	d402      	bmi.n	800c1a4 <_printf_i+0x18c>
 800c19e:	065f      	lsls	r7, r3, #25
 800c1a0:	bf48      	it	mi
 800c1a2:	b2b6      	uxthmi	r6, r6
 800c1a4:	07df      	lsls	r7, r3, #31
 800c1a6:	bf48      	it	mi
 800c1a8:	f043 0320 	orrmi.w	r3, r3, #32
 800c1ac:	6029      	str	r1, [r5, #0]
 800c1ae:	bf48      	it	mi
 800c1b0:	6023      	strmi	r3, [r4, #0]
 800c1b2:	b91e      	cbnz	r6, 800c1bc <_printf_i+0x1a4>
 800c1b4:	6823      	ldr	r3, [r4, #0]
 800c1b6:	f023 0320 	bic.w	r3, r3, #32
 800c1ba:	6023      	str	r3, [r4, #0]
 800c1bc:	2310      	movs	r3, #16
 800c1be:	e7a7      	b.n	800c110 <_printf_i+0xf8>
 800c1c0:	4824      	ldr	r0, [pc, #144]	; (800c254 <_printf_i+0x23c>)
 800c1c2:	e7e4      	b.n	800c18e <_printf_i+0x176>
 800c1c4:	4615      	mov	r5, r2
 800c1c6:	e7bd      	b.n	800c144 <_printf_i+0x12c>
 800c1c8:	682b      	ldr	r3, [r5, #0]
 800c1ca:	6826      	ldr	r6, [r4, #0]
 800c1cc:	6961      	ldr	r1, [r4, #20]
 800c1ce:	1d18      	adds	r0, r3, #4
 800c1d0:	6028      	str	r0, [r5, #0]
 800c1d2:	0635      	lsls	r5, r6, #24
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	d501      	bpl.n	800c1dc <_printf_i+0x1c4>
 800c1d8:	6019      	str	r1, [r3, #0]
 800c1da:	e002      	b.n	800c1e2 <_printf_i+0x1ca>
 800c1dc:	0670      	lsls	r0, r6, #25
 800c1de:	d5fb      	bpl.n	800c1d8 <_printf_i+0x1c0>
 800c1e0:	8019      	strh	r1, [r3, #0]
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	6123      	str	r3, [r4, #16]
 800c1e6:	4615      	mov	r5, r2
 800c1e8:	e7bc      	b.n	800c164 <_printf_i+0x14c>
 800c1ea:	682b      	ldr	r3, [r5, #0]
 800c1ec:	1d1a      	adds	r2, r3, #4
 800c1ee:	602a      	str	r2, [r5, #0]
 800c1f0:	681d      	ldr	r5, [r3, #0]
 800c1f2:	6862      	ldr	r2, [r4, #4]
 800c1f4:	2100      	movs	r1, #0
 800c1f6:	4628      	mov	r0, r5
 800c1f8:	f7f3 ffea 	bl	80001d0 <memchr>
 800c1fc:	b108      	cbz	r0, 800c202 <_printf_i+0x1ea>
 800c1fe:	1b40      	subs	r0, r0, r5
 800c200:	6060      	str	r0, [r4, #4]
 800c202:	6863      	ldr	r3, [r4, #4]
 800c204:	6123      	str	r3, [r4, #16]
 800c206:	2300      	movs	r3, #0
 800c208:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c20c:	e7aa      	b.n	800c164 <_printf_i+0x14c>
 800c20e:	6923      	ldr	r3, [r4, #16]
 800c210:	462a      	mov	r2, r5
 800c212:	4649      	mov	r1, r9
 800c214:	4640      	mov	r0, r8
 800c216:	47d0      	blx	sl
 800c218:	3001      	adds	r0, #1
 800c21a:	d0ad      	beq.n	800c178 <_printf_i+0x160>
 800c21c:	6823      	ldr	r3, [r4, #0]
 800c21e:	079b      	lsls	r3, r3, #30
 800c220:	d413      	bmi.n	800c24a <_printf_i+0x232>
 800c222:	68e0      	ldr	r0, [r4, #12]
 800c224:	9b03      	ldr	r3, [sp, #12]
 800c226:	4298      	cmp	r0, r3
 800c228:	bfb8      	it	lt
 800c22a:	4618      	movlt	r0, r3
 800c22c:	e7a6      	b.n	800c17c <_printf_i+0x164>
 800c22e:	2301      	movs	r3, #1
 800c230:	4632      	mov	r2, r6
 800c232:	4649      	mov	r1, r9
 800c234:	4640      	mov	r0, r8
 800c236:	47d0      	blx	sl
 800c238:	3001      	adds	r0, #1
 800c23a:	d09d      	beq.n	800c178 <_printf_i+0x160>
 800c23c:	3501      	adds	r5, #1
 800c23e:	68e3      	ldr	r3, [r4, #12]
 800c240:	9903      	ldr	r1, [sp, #12]
 800c242:	1a5b      	subs	r3, r3, r1
 800c244:	42ab      	cmp	r3, r5
 800c246:	dcf2      	bgt.n	800c22e <_printf_i+0x216>
 800c248:	e7eb      	b.n	800c222 <_printf_i+0x20a>
 800c24a:	2500      	movs	r5, #0
 800c24c:	f104 0619 	add.w	r6, r4, #25
 800c250:	e7f5      	b.n	800c23e <_printf_i+0x226>
 800c252:	bf00      	nop
 800c254:	0800c445 	.word	0x0800c445
 800c258:	0800c456 	.word	0x0800c456

0800c25c <memmove>:
 800c25c:	4288      	cmp	r0, r1
 800c25e:	b510      	push	{r4, lr}
 800c260:	eb01 0402 	add.w	r4, r1, r2
 800c264:	d902      	bls.n	800c26c <memmove+0x10>
 800c266:	4284      	cmp	r4, r0
 800c268:	4623      	mov	r3, r4
 800c26a:	d807      	bhi.n	800c27c <memmove+0x20>
 800c26c:	1e43      	subs	r3, r0, #1
 800c26e:	42a1      	cmp	r1, r4
 800c270:	d008      	beq.n	800c284 <memmove+0x28>
 800c272:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c276:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c27a:	e7f8      	b.n	800c26e <memmove+0x12>
 800c27c:	4402      	add	r2, r0
 800c27e:	4601      	mov	r1, r0
 800c280:	428a      	cmp	r2, r1
 800c282:	d100      	bne.n	800c286 <memmove+0x2a>
 800c284:	bd10      	pop	{r4, pc}
 800c286:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c28a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c28e:	e7f7      	b.n	800c280 <memmove+0x24>

0800c290 <_sbrk_r>:
 800c290:	b538      	push	{r3, r4, r5, lr}
 800c292:	4d06      	ldr	r5, [pc, #24]	; (800c2ac <_sbrk_r+0x1c>)
 800c294:	2300      	movs	r3, #0
 800c296:	4604      	mov	r4, r0
 800c298:	4608      	mov	r0, r1
 800c29a:	602b      	str	r3, [r5, #0]
 800c29c:	f7f6 ff18 	bl	80030d0 <_sbrk>
 800c2a0:	1c43      	adds	r3, r0, #1
 800c2a2:	d102      	bne.n	800c2aa <_sbrk_r+0x1a>
 800c2a4:	682b      	ldr	r3, [r5, #0]
 800c2a6:	b103      	cbz	r3, 800c2aa <_sbrk_r+0x1a>
 800c2a8:	6023      	str	r3, [r4, #0]
 800c2aa:	bd38      	pop	{r3, r4, r5, pc}
 800c2ac:	200008d4 	.word	0x200008d4

0800c2b0 <memcpy>:
 800c2b0:	440a      	add	r2, r1
 800c2b2:	4291      	cmp	r1, r2
 800c2b4:	f100 33ff 	add.w	r3, r0, #4294967295
 800c2b8:	d100      	bne.n	800c2bc <memcpy+0xc>
 800c2ba:	4770      	bx	lr
 800c2bc:	b510      	push	{r4, lr}
 800c2be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c2c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c2c6:	4291      	cmp	r1, r2
 800c2c8:	d1f9      	bne.n	800c2be <memcpy+0xe>
 800c2ca:	bd10      	pop	{r4, pc}

0800c2cc <_realloc_r>:
 800c2cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2d0:	4680      	mov	r8, r0
 800c2d2:	4614      	mov	r4, r2
 800c2d4:	460e      	mov	r6, r1
 800c2d6:	b921      	cbnz	r1, 800c2e2 <_realloc_r+0x16>
 800c2d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c2dc:	4611      	mov	r1, r2
 800c2de:	f7ff bc49 	b.w	800bb74 <_malloc_r>
 800c2e2:	b92a      	cbnz	r2, 800c2f0 <_realloc_r+0x24>
 800c2e4:	f7ff fbda 	bl	800ba9c <_free_r>
 800c2e8:	4625      	mov	r5, r4
 800c2ea:	4628      	mov	r0, r5
 800c2ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2f0:	f000 f81b 	bl	800c32a <_malloc_usable_size_r>
 800c2f4:	4284      	cmp	r4, r0
 800c2f6:	4607      	mov	r7, r0
 800c2f8:	d802      	bhi.n	800c300 <_realloc_r+0x34>
 800c2fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c2fe:	d812      	bhi.n	800c326 <_realloc_r+0x5a>
 800c300:	4621      	mov	r1, r4
 800c302:	4640      	mov	r0, r8
 800c304:	f7ff fc36 	bl	800bb74 <_malloc_r>
 800c308:	4605      	mov	r5, r0
 800c30a:	2800      	cmp	r0, #0
 800c30c:	d0ed      	beq.n	800c2ea <_realloc_r+0x1e>
 800c30e:	42bc      	cmp	r4, r7
 800c310:	4622      	mov	r2, r4
 800c312:	4631      	mov	r1, r6
 800c314:	bf28      	it	cs
 800c316:	463a      	movcs	r2, r7
 800c318:	f7ff ffca 	bl	800c2b0 <memcpy>
 800c31c:	4631      	mov	r1, r6
 800c31e:	4640      	mov	r0, r8
 800c320:	f7ff fbbc 	bl	800ba9c <_free_r>
 800c324:	e7e1      	b.n	800c2ea <_realloc_r+0x1e>
 800c326:	4635      	mov	r5, r6
 800c328:	e7df      	b.n	800c2ea <_realloc_r+0x1e>

0800c32a <_malloc_usable_size_r>:
 800c32a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c32e:	1f18      	subs	r0, r3, #4
 800c330:	2b00      	cmp	r3, #0
 800c332:	bfbc      	itt	lt
 800c334:	580b      	ldrlt	r3, [r1, r0]
 800c336:	18c0      	addlt	r0, r0, r3
 800c338:	4770      	bx	lr
	...

0800c33c <_init>:
 800c33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c33e:	bf00      	nop
 800c340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c342:	bc08      	pop	{r3}
 800c344:	469e      	mov	lr, r3
 800c346:	4770      	bx	lr

0800c348 <_fini>:
 800c348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c34a:	bf00      	nop
 800c34c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c34e:	bc08      	pop	{r3}
 800c350:	469e      	mov	lr, r3
 800c352:	4770      	bx	lr
