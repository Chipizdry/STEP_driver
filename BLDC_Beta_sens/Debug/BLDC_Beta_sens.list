
BLDC_Beta_sens.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f418  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000048c  0800f5a8  0800f5a8  0001f5a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fa34  0800fa34  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800fa34  0800fa34  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800fa34  0800fa34  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fa34  0800fa34  0001fa34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fa38  0800fa38  0001fa38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800fa3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00000878  200001e0  200001e0  000201e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000a58  20000a58  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .comment      00000086  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 14 .debug_info   000198dc  00000000  00000000  00020296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000032d5  00000000  00000000  00039b72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001630  00000000  00000000  0003ce48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000116e  00000000  00000000  0003e478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000217a8  00000000  00000000  0003f5e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001d3a4  00000000  00000000  00060d8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ca31c  00000000  00000000  0007e132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006f68  00000000  00000000  00148450  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000046  00000000  00000000  0014f3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f590 	.word	0x0800f590

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800f590 	.word	0x0800f590

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <PWM_correction>:

	 		  return current[0];
	  }


void PWM_correction(void){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0

for(uint8_t i=0;i<4;i++){
 8000bae:	2300      	movs	r3, #0
 8000bb0:	71fb      	strb	r3, [r7, #7]
 8000bb2:	e05a      	b.n	8000c6a <PWM_correction+0xc2>


	pwm[i]=pwm_cmd;
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	4a31      	ldr	r2, [pc, #196]	; (8000c7c <PWM_correction+0xd4>)
 8000bb8:	8812      	ldrh	r2, [r2, #0]
 8000bba:	b291      	uxth	r1, r2
 8000bbc:	4a30      	ldr	r2, [pc, #192]	; (8000c80 <PWM_correction+0xd8>)
 8000bbe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	if((current[i]>=limit)&&(pwm[i]>=10)){
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	4a2f      	ldr	r2, [pc, #188]	; (8000c84 <PWM_correction+0xdc>)
 8000bc6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000bca:	4b2f      	ldr	r3, [pc, #188]	; (8000c88 <PWM_correction+0xe0>)
 8000bcc:	881b      	ldrh	r3, [r3, #0]
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d30f      	bcc.n	8000bf2 <PWM_correction+0x4a>
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	4a2a      	ldr	r2, [pc, #168]	; (8000c80 <PWM_correction+0xd8>)
 8000bd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bda:	2b09      	cmp	r3, #9
 8000bdc:	d909      	bls.n	8000bf2 <PWM_correction+0x4a>
	pwm[i]=pwm[i]-10;
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	4a27      	ldr	r2, [pc, #156]	; (8000c80 <PWM_correction+0xd8>)
 8000be2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	3a0a      	subs	r2, #10
 8000bea:	b291      	uxth	r1, r2
 8000bec:	4a24      	ldr	r2, [pc, #144]	; (8000c80 <PWM_correction+0xd8>)
 8000bee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   // LED_2_ON;
	}


	if(current[i]>=3800){
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	4a23      	ldr	r2, [pc, #140]	; (8000c84 <PWM_correction+0xdc>)
 8000bf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bfa:	f640 62d7 	movw	r2, #3799	; 0xed7
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d92b      	bls.n	8000c5a <PWM_correction+0xb2>

		            HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000c02:	2100      	movs	r1, #0
 8000c04:	4821      	ldr	r0, [pc, #132]	; (8000c8c <PWM_correction+0xe4>)
 8000c06:	f008 fe01 	bl	800980c <HAL_TIM_PWM_Stop>
		            HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000c0a:	2104      	movs	r1, #4
 8000c0c:	481f      	ldr	r0, [pc, #124]	; (8000c8c <PWM_correction+0xe4>)
 8000c0e:	f008 fdfd 	bl	800980c <HAL_TIM_PWM_Stop>
		            HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8000c12:	2100      	movs	r1, #0
 8000c14:	481e      	ldr	r0, [pc, #120]	; (8000c90 <PWM_correction+0xe8>)
 8000c16:	f008 fdf9 	bl	800980c <HAL_TIM_PWM_Stop>
		            HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	481d      	ldr	r0, [pc, #116]	; (8000c94 <PWM_correction+0xec>)
 8000c1e:	f008 fdf5 	bl	800980c <HAL_TIM_PWM_Stop>

		            HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8000c22:	2100      	movs	r1, #0
 8000c24:	4819      	ldr	r0, [pc, #100]	; (8000c8c <PWM_correction+0xe4>)
 8000c26:	f00a fa1f 	bl	800b068 <HAL_TIMEx_PWMN_Stop>
		            HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8000c2a:	2104      	movs	r1, #4
 8000c2c:	4817      	ldr	r0, [pc, #92]	; (8000c8c <PWM_correction+0xe4>)
 8000c2e:	f00a fa1b 	bl	800b068 <HAL_TIMEx_PWMN_Stop>
		            HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_1);
 8000c32:	2100      	movs	r1, #0
 8000c34:	4816      	ldr	r0, [pc, #88]	; (8000c90 <PWM_correction+0xe8>)
 8000c36:	f00a fa17 	bl	800b068 <HAL_TIMEx_PWMN_Stop>
		            HAL_TIMEx_PWMN_Stop(&htim15, TIM_CHANNEL_1);
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4815      	ldr	r0, [pc, #84]	; (8000c94 <PWM_correction+0xec>)
 8000c3e:	f00a fa13 	bl	800b068 <HAL_TIMEx_PWMN_Stop>

		            pwm[0]=10;
 8000c42:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <PWM_correction+0xd8>)
 8000c44:	220a      	movs	r2, #10
 8000c46:	801a      	strh	r2, [r3, #0]
		            pwm[1]=10;
 8000c48:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <PWM_correction+0xd8>)
 8000c4a:	220a      	movs	r2, #10
 8000c4c:	805a      	strh	r2, [r3, #2]
		            pwm[2]=10;
 8000c4e:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <PWM_correction+0xd8>)
 8000c50:	220a      	movs	r2, #10
 8000c52:	809a      	strh	r2, [r3, #4]
		            pwm[3]=10;
 8000c54:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <PWM_correction+0xd8>)
 8000c56:	220a      	movs	r2, #10
 8000c58:	80da      	strh	r2, [r3, #6]

		           // LED_2_ON;
	}

	if((pwm[i]>=10)&&(current[i]<=10)){//LED_2_OFF;
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	4a08      	ldr	r2, [pc, #32]	; (8000c80 <PWM_correction+0xd8>)
 8000c5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c62:	2b09      	cmp	r3, #9
for(uint8_t i=0;i<4;i++){
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	3301      	adds	r3, #1
 8000c68:	71fb      	strb	r3, [r7, #7]
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	2b03      	cmp	r3, #3
 8000c6e:	d9a1      	bls.n	8000bb4 <PWM_correction+0xc>
	}

}

}
 8000c70:	bf00      	nop
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	2000072e 	.word	0x2000072e
 8000c80:	20000000 	.word	0x20000000
 8000c84:	20000704 	.word	0x20000704
 8000c88:	20000008 	.word	0x20000008
 8000c8c:	200003a4 	.word	0x200003a4
 8000c90:	200004d4 	.word	0x200004d4
 8000c94:	20000520 	.word	0x20000520

08000c98 <lcd_write_nibble>:
    }
}

////////////////////////////////////////////////////////////////////////////////////////////

void lcd_write_nibble(uint8_t nibble, uint8_t rs) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af02      	add	r7, sp, #8
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	460a      	mov	r2, r1
 8000ca2:	71fb      	strb	r3, [r7, #7]
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	71bb      	strb	r3, [r7, #6]
  uint8_t data = nibble << D4_BIT;
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	011b      	lsls	r3, r3, #4
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	73fb      	strb	r3, [r7, #15]
  data |= rs << RS_BIT;
 8000cb0:	7bfa      	ldrb	r2, [r7, #15]
 8000cb2:	79bb      	ldrb	r3, [r7, #6]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	73fb      	strb	r3, [r7, #15]
  data |= backlight_state << BL_BIT; // Include backlight state in data
 8000cba:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <lcd_write_nibble+0x7c>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	00db      	lsls	r3, r3, #3
 8000cc0:	b25a      	sxtb	r2, r3
 8000cc2:	7bfb      	ldrb	r3, [r7, #15]
 8000cc4:	b25b      	sxtb	r3, r3
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	b25b      	sxtb	r3, r3
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	73fb      	strb	r3, [r7, #15]
  data |= 1 << EN_BIT;
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
 8000cd0:	f043 0304 	orr.w	r3, r3, #4
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000cd8:	f107 020f 	add.w	r2, r7, #15
 8000cdc:	2364      	movs	r3, #100	; 0x64
 8000cde:	9300      	str	r3, [sp, #0]
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	214e      	movs	r1, #78	; 0x4e
 8000ce4:	480c      	ldr	r0, [pc, #48]	; (8000d18 <lcd_write_nibble+0x80>)
 8000ce6:	f005 ff29 	bl	8006b3c <HAL_I2C_Master_Transmit>
  HAL_Delay(1);
 8000cea:	2001      	movs	r0, #1
 8000cec:	f003 fa5a 	bl	80041a4 <HAL_Delay>
  data &= ~(1 << EN_BIT);
 8000cf0:	7bfb      	ldrb	r3, [r7, #15]
 8000cf2:	f023 0304 	bic.w	r3, r3, #4
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000cfa:	f107 020f 	add.w	r2, r7, #15
 8000cfe:	2364      	movs	r3, #100	; 0x64
 8000d00:	9300      	str	r3, [sp, #0]
 8000d02:	2301      	movs	r3, #1
 8000d04:	214e      	movs	r1, #78	; 0x4e
 8000d06:	4804      	ldr	r0, [pc, #16]	; (8000d18 <lcd_write_nibble+0x80>)
 8000d08:	f005 ff18 	bl	8006b3c <HAL_I2C_Master_Transmit>
}
 8000d0c:	bf00      	nop
 8000d0e:	3710      	adds	r7, #16
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	2000000a 	.word	0x2000000a
 8000d18:	20000330 	.word	0x20000330

08000d1c <lcd_send_cmd>:

////////////////////////////////////////////////////////////////////////////////////////////

void lcd_send_cmd(uint8_t cmd) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = cmd >> 4;
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	091b      	lsrs	r3, r3, #4
 8000d2a:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = cmd & 0x0F;
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	f003 030f 	and.w	r3, r3, #15
 8000d32:	73bb      	strb	r3, [r7, #14]
  lcd_write_nibble(upper_nibble, 0);
 8000d34:	7bfb      	ldrb	r3, [r7, #15]
 8000d36:	2100      	movs	r1, #0
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff ffad 	bl	8000c98 <lcd_write_nibble>
  lcd_write_nibble(lower_nibble, 0);
 8000d3e:	7bbb      	ldrb	r3, [r7, #14]
 8000d40:	2100      	movs	r1, #0
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff ffa8 	bl	8000c98 <lcd_write_nibble>
  if (cmd == 0x01 || cmd == 0x02) {
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d002      	beq.n	8000d54 <lcd_send_cmd+0x38>
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	2b02      	cmp	r3, #2
 8000d52:	d102      	bne.n	8000d5a <lcd_send_cmd+0x3e>
    HAL_Delay(2);
 8000d54:	2002      	movs	r0, #2
 8000d56:	f003 fa25 	bl	80041a4 <HAL_Delay>
  }
}
 8000d5a:	bf00      	nop
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <lcd_send_data>:

//////////////////////////////////////////////////////////////////////////////////////////////

void lcd_send_data(uint8_t data) {
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b084      	sub	sp, #16
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	4603      	mov	r3, r0
 8000d6a:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = data >> 4;
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	091b      	lsrs	r3, r3, #4
 8000d70:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = data & 0x0F;
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	f003 030f 	and.w	r3, r3, #15
 8000d78:	73bb      	strb	r3, [r7, #14]
  lcd_write_nibble(upper_nibble, 1);
 8000d7a:	7bfb      	ldrb	r3, [r7, #15]
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff ff8a 	bl	8000c98 <lcd_write_nibble>
  lcd_write_nibble(lower_nibble, 1);
 8000d84:	7bbb      	ldrb	r3, [r7, #14]
 8000d86:	2101      	movs	r1, #1
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff ff85 	bl	8000c98 <lcd_write_nibble>
}
 8000d8e:	bf00      	nop
 8000d90:	3710      	adds	r7, #16
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <lcd_init>:

//////////////////////////////////////////////////////////////////////////////////////////////

void lcd_init() {
 8000d96:	b580      	push	{r7, lr}
 8000d98:	af00      	add	r7, sp, #0
  HAL_Delay(50);
 8000d9a:	2032      	movs	r0, #50	; 0x32
 8000d9c:	f003 fa02 	bl	80041a4 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 8000da0:	2100      	movs	r1, #0
 8000da2:	2003      	movs	r0, #3
 8000da4:	f7ff ff78 	bl	8000c98 <lcd_write_nibble>
  HAL_Delay(5);
 8000da8:	2005      	movs	r0, #5
 8000daa:	f003 f9fb 	bl	80041a4 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 8000dae:	2100      	movs	r1, #0
 8000db0:	2003      	movs	r0, #3
 8000db2:	f7ff ff71 	bl	8000c98 <lcd_write_nibble>
  HAL_Delay(1);
 8000db6:	2001      	movs	r0, #1
 8000db8:	f003 f9f4 	bl	80041a4 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	2003      	movs	r0, #3
 8000dc0:	f7ff ff6a 	bl	8000c98 <lcd_write_nibble>
  HAL_Delay(1);
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	f003 f9ed 	bl	80041a4 <HAL_Delay>
  lcd_write_nibble(0x02, 0);
 8000dca:	2100      	movs	r1, #0
 8000dcc:	2002      	movs	r0, #2
 8000dce:	f7ff ff63 	bl	8000c98 <lcd_write_nibble>
  lcd_send_cmd(0x28);
 8000dd2:	2028      	movs	r0, #40	; 0x28
 8000dd4:	f7ff ffa2 	bl	8000d1c <lcd_send_cmd>
  lcd_send_cmd(0x0C);
 8000dd8:	200c      	movs	r0, #12
 8000dda:	f7ff ff9f 	bl	8000d1c <lcd_send_cmd>
  lcd_send_cmd(0x06);
 8000dde:	2006      	movs	r0, #6
 8000de0:	f7ff ff9c 	bl	8000d1c <lcd_send_cmd>
  lcd_send_cmd(0x01);
 8000de4:	2001      	movs	r0, #1
 8000de6:	f7ff ff99 	bl	8000d1c <lcd_send_cmd>
  HAL_Delay(2);
 8000dea:	2002      	movs	r0, #2
 8000dec:	f003 f9da 	bl	80041a4 <HAL_Delay>
}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <lcd_write_string>:

//////////////////////////////////////////////////////////////////////////////////////////////

void lcd_write_string(char *str) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  while (*str) {
 8000dfc:	e006      	b.n	8000e0c <lcd_write_string+0x18>
    lcd_send_data(*str++);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	1c5a      	adds	r2, r3, #1
 8000e02:	607a      	str	r2, [r7, #4]
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff ffab 	bl	8000d62 <lcd_send_data>
  while (*str) {
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d1f4      	bne.n	8000dfe <lcd_write_string+0xa>
  }
}
 8000e14:	bf00      	nop
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
	...

08000e20 <lcd_set_cursor>:
//////////////////////////////////////////////////////////////////////////

void lcd_set_cursor(uint8_t row, uint8_t column) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	460a      	mov	r2, r1
 8000e2a:	71fb      	strb	r3, [r7, #7]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	71bb      	strb	r3, [r7, #6]
    uint8_t address;
    switch (row) {
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	3b01      	subs	r3, #1
 8000e34:	2b03      	cmp	r3, #3
 8000e36:	d817      	bhi.n	8000e68 <lcd_set_cursor+0x48>
 8000e38:	a201      	add	r2, pc, #4	; (adr r2, 8000e40 <lcd_set_cursor+0x20>)
 8000e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e3e:	bf00      	nop
 8000e40:	08000e51 	.word	0x08000e51
 8000e44:	08000e57 	.word	0x08000e57
 8000e48:	08000e5d 	.word	0x08000e5d
 8000e4c:	08000e63 	.word	0x08000e63
        case 1:
            address = 0x80;
 8000e50:	2380      	movs	r3, #128	; 0x80
 8000e52:	73fb      	strb	r3, [r7, #15]
            break;
 8000e54:	e00a      	b.n	8000e6c <lcd_set_cursor+0x4c>
        case 2:
            address = 0xC0;
 8000e56:	23c0      	movs	r3, #192	; 0xc0
 8000e58:	73fb      	strb	r3, [r7, #15]
            break;
 8000e5a:	e007      	b.n	8000e6c <lcd_set_cursor+0x4c>

        case 3:
            address = 0x94;
 8000e5c:	2394      	movs	r3, #148	; 0x94
 8000e5e:	73fb      	strb	r3, [r7, #15]
            break;
 8000e60:	e004      	b.n	8000e6c <lcd_set_cursor+0x4c>
        case 4:
            address = 0xD4;
 8000e62:	23d4      	movs	r3, #212	; 0xd4
 8000e64:	73fb      	strb	r3, [r7, #15]
            break;
 8000e66:	e001      	b.n	8000e6c <lcd_set_cursor+0x4c>


        default:
            address = 0x80;
 8000e68:	2380      	movs	r3, #128	; 0x80
 8000e6a:	73fb      	strb	r3, [r7, #15]
    }
    address += column;
 8000e6c:	7bfa      	ldrb	r2, [r7, #15]
 8000e6e:	79bb      	ldrb	r3, [r7, #6]
 8000e70:	4413      	add	r3, r2
 8000e72:	73fb      	strb	r3, [r7, #15]
    lcd_send_cmd(0x80 | address);
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
 8000e76:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff ff4d 	bl	8000d1c <lcd_send_cmd>
}
 8000e82:	bf00      	nop
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop

08000e8c <lcd_clear>:

//////////////////////////////////////////////////////////////////////////////////////////////////

void lcd_clear(void) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8000e90:	2001      	movs	r0, #1
 8000e92:	f7ff ff43 	bl	8000d1c <lcd_send_cmd>
    HAL_Delay(2);
 8000e96:	2002      	movs	r0, #2
 8000e98:	f003 f984 	bl	80041a4 <HAL_Delay>
}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <HAL_UARTEx_RxEventCallback>:



//////////////////////////////////////////////////////////////////////////////////////////////////
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a3d      	ldr	r2, [pc, #244]	; (8000fa8 <HAL_UARTEx_RxEventCallback+0x108>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d174      	bne.n	8000fa0 <HAL_UARTEx_RxEventCallback+0x100>
	{



        //  LED_3_ON;
				 if (rxFrame[0] == SLAVE_ID) {
 8000eb6:	4b3d      	ldr	r3, [pc, #244]	; (8000fac <HAL_UARTEx_RxEventCallback+0x10c>)
 8000eb8:	781a      	ldrb	r2, [r3, #0]
 8000eba:	4b3d      	ldr	r3, [pc, #244]	; (8000fb0 <HAL_UARTEx_RxEventCallback+0x110>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d161      	bne.n	8000f86 <HAL_UARTEx_RxEventCallback+0xe6>


					  			 		uint8_t opCode = rxFrame[1];
 8000ec2:	4b3a      	ldr	r3, [pc, #232]	; (8000fac <HAL_UARTEx_RxEventCallback+0x10c>)
 8000ec4:	785b      	ldrb	r3, [r3, #1]
 8000ec6:	73fb      	strb	r3, [r7, #15]
					  			     switch (opCode) {
 8000ec8:	7bfb      	ldrb	r3, [r7, #15]
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	2b0f      	cmp	r3, #15
 8000ece:	d859      	bhi.n	8000f84 <HAL_UARTEx_RxEventCallback+0xe4>
 8000ed0:	a201      	add	r2, pc, #4	; (adr r2, 8000ed8 <HAL_UARTEx_RxEventCallback+0x38>)
 8000ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed6:	bf00      	nop
 8000ed8:	08000f85 	.word	0x08000f85
 8000edc:	08000f19 	.word	0x08000f19
 8000ee0:	08000f85 	.word	0x08000f85
 8000ee4:	08000f23 	.word	0x08000f23
 8000ee8:	08000f85 	.word	0x08000f85
 8000eec:	08000f2d 	.word	0x08000f2d
 8000ef0:	08000f85 	.word	0x08000f85
 8000ef4:	08000f85 	.word	0x08000f85
 8000ef8:	08000f85 	.word	0x08000f85
 8000efc:	08000f85 	.word	0x08000f85
 8000f00:	08000f85 	.word	0x08000f85
 8000f04:	08000f85 	.word	0x08000f85
 8000f08:	08000f85 	.word	0x08000f85
 8000f0c:	08000f85 	.word	0x08000f85
 8000f10:	08000f85 	.word	0x08000f85
 8000f14:	08000f3f 	.word	0x08000f3f

					  			   case   READ_DISC_INPUTs:


					  				handleReadInputRegs(&huart2,0xFF);
 8000f18:	21ff      	movs	r1, #255	; 0xff
 8000f1a:	4826      	ldr	r0, [pc, #152]	; (8000fb4 <HAL_UARTEx_RxEventCallback+0x114>)
 8000f1c:	f002 fa30 	bl	8003380 <handleReadInputRegs>
								   break;
 8000f20:	e031      	b.n	8000f86 <HAL_UARTEx_RxEventCallback+0xe6>

					  			       case READ_COILs:

					  			    	 break;
					  			       case  READ_INPUT_REGs:
					  			    	 handleReadHoldingRegs(&huart2,data_reg);
 8000f22:	4925      	ldr	r1, [pc, #148]	; (8000fb8 <HAL_UARTEx_RxEventCallback+0x118>)
 8000f24:	4823      	ldr	r0, [pc, #140]	; (8000fb4 <HAL_UARTEx_RxEventCallback+0x114>)
 8000f26:	f002 f9ad 	bl	8003284 <handleReadHoldingRegs>


					  			    	   break;
 8000f2a:	e02c      	b.n	8000f86 <HAL_UARTEx_RxEventCallback+0xe6>
					  			     case WRITE_SINGLE_REG:

					  			   					  			    //	 handleWriteSingleHandlingRegister (&huart2,data_reg);
					  			   					  			    	handleWriteMulyipleHandlingRegister (&huart2,rcv_data_reg);
 8000f2c:	4923      	ldr	r1, [pc, #140]	; (8000fbc <HAL_UARTEx_RxEventCallback+0x11c>)
 8000f2e:	4821      	ldr	r0, [pc, #132]	; (8000fb4 <HAL_UARTEx_RxEventCallback+0x114>)
 8000f30:	f002 fa9e 	bl	8003470 <handleWriteMulyipleHandlingRegister>
					  			                                              pwm_cmd=rcv_data_reg[1];
 8000f34:	4b21      	ldr	r3, [pc, #132]	; (8000fbc <HAL_UARTEx_RxEventCallback+0x11c>)
 8000f36:	885a      	ldrh	r2, [r3, #2]
 8000f38:	4b21      	ldr	r3, [pc, #132]	; (8000fc0 <HAL_UARTEx_RxEventCallback+0x120>)
 8000f3a:	801a      	strh	r2, [r3, #0]

					  			                                               break;
 8000f3c:	e023      	b.n	8000f86 <HAL_UARTEx_RxEventCallback+0xe6>

					  			       case WRITE_HOLDING_REGs:


					  			    	handleWriteMulyipleHandlingRegister (&huart2,rcv_data_reg);
 8000f3e:	491f      	ldr	r1, [pc, #124]	; (8000fbc <HAL_UARTEx_RxEventCallback+0x11c>)
 8000f40:	481c      	ldr	r0, [pc, #112]	; (8000fb4 <HAL_UARTEx_RxEventCallback+0x114>)
 8000f42:	f002 fa95 	bl	8003470 <handleWriteMulyipleHandlingRegister>
					  			    	 pwm_cmd=rcv_data_reg[1];
 8000f46:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <HAL_UARTEx_RxEventCallback+0x11c>)
 8000f48:	885a      	ldrh	r2, [r3, #2]
 8000f4a:	4b1d      	ldr	r3, [pc, #116]	; (8000fc0 <HAL_UARTEx_RxEventCallback+0x120>)
 8000f4c:	801a      	strh	r2, [r3, #0]
					  			    	 limit=rcv_data_reg[2];
 8000f4e:	4b1b      	ldr	r3, [pc, #108]	; (8000fbc <HAL_UARTEx_RxEventCallback+0x11c>)
 8000f50:	889a      	ldrh	r2, [r3, #4]
 8000f52:	4b1c      	ldr	r3, [pc, #112]	; (8000fc4 <HAL_UARTEx_RxEventCallback+0x124>)
 8000f54:	801a      	strh	r2, [r3, #0]

					  		sTime.Hours=(rcv_data_reg[3]>>8) & 0xff;
 8000f56:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <HAL_UARTEx_RxEventCallback+0x11c>)
 8000f58:	88db      	ldrh	r3, [r3, #6]
 8000f5a:	0a1b      	lsrs	r3, r3, #8
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	4b19      	ldr	r3, [pc, #100]	; (8000fc8 <HAL_UARTEx_RxEventCallback+0x128>)
 8000f62:	701a      	strb	r2, [r3, #0]
					  		sTime.Minutes= rcv_data_reg[3] & 0xff;
 8000f64:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <HAL_UARTEx_RxEventCallback+0x11c>)
 8000f66:	88db      	ldrh	r3, [r3, #6]
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	4b17      	ldr	r3, [pc, #92]	; (8000fc8 <HAL_UARTEx_RxEventCallback+0x128>)
 8000f6c:	705a      	strb	r2, [r3, #1]
					  		sTime.Seconds=rcv_data_reg[4];
 8000f6e:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <HAL_UARTEx_RxEventCallback+0x11c>)
 8000f70:	891b      	ldrh	r3, [r3, #8]
 8000f72:	b2da      	uxtb	r2, r3
 8000f74:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <HAL_UARTEx_RxEventCallback+0x128>)
 8000f76:	709a      	strb	r2, [r3, #2]
					  		HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8000f78:	2201      	movs	r2, #1
 8000f7a:	4913      	ldr	r1, [pc, #76]	; (8000fc8 <HAL_UARTEx_RxEventCallback+0x128>)
 8000f7c:	4813      	ldr	r0, [pc, #76]	; (8000fcc <HAL_UARTEx_RxEventCallback+0x12c>)
 8000f7e:	f007 ff98 	bl	8008eb2 <HAL_RTC_SetTime>



                                            break;
 8000f82:	e000      	b.n	8000f86 <HAL_UARTEx_RxEventCallback+0xe6>


					  			       default:
					  			 				break;
 8000f84:	bf00      	nop
		/* start the DMA again */

			//	 for(uint8_t i=0;i<sizeof(rxFrame);)
			//	 {           rxFrame[i]=0;i++;}

		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) rxFrame,sizeof(rxFrame));
 8000f86:	2218      	movs	r2, #24
 8000f88:	4908      	ldr	r1, [pc, #32]	; (8000fac <HAL_UARTEx_RxEventCallback+0x10c>)
 8000f8a:	480a      	ldr	r0, [pc, #40]	; (8000fb4 <HAL_UARTEx_RxEventCallback+0x114>)
 8000f8c:	f00b fc27 	bl	800c7de <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8000f90:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <HAL_UARTEx_RxEventCallback+0x130>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <HAL_UARTEx_RxEventCallback+0x130>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f022 0204 	bic.w	r2, r2, #4
 8000f9e:	601a      	str	r2, [r3, #0]

	}
}
 8000fa0:	bf00      	nop
 8000fa2:	3710      	adds	r7, #16
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40004400 	.word	0x40004400
 8000fac:	20000768 	.word	0x20000768
 8000fb0:	2000000b 	.word	0x2000000b
 8000fb4:	200005f4 	.word	0x200005f4
 8000fb8:	20000880 	.word	0x20000880
 8000fbc:	200008c0 	.word	0x200008c0
 8000fc0:	2000072e 	.word	0x2000072e
 8000fc4:	20000008 	.word	0x20000008
 8000fc8:	200008e8 	.word	0x200008e8
 8000fcc:	20000384 	.word	0x20000384
 8000fd0:	2000067c 	.word	0x2000067c

08000fd4 <SWITCH>:
///////////////////////////////////////////////////////////////////////////////////////////



uint8_t SWITCH( bool coils[]){
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]

uint8_t connector=0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	73fb      	strb	r3, [r7, #15]

connector|=coils[0]&1;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	b25b      	sxtb	r3, r3
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	b25a      	sxtb	r2, r3
 8000fec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	b25b      	sxtb	r3, r3
 8000ff4:	73fb      	strb	r3, [r7, #15]
connector|=(coils[1]&1)<<1;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	b25b      	sxtb	r3, r3
 8001000:	f003 0302 	and.w	r3, r3, #2
 8001004:	b25a      	sxtb	r2, r3
 8001006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800100a:	4313      	orrs	r3, r2
 800100c:	b25b      	sxtb	r3, r3
 800100e:	73fb      	strb	r3, [r7, #15]
connector|=(coils[2]&1)<<2;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3302      	adds	r3, #2
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	b25b      	sxtb	r3, r3
 800101a:	f003 0304 	and.w	r3, r3, #4
 800101e:	b25a      	sxtb	r2, r3
 8001020:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001024:	4313      	orrs	r3, r2
 8001026:	b25b      	sxtb	r3, r3
 8001028:	73fb      	strb	r3, [r7, #15]
return connector;
 800102a:	7bfb      	ldrb	r3, [r7, #15]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3714      	adds	r7, #20
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <led_indicators>:


uint8_t led_indicators(bool led[]){
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]


	uint8_t led_state=0;
 8001040:	2300      	movs	r3, #0
 8001042:	73fb      	strb	r3, [r7, #15]

	for(uint8_t n=0;n<8;){
 8001044:	2300      	movs	r3, #0
 8001046:	73bb      	strb	r3, [r7, #14]
 8001048:	e011      	b.n	800106e <led_indicators+0x36>
	led_state|=(led[n]&0x1)<<n;
 800104a:	7bbb      	ldrb	r3, [r7, #14]
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	4413      	add	r3, r2
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	f003 0201 	and.w	r2, r3, #1
 8001056:	7bbb      	ldrb	r3, [r7, #14]
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	b25a      	sxtb	r2, r3
 800105e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001062:	4313      	orrs	r3, r2
 8001064:	b25b      	sxtb	r3, r3
 8001066:	73fb      	strb	r3, [r7, #15]
	 n++;
 8001068:	7bbb      	ldrb	r3, [r7, #14]
 800106a:	3301      	adds	r3, #1
 800106c:	73bb      	strb	r3, [r7, #14]
	for(uint8_t n=0;n<8;){
 800106e:	7bbb      	ldrb	r3, [r7, #14]
 8001070:	2b07      	cmp	r3, #7
 8001072:	d9ea      	bls.n	800104a <led_indicators+0x12>
	}
	return led_state;
 8001074:	7bfb      	ldrb	r3, [r7, #15]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3714      	adds	r7, #20
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
	...

08001084 <Phaze_A_ON>:

void Phaze_C_ON(void);
void Phaze_C_OFF(void);
void Phaze_C_ZZ(void);

void Phaze_A_ON(void){HAL_TIMEx_PWMN_Stop(&htim15, TIM_CHANNEL_1); HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1); PORT3_ON;}
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
 8001088:	2100      	movs	r1, #0
 800108a:	4807      	ldr	r0, [pc, #28]	; (80010a8 <Phaze_A_ON+0x24>)
 800108c:	f009 ffec 	bl	800b068 <HAL_TIMEx_PWMN_Stop>
 8001090:	2100      	movs	r1, #0
 8001092:	4805      	ldr	r0, [pc, #20]	; (80010a8 <Phaze_A_ON+0x24>)
 8001094:	f008 faba 	bl	800960c <HAL_TIM_PWM_Start>
 8001098:	2201      	movs	r2, #1
 800109a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800109e:	4803      	ldr	r0, [pc, #12]	; (80010ac <Phaze_A_ON+0x28>)
 80010a0:	f005 fc8c 	bl	80069bc <HAL_GPIO_WritePin>
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000520 	.word	0x20000520
 80010ac:	48000400 	.word	0x48000400

080010b0 <Phaze_A_OFF>:
void Phaze_A_OFF(void){HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1); HAL_TIMEx_PWMN_Start(&htim15, TIM_CHANNEL_1);PORT3_ON;}
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	2100      	movs	r1, #0
 80010b6:	4807      	ldr	r0, [pc, #28]	; (80010d4 <Phaze_A_OFF+0x24>)
 80010b8:	f008 fba8 	bl	800980c <HAL_TIM_PWM_Stop>
 80010bc:	2100      	movs	r1, #0
 80010be:	4805      	ldr	r0, [pc, #20]	; (80010d4 <Phaze_A_OFF+0x24>)
 80010c0:	f009 ff1e 	bl	800af00 <HAL_TIMEx_PWMN_Start>
 80010c4:	2201      	movs	r2, #1
 80010c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010ca:	4803      	ldr	r0, [pc, #12]	; (80010d8 <Phaze_A_OFF+0x28>)
 80010cc:	f005 fc76 	bl	80069bc <HAL_GPIO_WritePin>
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000520 	.word	0x20000520
 80010d8:	48000400 	.word	0x48000400

080010dc <Phaze_A_ZZ>:
void Phaze_A_ZZ(void){PORT3_OFF;HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);HAL_TIMEx_PWMN_Stop(&htim15, TIM_CHANNEL_1);}
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
 80010e0:	2200      	movs	r2, #0
 80010e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010e6:	4806      	ldr	r0, [pc, #24]	; (8001100 <Phaze_A_ZZ+0x24>)
 80010e8:	f005 fc68 	bl	80069bc <HAL_GPIO_WritePin>
 80010ec:	2100      	movs	r1, #0
 80010ee:	4805      	ldr	r0, [pc, #20]	; (8001104 <Phaze_A_ZZ+0x28>)
 80010f0:	f008 fb8c 	bl	800980c <HAL_TIM_PWM_Stop>
 80010f4:	2100      	movs	r1, #0
 80010f6:	4803      	ldr	r0, [pc, #12]	; (8001104 <Phaze_A_ZZ+0x28>)
 80010f8:	f009 ffb6 	bl	800b068 <HAL_TIMEx_PWMN_Stop>
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	48000400 	.word	0x48000400
 8001104:	20000520 	.word	0x20000520

08001108 <Phaze_B_ON>:

void Phaze_B_ON(void){HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); PORT2_ON;}
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
 800110c:	2104      	movs	r1, #4
 800110e:	4807      	ldr	r0, [pc, #28]	; (800112c <Phaze_B_ON+0x24>)
 8001110:	f009 ffaa 	bl	800b068 <HAL_TIMEx_PWMN_Stop>
 8001114:	2104      	movs	r1, #4
 8001116:	4805      	ldr	r0, [pc, #20]	; (800112c <Phaze_B_ON+0x24>)
 8001118:	f008 fa78 	bl	800960c <HAL_TIM_PWM_Start>
 800111c:	2201      	movs	r2, #1
 800111e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001122:	4803      	ldr	r0, [pc, #12]	; (8001130 <Phaze_B_ON+0x28>)
 8001124:	f005 fc4a 	bl	80069bc <HAL_GPIO_WritePin>
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}
 800112c:	200003a4 	.word	0x200003a4
 8001130:	48000400 	.word	0x48000400

08001134 <Phaze_B_OFF>:
void Phaze_B_OFF(void){HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2); PORT2_ON;}
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
 8001138:	2104      	movs	r1, #4
 800113a:	4807      	ldr	r0, [pc, #28]	; (8001158 <Phaze_B_OFF+0x24>)
 800113c:	f008 fb66 	bl	800980c <HAL_TIM_PWM_Stop>
 8001140:	2104      	movs	r1, #4
 8001142:	4805      	ldr	r0, [pc, #20]	; (8001158 <Phaze_B_OFF+0x24>)
 8001144:	f009 fedc 	bl	800af00 <HAL_TIMEx_PWMN_Start>
 8001148:	2201      	movs	r2, #1
 800114a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800114e:	4803      	ldr	r0, [pc, #12]	; (800115c <Phaze_B_OFF+0x28>)
 8001150:	f005 fc34 	bl	80069bc <HAL_GPIO_WritePin>
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}
 8001158:	200003a4 	.word	0x200003a4
 800115c:	48000400 	.word	0x48000400

08001160 <Phaze_B_ZZ>:
void Phaze_B_ZZ(void){PORT2_OFF;HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);}
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
 8001164:	2200      	movs	r2, #0
 8001166:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800116a:	4806      	ldr	r0, [pc, #24]	; (8001184 <Phaze_B_ZZ+0x24>)
 800116c:	f005 fc26 	bl	80069bc <HAL_GPIO_WritePin>
 8001170:	2104      	movs	r1, #4
 8001172:	4805      	ldr	r0, [pc, #20]	; (8001188 <Phaze_B_ZZ+0x28>)
 8001174:	f008 fb4a 	bl	800980c <HAL_TIM_PWM_Stop>
 8001178:	2104      	movs	r1, #4
 800117a:	4803      	ldr	r0, [pc, #12]	; (8001188 <Phaze_B_ZZ+0x28>)
 800117c:	f009 ff74 	bl	800b068 <HAL_TIMEx_PWMN_Stop>
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}
 8001184:	48000400 	.word	0x48000400
 8001188:	200003a4 	.word	0x200003a4

0800118c <Phaze_C_ON>:

void Phaze_C_ON(void){HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_1);HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);   PORT4_ON;}
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
 8001190:	2100      	movs	r1, #0
 8001192:	4807      	ldr	r0, [pc, #28]	; (80011b0 <Phaze_C_ON+0x24>)
 8001194:	f009 ff68 	bl	800b068 <HAL_TIMEx_PWMN_Stop>
 8001198:	2100      	movs	r1, #0
 800119a:	4805      	ldr	r0, [pc, #20]	; (80011b0 <Phaze_C_ON+0x24>)
 800119c:	f008 fa36 	bl	800960c <HAL_TIM_PWM_Start>
 80011a0:	2201      	movs	r2, #1
 80011a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011a6:	4803      	ldr	r0, [pc, #12]	; (80011b4 <Phaze_C_ON+0x28>)
 80011a8:	f005 fc08 	bl	80069bc <HAL_GPIO_WritePin>
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	200004d4 	.word	0x200004d4
 80011b4:	48000400 	.word	0x48000400

080011b8 <Phaze_C_OFF>:
void Phaze_C_OFF(void){HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);  PORT4_ON;}
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	2100      	movs	r1, #0
 80011be:	4807      	ldr	r0, [pc, #28]	; (80011dc <Phaze_C_OFF+0x24>)
 80011c0:	f008 fb24 	bl	800980c <HAL_TIM_PWM_Stop>
 80011c4:	2100      	movs	r1, #0
 80011c6:	4805      	ldr	r0, [pc, #20]	; (80011dc <Phaze_C_OFF+0x24>)
 80011c8:	f009 fe9a 	bl	800af00 <HAL_TIMEx_PWMN_Start>
 80011cc:	2201      	movs	r2, #1
 80011ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011d2:	4803      	ldr	r0, [pc, #12]	; (80011e0 <Phaze_C_OFF+0x28>)
 80011d4:	f005 fbf2 	bl	80069bc <HAL_GPIO_WritePin>
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	200004d4 	.word	0x200004d4
 80011e0:	48000400 	.word	0x48000400

080011e4 <Phaze_C_ZZ>:
void Phaze_C_ZZ(void){PORT4_OFF;HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_1);}
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	2200      	movs	r2, #0
 80011ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011ee:	4806      	ldr	r0, [pc, #24]	; (8001208 <Phaze_C_ZZ+0x24>)
 80011f0:	f005 fbe4 	bl	80069bc <HAL_GPIO_WritePin>
 80011f4:	2100      	movs	r1, #0
 80011f6:	4805      	ldr	r0, [pc, #20]	; (800120c <Phaze_C_ZZ+0x28>)
 80011f8:	f008 fb08 	bl	800980c <HAL_TIM_PWM_Stop>
 80011fc:	2100      	movs	r1, #0
 80011fe:	4803      	ldr	r0, [pc, #12]	; (800120c <Phaze_C_ZZ+0x28>)
 8001200:	f009 ff32 	bl	800b068 <HAL_TIMEx_PWMN_Stop>
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}
 8001208:	48000400 	.word	0x48000400
 800120c:	200004d4 	.word	0x200004d4

08001210 <BLDC_MotorCommutation>:

void BLDC_MotorCommutation(uint8_t halls  ){
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	71fb      	strb	r3, [r7, #7]

	 switch (halls) {
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	3b01      	subs	r3, #1
 800121e:	2b05      	cmp	r3, #5
 8001220:	d838      	bhi.n	8001294 <BLDC_MotorCommutation+0x84>
 8001222:	a201      	add	r2, pc, #4	; (adr r2, 8001228 <BLDC_MotorCommutation+0x18>)
 8001224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001228:	08001241 	.word	0x08001241
 800122c:	0800124f 	.word	0x0800124f
 8001230:	0800125d 	.word	0x0800125d
 8001234:	0800126b 	.word	0x0800126b
 8001238:	08001279 	.word	0x08001279
 800123c:	08001287 	.word	0x08001287

	case 1:

    Phaze_A_ON();
 8001240:	f7ff ff20 	bl	8001084 <Phaze_A_ON>
	Phaze_B_ZZ();
 8001244:	f7ff ff8c 	bl	8001160 <Phaze_B_ZZ>
	Phaze_C_OFF();
 8001248:	f7ff ffb6 	bl	80011b8 <Phaze_C_OFF>

	break;
 800124c:	e023      	b.n	8001296 <BLDC_MotorCommutation+0x86>
	case 2:

    Phaze_A_OFF();
 800124e:	f7ff ff2f 	bl	80010b0 <Phaze_A_OFF>
	Phaze_B_ON();
 8001252:	f7ff ff59 	bl	8001108 <Phaze_B_ON>
    Phaze_C_ZZ();
 8001256:	f7ff ffc5 	bl	80011e4 <Phaze_C_ZZ>

	break;
 800125a:	e01c      	b.n	8001296 <BLDC_MotorCommutation+0x86>
	case 3:

	Phaze_A_ZZ();
 800125c:	f7ff ff3e 	bl	80010dc <Phaze_A_ZZ>
	Phaze_B_ON();
 8001260:	f7ff ff52 	bl	8001108 <Phaze_B_ON>
	Phaze_C_OFF();
 8001264:	f7ff ffa8 	bl	80011b8 <Phaze_C_OFF>

	break;
 8001268:	e015      	b.n	8001296 <BLDC_MotorCommutation+0x86>
	case 4:

	Phaze_A_ZZ();
 800126a:	f7ff ff37 	bl	80010dc <Phaze_A_ZZ>
	Phaze_B_OFF();
 800126e:	f7ff ff61 	bl	8001134 <Phaze_B_OFF>
	Phaze_C_ON();
 8001272:	f7ff ff8b 	bl	800118c <Phaze_C_ON>


	break;
 8001276:	e00e      	b.n	8001296 <BLDC_MotorCommutation+0x86>
	case 5:

	Phaze_A_ON();
 8001278:	f7ff ff04 	bl	8001084 <Phaze_A_ON>
	Phaze_B_OFF();
 800127c:	f7ff ff5a 	bl	8001134 <Phaze_B_OFF>
	Phaze_C_ZZ();
 8001280:	f7ff ffb0 	bl	80011e4 <Phaze_C_ZZ>

	break;
 8001284:	e007      	b.n	8001296 <BLDC_MotorCommutation+0x86>
	case 6:

	Phaze_A_OFF();
 8001286:	f7ff ff13 	bl	80010b0 <Phaze_A_OFF>
	Phaze_B_ZZ();
 800128a:	f7ff ff69 	bl	8001160 <Phaze_B_ZZ>
	Phaze_C_ON();
 800128e:	f7ff ff7d 	bl	800118c <Phaze_C_ON>

	break;
 8001292:	e000      	b.n	8001296 <BLDC_MotorCommutation+0x86>

	default:
	break;}
 8001294:	bf00      	nop

}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop

080012a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012a0:	b5b0      	push	{r4, r5, r7, lr}
 80012a2:	b08a      	sub	sp, #40	; 0x28
 80012a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012a6:	f002 ff17 	bl	80040d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012aa:	f000 fedf 	bl	800206c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ae:	f001 fd21 	bl	8002cf4 <MX_GPIO_Init>
  MX_DMA_Init();
 80012b2:	f001 fce5 	bl	8002c80 <MX_DMA_Init>
  MX_ADC2_Init();
 80012b6:	f000 ffb5 	bl	8002224 <MX_ADC2_Init>
  MX_TIM1_Init();
 80012ba:	f001 f955 	bl	8002568 <MX_TIM1_Init>
  MX_TIM2_Init();
 80012be:	f001 fa0d 	bl	80026dc <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80012c2:	f001 fc7d 	bl	8002bc0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80012c6:	f001 fcab 	bl	8002c20 <MX_USART2_UART_Init>
  MX_TIM8_Init();
 80012ca:	f001 fb27 	bl	800291c <MX_TIM8_Init>
  MX_I2C1_Init();
 80012ce:	f001 f8b1 	bl	8002434 <MX_I2C1_Init>
  MX_RTC_Init();
 80012d2:	f001 f8ef 	bl	80024b4 <MX_RTC_Init>
  MX_TIM15_Init();
 80012d6:	f001 fbcf 	bl	8002a78 <MX_TIM15_Init>
  MX_ADC1_Init();
 80012da:	f000 ff33 	bl	8002144 <MX_ADC1_Init>
  MX_ADC3_Init();
 80012de:	f001 f839 	bl	8002354 <MX_ADC3_Init>
  MX_TIM3_Init();
 80012e2:	f001 fa7d 	bl	80027e0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80012e6:	f001 facb 	bl	8002880 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  LED_1_ON;
 80012ea:	2201      	movs	r2, #1
 80012ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012f0:	4852      	ldr	r0, [pc, #328]	; (800143c <main+0x19c>)
 80012f2:	f005 fb63 	bl	80069bc <HAL_GPIO_WritePin>
  LED_2_ON;
 80012f6:	2201      	movs	r2, #1
 80012f8:	2101      	movs	r1, #1
 80012fa:	4851      	ldr	r0, [pc, #324]	; (8001440 <main+0x1a0>)
 80012fc:	f005 fb5e 	bl	80069bc <HAL_GPIO_WritePin>
  LED_3_ON;
 8001300:	2201      	movs	r2, #1
 8001302:	2102      	movs	r1, #2
 8001304:	484e      	ldr	r0, [pc, #312]	; (8001440 <main+0x1a0>)
 8001306:	f005 fb59 	bl	80069bc <HAL_GPIO_WritePin>

	TX_2;
 800130a:	2201      	movs	r2, #1
 800130c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001310:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001314:	f005 fb52 	bl	80069bc <HAL_GPIO_WritePin>


 TIM1->CCR1=pwm[0];
 8001318:	4b4a      	ldr	r3, [pc, #296]	; (8001444 <main+0x1a4>)
 800131a:	881a      	ldrh	r2, [r3, #0]
 800131c:	4b4a      	ldr	r3, [pc, #296]	; (8001448 <main+0x1a8>)
 800131e:	635a      	str	r2, [r3, #52]	; 0x34
 TIM1->CCR2=pwm[1];
 8001320:	4b48      	ldr	r3, [pc, #288]	; (8001444 <main+0x1a4>)
 8001322:	885a      	ldrh	r2, [r3, #2]
 8001324:	4b48      	ldr	r3, [pc, #288]	; (8001448 <main+0x1a8>)
 8001326:	639a      	str	r2, [r3, #56]	; 0x38
 TIM8->CCR1=pwm[2];
 8001328:	4b46      	ldr	r3, [pc, #280]	; (8001444 <main+0x1a4>)
 800132a:	889a      	ldrh	r2, [r3, #4]
 800132c:	4b47      	ldr	r3, [pc, #284]	; (800144c <main+0x1ac>)
 800132e:	635a      	str	r2, [r3, #52]	; 0x34
 TIM15->CCR1=pwm[3];
 8001330:	4b44      	ldr	r3, [pc, #272]	; (8001444 <main+0x1a4>)
 8001332:	88da      	ldrh	r2, [r3, #6]
 8001334:	4b46      	ldr	r3, [pc, #280]	; (8001450 <main+0x1b0>)
 8001336:	635a      	str	r2, [r3, #52]	; 0x34



  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001338:	2100      	movs	r1, #0
 800133a:	4846      	ldr	r0, [pc, #280]	; (8001454 <main+0x1b4>)
 800133c:	f008 f966 	bl	800960c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001340:	2104      	movs	r1, #4
 8001342:	4844      	ldr	r0, [pc, #272]	; (8001454 <main+0x1b4>)
 8001344:	f008 f962 	bl	800960c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001348:	2100      	movs	r1, #0
 800134a:	4843      	ldr	r0, [pc, #268]	; (8001458 <main+0x1b8>)
 800134c:	f008 f95e 	bl	800960c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8001350:	2100      	movs	r1, #0
 8001352:	4842      	ldr	r0, [pc, #264]	; (800145c <main+0x1bc>)
 8001354:	f008 f95a 	bl	800960c <HAL_TIM_PWM_Start>
//  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
//  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
//  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
//  HAL_TIMEx_PWMN_Start(&htim15, TIM_CHANNEL_1);

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001358:	2100      	movs	r1, #0
 800135a:	4841      	ldr	r0, [pc, #260]	; (8001460 <main+0x1c0>)
 800135c:	f008 fb4e 	bl	80099fc <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8001360:	2104      	movs	r1, #4
 8001362:	483f      	ldr	r0, [pc, #252]	; (8001460 <main+0x1c0>)
 8001364:	f008 fb4a 	bl	80099fc <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8001368:	483e      	ldr	r0, [pc, #248]	; (8001464 <main+0x1c4>)
 800136a:	f008 f883 	bl	8009474 <HAL_TIM_Base_Start_IT>
       //HAL_TIM_Base_Stop_IT(&htim3);
       //HAL_TIM_Base_Start_IT(&htim4);
       //HAL_TIM_Base_Stop_IT(&htim4);

  PORT1_ON;
 800136e:	2201      	movs	r2, #1
 8001370:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001374:	483c      	ldr	r0, [pc, #240]	; (8001468 <main+0x1c8>)
 8001376:	f005 fb21 	bl	80069bc <HAL_GPIO_WritePin>
  PORT2_ON;
 800137a:	2201      	movs	r2, #1
 800137c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001380:	4839      	ldr	r0, [pc, #228]	; (8001468 <main+0x1c8>)
 8001382:	f005 fb1b 	bl	80069bc <HAL_GPIO_WritePin>
  PORT3_ON;
 8001386:	2201      	movs	r2, #1
 8001388:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800138c:	4836      	ldr	r0, [pc, #216]	; (8001468 <main+0x1c8>)
 800138e:	f005 fb15 	bl	80069bc <HAL_GPIO_WritePin>
  PORT4_ON;
 8001392:	2201      	movs	r2, #1
 8001394:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001398:	4833      	ldr	r0, [pc, #204]	; (8001468 <main+0x1c8>)
 800139a:	f005 fb0f 	bl	80069bc <HAL_GPIO_WritePin>

  HAL_ADCEx_Calibration_Start(&hadc2,5);
 800139e:	2105      	movs	r1, #5
 80013a0:	4832      	ldr	r0, [pc, #200]	; (800146c <main+0x1cc>)
 80013a2:	f003 ffe1 	bl	8005368 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc1,4);
 80013a6:	2104      	movs	r1, #4
 80013a8:	4831      	ldr	r0, [pc, #196]	; (8001470 <main+0x1d0>)
 80013aa:	f003 ffdd 	bl	8005368 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc3,2);
 80013ae:	2102      	movs	r1, #2
 80013b0:	4830      	ldr	r0, [pc, #192]	; (8001474 <main+0x1d4>)
 80013b2:	f003 ffd9 	bl	8005368 <HAL_ADCEx_Calibration_Start>

  flag=1;
 80013b6:	4b30      	ldr	r3, [pc, #192]	; (8001478 <main+0x1d8>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	701a      	strb	r2, [r3, #0]



 // lcd_init();
//  lcd_clear();
    char *text = " ";
 80013bc:	4b2f      	ldr	r3, [pc, #188]	; (800147c <main+0x1dc>)
 80013be:	61bb      	str	r3, [r7, #24]
  //				 	  	    lcd_write_string(int_to_str);




     HAL_ADC_Start_DMA(&hadc2, (uint16_t*)hall_sens, 5);
 80013c0:	2205      	movs	r2, #5
 80013c2:	492f      	ldr	r1, [pc, #188]	; (8001480 <main+0x1e0>)
 80013c4:	4829      	ldr	r0, [pc, #164]	; (800146c <main+0x1cc>)
 80013c6:	f003 fb5d 	bl	8004a84 <HAL_ADC_Start_DMA>
     HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxFrame, 16);
 80013ca:	2210      	movs	r2, #16
 80013cc:	492d      	ldr	r1, [pc, #180]	; (8001484 <main+0x1e4>)
 80013ce:	482e      	ldr	r0, [pc, #184]	; (8001488 <main+0x1e8>)
 80013d0:	f00b fa05 	bl	800c7de <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80013d4:	4b2d      	ldr	r3, [pc, #180]	; (800148c <main+0x1ec>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	4b2c      	ldr	r3, [pc, #176]	; (800148c <main+0x1ec>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f022 0204 	bic.w	r2, r2, #4
 80013e2:	601a      	str	r2, [r3, #0]

       RX_2;
 80013e4:	2200      	movs	r2, #0
 80013e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ee:	f005 fae5 	bl	80069bc <HAL_GPIO_WritePin>

 HAL_Delay(500);
 80013f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013f6:	f002 fed5 	bl	80041a4 <HAL_Delay>
  LED_1_OFF;
 80013fa:	2200      	movs	r2, #0
 80013fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001400:	480e      	ldr	r0, [pc, #56]	; (800143c <main+0x19c>)
 8001402:	f005 fadb 	bl	80069bc <HAL_GPIO_WritePin>
  LED_2_OFF;
 8001406:	2200      	movs	r2, #0
 8001408:	2101      	movs	r1, #1
 800140a:	480d      	ldr	r0, [pc, #52]	; (8001440 <main+0x1a0>)
 800140c:	f005 fad6 	bl	80069bc <HAL_GPIO_WritePin>
  LED_3_OFF;
 8001410:	2200      	movs	r2, #0
 8001412:	2102      	movs	r1, #2
 8001414:	480a      	ldr	r0, [pc, #40]	; (8001440 <main+0x1a0>)
 8001416:	f005 fad1 	bl	80069bc <HAL_GPIO_WritePin>
  while (1)
  {

	 // HAL_I2C_Master_Transmit(&hi2c1, 0x20 << 1, (uint8_t*)butt, 1, HAL_MAX_DELAY);

	  HAL_I2C_Master_Receive(&hi2c1, 0x24 << 1 , butt, 1, HAL_MAX_DELAY);
 800141a:	f04f 33ff 	mov.w	r3, #4294967295
 800141e:	9300      	str	r3, [sp, #0]
 8001420:	2301      	movs	r3, #1
 8001422:	4a1b      	ldr	r2, [pc, #108]	; (8001490 <main+0x1f0>)
 8001424:	2148      	movs	r1, #72	; 0x48
 8001426:	481b      	ldr	r0, [pc, #108]	; (8001494 <main+0x1f4>)
 8001428:	f005 fc7c 	bl	8006d24 <HAL_I2C_Master_Receive>

	  bool button[8]={0, };
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
	   for(uint8_t i=0;i<8;i++){
 8001434:	2300      	movs	r3, #0
 8001436:	77fb      	strb	r3, [r7, #31]
 8001438:	e043      	b.n	80014c2 <main+0x222>
 800143a:	bf00      	nop
 800143c:	48000800 	.word	0x48000800
 8001440:	48001400 	.word	0x48001400
 8001444:	20000000 	.word	0x20000000
 8001448:	40012c00 	.word	0x40012c00
 800144c:	40013400 	.word	0x40013400
 8001450:	40014000 	.word	0x40014000
 8001454:	200003a4 	.word	0x200003a4
 8001458:	200004d4 	.word	0x200004d4
 800145c:	20000520 	.word	0x20000520
 8001460:	200003f0 	.word	0x200003f0
 8001464:	2000043c 	.word	0x2000043c
 8001468:	48000400 	.word	0x48000400
 800146c:	2000024c 	.word	0x2000024c
 8001470:	200001fc 	.word	0x200001fc
 8001474:	2000029c 	.word	0x2000029c
 8001478:	20000731 	.word	0x20000731
 800147c:	0800f5a8 	.word	0x0800f5a8
 8001480:	2000070c 	.word	0x2000070c
 8001484:	20000768 	.word	0x20000768
 8001488:	200005f4 	.word	0x200005f4
 800148c:	2000067c 	.word	0x2000067c
 8001490:	20000728 	.word	0x20000728
 8001494:	20000330 	.word	0x20000330
	  	if(((butt[0]>>(7-i))&0x1)==0){button[i]=1;  }
 8001498:	4b9b      	ldr	r3, [pc, #620]	; (8001708 <main+0x468>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	461a      	mov	r2, r3
 800149e:	7ffb      	ldrb	r3, [r7, #31]
 80014a0:	f1c3 0307 	rsb	r3, r3, #7
 80014a4:	fa42 f303 	asr.w	r3, r2, r3
 80014a8:	f003 0301 	and.w	r3, r3, #1
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d105      	bne.n	80014bc <main+0x21c>
 80014b0:	7ffb      	ldrb	r3, [r7, #31]
 80014b2:	3320      	adds	r3, #32
 80014b4:	443b      	add	r3, r7
 80014b6:	2201      	movs	r2, #1
 80014b8:	f803 2c1c 	strb.w	r2, [r3, #-28]
	   for(uint8_t i=0;i<8;i++){
 80014bc:	7ffb      	ldrb	r3, [r7, #31]
 80014be:	3301      	adds	r3, #1
 80014c0:	77fb      	strb	r3, [r7, #31]
 80014c2:	7ffb      	ldrb	r3, [r7, #31]
 80014c4:	2b07      	cmp	r3, #7
 80014c6:	d9e7      	bls.n	8001498 <main+0x1f8>

	  	  }

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  if((button[7]==1)&&(lcd_status==0)&&(lcd_flag==0)&&(button_7_flag==0)){ lcd_update=1;  lcd_status=1; leds[0]=0x1;
 80014c8:	7afb      	ldrb	r3, [r7, #11]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d025      	beq.n	800151a <main+0x27a>
 80014ce:	4b8f      	ldr	r3, [pc, #572]	; (800170c <main+0x46c>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	f083 0301 	eor.w	r3, r3, #1
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d01e      	beq.n	800151a <main+0x27a>
 80014dc:	4b8c      	ldr	r3, [pc, #560]	; (8001710 <main+0x470>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	f083 0301 	eor.w	r3, r3, #1
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d017      	beq.n	800151a <main+0x27a>
 80014ea:	4b8a      	ldr	r3, [pc, #552]	; (8001714 <main+0x474>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	f083 0301 	eor.w	r3, r3, #1
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d010      	beq.n	800151a <main+0x27a>
 80014f8:	4b87      	ldr	r3, [pc, #540]	; (8001718 <main+0x478>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	701a      	strb	r2, [r3, #0]
 80014fe:	4b83      	ldr	r3, [pc, #524]	; (800170c <main+0x46c>)
 8001500:	2201      	movs	r2, #1
 8001502:	701a      	strb	r2, [r3, #0]
 8001504:	4b85      	ldr	r3, [pc, #532]	; (800171c <main+0x47c>)
 8001506:	2201      	movs	r2, #1
 8001508:	701a      	strb	r2, [r3, #0]

	  lcd_flag=1;timing=HAL_GetTick();}
 800150a:	4b81      	ldr	r3, [pc, #516]	; (8001710 <main+0x470>)
 800150c:	2201      	movs	r2, #1
 800150e:	701a      	strb	r2, [r3, #0]
 8001510:	f002 fe3c 	bl	800418c <HAL_GetTick>
 8001514:	4603      	mov	r3, r0
 8001516:	4a82      	ldr	r2, [pc, #520]	; (8001720 <main+0x480>)
 8001518:	6013      	str	r3, [r2, #0]

	  if((button[7]==1)&&(lcd_status==1)&&(lcd_flag==1)&&(button_7_flag==0)){timing=HAL_GetTick();button_7_flag=1;}
 800151a:	7afb      	ldrb	r3, [r7, #11]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d016      	beq.n	800154e <main+0x2ae>
 8001520:	4b7a      	ldr	r3, [pc, #488]	; (800170c <main+0x46c>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d012      	beq.n	800154e <main+0x2ae>
 8001528:	4b79      	ldr	r3, [pc, #484]	; (8001710 <main+0x470>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d00e      	beq.n	800154e <main+0x2ae>
 8001530:	4b78      	ldr	r3, [pc, #480]	; (8001714 <main+0x474>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	f083 0301 	eor.w	r3, r3, #1
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b00      	cmp	r3, #0
 800153c:	d007      	beq.n	800154e <main+0x2ae>
 800153e:	f002 fe25 	bl	800418c <HAL_GetTick>
 8001542:	4603      	mov	r3, r0
 8001544:	4a76      	ldr	r2, [pc, #472]	; (8001720 <main+0x480>)
 8001546:	6013      	str	r3, [r2, #0]
 8001548:	4b72      	ldr	r3, [pc, #456]	; (8001714 <main+0x474>)
 800154a:	2201      	movs	r2, #1
 800154c:	701a      	strb	r2, [r3, #0]
	  if((button[7]==1)&&(lcd_status==1)&&(lcd_flag==1)&&(button_7_flag==1)&&((HAL_GetTick()-timing)>=3000)){lcd_flag=0;}
 800154e:	7afb      	ldrb	r3, [r7, #11]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d018      	beq.n	8001586 <main+0x2e6>
 8001554:	4b6d      	ldr	r3, [pc, #436]	; (800170c <main+0x46c>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d014      	beq.n	8001586 <main+0x2e6>
 800155c:	4b6c      	ldr	r3, [pc, #432]	; (8001710 <main+0x470>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d010      	beq.n	8001586 <main+0x2e6>
 8001564:	4b6b      	ldr	r3, [pc, #428]	; (8001714 <main+0x474>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d00c      	beq.n	8001586 <main+0x2e6>
 800156c:	f002 fe0e 	bl	800418c <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	4b6b      	ldr	r3, [pc, #428]	; (8001720 <main+0x480>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800157c:	4293      	cmp	r3, r2
 800157e:	d902      	bls.n	8001586 <main+0x2e6>
 8001580:	4b63      	ldr	r3, [pc, #396]	; (8001710 <main+0x470>)
 8001582:	2200      	movs	r2, #0
 8001584:	701a      	strb	r2, [r3, #0]



	  if((button[7]==1)&&(lcd_status==1)&&(lcd_flag==0)){  lcd_status=0;leds[0]=0x00;
 8001586:	7afb      	ldrb	r3, [r7, #11]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d015      	beq.n	80015b8 <main+0x318>
 800158c:	4b5f      	ldr	r3, [pc, #380]	; (800170c <main+0x46c>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d011      	beq.n	80015b8 <main+0x318>
 8001594:	4b5e      	ldr	r3, [pc, #376]	; (8001710 <main+0x470>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	f083 0301 	eor.w	r3, r3, #1
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d00a      	beq.n	80015b8 <main+0x318>
 80015a2:	4b5a      	ldr	r3, [pc, #360]	; (800170c <main+0x46c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	701a      	strb	r2, [r3, #0]
 80015a8:	4b5c      	ldr	r3, [pc, #368]	; (800171c <main+0x47c>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	701a      	strb	r2, [r3, #0]

	  timing=HAL_GetTick();}
 80015ae:	f002 fded 	bl	800418c <HAL_GetTick>
 80015b2:	4603      	mov	r3, r0
 80015b4:	4a5a      	ldr	r2, [pc, #360]	; (8001720 <main+0x480>)
 80015b6:	6013      	str	r3, [r2, #0]

	  if((button[7]==0)&&(lcd_status==0)&&((HAL_GetTick()-timing)>=100)){ button_7_flag=0;}
 80015b8:	7afb      	ldrb	r3, [r7, #11]
 80015ba:	f083 0301 	eor.w	r3, r3, #1
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d011      	beq.n	80015e8 <main+0x348>
 80015c4:	4b51      	ldr	r3, [pc, #324]	; (800170c <main+0x46c>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	f083 0301 	eor.w	r3, r3, #1
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d00a      	beq.n	80015e8 <main+0x348>
 80015d2:	f002 fddb 	bl	800418c <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	4b51      	ldr	r3, [pc, #324]	; (8001720 <main+0x480>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b63      	cmp	r3, #99	; 0x63
 80015e0:	d902      	bls.n	80015e8 <main+0x348>
 80015e2:	4b4c      	ldr	r3, [pc, #304]	; (8001714 <main+0x474>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	701a      	strb	r2, [r3, #0]
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  if((button[6]==1)&&(button_6_flag==0)){timing=HAL_GetTick();
 80015e8:	7abb      	ldrb	r3, [r7, #10]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d01e      	beq.n	800162c <main+0x38c>
 80015ee:	4b4d      	ldr	r3, [pc, #308]	; (8001724 <main+0x484>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	f083 0301 	eor.w	r3, r3, #1
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d017      	beq.n	800162c <main+0x38c>
 80015fc:	f002 fdc6 	bl	800418c <HAL_GetTick>
 8001600:	4603      	mov	r3, r0
 8001602:	4a47      	ldr	r2, [pc, #284]	; (8001720 <main+0x480>)
 8001604:	6013      	str	r3, [r2, #0]
	  button_6_flag=1;page_flag=1;  page_num++;
 8001606:	4b47      	ldr	r3, [pc, #284]	; (8001724 <main+0x484>)
 8001608:	2201      	movs	r2, #1
 800160a:	701a      	strb	r2, [r3, #0]
 800160c:	4b46      	ldr	r3, [pc, #280]	; (8001728 <main+0x488>)
 800160e:	2201      	movs	r2, #1
 8001610:	701a      	strb	r2, [r3, #0]
 8001612:	4b46      	ldr	r3, [pc, #280]	; (800172c <main+0x48c>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	3301      	adds	r3, #1
 8001618:	b2da      	uxtb	r2, r3
 800161a:	4b44      	ldr	r3, [pc, #272]	; (800172c <main+0x48c>)
 800161c:	701a      	strb	r2, [r3, #0]
      if(page_num>3){page_num=0;}}
 800161e:	4b43      	ldr	r3, [pc, #268]	; (800172c <main+0x48c>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b03      	cmp	r3, #3
 8001624:	d902      	bls.n	800162c <main+0x38c>
 8001626:	4b41      	ldr	r3, [pc, #260]	; (800172c <main+0x48c>)
 8001628:	2200      	movs	r2, #0
 800162a:	701a      	strb	r2, [r3, #0]

	  if((button[6]==1)&&(button_6_flag==1)&&((HAL_GetTick()-timing)>=2000)){ page_flag=1;  page_num++;
 800162c:	7abb      	ldrb	r3, [r7, #10]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d021      	beq.n	8001676 <main+0x3d6>
 8001632:	4b3c      	ldr	r3, [pc, #240]	; (8001724 <main+0x484>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d01d      	beq.n	8001676 <main+0x3d6>
 800163a:	f002 fda7 	bl	800418c <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	4b37      	ldr	r3, [pc, #220]	; (8001720 <main+0x480>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800164a:	d314      	bcc.n	8001676 <main+0x3d6>
 800164c:	4b36      	ldr	r3, [pc, #216]	; (8001728 <main+0x488>)
 800164e:	2201      	movs	r2, #1
 8001650:	701a      	strb	r2, [r3, #0]
 8001652:	4b36      	ldr	r3, [pc, #216]	; (800172c <main+0x48c>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	3301      	adds	r3, #1
 8001658:	b2da      	uxtb	r2, r3
 800165a:	4b34      	ldr	r3, [pc, #208]	; (800172c <main+0x48c>)
 800165c:	701a      	strb	r2, [r3, #0]
      if(page_num>3){page_num=0;}timing=HAL_GetTick();}
 800165e:	4b33      	ldr	r3, [pc, #204]	; (800172c <main+0x48c>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b03      	cmp	r3, #3
 8001664:	d902      	bls.n	800166c <main+0x3cc>
 8001666:	4b31      	ldr	r3, [pc, #196]	; (800172c <main+0x48c>)
 8001668:	2200      	movs	r2, #0
 800166a:	701a      	strb	r2, [r3, #0]
 800166c:	f002 fd8e 	bl	800418c <HAL_GetTick>
 8001670:	4603      	mov	r3, r0
 8001672:	4a2b      	ldr	r2, [pc, #172]	; (8001720 <main+0x480>)
 8001674:	6013      	str	r3, [r2, #0]

	  if((button[6]==0)&&(button_6_flag==1)){timing=HAL_GetTick();button_6_flag=0;}
 8001676:	7abb      	ldrb	r3, [r7, #10]
 8001678:	f083 0301 	eor.w	r3, r3, #1
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b00      	cmp	r3, #0
 8001680:	d00b      	beq.n	800169a <main+0x3fa>
 8001682:	4b28      	ldr	r3, [pc, #160]	; (8001724 <main+0x484>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d007      	beq.n	800169a <main+0x3fa>
 800168a:	f002 fd7f 	bl	800418c <HAL_GetTick>
 800168e:	4603      	mov	r3, r0
 8001690:	4a23      	ldr	r2, [pc, #140]	; (8001720 <main+0x480>)
 8001692:	6013      	str	r3, [r2, #0]
 8001694:	4b23      	ldr	r3, [pc, #140]	; (8001724 <main+0x484>)
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


	  if((button[5]==1)&&(button_5_flag==0)){timing=HAL_GetTick();
 800169a:	7a7b      	ldrb	r3, [r7, #9]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d06e      	beq.n	800177e <main+0x4de>
 80016a0:	4b23      	ldr	r3, [pc, #140]	; (8001730 <main+0x490>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	f083 0301 	eor.w	r3, r3, #1
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d067      	beq.n	800177e <main+0x4de>
 80016ae:	f002 fd6d 	bl	800418c <HAL_GetTick>
 80016b2:	4603      	mov	r3, r0
 80016b4:	4a1a      	ldr	r2, [pc, #104]	; (8001720 <main+0x480>)
 80016b6:	6013      	str	r3, [r2, #0]
	  button_5_flag=1;
 80016b8:	4b1d      	ldr	r3, [pc, #116]	; (8001730 <main+0x490>)
 80016ba:	2201      	movs	r2, #1
 80016bc:	701a      	strb	r2, [r3, #0]
      if((pwm_cmd>=0)&&(pwm_cmd<=19)&&(status==0)){
 80016be:	4b1d      	ldr	r3, [pc, #116]	; (8001734 <main+0x494>)
 80016c0:	881b      	ldrh	r3, [r3, #0]
 80016c2:	4b1c      	ldr	r3, [pc, #112]	; (8001734 <main+0x494>)
 80016c4:	881b      	ldrh	r3, [r3, #0]
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	2b13      	cmp	r3, #19
 80016ca:	d843      	bhi.n	8001754 <main+0x4b4>
 80016cc:	4b1a      	ldr	r3, [pc, #104]	; (8001738 <main+0x498>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d13f      	bne.n	8001754 <main+0x4b4>

      	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN); // RTC_FORMAT_BIN , RTC_FORMAT_BCD
 80016d4:	2200      	movs	r2, #0
 80016d6:	4919      	ldr	r1, [pc, #100]	; (800173c <main+0x49c>)
 80016d8:	4819      	ldr	r0, [pc, #100]	; (8001740 <main+0x4a0>)
 80016da:	f007 fc84 	bl	8008fe6 <HAL_RTC_GetTime>
      	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80016de:	2200      	movs	r2, #0
 80016e0:	4918      	ldr	r1, [pc, #96]	; (8001744 <main+0x4a4>)
 80016e2:	4817      	ldr	r0, [pc, #92]	; (8001740 <main+0x4a0>)
 80016e4:	f007 fd61 	bl	80091aa <HAL_RTC_GetDate>

      	hour=sTime.Hours;
 80016e8:	4b14      	ldr	r3, [pc, #80]	; (800173c <main+0x49c>)
 80016ea:	781a      	ldrb	r2, [r3, #0]
 80016ec:	4b16      	ldr	r3, [pc, #88]	; (8001748 <main+0x4a8>)
 80016ee:	701a      	strb	r2, [r3, #0]
      	min=sTime.Minutes;
 80016f0:	4b12      	ldr	r3, [pc, #72]	; (800173c <main+0x49c>)
 80016f2:	785a      	ldrb	r2, [r3, #1]
 80016f4:	4b15      	ldr	r3, [pc, #84]	; (800174c <main+0x4ac>)
 80016f6:	701a      	strb	r2, [r3, #0]
      	sec=sTime.Seconds;
 80016f8:	4b10      	ldr	r3, [pc, #64]	; (800173c <main+0x49c>)
 80016fa:	789a      	ldrb	r2, [r3, #2]
 80016fc:	4b14      	ldr	r3, [pc, #80]	; (8001750 <main+0x4b0>)
 80016fe:	701a      	strb	r2, [r3, #0]

      	status=1;
 8001700:	4b0d      	ldr	r3, [pc, #52]	; (8001738 <main+0x498>)
 8001702:	2201      	movs	r2, #1
 8001704:	701a      	strb	r2, [r3, #0]
 8001706:	e025      	b.n	8001754 <main+0x4b4>
 8001708:	20000728 	.word	0x20000728
 800170c:	20000716 	.word	0x20000716
 8001710:	20000718 	.word	0x20000718
 8001714:	2000071c 	.word	0x2000071c
 8001718:	20000717 	.word	0x20000717
 800171c:	20000720 	.word	0x20000720
 8001720:	200008e4 	.word	0x200008e4
 8001724:	2000071b 	.word	0x2000071b
 8001728:	20000740 	.word	0x20000740
 800172c:	2000073f 	.word	0x2000073f
 8001730:	2000071a 	.word	0x2000071a
 8001734:	2000072e 	.word	0x2000072e
 8001738:	20000747 	.word	0x20000747
 800173c:	200008e8 	.word	0x200008e8
 8001740:	20000384 	.word	0x20000384
 8001744:	200008fc 	.word	0x200008fc
 8001748:	20000745 	.word	0x20000745
 800174c:	20000744 	.word	0x20000744
 8001750:	20000746 	.word	0x20000746
      }

  		   pwm_cmd=pwm_cmd+10;
 8001754:	4b98      	ldr	r3, [pc, #608]	; (80019b8 <main+0x718>)
 8001756:	881b      	ldrh	r3, [r3, #0]
 8001758:	b29b      	uxth	r3, r3
 800175a:	330a      	adds	r3, #10
 800175c:	b29a      	uxth	r2, r3
 800175e:	4b96      	ldr	r3, [pc, #600]	; (80019b8 <main+0x718>)
 8001760:	801a      	strh	r2, [r3, #0]
  		   if(pwm_cmd>=1999){pwm_cmd=2000;}
 8001762:	4b95      	ldr	r3, [pc, #596]	; (80019b8 <main+0x718>)
 8001764:	881b      	ldrh	r3, [r3, #0]
 8001766:	b29b      	uxth	r3, r3
 8001768:	f240 72ce 	movw	r2, #1998	; 0x7ce
 800176c:	4293      	cmp	r3, r2
 800176e:	d903      	bls.n	8001778 <main+0x4d8>
 8001770:	4b91      	ldr	r3, [pc, #580]	; (80019b8 <main+0x718>)
 8001772:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001776:	801a      	strh	r2, [r3, #0]
  		   pwm_tgr=4;
 8001778:	4b90      	ldr	r3, [pc, #576]	; (80019bc <main+0x71c>)
 800177a:	2204      	movs	r2, #4
 800177c:	701a      	strb	r2, [r3, #0]

	  }
	  if((button[5]==1)&&(button_5_flag==1)&&((HAL_GetTick()-timing)>=150)){
 800177e:	7a7b      	ldrb	r3, [r7, #9]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d025      	beq.n	80017d0 <main+0x530>
 8001784:	4b8e      	ldr	r3, [pc, #568]	; (80019c0 <main+0x720>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d021      	beq.n	80017d0 <main+0x530>
 800178c:	f002 fcfe 	bl	800418c <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	4b8c      	ldr	r3, [pc, #560]	; (80019c4 <main+0x724>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b95      	cmp	r3, #149	; 0x95
 800179a:	d919      	bls.n	80017d0 <main+0x530>
		  pwm_cmd=pwm_cmd+10;
 800179c:	4b86      	ldr	r3, [pc, #536]	; (80019b8 <main+0x718>)
 800179e:	881b      	ldrh	r3, [r3, #0]
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	330a      	adds	r3, #10
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	4b84      	ldr	r3, [pc, #528]	; (80019b8 <main+0x718>)
 80017a8:	801a      	strh	r2, [r3, #0]
		  if(pwm_cmd>=1999){pwm_cmd=2000;}
 80017aa:	4b83      	ldr	r3, [pc, #524]	; (80019b8 <main+0x718>)
 80017ac:	881b      	ldrh	r3, [r3, #0]
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	f240 72ce 	movw	r2, #1998	; 0x7ce
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d903      	bls.n	80017c0 <main+0x520>
 80017b8:	4b7f      	ldr	r3, [pc, #508]	; (80019b8 <main+0x718>)
 80017ba:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80017be:	801a      	strh	r2, [r3, #0]
		  pwm_tgr=4;
 80017c0:	4b7e      	ldr	r3, [pc, #504]	; (80019bc <main+0x71c>)
 80017c2:	2204      	movs	r2, #4
 80017c4:	701a      	strb	r2, [r3, #0]

		  timing=HAL_GetTick();}
 80017c6:	f002 fce1 	bl	800418c <HAL_GetTick>
 80017ca:	4603      	mov	r3, r0
 80017cc:	4a7d      	ldr	r2, [pc, #500]	; (80019c4 <main+0x724>)
 80017ce:	6013      	str	r3, [r2, #0]
	  if((button[5]==0)&&(button_5_flag==1)){timing=HAL_GetTick();button_5_flag=0;}
 80017d0:	7a7b      	ldrb	r3, [r7, #9]
 80017d2:	f083 0301 	eor.w	r3, r3, #1
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d00b      	beq.n	80017f4 <main+0x554>
 80017dc:	4b78      	ldr	r3, [pc, #480]	; (80019c0 <main+0x720>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d007      	beq.n	80017f4 <main+0x554>
 80017e4:	f002 fcd2 	bl	800418c <HAL_GetTick>
 80017e8:	4603      	mov	r3, r0
 80017ea:	4a76      	ldr	r2, [pc, #472]	; (80019c4 <main+0x724>)
 80017ec:	6013      	str	r3, [r2, #0]
 80017ee:	4b74      	ldr	r3, [pc, #464]	; (80019c0 <main+0x720>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	701a      	strb	r2, [r3, #0]
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  if((button[4]==1)&&(button_4_flag==0)){timing=HAL_GetTick();
 80017f4:	7a3b      	ldrb	r3, [r7, #8]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d03f      	beq.n	800187a <main+0x5da>
 80017fa:	4b73      	ldr	r3, [pc, #460]	; (80019c8 <main+0x728>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	f083 0301 	eor.w	r3, r3, #1
 8001802:	b2db      	uxtb	r3, r3
 8001804:	2b00      	cmp	r3, #0
 8001806:	d038      	beq.n	800187a <main+0x5da>
 8001808:	f002 fcc0 	bl	800418c <HAL_GetTick>
 800180c:	4603      	mov	r3, r0
 800180e:	4a6d      	ldr	r2, [pc, #436]	; (80019c4 <main+0x724>)
 8001810:	6013      	str	r3, [r2, #0]
	  button_4_flag=1;
 8001812:	4b6d      	ldr	r3, [pc, #436]	; (80019c8 <main+0x728>)
 8001814:	2201      	movs	r2, #1
 8001816:	701a      	strb	r2, [r3, #0]
	  if((pwm_cmd==0)&&(status==1)){
 8001818:	4b67      	ldr	r3, [pc, #412]	; (80019b8 <main+0x718>)
 800181a:	881b      	ldrh	r3, [r3, #0]
 800181c:	b29b      	uxth	r3, r3
 800181e:	2b00      	cmp	r3, #0
 8001820:	d10f      	bne.n	8001842 <main+0x5a2>
 8001822:	4b6a      	ldr	r3, [pc, #424]	; (80019cc <main+0x72c>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d10b      	bne.n	8001842 <main+0x5a2>
	 		              	status=0;
 800182a:	4b68      	ldr	r3, [pc, #416]	; (80019cc <main+0x72c>)
 800182c:	2200      	movs	r2, #0
 800182e:	701a      	strb	r2, [r3, #0]

	 		              	hour=0;
 8001830:	4b67      	ldr	r3, [pc, #412]	; (80019d0 <main+0x730>)
 8001832:	2200      	movs	r2, #0
 8001834:	701a      	strb	r2, [r3, #0]
	 		              	min=0;
 8001836:	4b67      	ldr	r3, [pc, #412]	; (80019d4 <main+0x734>)
 8001838:	2200      	movs	r2, #0
 800183a:	701a      	strb	r2, [r3, #0]
	 		              	sec=0;
 800183c:	4b66      	ldr	r3, [pc, #408]	; (80019d8 <main+0x738>)
 800183e:	2200      	movs	r2, #0
 8001840:	701a      	strb	r2, [r3, #0]
	 		              }


	 		   pwm_cmd=pwm_cmd-10;
 8001842:	4b5d      	ldr	r3, [pc, #372]	; (80019b8 <main+0x718>)
 8001844:	881b      	ldrh	r3, [r3, #0]
 8001846:	b29b      	uxth	r3, r3
 8001848:	3b0a      	subs	r3, #10
 800184a:	b29a      	uxth	r2, r3
 800184c:	4b5a      	ldr	r3, [pc, #360]	; (80019b8 <main+0x718>)
 800184e:	801a      	strh	r2, [r3, #0]
	 		   if(pwm_cmd>=2100){pwm_cmd=0;}
 8001850:	4b59      	ldr	r3, [pc, #356]	; (80019b8 <main+0x718>)
 8001852:	881b      	ldrh	r3, [r3, #0]
 8001854:	b29b      	uxth	r3, r3
 8001856:	f640 0233 	movw	r2, #2099	; 0x833
 800185a:	4293      	cmp	r3, r2
 800185c:	d902      	bls.n	8001864 <main+0x5c4>
 800185e:	4b56      	ldr	r3, [pc, #344]	; (80019b8 <main+0x718>)
 8001860:	2200      	movs	r2, #0
 8001862:	801a      	strh	r2, [r3, #0]
	 		   if(pwm_cmd<=2){pwm_cmd=0;}
 8001864:	4b54      	ldr	r3, [pc, #336]	; (80019b8 <main+0x718>)
 8001866:	881b      	ldrh	r3, [r3, #0]
 8001868:	b29b      	uxth	r3, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d802      	bhi.n	8001874 <main+0x5d4>
 800186e:	4b52      	ldr	r3, [pc, #328]	; (80019b8 <main+0x718>)
 8001870:	2200      	movs	r2, #0
 8001872:	801a      	strh	r2, [r3, #0]
	 		   pwm_tgr=4;
 8001874:	4b51      	ldr	r3, [pc, #324]	; (80019bc <main+0x71c>)
 8001876:	2204      	movs	r2, #4
 8001878:	701a      	strb	r2, [r3, #0]

	  }
	  if((button[4]==1)&&(button_4_flag==1)&&((HAL_GetTick()-timing)>=150)){
 800187a:	7a3b      	ldrb	r3, [r7, #8]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d041      	beq.n	8001904 <main+0x664>
 8001880:	4b51      	ldr	r3, [pc, #324]	; (80019c8 <main+0x728>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d03d      	beq.n	8001904 <main+0x664>
 8001888:	f002 fc80 	bl	800418c <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	4b4d      	ldr	r3, [pc, #308]	; (80019c4 <main+0x724>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b95      	cmp	r3, #149	; 0x95
 8001896:	d935      	bls.n	8001904 <main+0x664>
		  if((pwm_cmd==0)&&(status==1)){
 8001898:	4b47      	ldr	r3, [pc, #284]	; (80019b8 <main+0x718>)
 800189a:	881b      	ldrh	r3, [r3, #0]
 800189c:	b29b      	uxth	r3, r3
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d10f      	bne.n	80018c2 <main+0x622>
 80018a2:	4b4a      	ldr	r3, [pc, #296]	; (80019cc <main+0x72c>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d10b      	bne.n	80018c2 <main+0x622>
		  	 		              	status=0;
 80018aa:	4b48      	ldr	r3, [pc, #288]	; (80019cc <main+0x72c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	701a      	strb	r2, [r3, #0]

		  	 		              	hour=0;
 80018b0:	4b47      	ldr	r3, [pc, #284]	; (80019d0 <main+0x730>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	701a      	strb	r2, [r3, #0]
		  	 		              	min=0;
 80018b6:	4b47      	ldr	r3, [pc, #284]	; (80019d4 <main+0x734>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	701a      	strb	r2, [r3, #0]
		  	 		              	sec=0;
 80018bc:	4b46      	ldr	r3, [pc, #280]	; (80019d8 <main+0x738>)
 80018be:	2200      	movs	r2, #0
 80018c0:	701a      	strb	r2, [r3, #0]
		  	 		              }


		  	 		   pwm_cmd=pwm_cmd-10;
 80018c2:	4b3d      	ldr	r3, [pc, #244]	; (80019b8 <main+0x718>)
 80018c4:	881b      	ldrh	r3, [r3, #0]
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	3b0a      	subs	r3, #10
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	4b3a      	ldr	r3, [pc, #232]	; (80019b8 <main+0x718>)
 80018ce:	801a      	strh	r2, [r3, #0]
		  	 		   if(pwm_cmd>=2100){pwm_cmd=0;}
 80018d0:	4b39      	ldr	r3, [pc, #228]	; (80019b8 <main+0x718>)
 80018d2:	881b      	ldrh	r3, [r3, #0]
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	f640 0233 	movw	r2, #2099	; 0x833
 80018da:	4293      	cmp	r3, r2
 80018dc:	d902      	bls.n	80018e4 <main+0x644>
 80018de:	4b36      	ldr	r3, [pc, #216]	; (80019b8 <main+0x718>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	801a      	strh	r2, [r3, #0]
		  	 		   if(pwm_cmd<=1){pwm_cmd=0;}
 80018e4:	4b34      	ldr	r3, [pc, #208]	; (80019b8 <main+0x718>)
 80018e6:	881b      	ldrh	r3, [r3, #0]
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d802      	bhi.n	80018f4 <main+0x654>
 80018ee:	4b32      	ldr	r3, [pc, #200]	; (80019b8 <main+0x718>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	801a      	strh	r2, [r3, #0]
		  	 		   pwm_tgr=4;
 80018f4:	4b31      	ldr	r3, [pc, #196]	; (80019bc <main+0x71c>)
 80018f6:	2204      	movs	r2, #4
 80018f8:	701a      	strb	r2, [r3, #0]


		  timing=HAL_GetTick();
 80018fa:	f002 fc47 	bl	800418c <HAL_GetTick>
 80018fe:	4603      	mov	r3, r0
 8001900:	4a30      	ldr	r2, [pc, #192]	; (80019c4 <main+0x724>)
 8001902:	6013      	str	r3, [r2, #0]
	  }

	  if((button[4]==0)&&(button_4_flag==1)){timing=HAL_GetTick();button_4_flag=0;}
 8001904:	7a3b      	ldrb	r3, [r7, #8]
 8001906:	f083 0301 	eor.w	r3, r3, #1
 800190a:	b2db      	uxtb	r3, r3
 800190c:	2b00      	cmp	r3, #0
 800190e:	d00b      	beq.n	8001928 <main+0x688>
 8001910:	4b2d      	ldr	r3, [pc, #180]	; (80019c8 <main+0x728>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d007      	beq.n	8001928 <main+0x688>
 8001918:	f002 fc38 	bl	800418c <HAL_GetTick>
 800191c:	4603      	mov	r3, r0
 800191e:	4a29      	ldr	r2, [pc, #164]	; (80019c4 <main+0x724>)
 8001920:	6013      	str	r3, [r2, #0]
 8001922:	4b29      	ldr	r3, [pc, #164]	; (80019c8 <main+0x728>)
 8001924:	2200      	movs	r2, #0
 8001926:	701a      	strb	r2, [r3, #0]
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  if(button[3]==1){pwm_cmd=0;}
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d002      	beq.n	8001934 <main+0x694>
 800192e:	4b22      	ldr	r3, [pc, #136]	; (80019b8 <main+0x718>)
 8001930:	2200      	movs	r2, #0
 8001932:	801a      	strh	r2, [r3, #0]



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

          leds[1]=!status;
 8001934:	4b25      	ldr	r3, [pc, #148]	; (80019cc <main+0x72c>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	bf0c      	ite	eq
 800193c:	2301      	moveq	r3, #1
 800193e:	2300      	movne	r3, #0
 8001940:	b2da      	uxtb	r2, r3
 8001942:	4b26      	ldr	r3, [pc, #152]	; (80019dc <main+0x73c>)
 8001944:	705a      	strb	r2, [r3, #1]
		  led_ind[0]=led_indicators(leds);
 8001946:	4825      	ldr	r0, [pc, #148]	; (80019dc <main+0x73c>)
 8001948:	f7ff fb76 	bl	8001038 <led_indicators>
 800194c:	4603      	mov	r3, r0
 800194e:	461a      	mov	r2, r3
 8001950:	4b23      	ldr	r3, [pc, #140]	; (80019e0 <main+0x740>)
 8001952:	701a      	strb	r2, [r3, #0]

		  HAL_I2C_Master_Transmit(&hi2c1, 0x20 << 1, (uint8_t*)led_ind, 1, HAL_MAX_DELAY);
 8001954:	f04f 33ff 	mov.w	r3, #4294967295
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	2301      	movs	r3, #1
 800195c:	4a20      	ldr	r2, [pc, #128]	; (80019e0 <main+0x740>)
 800195e:	2140      	movs	r1, #64	; 0x40
 8001960:	4820      	ldr	r0, [pc, #128]	; (80019e4 <main+0x744>)
 8001962:	f005 f8eb 	bl	8006b3c <HAL_I2C_Master_Transmit>





	  if(flag==1){
 8001966:	4b20      	ldr	r3, [pc, #128]	; (80019e8 <main+0x748>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	b2db      	uxtb	r3, r3
 800196c:	2b01      	cmp	r3, #1
 800196e:	f47f ad54 	bne.w	800141a <main+0x17a>
		  HAL_ADC_Stop_DMA(&hadc2);
 8001972:	481e      	ldr	r0, [pc, #120]	; (80019ec <main+0x74c>)
 8001974:	f003 f9a2 	bl	8004cbc <HAL_ADC_Stop_DMA>
		  current[0]=hall_sens[0];
 8001978:	4b1d      	ldr	r3, [pc, #116]	; (80019f0 <main+0x750>)
 800197a:	881a      	ldrh	r2, [r3, #0]
 800197c:	4b1d      	ldr	r3, [pc, #116]	; (80019f4 <main+0x754>)
 800197e:	801a      	strh	r2, [r3, #0]
		  current[1]=hall_sens[1];
 8001980:	4b1b      	ldr	r3, [pc, #108]	; (80019f0 <main+0x750>)
 8001982:	885a      	ldrh	r2, [r3, #2]
 8001984:	4b1b      	ldr	r3, [pc, #108]	; (80019f4 <main+0x754>)
 8001986:	805a      	strh	r2, [r3, #2]
		  current[2]=hall_sens[2];
 8001988:	4b19      	ldr	r3, [pc, #100]	; (80019f0 <main+0x750>)
 800198a:	889a      	ldrh	r2, [r3, #4]
 800198c:	4b19      	ldr	r3, [pc, #100]	; (80019f4 <main+0x754>)
 800198e:	809a      	strh	r2, [r3, #4]
		  current[3]=hall_sens[3];
 8001990:	4b17      	ldr	r3, [pc, #92]	; (80019f0 <main+0x750>)
 8001992:	88da      	ldrh	r2, [r3, #6]
 8001994:	4b17      	ldr	r3, [pc, #92]	; (80019f4 <main+0x754>)
 8001996:	80da      	strh	r2, [r3, #6]
		  current_dc=hall_sens[4];
 8001998:	4b15      	ldr	r3, [pc, #84]	; (80019f0 <main+0x750>)
 800199a:	891a      	ldrh	r2, [r3, #8]
 800199c:	4b16      	ldr	r3, [pc, #88]	; (80019f8 <main+0x758>)
 800199e:	801a      	strh	r2, [r3, #0]
		  HAL_ADC_Start(&hadc1);
 80019a0:	4816      	ldr	r0, [pc, #88]	; (80019fc <main+0x75c>)
 80019a2:	f002 fe21 	bl	80045e8 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 50);
 80019a6:	2132      	movs	r1, #50	; 0x32
 80019a8:	4814      	ldr	r0, [pc, #80]	; (80019fc <main+0x75c>)
 80019aa:	f002 ff69 	bl	8004880 <HAL_ADC_PollForConversion>
		  voltage_dc=0;
 80019ae:	4b14      	ldr	r3, [pc, #80]	; (8001a00 <main+0x760>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	801a      	strh	r2, [r3, #0]
 80019b4:	e026      	b.n	8001a04 <main+0x764>
 80019b6:	bf00      	nop
 80019b8:	2000072e 	.word	0x2000072e
 80019bc:	20000730 	.word	0x20000730
 80019c0:	2000071a 	.word	0x2000071a
 80019c4:	200008e4 	.word	0x200008e4
 80019c8:	20000719 	.word	0x20000719
 80019cc:	20000747 	.word	0x20000747
 80019d0:	20000745 	.word	0x20000745
 80019d4:	20000744 	.word	0x20000744
 80019d8:	20000746 	.word	0x20000746
 80019dc:	20000720 	.word	0x20000720
 80019e0:	2000072c 	.word	0x2000072c
 80019e4:	20000330 	.word	0x20000330
 80019e8:	20000731 	.word	0x20000731
 80019ec:	2000024c 	.word	0x2000024c
 80019f0:	2000070c 	.word	0x2000070c
 80019f4:	20000704 	.word	0x20000704
 80019f8:	20000748 	.word	0x20000748
 80019fc:	200001fc 	.word	0x200001fc
 8001a00:	2000074a 	.word	0x2000074a
		  voltage_dc=HAL_ADC_GetValue(&hadc1);
 8001a04:	48a8      	ldr	r0, [pc, #672]	; (8001ca8 <main+0xa08>)
 8001a06:	f003 f9bb 	bl	8004d80 <HAL_ADC_GetValue>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	4ba7      	ldr	r3, [pc, #668]	; (8001cac <main+0xa0c>)
 8001a10:	801a      	strh	r2, [r3, #0]
		  HAL_ADC_Stop(&hadc1);
 8001a12:	48a5      	ldr	r0, [pc, #660]	; (8001ca8 <main+0xa08>)
 8001a14:	f002 fefe 	bl	8004814 <HAL_ADC_Stop>
          Adc=(current_dc-3120)/16.5;
 8001a18:	4ba5      	ldr	r3, [pc, #660]	; (8001cb0 <main+0xa10>)
 8001a1a:	881b      	ldrh	r3, [r3, #0]
 8001a1c:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7fe fd7f 	bl	8000524 <__aeabi_i2d>
 8001a26:	f04f 0200 	mov.w	r2, #0
 8001a2a:	4ba2      	ldr	r3, [pc, #648]	; (8001cb4 <main+0xa14>)
 8001a2c:	f7fe ff0e 	bl	800084c <__aeabi_ddiv>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	49a0      	ldr	r1, [pc, #640]	; (8001cb8 <main+0xa18>)
 8001a36:	e9c1 2300 	strd	r2, r3, [r1]
		  Vdc=(voltage_dc*(97.1+2.0)*3.32)/(2.0*4096);
 8001a3a:	4b9c      	ldr	r3, [pc, #624]	; (8001cac <main+0xa0c>)
 8001a3c:	881b      	ldrh	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7fe fd70 	bl	8000524 <__aeabi_i2d>
 8001a44:	a394      	add	r3, pc, #592	; (adr r3, 8001c98 <main+0x9f8>)
 8001a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4a:	f7fe fdd5 	bl	80005f8 <__aeabi_dmul>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	4610      	mov	r0, r2
 8001a54:	4619      	mov	r1, r3
 8001a56:	a392      	add	r3, pc, #584	; (adr r3, 8001ca0 <main+0xa00>)
 8001a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5c:	f7fe fdcc 	bl	80005f8 <__aeabi_dmul>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	4610      	mov	r0, r2
 8001a66:	4619      	mov	r1, r3
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	4b93      	ldr	r3, [pc, #588]	; (8001cbc <main+0xa1c>)
 8001a6e:	f7fe feed 	bl	800084c <__aeabi_ddiv>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	4992      	ldr	r1, [pc, #584]	; (8001cc0 <main+0xa20>)
 8001a78:	e9c1 2300 	strd	r2, r3, [r1]
		 	  		//  ADC_read_1();
		 	  		//  ADC_read_12();
		 	  	 	 HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	4991      	ldr	r1, [pc, #580]	; (8001cc4 <main+0xa24>)
 8001a80:	4891      	ldr	r0, [pc, #580]	; (8001cc8 <main+0xa28>)
 8001a82:	f007 fab0 	bl	8008fe6 <HAL_RTC_GetTime>

		 	  data_reg[0]=current[0];
 8001a86:	4b91      	ldr	r3, [pc, #580]	; (8001ccc <main+0xa2c>)
 8001a88:	881a      	ldrh	r2, [r3, #0]
 8001a8a:	4b91      	ldr	r3, [pc, #580]	; (8001cd0 <main+0xa30>)
 8001a8c:	801a      	strh	r2, [r3, #0]
		 	  data_reg[1]=current[1];
 8001a8e:	4b8f      	ldr	r3, [pc, #572]	; (8001ccc <main+0xa2c>)
 8001a90:	885a      	ldrh	r2, [r3, #2]
 8001a92:	4b8f      	ldr	r3, [pc, #572]	; (8001cd0 <main+0xa30>)
 8001a94:	805a      	strh	r2, [r3, #2]
		 	  data_reg[2]=current[2];
 8001a96:	4b8d      	ldr	r3, [pc, #564]	; (8001ccc <main+0xa2c>)
 8001a98:	889a      	ldrh	r2, [r3, #4]
 8001a9a:	4b8d      	ldr	r3, [pc, #564]	; (8001cd0 <main+0xa30>)
 8001a9c:	809a      	strh	r2, [r3, #4]
		 	  data_reg[3]=current[3];
 8001a9e:	4b8b      	ldr	r3, [pc, #556]	; (8001ccc <main+0xa2c>)
 8001aa0:	88da      	ldrh	r2, [r3, #6]
 8001aa2:	4b8b      	ldr	r3, [pc, #556]	; (8001cd0 <main+0xa30>)
 8001aa4:	80da      	strh	r2, [r3, #6]
		 	  data_reg[4]=pwm[0];
 8001aa6:	4b8b      	ldr	r3, [pc, #556]	; (8001cd4 <main+0xa34>)
 8001aa8:	881a      	ldrh	r2, [r3, #0]
 8001aaa:	4b89      	ldr	r3, [pc, #548]	; (8001cd0 <main+0xa30>)
 8001aac:	811a      	strh	r2, [r3, #8]
		 	  data_reg[5]=pwm[1];
 8001aae:	4b89      	ldr	r3, [pc, #548]	; (8001cd4 <main+0xa34>)
 8001ab0:	885a      	ldrh	r2, [r3, #2]
 8001ab2:	4b87      	ldr	r3, [pc, #540]	; (8001cd0 <main+0xa30>)
 8001ab4:	815a      	strh	r2, [r3, #10]
		 	  data_reg[6]=pwm[2];
 8001ab6:	4b87      	ldr	r3, [pc, #540]	; (8001cd4 <main+0xa34>)
 8001ab8:	889a      	ldrh	r2, [r3, #4]
 8001aba:	4b85      	ldr	r3, [pc, #532]	; (8001cd0 <main+0xa30>)
 8001abc:	819a      	strh	r2, [r3, #12]
		 	  data_reg[7]=pwm[3];
 8001abe:	4b85      	ldr	r3, [pc, #532]	; (8001cd4 <main+0xa34>)
 8001ac0:	88da      	ldrh	r2, [r3, #6]
 8001ac2:	4b83      	ldr	r3, [pc, #524]	; (8001cd0 <main+0xa30>)
 8001ac4:	81da      	strh	r2, [r3, #14]
		 	  data_reg[8]=rpm;
 8001ac6:	4b84      	ldr	r3, [pc, #528]	; (8001cd8 <main+0xa38>)
 8001ac8:	881a      	ldrh	r2, [r3, #0]
 8001aca:	4b81      	ldr	r3, [pc, #516]	; (8001cd0 <main+0xa30>)
 8001acc:	821a      	strh	r2, [r3, #16]
		 	  data_reg[9]=f;
 8001ace:	4b83      	ldr	r3, [pc, #524]	; (8001cdc <main+0xa3c>)
 8001ad0:	881a      	ldrh	r2, [r3, #0]
 8001ad2:	4b7f      	ldr	r3, [pc, #508]	; (8001cd0 <main+0xa30>)
 8001ad4:	825a      	strh	r2, [r3, #18]
		 	  data_reg[10]=limit;
 8001ad6:	4b82      	ldr	r3, [pc, #520]	; (8001ce0 <main+0xa40>)
 8001ad8:	881a      	ldrh	r2, [r3, #0]
 8001ada:	4b7d      	ldr	r3, [pc, #500]	; (8001cd0 <main+0xa30>)
 8001adc:	829a      	strh	r2, [r3, #20]
		 	  data_reg[11]=SLAVE_ID;
 8001ade:	4b81      	ldr	r3, [pc, #516]	; (8001ce4 <main+0xa44>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	4b7a      	ldr	r3, [pc, #488]	; (8001cd0 <main+0xa30>)
 8001ae6:	82da      	strh	r2, [r3, #22]
		 	  data_reg[12]=voltage_dc;
 8001ae8:	4b70      	ldr	r3, [pc, #448]	; (8001cac <main+0xa0c>)
 8001aea:	881a      	ldrh	r2, [r3, #0]
 8001aec:	4b78      	ldr	r3, [pc, #480]	; (8001cd0 <main+0xa30>)
 8001aee:	831a      	strh	r2, [r3, #24]
		 	  data_reg[13]=current_dc;//=hall_sens[5];
 8001af0:	4b6f      	ldr	r3, [pc, #444]	; (8001cb0 <main+0xa10>)
 8001af2:	881a      	ldrh	r2, [r3, #0]
 8001af4:	4b76      	ldr	r3, [pc, #472]	; (8001cd0 <main+0xa30>)
 8001af6:	835a      	strh	r2, [r3, #26]
		 	  data_reg[14]=(sTime.Hours<<8)|(sTime.Minutes);
 8001af8:	4b72      	ldr	r3, [pc, #456]	; (8001cc4 <main+0xa24>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	021b      	lsls	r3, r3, #8
 8001afe:	b21a      	sxth	r2, r3
 8001b00:	4b70      	ldr	r3, [pc, #448]	; (8001cc4 <main+0xa24>)
 8001b02:	785b      	ldrb	r3, [r3, #1]
 8001b04:	b21b      	sxth	r3, r3
 8001b06:	4313      	orrs	r3, r2
 8001b08:	b21b      	sxth	r3, r3
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	4b70      	ldr	r3, [pc, #448]	; (8001cd0 <main+0xa30>)
 8001b0e:	839a      	strh	r2, [r3, #28]
		      data_reg[15]=sTime.Seconds;
 8001b10:	4b6c      	ldr	r3, [pc, #432]	; (8001cc4 <main+0xa24>)
 8001b12:	789b      	ldrb	r3, [r3, #2]
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	4b6e      	ldr	r3, [pc, #440]	; (8001cd0 <main+0xa30>)
 8001b18:	83da      	strh	r2, [r3, #30]


		 	  	  if((lcd_status==0)&&(lcd_update==1)){lcd_init();HAL_Delay(100);lcd_clear();lcd_update=0;}
 8001b1a:	4b73      	ldr	r3, [pc, #460]	; (8001ce8 <main+0xa48>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	f083 0301 	eor.w	r3, r3, #1
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d00d      	beq.n	8001b44 <main+0x8a4>
 8001b28:	4b70      	ldr	r3, [pc, #448]	; (8001cec <main+0xa4c>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d109      	bne.n	8001b44 <main+0x8a4>
 8001b30:	f7ff f931 	bl	8000d96 <lcd_init>
 8001b34:	2064      	movs	r0, #100	; 0x64
 8001b36:	f002 fb35 	bl	80041a4 <HAL_Delay>
 8001b3a:	f7ff f9a7 	bl	8000e8c <lcd_clear>
 8001b3e:	4b6b      	ldr	r3, [pc, #428]	; (8001cec <main+0xa4c>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	701a      	strb	r2, [r3, #0]
		 	  	  if((lcd_status==1)&&(lcd_update==1)){lcd_init();lcd_clear();lcd_update=0;}
 8001b44:	4b68      	ldr	r3, [pc, #416]	; (8001ce8 <main+0xa48>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d00a      	beq.n	8001b62 <main+0x8c2>
 8001b4c:	4b67      	ldr	r3, [pc, #412]	; (8001cec <main+0xa4c>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d106      	bne.n	8001b62 <main+0x8c2>
 8001b54:	f7ff f91f 	bl	8000d96 <lcd_init>
 8001b58:	f7ff f998 	bl	8000e8c <lcd_clear>
 8001b5c:	4b63      	ldr	r3, [pc, #396]	; (8001cec <main+0xa4c>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	701a      	strb	r2, [r3, #0]

		 	  	  if(lcd_status==1){
 8001b62:	4b61      	ldr	r3, [pc, #388]	; (8001ce8 <main+0xa48>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f000 8234 	beq.w	8001fd4 <main+0xd34>
		 	  		 adc_count++;
 8001b6c:	4b60      	ldr	r3, [pc, #384]	; (8001cf0 <main+0xa50>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	3301      	adds	r3, #1
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	4b5e      	ldr	r3, [pc, #376]	; (8001cf0 <main+0xa50>)
 8001b76:	701a      	strb	r2, [r3, #0]

		 	  if(page_flag==1){lcd_clear();page_flag=0;}
 8001b78:	4b5e      	ldr	r3, [pc, #376]	; (8001cf4 <main+0xa54>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d104      	bne.n	8001b8a <main+0x8ea>
 8001b80:	f7ff f984 	bl	8000e8c <lcd_clear>
 8001b84:	4b5b      	ldr	r3, [pc, #364]	; (8001cf4 <main+0xa54>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	701a      	strb	r2, [r3, #0]
		 	  	  if((page_num==0)&&(adc_count==20)){
 8001b8a:	4b5b      	ldr	r3, [pc, #364]	; (8001cf8 <main+0xa58>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d154      	bne.n	8001c3c <main+0x99c>
 8001b92:	4b57      	ldr	r3, [pc, #348]	; (8001cf0 <main+0xa50>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	2b14      	cmp	r3, #20
 8001b98:	d150      	bne.n	8001c3c <main+0x99c>


				 	  		sprintf(int_to_str, "RPM-%05d t/min     ",rpm);
 8001b9a:	4b4f      	ldr	r3, [pc, #316]	; (8001cd8 <main+0xa38>)
 8001b9c:	881b      	ldrh	r3, [r3, #0]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	f107 030c 	add.w	r3, r7, #12
 8001ba4:	4955      	ldr	r1, [pc, #340]	; (8001cfc <main+0xa5c>)
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f00b fb96 	bl	800d2d8 <siprintf>
				 	  		lcd_set_cursor(1, 0);
 8001bac:	2100      	movs	r1, #0
 8001bae:	2001      	movs	r0, #1
 8001bb0:	f7ff f936 	bl	8000e20 <lcd_set_cursor>
				 	  	    lcd_write_string(int_to_str);
 8001bb4:	f107 030c 	add.w	r3, r7, #12
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff f91b 	bl	8000df4 <lcd_write_string>

				 	  	    sprintf(int_to_str, "PWM_CMD-%05d/%03d%% ",pwm_cmd,pwm_cmd/20);
 8001bbe:	4b50      	ldr	r3, [pc, #320]	; (8001d00 <main+0xa60>)
 8001bc0:	881b      	ldrh	r3, [r3, #0]
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4b4e      	ldr	r3, [pc, #312]	; (8001d00 <main+0xa60>)
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	4a4d      	ldr	r2, [pc, #308]	; (8001d04 <main+0xa64>)
 8001bce:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd2:	091b      	lsrs	r3, r3, #4
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	f107 000c 	add.w	r0, r7, #12
 8001bda:	460a      	mov	r2, r1
 8001bdc:	494a      	ldr	r1, [pc, #296]	; (8001d08 <main+0xa68>)
 8001bde:	f00b fb7b 	bl	800d2d8 <siprintf>
				 	  	 	lcd_set_cursor(2, 0);
 8001be2:	2100      	movs	r1, #0
 8001be4:	2002      	movs	r0, #2
 8001be6:	f7ff f91b 	bl	8000e20 <lcd_set_cursor>
				 	  	 	lcd_write_string(int_to_str);
 8001bea:	f107 030c 	add.w	r3, r7, #12
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff f900 	bl	8000df4 <lcd_write_string>

				 	  	    sprintf(int_to_str, "ADC_avg-%05d ",current_avg);
 8001bf4:	4b45      	ldr	r3, [pc, #276]	; (8001d0c <main+0xa6c>)
 8001bf6:	881b      	ldrh	r3, [r3, #0]
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	f107 030c 	add.w	r3, r7, #12
 8001bfe:	4944      	ldr	r1, [pc, #272]	; (8001d10 <main+0xa70>)
 8001c00:	4618      	mov	r0, r3
 8001c02:	f00b fb69 	bl	800d2d8 <siprintf>
				 	  	 	lcd_set_cursor(3, 0);
 8001c06:	2100      	movs	r1, #0
 8001c08:	2003      	movs	r0, #3
 8001c0a:	f7ff f909 	bl	8000e20 <lcd_set_cursor>
				 	  	 	lcd_write_string(int_to_str);
 8001c0e:	f107 030c 	add.w	r3, r7, #12
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff f8ee 	bl	8000df4 <lcd_write_string>

				 	    	sprintf(int_to_str, "F=%05dHz ",f);
 8001c18:	4b30      	ldr	r3, [pc, #192]	; (8001cdc <main+0xa3c>)
 8001c1a:	881b      	ldrh	r3, [r3, #0]
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	f107 030c 	add.w	r3, r7, #12
 8001c22:	493c      	ldr	r1, [pc, #240]	; (8001d14 <main+0xa74>)
 8001c24:	4618      	mov	r0, r3
 8001c26:	f00b fb57 	bl	800d2d8 <siprintf>
				 	  	 	lcd_set_cursor(4, 0);
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	2004      	movs	r0, #4
 8001c2e:	f7ff f8f7 	bl	8000e20 <lcd_set_cursor>
				 	  	 	lcd_write_string(int_to_str);	  }
 8001c32:	f107 030c 	add.w	r3, r7, #12
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff f8dc 	bl	8000df4 <lcd_write_string>

		 	  	  if((page_num==2)&&(adc_count==22)){
 8001c3c:	4b2e      	ldr	r3, [pc, #184]	; (8001cf8 <main+0xa58>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	f040 80bc 	bne.w	8001dbe <main+0xb1e>
 8001c46:	4b2a      	ldr	r3, [pc, #168]	; (8001cf0 <main+0xa50>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	2b16      	cmp	r3, #22
 8001c4c:	f040 80b7 	bne.w	8001dbe <main+0xb1e>

		 	  		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001c50:	2200      	movs	r2, #0
 8001c52:	491c      	ldr	r1, [pc, #112]	; (8001cc4 <main+0xa24>)
 8001c54:	481c      	ldr	r0, [pc, #112]	; (8001cc8 <main+0xa28>)
 8001c56:	f007 f9c6 	bl	8008fe6 <HAL_RTC_GetTime>
		 	  	    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	492e      	ldr	r1, [pc, #184]	; (8001d18 <main+0xa78>)
 8001c5e:	481a      	ldr	r0, [pc, #104]	; (8001cc8 <main+0xa28>)
 8001c60:	f007 faa3 	bl	80091aa <HAL_RTC_GetDate>

		 	  	                            sprintf(int_to_str, "START_TIME:%02d:%02d:%02d",hour,min,sec);
 8001c64:	4b2d      	ldr	r3, [pc, #180]	; (8001d1c <main+0xa7c>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4b2d      	ldr	r3, [pc, #180]	; (8001d20 <main+0xa80>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4b2c      	ldr	r3, [pc, #176]	; (8001d24 <main+0xa84>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	f107 000c 	add.w	r0, r7, #12
 8001c78:	9300      	str	r3, [sp, #0]
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	492a      	ldr	r1, [pc, #168]	; (8001d28 <main+0xa88>)
 8001c7e:	f00b fb2b 	bl	800d2d8 <siprintf>
		 	  			 	  				lcd_set_cursor(1, 0);
 8001c82:	2100      	movs	r1, #0
 8001c84:	2001      	movs	r0, #1
 8001c86:	f7ff f8cb 	bl	8000e20 <lcd_set_cursor>
		 	  			 	  			    lcd_write_string(int_to_str);
 8001c8a:	f107 030c 	add.w	r3, r7, #12
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff f8b0 	bl	8000df4 <lcd_write_string>
 8001c94:	e04a      	b.n	8001d2c <main+0xa8c>
 8001c96:	bf00      	nop
 8001c98:	66666666 	.word	0x66666666
 8001c9c:	4058c666 	.word	0x4058c666
 8001ca0:	28f5c28f 	.word	0x28f5c28f
 8001ca4:	400a8f5c 	.word	0x400a8f5c
 8001ca8:	200001fc 	.word	0x200001fc
 8001cac:	2000074a 	.word	0x2000074a
 8001cb0:	20000748 	.word	0x20000748
 8001cb4:	40308000 	.word	0x40308000
 8001cb8:	20000758 	.word	0x20000758
 8001cbc:	40c00000 	.word	0x40c00000
 8001cc0:	20000750 	.word	0x20000750
 8001cc4:	200008e8 	.word	0x200008e8
 8001cc8:	20000384 	.word	0x20000384
 8001ccc:	20000704 	.word	0x20000704
 8001cd0:	20000880 	.word	0x20000880
 8001cd4:	20000000 	.word	0x20000000
 8001cd8:	2000073a 	.word	0x2000073a
 8001cdc:	2000073c 	.word	0x2000073c
 8001ce0:	20000008 	.word	0x20000008
 8001ce4:	2000000b 	.word	0x2000000b
 8001ce8:	20000716 	.word	0x20000716
 8001cec:	20000717 	.word	0x20000717
 8001cf0:	2000073e 	.word	0x2000073e
 8001cf4:	20000740 	.word	0x20000740
 8001cf8:	2000073f 	.word	0x2000073f
 8001cfc:	0800f5ac 	.word	0x0800f5ac
 8001d00:	2000072e 	.word	0x2000072e
 8001d04:	cccccccd 	.word	0xcccccccd
 8001d08:	0800f5c0 	.word	0x0800f5c0
 8001d0c:	20000742 	.word	0x20000742
 8001d10:	0800f5d8 	.word	0x0800f5d8
 8001d14:	0800f5e8 	.word	0x0800f5e8
 8001d18:	200008fc 	.word	0x200008fc
 8001d1c:	20000745 	.word	0x20000745
 8001d20:	20000744 	.word	0x20000744
 8001d24:	20000746 	.word	0x20000746
 8001d28:	0800f5f4 	.word	0x0800f5f4

		 	  					 	  		sprintf(int_to_str, "TIME:%02d:%02d:%02d",sTime.Hours,sTime.Minutes,sTime.Seconds);
 8001d2c:	4bb7      	ldr	r3, [pc, #732]	; (800200c <main+0xd6c>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	461a      	mov	r2, r3
 8001d32:	4bb6      	ldr	r3, [pc, #728]	; (800200c <main+0xd6c>)
 8001d34:	785b      	ldrb	r3, [r3, #1]
 8001d36:	4619      	mov	r1, r3
 8001d38:	4bb4      	ldr	r3, [pc, #720]	; (800200c <main+0xd6c>)
 8001d3a:	789b      	ldrb	r3, [r3, #2]
 8001d3c:	f107 000c 	add.w	r0, r7, #12
 8001d40:	9300      	str	r3, [sp, #0]
 8001d42:	460b      	mov	r3, r1
 8001d44:	49b2      	ldr	r1, [pc, #712]	; (8002010 <main+0xd70>)
 8001d46:	f00b fac7 	bl	800d2d8 <siprintf>
		 	  					 	  		lcd_set_cursor(2, 0);
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	2002      	movs	r0, #2
 8001d4e:	f7ff f867 	bl	8000e20 <lcd_set_cursor>
		 	  					 	  	    lcd_write_string(int_to_str);
 8001d52:	f107 030c 	add.w	r3, r7, #12
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff f84c 	bl	8000df4 <lcd_write_string>


		 	  					 	  		sprintf(int_to_str, "Pdc %4.2f",(Vdc*Adc));
 8001d5c:	4bad      	ldr	r3, [pc, #692]	; (8002014 <main+0xd74>)
 8001d5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d62:	4bad      	ldr	r3, [pc, #692]	; (8002018 <main+0xd78>)
 8001d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d68:	f7fe fc46 	bl	80005f8 <__aeabi_dmul>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	f107 000c 	add.w	r0, r7, #12
 8001d74:	49a9      	ldr	r1, [pc, #676]	; (800201c <main+0xd7c>)
 8001d76:	f00b faaf 	bl	800d2d8 <siprintf>
		 	  					 	  		lcd_set_cursor(3, 0);
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	2003      	movs	r0, #3
 8001d7e:	f7ff f84f 	bl	8000e20 <lcd_set_cursor>
		 	  					 	  	    lcd_write_string(int_to_str);
 8001d82:	f107 030c 	add.w	r3, r7, #12
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff f834 	bl	8000df4 <lcd_write_string>

		 	  					 	     	sprintf(int_to_str, "Vdc %4.2f Adc %4.2f",Vdc,Adc);
 8001d8c:	4ba1      	ldr	r3, [pc, #644]	; (8002014 <main+0xd74>)
 8001d8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d92:	4ba1      	ldr	r3, [pc, #644]	; (8002018 <main+0xd78>)
 8001d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d98:	f107 040c 	add.w	r4, r7, #12
 8001d9c:	e9cd 2300 	strd	r2, r3, [sp]
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	499e      	ldr	r1, [pc, #632]	; (8002020 <main+0xd80>)
 8001da6:	4620      	mov	r0, r4
 8001da8:	f00b fa96 	bl	800d2d8 <siprintf>
		 	  					 	  	    lcd_set_cursor(4, 0);
 8001dac:	2100      	movs	r1, #0
 8001dae:	2004      	movs	r0, #4
 8001db0:	f7ff f836 	bl	8000e20 <lcd_set_cursor>
		 	  					 	  	    lcd_write_string(int_to_str);
 8001db4:	f107 030c 	add.w	r3, r7, #12
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff f81b 	bl	8000df4 <lcd_write_string>


		 	  	  }

		 	  	  if((page_num==3)&&(adc_count==24)){
 8001dbe:	4b99      	ldr	r3, [pc, #612]	; (8002024 <main+0xd84>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	2b03      	cmp	r3, #3
 8001dc4:	d14e      	bne.n	8001e64 <main+0xbc4>
 8001dc6:	4b98      	ldr	r3, [pc, #608]	; (8002028 <main+0xd88>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	2b18      	cmp	r3, #24
 8001dcc:	d14a      	bne.n	8001e64 <main+0xbc4>


		 	  		 sprintf(int_to_str, "ADCv:%04d ADCa:%04d ",voltage_dc,current_dc);
 8001dce:	4b97      	ldr	r3, [pc, #604]	; (800202c <main+0xd8c>)
 8001dd0:	881b      	ldrh	r3, [r3, #0]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	4b96      	ldr	r3, [pc, #600]	; (8002030 <main+0xd90>)
 8001dd6:	881b      	ldrh	r3, [r3, #0]
 8001dd8:	f107 000c 	add.w	r0, r7, #12
 8001ddc:	4995      	ldr	r1, [pc, #596]	; (8002034 <main+0xd94>)
 8001dde:	f00b fa7b 	bl	800d2d8 <siprintf>
		 	  		 lcd_set_cursor(1, 0);
 8001de2:	2100      	movs	r1, #0
 8001de4:	2001      	movs	r0, #1
 8001de6:	f7ff f81b 	bl	8000e20 <lcd_set_cursor>
		 	  		 lcd_write_string(int_to_str);
 8001dea:	f107 030c 	add.w	r3, r7, #12
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff f800 	bl	8000df4 <lcd_write_string>

		 	  		sprintf(int_to_str, "Wh %4.2f Pdc %4.2f",Pdc,(Vdc*Adc));
 8001df4:	4b90      	ldr	r3, [pc, #576]	; (8002038 <main+0xd98>)
 8001df6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001dfa:	4b86      	ldr	r3, [pc, #536]	; (8002014 <main+0xd74>)
 8001dfc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e00:	4b85      	ldr	r3, [pc, #532]	; (8002018 <main+0xd78>)
 8001e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e06:	f7fe fbf7 	bl	80005f8 <__aeabi_dmul>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	f107 000c 	add.w	r0, r7, #12
 8001e12:	e9cd 2300 	strd	r2, r3, [sp]
 8001e16:	4622      	mov	r2, r4
 8001e18:	462b      	mov	r3, r5
 8001e1a:	4988      	ldr	r1, [pc, #544]	; (800203c <main+0xd9c>)
 8001e1c:	f00b fa5c 	bl	800d2d8 <siprintf>
		 	  		lcd_set_cursor(3, 0);
 8001e20:	2100      	movs	r1, #0
 8001e22:	2003      	movs	r0, #3
 8001e24:	f7fe fffc 	bl	8000e20 <lcd_set_cursor>
		 	  		lcd_write_string(int_to_str);
 8001e28:	f107 030c 	add.w	r3, r7, #12
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7fe ffe1 	bl	8000df4 <lcd_write_string>

		 	  	    sprintf(int_to_str, "Vdc %4.2f Adc %4.2f",Vdc,Adc);
 8001e32:	4b78      	ldr	r3, [pc, #480]	; (8002014 <main+0xd74>)
 8001e34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e38:	4b77      	ldr	r3, [pc, #476]	; (8002018 <main+0xd78>)
 8001e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3e:	f107 040c 	add.w	r4, r7, #12
 8001e42:	e9cd 2300 	strd	r2, r3, [sp]
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	4975      	ldr	r1, [pc, #468]	; (8002020 <main+0xd80>)
 8001e4c:	4620      	mov	r0, r4
 8001e4e:	f00b fa43 	bl	800d2d8 <siprintf>
		 	  	    lcd_set_cursor(4, 0);
 8001e52:	2100      	movs	r1, #0
 8001e54:	2004      	movs	r0, #4
 8001e56:	f7fe ffe3 	bl	8000e20 <lcd_set_cursor>
		 	  		lcd_write_string(int_to_str);
 8001e5a:	f107 030c 	add.w	r3, r7, #12
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7fe ffc8 	bl	8000df4 <lcd_write_string>


		 	  			 	  	  }


		 	  	  if(page_num==1){
 8001e64:	4b6f      	ldr	r3, [pc, #444]	; (8002024 <main+0xd84>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	f040 80b3 	bne.w	8001fd4 <main+0xd34>
		 	  	                 	if(adc_count==18){
 8001e6e:	4b6e      	ldr	r3, [pc, #440]	; (8002028 <main+0xd88>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b12      	cmp	r3, #18
 8001e74:	d15f      	bne.n	8001f36 <main+0xc96>

		 	  				 	  		sprintf(int_to_str, "PWM-%02d%%/%04d",pwm[0]/20,pwm[0]);
 8001e76:	4b72      	ldr	r3, [pc, #456]	; (8002040 <main+0xda0>)
 8001e78:	881b      	ldrh	r3, [r3, #0]
 8001e7a:	4a72      	ldr	r2, [pc, #456]	; (8002044 <main+0xda4>)
 8001e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e80:	091b      	lsrs	r3, r3, #4
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	461a      	mov	r2, r3
 8001e86:	4b6e      	ldr	r3, [pc, #440]	; (8002040 <main+0xda0>)
 8001e88:	881b      	ldrh	r3, [r3, #0]
 8001e8a:	f107 000c 	add.w	r0, r7, #12
 8001e8e:	496e      	ldr	r1, [pc, #440]	; (8002048 <main+0xda8>)
 8001e90:	f00b fa22 	bl	800d2d8 <siprintf>
		 	  				 	  		lcd_set_cursor(1, 0);
 8001e94:	2100      	movs	r1, #0
 8001e96:	2001      	movs	r0, #1
 8001e98:	f7fe ffc2 	bl	8000e20 <lcd_set_cursor>
		 	  				 	  	    lcd_write_string(int_to_str);
 8001e9c:	f107 030c 	add.w	r3, r7, #12
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7fe ffa7 	bl	8000df4 <lcd_write_string>

		 	  				 	     	sprintf(int_to_str, "PWM-%02d%%/%04d",pwm[1]/20,pwm[1]);
 8001ea6:	4b66      	ldr	r3, [pc, #408]	; (8002040 <main+0xda0>)
 8001ea8:	885b      	ldrh	r3, [r3, #2]
 8001eaa:	4a66      	ldr	r2, [pc, #408]	; (8002044 <main+0xda4>)
 8001eac:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb0:	091b      	lsrs	r3, r3, #4
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4b62      	ldr	r3, [pc, #392]	; (8002040 <main+0xda0>)
 8001eb8:	885b      	ldrh	r3, [r3, #2]
 8001eba:	f107 000c 	add.w	r0, r7, #12
 8001ebe:	4962      	ldr	r1, [pc, #392]	; (8002048 <main+0xda8>)
 8001ec0:	f00b fa0a 	bl	800d2d8 <siprintf>
		 	  				 	  	    lcd_set_cursor(2, 0);
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	2002      	movs	r0, #2
 8001ec8:	f7fe ffaa 	bl	8000e20 <lcd_set_cursor>
		 	  				 	  	    lcd_write_string(int_to_str);
 8001ecc:	f107 030c 	add.w	r3, r7, #12
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7fe ff8f 	bl	8000df4 <lcd_write_string>

		 	  				 	  	    sprintf(int_to_str, "PWM-%02d%%/%04d",pwm[2]/20,pwm[2]);
 8001ed6:	4b5a      	ldr	r3, [pc, #360]	; (8002040 <main+0xda0>)
 8001ed8:	889b      	ldrh	r3, [r3, #4]
 8001eda:	4a5a      	ldr	r2, [pc, #360]	; (8002044 <main+0xda4>)
 8001edc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee0:	091b      	lsrs	r3, r3, #4
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	4b56      	ldr	r3, [pc, #344]	; (8002040 <main+0xda0>)
 8001ee8:	889b      	ldrh	r3, [r3, #4]
 8001eea:	f107 000c 	add.w	r0, r7, #12
 8001eee:	4956      	ldr	r1, [pc, #344]	; (8002048 <main+0xda8>)
 8001ef0:	f00b f9f2 	bl	800d2d8 <siprintf>
		 	  				 	  	    lcd_set_cursor(3, 0);
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	2003      	movs	r0, #3
 8001ef8:	f7fe ff92 	bl	8000e20 <lcd_set_cursor>
		 	  				 	  		lcd_write_string(int_to_str);
 8001efc:	f107 030c 	add.w	r3, r7, #12
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7fe ff77 	bl	8000df4 <lcd_write_string>

		 	  				 	    	sprintf(int_to_str, "PWM-%02d%%/%04d",pwm[3]/20,pwm[3]);
 8001f06:	4b4e      	ldr	r3, [pc, #312]	; (8002040 <main+0xda0>)
 8001f08:	88db      	ldrh	r3, [r3, #6]
 8001f0a:	4a4e      	ldr	r2, [pc, #312]	; (8002044 <main+0xda4>)
 8001f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f10:	091b      	lsrs	r3, r3, #4
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	461a      	mov	r2, r3
 8001f16:	4b4a      	ldr	r3, [pc, #296]	; (8002040 <main+0xda0>)
 8001f18:	88db      	ldrh	r3, [r3, #6]
 8001f1a:	f107 000c 	add.w	r0, r7, #12
 8001f1e:	494a      	ldr	r1, [pc, #296]	; (8002048 <main+0xda8>)
 8001f20:	f00b f9da 	bl	800d2d8 <siprintf>
		 	  				 	  	    lcd_set_cursor(4, 0);
 8001f24:	2100      	movs	r1, #0
 8001f26:	2004      	movs	r0, #4
 8001f28:	f7fe ff7a 	bl	8000e20 <lcd_set_cursor>
		 	  				 	  		lcd_write_string(int_to_str);
 8001f2c:	f107 030c 	add.w	r3, r7, #12
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7fe ff5f 	bl	8000df4 <lcd_write_string>

		 	  				 	  		}

		 	  		if(adc_count>=180){
 8001f36:	4b3c      	ldr	r3, [pc, #240]	; (8002028 <main+0xd88>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	2bb3      	cmp	r3, #179	; 0xb3
 8001f3c:	d94a      	bls.n	8001fd4 <main+0xd34>


		 	  			sprintf(int_to_str, "Adc%03d",current[0]);
 8001f3e:	4b43      	ldr	r3, [pc, #268]	; (800204c <main+0xdac>)
 8001f40:	881b      	ldrh	r3, [r3, #0]
 8001f42:	461a      	mov	r2, r3
 8001f44:	f107 030c 	add.w	r3, r7, #12
 8001f48:	4941      	ldr	r1, [pc, #260]	; (8002050 <main+0xdb0>)
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f00b f9c4 	bl	800d2d8 <siprintf>
		 	  			lcd_set_cursor(1, 13);
 8001f50:	210d      	movs	r1, #13
 8001f52:	2001      	movs	r0, #1
 8001f54:	f7fe ff64 	bl	8000e20 <lcd_set_cursor>
		 	  		    lcd_write_string(int_to_str);
 8001f58:	f107 030c 	add.w	r3, r7, #12
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7fe ff49 	bl	8000df4 <lcd_write_string>

		 	  		    sprintf(int_to_str, "Adc%03d",current[1]);
 8001f62:	4b3a      	ldr	r3, [pc, #232]	; (800204c <main+0xdac>)
 8001f64:	885b      	ldrh	r3, [r3, #2]
 8001f66:	461a      	mov	r2, r3
 8001f68:	f107 030c 	add.w	r3, r7, #12
 8001f6c:	4938      	ldr	r1, [pc, #224]	; (8002050 <main+0xdb0>)
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f00b f9b2 	bl	800d2d8 <siprintf>
		 	  		 	lcd_set_cursor(2, 13);
 8001f74:	210d      	movs	r1, #13
 8001f76:	2002      	movs	r0, #2
 8001f78:	f7fe ff52 	bl	8000e20 <lcd_set_cursor>
		 	  		    lcd_write_string(int_to_str);
 8001f7c:	f107 030c 	add.w	r3, r7, #12
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7fe ff37 	bl	8000df4 <lcd_write_string>

		 	  		    sprintf(int_to_str, "Adc%03d",current[2]);
 8001f86:	4b31      	ldr	r3, [pc, #196]	; (800204c <main+0xdac>)
 8001f88:	889b      	ldrh	r3, [r3, #4]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	f107 030c 	add.w	r3, r7, #12
 8001f90:	492f      	ldr	r1, [pc, #188]	; (8002050 <main+0xdb0>)
 8001f92:	4618      	mov	r0, r3
 8001f94:	f00b f9a0 	bl	800d2d8 <siprintf>
		 	  		    lcd_set_cursor(3, 13);
 8001f98:	210d      	movs	r1, #13
 8001f9a:	2003      	movs	r0, #3
 8001f9c:	f7fe ff40 	bl	8000e20 <lcd_set_cursor>
		 	  		    lcd_write_string(int_to_str);
 8001fa0:	f107 030c 	add.w	r3, r7, #12
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7fe ff25 	bl	8000df4 <lcd_write_string>

		 	  	        sprintf(int_to_str, "Adc%03d",current[3]);
 8001faa:	4b28      	ldr	r3, [pc, #160]	; (800204c <main+0xdac>)
 8001fac:	88db      	ldrh	r3, [r3, #6]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	f107 030c 	add.w	r3, r7, #12
 8001fb4:	4926      	ldr	r1, [pc, #152]	; (8002050 <main+0xdb0>)
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f00b f98e 	bl	800d2d8 <siprintf>
		 	  	 		lcd_set_cursor(4, 13);
 8001fbc:	210d      	movs	r1, #13
 8001fbe:	2004      	movs	r0, #4
 8001fc0:	f7fe ff2e 	bl	8000e20 <lcd_set_cursor>
		 	  	 		lcd_write_string(int_to_str);
 8001fc4:	f107 030c 	add.w	r3, r7, #12
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7fe ff13 	bl	8000df4 <lcd_write_string>

		 	  	    adc_count=0;
 8001fce:	4b16      	ldr	r3, [pc, #88]	; (8002028 <main+0xd88>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	701a      	strb	r2, [r3, #0]





	     PWM_correction();
 8001fd4:	f7fe fde8 	bl	8000ba8 <PWM_correction>
	  	 TIM1->CCR1=pwm[0];
 8001fd8:	4b19      	ldr	r3, [pc, #100]	; (8002040 <main+0xda0>)
 8001fda:	881a      	ldrh	r2, [r3, #0]
 8001fdc:	4b1d      	ldr	r3, [pc, #116]	; (8002054 <main+0xdb4>)
 8001fde:	635a      	str	r2, [r3, #52]	; 0x34
	  	 TIM1->CCR2=pwm[1];
 8001fe0:	4b17      	ldr	r3, [pc, #92]	; (8002040 <main+0xda0>)
 8001fe2:	885a      	ldrh	r2, [r3, #2]
 8001fe4:	4b1b      	ldr	r3, [pc, #108]	; (8002054 <main+0xdb4>)
 8001fe6:	639a      	str	r2, [r3, #56]	; 0x38
	  	 TIM8->CCR1=pwm[2];
 8001fe8:	4b15      	ldr	r3, [pc, #84]	; (8002040 <main+0xda0>)
 8001fea:	889a      	ldrh	r2, [r3, #4]
 8001fec:	4b1a      	ldr	r3, [pc, #104]	; (8002058 <main+0xdb8>)
 8001fee:	635a      	str	r2, [r3, #52]	; 0x34
	  	 TIM15->CCR1=pwm[3];
 8001ff0:	4b13      	ldr	r3, [pc, #76]	; (8002040 <main+0xda0>)
 8001ff2:	88da      	ldrh	r2, [r3, #6]
 8001ff4:	4b19      	ldr	r3, [pc, #100]	; (800205c <main+0xdbc>)
 8001ff6:	635a      	str	r2, [r3, #52]	; 0x34
	  	 flag=0;
 8001ff8:	4b19      	ldr	r3, [pc, #100]	; (8002060 <main+0xdc0>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	701a      	strb	r2, [r3, #0]
	  	 HAL_ADC_Start_DMA(&hadc2, (uint16_t*)hall_sens, 5);
 8001ffe:	2205      	movs	r2, #5
 8002000:	4918      	ldr	r1, [pc, #96]	; (8002064 <main+0xdc4>)
 8002002:	4819      	ldr	r0, [pc, #100]	; (8002068 <main+0xdc8>)
 8002004:	f002 fd3e 	bl	8004a84 <HAL_ADC_Start_DMA>
  {
 8002008:	f7ff ba07 	b.w	800141a <main+0x17a>
 800200c:	200008e8 	.word	0x200008e8
 8002010:	0800f610 	.word	0x0800f610
 8002014:	20000750 	.word	0x20000750
 8002018:	20000758 	.word	0x20000758
 800201c:	0800f624 	.word	0x0800f624
 8002020:	0800f630 	.word	0x0800f630
 8002024:	2000073f 	.word	0x2000073f
 8002028:	2000073e 	.word	0x2000073e
 800202c:	2000074a 	.word	0x2000074a
 8002030:	20000748 	.word	0x20000748
 8002034:	0800f644 	.word	0x0800f644
 8002038:	20000760 	.word	0x20000760
 800203c:	0800f65c 	.word	0x0800f65c
 8002040:	20000000 	.word	0x20000000
 8002044:	cccccccd 	.word	0xcccccccd
 8002048:	0800f670 	.word	0x0800f670
 800204c:	20000704 	.word	0x20000704
 8002050:	0800f680 	.word	0x0800f680
 8002054:	40012c00 	.word	0x40012c00
 8002058:	40013400 	.word	0x40013400
 800205c:	40014000 	.word	0x40014000
 8002060:	20000731 	.word	0x20000731
 8002064:	2000070c 	.word	0x2000070c
 8002068:	2000024c 	.word	0x2000024c

0800206c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b09e      	sub	sp, #120	; 0x78
 8002070:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002072:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002076:	2228      	movs	r2, #40	; 0x28
 8002078:	2100      	movs	r1, #0
 800207a:	4618      	mov	r0, r3
 800207c:	f00b f98f 	bl	800d39e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002080:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	609a      	str	r2, [r3, #8]
 800208c:	60da      	str	r2, [r3, #12]
 800208e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002090:	463b      	mov	r3, r7
 8002092:	223c      	movs	r2, #60	; 0x3c
 8002094:	2100      	movs	r1, #0
 8002096:	4618      	mov	r0, r3
 8002098:	f00b f981 	bl	800d39e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800209c:	230a      	movs	r3, #10
 800209e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020a0:	2301      	movs	r3, #1
 80020a2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020a4:	2310      	movs	r3, #16
 80020a6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80020a8:	2301      	movs	r3, #1
 80020aa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020ac:	2302      	movs	r3, #2
 80020ae:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80020b0:	2300      	movs	r3, #0
 80020b2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80020b4:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80020b8:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020ba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80020be:	4618      	mov	r0, r3
 80020c0:	f005 fa50 	bl	8007564 <HAL_RCC_OscConfig>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <SystemClock_Config+0x62>
  {
    Error_Handler();
 80020ca:	f001 f855 	bl	8003178 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020ce:	230f      	movs	r3, #15
 80020d0:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020d2:	2302      	movs	r3, #2
 80020d4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020d6:	2300      	movs	r3, #0
 80020d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020e0:	2300      	movs	r3, #0
 80020e2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80020e4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80020e8:	2102      	movs	r1, #2
 80020ea:	4618      	mov	r0, r3
 80020ec:	f006 fa78 	bl	80085e0 <HAL_RCC_ClockConfig>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80020f6:	f001 f83f 	bl	8003178 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80020fa:	4b11      	ldr	r3, [pc, #68]	; (8002140 <SystemClock_Config+0xd4>)
 80020fc:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM8
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80020fe:	2300      	movs	r3, #0
 8002100:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002102:	2300      	movs	r3, #0
 8002104:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8002106:	f44f 7380 	mov.w	r3, #256	; 0x100
 800210a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 800210c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002110:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002112:	2300      	movs	r3, #0
 8002114:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002116:	f44f 7300 	mov.w	r3, #512	; 0x200
 800211a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800211c:	2300      	movs	r3, #0
 800211e:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 8002120:	2300      	movs	r3, #0
 8002122:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002124:	463b      	mov	r3, r7
 8002126:	4618      	mov	r0, r3
 8002128:	f006 fc90 	bl	8008a4c <HAL_RCCEx_PeriphCLKConfig>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8002132:	f001 f821 	bl	8003178 <Error_Handler>
  }
}
 8002136:	bf00      	nop
 8002138:	3778      	adds	r7, #120	; 0x78
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	000131a3 	.word	0x000131a3

08002144 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b08a      	sub	sp, #40	; 0x28
 8002148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800214a:	f107 031c 	add.w	r3, r7, #28
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	605a      	str	r2, [r3, #4]
 8002154:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002156:	1d3b      	adds	r3, r7, #4
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	605a      	str	r2, [r3, #4]
 800215e:	609a      	str	r2, [r3, #8]
 8002160:	60da      	str	r2, [r3, #12]
 8002162:	611a      	str	r2, [r3, #16]
 8002164:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002166:	4b2e      	ldr	r3, [pc, #184]	; (8002220 <MX_ADC1_Init+0xdc>)
 8002168:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800216c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800216e:	4b2c      	ldr	r3, [pc, #176]	; (8002220 <MX_ADC1_Init+0xdc>)
 8002170:	2200      	movs	r2, #0
 8002172:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002174:	4b2a      	ldr	r3, [pc, #168]	; (8002220 <MX_ADC1_Init+0xdc>)
 8002176:	2200      	movs	r2, #0
 8002178:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800217a:	4b29      	ldr	r3, [pc, #164]	; (8002220 <MX_ADC1_Init+0xdc>)
 800217c:	2200      	movs	r2, #0
 800217e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002180:	4b27      	ldr	r3, [pc, #156]	; (8002220 <MX_ADC1_Init+0xdc>)
 8002182:	2200      	movs	r2, #0
 8002184:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002186:	4b26      	ldr	r3, [pc, #152]	; (8002220 <MX_ADC1_Init+0xdc>)
 8002188:	2200      	movs	r2, #0
 800218a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800218e:	4b24      	ldr	r3, [pc, #144]	; (8002220 <MX_ADC1_Init+0xdc>)
 8002190:	2200      	movs	r2, #0
 8002192:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002194:	4b22      	ldr	r3, [pc, #136]	; (8002220 <MX_ADC1_Init+0xdc>)
 8002196:	2201      	movs	r2, #1
 8002198:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800219a:	4b21      	ldr	r3, [pc, #132]	; (8002220 <MX_ADC1_Init+0xdc>)
 800219c:	2200      	movs	r2, #0
 800219e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80021a0:	4b1f      	ldr	r3, [pc, #124]	; (8002220 <MX_ADC1_Init+0xdc>)
 80021a2:	2201      	movs	r2, #1
 80021a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80021a6:	4b1e      	ldr	r3, [pc, #120]	; (8002220 <MX_ADC1_Init+0xdc>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80021ae:	4b1c      	ldr	r3, [pc, #112]	; (8002220 <MX_ADC1_Init+0xdc>)
 80021b0:	2204      	movs	r2, #4
 80021b2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80021b4:	4b1a      	ldr	r3, [pc, #104]	; (8002220 <MX_ADC1_Init+0xdc>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80021ba:	4b19      	ldr	r3, [pc, #100]	; (8002220 <MX_ADC1_Init+0xdc>)
 80021bc:	2200      	movs	r2, #0
 80021be:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80021c0:	4817      	ldr	r0, [pc, #92]	; (8002220 <MX_ADC1_Init+0xdc>)
 80021c2:	f002 f831 	bl	8004228 <HAL_ADC_Init>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80021cc:	f000 ffd4 	bl	8003178 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80021d0:	2300      	movs	r3, #0
 80021d2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80021d4:	f107 031c 	add.w	r3, r7, #28
 80021d8:	4619      	mov	r1, r3
 80021da:	4811      	ldr	r0, [pc, #68]	; (8002220 <MX_ADC1_Init+0xdc>)
 80021dc:	f003 fc48 	bl	8005a70 <HAL_ADCEx_MultiModeConfigChannel>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80021e6:	f000 ffc7 	bl	8003178 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80021ea:	2304      	movs	r3, #4
 80021ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80021ee:	2301      	movs	r3, #1
 80021f0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80021f2:	2300      	movs	r3, #0
 80021f4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 80021f6:	2304      	movs	r3, #4
 80021f8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80021fa:	2300      	movs	r3, #0
 80021fc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80021fe:	2300      	movs	r3, #0
 8002200:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002202:	1d3b      	adds	r3, r7, #4
 8002204:	4619      	mov	r1, r3
 8002206:	4806      	ldr	r0, [pc, #24]	; (8002220 <MX_ADC1_Init+0xdc>)
 8002208:	f003 f948 	bl	800549c <HAL_ADC_ConfigChannel>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8002212:	f000 ffb1 	bl	8003178 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002216:	bf00      	nop
 8002218:	3728      	adds	r7, #40	; 0x28
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	200001fc 	.word	0x200001fc

08002224 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800222a:	463b      	mov	r3, r7
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	605a      	str	r2, [r3, #4]
 8002232:	609a      	str	r2, [r3, #8]
 8002234:	60da      	str	r2, [r3, #12]
 8002236:	611a      	str	r2, [r3, #16]
 8002238:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800223a:	4b44      	ldr	r3, [pc, #272]	; (800234c <MX_ADC2_Init+0x128>)
 800223c:	4a44      	ldr	r2, [pc, #272]	; (8002350 <MX_ADC2_Init+0x12c>)
 800223e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002240:	4b42      	ldr	r3, [pc, #264]	; (800234c <MX_ADC2_Init+0x128>)
 8002242:	2200      	movs	r2, #0
 8002244:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002246:	4b41      	ldr	r3, [pc, #260]	; (800234c <MX_ADC2_Init+0x128>)
 8002248:	2200      	movs	r2, #0
 800224a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800224c:	4b3f      	ldr	r3, [pc, #252]	; (800234c <MX_ADC2_Init+0x128>)
 800224e:	2201      	movs	r2, #1
 8002250:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002252:	4b3e      	ldr	r3, [pc, #248]	; (800234c <MX_ADC2_Init+0x128>)
 8002254:	2201      	movs	r2, #1
 8002256:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002258:	4b3c      	ldr	r3, [pc, #240]	; (800234c <MX_ADC2_Init+0x128>)
 800225a:	2200      	movs	r2, #0
 800225c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002260:	4b3a      	ldr	r3, [pc, #232]	; (800234c <MX_ADC2_Init+0x128>)
 8002262:	2200      	movs	r2, #0
 8002264:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002266:	4b39      	ldr	r3, [pc, #228]	; (800234c <MX_ADC2_Init+0x128>)
 8002268:	2201      	movs	r2, #1
 800226a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800226c:	4b37      	ldr	r3, [pc, #220]	; (800234c <MX_ADC2_Init+0x128>)
 800226e:	2200      	movs	r2, #0
 8002270:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 5;
 8002272:	4b36      	ldr	r3, [pc, #216]	; (800234c <MX_ADC2_Init+0x128>)
 8002274:	2205      	movs	r2, #5
 8002276:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8002278:	4b34      	ldr	r3, [pc, #208]	; (800234c <MX_ADC2_Init+0x128>)
 800227a:	2200      	movs	r2, #0
 800227c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002280:	4b32      	ldr	r3, [pc, #200]	; (800234c <MX_ADC2_Init+0x128>)
 8002282:	2204      	movs	r2, #4
 8002284:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8002286:	4b31      	ldr	r3, [pc, #196]	; (800234c <MX_ADC2_Init+0x128>)
 8002288:	2200      	movs	r2, #0
 800228a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800228c:	4b2f      	ldr	r3, [pc, #188]	; (800234c <MX_ADC2_Init+0x128>)
 800228e:	2200      	movs	r2, #0
 8002290:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002292:	482e      	ldr	r0, [pc, #184]	; (800234c <MX_ADC2_Init+0x128>)
 8002294:	f001 ffc8 	bl	8004228 <HAL_ADC_Init>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800229e:	f000 ff6b 	bl	8003178 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80022a2:	2301      	movs	r3, #1
 80022a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80022a6:	2301      	movs	r3, #1
 80022a8:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80022aa:	2300      	movs	r3, #0
 80022ac:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES_5;
 80022ae:	2302      	movs	r3, #2
 80022b0:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80022b2:	2300      	movs	r3, #0
 80022b4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80022ba:	463b      	mov	r3, r7
 80022bc:	4619      	mov	r1, r3
 80022be:	4823      	ldr	r0, [pc, #140]	; (800234c <MX_ADC2_Init+0x128>)
 80022c0:	f003 f8ec 	bl	800549c <HAL_ADC_ConfigChannel>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 80022ca:	f000 ff55 	bl	8003178 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80022ce:	2302      	movs	r3, #2
 80022d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80022d2:	2302      	movs	r3, #2
 80022d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80022d6:	463b      	mov	r3, r7
 80022d8:	4619      	mov	r1, r3
 80022da:	481c      	ldr	r0, [pc, #112]	; (800234c <MX_ADC2_Init+0x128>)
 80022dc:	f003 f8de 	bl	800549c <HAL_ADC_ConfigChannel>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <MX_ADC2_Init+0xc6>
  {
    Error_Handler();
 80022e6:	f000 ff47 	bl	8003178 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80022ea:	2303      	movs	r3, #3
 80022ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80022ee:	2303      	movs	r3, #3
 80022f0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80022f2:	463b      	mov	r3, r7
 80022f4:	4619      	mov	r1, r3
 80022f6:	4815      	ldr	r0, [pc, #84]	; (800234c <MX_ADC2_Init+0x128>)
 80022f8:	f003 f8d0 	bl	800549c <HAL_ADC_ConfigChannel>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <MX_ADC2_Init+0xe2>
  {
    Error_Handler();
 8002302:	f000 ff39 	bl	8003178 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002306:	2304      	movs	r3, #4
 8002308:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800230a:	2304      	movs	r3, #4
 800230c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800230e:	463b      	mov	r3, r7
 8002310:	4619      	mov	r1, r3
 8002312:	480e      	ldr	r0, [pc, #56]	; (800234c <MX_ADC2_Init+0x128>)
 8002314:	f003 f8c2 	bl	800549c <HAL_ADC_ConfigChannel>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <MX_ADC2_Init+0xfe>
  {
    Error_Handler();
 800231e:	f000 ff2b 	bl	8003178 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002322:	230c      	movs	r3, #12
 8002324:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002326:	2305      	movs	r3, #5
 8002328:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 800232a:	2305      	movs	r3, #5
 800232c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800232e:	463b      	mov	r3, r7
 8002330:	4619      	mov	r1, r3
 8002332:	4806      	ldr	r0, [pc, #24]	; (800234c <MX_ADC2_Init+0x128>)
 8002334:	f003 f8b2 	bl	800549c <HAL_ADC_ConfigChannel>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <MX_ADC2_Init+0x11e>
  {
    Error_Handler();
 800233e:	f000 ff1b 	bl	8003178 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002342:	bf00      	nop
 8002344:	3718      	adds	r7, #24
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	2000024c 	.word	0x2000024c
 8002350:	50000100 	.word	0x50000100

08002354 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b08a      	sub	sp, #40	; 0x28
 8002358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800235a:	f107 031c 	add.w	r3, r7, #28
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	605a      	str	r2, [r3, #4]
 8002364:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002366:	1d3b      	adds	r3, r7, #4
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	605a      	str	r2, [r3, #4]
 800236e:	609a      	str	r2, [r3, #8]
 8002370:	60da      	str	r2, [r3, #12]
 8002372:	611a      	str	r2, [r3, #16]
 8002374:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8002376:	4b2d      	ldr	r3, [pc, #180]	; (800242c <MX_ADC3_Init+0xd8>)
 8002378:	4a2d      	ldr	r2, [pc, #180]	; (8002430 <MX_ADC3_Init+0xdc>)
 800237a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800237c:	4b2b      	ldr	r3, [pc, #172]	; (800242c <MX_ADC3_Init+0xd8>)
 800237e:	2200      	movs	r2, #0
 8002380:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002382:	4b2a      	ldr	r3, [pc, #168]	; (800242c <MX_ADC3_Init+0xd8>)
 8002384:	2200      	movs	r2, #0
 8002386:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002388:	4b28      	ldr	r3, [pc, #160]	; (800242c <MX_ADC3_Init+0xd8>)
 800238a:	2200      	movs	r2, #0
 800238c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800238e:	4b27      	ldr	r3, [pc, #156]	; (800242c <MX_ADC3_Init+0xd8>)
 8002390:	2200      	movs	r2, #0
 8002392:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002394:	4b25      	ldr	r3, [pc, #148]	; (800242c <MX_ADC3_Init+0xd8>)
 8002396:	2200      	movs	r2, #0
 8002398:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800239c:	4b23      	ldr	r3, [pc, #140]	; (800242c <MX_ADC3_Init+0xd8>)
 800239e:	2200      	movs	r2, #0
 80023a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80023a2:	4b22      	ldr	r3, [pc, #136]	; (800242c <MX_ADC3_Init+0xd8>)
 80023a4:	2201      	movs	r2, #1
 80023a6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80023a8:	4b20      	ldr	r3, [pc, #128]	; (800242c <MX_ADC3_Init+0xd8>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80023ae:	4b1f      	ldr	r3, [pc, #124]	; (800242c <MX_ADC3_Init+0xd8>)
 80023b0:	2201      	movs	r2, #1
 80023b2:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80023b4:	4b1d      	ldr	r3, [pc, #116]	; (800242c <MX_ADC3_Init+0xd8>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80023bc:	4b1b      	ldr	r3, [pc, #108]	; (800242c <MX_ADC3_Init+0xd8>)
 80023be:	2204      	movs	r2, #4
 80023c0:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80023c2:	4b1a      	ldr	r3, [pc, #104]	; (800242c <MX_ADC3_Init+0xd8>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80023c8:	4b18      	ldr	r3, [pc, #96]	; (800242c <MX_ADC3_Init+0xd8>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80023ce:	4817      	ldr	r0, [pc, #92]	; (800242c <MX_ADC3_Init+0xd8>)
 80023d0:	f001 ff2a 	bl	8004228 <HAL_ADC_Init>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 80023da:	f000 fecd 	bl	8003178 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80023de:	2300      	movs	r3, #0
 80023e0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80023e2:	f107 031c 	add.w	r3, r7, #28
 80023e6:	4619      	mov	r1, r3
 80023e8:	4810      	ldr	r0, [pc, #64]	; (800242c <MX_ADC3_Init+0xd8>)
 80023ea:	f003 fb41 	bl	8005a70 <HAL_ADCEx_MultiModeConfigChannel>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 80023f4:	f000 fec0 	bl	8003178 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80023f8:	2301      	movs	r3, #1
 80023fa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80023fc:	2301      	movs	r3, #1
 80023fe:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002400:	2300      	movs	r3, #0
 8002402:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES_5;
 8002404:	2302      	movs	r3, #2
 8002406:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002408:	2300      	movs	r3, #0
 800240a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800240c:	2300      	movs	r3, #0
 800240e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002410:	1d3b      	adds	r3, r7, #4
 8002412:	4619      	mov	r1, r3
 8002414:	4805      	ldr	r0, [pc, #20]	; (800242c <MX_ADC3_Init+0xd8>)
 8002416:	f003 f841 	bl	800549c <HAL_ADC_ConfigChannel>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8002420:	f000 feaa 	bl	8003178 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002424:	bf00      	nop
 8002426:	3728      	adds	r7, #40	; 0x28
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	2000029c 	.word	0x2000029c
 8002430:	50000400 	.word	0x50000400

08002434 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002438:	4b1b      	ldr	r3, [pc, #108]	; (80024a8 <MX_I2C1_Init+0x74>)
 800243a:	4a1c      	ldr	r2, [pc, #112]	; (80024ac <MX_I2C1_Init+0x78>)
 800243c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800243e:	4b1a      	ldr	r3, [pc, #104]	; (80024a8 <MX_I2C1_Init+0x74>)
 8002440:	4a1b      	ldr	r2, [pc, #108]	; (80024b0 <MX_I2C1_Init+0x7c>)
 8002442:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 36;
 8002444:	4b18      	ldr	r3, [pc, #96]	; (80024a8 <MX_I2C1_Init+0x74>)
 8002446:	2224      	movs	r2, #36	; 0x24
 8002448:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800244a:	4b17      	ldr	r3, [pc, #92]	; (80024a8 <MX_I2C1_Init+0x74>)
 800244c:	2201      	movs	r2, #1
 800244e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002450:	4b15      	ldr	r3, [pc, #84]	; (80024a8 <MX_I2C1_Init+0x74>)
 8002452:	2200      	movs	r2, #0
 8002454:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002456:	4b14      	ldr	r3, [pc, #80]	; (80024a8 <MX_I2C1_Init+0x74>)
 8002458:	2200      	movs	r2, #0
 800245a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800245c:	4b12      	ldr	r3, [pc, #72]	; (80024a8 <MX_I2C1_Init+0x74>)
 800245e:	2200      	movs	r2, #0
 8002460:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002462:	4b11      	ldr	r3, [pc, #68]	; (80024a8 <MX_I2C1_Init+0x74>)
 8002464:	2200      	movs	r2, #0
 8002466:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002468:	4b0f      	ldr	r3, [pc, #60]	; (80024a8 <MX_I2C1_Init+0x74>)
 800246a:	2200      	movs	r2, #0
 800246c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800246e:	480e      	ldr	r0, [pc, #56]	; (80024a8 <MX_I2C1_Init+0x74>)
 8002470:	f004 fad4 	bl	8006a1c <HAL_I2C_Init>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800247a:	f000 fe7d 	bl	8003178 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800247e:	2100      	movs	r1, #0
 8002480:	4809      	ldr	r0, [pc, #36]	; (80024a8 <MX_I2C1_Init+0x74>)
 8002482:	f004 ffd7 	bl	8007434 <HAL_I2CEx_ConfigAnalogFilter>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800248c:	f000 fe74 	bl	8003178 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002490:	2100      	movs	r1, #0
 8002492:	4805      	ldr	r0, [pc, #20]	; (80024a8 <MX_I2C1_Init+0x74>)
 8002494:	f005 f819 	bl	80074ca <HAL_I2CEx_ConfigDigitalFilter>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800249e:	f000 fe6b 	bl	8003178 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80024a2:	bf00      	nop
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	20000330 	.word	0x20000330
 80024ac:	40005400 	.word	0x40005400
 80024b0:	2000090e 	.word	0x2000090e

080024b4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80024ba:	1d3b      	adds	r3, r7, #4
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	605a      	str	r2, [r3, #4]
 80024c2:	609a      	str	r2, [r3, #8]
 80024c4:	60da      	str	r2, [r3, #12]
 80024c6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80024c8:	2300      	movs	r3, #0
 80024ca:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80024cc:	4b24      	ldr	r3, [pc, #144]	; (8002560 <MX_RTC_Init+0xac>)
 80024ce:	4a25      	ldr	r2, [pc, #148]	; (8002564 <MX_RTC_Init+0xb0>)
 80024d0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80024d2:	4b23      	ldr	r3, [pc, #140]	; (8002560 <MX_RTC_Init+0xac>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80024d8:	4b21      	ldr	r3, [pc, #132]	; (8002560 <MX_RTC_Init+0xac>)
 80024da:	227f      	movs	r2, #127	; 0x7f
 80024dc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 311;
 80024de:	4b20      	ldr	r3, [pc, #128]	; (8002560 <MX_RTC_Init+0xac>)
 80024e0:	f240 1237 	movw	r2, #311	; 0x137
 80024e4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80024e6:	4b1e      	ldr	r3, [pc, #120]	; (8002560 <MX_RTC_Init+0xac>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80024ec:	4b1c      	ldr	r3, [pc, #112]	; (8002560 <MX_RTC_Init+0xac>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80024f2:	4b1b      	ldr	r3, [pc, #108]	; (8002560 <MX_RTC_Init+0xac>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80024f8:	4819      	ldr	r0, [pc, #100]	; (8002560 <MX_RTC_Init+0xac>)
 80024fa:	f006 fc57 	bl	8008dac <HAL_RTC_Init>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8002504:	f000 fe38 	bl	8003178 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x9;
 8002508:	2309      	movs	r3, #9
 800250a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800250c:	2300      	movs	r3, #0
 800250e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002510:	2300      	movs	r3, #0
 8002512:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002514:	2300      	movs	r3, #0
 8002516:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002518:	2300      	movs	r3, #0
 800251a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800251c:	1d3b      	adds	r3, r7, #4
 800251e:	2201      	movs	r2, #1
 8002520:	4619      	mov	r1, r3
 8002522:	480f      	ldr	r0, [pc, #60]	; (8002560 <MX_RTC_Init+0xac>)
 8002524:	f006 fcc5 	bl	8008eb2 <HAL_RTC_SetTime>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 800252e:	f000 fe23 	bl	8003178 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002532:	2301      	movs	r3, #1
 8002534:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JUNE;
 8002536:	2306      	movs	r3, #6
 8002538:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800253a:	2301      	movs	r3, #1
 800253c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800253e:	2300      	movs	r3, #0
 8002540:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002542:	463b      	mov	r3, r7
 8002544:	2201      	movs	r2, #1
 8002546:	4619      	mov	r1, r3
 8002548:	4805      	ldr	r0, [pc, #20]	; (8002560 <MX_RTC_Init+0xac>)
 800254a:	f006 fdaa 	bl	80090a2 <HAL_RTC_SetDate>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8002554:	f000 fe10 	bl	8003178 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002558:	bf00      	nop
 800255a:	3718      	adds	r7, #24
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	20000384 	.word	0x20000384
 8002564:	40002800 	.word	0x40002800

08002568 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b09a      	sub	sp, #104	; 0x68
 800256c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800256e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]
 8002576:	605a      	str	r2, [r3, #4]
 8002578:	609a      	str	r2, [r3, #8]
 800257a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800257c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	605a      	str	r2, [r3, #4]
 8002586:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002588:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	605a      	str	r2, [r3, #4]
 8002592:	609a      	str	r2, [r3, #8]
 8002594:	60da      	str	r2, [r3, #12]
 8002596:	611a      	str	r2, [r3, #16]
 8002598:	615a      	str	r2, [r3, #20]
 800259a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800259c:	1d3b      	adds	r3, r7, #4
 800259e:	222c      	movs	r2, #44	; 0x2c
 80025a0:	2100      	movs	r1, #0
 80025a2:	4618      	mov	r0, r3
 80025a4:	f00a fefb 	bl	800d39e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80025a8:	4b4a      	ldr	r3, [pc, #296]	; (80026d4 <MX_TIM1_Init+0x16c>)
 80025aa:	4a4b      	ldr	r2, [pc, #300]	; (80026d8 <MX_TIM1_Init+0x170>)
 80025ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80025ae:	4b49      	ldr	r3, [pc, #292]	; (80026d4 <MX_TIM1_Init+0x16c>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025b4:	4b47      	ldr	r3, [pc, #284]	; (80026d4 <MX_TIM1_Init+0x16c>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 80025ba:	4b46      	ldr	r3, [pc, #280]	; (80026d4 <MX_TIM1_Init+0x16c>)
 80025bc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80025c0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025c2:	4b44      	ldr	r3, [pc, #272]	; (80026d4 <MX_TIM1_Init+0x16c>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80025c8:	4b42      	ldr	r3, [pc, #264]	; (80026d4 <MX_TIM1_Init+0x16c>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025ce:	4b41      	ldr	r3, [pc, #260]	; (80026d4 <MX_TIM1_Init+0x16c>)
 80025d0:	2280      	movs	r2, #128	; 0x80
 80025d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80025d4:	483f      	ldr	r0, [pc, #252]	; (80026d4 <MX_TIM1_Init+0x16c>)
 80025d6:	f006 fef5 	bl	80093c4 <HAL_TIM_Base_Init>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80025e0:	f000 fdca 	bl	8003178 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025e8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80025ea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80025ee:	4619      	mov	r1, r3
 80025f0:	4838      	ldr	r0, [pc, #224]	; (80026d4 <MX_TIM1_Init+0x16c>)
 80025f2:	f007 fe15 	bl	800a220 <HAL_TIM_ConfigClockSource>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80025fc:	f000 fdbc 	bl	8003178 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002600:	4834      	ldr	r0, [pc, #208]	; (80026d4 <MX_TIM1_Init+0x16c>)
 8002602:	f006 ffa1 	bl	8009548 <HAL_TIM_PWM_Init>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800260c:	f000 fdb4 	bl	8003178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002610:	2300      	movs	r3, #0
 8002612:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002614:	2300      	movs	r3, #0
 8002616:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002618:	2300      	movs	r3, #0
 800261a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800261c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002620:	4619      	mov	r1, r3
 8002622:	482c      	ldr	r0, [pc, #176]	; (80026d4 <MX_TIM1_Init+0x16c>)
 8002624:	f008 fd7e 	bl	800b124 <HAL_TIMEx_MasterConfigSynchronization>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800262e:	f000 fda3 	bl	8003178 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002632:	2360      	movs	r3, #96	; 0x60
 8002634:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1000;
 8002636:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800263a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800263c:	2300      	movs	r3, #0
 800263e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002640:	2300      	movs	r3, #0
 8002642:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002644:	2304      	movs	r3, #4
 8002646:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002648:	2300      	movs	r3, #0
 800264a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800264c:	2300      	movs	r3, #0
 800264e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002650:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002654:	2200      	movs	r2, #0
 8002656:	4619      	mov	r1, r3
 8002658:	481e      	ldr	r0, [pc, #120]	; (80026d4 <MX_TIM1_Init+0x16c>)
 800265a:	f007 fccd 	bl	8009ff8 <HAL_TIM_PWM_ConfigChannel>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8002664:	f000 fd88 	bl	8003178 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002668:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800266c:	2204      	movs	r2, #4
 800266e:	4619      	mov	r1, r3
 8002670:	4818      	ldr	r0, [pc, #96]	; (80026d4 <MX_TIM1_Init+0x16c>)
 8002672:	f007 fcc1 	bl	8009ff8 <HAL_TIM_PWM_ConfigChannel>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 800267c:	f000 fd7c 	bl	8003178 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002680:	2300      	movs	r3, #0
 8002682:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002684:	2300      	movs	r3, #0
 8002686:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002688:	2300      	movs	r3, #0
 800268a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 100;
 800268c:	2364      	movs	r3, #100	; 0x64
 800268e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002690:	2300      	movs	r3, #0
 8002692:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002694:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002698:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800269a:	2300      	movs	r3, #0
 800269c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800269e:	2300      	movs	r3, #0
 80026a0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80026a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026a6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80026a8:	2300      	movs	r3, #0
 80026aa:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80026ac:	2300      	movs	r3, #0
 80026ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80026b0:	1d3b      	adds	r3, r7, #4
 80026b2:	4619      	mov	r1, r3
 80026b4:	4807      	ldr	r0, [pc, #28]	; (80026d4 <MX_TIM1_Init+0x16c>)
 80026b6:	f008 fdb5 	bl	800b224 <HAL_TIMEx_ConfigBreakDeadTime>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 80026c0:	f000 fd5a 	bl	8003178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80026c4:	4803      	ldr	r0, [pc, #12]	; (80026d4 <MX_TIM1_Init+0x16c>)
 80026c6:	f001 f9c5 	bl	8003a54 <HAL_TIM_MspPostInit>

}
 80026ca:	bf00      	nop
 80026cc:	3768      	adds	r7, #104	; 0x68
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	200003a4 	.word	0x200003a4
 80026d8:	40012c00 	.word	0x40012c00

080026dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b08c      	sub	sp, #48	; 0x30
 80026e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026e2:	f107 0320 	add.w	r3, r7, #32
 80026e6:	2200      	movs	r2, #0
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	605a      	str	r2, [r3, #4]
 80026ec:	609a      	str	r2, [r3, #8]
 80026ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026f0:	f107 0314 	add.w	r3, r7, #20
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	605a      	str	r2, [r3, #4]
 80026fa:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80026fc:	1d3b      	adds	r3, r7, #4
 80026fe:	2200      	movs	r2, #0
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	605a      	str	r2, [r3, #4]
 8002704:	609a      	str	r2, [r3, #8]
 8002706:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002708:	4b33      	ldr	r3, [pc, #204]	; (80027d8 <MX_TIM2_Init+0xfc>)
 800270a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800270e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002710:	4b31      	ldr	r3, [pc, #196]	; (80027d8 <MX_TIM2_Init+0xfc>)
 8002712:	2200      	movs	r2, #0
 8002714:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002716:	4b30      	ldr	r3, [pc, #192]	; (80027d8 <MX_TIM2_Init+0xfc>)
 8002718:	2200      	movs	r2, #0
 800271a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64000000;
 800271c:	4b2e      	ldr	r3, [pc, #184]	; (80027d8 <MX_TIM2_Init+0xfc>)
 800271e:	4a2f      	ldr	r2, [pc, #188]	; (80027dc <MX_TIM2_Init+0x100>)
 8002720:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002722:	4b2d      	ldr	r3, [pc, #180]	; (80027d8 <MX_TIM2_Init+0xfc>)
 8002724:	2200      	movs	r2, #0
 8002726:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002728:	4b2b      	ldr	r3, [pc, #172]	; (80027d8 <MX_TIM2_Init+0xfc>)
 800272a:	2200      	movs	r2, #0
 800272c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800272e:	482a      	ldr	r0, [pc, #168]	; (80027d8 <MX_TIM2_Init+0xfc>)
 8002730:	f006 fe48 	bl	80093c4 <HAL_TIM_Base_Init>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800273a:	f000 fd1d 	bl	8003178 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800273e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002742:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002744:	f107 0320 	add.w	r3, r7, #32
 8002748:	4619      	mov	r1, r3
 800274a:	4823      	ldr	r0, [pc, #140]	; (80027d8 <MX_TIM2_Init+0xfc>)
 800274c:	f007 fd68 	bl	800a220 <HAL_TIM_ConfigClockSource>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002756:	f000 fd0f 	bl	8003178 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800275a:	481f      	ldr	r0, [pc, #124]	; (80027d8 <MX_TIM2_Init+0xfc>)
 800275c:	f007 f8ec 	bl	8009938 <HAL_TIM_IC_Init>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002766:	f000 fd07 	bl	8003178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800276a:	2300      	movs	r3, #0
 800276c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800276e:	2300      	movs	r3, #0
 8002770:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002772:	f107 0314 	add.w	r3, r7, #20
 8002776:	4619      	mov	r1, r3
 8002778:	4817      	ldr	r0, [pc, #92]	; (80027d8 <MX_TIM2_Init+0xfc>)
 800277a:	f008 fcd3 	bl	800b124 <HAL_TIMEx_MasterConfigSynchronization>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8002784:	f000 fcf8 	bl	8003178 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002788:	2300      	movs	r3, #0
 800278a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800278c:	2301      	movs	r3, #1
 800278e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002790:	2300      	movs	r3, #0
 8002792:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 12;
 8002794:	230c      	movs	r3, #12
 8002796:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002798:	1d3b      	adds	r3, r7, #4
 800279a:	2200      	movs	r2, #0
 800279c:	4619      	mov	r1, r3
 800279e:	480e      	ldr	r0, [pc, #56]	; (80027d8 <MX_TIM2_Init+0xfc>)
 80027a0:	f007 fb8d 	bl	8009ebe <HAL_TIM_IC_ConfigChannel>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80027aa:	f000 fce5 	bl	8003178 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80027ae:	2302      	movs	r3, #2
 80027b0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80027b2:	2302      	movs	r3, #2
 80027b4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80027b6:	2300      	movs	r3, #0
 80027b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80027ba:	1d3b      	adds	r3, r7, #4
 80027bc:	2204      	movs	r2, #4
 80027be:	4619      	mov	r1, r3
 80027c0:	4805      	ldr	r0, [pc, #20]	; (80027d8 <MX_TIM2_Init+0xfc>)
 80027c2:	f007 fb7c 	bl	8009ebe <HAL_TIM_IC_ConfigChannel>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <MX_TIM2_Init+0xf4>
  {
    Error_Handler();
 80027cc:	f000 fcd4 	bl	8003178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80027d0:	bf00      	nop
 80027d2:	3730      	adds	r7, #48	; 0x30
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	200003f0 	.word	0x200003f0
 80027dc:	03d09000 	.word	0x03d09000

080027e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b088      	sub	sp, #32
 80027e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027e6:	f107 0310 	add.w	r3, r7, #16
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	605a      	str	r2, [r3, #4]
 80027f0:	609a      	str	r2, [r3, #8]
 80027f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027f4:	1d3b      	adds	r3, r7, #4
 80027f6:	2200      	movs	r2, #0
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	605a      	str	r2, [r3, #4]
 80027fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80027fe:	4b1e      	ldr	r3, [pc, #120]	; (8002878 <MX_TIM3_Init+0x98>)
 8002800:	4a1e      	ldr	r2, [pc, #120]	; (800287c <MX_TIM3_Init+0x9c>)
 8002802:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 8002804:	4b1c      	ldr	r3, [pc, #112]	; (8002878 <MX_TIM3_Init+0x98>)
 8002806:	f240 32e7 	movw	r2, #999	; 0x3e7
 800280a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800280c:	4b1a      	ldr	r3, [pc, #104]	; (8002878 <MX_TIM3_Init+0x98>)
 800280e:	2200      	movs	r2, #0
 8002810:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 64000;
 8002812:	4b19      	ldr	r3, [pc, #100]	; (8002878 <MX_TIM3_Init+0x98>)
 8002814:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8002818:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800281a:	4b17      	ldr	r3, [pc, #92]	; (8002878 <MX_TIM3_Init+0x98>)
 800281c:	2200      	movs	r2, #0
 800281e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002820:	4b15      	ldr	r3, [pc, #84]	; (8002878 <MX_TIM3_Init+0x98>)
 8002822:	2280      	movs	r2, #128	; 0x80
 8002824:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002826:	4814      	ldr	r0, [pc, #80]	; (8002878 <MX_TIM3_Init+0x98>)
 8002828:	f006 fdcc 	bl	80093c4 <HAL_TIM_Base_Init>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8002832:	f000 fca1 	bl	8003178 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002836:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800283a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800283c:	f107 0310 	add.w	r3, r7, #16
 8002840:	4619      	mov	r1, r3
 8002842:	480d      	ldr	r0, [pc, #52]	; (8002878 <MX_TIM3_Init+0x98>)
 8002844:	f007 fcec 	bl	800a220 <HAL_TIM_ConfigClockSource>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800284e:	f000 fc93 	bl	8003178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002852:	2300      	movs	r3, #0
 8002854:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002856:	2300      	movs	r3, #0
 8002858:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800285a:	1d3b      	adds	r3, r7, #4
 800285c:	4619      	mov	r1, r3
 800285e:	4806      	ldr	r0, [pc, #24]	; (8002878 <MX_TIM3_Init+0x98>)
 8002860:	f008 fc60 	bl	800b124 <HAL_TIMEx_MasterConfigSynchronization>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800286a:	f000 fc85 	bl	8003178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800286e:	bf00      	nop
 8002870:	3720      	adds	r7, #32
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	2000043c 	.word	0x2000043c
 800287c:	40000400 	.word	0x40000400

08002880 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b088      	sub	sp, #32
 8002884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002886:	f107 0310 	add.w	r3, r7, #16
 800288a:	2200      	movs	r2, #0
 800288c:	601a      	str	r2, [r3, #0]
 800288e:	605a      	str	r2, [r3, #4]
 8002890:	609a      	str	r2, [r3, #8]
 8002892:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002894:	1d3b      	adds	r3, r7, #4
 8002896:	2200      	movs	r2, #0
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	605a      	str	r2, [r3, #4]
 800289c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800289e:	4b1d      	ldr	r3, [pc, #116]	; (8002914 <MX_TIM4_Init+0x94>)
 80028a0:	4a1d      	ldr	r2, [pc, #116]	; (8002918 <MX_TIM4_Init+0x98>)
 80028a2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80028a4:	4b1b      	ldr	r3, [pc, #108]	; (8002914 <MX_TIM4_Init+0x94>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028aa:	4b1a      	ldr	r3, [pc, #104]	; (8002914 <MX_TIM4_Init+0x94>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80028b0:	4b18      	ldr	r3, [pc, #96]	; (8002914 <MX_TIM4_Init+0x94>)
 80028b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028b6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028b8:	4b16      	ldr	r3, [pc, #88]	; (8002914 <MX_TIM4_Init+0x94>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80028be:	4b15      	ldr	r3, [pc, #84]	; (8002914 <MX_TIM4_Init+0x94>)
 80028c0:	2280      	movs	r2, #128	; 0x80
 80028c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80028c4:	4813      	ldr	r0, [pc, #76]	; (8002914 <MX_TIM4_Init+0x94>)
 80028c6:	f006 fd7d 	bl	80093c4 <HAL_TIM_Base_Init>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80028d0:	f000 fc52 	bl	8003178 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80028da:	f107 0310 	add.w	r3, r7, #16
 80028de:	4619      	mov	r1, r3
 80028e0:	480c      	ldr	r0, [pc, #48]	; (8002914 <MX_TIM4_Init+0x94>)
 80028e2:	f007 fc9d 	bl	800a220 <HAL_TIM_ConfigClockSource>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80028ec:	f000 fc44 	bl	8003178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028f0:	2300      	movs	r3, #0
 80028f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028f4:	2300      	movs	r3, #0
 80028f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80028f8:	1d3b      	adds	r3, r7, #4
 80028fa:	4619      	mov	r1, r3
 80028fc:	4805      	ldr	r0, [pc, #20]	; (8002914 <MX_TIM4_Init+0x94>)
 80028fe:	f008 fc11 	bl	800b124 <HAL_TIMEx_MasterConfigSynchronization>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002908:	f000 fc36 	bl	8003178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800290c:	bf00      	nop
 800290e:	3720      	adds	r7, #32
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	20000488 	.word	0x20000488
 8002918:	40000800 	.word	0x40000800

0800291c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b09a      	sub	sp, #104	; 0x68
 8002920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002922:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002926:	2200      	movs	r2, #0
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	605a      	str	r2, [r3, #4]
 800292c:	609a      	str	r2, [r3, #8]
 800292e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002930:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	605a      	str	r2, [r3, #4]
 800293a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800293c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	605a      	str	r2, [r3, #4]
 8002946:	609a      	str	r2, [r3, #8]
 8002948:	60da      	str	r2, [r3, #12]
 800294a:	611a      	str	r2, [r3, #16]
 800294c:	615a      	str	r2, [r3, #20]
 800294e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002950:	1d3b      	adds	r3, r7, #4
 8002952:	222c      	movs	r2, #44	; 0x2c
 8002954:	2100      	movs	r1, #0
 8002956:	4618      	mov	r0, r3
 8002958:	f00a fd21 	bl	800d39e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800295c:	4b44      	ldr	r3, [pc, #272]	; (8002a70 <MX_TIM8_Init+0x154>)
 800295e:	4a45      	ldr	r2, [pc, #276]	; (8002a74 <MX_TIM8_Init+0x158>)
 8002960:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002962:	4b43      	ldr	r3, [pc, #268]	; (8002a70 <MX_TIM8_Init+0x154>)
 8002964:	2200      	movs	r2, #0
 8002966:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002968:	4b41      	ldr	r3, [pc, #260]	; (8002a70 <MX_TIM8_Init+0x154>)
 800296a:	2200      	movs	r2, #0
 800296c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 2000;
 800296e:	4b40      	ldr	r3, [pc, #256]	; (8002a70 <MX_TIM8_Init+0x154>)
 8002970:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002974:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002976:	4b3e      	ldr	r3, [pc, #248]	; (8002a70 <MX_TIM8_Init+0x154>)
 8002978:	2200      	movs	r2, #0
 800297a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800297c:	4b3c      	ldr	r3, [pc, #240]	; (8002a70 <MX_TIM8_Init+0x154>)
 800297e:	2200      	movs	r2, #0
 8002980:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002982:	4b3b      	ldr	r3, [pc, #236]	; (8002a70 <MX_TIM8_Init+0x154>)
 8002984:	2280      	movs	r2, #128	; 0x80
 8002986:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002988:	4839      	ldr	r0, [pc, #228]	; (8002a70 <MX_TIM8_Init+0x154>)
 800298a:	f006 fd1b 	bl	80093c4 <HAL_TIM_Base_Init>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8002994:	f000 fbf0 	bl	8003178 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002998:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800299c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800299e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80029a2:	4619      	mov	r1, r3
 80029a4:	4832      	ldr	r0, [pc, #200]	; (8002a70 <MX_TIM8_Init+0x154>)
 80029a6:	f007 fc3b 	bl	800a220 <HAL_TIM_ConfigClockSource>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80029b0:	f000 fbe2 	bl	8003178 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80029b4:	482e      	ldr	r0, [pc, #184]	; (8002a70 <MX_TIM8_Init+0x154>)
 80029b6:	f006 fdc7 	bl	8009548 <HAL_TIM_PWM_Init>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80029c0:	f000 fbda 	bl	8003178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029c4:	2300      	movs	r3, #0
 80029c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80029c8:	2300      	movs	r3, #0
 80029ca:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029cc:	2300      	movs	r3, #0
 80029ce:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80029d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80029d4:	4619      	mov	r1, r3
 80029d6:	4826      	ldr	r0, [pc, #152]	; (8002a70 <MX_TIM8_Init+0x154>)
 80029d8:	f008 fba4 	bl	800b124 <HAL_TIMEx_MasterConfigSynchronization>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80029e2:	f000 fbc9 	bl	8003178 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029e6:	2360      	movs	r3, #96	; 0x60
 80029e8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1000;
 80029ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029ee:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029f0:	2300      	movs	r3, #0
 80029f2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80029f4:	2300      	movs	r3, #0
 80029f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029f8:	2300      	movs	r3, #0
 80029fa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80029fc:	2300      	movs	r3, #0
 80029fe:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002a00:	2300      	movs	r3, #0
 8002a02:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a08:	2200      	movs	r2, #0
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	4818      	ldr	r0, [pc, #96]	; (8002a70 <MX_TIM8_Init+0x154>)
 8002a0e:	f007 faf3 	bl	8009ff8 <HAL_TIM_PWM_ConfigChannel>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8002a18:	f000 fbae 	bl	8003178 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002a20:	2300      	movs	r3, #0
 8002a22:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002a24:	2300      	movs	r3, #0
 8002a26:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 100;
 8002a28:	2364      	movs	r3, #100	; 0x64
 8002a2a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002a30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a34:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002a36:	2300      	movs	r3, #0
 8002a38:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002a3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a42:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002a44:	2300      	movs	r3, #0
 8002a46:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002a4c:	1d3b      	adds	r3, r7, #4
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4807      	ldr	r0, [pc, #28]	; (8002a70 <MX_TIM8_Init+0x154>)
 8002a52:	f008 fbe7 	bl	800b224 <HAL_TIMEx_ConfigBreakDeadTime>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <MX_TIM8_Init+0x144>
  {
    Error_Handler();
 8002a5c:	f000 fb8c 	bl	8003178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002a60:	4803      	ldr	r0, [pc, #12]	; (8002a70 <MX_TIM8_Init+0x154>)
 8002a62:	f000 fff7 	bl	8003a54 <HAL_TIM_MspPostInit>

}
 8002a66:	bf00      	nop
 8002a68:	3768      	adds	r7, #104	; 0x68
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	200004d4 	.word	0x200004d4
 8002a74:	40013400 	.word	0x40013400

08002a78 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b09a      	sub	sp, #104	; 0x68
 8002a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a7e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002a82:	2200      	movs	r2, #0
 8002a84:	601a      	str	r2, [r3, #0]
 8002a86:	605a      	str	r2, [r3, #4]
 8002a88:	609a      	str	r2, [r3, #8]
 8002a8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a8c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	605a      	str	r2, [r3, #4]
 8002a96:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	605a      	str	r2, [r3, #4]
 8002aa2:	609a      	str	r2, [r3, #8]
 8002aa4:	60da      	str	r2, [r3, #12]
 8002aa6:	611a      	str	r2, [r3, #16]
 8002aa8:	615a      	str	r2, [r3, #20]
 8002aaa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002aac:	1d3b      	adds	r3, r7, #4
 8002aae:	222c      	movs	r2, #44	; 0x2c
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f00a fc73 	bl	800d39e <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002ab8:	4b3f      	ldr	r3, [pc, #252]	; (8002bb8 <MX_TIM15_Init+0x140>)
 8002aba:	4a40      	ldr	r2, [pc, #256]	; (8002bbc <MX_TIM15_Init+0x144>)
 8002abc:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8002abe:	4b3e      	ldr	r3, [pc, #248]	; (8002bb8 <MX_TIM15_Init+0x140>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ac4:	4b3c      	ldr	r3, [pc, #240]	; (8002bb8 <MX_TIM15_Init+0x140>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 2000;
 8002aca:	4b3b      	ldr	r3, [pc, #236]	; (8002bb8 <MX_TIM15_Init+0x140>)
 8002acc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002ad0:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ad2:	4b39      	ldr	r3, [pc, #228]	; (8002bb8 <MX_TIM15_Init+0x140>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002ad8:	4b37      	ldr	r3, [pc, #220]	; (8002bb8 <MX_TIM15_Init+0x140>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ade:	4b36      	ldr	r3, [pc, #216]	; (8002bb8 <MX_TIM15_Init+0x140>)
 8002ae0:	2280      	movs	r2, #128	; 0x80
 8002ae2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002ae4:	4834      	ldr	r0, [pc, #208]	; (8002bb8 <MX_TIM15_Init+0x140>)
 8002ae6:	f006 fc6d 	bl	80093c4 <HAL_TIM_Base_Init>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8002af0:	f000 fb42 	bl	8003178 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002af4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002af8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002afa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002afe:	4619      	mov	r1, r3
 8002b00:	482d      	ldr	r0, [pc, #180]	; (8002bb8 <MX_TIM15_Init+0x140>)
 8002b02:	f007 fb8d 	bl	800a220 <HAL_TIM_ConfigClockSource>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8002b0c:	f000 fb34 	bl	8003178 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8002b10:	4829      	ldr	r0, [pc, #164]	; (8002bb8 <MX_TIM15_Init+0x140>)
 8002b12:	f006 fd19 	bl	8009548 <HAL_TIM_PWM_Init>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8002b1c:	f000 fb2c 	bl	8003178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b20:	2300      	movs	r3, #0
 8002b22:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b24:	2300      	movs	r3, #0
 8002b26:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002b28:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4822      	ldr	r0, [pc, #136]	; (8002bb8 <MX_TIM15_Init+0x140>)
 8002b30:	f008 faf8 	bl	800b124 <HAL_TIMEx_MasterConfigSynchronization>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8002b3a:	f000 fb1d 	bl	8003178 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b3e:	2360      	movs	r3, #96	; 0x60
 8002b40:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1000;
 8002b42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b46:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b50:	2300      	movs	r3, #0
 8002b52:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002b54:	2300      	movs	r3, #0
 8002b56:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b5c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b60:	2200      	movs	r2, #0
 8002b62:	4619      	mov	r1, r3
 8002b64:	4814      	ldr	r0, [pc, #80]	; (8002bb8 <MX_TIM15_Init+0x140>)
 8002b66:	f007 fa47 	bl	8009ff8 <HAL_TIM_PWM_ConfigChannel>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8002b70:	f000 fb02 	bl	8003178 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002b74:	2300      	movs	r3, #0
 8002b76:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 100;
 8002b80:	2364      	movs	r3, #100	; 0x64
 8002b82:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002b84:	2300      	movs	r3, #0
 8002b86:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002b88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b8c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002b92:	2300      	movs	r3, #0
 8002b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8002b96:	1d3b      	adds	r3, r7, #4
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4807      	ldr	r0, [pc, #28]	; (8002bb8 <MX_TIM15_Init+0x140>)
 8002b9c:	f008 fb42 	bl	800b224 <HAL_TIMEx_ConfigBreakDeadTime>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8002ba6:	f000 fae7 	bl	8003178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8002baa:	4803      	ldr	r0, [pc, #12]	; (8002bb8 <MX_TIM15_Init+0x140>)
 8002bac:	f000 ff52 	bl	8003a54 <HAL_TIM_MspPostInit>

}
 8002bb0:	bf00      	nop
 8002bb2:	3768      	adds	r7, #104	; 0x68
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	20000520 	.word	0x20000520
 8002bbc:	40014000 	.word	0x40014000

08002bc0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002bc4:	4b14      	ldr	r3, [pc, #80]	; (8002c18 <MX_USART1_UART_Init+0x58>)
 8002bc6:	4a15      	ldr	r2, [pc, #84]	; (8002c1c <MX_USART1_UART_Init+0x5c>)
 8002bc8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002bca:	4b13      	ldr	r3, [pc, #76]	; (8002c18 <MX_USART1_UART_Init+0x58>)
 8002bcc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002bd0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002bd2:	4b11      	ldr	r3, [pc, #68]	; (8002c18 <MX_USART1_UART_Init+0x58>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002bd8:	4b0f      	ldr	r3, [pc, #60]	; (8002c18 <MX_USART1_UART_Init+0x58>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002bde:	4b0e      	ldr	r3, [pc, #56]	; (8002c18 <MX_USART1_UART_Init+0x58>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002be4:	4b0c      	ldr	r3, [pc, #48]	; (8002c18 <MX_USART1_UART_Init+0x58>)
 8002be6:	220c      	movs	r2, #12
 8002be8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bea:	4b0b      	ldr	r3, [pc, #44]	; (8002c18 <MX_USART1_UART_Init+0x58>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bf0:	4b09      	ldr	r3, [pc, #36]	; (8002c18 <MX_USART1_UART_Init+0x58>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bf6:	4b08      	ldr	r3, [pc, #32]	; (8002c18 <MX_USART1_UART_Init+0x58>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bfc:	4b06      	ldr	r3, [pc, #24]	; (8002c18 <MX_USART1_UART_Init+0x58>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c02:	4805      	ldr	r0, [pc, #20]	; (8002c18 <MX_USART1_UART_Init+0x58>)
 8002c04:	f008 fbcf 	bl	800b3a6 <HAL_UART_Init>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002c0e:	f000 fab3 	bl	8003178 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c12:	bf00      	nop
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	2000056c 	.word	0x2000056c
 8002c1c:	40013800 	.word	0x40013800

08002c20 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c24:	4b14      	ldr	r3, [pc, #80]	; (8002c78 <MX_USART2_UART_Init+0x58>)
 8002c26:	4a15      	ldr	r2, [pc, #84]	; (8002c7c <MX_USART2_UART_Init+0x5c>)
 8002c28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8002c2a:	4b13      	ldr	r3, [pc, #76]	; (8002c78 <MX_USART2_UART_Init+0x58>)
 8002c2c:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8002c30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c32:	4b11      	ldr	r3, [pc, #68]	; (8002c78 <MX_USART2_UART_Init+0x58>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c38:	4b0f      	ldr	r3, [pc, #60]	; (8002c78 <MX_USART2_UART_Init+0x58>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c3e:	4b0e      	ldr	r3, [pc, #56]	; (8002c78 <MX_USART2_UART_Init+0x58>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c44:	4b0c      	ldr	r3, [pc, #48]	; (8002c78 <MX_USART2_UART_Init+0x58>)
 8002c46:	220c      	movs	r2, #12
 8002c48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c4a:	4b0b      	ldr	r3, [pc, #44]	; (8002c78 <MX_USART2_UART_Init+0x58>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c50:	4b09      	ldr	r3, [pc, #36]	; (8002c78 <MX_USART2_UART_Init+0x58>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c56:	4b08      	ldr	r3, [pc, #32]	; (8002c78 <MX_USART2_UART_Init+0x58>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c5c:	4b06      	ldr	r3, [pc, #24]	; (8002c78 <MX_USART2_UART_Init+0x58>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c62:	4805      	ldr	r0, [pc, #20]	; (8002c78 <MX_USART2_UART_Init+0x58>)
 8002c64:	f008 fb9f 	bl	800b3a6 <HAL_UART_Init>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002c6e:	f000 fa83 	bl	8003178 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c72:	bf00      	nop
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	200005f4 	.word	0x200005f4
 8002c7c:	40004400 	.word	0x40004400

08002c80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002c86:	4b1a      	ldr	r3, [pc, #104]	; (8002cf0 <MX_DMA_Init+0x70>)
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	4a19      	ldr	r2, [pc, #100]	; (8002cf0 <MX_DMA_Init+0x70>)
 8002c8c:	f043 0302 	orr.w	r3, r3, #2
 8002c90:	6153      	str	r3, [r2, #20]
 8002c92:	4b17      	ldr	r3, [pc, #92]	; (8002cf0 <MX_DMA_Init+0x70>)
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	607b      	str	r3, [r7, #4]
 8002c9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002c9e:	4b14      	ldr	r3, [pc, #80]	; (8002cf0 <MX_DMA_Init+0x70>)
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	4a13      	ldr	r2, [pc, #76]	; (8002cf0 <MX_DMA_Init+0x70>)
 8002ca4:	f043 0301 	orr.w	r3, r3, #1
 8002ca8:	6153      	str	r3, [r2, #20]
 8002caa:	4b11      	ldr	r3, [pc, #68]	; (8002cf0 <MX_DMA_Init+0x70>)
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	603b      	str	r3, [r7, #0]
 8002cb4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	2100      	movs	r1, #0
 8002cba:	2010      	movs	r0, #16
 8002cbc:	f003 fa8b 	bl	80061d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002cc0:	2010      	movs	r0, #16
 8002cc2:	f003 faa4 	bl	800620e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	2100      	movs	r1, #0
 8002cca:	2011      	movs	r0, #17
 8002ccc:	f003 fa83 	bl	80061d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002cd0:	2011      	movs	r0, #17
 8002cd2:	f003 fa9c 	bl	800620e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	2100      	movs	r1, #0
 8002cda:	2038      	movs	r0, #56	; 0x38
 8002cdc:	f003 fa7b 	bl	80061d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8002ce0:	2038      	movs	r0, #56	; 0x38
 8002ce2:	f003 fa94 	bl	800620e <HAL_NVIC_EnableIRQ>

}
 8002ce6:	bf00      	nop
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	40021000 	.word	0x40021000

08002cf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b08a      	sub	sp, #40	; 0x28
 8002cf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cfa:	f107 0314 	add.w	r3, r7, #20
 8002cfe:	2200      	movs	r2, #0
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	605a      	str	r2, [r3, #4]
 8002d04:	609a      	str	r2, [r3, #8]
 8002d06:	60da      	str	r2, [r3, #12]
 8002d08:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d0a:	4b64      	ldr	r3, [pc, #400]	; (8002e9c <MX_GPIO_Init+0x1a8>)
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	4a63      	ldr	r2, [pc, #396]	; (8002e9c <MX_GPIO_Init+0x1a8>)
 8002d10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002d14:	6153      	str	r3, [r2, #20]
 8002d16:	4b61      	ldr	r3, [pc, #388]	; (8002e9c <MX_GPIO_Init+0x1a8>)
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d1e:	613b      	str	r3, [r7, #16]
 8002d20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d22:	4b5e      	ldr	r3, [pc, #376]	; (8002e9c <MX_GPIO_Init+0x1a8>)
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	4a5d      	ldr	r2, [pc, #372]	; (8002e9c <MX_GPIO_Init+0x1a8>)
 8002d28:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d2c:	6153      	str	r3, [r2, #20]
 8002d2e:	4b5b      	ldr	r3, [pc, #364]	; (8002e9c <MX_GPIO_Init+0x1a8>)
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d36:	60fb      	str	r3, [r7, #12]
 8002d38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d3a:	4b58      	ldr	r3, [pc, #352]	; (8002e9c <MX_GPIO_Init+0x1a8>)
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	4a57      	ldr	r2, [pc, #348]	; (8002e9c <MX_GPIO_Init+0x1a8>)
 8002d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d44:	6153      	str	r3, [r2, #20]
 8002d46:	4b55      	ldr	r3, [pc, #340]	; (8002e9c <MX_GPIO_Init+0x1a8>)
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d4e:	60bb      	str	r3, [r7, #8]
 8002d50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d52:	4b52      	ldr	r3, [pc, #328]	; (8002e9c <MX_GPIO_Init+0x1a8>)
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	4a51      	ldr	r2, [pc, #324]	; (8002e9c <MX_GPIO_Init+0x1a8>)
 8002d58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d5c:	6153      	str	r3, [r2, #20]
 8002d5e:	4b4f      	ldr	r3, [pc, #316]	; (8002e9c <MX_GPIO_Init+0x1a8>)
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d66:	607b      	str	r3, [r7, #4]
 8002d68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d70:	484b      	ldr	r0, [pc, #300]	; (8002ea0 <MX_GPIO_Init+0x1ac>)
 8002d72:	f003 fe23 	bl	80069bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 8002d76:	2200      	movs	r2, #0
 8002d78:	2103      	movs	r1, #3
 8002d7a:	484a      	ldr	r0, [pc, #296]	; (8002ea4 <MX_GPIO_Init+0x1b0>)
 8002d7c:	f003 fe1e 	bl	80069bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Port_2_Pin|Port_1_Pin|Port_3_Pin|Port_4_Pin, GPIO_PIN_RESET);
 8002d80:	2200      	movs	r2, #0
 8002d82:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 8002d86:	4848      	ldr	r0, [pc, #288]	; (8002ea8 <MX_GPIO_Init+0x1b4>)
 8002d88:	f003 fe18 	bl	80069bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Direct_GPIO_Port, Direct_Pin, GPIO_PIN_RESET);
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d96:	f003 fe11 	bl	80069bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : START_Pin STOP_Pin */
  GPIO_InitStruct.Pin = START_Pin|STOP_Pin;
 8002d9a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002d9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002da0:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002da4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da6:	2300      	movs	r3, #0
 8002da8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002daa:	f107 0314 	add.w	r3, r7, #20
 8002dae:	4619      	mov	r1, r3
 8002db0:	483b      	ldr	r0, [pc, #236]	; (8002ea0 <MX_GPIO_Init+0x1ac>)
 8002db2:	f003 fc71 	bl	8006698 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_1_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin;
 8002db6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 8002dc8:	f107 0314 	add.w	r3, r7, #20
 8002dcc:	4619      	mov	r1, r3
 8002dce:	4834      	ldr	r0, [pc, #208]	; (8002ea0 <MX_GPIO_Init+0x1ac>)
 8002dd0:	f003 fc62 	bl	8006698 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_2_Pin LED_3_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin|LED_3_Pin;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de0:	2300      	movs	r3, #0
 8002de2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002de4:	f107 0314 	add.w	r3, r7, #20
 8002de8:	4619      	mov	r1, r3
 8002dea:	482e      	ldr	r0, [pc, #184]	; (8002ea4 <MX_GPIO_Init+0x1b0>)
 8002dec:	f003 fc54 	bl	8006698 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_Pin */
  GPIO_InitStruct.Pin = INT_Pin;
 8002df0:	2302      	movs	r3, #2
 8002df2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002df4:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002df8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8002dfe:	f107 0314 	add.w	r3, r7, #20
 8002e02:	4619      	mov	r1, r3
 8002e04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e08:	f003 fc46 	bl	8006698 <HAL_GPIO_Init>

  /*Configure GPIO pins : Port_2_Pin Port_1_Pin Port_3_Pin Port_4_Pin */
  GPIO_InitStruct.Pin = Port_2_Pin|Port_1_Pin|Port_3_Pin|Port_4_Pin;
 8002e0c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002e10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e12:	2301      	movs	r3, #1
 8002e14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e16:	2300      	movs	r3, #0
 8002e18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e1e:	f107 0314 	add.w	r3, r7, #20
 8002e22:	4619      	mov	r1, r3
 8002e24:	4820      	ldr	r0, [pc, #128]	; (8002ea8 <MX_GPIO_Init+0x1b4>)
 8002e26:	f003 fc37 	bl	8006698 <HAL_GPIO_Init>

  /*Configure GPIO pin : Direct_Pin */
  GPIO_InitStruct.Pin = Direct_Pin;
 8002e2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e30:	2301      	movs	r3, #1
 8002e32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e34:	2300      	movs	r3, #0
 8002e36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Direct_GPIO_Port, &GPIO_InitStruct);
 8002e3c:	f107 0314 	add.w	r3, r7, #20
 8002e40:	4619      	mov	r1, r3
 8002e42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e46:	f003 fc27 	bl	8006698 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002e4a:	2320      	movs	r3, #32
 8002e4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002e4e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002e52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e54:	2300      	movs	r3, #0
 8002e56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e58:	f107 0314 	add.w	r3, r7, #20
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4812      	ldr	r0, [pc, #72]	; (8002ea8 <MX_GPIO_Init+0x1b4>)
 8002e60:	f003 fc1a 	bl	8006698 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 4, 0);
 8002e64:	2200      	movs	r2, #0
 8002e66:	2104      	movs	r1, #4
 8002e68:	2007      	movs	r0, #7
 8002e6a:	f003 f9b4 	bl	80061d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002e6e:	2007      	movs	r0, #7
 8002e70:	f003 f9cd 	bl	800620e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002e74:	2200      	movs	r2, #0
 8002e76:	2100      	movs	r1, #0
 8002e78:	2017      	movs	r0, #23
 8002e7a:	f003 f9ac 	bl	80061d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002e7e:	2017      	movs	r0, #23
 8002e80:	f003 f9c5 	bl	800620e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002e84:	2200      	movs	r2, #0
 8002e86:	2100      	movs	r1, #0
 8002e88:	2028      	movs	r0, #40	; 0x28
 8002e8a:	f003 f9a4 	bl	80061d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002e8e:	2028      	movs	r0, #40	; 0x28
 8002e90:	f003 f9bd 	bl	800620e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002e94:	bf00      	nop
 8002e96:	3728      	adds	r7, #40	; 0x28
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	48000800 	.word	0x48000800
 8002ea4:	48001400 	.word	0x48001400
 8002ea8:	48000400 	.word	0x48000400
 8002eac:	00000000 	.word	0x00000000

08002eb0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM3) {
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a14      	ldr	r2, [pc, #80]	; (8002f10 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d11e      	bne.n	8002f00 <HAL_TIM_PeriodElapsedCallback+0x50>
    	Pdc=Pdc+(Vdc*Adc/3600);
 8002ec2:	4b14      	ldr	r3, [pc, #80]	; (8002f14 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002ec4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ec8:	4b13      	ldr	r3, [pc, #76]	; (8002f18 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ece:	f7fd fb93 	bl	80005f8 <__aeabi_dmul>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	4610      	mov	r0, r2
 8002ed8:	4619      	mov	r1, r3
 8002eda:	a30b      	add	r3, pc, #44	; (adr r3, 8002f08 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee0:	f7fd fcb4 	bl	800084c <__aeabi_ddiv>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	4610      	mov	r0, r2
 8002eea:	4619      	mov	r1, r3
 8002eec:	4b0b      	ldr	r3, [pc, #44]	; (8002f1c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef2:	f7fd f9cb 	bl	800028c <__adddf3>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	460b      	mov	r3, r1
 8002efa:	4908      	ldr	r1, [pc, #32]	; (8002f1c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002efc:	e9c1 2300 	strd	r2, r3, [r1]
       // HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);

    }
}
 8002f00:	bf00      	nop
 8002f02:	3708      	adds	r7, #8
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	00000000 	.word	0x00000000
 8002f0c:	40ac2000 	.word	0x40ac2000
 8002f10:	40000400 	.word	0x40000400
 8002f14:	20000750 	.word	0x20000750
 8002f18:	20000758 	.word	0x20000758
 8002f1c:	20000760 	.word	0x20000760

08002f20 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f30:	d12a      	bne.n	8002f88 <HAL_TIM_IC_CaptureCallback+0x68>
    {
        if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	7f1b      	ldrb	r3, [r3, #28]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d126      	bne.n	8002f88 <HAL_TIM_IC_CaptureCallback+0x68>
        {



        	 period = 0;
 8002f3a:	4b15      	ldr	r3, [pc, #84]	; (8002f90 <HAL_TIM_IC_CaptureCallback+0x70>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]

             TIM2->CNT = 0;
 8002f40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f44:	2200      	movs	r2, #0
 8002f46:	625a      	str	r2, [r3, #36]	; 0x24

             period = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 8002f48:	2100      	movs	r1, #0
 8002f4a:	4812      	ldr	r0, [pc, #72]	; (8002f94 <HAL_TIM_IC_CaptureCallback+0x74>)
 8002f4c:	f007 fa32 	bl	800a3b4 <HAL_TIM_ReadCapturedValue>
 8002f50:	4603      	mov	r3, r0
 8002f52:	461a      	mov	r2, r3
 8002f54:	4b0e      	ldr	r3, [pc, #56]	; (8002f90 <HAL_TIM_IC_CaptureCallback+0x70>)
 8002f56:	601a      	str	r2, [r3, #0]
             pulseWidth = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
 8002f58:	2104      	movs	r1, #4
 8002f5a:	480e      	ldr	r0, [pc, #56]	; (8002f94 <HAL_TIM_IC_CaptureCallback+0x74>)
 8002f5c:	f007 fa2a 	bl	800a3b4 <HAL_TIM_ReadCapturedValue>
 8002f60:	4603      	mov	r3, r0
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	4b0c      	ldr	r3, [pc, #48]	; (8002f98 <HAL_TIM_IC_CaptureCallback+0x78>)
 8002f66:	801a      	strh	r2, [r3, #0]

             rpm= 480000000/period;
 8002f68:	4b09      	ldr	r3, [pc, #36]	; (8002f90 <HAL_TIM_IC_CaptureCallback+0x70>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a0b      	ldr	r2, [pc, #44]	; (8002f9c <HAL_TIM_IC_CaptureCallback+0x7c>)
 8002f6e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	4b0a      	ldr	r3, [pc, #40]	; (8002fa0 <HAL_TIM_IC_CaptureCallback+0x80>)
 8002f76:	801a      	strh	r2, [r3, #0]
             f=32000000/period;
 8002f78:	4b05      	ldr	r3, [pc, #20]	; (8002f90 <HAL_TIM_IC_CaptureCallback+0x70>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a09      	ldr	r2, [pc, #36]	; (8002fa4 <HAL_TIM_IC_CaptureCallback+0x84>)
 8002f7e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	4b08      	ldr	r3, [pc, #32]	; (8002fa8 <HAL_TIM_IC_CaptureCallback+0x88>)
 8002f86:	801a      	strh	r2, [r3, #0]

     //   if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
      //       {                        }

    }
}
 8002f88:	bf00      	nop
 8002f8a:	3708      	adds	r7, #8
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	20000734 	.word	0x20000734
 8002f94:	200003f0 	.word	0x200003f0
 8002f98:	20000738 	.word	0x20000738
 8002f9c:	1c9c3800 	.word	0x1c9c3800
 8002fa0:	2000073a 	.word	0x2000073a
 8002fa4:	01e84800 	.word	0x01e84800
 8002fa8:	2000073c 	.word	0x2000073c

08002fac <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_1) // если прерывание поступило от ножки PA1
 8002fb6:	88fb      	ldrh	r3, [r7, #6]
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d109      	bne.n	8002fd0 <HAL_GPIO_EXTI_Callback+0x24>
	   {

		if (GPIO_PIN_SET == HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1)){}
 8002fbc:	2102      	movs	r1, #2
 8002fbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fc2:	f003 fce3 	bl	800698c <HAL_GPIO_ReadPin>

		 if (GPIO_PIN_RESET == HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1)){}
 8002fc6:	2102      	movs	r1, #2
 8002fc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fcc:	f003 fcde 	bl	800698c <HAL_GPIO_ReadPin>

	   }


   if(GPIO_Pin == GPIO_PIN_13) // если прерывание поступило от ножки PC13
 8002fd0:	88fb      	ldrh	r3, [r7, #6]
 8002fd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fd6:	d131      	bne.n	800303c <HAL_GPIO_EXTI_Callback+0x90>
   {

	   if (GPIO_PIN_SET == HAL_GPIO_ReadPin (GPIOC, GPIO_PIN_13)){
 8002fd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002fdc:	484e      	ldr	r0, [pc, #312]	; (8003118 <HAL_GPIO_EXTI_Callback+0x16c>)
 8002fde:	f003 fcd5 	bl	800698c <HAL_GPIO_ReadPin>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d10e      	bne.n	8003006 <HAL_GPIO_EXTI_Callback+0x5a>
              LED_2_ON;
 8002fe8:	2201      	movs	r2, #1
 8002fea:	2101      	movs	r1, #1
 8002fec:	484b      	ldr	r0, [pc, #300]	; (800311c <HAL_GPIO_EXTI_Callback+0x170>)
 8002fee:	f003 fce5 	bl	80069bc <HAL_GPIO_WritePin>
	      	  BLDC_STATE[1]=0;
 8002ff2:	4b4b      	ldr	r3, [pc, #300]	; (8003120 <HAL_GPIO_EXTI_Callback+0x174>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	705a      	strb	r2, [r3, #1]
	      	  BLDC_MotorCommutation(SWITCH(BLDC_STATE));}
 8002ff8:	4849      	ldr	r0, [pc, #292]	; (8003120 <HAL_GPIO_EXTI_Callback+0x174>)
 8002ffa:	f7fd ffeb 	bl	8000fd4 <SWITCH>
 8002ffe:	4603      	mov	r3, r0
 8003000:	4618      	mov	r0, r3
 8003002:	f7fe f905 	bl	8001210 <BLDC_MotorCommutation>

       if (GPIO_PIN_RESET == HAL_GPIO_ReadPin (GPIOC, GPIO_PIN_13)){
 8003006:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800300a:	4843      	ldr	r0, [pc, #268]	; (8003118 <HAL_GPIO_EXTI_Callback+0x16c>)
 800300c:	f003 fcbe 	bl	800698c <HAL_GPIO_ReadPin>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10e      	bne.n	8003034 <HAL_GPIO_EXTI_Callback+0x88>
              LED_2_OFF;
 8003016:	2200      	movs	r2, #0
 8003018:	2101      	movs	r1, #1
 800301a:	4840      	ldr	r0, [pc, #256]	; (800311c <HAL_GPIO_EXTI_Callback+0x170>)
 800301c:	f003 fcce 	bl	80069bc <HAL_GPIO_WritePin>
    	      BLDC_STATE[1]=1;
 8003020:	4b3f      	ldr	r3, [pc, #252]	; (8003120 <HAL_GPIO_EXTI_Callback+0x174>)
 8003022:	2201      	movs	r2, #1
 8003024:	705a      	strb	r2, [r3, #1]
    	      BLDC_MotorCommutation(SWITCH(BLDC_STATE)); }
 8003026:	483e      	ldr	r0, [pc, #248]	; (8003120 <HAL_GPIO_EXTI_Callback+0x174>)
 8003028:	f7fd ffd4 	bl	8000fd4 <SWITCH>
 800302c:	4603      	mov	r3, r0
 800302e:	4618      	mov	r0, r3
 8003030:	f7fe f8ee 	bl	8001210 <BLDC_MotorCommutation>
              EXTI->PR = EXTI_PR_PR13;
 8003034:	4b3b      	ldr	r3, [pc, #236]	; (8003124 <HAL_GPIO_EXTI_Callback+0x178>)
 8003036:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800303a:	615a      	str	r2, [r3, #20]
         }


   if(GPIO_Pin == GPIO_PIN_14) // если прерывание поступило от ножки PC14
 800303c:	88fb      	ldrh	r3, [r7, #6]
 800303e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003042:	d131      	bne.n	80030a8 <HAL_GPIO_EXTI_Callback+0xfc>
     {

	   if (GPIO_PIN_SET == HAL_GPIO_ReadPin (GPIOC, GPIO_PIN_14)){
 8003044:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003048:	4833      	ldr	r0, [pc, #204]	; (8003118 <HAL_GPIO_EXTI_Callback+0x16c>)
 800304a:	f003 fc9f 	bl	800698c <HAL_GPIO_ReadPin>
 800304e:	4603      	mov	r3, r0
 8003050:	2b01      	cmp	r3, #1
 8003052:	d10e      	bne.n	8003072 <HAL_GPIO_EXTI_Callback+0xc6>
           LED_3_ON;
 8003054:	2201      	movs	r2, #1
 8003056:	2102      	movs	r1, #2
 8003058:	4830      	ldr	r0, [pc, #192]	; (800311c <HAL_GPIO_EXTI_Callback+0x170>)
 800305a:	f003 fcaf 	bl	80069bc <HAL_GPIO_WritePin>
		   BLDC_STATE[2]=0;
 800305e:	4b30      	ldr	r3, [pc, #192]	; (8003120 <HAL_GPIO_EXTI_Callback+0x174>)
 8003060:	2200      	movs	r2, #0
 8003062:	709a      	strb	r2, [r3, #2]
		   BLDC_MotorCommutation(SWITCH(BLDC_STATE));}
 8003064:	482e      	ldr	r0, [pc, #184]	; (8003120 <HAL_GPIO_EXTI_Callback+0x174>)
 8003066:	f7fd ffb5 	bl	8000fd4 <SWITCH>
 800306a:	4603      	mov	r3, r0
 800306c:	4618      	mov	r0, r3
 800306e:	f7fe f8cf 	bl	8001210 <BLDC_MotorCommutation>

	   if (GPIO_PIN_RESET == HAL_GPIO_ReadPin (GPIOC, GPIO_PIN_14)){
 8003072:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003076:	4828      	ldr	r0, [pc, #160]	; (8003118 <HAL_GPIO_EXTI_Callback+0x16c>)
 8003078:	f003 fc88 	bl	800698c <HAL_GPIO_ReadPin>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d10e      	bne.n	80030a0 <HAL_GPIO_EXTI_Callback+0xf4>
           LED_3_OFF;
 8003082:	2200      	movs	r2, #0
 8003084:	2102      	movs	r1, #2
 8003086:	4825      	ldr	r0, [pc, #148]	; (800311c <HAL_GPIO_EXTI_Callback+0x170>)
 8003088:	f003 fc98 	bl	80069bc <HAL_GPIO_WritePin>
		   BLDC_STATE[2]=1;
 800308c:	4b24      	ldr	r3, [pc, #144]	; (8003120 <HAL_GPIO_EXTI_Callback+0x174>)
 800308e:	2201      	movs	r2, #1
 8003090:	709a      	strb	r2, [r3, #2]
		   BLDC_MotorCommutation(SWITCH(BLDC_STATE));}
 8003092:	4823      	ldr	r0, [pc, #140]	; (8003120 <HAL_GPIO_EXTI_Callback+0x174>)
 8003094:	f7fd ff9e 	bl	8000fd4 <SWITCH>
 8003098:	4603      	mov	r3, r0
 800309a:	4618      	mov	r0, r3
 800309c:	f7fe f8b8 	bl	8001210 <BLDC_MotorCommutation>
	       EXTI->PR = EXTI_PR_PR14;
 80030a0:	4b20      	ldr	r3, [pc, #128]	; (8003124 <HAL_GPIO_EXTI_Callback+0x178>)
 80030a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80030a6:	615a      	str	r2, [r3, #20]
       }


   if(GPIO_Pin == GPIO_PIN_5) // если прерывание поступило от ножки PB_5
 80030a8:	88fb      	ldrh	r3, [r7, #6]
 80030aa:	2b20      	cmp	r3, #32
 80030ac:	d130      	bne.n	8003110 <HAL_GPIO_EXTI_Callback+0x164>
      {
	   if (GPIO_PIN_SET == HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_5)){
 80030ae:	2120      	movs	r1, #32
 80030b0:	481d      	ldr	r0, [pc, #116]	; (8003128 <HAL_GPIO_EXTI_Callback+0x17c>)
 80030b2:	f003 fc6b 	bl	800698c <HAL_GPIO_ReadPin>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d10f      	bne.n	80030dc <HAL_GPIO_EXTI_Callback+0x130>

		   LED_1_ON;
 80030bc:	2201      	movs	r2, #1
 80030be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030c2:	4815      	ldr	r0, [pc, #84]	; (8003118 <HAL_GPIO_EXTI_Callback+0x16c>)
 80030c4:	f003 fc7a 	bl	80069bc <HAL_GPIO_WritePin>
		   BLDC_STATE[0]=0;
 80030c8:	4b15      	ldr	r3, [pc, #84]	; (8003120 <HAL_GPIO_EXTI_Callback+0x174>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	701a      	strb	r2, [r3, #0]
		   BLDC_MotorCommutation(SWITCH(BLDC_STATE));
 80030ce:	4814      	ldr	r0, [pc, #80]	; (8003120 <HAL_GPIO_EXTI_Callback+0x174>)
 80030d0:	f7fd ff80 	bl	8000fd4 <SWITCH>
 80030d4:	4603      	mov	r3, r0
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7fe f89a 	bl	8001210 <BLDC_MotorCommutation>
	   }

     if (GPIO_PIN_RESET == HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_5)){
 80030dc:	2120      	movs	r1, #32
 80030de:	4812      	ldr	r0, [pc, #72]	; (8003128 <HAL_GPIO_EXTI_Callback+0x17c>)
 80030e0:	f003 fc54 	bl	800698c <HAL_GPIO_ReadPin>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10f      	bne.n	800310a <HAL_GPIO_EXTI_Callback+0x15e>
           LED_1_OFF;
 80030ea:	2200      	movs	r2, #0
 80030ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030f0:	4809      	ldr	r0, [pc, #36]	; (8003118 <HAL_GPIO_EXTI_Callback+0x16c>)
 80030f2:	f003 fc63 	bl	80069bc <HAL_GPIO_WritePin>
    	   BLDC_STATE[0]=1;
 80030f6:	4b0a      	ldr	r3, [pc, #40]	; (8003120 <HAL_GPIO_EXTI_Callback+0x174>)
 80030f8:	2201      	movs	r2, #1
 80030fa:	701a      	strb	r2, [r3, #0]
    	   BLDC_MotorCommutation(SWITCH(BLDC_STATE));}
 80030fc:	4808      	ldr	r0, [pc, #32]	; (8003120 <HAL_GPIO_EXTI_Callback+0x174>)
 80030fe:	f7fd ff69 	bl	8000fd4 <SWITCH>
 8003102:	4603      	mov	r3, r0
 8003104:	4618      	mov	r0, r3
 8003106:	f7fe f883 	bl	8001210 <BLDC_MotorCommutation>
           EXTI->PR = EXTI_PR_PR5;
 800310a:	4b06      	ldr	r3, [pc, #24]	; (8003124 <HAL_GPIO_EXTI_Callback+0x178>)
 800310c:	2220      	movs	r2, #32
 800310e:	615a      	str	r2, [r3, #20]
            }
        }
 8003110:	bf00      	nop
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	48000800 	.word	0x48000800
 800311c:	48001400 	.word	0x48001400
 8003120:	200008e0 	.word	0x200008e0
 8003124:	40010400 	.word	0x40010400
 8003128:	48000400 	.word	0x48000400

0800312c <HAL_UART_TxCpltCallback>:



void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)

{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]

RX_2;
 8003134:	2200      	movs	r2, #0
 8003136:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800313a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800313e:	f003 fc3d 	bl	80069bc <HAL_GPIO_WritePin>
}
 8003142:	bf00      	nop
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
	...

0800314c <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC2)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a05      	ldr	r2, [pc, #20]	; (8003170 <HAL_ADC_ConvCpltCallback+0x24>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d102      	bne.n	8003164 <HAL_ADC_ConvCpltCallback+0x18>
    {
        flag = 1;
 800315e:	4b05      	ldr	r3, [pc, #20]	; (8003174 <HAL_ADC_ConvCpltCallback+0x28>)
 8003160:	2201      	movs	r2, #1
 8003162:	701a      	strb	r2, [r3, #0]
    }
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr
 8003170:	50000100 	.word	0x50000100
 8003174:	20000731 	.word	0x20000731

08003178 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800317c:	b672      	cpsid	i
}
 800317e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003180:	e7fe      	b.n	8003180 <Error_Handler+0x8>

08003182 <calcCRC16ModBus>:

#include "modbusDevice.h"


// Compute the MODBUS RTU CRC
uint16_t calcCRC16ModBus(uint8_t *buffer, uint8_t u8length) {
 8003182:	b480      	push	{r7}
 8003184:	b087      	sub	sp, #28
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
 800318a:	460b      	mov	r3, r1
 800318c:	70fb      	strb	r3, [r7, #3]
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
 800318e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003192:	617b      	str	r3, [r7, #20]
	for (unsigned char i = 0; i < u8length; i++) {
 8003194:	2300      	movs	r3, #0
 8003196:	74fb      	strb	r3, [r7, #19]
 8003198:	e023      	b.n	80031e2 <calcCRC16ModBus+0x60>
		temp = temp ^ buffer[i];
 800319a:	7cfb      	ldrb	r3, [r7, #19]
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	4413      	add	r3, r2
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	461a      	mov	r2, r3
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	4053      	eors	r3, r2
 80031a8:	617b      	str	r3, [r7, #20]
		for (unsigned char j = 1; j <= 8; j++) {
 80031aa:	2301      	movs	r3, #1
 80031ac:	74bb      	strb	r3, [r7, #18]
 80031ae:	e012      	b.n	80031d6 <calcCRC16ModBus+0x54>
			flag = temp & 0x0001;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	60bb      	str	r3, [r7, #8]
			temp >>= 1;
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	085b      	lsrs	r3, r3, #1
 80031bc:	617b      	str	r3, [r7, #20]
			if (flag)
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d005      	beq.n	80031d0 <calcCRC16ModBus+0x4e>
				temp ^= 0xA001;
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	f483 4320 	eor.w	r3, r3, #40960	; 0xa000
 80031ca:	f083 0301 	eor.w	r3, r3, #1
 80031ce:	617b      	str	r3, [r7, #20]
		for (unsigned char j = 1; j <= 8; j++) {
 80031d0:	7cbb      	ldrb	r3, [r7, #18]
 80031d2:	3301      	adds	r3, #1
 80031d4:	74bb      	strb	r3, [r7, #18]
 80031d6:	7cbb      	ldrb	r3, [r7, #18]
 80031d8:	2b08      	cmp	r3, #8
 80031da:	d9e9      	bls.n	80031b0 <calcCRC16ModBus+0x2e>
	for (unsigned char i = 0; i < u8length; i++) {
 80031dc:	7cfb      	ldrb	r3, [r7, #19]
 80031de:	3301      	adds	r3, #1
 80031e0:	74fb      	strb	r3, [r7, #19]
 80031e2:	7cfa      	ldrb	r2, [r7, #19]
 80031e4:	78fb      	ldrb	r3, [r7, #3]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d3d7      	bcc.n	800319a <calcCRC16ModBus+0x18>
		}
	}
	// Reverse byte order.
	temp2 = temp >> 8;
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	0a1b      	lsrs	r3, r3, #8
 80031ee:	60fb      	str	r3, [r7, #12]
	temp = (temp << 8) | temp2;
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	021b      	lsls	r3, r3, #8
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	617b      	str	r3, [r7, #20]
	temp &= 0xFFFF;
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	617b      	str	r3, [r7, #20]
	// the returned value is already swapped
	// crcLo byte is first & crcHi byte is last
	return temp;
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	b29b      	uxth	r3, r3

}
 8003204:	4618      	mov	r0, r3
 8003206:	371c      	adds	r7, #28
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <sendModBusRequest>:
			rxDataCursor++;
		}
	}
}

modbusResult sendModBusRequest(UART_HandleTypeDef* huart, uint8_t* frame,uint8_t len) {
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	4613      	mov	r3, r2
 800321c:	71fb      	strb	r3, [r7, #7]

    uint16_t crc = calcCRC16ModBus(frame, len);
 800321e:	79fb      	ldrb	r3, [r7, #7]
 8003220:	4619      	mov	r1, r3
 8003222:	68b8      	ldr	r0, [r7, #8]
 8003224:	f7ff ffad 	bl	8003182 <calcCRC16ModBus>
 8003228:	4603      	mov	r3, r0
 800322a:	82fb      	strh	r3, [r7, #22]
    frame[len+1] = crc & 0xFF;       // CRC LOW
 800322c:	79fb      	ldrb	r3, [r7, #7]
 800322e:	3301      	adds	r3, #1
 8003230:	68ba      	ldr	r2, [r7, #8]
 8003232:	4413      	add	r3, r2
 8003234:	8afa      	ldrh	r2, [r7, #22]
 8003236:	b2d2      	uxtb	r2, r2
 8003238:	701a      	strb	r2, [r3, #0]
    frame[len] = (crc >> 8) & 0xFF;  // CRC HIGH
 800323a:	8afb      	ldrh	r3, [r7, #22]
 800323c:	0a1b      	lsrs	r3, r3, #8
 800323e:	b299      	uxth	r1, r3
 8003240:	79fb      	ldrb	r3, [r7, #7]
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	4413      	add	r3, r2
 8003246:	b2ca      	uxtb	r2, r1
 8003248:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,GPIO_PIN_SET);
 800324a:	2201      	movs	r2, #1
 800324c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003250:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003254:	f003 fbb2 	bl	80069bc <HAL_GPIO_WritePin>

	HAL_UART_Transmit_DMA(huart, frame, len+2);
 8003258:	79fb      	ldrb	r3, [r7, #7]
 800325a:	b29b      	uxth	r3, r3
 800325c:	3302      	adds	r3, #2
 800325e:	b29b      	uxth	r3, r3
 8003260:	461a      	mov	r2, r3
 8003262:	68b9      	ldr	r1, [r7, #8]
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f008 f8ed 	bl	800b444 <HAL_UART_Transmit_DMA>

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1,GPIO_PIN_RESET);
 800326a:	2200      	movs	r2, #0
 800326c:	2102      	movs	r1, #2
 800326e:	4804      	ldr	r0, [pc, #16]	; (8003280 <sendModBusRequest+0x70>)
 8003270:	f003 fba4 	bl	80069bc <HAL_GPIO_WritePin>
//	else{

	//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,GPIO_PIN_RESET);
	//	return MODBUS_ERROR;
	//}
}
 8003274:	bf00      	nop
 8003276:	4618      	mov	r0, r3
 8003278:	3718      	adds	r7, #24
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	48001400 	.word	0x48001400

08003284 <handleReadHoldingRegs>:
extern uint8_t rxFrame[255];
extern uint8_t txFrame[255];

extern uint8_t SLAVE_ID;

modbusResult handleReadHoldingRegs(UART_HandleTypeDef* huart,uint16_t* holdingRegisterValues){
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]

	uint16_t startingReg = (rxFrame[2]<<8) | rxFrame[3];
 800328e:	4b39      	ldr	r3, [pc, #228]	; (8003374 <handleReadHoldingRegs+0xf0>)
 8003290:	789b      	ldrb	r3, [r3, #2]
 8003292:	021b      	lsls	r3, r3, #8
 8003294:	b21a      	sxth	r2, r3
 8003296:	4b37      	ldr	r3, [pc, #220]	; (8003374 <handleReadHoldingRegs+0xf0>)
 8003298:	78db      	ldrb	r3, [r3, #3]
 800329a:	b21b      	sxth	r3, r3
 800329c:	4313      	orrs	r3, r2
 800329e:	b21b      	sxth	r3, r3
 80032a0:	82fb      	strh	r3, [r7, #22]
	uint16_t numOfregs = (rxFrame[4]<<8) | rxFrame[5];
 80032a2:	4b34      	ldr	r3, [pc, #208]	; (8003374 <handleReadHoldingRegs+0xf0>)
 80032a4:	791b      	ldrb	r3, [r3, #4]
 80032a6:	021b      	lsls	r3, r3, #8
 80032a8:	b21a      	sxth	r2, r3
 80032aa:	4b32      	ldr	r3, [pc, #200]	; (8003374 <handleReadHoldingRegs+0xf0>)
 80032ac:	795b      	ldrb	r3, [r3, #5]
 80032ae:	b21b      	sxth	r3, r3
 80032b0:	4313      	orrs	r3, r2
 80032b2:	b21b      	sxth	r3, r3
 80032b4:	817b      	strh	r3, [r7, #10]

	startingReg=startingReg-30001;
 80032b6:	8afb      	ldrh	r3, [r7, #22]
 80032b8:	f5a3 43ea 	sub.w	r3, r3, #29952	; 0x7500
 80032bc:	3b31      	subs	r3, #49	; 0x31
 80032be:	82fb      	strh	r3, [r7, #22]

	uint16_t endAddr = startingReg+numOfregs-1;
 80032c0:	8afa      	ldrh	r2, [r7, #22]
 80032c2:	897b      	ldrh	r3, [r7, #10]
 80032c4:	4413      	add	r3, r2
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	3b01      	subs	r3, #1
 80032ca:	813b      	strh	r3, [r7, #8]

	if((numOfregs<0)|(numOfregs >125)){
 80032cc:	897b      	ldrh	r3, [r7, #10]
 80032ce:	2b7d      	cmp	r3, #125	; 0x7d
 80032d0:	d905      	bls.n	80032de <handleReadHoldingRegs+0x5a>
		sendModbusException(huart,ILLEGAL_DATA_VALUE);
 80032d2:	2103      	movs	r1, #3
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f000 f94b 	bl	8003570 <sendModbusException>
		return MODBUS_ERROR;
 80032da:	2300      	movs	r3, #0
 80032dc:	e045      	b.n	800336a <handleReadHoldingRegs+0xe6>
	}
	if(endAddr > NUM_OF_HOLDING_REGS){
 80032de:	893b      	ldrh	r3, [r7, #8]
 80032e0:	2b1e      	cmp	r3, #30
 80032e2:	d905      	bls.n	80032f0 <handleReadHoldingRegs+0x6c>
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);
 80032e4:	2102      	movs	r1, #2
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 f942 	bl	8003570 <sendModbusException>
		return MODBUS_ERROR;
 80032ec:	2300      	movs	r3, #0
 80032ee:	e03c      	b.n	800336a <handleReadHoldingRegs+0xe6>
	}
	//  | SLAVE_ID | FUNC_CODE | BYTE_COUNT |    DATA     |    CRC    |
	//  |  1 byte  |   1 byte  |    1 byte  |   N*2 Bytes |   2 bytes |

	txFrame[0] = SLAVE_ID;
 80032f0:	4b21      	ldr	r3, [pc, #132]	; (8003378 <handleReadHoldingRegs+0xf4>)
 80032f2:	781a      	ldrb	r2, [r3, #0]
 80032f4:	4b21      	ldr	r3, [pc, #132]	; (800337c <handleReadHoldingRegs+0xf8>)
 80032f6:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];
 80032f8:	4b1e      	ldr	r3, [pc, #120]	; (8003374 <handleReadHoldingRegs+0xf0>)
 80032fa:	785a      	ldrb	r2, [r3, #1]
 80032fc:	4b1f      	ldr	r3, [pc, #124]	; (800337c <handleReadHoldingRegs+0xf8>)
 80032fe:	705a      	strb	r2, [r3, #1]
	txFrame[2] = numOfregs *2;
 8003300:	897b      	ldrh	r3, [r7, #10]
 8003302:	b2db      	uxtb	r3, r3
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	b2da      	uxtb	r2, r3
 8003308:	4b1c      	ldr	r3, [pc, #112]	; (800337c <handleReadHoldingRegs+0xf8>)
 800330a:	709a      	strb	r2, [r3, #2]

	int byteCursor=3;
 800330c:	2303      	movs	r3, #3
 800330e:	613b      	str	r3, [r7, #16]

	for(int i = 0; i<numOfregs;i++){
 8003310:	2300      	movs	r3, #0
 8003312:	60fb      	str	r3, [r7, #12]
 8003314:	e01d      	b.n	8003352 <handleReadHoldingRegs+0xce>
		txFrame[byteCursor++] =(holdingRegisterValues[startingReg]>>8) & 0xff; // Higher byte
 8003316:	8afb      	ldrh	r3, [r7, #22]
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	4413      	add	r3, r2
 800331e:	881b      	ldrh	r3, [r3, #0]
 8003320:	0a1b      	lsrs	r3, r3, #8
 8003322:	b299      	uxth	r1, r3
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	1c5a      	adds	r2, r3, #1
 8003328:	613a      	str	r2, [r7, #16]
 800332a:	b2c9      	uxtb	r1, r1
 800332c:	4a13      	ldr	r2, [pc, #76]	; (800337c <handleReadHoldingRegs+0xf8>)
 800332e:	54d1      	strb	r1, [r2, r3]
		txFrame[byteCursor++] =(holdingRegisterValues[startingReg]) & 0xff;    // Lower  byte
 8003330:	8afb      	ldrh	r3, [r7, #22]
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	4413      	add	r3, r2
 8003338:	8819      	ldrh	r1, [r3, #0]
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1c5a      	adds	r2, r3, #1
 800333e:	613a      	str	r2, [r7, #16]
 8003340:	b2c9      	uxtb	r1, r1
 8003342:	4a0e      	ldr	r2, [pc, #56]	; (800337c <handleReadHoldingRegs+0xf8>)
 8003344:	54d1      	strb	r1, [r2, r3]
		startingReg++;
 8003346:	8afb      	ldrh	r3, [r7, #22]
 8003348:	3301      	adds	r3, #1
 800334a:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i<numOfregs;i++){
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	3301      	adds	r3, #1
 8003350:	60fb      	str	r3, [r7, #12]
 8003352:	897b      	ldrh	r3, [r7, #10]
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	429a      	cmp	r2, r3
 8003358:	dbdd      	blt.n	8003316 <handleReadHoldingRegs+0x92>
	}
	sendModBusRequest(huart,txFrame,byteCursor);
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	b2db      	uxtb	r3, r3
 800335e:	461a      	mov	r2, r3
 8003360:	4906      	ldr	r1, [pc, #24]	; (800337c <handleReadHoldingRegs+0xf8>)
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7ff ff54 	bl	8003210 <sendModBusRequest>
	return 1;
 8003368:	2301      	movs	r3, #1

}
 800336a:	4618      	mov	r0, r3
 800336c:	3718      	adds	r7, #24
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	20000768 	.word	0x20000768
 8003378:	2000000b 	.word	0x2000000b
 800337c:	20000780 	.word	0x20000780

08003380 <handleReadInputRegs>:

modbusResult handleReadInputRegs(UART_HandleTypeDef* huart,uint16_t* inputRegisterValues){
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]

	uint16_t startingReg = (rxFrame[2]<<8) | rxFrame[3];
 800338a:	4b36      	ldr	r3, [pc, #216]	; (8003464 <handleReadInputRegs+0xe4>)
 800338c:	789b      	ldrb	r3, [r3, #2]
 800338e:	021b      	lsls	r3, r3, #8
 8003390:	b21a      	sxth	r2, r3
 8003392:	4b34      	ldr	r3, [pc, #208]	; (8003464 <handleReadInputRegs+0xe4>)
 8003394:	78db      	ldrb	r3, [r3, #3]
 8003396:	b21b      	sxth	r3, r3
 8003398:	4313      	orrs	r3, r2
 800339a:	b21b      	sxth	r3, r3
 800339c:	82fb      	strh	r3, [r7, #22]
	uint16_t numOfregs = (rxFrame[4]<<8) | rxFrame[5];
 800339e:	4b31      	ldr	r3, [pc, #196]	; (8003464 <handleReadInputRegs+0xe4>)
 80033a0:	791b      	ldrb	r3, [r3, #4]
 80033a2:	021b      	lsls	r3, r3, #8
 80033a4:	b21a      	sxth	r2, r3
 80033a6:	4b2f      	ldr	r3, [pc, #188]	; (8003464 <handleReadInputRegs+0xe4>)
 80033a8:	795b      	ldrb	r3, [r3, #5]
 80033aa:	b21b      	sxth	r3, r3
 80033ac:	4313      	orrs	r3, r2
 80033ae:	b21b      	sxth	r3, r3
 80033b0:	817b      	strh	r3, [r7, #10]

	uint16_t endAddr = startingReg+numOfregs-1;
 80033b2:	8afa      	ldrh	r2, [r7, #22]
 80033b4:	897b      	ldrh	r3, [r7, #10]
 80033b6:	4413      	add	r3, r2
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	3b01      	subs	r3, #1
 80033bc:	813b      	strh	r3, [r7, #8]

	if((numOfregs<0)|(numOfregs >125)){
 80033be:	897b      	ldrh	r3, [r7, #10]
 80033c0:	2b7d      	cmp	r3, #125	; 0x7d
 80033c2:	d905      	bls.n	80033d0 <handleReadInputRegs+0x50>
		sendModbusException(huart,ILLEGAL_DATA_VALUE);
 80033c4:	2103      	movs	r1, #3
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f8d2 	bl	8003570 <sendModbusException>
		return MODBUS_ERROR;
 80033cc:	2300      	movs	r3, #0
 80033ce:	e045      	b.n	800345c <handleReadInputRegs+0xdc>
	}
	if(endAddr > NUM_OF_HOLDING_REGS){
 80033d0:	893b      	ldrh	r3, [r7, #8]
 80033d2:	2b1e      	cmp	r3, #30
 80033d4:	d905      	bls.n	80033e2 <handleReadInputRegs+0x62>
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);
 80033d6:	2102      	movs	r1, #2
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 f8c9 	bl	8003570 <sendModbusException>
		return MODBUS_ERROR;
 80033de:	2300      	movs	r3, #0
 80033e0:	e03c      	b.n	800345c <handleReadInputRegs+0xdc>
	}
	//  | SLAVE_ID | FUNC_CODE | BYTE_COUNT |    DATA     |    CRC    |
	//  |  1 byte  |   1 byte  |    1 byte  |   N*2 Bytes |   2 bytes |

	txFrame[0] = SLAVE_ID;
 80033e2:	4b21      	ldr	r3, [pc, #132]	; (8003468 <handleReadInputRegs+0xe8>)
 80033e4:	781a      	ldrb	r2, [r3, #0]
 80033e6:	4b21      	ldr	r3, [pc, #132]	; (800346c <handleReadInputRegs+0xec>)
 80033e8:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];
 80033ea:	4b1e      	ldr	r3, [pc, #120]	; (8003464 <handleReadInputRegs+0xe4>)
 80033ec:	785a      	ldrb	r2, [r3, #1]
 80033ee:	4b1f      	ldr	r3, [pc, #124]	; (800346c <handleReadInputRegs+0xec>)
 80033f0:	705a      	strb	r2, [r3, #1]
	txFrame[2] = numOfregs *2;
 80033f2:	897b      	ldrh	r3, [r7, #10]
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	b2da      	uxtb	r2, r3
 80033fa:	4b1c      	ldr	r3, [pc, #112]	; (800346c <handleReadInputRegs+0xec>)
 80033fc:	709a      	strb	r2, [r3, #2]

	int byteCursor=3;
 80033fe:	2303      	movs	r3, #3
 8003400:	613b      	str	r3, [r7, #16]

	for(int i = 0; i<numOfregs;i++){
 8003402:	2300      	movs	r3, #0
 8003404:	60fb      	str	r3, [r7, #12]
 8003406:	e01d      	b.n	8003444 <handleReadInputRegs+0xc4>
		txFrame[byteCursor++] =(inputRegisterValues[startingReg]>>8) & 0xff; // Higher byte
 8003408:	8afb      	ldrh	r3, [r7, #22]
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	4413      	add	r3, r2
 8003410:	881b      	ldrh	r3, [r3, #0]
 8003412:	0a1b      	lsrs	r3, r3, #8
 8003414:	b299      	uxth	r1, r3
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1c5a      	adds	r2, r3, #1
 800341a:	613a      	str	r2, [r7, #16]
 800341c:	b2c9      	uxtb	r1, r1
 800341e:	4a13      	ldr	r2, [pc, #76]	; (800346c <handleReadInputRegs+0xec>)
 8003420:	54d1      	strb	r1, [r2, r3]
		txFrame[byteCursor++] =(inputRegisterValues[startingReg]) & 0xff;    // Lower  byte
 8003422:	8afb      	ldrh	r3, [r7, #22]
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	4413      	add	r3, r2
 800342a:	8819      	ldrh	r1, [r3, #0]
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	1c5a      	adds	r2, r3, #1
 8003430:	613a      	str	r2, [r7, #16]
 8003432:	b2c9      	uxtb	r1, r1
 8003434:	4a0d      	ldr	r2, [pc, #52]	; (800346c <handleReadInputRegs+0xec>)
 8003436:	54d1      	strb	r1, [r2, r3]
		startingReg++;
 8003438:	8afb      	ldrh	r3, [r7, #22]
 800343a:	3301      	adds	r3, #1
 800343c:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i<numOfregs;i++){
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	3301      	adds	r3, #1
 8003442:	60fb      	str	r3, [r7, #12]
 8003444:	897b      	ldrh	r3, [r7, #10]
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	429a      	cmp	r2, r3
 800344a:	dbdd      	blt.n	8003408 <handleReadInputRegs+0x88>
	}
	sendModBusRequest(huart,txFrame,byteCursor);
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	b2db      	uxtb	r3, r3
 8003450:	461a      	mov	r2, r3
 8003452:	4906      	ldr	r1, [pc, #24]	; (800346c <handleReadInputRegs+0xec>)
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f7ff fedb 	bl	8003210 <sendModBusRequest>
	return 1;
 800345a:	2301      	movs	r3, #1
}
 800345c:	4618      	mov	r0, r3
 800345e:	3718      	adds	r7, #24
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	20000768 	.word	0x20000768
 8003468:	2000000b 	.word	0x2000000b
 800346c:	20000780 	.word	0x20000780

08003470 <handleWriteMulyipleHandlingRegister>:
	sendModBusRequest(huart,txFrame, 6);
	return 1;

}

modbusResult handleWriteMulyipleHandlingRegister (UART_HandleTypeDef* huart,uint16_t* holdingRegisterValues){
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]

	uint16_t staringtAddr = ((rxFrame[2]<<8)| rxFrame[3]);
 800347a:	4b3a      	ldr	r3, [pc, #232]	; (8003564 <handleWriteMulyipleHandlingRegister+0xf4>)
 800347c:	789b      	ldrb	r3, [r3, #2]
 800347e:	021b      	lsls	r3, r3, #8
 8003480:	b21a      	sxth	r2, r3
 8003482:	4b38      	ldr	r3, [pc, #224]	; (8003564 <handleWriteMulyipleHandlingRegister+0xf4>)
 8003484:	78db      	ldrb	r3, [r3, #3]
 8003486:	b21b      	sxth	r3, r3
 8003488:	4313      	orrs	r3, r2
 800348a:	b21b      	sxth	r3, r3
 800348c:	82fb      	strh	r3, [r7, #22]

	uint16_t numRegs = ((rxFrame[4]<<8) | rxFrame[5]);   // number to registers master has requested
 800348e:	4b35      	ldr	r3, [pc, #212]	; (8003564 <handleWriteMulyipleHandlingRegister+0xf4>)
 8003490:	791b      	ldrb	r3, [r3, #4]
 8003492:	021b      	lsls	r3, r3, #8
 8003494:	b21a      	sxth	r2, r3
 8003496:	4b33      	ldr	r3, [pc, #204]	; (8003564 <handleWriteMulyipleHandlingRegister+0xf4>)
 8003498:	795b      	ldrb	r3, [r3, #5]
 800349a:	b21b      	sxth	r3, r3
 800349c:	4313      	orrs	r3, r2
 800349e:	b21b      	sxth	r3, r3
 80034a0:	817b      	strh	r3, [r7, #10]

	if ((numRegs<1)||(numRegs>123))  // maximum no. of Registers as per Modbus Specification
 80034a2:	897b      	ldrh	r3, [r7, #10]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d002      	beq.n	80034ae <handleWriteMulyipleHandlingRegister+0x3e>
 80034a8:	897b      	ldrh	r3, [r7, #10]
 80034aa:	2b7b      	cmp	r3, #123	; 0x7b
 80034ac:	d905      	bls.n	80034ba <handleWriteMulyipleHandlingRegister+0x4a>
	{
		sendModbusException(huart,ILLEGAL_DATA_VALUE);  // send an exception
 80034ae:	2103      	movs	r1, #3
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 f85d 	bl	8003570 <sendModbusException>
		return MODBUS_ERROR;
 80034b6:	2300      	movs	r3, #0
 80034b8:	e04f      	b.n	800355a <handleWriteMulyipleHandlingRegister+0xea>
	}

	uint16_t endAddr = staringtAddr + numRegs - 1;  // end Register
 80034ba:	8afa      	ldrh	r2, [r7, #22]
 80034bc:	897b      	ldrh	r3, [r7, #10]
 80034be:	4413      	add	r3, r2
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	3b01      	subs	r3, #1
 80034c4:	813b      	strh	r3, [r7, #8]
	if (endAddr> NUM_OF_HOLDING_REGS)  	// end Register can not be more than NUM_OF_HOLDING_REGS as
 80034c6:	893b      	ldrh	r3, [r7, #8]
 80034c8:	2b1e      	cmp	r3, #30
 80034ca:	d905      	bls.n	80034d8 <handleWriteMulyipleHandlingRegister+0x68>
										// we only have record of NUM_OF_HOLDING_REGS Registers in total
	{
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);   // send an exception
 80034cc:	2102      	movs	r1, #2
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 f84e 	bl	8003570 <sendModbusException>
		return MODBUS_ERROR;
 80034d4:	2300      	movs	r3, #0
 80034d6:	e040      	b.n	800355a <handleWriteMulyipleHandlingRegister+0xea>
	}

	int indx = 7;  // we need to keep track of index in rxFrame
 80034d8:	2307      	movs	r3, #7
 80034da:	613b      	str	r3, [r7, #16]

	for (int regCorsor=0; regCorsor<numRegs; regCorsor++){
 80034dc:	2300      	movs	r3, #0
 80034de:	60fb      	str	r3, [r7, #12]
 80034e0:	e019      	b.n	8003516 <handleWriteMulyipleHandlingRegister+0xa6>

		holdingRegisterValues[staringtAddr++] = (rxFrame[indx++]<<8)|rxFrame[indx++];
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1c5a      	adds	r2, r3, #1
 80034e6:	613a      	str	r2, [r7, #16]
 80034e8:	4a1e      	ldr	r2, [pc, #120]	; (8003564 <handleWriteMulyipleHandlingRegister+0xf4>)
 80034ea:	5cd3      	ldrb	r3, [r2, r3]
 80034ec:	021b      	lsls	r3, r3, #8
 80034ee:	b21a      	sxth	r2, r3
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1c59      	adds	r1, r3, #1
 80034f4:	6139      	str	r1, [r7, #16]
 80034f6:	491b      	ldr	r1, [pc, #108]	; (8003564 <handleWriteMulyipleHandlingRegister+0xf4>)
 80034f8:	5ccb      	ldrb	r3, [r1, r3]
 80034fa:	b21b      	sxth	r3, r3
 80034fc:	4313      	orrs	r3, r2
 80034fe:	b219      	sxth	r1, r3
 8003500:	8afb      	ldrh	r3, [r7, #22]
 8003502:	1c5a      	adds	r2, r3, #1
 8003504:	82fa      	strh	r2, [r7, #22]
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	4413      	add	r3, r2
 800350c:	b28a      	uxth	r2, r1
 800350e:	801a      	strh	r2, [r3, #0]
	for (int regCorsor=0; regCorsor<numRegs; regCorsor++){
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	3301      	adds	r3, #1
 8003514:	60fb      	str	r3, [r7, #12]
 8003516:	897b      	ldrh	r3, [r7, #10]
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	429a      	cmp	r2, r3
 800351c:	dbe1      	blt.n	80034e2 <handleWriteMulyipleHandlingRegister+0x72>

	}
	//   | SLAVE_ID | FUNCTION_CODE | Start Addr |  num of Regs |   CRC   |
	//   | 1 BYTE   |     1 BYTE    |  2 BYTE    |    2 BYTES   | 2 BYTES |

	txFrame[0] = SLAVE_ID;     // Slave ID
 800351e:	4b12      	ldr	r3, [pc, #72]	; (8003568 <handleWriteMulyipleHandlingRegister+0xf8>)
 8003520:	781a      	ldrb	r2, [r3, #0]
 8003522:	4b12      	ldr	r3, [pc, #72]	; (800356c <handleWriteMulyipleHandlingRegister+0xfc>)
 8003524:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];   // Function code
 8003526:	4b0f      	ldr	r3, [pc, #60]	; (8003564 <handleWriteMulyipleHandlingRegister+0xf4>)
 8003528:	785a      	ldrb	r2, [r3, #1]
 800352a:	4b10      	ldr	r3, [pc, #64]	; (800356c <handleWriteMulyipleHandlingRegister+0xfc>)
 800352c:	705a      	strb	r2, [r3, #1]

	txFrame[2] = rxFrame[2];   // Start Addr HIGH Byte
 800352e:	4b0d      	ldr	r3, [pc, #52]	; (8003564 <handleWriteMulyipleHandlingRegister+0xf4>)
 8003530:	789a      	ldrb	r2, [r3, #2]
 8003532:	4b0e      	ldr	r3, [pc, #56]	; (800356c <handleWriteMulyipleHandlingRegister+0xfc>)
 8003534:	709a      	strb	r2, [r3, #2]
	txFrame[3] = rxFrame[3];   // Start Addr LOW Byte
 8003536:	4b0b      	ldr	r3, [pc, #44]	; (8003564 <handleWriteMulyipleHandlingRegister+0xf4>)
 8003538:	78da      	ldrb	r2, [r3, #3]
 800353a:	4b0c      	ldr	r3, [pc, #48]	; (800356c <handleWriteMulyipleHandlingRegister+0xfc>)
 800353c:	70da      	strb	r2, [r3, #3]

	txFrame[4] = rxFrame[4];   // Num of Regs HIGH Byte
 800353e:	4b09      	ldr	r3, [pc, #36]	; (8003564 <handleWriteMulyipleHandlingRegister+0xf4>)
 8003540:	791a      	ldrb	r2, [r3, #4]
 8003542:	4b0a      	ldr	r3, [pc, #40]	; (800356c <handleWriteMulyipleHandlingRegister+0xfc>)
 8003544:	711a      	strb	r2, [r3, #4]
	txFrame[5] = rxFrame[5];   // Num of Regs LOW Byte
 8003546:	4b07      	ldr	r3, [pc, #28]	; (8003564 <handleWriteMulyipleHandlingRegister+0xf4>)
 8003548:	795a      	ldrb	r2, [r3, #5]
 800354a:	4b08      	ldr	r3, [pc, #32]	; (800356c <handleWriteMulyipleHandlingRegister+0xfc>)
 800354c:	715a      	strb	r2, [r3, #5]

	sendModBusRequest(huart,txFrame, 6);  // send data... CRC will be calculated in the function itself
 800354e:	2206      	movs	r2, #6
 8003550:	4906      	ldr	r1, [pc, #24]	; (800356c <handleWriteMulyipleHandlingRegister+0xfc>)
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7ff fe5c 	bl	8003210 <sendModBusRequest>
	return 1;   // success
 8003558:	2301      	movs	r3, #1

}
 800355a:	4618      	mov	r0, r3
 800355c:	3718      	adds	r7, #24
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	20000768 	.word	0x20000768
 8003568:	2000000b 	.word	0x2000000b
 800356c:	20000780 	.word	0x20000780

08003570 <sendModbusException>:

	sendModBusRequest(huart,txFrame, 6);
	return MODBUS_OK;
}

modbusResult sendModbusException(UART_HandleTypeDef* huart,modbusExceptionCode exceptionCode){
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	460b      	mov	r3, r1
 800357a:	70fb      	strb	r3, [r7, #3]

	// | SLAVE_ID | FUNCTION_CODE | Exception code | CRC     |
	// | 1 BYTE   |  1 BYTE       |    1 BYTE      | 2 BYTES |

	txFrame[0] = rxFrame[0];       		// Slave ID
 800357c:	4b0b      	ldr	r3, [pc, #44]	; (80035ac <sendModbusException+0x3c>)
 800357e:	781a      	ldrb	r2, [r3, #0]
 8003580:	4b0b      	ldr	r3, [pc, #44]	; (80035b0 <sendModbusException+0x40>)
 8003582:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1] | 0x80;  	// Adding 1 to the MSB of the function code
 8003584:	4b09      	ldr	r3, [pc, #36]	; (80035ac <sendModbusException+0x3c>)
 8003586:	785b      	ldrb	r3, [r3, #1]
 8003588:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800358c:	b2da      	uxtb	r2, r3
 800358e:	4b08      	ldr	r3, [pc, #32]	; (80035b0 <sendModbusException+0x40>)
 8003590:	705a      	strb	r2, [r3, #1]
	txFrame[2] =  exceptionCode;   		// Load the Exception code
 8003592:	4a07      	ldr	r2, [pc, #28]	; (80035b0 <sendModbusException+0x40>)
 8003594:	78fb      	ldrb	r3, [r7, #3]
 8003596:	7093      	strb	r3, [r2, #2]

	return 	sendModBusRequest(huart,txFrame, 3);  // send Data... CRC will be calculated in the function
 8003598:	2203      	movs	r2, #3
 800359a:	4905      	ldr	r1, [pc, #20]	; (80035b0 <sendModbusException+0x40>)
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f7ff fe37 	bl	8003210 <sendModBusRequest>
 80035a2:	4603      	mov	r3, r0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3708      	adds	r7, #8
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	20000768 	.word	0x20000768
 80035b0:	20000780 	.word	0x20000780

080035b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035ba:	4b12      	ldr	r3, [pc, #72]	; (8003604 <HAL_MspInit+0x50>)
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	4a11      	ldr	r2, [pc, #68]	; (8003604 <HAL_MspInit+0x50>)
 80035c0:	f043 0301 	orr.w	r3, r3, #1
 80035c4:	6193      	str	r3, [r2, #24]
 80035c6:	4b0f      	ldr	r3, [pc, #60]	; (8003604 <HAL_MspInit+0x50>)
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	607b      	str	r3, [r7, #4]
 80035d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035d2:	4b0c      	ldr	r3, [pc, #48]	; (8003604 <HAL_MspInit+0x50>)
 80035d4:	69db      	ldr	r3, [r3, #28]
 80035d6:	4a0b      	ldr	r2, [pc, #44]	; (8003604 <HAL_MspInit+0x50>)
 80035d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035dc:	61d3      	str	r3, [r2, #28]
 80035de:	4b09      	ldr	r3, [pc, #36]	; (8003604 <HAL_MspInit+0x50>)
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e6:	603b      	str	r3, [r7, #0]
 80035e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80035ea:	2200      	movs	r2, #0
 80035ec:	2100      	movs	r1, #0
 80035ee:	2005      	movs	r0, #5
 80035f0:	f002 fdf1 	bl	80061d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80035f4:	2005      	movs	r0, #5
 80035f6:	f002 fe0a 	bl	800620e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035fa:	bf00      	nop
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	40021000 	.word	0x40021000

08003608 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b08e      	sub	sp, #56	; 0x38
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003610:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003614:	2200      	movs	r2, #0
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	605a      	str	r2, [r3, #4]
 800361a:	609a      	str	r2, [r3, #8]
 800361c:	60da      	str	r2, [r3, #12]
 800361e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003628:	d136      	bne.n	8003698 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800362a:	4b70      	ldr	r3, [pc, #448]	; (80037ec <HAL_ADC_MspInit+0x1e4>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	3301      	adds	r3, #1
 8003630:	4a6e      	ldr	r2, [pc, #440]	; (80037ec <HAL_ADC_MspInit+0x1e4>)
 8003632:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003634:	4b6d      	ldr	r3, [pc, #436]	; (80037ec <HAL_ADC_MspInit+0x1e4>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d10b      	bne.n	8003654 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800363c:	4b6c      	ldr	r3, [pc, #432]	; (80037f0 <HAL_ADC_MspInit+0x1e8>)
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	4a6b      	ldr	r2, [pc, #428]	; (80037f0 <HAL_ADC_MspInit+0x1e8>)
 8003642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003646:	6153      	str	r3, [r2, #20]
 8003648:	4b69      	ldr	r3, [pc, #420]	; (80037f0 <HAL_ADC_MspInit+0x1e8>)
 800364a:	695b      	ldr	r3, [r3, #20]
 800364c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003650:	623b      	str	r3, [r7, #32]
 8003652:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003654:	4b66      	ldr	r3, [pc, #408]	; (80037f0 <HAL_ADC_MspInit+0x1e8>)
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	4a65      	ldr	r2, [pc, #404]	; (80037f0 <HAL_ADC_MspInit+0x1e8>)
 800365a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800365e:	6153      	str	r3, [r2, #20]
 8003660:	4b63      	ldr	r3, [pc, #396]	; (80037f0 <HAL_ADC_MspInit+0x1e8>)
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003668:	61fb      	str	r3, [r7, #28]
 800366a:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = V_adc_Pin;
 800366c:	2308      	movs	r3, #8
 800366e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003670:	2303      	movs	r3, #3
 8003672:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003674:	2300      	movs	r3, #0
 8003676:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(V_adc_GPIO_Port, &GPIO_InitStruct);
 8003678:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800367c:	4619      	mov	r1, r3
 800367e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003682:	f003 f809 	bl	8006698 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8003686:	2200      	movs	r2, #0
 8003688:	2102      	movs	r1, #2
 800368a:	2012      	movs	r0, #18
 800368c:	f002 fda3 	bl	80061d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8003690:	2012      	movs	r0, #18
 8003692:	f002 fdbc 	bl	800620e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003696:	e0a4      	b.n	80037e2 <HAL_ADC_MspInit+0x1da>
  else if(hadc->Instance==ADC2)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a55      	ldr	r2, [pc, #340]	; (80037f4 <HAL_ADC_MspInit+0x1ec>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d176      	bne.n	8003790 <HAL_ADC_MspInit+0x188>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80036a2:	4b52      	ldr	r3, [pc, #328]	; (80037ec <HAL_ADC_MspInit+0x1e4>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	3301      	adds	r3, #1
 80036a8:	4a50      	ldr	r2, [pc, #320]	; (80037ec <HAL_ADC_MspInit+0x1e4>)
 80036aa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80036ac:	4b4f      	ldr	r3, [pc, #316]	; (80037ec <HAL_ADC_MspInit+0x1e4>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d10b      	bne.n	80036cc <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80036b4:	4b4e      	ldr	r3, [pc, #312]	; (80037f0 <HAL_ADC_MspInit+0x1e8>)
 80036b6:	695b      	ldr	r3, [r3, #20]
 80036b8:	4a4d      	ldr	r2, [pc, #308]	; (80037f0 <HAL_ADC_MspInit+0x1e8>)
 80036ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036be:	6153      	str	r3, [r2, #20]
 80036c0:	4b4b      	ldr	r3, [pc, #300]	; (80037f0 <HAL_ADC_MspInit+0x1e8>)
 80036c2:	695b      	ldr	r3, [r3, #20]
 80036c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c8:	61bb      	str	r3, [r7, #24]
 80036ca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036cc:	4b48      	ldr	r3, [pc, #288]	; (80037f0 <HAL_ADC_MspInit+0x1e8>)
 80036ce:	695b      	ldr	r3, [r3, #20]
 80036d0:	4a47      	ldr	r2, [pc, #284]	; (80037f0 <HAL_ADC_MspInit+0x1e8>)
 80036d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036d6:	6153      	str	r3, [r2, #20]
 80036d8:	4b45      	ldr	r3, [pc, #276]	; (80037f0 <HAL_ADC_MspInit+0x1e8>)
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e0:	617b      	str	r3, [r7, #20]
 80036e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036e4:	4b42      	ldr	r3, [pc, #264]	; (80037f0 <HAL_ADC_MspInit+0x1e8>)
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	4a41      	ldr	r2, [pc, #260]	; (80037f0 <HAL_ADC_MspInit+0x1e8>)
 80036ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036ee:	6153      	str	r3, [r2, #20]
 80036f0:	4b3f      	ldr	r3, [pc, #252]	; (80037f0 <HAL_ADC_MspInit+0x1e8>)
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036f8:	613b      	str	r3, [r7, #16]
 80036fa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = HAL_1_Pin|HAL_2_Pin|HAL_3_Pin|HAL_4_Pin;
 80036fc:	23f0      	movs	r3, #240	; 0xf0
 80036fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003700:	2303      	movs	r3, #3
 8003702:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003704:	2300      	movs	r3, #0
 8003706:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003708:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800370c:	4619      	mov	r1, r3
 800370e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003712:	f002 ffc1 	bl	8006698 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = A_adc_Pin;
 8003716:	2304      	movs	r3, #4
 8003718:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800371a:	2303      	movs	r3, #3
 800371c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800371e:	2300      	movs	r3, #0
 8003720:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(A_adc_GPIO_Port, &GPIO_InitStruct);
 8003722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003726:	4619      	mov	r1, r3
 8003728:	4833      	ldr	r0, [pc, #204]	; (80037f8 <HAL_ADC_MspInit+0x1f0>)
 800372a:	f002 ffb5 	bl	8006698 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 800372e:	4b33      	ldr	r3, [pc, #204]	; (80037fc <HAL_ADC_MspInit+0x1f4>)
 8003730:	4a33      	ldr	r2, [pc, #204]	; (8003800 <HAL_ADC_MspInit+0x1f8>)
 8003732:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003734:	4b31      	ldr	r3, [pc, #196]	; (80037fc <HAL_ADC_MspInit+0x1f4>)
 8003736:	2200      	movs	r2, #0
 8003738:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800373a:	4b30      	ldr	r3, [pc, #192]	; (80037fc <HAL_ADC_MspInit+0x1f4>)
 800373c:	2200      	movs	r2, #0
 800373e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003740:	4b2e      	ldr	r3, [pc, #184]	; (80037fc <HAL_ADC_MspInit+0x1f4>)
 8003742:	2280      	movs	r2, #128	; 0x80
 8003744:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003746:	4b2d      	ldr	r3, [pc, #180]	; (80037fc <HAL_ADC_MspInit+0x1f4>)
 8003748:	f44f 7280 	mov.w	r2, #256	; 0x100
 800374c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800374e:	4b2b      	ldr	r3, [pc, #172]	; (80037fc <HAL_ADC_MspInit+0x1f4>)
 8003750:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003754:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8003756:	4b29      	ldr	r3, [pc, #164]	; (80037fc <HAL_ADC_MspInit+0x1f4>)
 8003758:	2200      	movs	r2, #0
 800375a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800375c:	4b27      	ldr	r3, [pc, #156]	; (80037fc <HAL_ADC_MspInit+0x1f4>)
 800375e:	2200      	movs	r2, #0
 8003760:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8003762:	4826      	ldr	r0, [pc, #152]	; (80037fc <HAL_ADC_MspInit+0x1f4>)
 8003764:	f002 fd6d 	bl	8006242 <HAL_DMA_Init>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <HAL_ADC_MspInit+0x16a>
      Error_Handler();
 800376e:	f7ff fd03 	bl	8003178 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a21      	ldr	r2, [pc, #132]	; (80037fc <HAL_ADC_MspInit+0x1f4>)
 8003776:	639a      	str	r2, [r3, #56]	; 0x38
 8003778:	4a20      	ldr	r2, [pc, #128]	; (80037fc <HAL_ADC_MspInit+0x1f4>)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 800377e:	2200      	movs	r2, #0
 8003780:	2102      	movs	r1, #2
 8003782:	2012      	movs	r0, #18
 8003784:	f002 fd27 	bl	80061d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8003788:	2012      	movs	r0, #18
 800378a:	f002 fd40 	bl	800620e <HAL_NVIC_EnableIRQ>
}
 800378e:	e028      	b.n	80037e2 <HAL_ADC_MspInit+0x1da>
  else if(hadc->Instance==ADC3)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a1b      	ldr	r2, [pc, #108]	; (8003804 <HAL_ADC_MspInit+0x1fc>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d123      	bne.n	80037e2 <HAL_ADC_MspInit+0x1da>
    __HAL_RCC_ADC34_CLK_ENABLE();
 800379a:	4b15      	ldr	r3, [pc, #84]	; (80037f0 <HAL_ADC_MspInit+0x1e8>)
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	4a14      	ldr	r2, [pc, #80]	; (80037f0 <HAL_ADC_MspInit+0x1e8>)
 80037a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80037a4:	6153      	str	r3, [r2, #20]
 80037a6:	4b12      	ldr	r3, [pc, #72]	; (80037f0 <HAL_ADC_MspInit+0x1e8>)
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037ae:	60fb      	str	r3, [r7, #12]
 80037b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037b2:	4b0f      	ldr	r3, [pc, #60]	; (80037f0 <HAL_ADC_MspInit+0x1e8>)
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	4a0e      	ldr	r2, [pc, #56]	; (80037f0 <HAL_ADC_MspInit+0x1e8>)
 80037b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037bc:	6153      	str	r3, [r2, #20]
 80037be:	4b0c      	ldr	r3, [pc, #48]	; (80037f0 <HAL_ADC_MspInit+0x1e8>)
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037c6:	60bb      	str	r3, [r7, #8]
 80037c8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SENS_1_Pin|SENS_2_Pin;
 80037ca:	2303      	movs	r3, #3
 80037cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037ce:	2303      	movs	r3, #3
 80037d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037d2:	2300      	movs	r3, #0
 80037d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037da:	4619      	mov	r1, r3
 80037dc:	4806      	ldr	r0, [pc, #24]	; (80037f8 <HAL_ADC_MspInit+0x1f0>)
 80037de:	f002 ff5b 	bl	8006698 <HAL_GPIO_Init>
}
 80037e2:	bf00      	nop
 80037e4:	3738      	adds	r7, #56	; 0x38
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	20000900 	.word	0x20000900
 80037f0:	40021000 	.word	0x40021000
 80037f4:	50000100 	.word	0x50000100
 80037f8:	48000400 	.word	0x48000400
 80037fc:	200002ec 	.word	0x200002ec
 8003800:	40020408 	.word	0x40020408
 8003804:	50000400 	.word	0x50000400

08003808 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b08a      	sub	sp, #40	; 0x28
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003810:	f107 0314 	add.w	r3, r7, #20
 8003814:	2200      	movs	r2, #0
 8003816:	601a      	str	r2, [r3, #0]
 8003818:	605a      	str	r2, [r3, #4]
 800381a:	609a      	str	r2, [r3, #8]
 800381c:	60da      	str	r2, [r3, #12]
 800381e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a17      	ldr	r2, [pc, #92]	; (8003884 <HAL_I2C_MspInit+0x7c>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d128      	bne.n	800387c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800382a:	4b17      	ldr	r3, [pc, #92]	; (8003888 <HAL_I2C_MspInit+0x80>)
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	4a16      	ldr	r2, [pc, #88]	; (8003888 <HAL_I2C_MspInit+0x80>)
 8003830:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003834:	6153      	str	r3, [r2, #20]
 8003836:	4b14      	ldr	r3, [pc, #80]	; (8003888 <HAL_I2C_MspInit+0x80>)
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800383e:	613b      	str	r3, [r7, #16]
 8003840:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003842:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003846:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003848:	2312      	movs	r3, #18
 800384a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800384c:	2300      	movs	r3, #0
 800384e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003850:	2303      	movs	r3, #3
 8003852:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003854:	2304      	movs	r3, #4
 8003856:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003858:	f107 0314 	add.w	r3, r7, #20
 800385c:	4619      	mov	r1, r3
 800385e:	480b      	ldr	r0, [pc, #44]	; (800388c <HAL_I2C_MspInit+0x84>)
 8003860:	f002 ff1a 	bl	8006698 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003864:	4b08      	ldr	r3, [pc, #32]	; (8003888 <HAL_I2C_MspInit+0x80>)
 8003866:	69db      	ldr	r3, [r3, #28]
 8003868:	4a07      	ldr	r2, [pc, #28]	; (8003888 <HAL_I2C_MspInit+0x80>)
 800386a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800386e:	61d3      	str	r3, [r2, #28]
 8003870:	4b05      	ldr	r3, [pc, #20]	; (8003888 <HAL_I2C_MspInit+0x80>)
 8003872:	69db      	ldr	r3, [r3, #28]
 8003874:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003878:	60fb      	str	r3, [r7, #12]
 800387a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800387c:	bf00      	nop
 800387e:	3728      	adds	r7, #40	; 0x28
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	40005400 	.word	0x40005400
 8003888:	40021000 	.word	0x40021000
 800388c:	48000400 	.word	0x48000400

08003890 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a0d      	ldr	r2, [pc, #52]	; (80038d4 <HAL_RTC_MspInit+0x44>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d111      	bne.n	80038c6 <HAL_RTC_MspInit+0x36>
 80038a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038a6:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	fa93 f3a3 	rbit	r3, r3
 80038ae:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80038b0:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80038b2:	fab3 f383 	clz	r3, r3
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	461a      	mov	r2, r3
 80038ba:	4b07      	ldr	r3, [pc, #28]	; (80038d8 <HAL_RTC_MspInit+0x48>)
 80038bc:	4413      	add	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	461a      	mov	r2, r3
 80038c2:	2301      	movs	r3, #1
 80038c4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80038c6:	bf00      	nop
 80038c8:	3714      	adds	r7, #20
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	40002800 	.word	0x40002800
 80038d8:	10908100 	.word	0x10908100

080038dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b08e      	sub	sp, #56	; 0x38
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]
 80038ec:	605a      	str	r2, [r3, #4]
 80038ee:	609a      	str	r2, [r3, #8]
 80038f0:	60da      	str	r2, [r3, #12]
 80038f2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a50      	ldr	r2, [pc, #320]	; (8003a3c <HAL_TIM_Base_MspInit+0x160>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d10c      	bne.n	8003918 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80038fe:	4b50      	ldr	r3, [pc, #320]	; (8003a40 <HAL_TIM_Base_MspInit+0x164>)
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	4a4f      	ldr	r2, [pc, #316]	; (8003a40 <HAL_TIM_Base_MspInit+0x164>)
 8003904:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003908:	6193      	str	r3, [r2, #24]
 800390a:	4b4d      	ldr	r3, [pc, #308]	; (8003a40 <HAL_TIM_Base_MspInit+0x164>)
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003912:	623b      	str	r3, [r7, #32]
 8003914:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8003916:	e08d      	b.n	8003a34 <HAL_TIM_Base_MspInit+0x158>
  else if(htim_base->Instance==TIM2)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003920:	d131      	bne.n	8003986 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003922:	4b47      	ldr	r3, [pc, #284]	; (8003a40 <HAL_TIM_Base_MspInit+0x164>)
 8003924:	69db      	ldr	r3, [r3, #28]
 8003926:	4a46      	ldr	r2, [pc, #280]	; (8003a40 <HAL_TIM_Base_MspInit+0x164>)
 8003928:	f043 0301 	orr.w	r3, r3, #1
 800392c:	61d3      	str	r3, [r2, #28]
 800392e:	4b44      	ldr	r3, [pc, #272]	; (8003a40 <HAL_TIM_Base_MspInit+0x164>)
 8003930:	69db      	ldr	r3, [r3, #28]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	61fb      	str	r3, [r7, #28]
 8003938:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800393a:	4b41      	ldr	r3, [pc, #260]	; (8003a40 <HAL_TIM_Base_MspInit+0x164>)
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	4a40      	ldr	r2, [pc, #256]	; (8003a40 <HAL_TIM_Base_MspInit+0x164>)
 8003940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003944:	6153      	str	r3, [r2, #20]
 8003946:	4b3e      	ldr	r3, [pc, #248]	; (8003a40 <HAL_TIM_Base_MspInit+0x164>)
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394e:	61bb      	str	r3, [r7, #24]
 8003950:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003952:	2301      	movs	r3, #1
 8003954:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003956:	2302      	movs	r3, #2
 8003958:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800395a:	2300      	movs	r3, #0
 800395c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800395e:	2300      	movs	r3, #0
 8003960:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003962:	2301      	movs	r3, #1
 8003964:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800396a:	4619      	mov	r1, r3
 800396c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003970:	f002 fe92 	bl	8006698 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8003974:	2200      	movs	r2, #0
 8003976:	2103      	movs	r1, #3
 8003978:	201c      	movs	r0, #28
 800397a:	f002 fc2c 	bl	80061d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800397e:	201c      	movs	r0, #28
 8003980:	f002 fc45 	bl	800620e <HAL_NVIC_EnableIRQ>
}
 8003984:	e056      	b.n	8003a34 <HAL_TIM_Base_MspInit+0x158>
  else if(htim_base->Instance==TIM3)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a2e      	ldr	r2, [pc, #184]	; (8003a44 <HAL_TIM_Base_MspInit+0x168>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d114      	bne.n	80039ba <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003990:	4b2b      	ldr	r3, [pc, #172]	; (8003a40 <HAL_TIM_Base_MspInit+0x164>)
 8003992:	69db      	ldr	r3, [r3, #28]
 8003994:	4a2a      	ldr	r2, [pc, #168]	; (8003a40 <HAL_TIM_Base_MspInit+0x164>)
 8003996:	f043 0302 	orr.w	r3, r3, #2
 800399a:	61d3      	str	r3, [r2, #28]
 800399c:	4b28      	ldr	r3, [pc, #160]	; (8003a40 <HAL_TIM_Base_MspInit+0x164>)
 800399e:	69db      	ldr	r3, [r3, #28]
 80039a0:	f003 0302 	and.w	r3, r3, #2
 80039a4:	617b      	str	r3, [r7, #20]
 80039a6:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80039a8:	2200      	movs	r2, #0
 80039aa:	2100      	movs	r1, #0
 80039ac:	201d      	movs	r0, #29
 80039ae:	f002 fc12 	bl	80061d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80039b2:	201d      	movs	r0, #29
 80039b4:	f002 fc2b 	bl	800620e <HAL_NVIC_EnableIRQ>
}
 80039b8:	e03c      	b.n	8003a34 <HAL_TIM_Base_MspInit+0x158>
  else if(htim_base->Instance==TIM4)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a22      	ldr	r2, [pc, #136]	; (8003a48 <HAL_TIM_Base_MspInit+0x16c>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d114      	bne.n	80039ee <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80039c4:	4b1e      	ldr	r3, [pc, #120]	; (8003a40 <HAL_TIM_Base_MspInit+0x164>)
 80039c6:	69db      	ldr	r3, [r3, #28]
 80039c8:	4a1d      	ldr	r2, [pc, #116]	; (8003a40 <HAL_TIM_Base_MspInit+0x164>)
 80039ca:	f043 0304 	orr.w	r3, r3, #4
 80039ce:	61d3      	str	r3, [r2, #28]
 80039d0:	4b1b      	ldr	r3, [pc, #108]	; (8003a40 <HAL_TIM_Base_MspInit+0x164>)
 80039d2:	69db      	ldr	r3, [r3, #28]
 80039d4:	f003 0304 	and.w	r3, r3, #4
 80039d8:	613b      	str	r3, [r7, #16]
 80039da:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80039dc:	2200      	movs	r2, #0
 80039de:	2100      	movs	r1, #0
 80039e0:	201e      	movs	r0, #30
 80039e2:	f002 fbf8 	bl	80061d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80039e6:	201e      	movs	r0, #30
 80039e8:	f002 fc11 	bl	800620e <HAL_NVIC_EnableIRQ>
}
 80039ec:	e022      	b.n	8003a34 <HAL_TIM_Base_MspInit+0x158>
  else if(htim_base->Instance==TIM8)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a16      	ldr	r2, [pc, #88]	; (8003a4c <HAL_TIM_Base_MspInit+0x170>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d10c      	bne.n	8003a12 <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80039f8:	4b11      	ldr	r3, [pc, #68]	; (8003a40 <HAL_TIM_Base_MspInit+0x164>)
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	4a10      	ldr	r2, [pc, #64]	; (8003a40 <HAL_TIM_Base_MspInit+0x164>)
 80039fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a02:	6193      	str	r3, [r2, #24]
 8003a04:	4b0e      	ldr	r3, [pc, #56]	; (8003a40 <HAL_TIM_Base_MspInit+0x164>)
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a0c:	60fb      	str	r3, [r7, #12]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
}
 8003a10:	e010      	b.n	8003a34 <HAL_TIM_Base_MspInit+0x158>
  else if(htim_base->Instance==TIM15)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a0e      	ldr	r2, [pc, #56]	; (8003a50 <HAL_TIM_Base_MspInit+0x174>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d10b      	bne.n	8003a34 <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003a1c:	4b08      	ldr	r3, [pc, #32]	; (8003a40 <HAL_TIM_Base_MspInit+0x164>)
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	4a07      	ldr	r2, [pc, #28]	; (8003a40 <HAL_TIM_Base_MspInit+0x164>)
 8003a22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a26:	6193      	str	r3, [r2, #24]
 8003a28:	4b05      	ldr	r3, [pc, #20]	; (8003a40 <HAL_TIM_Base_MspInit+0x164>)
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a30:	60bb      	str	r3, [r7, #8]
 8003a32:	68bb      	ldr	r3, [r7, #8]
}
 8003a34:	bf00      	nop
 8003a36:	3738      	adds	r7, #56	; 0x38
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	40012c00 	.word	0x40012c00
 8003a40:	40021000 	.word	0x40021000
 8003a44:	40000400 	.word	0x40000400
 8003a48:	40000800 	.word	0x40000800
 8003a4c:	40013400 	.word	0x40013400
 8003a50:	40014000 	.word	0x40014000

08003a54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b08c      	sub	sp, #48	; 0x30
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a5c:	f107 031c 	add.w	r3, r7, #28
 8003a60:	2200      	movs	r2, #0
 8003a62:	601a      	str	r2, [r3, #0]
 8003a64:	605a      	str	r2, [r3, #4]
 8003a66:	609a      	str	r2, [r3, #8]
 8003a68:	60da      	str	r2, [r3, #12]
 8003a6a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a4c      	ldr	r2, [pc, #304]	; (8003ba4 <HAL_TIM_MspPostInit+0x150>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d11e      	bne.n	8003ab4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a76:	4b4c      	ldr	r3, [pc, #304]	; (8003ba8 <HAL_TIM_MspPostInit+0x154>)
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	4a4b      	ldr	r2, [pc, #300]	; (8003ba8 <HAL_TIM_MspPostInit+0x154>)
 8003a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a80:	6153      	str	r3, [r2, #20]
 8003a82:	4b49      	ldr	r3, [pc, #292]	; (8003ba8 <HAL_TIM_MspPostInit+0x154>)
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8a:	61bb      	str	r3, [r7, #24]
 8003a8c:	69bb      	ldr	r3, [r7, #24]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 8003a8e:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8003a92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a94:	2302      	movs	r3, #2
 8003a96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003aa0:	2306      	movs	r3, #6
 8003aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aa4:	f107 031c 	add.w	r3, r7, #28
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003aae:	f002 fdf3 	bl	8006698 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8003ab2:	e072      	b.n	8003b9a <HAL_TIM_MspPostInit+0x146>
  else if(htim->Instance==TIM8)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a3c      	ldr	r2, [pc, #240]	; (8003bac <HAL_TIM_MspPostInit+0x158>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d13a      	bne.n	8003b34 <HAL_TIM_MspPostInit+0xe0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003abe:	4b3a      	ldr	r3, [pc, #232]	; (8003ba8 <HAL_TIM_MspPostInit+0x154>)
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	4a39      	ldr	r2, [pc, #228]	; (8003ba8 <HAL_TIM_MspPostInit+0x154>)
 8003ac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ac8:	6153      	str	r3, [r2, #20]
 8003aca:	4b37      	ldr	r3, [pc, #220]	; (8003ba8 <HAL_TIM_MspPostInit+0x154>)
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad2:	617b      	str	r3, [r7, #20]
 8003ad4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ad6:	4b34      	ldr	r3, [pc, #208]	; (8003ba8 <HAL_TIM_MspPostInit+0x154>)
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	4a33      	ldr	r2, [pc, #204]	; (8003ba8 <HAL_TIM_MspPostInit+0x154>)
 8003adc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ae0:	6153      	str	r3, [r2, #20]
 8003ae2:	4b31      	ldr	r3, [pc, #196]	; (8003ba8 <HAL_TIM_MspPostInit+0x154>)
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003aea:	613b      	str	r3, [r7, #16]
 8003aec:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003aee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003af2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003af4:	2302      	movs	r3, #2
 8003af6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af8:	2300      	movs	r3, #0
 8003afa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003afc:	2300      	movs	r3, #0
 8003afe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8003b00:	2302      	movs	r3, #2
 8003b02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b04:	f107 031c 	add.w	r3, r7, #28
 8003b08:	4619      	mov	r1, r3
 8003b0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b0e:	f002 fdc3 	bl	8006698 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003b12:	2308      	movs	r3, #8
 8003b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b16:	2302      	movs	r3, #2
 8003b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8003b22:	2304      	movs	r3, #4
 8003b24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b26:	f107 031c 	add.w	r3, r7, #28
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	4820      	ldr	r0, [pc, #128]	; (8003bb0 <HAL_TIM_MspPostInit+0x15c>)
 8003b2e:	f002 fdb3 	bl	8006698 <HAL_GPIO_Init>
}
 8003b32:	e032      	b.n	8003b9a <HAL_TIM_MspPostInit+0x146>
  else if(htim->Instance==TIM15)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a1e      	ldr	r2, [pc, #120]	; (8003bb4 <HAL_TIM_MspPostInit+0x160>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d12d      	bne.n	8003b9a <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b3e:	4b1a      	ldr	r3, [pc, #104]	; (8003ba8 <HAL_TIM_MspPostInit+0x154>)
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	4a19      	ldr	r2, [pc, #100]	; (8003ba8 <HAL_TIM_MspPostInit+0x154>)
 8003b44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b48:	6153      	str	r3, [r2, #20]
 8003b4a:	4b17      	ldr	r3, [pc, #92]	; (8003ba8 <HAL_TIM_MspPostInit+0x154>)
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b52:	60fb      	str	r3, [r7, #12]
 8003b54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003b56:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003b5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b60:	2300      	movs	r3, #0
 8003b62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b64:	2300      	movs	r3, #0
 8003b66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b6c:	f107 031c 	add.w	r3, r7, #28
 8003b70:	4619      	mov	r1, r3
 8003b72:	480f      	ldr	r0, [pc, #60]	; (8003bb0 <HAL_TIM_MspPostInit+0x15c>)
 8003b74:	f002 fd90 	bl	8006698 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003b78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b7e:	2302      	movs	r3, #2
 8003b80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b82:	2300      	movs	r3, #0
 8003b84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b86:	2300      	movs	r3, #0
 8003b88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM15;
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b8e:	f107 031c 	add.w	r3, r7, #28
 8003b92:	4619      	mov	r1, r3
 8003b94:	4806      	ldr	r0, [pc, #24]	; (8003bb0 <HAL_TIM_MspPostInit+0x15c>)
 8003b96:	f002 fd7f 	bl	8006698 <HAL_GPIO_Init>
}
 8003b9a:	bf00      	nop
 8003b9c:	3730      	adds	r7, #48	; 0x30
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	40012c00 	.word	0x40012c00
 8003ba8:	40021000 	.word	0x40021000
 8003bac:	40013400 	.word	0x40013400
 8003bb0:	48000400 	.word	0x48000400
 8003bb4:	40014000 	.word	0x40014000

08003bb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b08c      	sub	sp, #48	; 0x30
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bc0:	f107 031c 	add.w	r3, r7, #28
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	601a      	str	r2, [r3, #0]
 8003bc8:	605a      	str	r2, [r3, #4]
 8003bca:	609a      	str	r2, [r3, #8]
 8003bcc:	60da      	str	r2, [r3, #12]
 8003bce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a67      	ldr	r2, [pc, #412]	; (8003d74 <HAL_UART_MspInit+0x1bc>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d128      	bne.n	8003c2c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003bda:	4b67      	ldr	r3, [pc, #412]	; (8003d78 <HAL_UART_MspInit+0x1c0>)
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	4a66      	ldr	r2, [pc, #408]	; (8003d78 <HAL_UART_MspInit+0x1c0>)
 8003be0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003be4:	6193      	str	r3, [r2, #24]
 8003be6:	4b64      	ldr	r3, [pc, #400]	; (8003d78 <HAL_UART_MspInit+0x1c0>)
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bee:	61bb      	str	r3, [r7, #24]
 8003bf0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bf2:	4b61      	ldr	r3, [pc, #388]	; (8003d78 <HAL_UART_MspInit+0x1c0>)
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	4a60      	ldr	r2, [pc, #384]	; (8003d78 <HAL_UART_MspInit+0x1c0>)
 8003bf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bfc:	6153      	str	r3, [r2, #20]
 8003bfe:	4b5e      	ldr	r3, [pc, #376]	; (8003d78 <HAL_UART_MspInit+0x1c0>)
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c06:	617b      	str	r3, [r7, #20]
 8003c08:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003c0a:	23c0      	movs	r3, #192	; 0xc0
 8003c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c0e:	2302      	movs	r3, #2
 8003c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c12:	2300      	movs	r3, #0
 8003c14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c16:	2303      	movs	r3, #3
 8003c18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003c1a:	2307      	movs	r3, #7
 8003c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c1e:	f107 031c 	add.w	r3, r7, #28
 8003c22:	4619      	mov	r1, r3
 8003c24:	4855      	ldr	r0, [pc, #340]	; (8003d7c <HAL_UART_MspInit+0x1c4>)
 8003c26:	f002 fd37 	bl	8006698 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003c2a:	e09f      	b.n	8003d6c <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==USART2)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a53      	ldr	r2, [pc, #332]	; (8003d80 <HAL_UART_MspInit+0x1c8>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	f040 809a 	bne.w	8003d6c <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c38:	4b4f      	ldr	r3, [pc, #316]	; (8003d78 <HAL_UART_MspInit+0x1c0>)
 8003c3a:	69db      	ldr	r3, [r3, #28]
 8003c3c:	4a4e      	ldr	r2, [pc, #312]	; (8003d78 <HAL_UART_MspInit+0x1c0>)
 8003c3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c42:	61d3      	str	r3, [r2, #28]
 8003c44:	4b4c      	ldr	r3, [pc, #304]	; (8003d78 <HAL_UART_MspInit+0x1c0>)
 8003c46:	69db      	ldr	r3, [r3, #28]
 8003c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c4c:	613b      	str	r3, [r7, #16]
 8003c4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c50:	4b49      	ldr	r3, [pc, #292]	; (8003d78 <HAL_UART_MspInit+0x1c0>)
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	4a48      	ldr	r2, [pc, #288]	; (8003d78 <HAL_UART_MspInit+0x1c0>)
 8003c56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c5a:	6153      	str	r3, [r2, #20]
 8003c5c:	4b46      	ldr	r3, [pc, #280]	; (8003d78 <HAL_UART_MspInit+0x1c0>)
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c64:	60fb      	str	r3, [r7, #12]
 8003c66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c68:	4b43      	ldr	r3, [pc, #268]	; (8003d78 <HAL_UART_MspInit+0x1c0>)
 8003c6a:	695b      	ldr	r3, [r3, #20]
 8003c6c:	4a42      	ldr	r2, [pc, #264]	; (8003d78 <HAL_UART_MspInit+0x1c0>)
 8003c6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c72:	6153      	str	r3, [r2, #20]
 8003c74:	4b40      	ldr	r3, [pc, #256]	; (8003d78 <HAL_UART_MspInit+0x1c0>)
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c7c:	60bb      	str	r3, [r7, #8]
 8003c7e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003c80:	2304      	movs	r3, #4
 8003c82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c84:	2302      	movs	r3, #2
 8003c86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003c90:	2307      	movs	r3, #7
 8003c92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c94:	f107 031c 	add.w	r3, r7, #28
 8003c98:	4619      	mov	r1, r3
 8003c9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c9e:	f002 fcfb 	bl	8006698 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003ca2:	2310      	movs	r3, #16
 8003ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003caa:	2300      	movs	r3, #0
 8003cac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003cb2:	2307      	movs	r3, #7
 8003cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cb6:	f107 031c 	add.w	r3, r7, #28
 8003cba:	4619      	mov	r1, r3
 8003cbc:	482f      	ldr	r0, [pc, #188]	; (8003d7c <HAL_UART_MspInit+0x1c4>)
 8003cbe:	f002 fceb 	bl	8006698 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8003cc2:	4b30      	ldr	r3, [pc, #192]	; (8003d84 <HAL_UART_MspInit+0x1cc>)
 8003cc4:	4a30      	ldr	r2, [pc, #192]	; (8003d88 <HAL_UART_MspInit+0x1d0>)
 8003cc6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003cc8:	4b2e      	ldr	r3, [pc, #184]	; (8003d84 <HAL_UART_MspInit+0x1cc>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cce:	4b2d      	ldr	r3, [pc, #180]	; (8003d84 <HAL_UART_MspInit+0x1cc>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003cd4:	4b2b      	ldr	r3, [pc, #172]	; (8003d84 <HAL_UART_MspInit+0x1cc>)
 8003cd6:	2280      	movs	r2, #128	; 0x80
 8003cd8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003cda:	4b2a      	ldr	r3, [pc, #168]	; (8003d84 <HAL_UART_MspInit+0x1cc>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ce0:	4b28      	ldr	r3, [pc, #160]	; (8003d84 <HAL_UART_MspInit+0x1cc>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003ce6:	4b27      	ldr	r3, [pc, #156]	; (8003d84 <HAL_UART_MspInit+0x1cc>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003cec:	4b25      	ldr	r3, [pc, #148]	; (8003d84 <HAL_UART_MspInit+0x1cc>)
 8003cee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003cf2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003cf4:	4823      	ldr	r0, [pc, #140]	; (8003d84 <HAL_UART_MspInit+0x1cc>)
 8003cf6:	f002 faa4 	bl	8006242 <HAL_DMA_Init>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d001      	beq.n	8003d04 <HAL_UART_MspInit+0x14c>
      Error_Handler();
 8003d00:	f7ff fa3a 	bl	8003178 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a1f      	ldr	r2, [pc, #124]	; (8003d84 <HAL_UART_MspInit+0x1cc>)
 8003d08:	675a      	str	r2, [r3, #116]	; 0x74
 8003d0a:	4a1e      	ldr	r2, [pc, #120]	; (8003d84 <HAL_UART_MspInit+0x1cc>)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8003d10:	4b1e      	ldr	r3, [pc, #120]	; (8003d8c <HAL_UART_MspInit+0x1d4>)
 8003d12:	4a1f      	ldr	r2, [pc, #124]	; (8003d90 <HAL_UART_MspInit+0x1d8>)
 8003d14:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003d16:	4b1d      	ldr	r3, [pc, #116]	; (8003d8c <HAL_UART_MspInit+0x1d4>)
 8003d18:	2210      	movs	r2, #16
 8003d1a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d1c:	4b1b      	ldr	r3, [pc, #108]	; (8003d8c <HAL_UART_MspInit+0x1d4>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003d22:	4b1a      	ldr	r3, [pc, #104]	; (8003d8c <HAL_UART_MspInit+0x1d4>)
 8003d24:	2280      	movs	r2, #128	; 0x80
 8003d26:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d28:	4b18      	ldr	r3, [pc, #96]	; (8003d8c <HAL_UART_MspInit+0x1d4>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d2e:	4b17      	ldr	r3, [pc, #92]	; (8003d8c <HAL_UART_MspInit+0x1d4>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003d34:	4b15      	ldr	r3, [pc, #84]	; (8003d8c <HAL_UART_MspInit+0x1d4>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003d3a:	4b14      	ldr	r3, [pc, #80]	; (8003d8c <HAL_UART_MspInit+0x1d4>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003d40:	4812      	ldr	r0, [pc, #72]	; (8003d8c <HAL_UART_MspInit+0x1d4>)
 8003d42:	f002 fa7e 	bl	8006242 <HAL_DMA_Init>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <HAL_UART_MspInit+0x198>
      Error_Handler();
 8003d4c:	f7ff fa14 	bl	8003178 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a0e      	ldr	r2, [pc, #56]	; (8003d8c <HAL_UART_MspInit+0x1d4>)
 8003d54:	671a      	str	r2, [r3, #112]	; 0x70
 8003d56:	4a0d      	ldr	r2, [pc, #52]	; (8003d8c <HAL_UART_MspInit+0x1d4>)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	2101      	movs	r1, #1
 8003d60:	2026      	movs	r0, #38	; 0x26
 8003d62:	f002 fa38 	bl	80061d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003d66:	2026      	movs	r0, #38	; 0x26
 8003d68:	f002 fa51 	bl	800620e <HAL_NVIC_EnableIRQ>
}
 8003d6c:	bf00      	nop
 8003d6e:	3730      	adds	r7, #48	; 0x30
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	40013800 	.word	0x40013800
 8003d78:	40021000 	.word	0x40021000
 8003d7c:	48000400 	.word	0x48000400
 8003d80:	40004400 	.word	0x40004400
 8003d84:	2000067c 	.word	0x2000067c
 8003d88:	4002006c 	.word	0x4002006c
 8003d8c:	200006c0 	.word	0x200006c0
 8003d90:	40020080 	.word	0x40020080

08003d94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d94:	b480      	push	{r7}
 8003d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d98:	e7fe      	b.n	8003d98 <NMI_Handler+0x4>

08003d9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d9e:	e7fe      	b.n	8003d9e <HardFault_Handler+0x4>

08003da0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003da0:	b480      	push	{r7}
 8003da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003da4:	e7fe      	b.n	8003da4 <MemManage_Handler+0x4>

08003da6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003da6:	b480      	push	{r7}
 8003da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003daa:	e7fe      	b.n	8003daa <BusFault_Handler+0x4>

08003dac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003dac:	b480      	push	{r7}
 8003dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003db0:	e7fe      	b.n	8003db0 <UsageFault_Handler+0x4>

08003db2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003db2:	b480      	push	{r7}
 8003db4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003db6:	bf00      	nop
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003dc4:	bf00      	nop
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr

08003dce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003dd2:	bf00      	nop
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003de0:	f000 f9c0 	bl	8004164 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003de4:	bf00      	nop
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8003dec:	bf00      	nop
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003df6:	b580      	push	{r7, lr}
 8003df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_Pin);
 8003dfa:	2002      	movs	r0, #2
 8003dfc:	f002 fdf6 	bl	80069ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003e00:	bf00      	nop
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003e08:	4802      	ldr	r0, [pc, #8]	; (8003e14 <DMA1_Channel6_IRQHandler+0x10>)
 8003e0a:	f002 fb37 	bl	800647c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8003e0e:	bf00      	nop
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	2000067c 	.word	0x2000067c

08003e18 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003e1c:	4802      	ldr	r0, [pc, #8]	; (8003e28 <DMA1_Channel7_IRQHandler+0x10>)
 8003e1e:	f002 fb2d 	bl	800647c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8003e22:	bf00      	nop
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	200006c0 	.word	0x200006c0

08003e2c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003e30:	4803      	ldr	r0, [pc, #12]	; (8003e40 <ADC1_2_IRQHandler+0x14>)
 8003e32:	f000 ffb3 	bl	8004d9c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8003e36:	4803      	ldr	r0, [pc, #12]	; (8003e44 <ADC1_2_IRQHandler+0x18>)
 8003e38:	f000 ffb0 	bl	8004d9c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003e3c:	bf00      	nop
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	200001fc 	.word	0x200001fc
 8003e44:	2000024c 	.word	0x2000024c

08003e48 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8003e4c:	2020      	movs	r0, #32
 8003e4e:	f002 fdcd 	bl	80069ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003e52:	bf00      	nop
 8003e54:	bd80      	pop	{r7, pc}
	...

08003e58 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003e5c:	4802      	ldr	r0, [pc, #8]	; (8003e68 <TIM2_IRQHandler+0x10>)
 8003e5e:	f005 ff0f 	bl	8009c80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003e62:	bf00      	nop
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	200003f0 	.word	0x200003f0

08003e6c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003e70:	4802      	ldr	r0, [pc, #8]	; (8003e7c <TIM3_IRQHandler+0x10>)
 8003e72:	f005 ff05 	bl	8009c80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003e76:	bf00      	nop
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	2000043c 	.word	0x2000043c

08003e80 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003e84:	4802      	ldr	r0, [pc, #8]	; (8003e90 <TIM4_IRQHandler+0x10>)
 8003e86:	f005 fefb 	bl	8009c80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003e8a:	bf00      	nop
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	20000488 	.word	0x20000488

08003e94 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003e98:	4802      	ldr	r0, [pc, #8]	; (8003ea4 <USART2_IRQHandler+0x10>)
 8003e9a:	f007 fb4f 	bl	800b53c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003e9e:	bf00      	nop
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	200005f4 	.word	0x200005f4

08003ea8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(START_Pin);
 8003eac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003eb0:	f002 fd9c 	bl	80069ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(STOP_Pin);
 8003eb4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003eb8:	f002 fd98 	bl	80069ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003ebc:	bf00      	nop
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003ec4:	4802      	ldr	r0, [pc, #8]	; (8003ed0 <DMA2_Channel1_IRQHandler+0x10>)
 8003ec6:	f002 fad9 	bl	800647c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8003eca:	bf00      	nop
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	200002ec 	.word	0x200002ec

08003ed4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
  return 1;
 8003ed8:	2301      	movs	r3, #1
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <_kill>:

int _kill(int pid, int sig)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003eee:	f009 faa9 	bl	800d444 <__errno>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2216      	movs	r2, #22
 8003ef6:	601a      	str	r2, [r3, #0]
  return -1;
 8003ef8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3708      	adds	r7, #8
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <_exit>:

void _exit (int status)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003f0c:	f04f 31ff 	mov.w	r1, #4294967295
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f7ff ffe7 	bl	8003ee4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003f16:	e7fe      	b.n	8003f16 <_exit+0x12>

08003f18 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f24:	2300      	movs	r3, #0
 8003f26:	617b      	str	r3, [r7, #20]
 8003f28:	e00a      	b.n	8003f40 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003f2a:	f3af 8000 	nop.w
 8003f2e:	4601      	mov	r1, r0
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	1c5a      	adds	r2, r3, #1
 8003f34:	60ba      	str	r2, [r7, #8]
 8003f36:	b2ca      	uxtb	r2, r1
 8003f38:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	617b      	str	r3, [r7, #20]
 8003f40:	697a      	ldr	r2, [r7, #20]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	dbf0      	blt.n	8003f2a <_read+0x12>
  }

  return len;
 8003f48:	687b      	ldr	r3, [r7, #4]
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3718      	adds	r7, #24
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b086      	sub	sp, #24
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	60f8      	str	r0, [r7, #12]
 8003f5a:	60b9      	str	r1, [r7, #8]
 8003f5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f5e:	2300      	movs	r3, #0
 8003f60:	617b      	str	r3, [r7, #20]
 8003f62:	e009      	b.n	8003f78 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	1c5a      	adds	r2, r3, #1
 8003f68:	60ba      	str	r2, [r7, #8]
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	3301      	adds	r3, #1
 8003f76:	617b      	str	r3, [r7, #20]
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	dbf1      	blt.n	8003f64 <_write+0x12>
  }
  return len;
 8003f80:	687b      	ldr	r3, [r7, #4]
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3718      	adds	r7, #24
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <_close>:

int _close(int file)
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	b083      	sub	sp, #12
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003f92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr

08003fa2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b083      	sub	sp, #12
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
 8003faa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003fb2:	605a      	str	r2, [r3, #4]
  return 0;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr

08003fc2 <_isatty>:

int _isatty(int file)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b083      	sub	sp, #12
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003fca:	2301      	movs	r3, #1
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3714      	adds	r7, #20
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
	...

08003ff4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ffc:	4a14      	ldr	r2, [pc, #80]	; (8004050 <_sbrk+0x5c>)
 8003ffe:	4b15      	ldr	r3, [pc, #84]	; (8004054 <_sbrk+0x60>)
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004008:	4b13      	ldr	r3, [pc, #76]	; (8004058 <_sbrk+0x64>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d102      	bne.n	8004016 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004010:	4b11      	ldr	r3, [pc, #68]	; (8004058 <_sbrk+0x64>)
 8004012:	4a12      	ldr	r2, [pc, #72]	; (800405c <_sbrk+0x68>)
 8004014:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004016:	4b10      	ldr	r3, [pc, #64]	; (8004058 <_sbrk+0x64>)
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4413      	add	r3, r2
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	429a      	cmp	r2, r3
 8004022:	d207      	bcs.n	8004034 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004024:	f009 fa0e 	bl	800d444 <__errno>
 8004028:	4603      	mov	r3, r0
 800402a:	220c      	movs	r2, #12
 800402c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800402e:	f04f 33ff 	mov.w	r3, #4294967295
 8004032:	e009      	b.n	8004048 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004034:	4b08      	ldr	r3, [pc, #32]	; (8004058 <_sbrk+0x64>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800403a:	4b07      	ldr	r3, [pc, #28]	; (8004058 <_sbrk+0x64>)
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4413      	add	r3, r2
 8004042:	4a05      	ldr	r2, [pc, #20]	; (8004058 <_sbrk+0x64>)
 8004044:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004046:	68fb      	ldr	r3, [r7, #12]
}
 8004048:	4618      	mov	r0, r3
 800404a:	3718      	adds	r7, #24
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	2000a000 	.word	0x2000a000
 8004054:	00000400 	.word	0x00000400
 8004058:	20000904 	.word	0x20000904
 800405c:	20000a58 	.word	0x20000a58

08004060 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004060:	b480      	push	{r7}
 8004062:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004064:	4b06      	ldr	r3, [pc, #24]	; (8004080 <SystemInit+0x20>)
 8004066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800406a:	4a05      	ldr	r2, [pc, #20]	; (8004080 <SystemInit+0x20>)
 800406c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004070:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004074:	bf00      	nop
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	e000ed00 	.word	0xe000ed00

08004084 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004084:	f8df d034 	ldr.w	sp, [pc, #52]	; 80040bc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8004088:	f7ff ffea 	bl	8004060 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800408c:	480c      	ldr	r0, [pc, #48]	; (80040c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800408e:	490d      	ldr	r1, [pc, #52]	; (80040c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004090:	4a0d      	ldr	r2, [pc, #52]	; (80040c8 <LoopForever+0xe>)
  movs r3, #0
 8004092:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004094:	e002      	b.n	800409c <LoopCopyDataInit>

08004096 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004096:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004098:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800409a:	3304      	adds	r3, #4

0800409c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800409c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800409e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040a0:	d3f9      	bcc.n	8004096 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040a2:	4a0a      	ldr	r2, [pc, #40]	; (80040cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80040a4:	4c0a      	ldr	r4, [pc, #40]	; (80040d0 <LoopForever+0x16>)
  movs r3, #0
 80040a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80040a8:	e001      	b.n	80040ae <LoopFillZerobss>

080040aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80040aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040ac:	3204      	adds	r2, #4

080040ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80040ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80040b0:	d3fb      	bcc.n	80040aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80040b2:	f009 f9cd 	bl	800d450 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80040b6:	f7fd f8f3 	bl	80012a0 <main>

080040ba <LoopForever>:

LoopForever:
    b LoopForever
 80040ba:	e7fe      	b.n	80040ba <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80040bc:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80040c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80040c4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80040c8:	0800fa3c 	.word	0x0800fa3c
  ldr r2, =_sbss
 80040cc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80040d0:	20000a58 	.word	0x20000a58

080040d4 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80040d4:	e7fe      	b.n	80040d4 <ADC3_IRQHandler>
	...

080040d8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040dc:	4b08      	ldr	r3, [pc, #32]	; (8004100 <HAL_Init+0x28>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a07      	ldr	r2, [pc, #28]	; (8004100 <HAL_Init+0x28>)
 80040e2:	f043 0310 	orr.w	r3, r3, #16
 80040e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040e8:	2003      	movs	r0, #3
 80040ea:	f002 f869 	bl	80061c0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80040ee:	200f      	movs	r0, #15
 80040f0:	f000 f808 	bl	8004104 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80040f4:	f7ff fa5e 	bl	80035b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	40022000 	.word	0x40022000

08004104 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800410c:	4b12      	ldr	r3, [pc, #72]	; (8004158 <HAL_InitTick+0x54>)
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	4b12      	ldr	r3, [pc, #72]	; (800415c <HAL_InitTick+0x58>)
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	4619      	mov	r1, r3
 8004116:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800411a:	fbb3 f3f1 	udiv	r3, r3, r1
 800411e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004122:	4618      	mov	r0, r3
 8004124:	f002 f881 	bl	800622a <HAL_SYSTICK_Config>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e00e      	b.n	8004150 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2b0f      	cmp	r3, #15
 8004136:	d80a      	bhi.n	800414e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004138:	2200      	movs	r2, #0
 800413a:	6879      	ldr	r1, [r7, #4]
 800413c:	f04f 30ff 	mov.w	r0, #4294967295
 8004140:	f002 f849 	bl	80061d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004144:	4a06      	ldr	r2, [pc, #24]	; (8004160 <HAL_InitTick+0x5c>)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800414a:	2300      	movs	r3, #0
 800414c:	e000      	b.n	8004150 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
}
 8004150:	4618      	mov	r0, r3
 8004152:	3708      	adds	r7, #8
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	2000000c 	.word	0x2000000c
 800415c:	20000014 	.word	0x20000014
 8004160:	20000010 	.word	0x20000010

08004164 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004164:	b480      	push	{r7}
 8004166:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004168:	4b06      	ldr	r3, [pc, #24]	; (8004184 <HAL_IncTick+0x20>)
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	461a      	mov	r2, r3
 800416e:	4b06      	ldr	r3, [pc, #24]	; (8004188 <HAL_IncTick+0x24>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4413      	add	r3, r2
 8004174:	4a04      	ldr	r2, [pc, #16]	; (8004188 <HAL_IncTick+0x24>)
 8004176:	6013      	str	r3, [r2, #0]
}
 8004178:	bf00      	nop
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	20000014 	.word	0x20000014
 8004188:	20000908 	.word	0x20000908

0800418c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
  return uwTick;  
 8004190:	4b03      	ldr	r3, [pc, #12]	; (80041a0 <HAL_GetTick+0x14>)
 8004192:	681b      	ldr	r3, [r3, #0]
}
 8004194:	4618      	mov	r0, r3
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	20000908 	.word	0x20000908

080041a4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041ac:	f7ff ffee 	bl	800418c <HAL_GetTick>
 80041b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041bc:	d005      	beq.n	80041ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80041be:	4b0a      	ldr	r3, [pc, #40]	; (80041e8 <HAL_Delay+0x44>)
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	461a      	mov	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	4413      	add	r3, r2
 80041c8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80041ca:	bf00      	nop
 80041cc:	f7ff ffde 	bl	800418c <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d8f7      	bhi.n	80041cc <HAL_Delay+0x28>
  {
  }
}
 80041dc:	bf00      	nop
 80041de:	bf00      	nop
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	20000014 	.word	0x20000014

080041ec <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b09a      	sub	sp, #104	; 0x68
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004230:	2300      	movs	r3, #0
 8004232:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8004236:	2300      	movs	r3, #0
 8004238:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800423a:	2300      	movs	r3, #0
 800423c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d101      	bne.n	8004248 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e1c9      	b.n	80045dc <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	f003 0310 	and.w	r3, r3, #16
 8004256:	2b00      	cmp	r3, #0
 8004258:	d176      	bne.n	8004348 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425e:	2b00      	cmp	r3, #0
 8004260:	d152      	bne.n	8004308 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f7ff f9c3 	bl	8003608 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d13b      	bne.n	8004308 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f001 fda9 	bl	8005de8 <ADC_Disable>
 8004296:	4603      	mov	r3, r0
 8004298:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a0:	f003 0310 	and.w	r3, r3, #16
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d12f      	bne.n	8004308 <HAL_ADC_Init+0xe0>
 80042a8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d12b      	bne.n	8004308 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80042b8:	f023 0302 	bic.w	r3, r3, #2
 80042bc:	f043 0202 	orr.w	r2, r3, #2
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	689a      	ldr	r2, [r3, #8]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80042d2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	689a      	ldr	r2, [r3, #8]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80042e2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80042e4:	4b86      	ldr	r3, [pc, #536]	; (8004500 <HAL_ADC_Init+0x2d8>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a86      	ldr	r2, [pc, #536]	; (8004504 <HAL_ADC_Init+0x2dc>)
 80042ea:	fba2 2303 	umull	r2, r3, r2, r3
 80042ee:	0c9a      	lsrs	r2, r3, #18
 80042f0:	4613      	mov	r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	4413      	add	r3, r2
 80042f6:	005b      	lsls	r3, r3, #1
 80042f8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80042fa:	e002      	b.n	8004302 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	3b01      	subs	r3, #1
 8004300:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1f9      	bne.n	80042fc <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d007      	beq.n	8004326 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004320:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004324:	d110      	bne.n	8004348 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432a:	f023 0312 	bic.w	r3, r3, #18
 800432e:	f043 0210 	orr.w	r2, r3, #16
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800433a:	f043 0201 	orr.w	r2, r3, #1
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434c:	f003 0310 	and.w	r3, r3, #16
 8004350:	2b00      	cmp	r3, #0
 8004352:	f040 8136 	bne.w	80045c2 <HAL_ADC_Init+0x39a>
 8004356:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800435a:	2b00      	cmp	r3, #0
 800435c:	f040 8131 	bne.w	80045c2 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800436a:	2b00      	cmp	r3, #0
 800436c:	f040 8129 	bne.w	80045c2 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004374:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004378:	f043 0202 	orr.w	r2, r3, #2
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004388:	d004      	beq.n	8004394 <HAL_ADC_Init+0x16c>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a5e      	ldr	r2, [pc, #376]	; (8004508 <HAL_ADC_Init+0x2e0>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d101      	bne.n	8004398 <HAL_ADC_Init+0x170>
 8004394:	4b5d      	ldr	r3, [pc, #372]	; (800450c <HAL_ADC_Init+0x2e4>)
 8004396:	e000      	b.n	800439a <HAL_ADC_Init+0x172>
 8004398:	4b5d      	ldr	r3, [pc, #372]	; (8004510 <HAL_ADC_Init+0x2e8>)
 800439a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043a4:	d102      	bne.n	80043ac <HAL_ADC_Init+0x184>
 80043a6:	4b58      	ldr	r3, [pc, #352]	; (8004508 <HAL_ADC_Init+0x2e0>)
 80043a8:	60fb      	str	r3, [r7, #12]
 80043aa:	e01a      	b.n	80043e2 <HAL_ADC_Init+0x1ba>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a55      	ldr	r2, [pc, #340]	; (8004508 <HAL_ADC_Init+0x2e0>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d103      	bne.n	80043be <HAL_ADC_Init+0x196>
 80043b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80043ba:	60fb      	str	r3, [r7, #12]
 80043bc:	e011      	b.n	80043e2 <HAL_ADC_Init+0x1ba>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a54      	ldr	r2, [pc, #336]	; (8004514 <HAL_ADC_Init+0x2ec>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d102      	bne.n	80043ce <HAL_ADC_Init+0x1a6>
 80043c8:	4b53      	ldr	r3, [pc, #332]	; (8004518 <HAL_ADC_Init+0x2f0>)
 80043ca:	60fb      	str	r3, [r7, #12]
 80043cc:	e009      	b.n	80043e2 <HAL_ADC_Init+0x1ba>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a51      	ldr	r2, [pc, #324]	; (8004518 <HAL_ADC_Init+0x2f0>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d102      	bne.n	80043de <HAL_ADC_Init+0x1b6>
 80043d8:	4b4e      	ldr	r3, [pc, #312]	; (8004514 <HAL_ADC_Init+0x2ec>)
 80043da:	60fb      	str	r3, [r7, #12]
 80043dc:	e001      	b.n	80043e2 <HAL_ADC_Init+0x1ba>
 80043de:	2300      	movs	r3, #0
 80043e0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f003 0303 	and.w	r3, r3, #3
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d108      	bne.n	8004402 <HAL_ADC_Init+0x1da>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d101      	bne.n	8004402 <HAL_ADC_Init+0x1da>
 80043fe:	2301      	movs	r3, #1
 8004400:	e000      	b.n	8004404 <HAL_ADC_Init+0x1dc>
 8004402:	2300      	movs	r3, #0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d11c      	bne.n	8004442 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004408:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800440a:	2b00      	cmp	r3, #0
 800440c:	d010      	beq.n	8004430 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f003 0303 	and.w	r3, r3, #3
 8004416:	2b01      	cmp	r3, #1
 8004418:	d107      	bne.n	800442a <HAL_ADC_Init+0x202>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b01      	cmp	r3, #1
 8004424:	d101      	bne.n	800442a <HAL_ADC_Init+0x202>
 8004426:	2301      	movs	r3, #1
 8004428:	e000      	b.n	800442c <HAL_ADC_Init+0x204>
 800442a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800442c:	2b00      	cmp	r3, #0
 800442e:	d108      	bne.n	8004442 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8004430:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	431a      	orrs	r2, r3
 800443e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004440:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	7e5b      	ldrb	r3, [r3, #25]
 8004446:	035b      	lsls	r3, r3, #13
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800444c:	2a01      	cmp	r2, #1
 800444e:	d002      	beq.n	8004456 <HAL_ADC_Init+0x22e>
 8004450:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004454:	e000      	b.n	8004458 <HAL_ADC_Init+0x230>
 8004456:	2200      	movs	r2, #0
 8004458:	431a      	orrs	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	431a      	orrs	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	4313      	orrs	r3, r2
 8004466:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004468:	4313      	orrs	r3, r2
 800446a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d11b      	bne.n	80044ae <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	7e5b      	ldrb	r3, [r3, #25]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d109      	bne.n	8004492 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004482:	3b01      	subs	r3, #1
 8004484:	045a      	lsls	r2, r3, #17
 8004486:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004488:	4313      	orrs	r3, r2
 800448a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800448e:	663b      	str	r3, [r7, #96]	; 0x60
 8004490:	e00d      	b.n	80044ae <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800449a:	f043 0220 	orr.w	r2, r3, #32
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a6:	f043 0201 	orr.w	r2, r3, #1
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d03a      	beq.n	800452c <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a16      	ldr	r2, [pc, #88]	; (8004514 <HAL_ADC_Init+0x2ec>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d004      	beq.n	80044ca <HAL_ADC_Init+0x2a2>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a14      	ldr	r2, [pc, #80]	; (8004518 <HAL_ADC_Init+0x2f0>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d128      	bne.n	800451c <HAL_ADC_Init+0x2f4>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ce:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80044d2:	d012      	beq.n	80044fa <HAL_ADC_Init+0x2d2>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044dc:	d00a      	beq.n	80044f4 <HAL_ADC_Init+0x2cc>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e2:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80044e6:	d002      	beq.n	80044ee <HAL_ADC_Init+0x2c6>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ec:	e018      	b.n	8004520 <HAL_ADC_Init+0x2f8>
 80044ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044f2:	e015      	b.n	8004520 <HAL_ADC_Init+0x2f8>
 80044f4:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80044f8:	e012      	b.n	8004520 <HAL_ADC_Init+0x2f8>
 80044fa:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80044fe:	e00f      	b.n	8004520 <HAL_ADC_Init+0x2f8>
 8004500:	2000000c 	.word	0x2000000c
 8004504:	431bde83 	.word	0x431bde83
 8004508:	50000100 	.word	0x50000100
 800450c:	50000300 	.word	0x50000300
 8004510:	50000700 	.word	0x50000700
 8004514:	50000400 	.word	0x50000400
 8004518:	50000500 	.word	0x50000500
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004524:	4313      	orrs	r3, r2
 8004526:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004528:	4313      	orrs	r3, r2
 800452a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f003 030c 	and.w	r3, r3, #12
 8004536:	2b00      	cmp	r3, #0
 8004538:	d114      	bne.n	8004564 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	6812      	ldr	r2, [r2, #0]
 8004544:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004548:	f023 0302 	bic.w	r3, r3, #2
 800454c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	7e1b      	ldrb	r3, [r3, #24]
 8004552:	039a      	lsls	r2, r3, #14
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800455a:	005b      	lsls	r3, r3, #1
 800455c:	4313      	orrs	r3, r2
 800455e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004560:	4313      	orrs	r3, r2
 8004562:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68da      	ldr	r2, [r3, #12]
 800456a:	4b1e      	ldr	r3, [pc, #120]	; (80045e4 <HAL_ADC_Init+0x3bc>)
 800456c:	4013      	ands	r3, r2
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	6812      	ldr	r2, [r2, #0]
 8004572:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004574:	430b      	orrs	r3, r1
 8004576:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d10c      	bne.n	800459a <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004586:	f023 010f 	bic.w	r1, r3, #15
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	69db      	ldr	r3, [r3, #28]
 800458e:	1e5a      	subs	r2, r3, #1
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	430a      	orrs	r2, r1
 8004596:	631a      	str	r2, [r3, #48]	; 0x30
 8004598:	e007      	b.n	80045aa <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f022 020f 	bic.w	r2, r2, #15
 80045a8:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b4:	f023 0303 	bic.w	r3, r3, #3
 80045b8:	f043 0201 	orr.w	r2, r3, #1
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	641a      	str	r2, [r3, #64]	; 0x40
 80045c0:	e00a      	b.n	80045d8 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c6:	f023 0312 	bic.w	r3, r3, #18
 80045ca:	f043 0210 	orr.w	r2, r3, #16
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80045d2:	2301      	movs	r3, #1
 80045d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80045d8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3768      	adds	r7, #104	; 0x68
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	fff0c007 	.word	0xfff0c007

080045e8 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045f0:	2300      	movs	r3, #0
 80045f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f003 0304 	and.w	r3, r3, #4
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f040 80f9 	bne.w	80047f6 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800460a:	2b01      	cmp	r3, #1
 800460c:	d101      	bne.n	8004612 <HAL_ADC_Start+0x2a>
 800460e:	2302      	movs	r3, #2
 8004610:	e0f4      	b.n	80047fc <HAL_ADC_Start+0x214>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f001 fb80 	bl	8005d20 <ADC_Enable>
 8004620:	4603      	mov	r3, r0
 8004622:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004624:	7bfb      	ldrb	r3, [r7, #15]
 8004626:	2b00      	cmp	r3, #0
 8004628:	f040 80e0 	bne.w	80047ec <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004630:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004634:	f023 0301 	bic.w	r3, r3, #1
 8004638:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004648:	d004      	beq.n	8004654 <HAL_ADC_Start+0x6c>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a6d      	ldr	r2, [pc, #436]	; (8004804 <HAL_ADC_Start+0x21c>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d106      	bne.n	8004662 <HAL_ADC_Start+0x7a>
 8004654:	4b6c      	ldr	r3, [pc, #432]	; (8004808 <HAL_ADC_Start+0x220>)
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f003 031f 	and.w	r3, r3, #31
 800465c:	2b00      	cmp	r3, #0
 800465e:	d010      	beq.n	8004682 <HAL_ADC_Start+0x9a>
 8004660:	e005      	b.n	800466e <HAL_ADC_Start+0x86>
 8004662:	4b6a      	ldr	r3, [pc, #424]	; (800480c <HAL_ADC_Start+0x224>)
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f003 031f 	and.w	r3, r3, #31
 800466a:	2b00      	cmp	r3, #0
 800466c:	d009      	beq.n	8004682 <HAL_ADC_Start+0x9a>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004676:	d004      	beq.n	8004682 <HAL_ADC_Start+0x9a>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a64      	ldr	r2, [pc, #400]	; (8004810 <HAL_ADC_Start+0x228>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d115      	bne.n	80046ae <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004686:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d036      	beq.n	800470a <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80046a4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80046ac:	e02d      	b.n	800470a <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046c2:	d004      	beq.n	80046ce <HAL_ADC_Start+0xe6>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a4e      	ldr	r2, [pc, #312]	; (8004804 <HAL_ADC_Start+0x21c>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d10a      	bne.n	80046e4 <HAL_ADC_Start+0xfc>
 80046ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	bf14      	ite	ne
 80046dc:	2301      	movne	r3, #1
 80046de:	2300      	moveq	r3, #0
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	e008      	b.n	80046f6 <HAL_ADC_Start+0x10e>
 80046e4:	4b4a      	ldr	r3, [pc, #296]	; (8004810 <HAL_ADC_Start+0x228>)
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	bf14      	ite	ne
 80046f0:	2301      	movne	r3, #1
 80046f2:	2300      	moveq	r3, #0
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d007      	beq.n	800470a <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004702:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004716:	d106      	bne.n	8004726 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800471c:	f023 0206 	bic.w	r2, r3, #6
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	645a      	str	r2, [r3, #68]	; 0x44
 8004724:	e002      	b.n	800472c <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	221c      	movs	r2, #28
 800473a:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004744:	d004      	beq.n	8004750 <HAL_ADC_Start+0x168>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a2e      	ldr	r2, [pc, #184]	; (8004804 <HAL_ADC_Start+0x21c>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d106      	bne.n	800475e <HAL_ADC_Start+0x176>
 8004750:	4b2d      	ldr	r3, [pc, #180]	; (8004808 <HAL_ADC_Start+0x220>)
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f003 031f 	and.w	r3, r3, #31
 8004758:	2b00      	cmp	r3, #0
 800475a:	d03e      	beq.n	80047da <HAL_ADC_Start+0x1f2>
 800475c:	e005      	b.n	800476a <HAL_ADC_Start+0x182>
 800475e:	4b2b      	ldr	r3, [pc, #172]	; (800480c <HAL_ADC_Start+0x224>)
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f003 031f 	and.w	r3, r3, #31
 8004766:	2b00      	cmp	r3, #0
 8004768:	d037      	beq.n	80047da <HAL_ADC_Start+0x1f2>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004772:	d004      	beq.n	800477e <HAL_ADC_Start+0x196>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a22      	ldr	r2, [pc, #136]	; (8004804 <HAL_ADC_Start+0x21c>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d106      	bne.n	800478c <HAL_ADC_Start+0x1a4>
 800477e:	4b22      	ldr	r3, [pc, #136]	; (8004808 <HAL_ADC_Start+0x220>)
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f003 031f 	and.w	r3, r3, #31
 8004786:	2b05      	cmp	r3, #5
 8004788:	d027      	beq.n	80047da <HAL_ADC_Start+0x1f2>
 800478a:	e005      	b.n	8004798 <HAL_ADC_Start+0x1b0>
 800478c:	4b1f      	ldr	r3, [pc, #124]	; (800480c <HAL_ADC_Start+0x224>)
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f003 031f 	and.w	r3, r3, #31
 8004794:	2b05      	cmp	r3, #5
 8004796:	d020      	beq.n	80047da <HAL_ADC_Start+0x1f2>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047a0:	d004      	beq.n	80047ac <HAL_ADC_Start+0x1c4>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a17      	ldr	r2, [pc, #92]	; (8004804 <HAL_ADC_Start+0x21c>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d106      	bne.n	80047ba <HAL_ADC_Start+0x1d2>
 80047ac:	4b16      	ldr	r3, [pc, #88]	; (8004808 <HAL_ADC_Start+0x220>)
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f003 031f 	and.w	r3, r3, #31
 80047b4:	2b09      	cmp	r3, #9
 80047b6:	d010      	beq.n	80047da <HAL_ADC_Start+0x1f2>
 80047b8:	e005      	b.n	80047c6 <HAL_ADC_Start+0x1de>
 80047ba:	4b14      	ldr	r3, [pc, #80]	; (800480c <HAL_ADC_Start+0x224>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f003 031f 	and.w	r3, r3, #31
 80047c2:	2b09      	cmp	r3, #9
 80047c4:	d009      	beq.n	80047da <HAL_ADC_Start+0x1f2>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047ce:	d004      	beq.n	80047da <HAL_ADC_Start+0x1f2>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a0e      	ldr	r2, [pc, #56]	; (8004810 <HAL_ADC_Start+0x228>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d10f      	bne.n	80047fa <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	689a      	ldr	r2, [r3, #8]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f042 0204 	orr.w	r2, r2, #4
 80047e8:	609a      	str	r2, [r3, #8]
 80047ea:	e006      	b.n	80047fa <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80047f4:	e001      	b.n	80047fa <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80047f6:	2302      	movs	r3, #2
 80047f8:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80047fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3710      	adds	r7, #16
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	50000100 	.word	0x50000100
 8004808:	50000300 	.word	0x50000300
 800480c:	50000700 	.word	0x50000700
 8004810:	50000400 	.word	0x50000400

08004814 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800481c:	2300      	movs	r3, #0
 800481e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004826:	2b01      	cmp	r3, #1
 8004828:	d101      	bne.n	800482e <HAL_ADC_Stop+0x1a>
 800482a:	2302      	movs	r3, #2
 800482c:	e023      	b.n	8004876 <HAL_ADC_Stop+0x62>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2201      	movs	r2, #1
 8004832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004836:	216c      	movs	r1, #108	; 0x6c
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f001 fb3b 	bl	8005eb4 <ADC_ConversionStop>
 800483e:	4603      	mov	r3, r0
 8004840:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004842:	7bfb      	ldrb	r3, [r7, #15]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d111      	bne.n	800486c <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f001 facd 	bl	8005de8 <ADC_Disable>
 800484e:	4603      	mov	r3, r0
 8004850:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004852:	7bfb      	ldrb	r3, [r7, #15]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d109      	bne.n	800486c <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004860:	f023 0301 	bic.w	r3, r3, #1
 8004864:	f043 0201 	orr.w	r2, r3, #1
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004874:	7bfb      	ldrb	r3, [r7, #15]
}
 8004876:	4618      	mov	r0, r3
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
	...

08004880 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800488a:	2300      	movs	r3, #0
 800488c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	2b08      	cmp	r3, #8
 8004894:	d102      	bne.n	800489c <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8004896:	2308      	movs	r3, #8
 8004898:	617b      	str	r3, [r7, #20]
 800489a:	e03a      	b.n	8004912 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80048a4:	d004      	beq.n	80048b0 <HAL_ADC_PollForConversion+0x30>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a72      	ldr	r2, [pc, #456]	; (8004a74 <HAL_ADC_PollForConversion+0x1f4>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d101      	bne.n	80048b4 <HAL_ADC_PollForConversion+0x34>
 80048b0:	4b71      	ldr	r3, [pc, #452]	; (8004a78 <HAL_ADC_PollForConversion+0x1f8>)
 80048b2:	e000      	b.n	80048b6 <HAL_ADC_PollForConversion+0x36>
 80048b4:	4b71      	ldr	r3, [pc, #452]	; (8004a7c <HAL_ADC_PollForConversion+0x1fc>)
 80048b6:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f003 031f 	and.w	r3, r3, #31
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d112      	bne.n	80048ea <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d11d      	bne.n	800490e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d6:	f043 0220 	orr.w	r2, r3, #32
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e0bf      	b.n	8004a6a <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00b      	beq.n	800490e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fa:	f043 0220 	orr.w	r2, r3, #32
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e0ad      	b.n	8004a6a <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800490e:	230c      	movs	r3, #12
 8004910:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800491a:	d004      	beq.n	8004926 <HAL_ADC_PollForConversion+0xa6>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a54      	ldr	r2, [pc, #336]	; (8004a74 <HAL_ADC_PollForConversion+0x1f4>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d106      	bne.n	8004934 <HAL_ADC_PollForConversion+0xb4>
 8004926:	4b54      	ldr	r3, [pc, #336]	; (8004a78 <HAL_ADC_PollForConversion+0x1f8>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f003 031f 	and.w	r3, r3, #31
 800492e:	2b00      	cmp	r3, #0
 8004930:	d010      	beq.n	8004954 <HAL_ADC_PollForConversion+0xd4>
 8004932:	e005      	b.n	8004940 <HAL_ADC_PollForConversion+0xc0>
 8004934:	4b51      	ldr	r3, [pc, #324]	; (8004a7c <HAL_ADC_PollForConversion+0x1fc>)
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f003 031f 	and.w	r3, r3, #31
 800493c:	2b00      	cmp	r3, #0
 800493e:	d009      	beq.n	8004954 <HAL_ADC_PollForConversion+0xd4>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004948:	d004      	beq.n	8004954 <HAL_ADC_PollForConversion+0xd4>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a4c      	ldr	r2, [pc, #304]	; (8004a80 <HAL_ADC_PollForConversion+0x200>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d104      	bne.n	800495e <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	613b      	str	r3, [r7, #16]
 800495c:	e00f      	b.n	800497e <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004966:	d004      	beq.n	8004972 <HAL_ADC_PollForConversion+0xf2>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a41      	ldr	r2, [pc, #260]	; (8004a74 <HAL_ADC_PollForConversion+0x1f4>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d102      	bne.n	8004978 <HAL_ADC_PollForConversion+0xf8>
 8004972:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004976:	e000      	b.n	800497a <HAL_ADC_PollForConversion+0xfa>
 8004978:	4b41      	ldr	r3, [pc, #260]	; (8004a80 <HAL_ADC_PollForConversion+0x200>)
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 800497e:	f7ff fc05 	bl	800418c <HAL_GetTick>
 8004982:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8004984:	e021      	b.n	80049ca <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800498c:	d01d      	beq.n	80049ca <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d007      	beq.n	80049a4 <HAL_ADC_PollForConversion+0x124>
 8004994:	f7ff fbfa 	bl	800418c <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d212      	bcs.n	80049ca <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	4013      	ands	r3, r2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d10b      	bne.n	80049ca <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b6:	f043 0204 	orr.w	r2, r3, #4
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e04f      	b.n	8004a6a <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	4013      	ands	r3, r2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d0d6      	beq.n	8004986 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049dc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d131      	bne.n	8004a56 <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d12c      	bne.n	8004a56 <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0308 	and.w	r3, r3, #8
 8004a06:	2b08      	cmp	r3, #8
 8004a08:	d125      	bne.n	8004a56 <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f003 0304 	and.w	r3, r3, #4
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d112      	bne.n	8004a3e <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d112      	bne.n	8004a56 <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a34:	f043 0201 	orr.w	r2, r3, #1
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	641a      	str	r2, [r3, #64]	; 0x40
 8004a3c:	e00b      	b.n	8004a56 <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	f043 0220 	orr.w	r2, r3, #32
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a4e:	f043 0201 	orr.w	r2, r3, #1
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d103      	bne.n	8004a68 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3718      	adds	r7, #24
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	50000100 	.word	0x50000100
 8004a78:	50000300 	.word	0x50000300
 8004a7c:	50000700 	.word	0x50000700
 8004a80:	50000400 	.word	0x50000400

08004a84 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b086      	sub	sp, #24
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a90:	2300      	movs	r3, #0
 8004a92:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f003 0304 	and.w	r3, r3, #4
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f040 80f7 	bne.w	8004c92 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d101      	bne.n	8004ab2 <HAL_ADC_Start_DMA+0x2e>
 8004aae:	2302      	movs	r3, #2
 8004ab0:	e0f2      	b.n	8004c98 <HAL_ADC_Start_DMA+0x214>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ac2:	d004      	beq.n	8004ace <HAL_ADC_Start_DMA+0x4a>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a75      	ldr	r2, [pc, #468]	; (8004ca0 <HAL_ADC_Start_DMA+0x21c>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d109      	bne.n	8004ae2 <HAL_ADC_Start_DMA+0x5e>
 8004ace:	4b75      	ldr	r3, [pc, #468]	; (8004ca4 <HAL_ADC_Start_DMA+0x220>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f003 031f 	and.w	r3, r3, #31
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	bf0c      	ite	eq
 8004ada:	2301      	moveq	r3, #1
 8004adc:	2300      	movne	r3, #0
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	e008      	b.n	8004af4 <HAL_ADC_Start_DMA+0x70>
 8004ae2:	4b71      	ldr	r3, [pc, #452]	; (8004ca8 <HAL_ADC_Start_DMA+0x224>)
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f003 031f 	and.w	r3, r3, #31
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	bf0c      	ite	eq
 8004aee:	2301      	moveq	r3, #1
 8004af0:	2300      	movne	r3, #0
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f000 80c5 	beq.w	8004c84 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f001 f910 	bl	8005d20 <ADC_Enable>
 8004b00:	4603      	mov	r3, r0
 8004b02:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004b04:	7dfb      	ldrb	r3, [r7, #23]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f040 80b7 	bne.w	8004c7a <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b10:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004b14:	f023 0301 	bic.w	r3, r3, #1
 8004b18:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b28:	d004      	beq.n	8004b34 <HAL_ADC_Start_DMA+0xb0>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a5c      	ldr	r2, [pc, #368]	; (8004ca0 <HAL_ADC_Start_DMA+0x21c>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d106      	bne.n	8004b42 <HAL_ADC_Start_DMA+0xbe>
 8004b34:	4b5b      	ldr	r3, [pc, #364]	; (8004ca4 <HAL_ADC_Start_DMA+0x220>)
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f003 031f 	and.w	r3, r3, #31
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d010      	beq.n	8004b62 <HAL_ADC_Start_DMA+0xde>
 8004b40:	e005      	b.n	8004b4e <HAL_ADC_Start_DMA+0xca>
 8004b42:	4b59      	ldr	r3, [pc, #356]	; (8004ca8 <HAL_ADC_Start_DMA+0x224>)
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f003 031f 	and.w	r3, r3, #31
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d009      	beq.n	8004b62 <HAL_ADC_Start_DMA+0xde>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b56:	d004      	beq.n	8004b62 <HAL_ADC_Start_DMA+0xde>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a53      	ldr	r2, [pc, #332]	; (8004cac <HAL_ADC_Start_DMA+0x228>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d115      	bne.n	8004b8e <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b66:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d036      	beq.n	8004bea <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b80:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004b84:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8004b8c:	e02d      	b.n	8004bea <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b92:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ba2:	d004      	beq.n	8004bae <HAL_ADC_Start_DMA+0x12a>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a3d      	ldr	r2, [pc, #244]	; (8004ca0 <HAL_ADC_Start_DMA+0x21c>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d10a      	bne.n	8004bc4 <HAL_ADC_Start_DMA+0x140>
 8004bae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	bf14      	ite	ne
 8004bbc:	2301      	movne	r3, #1
 8004bbe:	2300      	moveq	r3, #0
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	e008      	b.n	8004bd6 <HAL_ADC_Start_DMA+0x152>
 8004bc4:	4b39      	ldr	r3, [pc, #228]	; (8004cac <HAL_ADC_Start_DMA+0x228>)
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	bf14      	ite	ne
 8004bd0:	2301      	movne	r3, #1
 8004bd2:	2300      	moveq	r3, #0
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d007      	beq.n	8004bea <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bde:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004be2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bf6:	d106      	bne.n	8004c06 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bfc:	f023 0206 	bic.w	r2, r3, #6
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	645a      	str	r2, [r3, #68]	; 0x44
 8004c04:	e002      	b.n	8004c0c <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c18:	4a25      	ldr	r2, [pc, #148]	; (8004cb0 <HAL_ADC_Start_DMA+0x22c>)
 8004c1a:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c20:	4a24      	ldr	r2, [pc, #144]	; (8004cb4 <HAL_ADC_Start_DMA+0x230>)
 8004c22:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c28:	4a23      	ldr	r2, [pc, #140]	; (8004cb8 <HAL_ADC_Start_DMA+0x234>)
 8004c2a:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	221c      	movs	r2, #28
 8004c32:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	685a      	ldr	r2, [r3, #4]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f042 0210 	orr.w	r2, r2, #16
 8004c42:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68da      	ldr	r2, [r3, #12]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f042 0201 	orr.w	r2, r2, #1
 8004c52:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	3340      	adds	r3, #64	; 0x40
 8004c5e:	4619      	mov	r1, r3
 8004c60:	68ba      	ldr	r2, [r7, #8]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f001 fb34 	bl	80062d0 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	689a      	ldr	r2, [r3, #8]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f042 0204 	orr.w	r2, r2, #4
 8004c76:	609a      	str	r2, [r3, #8]
 8004c78:	e00d      	b.n	8004c96 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004c82:	e008      	b.n	8004c96 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004c90:	e001      	b.n	8004c96 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004c92:	2302      	movs	r3, #2
 8004c94:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3718      	adds	r7, #24
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	50000100 	.word	0x50000100
 8004ca4:	50000300 	.word	0x50000300
 8004ca8:	50000700 	.word	0x50000700
 8004cac:	50000400 	.word	0x50000400
 8004cb0:	08005c55 	.word	0x08005c55
 8004cb4:	08005ccf 	.word	0x08005ccf
 8004cb8:	08005ceb 	.word	0x08005ceb

08004cbc <HAL_ADC_Stop_DMA>:
  *         dedicated MultimodeStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d101      	bne.n	8004cd6 <HAL_ADC_Stop_DMA+0x1a>
 8004cd2:	2302      	movs	r3, #2
 8004cd4:	e050      	b.n	8004d78 <HAL_ADC_Stop_DMA+0xbc>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004cde:	216c      	movs	r1, #108	; 0x6c
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f001 f8e7 	bl	8005eb4 <ADC_ConversionStop>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004cea:	7bfb      	ldrb	r3, [r7, #15]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d13e      	bne.n	8004d6e <HAL_ADC_Stop_DMA+0xb2>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68da      	ldr	r2, [r3, #12]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f022 0201 	bic.w	r2, r2, #1
 8004cfe:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d04:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d10f      	bne.n	8004d2c <HAL_ADC_Stop_DMA+0x70>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d10:	4618      	mov	r0, r3
 8004d12:	f001 fb3c 	bl	800638e <HAL_DMA_Abort>
 8004d16:	4603      	mov	r3, r0
 8004d18:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8004d1a:	7bfb      	ldrb	r3, [r7, #15]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d005      	beq.n	8004d2c <HAL_ADC_Stop_DMA+0x70>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d24:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	685a      	ldr	r2, [r3, #4]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f022 0210 	bic.w	r2, r2, #16
 8004d3a:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 8004d3c:	7bfb      	ldrb	r3, [r7, #15]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d105      	bne.n	8004d4e <HAL_ADC_Stop_DMA+0x92>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f001 f850 	bl	8005de8 <ADC_Disable>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	73fb      	strb	r3, [r7, #15]
 8004d4c:	e002      	b.n	8004d54 <HAL_ADC_Stop_DMA+0x98>
    }
    else
    {
      ADC_Disable(hadc);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f001 f84a 	bl	8005de8 <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004d54:	7bfb      	ldrb	r3, [r7, #15]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d109      	bne.n	8004d6e <HAL_ADC_Stop_DMA+0xb2>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004d62:	f023 0301 	bic.w	r3, r3, #1
 8004d66:	f043 0201 	orr.w	r2, r3, #1
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3710      	adds	r7, #16
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	370c      	adds	r7, #12
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
	...

08004d9c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b088      	sub	sp, #32
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8004da4:	2300      	movs	r3, #0
 8004da6:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8004da8:	2300      	movs	r3, #0
 8004daa:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8004dac:	2300      	movs	r3, #0
 8004dae:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	f003 0304 	and.w	r3, r3, #4
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d004      	beq.n	8004dd4 <HAL_ADC_IRQHandler+0x38>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f003 0304 	and.w	r3, r3, #4
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d10b      	bne.n	8004dec <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	f000 80bc 	beq.w	8004f58 <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f003 0308 	and.w	r3, r3, #8
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f000 80b6 	beq.w	8004f58 <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df0:	f003 0310 	and.w	r3, r3, #16
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d105      	bne.n	8004e04 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e0c:	d004      	beq.n	8004e18 <HAL_ADC_IRQHandler+0x7c>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a90      	ldr	r2, [pc, #576]	; (8005054 <HAL_ADC_IRQHandler+0x2b8>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d106      	bne.n	8004e26 <HAL_ADC_IRQHandler+0x8a>
 8004e18:	4b8f      	ldr	r3, [pc, #572]	; (8005058 <HAL_ADC_IRQHandler+0x2bc>)
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f003 031f 	and.w	r3, r3, #31
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d03e      	beq.n	8004ea2 <HAL_ADC_IRQHandler+0x106>
 8004e24:	e005      	b.n	8004e32 <HAL_ADC_IRQHandler+0x96>
 8004e26:	4b8d      	ldr	r3, [pc, #564]	; (800505c <HAL_ADC_IRQHandler+0x2c0>)
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f003 031f 	and.w	r3, r3, #31
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d037      	beq.n	8004ea2 <HAL_ADC_IRQHandler+0x106>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e3a:	d004      	beq.n	8004e46 <HAL_ADC_IRQHandler+0xaa>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a84      	ldr	r2, [pc, #528]	; (8005054 <HAL_ADC_IRQHandler+0x2b8>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d106      	bne.n	8004e54 <HAL_ADC_IRQHandler+0xb8>
 8004e46:	4b84      	ldr	r3, [pc, #528]	; (8005058 <HAL_ADC_IRQHandler+0x2bc>)
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f003 031f 	and.w	r3, r3, #31
 8004e4e:	2b05      	cmp	r3, #5
 8004e50:	d027      	beq.n	8004ea2 <HAL_ADC_IRQHandler+0x106>
 8004e52:	e005      	b.n	8004e60 <HAL_ADC_IRQHandler+0xc4>
 8004e54:	4b81      	ldr	r3, [pc, #516]	; (800505c <HAL_ADC_IRQHandler+0x2c0>)
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f003 031f 	and.w	r3, r3, #31
 8004e5c:	2b05      	cmp	r3, #5
 8004e5e:	d020      	beq.n	8004ea2 <HAL_ADC_IRQHandler+0x106>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e68:	d004      	beq.n	8004e74 <HAL_ADC_IRQHandler+0xd8>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a79      	ldr	r2, [pc, #484]	; (8005054 <HAL_ADC_IRQHandler+0x2b8>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d106      	bne.n	8004e82 <HAL_ADC_IRQHandler+0xe6>
 8004e74:	4b78      	ldr	r3, [pc, #480]	; (8005058 <HAL_ADC_IRQHandler+0x2bc>)
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	f003 031f 	and.w	r3, r3, #31
 8004e7c:	2b09      	cmp	r3, #9
 8004e7e:	d010      	beq.n	8004ea2 <HAL_ADC_IRQHandler+0x106>
 8004e80:	e005      	b.n	8004e8e <HAL_ADC_IRQHandler+0xf2>
 8004e82:	4b76      	ldr	r3, [pc, #472]	; (800505c <HAL_ADC_IRQHandler+0x2c0>)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f003 031f 	and.w	r3, r3, #31
 8004e8a:	2b09      	cmp	r3, #9
 8004e8c:	d009      	beq.n	8004ea2 <HAL_ADC_IRQHandler+0x106>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e96:	d004      	beq.n	8004ea2 <HAL_ADC_IRQHandler+0x106>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a70      	ldr	r2, [pc, #448]	; (8005060 <HAL_ADC_IRQHandler+0x2c4>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d104      	bne.n	8004eac <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	61bb      	str	r3, [r7, #24]
 8004eaa:	e00f      	b.n	8004ecc <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004eb4:	d004      	beq.n	8004ec0 <HAL_ADC_IRQHandler+0x124>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a66      	ldr	r2, [pc, #408]	; (8005054 <HAL_ADC_IRQHandler+0x2b8>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d102      	bne.n	8004ec6 <HAL_ADC_IRQHandler+0x12a>
 8004ec0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004ec4:	e000      	b.n	8004ec8 <HAL_ADC_IRQHandler+0x12c>
 8004ec6:	4b66      	ldr	r3, [pc, #408]	; (8005060 <HAL_ADC_IRQHandler+0x2c4>)
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d137      	bne.n	8004f4a <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d132      	bne.n	8004f4a <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	f003 0308 	and.w	r3, r3, #8
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d02d      	beq.n	8004f4a <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f003 0304 	and.w	r3, r3, #4
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d11a      	bne.n	8004f32 <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685a      	ldr	r2, [r3, #4]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f022 020c 	bic.w	r2, r2, #12
 8004f0a:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f10:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d112      	bne.n	8004f4a <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f28:	f043 0201 	orr.w	r2, r3, #1
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	641a      	str	r2, [r3, #64]	; 0x40
 8004f30:	e00b      	b.n	8004f4a <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f36:	f043 0210 	orr.w	r2, r3, #16
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f42:	f043 0201 	orr.w	r2, r3, #1
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f7fe f8fe 	bl	800314c <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	220c      	movs	r2, #12
 8004f56:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	f003 0320 	and.w	r3, r3, #32
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d004      	beq.n	8004f6c <HAL_ADC_IRQHandler+0x1d0>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f003 0320 	and.w	r3, r3, #32
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10b      	bne.n	8004f84 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	f000 8138 	beq.w	80051e8 <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	f000 8132 	beq.w	80051e8 <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f88:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f98:	d004      	beq.n	8004fa4 <HAL_ADC_IRQHandler+0x208>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a2d      	ldr	r2, [pc, #180]	; (8005054 <HAL_ADC_IRQHandler+0x2b8>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d106      	bne.n	8004fb2 <HAL_ADC_IRQHandler+0x216>
 8004fa4:	4b2c      	ldr	r3, [pc, #176]	; (8005058 <HAL_ADC_IRQHandler+0x2bc>)
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	f003 031f 	and.w	r3, r3, #31
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d03e      	beq.n	800502e <HAL_ADC_IRQHandler+0x292>
 8004fb0:	e005      	b.n	8004fbe <HAL_ADC_IRQHandler+0x222>
 8004fb2:	4b2a      	ldr	r3, [pc, #168]	; (800505c <HAL_ADC_IRQHandler+0x2c0>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f003 031f 	and.w	r3, r3, #31
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d037      	beq.n	800502e <HAL_ADC_IRQHandler+0x292>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004fc6:	d004      	beq.n	8004fd2 <HAL_ADC_IRQHandler+0x236>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a21      	ldr	r2, [pc, #132]	; (8005054 <HAL_ADC_IRQHandler+0x2b8>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d106      	bne.n	8004fe0 <HAL_ADC_IRQHandler+0x244>
 8004fd2:	4b21      	ldr	r3, [pc, #132]	; (8005058 <HAL_ADC_IRQHandler+0x2bc>)
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f003 031f 	and.w	r3, r3, #31
 8004fda:	2b05      	cmp	r3, #5
 8004fdc:	d027      	beq.n	800502e <HAL_ADC_IRQHandler+0x292>
 8004fde:	e005      	b.n	8004fec <HAL_ADC_IRQHandler+0x250>
 8004fe0:	4b1e      	ldr	r3, [pc, #120]	; (800505c <HAL_ADC_IRQHandler+0x2c0>)
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	f003 031f 	and.w	r3, r3, #31
 8004fe8:	2b05      	cmp	r3, #5
 8004fea:	d020      	beq.n	800502e <HAL_ADC_IRQHandler+0x292>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ff4:	d004      	beq.n	8005000 <HAL_ADC_IRQHandler+0x264>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a16      	ldr	r2, [pc, #88]	; (8005054 <HAL_ADC_IRQHandler+0x2b8>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d106      	bne.n	800500e <HAL_ADC_IRQHandler+0x272>
 8005000:	4b15      	ldr	r3, [pc, #84]	; (8005058 <HAL_ADC_IRQHandler+0x2bc>)
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	f003 031f 	and.w	r3, r3, #31
 8005008:	2b09      	cmp	r3, #9
 800500a:	d010      	beq.n	800502e <HAL_ADC_IRQHandler+0x292>
 800500c:	e005      	b.n	800501a <HAL_ADC_IRQHandler+0x27e>
 800500e:	4b13      	ldr	r3, [pc, #76]	; (800505c <HAL_ADC_IRQHandler+0x2c0>)
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f003 031f 	and.w	r3, r3, #31
 8005016:	2b09      	cmp	r3, #9
 8005018:	d009      	beq.n	800502e <HAL_ADC_IRQHandler+0x292>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005022:	d004      	beq.n	800502e <HAL_ADC_IRQHandler+0x292>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a0d      	ldr	r2, [pc, #52]	; (8005060 <HAL_ADC_IRQHandler+0x2c4>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d104      	bne.n	8005038 <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	61bb      	str	r3, [r7, #24]
 8005036:	e018      	b.n	800506a <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005040:	d004      	beq.n	800504c <HAL_ADC_IRQHandler+0x2b0>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a03      	ldr	r2, [pc, #12]	; (8005054 <HAL_ADC_IRQHandler+0x2b8>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d10b      	bne.n	8005064 <HAL_ADC_IRQHandler+0x2c8>
 800504c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005050:	e009      	b.n	8005066 <HAL_ADC_IRQHandler+0x2ca>
 8005052:	bf00      	nop
 8005054:	50000100 	.word	0x50000100
 8005058:	50000300 	.word	0x50000300
 800505c:	50000700 	.word	0x50000700
 8005060:	50000400 	.word	0x50000400
 8005064:	4b92      	ldr	r3, [pc, #584]	; (80052b0 <HAL_ADC_IRQHandler+0x514>)
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005070:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005074:	2b00      	cmp	r3, #0
 8005076:	f040 80b0 	bne.w	80051da <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d00d      	beq.n	80050a0 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800508e:	2b00      	cmp	r3, #0
 8005090:	f040 80a3 	bne.w	80051da <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800509a:	2b00      	cmp	r3, #0
 800509c:	f040 809d 	bne.w	80051da <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f000 8097 	beq.w	80051da <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050b4:	d004      	beq.n	80050c0 <HAL_ADC_IRQHandler+0x324>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a7e      	ldr	r2, [pc, #504]	; (80052b4 <HAL_ADC_IRQHandler+0x518>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d106      	bne.n	80050ce <HAL_ADC_IRQHandler+0x332>
 80050c0:	4b7d      	ldr	r3, [pc, #500]	; (80052b8 <HAL_ADC_IRQHandler+0x51c>)
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f003 031f 	and.w	r3, r3, #31
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d03e      	beq.n	800514a <HAL_ADC_IRQHandler+0x3ae>
 80050cc:	e005      	b.n	80050da <HAL_ADC_IRQHandler+0x33e>
 80050ce:	4b7b      	ldr	r3, [pc, #492]	; (80052bc <HAL_ADC_IRQHandler+0x520>)
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f003 031f 	and.w	r3, r3, #31
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d037      	beq.n	800514a <HAL_ADC_IRQHandler+0x3ae>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050e2:	d004      	beq.n	80050ee <HAL_ADC_IRQHandler+0x352>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a72      	ldr	r2, [pc, #456]	; (80052b4 <HAL_ADC_IRQHandler+0x518>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d106      	bne.n	80050fc <HAL_ADC_IRQHandler+0x360>
 80050ee:	4b72      	ldr	r3, [pc, #456]	; (80052b8 <HAL_ADC_IRQHandler+0x51c>)
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f003 031f 	and.w	r3, r3, #31
 80050f6:	2b06      	cmp	r3, #6
 80050f8:	d027      	beq.n	800514a <HAL_ADC_IRQHandler+0x3ae>
 80050fa:	e005      	b.n	8005108 <HAL_ADC_IRQHandler+0x36c>
 80050fc:	4b6f      	ldr	r3, [pc, #444]	; (80052bc <HAL_ADC_IRQHandler+0x520>)
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f003 031f 	and.w	r3, r3, #31
 8005104:	2b06      	cmp	r3, #6
 8005106:	d020      	beq.n	800514a <HAL_ADC_IRQHandler+0x3ae>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005110:	d004      	beq.n	800511c <HAL_ADC_IRQHandler+0x380>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a67      	ldr	r2, [pc, #412]	; (80052b4 <HAL_ADC_IRQHandler+0x518>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d106      	bne.n	800512a <HAL_ADC_IRQHandler+0x38e>
 800511c:	4b66      	ldr	r3, [pc, #408]	; (80052b8 <HAL_ADC_IRQHandler+0x51c>)
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f003 031f 	and.w	r3, r3, #31
 8005124:	2b07      	cmp	r3, #7
 8005126:	d010      	beq.n	800514a <HAL_ADC_IRQHandler+0x3ae>
 8005128:	e005      	b.n	8005136 <HAL_ADC_IRQHandler+0x39a>
 800512a:	4b64      	ldr	r3, [pc, #400]	; (80052bc <HAL_ADC_IRQHandler+0x520>)
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f003 031f 	and.w	r3, r3, #31
 8005132:	2b07      	cmp	r3, #7
 8005134:	d009      	beq.n	800514a <HAL_ADC_IRQHandler+0x3ae>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800513e:	d004      	beq.n	800514a <HAL_ADC_IRQHandler+0x3ae>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a5a      	ldr	r2, [pc, #360]	; (80052b0 <HAL_ADC_IRQHandler+0x514>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d104      	bne.n	8005154 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	617b      	str	r3, [r7, #20]
 8005152:	e00f      	b.n	8005174 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800515c:	d004      	beq.n	8005168 <HAL_ADC_IRQHandler+0x3cc>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a54      	ldr	r2, [pc, #336]	; (80052b4 <HAL_ADC_IRQHandler+0x518>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d102      	bne.n	800516e <HAL_ADC_IRQHandler+0x3d2>
 8005168:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800516c:	e000      	b.n	8005170 <HAL_ADC_IRQHandler+0x3d4>
 800516e:	4b50      	ldr	r3, [pc, #320]	; (80052b0 <HAL_ADC_IRQHandler+0x514>)
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d12d      	bne.n	80051da <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f003 0308 	and.w	r3, r3, #8
 8005188:	2b00      	cmp	r3, #0
 800518a:	d11a      	bne.n	80051c2 <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	685a      	ldr	r2, [r3, #4]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800519a:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d112      	bne.n	80051da <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b8:	f043 0201 	orr.w	r2, r3, #1
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	641a      	str	r2, [r3, #64]	; 0x40
 80051c0:	e00b      	b.n	80051da <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c6:	f043 0210 	orr.w	r2, r3, #16
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051d2:	f043 0201 	orr.w	r2, r3, #1
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 f936 	bl	800544c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2260      	movs	r2, #96	; 0x60
 80051e6:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d011      	beq.n	8005216 <HAL_ADC_IRQHandler+0x47a>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00c      	beq.n	8005216 <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005200:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f7fe fff9 	bl	8004200 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2280      	movs	r2, #128	; 0x80
 8005214:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800521c:	2b00      	cmp	r3, #0
 800521e:	d012      	beq.n	8005246 <HAL_ADC_IRQHandler+0x4aa>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00d      	beq.n	8005246 <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 f91c 	bl	8005474 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005244:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800524c:	2b00      	cmp	r3, #0
 800524e:	d012      	beq.n	8005276 <HAL_ADC_IRQHandler+0x4da>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00d      	beq.n	8005276 <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 f90e 	bl	8005488 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005274:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	f003 0310 	and.w	r3, r3, #16
 800527c:	2b00      	cmp	r3, #0
 800527e:	d04f      	beq.n	8005320 <HAL_ADC_IRQHandler+0x584>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f003 0310 	and.w	r3, r3, #16
 8005286:	2b00      	cmp	r3, #0
 8005288:	d04a      	beq.n	8005320 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800528e:	2b01      	cmp	r3, #1
 8005290:	d102      	bne.n	8005298 <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 8005292:	2301      	movs	r3, #1
 8005294:	61fb      	str	r3, [r7, #28]
 8005296:	e02d      	b.n	80052f4 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80052a0:	d004      	beq.n	80052ac <HAL_ADC_IRQHandler+0x510>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a03      	ldr	r2, [pc, #12]	; (80052b4 <HAL_ADC_IRQHandler+0x518>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d109      	bne.n	80052c0 <HAL_ADC_IRQHandler+0x524>
 80052ac:	4b02      	ldr	r3, [pc, #8]	; (80052b8 <HAL_ADC_IRQHandler+0x51c>)
 80052ae:	e008      	b.n	80052c2 <HAL_ADC_IRQHandler+0x526>
 80052b0:	50000400 	.word	0x50000400
 80052b4:	50000100 	.word	0x50000100
 80052b8:	50000300 	.word	0x50000300
 80052bc:	50000700 	.word	0x50000700
 80052c0:	4b28      	ldr	r3, [pc, #160]	; (8005364 <HAL_ADC_IRQHandler+0x5c8>)
 80052c2:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	f003 031f 	and.w	r3, r3, #31
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d109      	bne.n	80052e4 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	f003 0301 	and.w	r3, r3, #1
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d10a      	bne.n	80052f4 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 80052de:	2301      	movs	r3, #1
 80052e0:	61fb      	str	r3, [r7, #28]
 80052e2:	e007      	b.n	80052f4 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d001      	beq.n	80052f4 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 80052f0:	2301      	movs	r3, #1
 80052f2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d10e      	bne.n	8005318 <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fe:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800530a:	f043 0202 	orr.w	r2, r3, #2
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f7fe ff7e 	bl	8004214 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2210      	movs	r2, #16
 800531e:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005326:	2b00      	cmp	r3, #0
 8005328:	d018      	beq.n	800535c <HAL_ADC_IRQHandler+0x5c0>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005330:	2b00      	cmp	r3, #0
 8005332:	d013      	beq.n	800535c <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005338:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005344:	f043 0208 	orr.w	r2, r3, #8
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005354:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 f882 	bl	8005460 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 800535c:	bf00      	nop
 800535e:	3720      	adds	r7, #32
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	50000700 	.word	0x50000700

08005368 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005372:	2300      	movs	r3, #0
 8005374:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800537c:	2b01      	cmp	r3, #1
 800537e:	d101      	bne.n	8005384 <HAL_ADCEx_Calibration_Start+0x1c>
 8005380:	2302      	movs	r3, #2
 8005382:	e05f      	b.n	8005444 <HAL_ADCEx_Calibration_Start+0xdc>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 fd2b 	bl	8005de8 <ADC_Disable>
 8005392:	4603      	mov	r3, r0
 8005394:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005396:	7bfb      	ldrb	r3, [r7, #15]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d14e      	bne.n	800543a <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	689a      	ldr	r2, [r3, #8]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80053b0:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d107      	bne.n	80053c8 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	689a      	ldr	r2, [r3, #8]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80053c6:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	689a      	ldr	r2, [r3, #8]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80053d6:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80053d8:	f7fe fed8 	bl	800418c <HAL_GetTick>
 80053dc:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80053de:	e01c      	b.n	800541a <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80053e0:	f7fe fed4 	bl	800418c <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	2b0a      	cmp	r3, #10
 80053ec:	d915      	bls.n	800541a <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053fc:	d10d      	bne.n	800541a <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005402:	f023 0312 	bic.w	r3, r3, #18
 8005406:	f043 0210 	orr.w	r2, r3, #16
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e014      	b.n	8005444 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005424:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005428:	d0da      	beq.n	80053e0 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542e:	f023 0303 	bic.w	r3, r3, #3
 8005432:	f043 0201 	orr.w	r2, r3, #1
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8005442:	7bfb      	ldrb	r3, [r7, #15]
}
 8005444:	4618      	mov	r0, r3
 8005446:	3710      	adds	r7, #16
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8005454:	bf00      	nop
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8005468:	bf00      	nop
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 800547c:	bf00      	nop
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800549c:	b480      	push	{r7}
 800549e:	b09b      	sub	sp, #108	; 0x6c
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80054a6:	2300      	movs	r3, #0
 80054a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80054ac:	2300      	movs	r3, #0
 80054ae:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d101      	bne.n	80054be <HAL_ADC_ConfigChannel+0x22>
 80054ba:	2302      	movs	r3, #2
 80054bc:	e2c8      	b.n	8005a50 <HAL_ADC_ConfigChannel+0x5b4>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f003 0304 	and.w	r3, r3, #4
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f040 82ac 	bne.w	8005a2e <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	2b04      	cmp	r3, #4
 80054dc:	d81c      	bhi.n	8005518 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	685a      	ldr	r2, [r3, #4]
 80054e8:	4613      	mov	r3, r2
 80054ea:	005b      	lsls	r3, r3, #1
 80054ec:	4413      	add	r3, r2
 80054ee:	005b      	lsls	r3, r3, #1
 80054f0:	461a      	mov	r2, r3
 80054f2:	231f      	movs	r3, #31
 80054f4:	4093      	lsls	r3, r2
 80054f6:	43db      	mvns	r3, r3
 80054f8:	4019      	ands	r1, r3
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	6818      	ldr	r0, [r3, #0]
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	685a      	ldr	r2, [r3, #4]
 8005502:	4613      	mov	r3, r2
 8005504:	005b      	lsls	r3, r3, #1
 8005506:	4413      	add	r3, r2
 8005508:	005b      	lsls	r3, r3, #1
 800550a:	fa00 f203 	lsl.w	r2, r0, r3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	430a      	orrs	r2, r1
 8005514:	631a      	str	r2, [r3, #48]	; 0x30
 8005516:	e063      	b.n	80055e0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	2b09      	cmp	r3, #9
 800551e:	d81e      	bhi.n	800555e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	685a      	ldr	r2, [r3, #4]
 800552a:	4613      	mov	r3, r2
 800552c:	005b      	lsls	r3, r3, #1
 800552e:	4413      	add	r3, r2
 8005530:	005b      	lsls	r3, r3, #1
 8005532:	3b1e      	subs	r3, #30
 8005534:	221f      	movs	r2, #31
 8005536:	fa02 f303 	lsl.w	r3, r2, r3
 800553a:	43db      	mvns	r3, r3
 800553c:	4019      	ands	r1, r3
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	6818      	ldr	r0, [r3, #0]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	685a      	ldr	r2, [r3, #4]
 8005546:	4613      	mov	r3, r2
 8005548:	005b      	lsls	r3, r3, #1
 800554a:	4413      	add	r3, r2
 800554c:	005b      	lsls	r3, r3, #1
 800554e:	3b1e      	subs	r3, #30
 8005550:	fa00 f203 	lsl.w	r2, r0, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	430a      	orrs	r2, r1
 800555a:	635a      	str	r2, [r3, #52]	; 0x34
 800555c:	e040      	b.n	80055e0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	2b0e      	cmp	r3, #14
 8005564:	d81e      	bhi.n	80055a4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	685a      	ldr	r2, [r3, #4]
 8005570:	4613      	mov	r3, r2
 8005572:	005b      	lsls	r3, r3, #1
 8005574:	4413      	add	r3, r2
 8005576:	005b      	lsls	r3, r3, #1
 8005578:	3b3c      	subs	r3, #60	; 0x3c
 800557a:	221f      	movs	r2, #31
 800557c:	fa02 f303 	lsl.w	r3, r2, r3
 8005580:	43db      	mvns	r3, r3
 8005582:	4019      	ands	r1, r3
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	6818      	ldr	r0, [r3, #0]
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	685a      	ldr	r2, [r3, #4]
 800558c:	4613      	mov	r3, r2
 800558e:	005b      	lsls	r3, r3, #1
 8005590:	4413      	add	r3, r2
 8005592:	005b      	lsls	r3, r3, #1
 8005594:	3b3c      	subs	r3, #60	; 0x3c
 8005596:	fa00 f203 	lsl.w	r2, r0, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	430a      	orrs	r2, r1
 80055a0:	639a      	str	r2, [r3, #56]	; 0x38
 80055a2:	e01d      	b.n	80055e0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	685a      	ldr	r2, [r3, #4]
 80055ae:	4613      	mov	r3, r2
 80055b0:	005b      	lsls	r3, r3, #1
 80055b2:	4413      	add	r3, r2
 80055b4:	005b      	lsls	r3, r3, #1
 80055b6:	3b5a      	subs	r3, #90	; 0x5a
 80055b8:	221f      	movs	r2, #31
 80055ba:	fa02 f303 	lsl.w	r3, r2, r3
 80055be:	43db      	mvns	r3, r3
 80055c0:	4019      	ands	r1, r3
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	6818      	ldr	r0, [r3, #0]
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	685a      	ldr	r2, [r3, #4]
 80055ca:	4613      	mov	r3, r2
 80055cc:	005b      	lsls	r3, r3, #1
 80055ce:	4413      	add	r3, r2
 80055d0:	005b      	lsls	r3, r3, #1
 80055d2:	3b5a      	subs	r3, #90	; 0x5a
 80055d4:	fa00 f203 	lsl.w	r2, r0, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	430a      	orrs	r2, r1
 80055de:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f003 030c 	and.w	r3, r3, #12
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	f040 80e5 	bne.w	80057ba <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2b09      	cmp	r3, #9
 80055f6:	d91c      	bls.n	8005632 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	6999      	ldr	r1, [r3, #24]
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	4613      	mov	r3, r2
 8005604:	005b      	lsls	r3, r3, #1
 8005606:	4413      	add	r3, r2
 8005608:	3b1e      	subs	r3, #30
 800560a:	2207      	movs	r2, #7
 800560c:	fa02 f303 	lsl.w	r3, r2, r3
 8005610:	43db      	mvns	r3, r3
 8005612:	4019      	ands	r1, r3
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	6898      	ldr	r0, [r3, #8]
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	4613      	mov	r3, r2
 800561e:	005b      	lsls	r3, r3, #1
 8005620:	4413      	add	r3, r2
 8005622:	3b1e      	subs	r3, #30
 8005624:	fa00 f203 	lsl.w	r2, r0, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	430a      	orrs	r2, r1
 800562e:	619a      	str	r2, [r3, #24]
 8005630:	e019      	b.n	8005666 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	6959      	ldr	r1, [r3, #20]
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	4613      	mov	r3, r2
 800563e:	005b      	lsls	r3, r3, #1
 8005640:	4413      	add	r3, r2
 8005642:	2207      	movs	r2, #7
 8005644:	fa02 f303 	lsl.w	r3, r2, r3
 8005648:	43db      	mvns	r3, r3
 800564a:	4019      	ands	r1, r3
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	6898      	ldr	r0, [r3, #8]
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	4613      	mov	r3, r2
 8005656:	005b      	lsls	r3, r3, #1
 8005658:	4413      	add	r3, r2
 800565a:	fa00 f203 	lsl.w	r2, r0, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	430a      	orrs	r2, r1
 8005664:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	695a      	ldr	r2, [r3, #20]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	08db      	lsrs	r3, r3, #3
 8005672:	f003 0303 	and.w	r3, r3, #3
 8005676:	005b      	lsls	r3, r3, #1
 8005678:	fa02 f303 	lsl.w	r3, r2, r3
 800567c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	3b01      	subs	r3, #1
 8005684:	2b03      	cmp	r3, #3
 8005686:	d84f      	bhi.n	8005728 <HAL_ADC_ConfigChannel+0x28c>
 8005688:	a201      	add	r2, pc, #4	; (adr r2, 8005690 <HAL_ADC_ConfigChannel+0x1f4>)
 800568a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800568e:	bf00      	nop
 8005690:	080056a1 	.word	0x080056a1
 8005694:	080056c3 	.word	0x080056c3
 8005698:	080056e5 	.word	0x080056e5
 800569c:	08005707 	.word	0x08005707
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80056a6:	4b99      	ldr	r3, [pc, #612]	; (800590c <HAL_ADC_ConfigChannel+0x470>)
 80056a8:	4013      	ands	r3, r2
 80056aa:	683a      	ldr	r2, [r7, #0]
 80056ac:	6812      	ldr	r2, [r2, #0]
 80056ae:	0691      	lsls	r1, r2, #26
 80056b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80056b2:	430a      	orrs	r2, r1
 80056b4:	431a      	orrs	r2, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80056be:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80056c0:	e07b      	b.n	80057ba <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80056c8:	4b90      	ldr	r3, [pc, #576]	; (800590c <HAL_ADC_ConfigChannel+0x470>)
 80056ca:	4013      	ands	r3, r2
 80056cc:	683a      	ldr	r2, [r7, #0]
 80056ce:	6812      	ldr	r2, [r2, #0]
 80056d0:	0691      	lsls	r1, r2, #26
 80056d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80056d4:	430a      	orrs	r2, r1
 80056d6:	431a      	orrs	r2, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80056e0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80056e2:	e06a      	b.n	80057ba <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80056ea:	4b88      	ldr	r3, [pc, #544]	; (800590c <HAL_ADC_ConfigChannel+0x470>)
 80056ec:	4013      	ands	r3, r2
 80056ee:	683a      	ldr	r2, [r7, #0]
 80056f0:	6812      	ldr	r2, [r2, #0]
 80056f2:	0691      	lsls	r1, r2, #26
 80056f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80056f6:	430a      	orrs	r2, r1
 80056f8:	431a      	orrs	r2, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005702:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005704:	e059      	b.n	80057ba <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800570c:	4b7f      	ldr	r3, [pc, #508]	; (800590c <HAL_ADC_ConfigChannel+0x470>)
 800570e:	4013      	ands	r3, r2
 8005710:	683a      	ldr	r2, [r7, #0]
 8005712:	6812      	ldr	r2, [r2, #0]
 8005714:	0691      	lsls	r1, r2, #26
 8005716:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005718:	430a      	orrs	r2, r1
 800571a:	431a      	orrs	r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005724:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005726:	e048      	b.n	80057ba <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800572e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	069b      	lsls	r3, r3, #26
 8005738:	429a      	cmp	r2, r3
 800573a:	d107      	bne.n	800574c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800574a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005752:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	069b      	lsls	r3, r3, #26
 800575c:	429a      	cmp	r2, r3
 800575e:	d107      	bne.n	8005770 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800576e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005776:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	069b      	lsls	r3, r3, #26
 8005780:	429a      	cmp	r2, r3
 8005782:	d107      	bne.n	8005794 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005792:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800579a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	069b      	lsls	r3, r3, #26
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d107      	bne.n	80057b8 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80057b6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80057b8:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	f003 0303 	and.w	r3, r3, #3
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d108      	bne.n	80057da <HAL_ADC_ConfigChannel+0x33e>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 0301 	and.w	r3, r3, #1
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d101      	bne.n	80057da <HAL_ADC_ConfigChannel+0x33e>
 80057d6:	2301      	movs	r3, #1
 80057d8:	e000      	b.n	80057dc <HAL_ADC_ConfigChannel+0x340>
 80057da:	2300      	movs	r3, #0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f040 8131 	bne.w	8005a44 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d00f      	beq.n	800580a <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2201      	movs	r2, #1
 80057f8:	fa02 f303 	lsl.w	r3, r2, r3
 80057fc:	43da      	mvns	r2, r3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	400a      	ands	r2, r1
 8005804:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8005808:	e049      	b.n	800589e <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2201      	movs	r2, #1
 8005818:	409a      	lsls	r2, r3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	430a      	orrs	r2, r1
 8005820:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2b09      	cmp	r3, #9
 800582a:	d91c      	bls.n	8005866 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	6999      	ldr	r1, [r3, #24]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	4613      	mov	r3, r2
 8005838:	005b      	lsls	r3, r3, #1
 800583a:	4413      	add	r3, r2
 800583c:	3b1b      	subs	r3, #27
 800583e:	2207      	movs	r2, #7
 8005840:	fa02 f303 	lsl.w	r3, r2, r3
 8005844:	43db      	mvns	r3, r3
 8005846:	4019      	ands	r1, r3
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	6898      	ldr	r0, [r3, #8]
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	4613      	mov	r3, r2
 8005852:	005b      	lsls	r3, r3, #1
 8005854:	4413      	add	r3, r2
 8005856:	3b1b      	subs	r3, #27
 8005858:	fa00 f203 	lsl.w	r2, r0, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	430a      	orrs	r2, r1
 8005862:	619a      	str	r2, [r3, #24]
 8005864:	e01b      	b.n	800589e <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	6959      	ldr	r1, [r3, #20]
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	1c5a      	adds	r2, r3, #1
 8005872:	4613      	mov	r3, r2
 8005874:	005b      	lsls	r3, r3, #1
 8005876:	4413      	add	r3, r2
 8005878:	2207      	movs	r2, #7
 800587a:	fa02 f303 	lsl.w	r3, r2, r3
 800587e:	43db      	mvns	r3, r3
 8005880:	4019      	ands	r1, r3
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	6898      	ldr	r0, [r3, #8]
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	1c5a      	adds	r2, r3, #1
 800588c:	4613      	mov	r3, r2
 800588e:	005b      	lsls	r3, r3, #1
 8005890:	4413      	add	r3, r2
 8005892:	fa00 f203 	lsl.w	r2, r0, r3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	430a      	orrs	r2, r1
 800589c:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80058a6:	d004      	beq.n	80058b2 <HAL_ADC_ConfigChannel+0x416>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a18      	ldr	r2, [pc, #96]	; (8005910 <HAL_ADC_ConfigChannel+0x474>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d101      	bne.n	80058b6 <HAL_ADC_ConfigChannel+0x41a>
 80058b2:	4b18      	ldr	r3, [pc, #96]	; (8005914 <HAL_ADC_ConfigChannel+0x478>)
 80058b4:	e000      	b.n	80058b8 <HAL_ADC_ConfigChannel+0x41c>
 80058b6:	4b18      	ldr	r3, [pc, #96]	; (8005918 <HAL_ADC_ConfigChannel+0x47c>)
 80058b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2b10      	cmp	r3, #16
 80058c0:	d105      	bne.n	80058ce <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80058c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d015      	beq.n	80058fa <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80058d2:	2b11      	cmp	r3, #17
 80058d4:	d105      	bne.n	80058e2 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80058d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00b      	beq.n	80058fa <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80058e6:	2b12      	cmp	r3, #18
 80058e8:	f040 80ac 	bne.w	8005a44 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80058ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	f040 80a5 	bne.w	8005a44 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005902:	d10b      	bne.n	800591c <HAL_ADC_ConfigChannel+0x480>
 8005904:	4b02      	ldr	r3, [pc, #8]	; (8005910 <HAL_ADC_ConfigChannel+0x474>)
 8005906:	60fb      	str	r3, [r7, #12]
 8005908:	e023      	b.n	8005952 <HAL_ADC_ConfigChannel+0x4b6>
 800590a:	bf00      	nop
 800590c:	83fff000 	.word	0x83fff000
 8005910:	50000100 	.word	0x50000100
 8005914:	50000300 	.word	0x50000300
 8005918:	50000700 	.word	0x50000700
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a4e      	ldr	r2, [pc, #312]	; (8005a5c <HAL_ADC_ConfigChannel+0x5c0>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d103      	bne.n	800592e <HAL_ADC_ConfigChannel+0x492>
 8005926:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800592a:	60fb      	str	r3, [r7, #12]
 800592c:	e011      	b.n	8005952 <HAL_ADC_ConfigChannel+0x4b6>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a4b      	ldr	r2, [pc, #300]	; (8005a60 <HAL_ADC_ConfigChannel+0x5c4>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d102      	bne.n	800593e <HAL_ADC_ConfigChannel+0x4a2>
 8005938:	4b4a      	ldr	r3, [pc, #296]	; (8005a64 <HAL_ADC_ConfigChannel+0x5c8>)
 800593a:	60fb      	str	r3, [r7, #12]
 800593c:	e009      	b.n	8005952 <HAL_ADC_ConfigChannel+0x4b6>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a48      	ldr	r2, [pc, #288]	; (8005a64 <HAL_ADC_ConfigChannel+0x5c8>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d102      	bne.n	800594e <HAL_ADC_ConfigChannel+0x4b2>
 8005948:	4b45      	ldr	r3, [pc, #276]	; (8005a60 <HAL_ADC_ConfigChannel+0x5c4>)
 800594a:	60fb      	str	r3, [r7, #12]
 800594c:	e001      	b.n	8005952 <HAL_ADC_ConfigChannel+0x4b6>
 800594e:	2300      	movs	r3, #0
 8005950:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	f003 0303 	and.w	r3, r3, #3
 800595c:	2b01      	cmp	r3, #1
 800595e:	d108      	bne.n	8005972 <HAL_ADC_ConfigChannel+0x4d6>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0301 	and.w	r3, r3, #1
 800596a:	2b01      	cmp	r3, #1
 800596c:	d101      	bne.n	8005972 <HAL_ADC_ConfigChannel+0x4d6>
 800596e:	2301      	movs	r3, #1
 8005970:	e000      	b.n	8005974 <HAL_ADC_ConfigChannel+0x4d8>
 8005972:	2300      	movs	r3, #0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d150      	bne.n	8005a1a <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8005978:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800597a:	2b00      	cmp	r3, #0
 800597c:	d010      	beq.n	80059a0 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f003 0303 	and.w	r3, r3, #3
 8005986:	2b01      	cmp	r3, #1
 8005988:	d107      	bne.n	800599a <HAL_ADC_ConfigChannel+0x4fe>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	2b01      	cmp	r3, #1
 8005994:	d101      	bne.n	800599a <HAL_ADC_ConfigChannel+0x4fe>
 8005996:	2301      	movs	r3, #1
 8005998:	e000      	b.n	800599c <HAL_ADC_ConfigChannel+0x500>
 800599a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800599c:	2b00      	cmp	r3, #0
 800599e:	d13c      	bne.n	8005a1a <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2b10      	cmp	r3, #16
 80059a6:	d11d      	bne.n	80059e4 <HAL_ADC_ConfigChannel+0x548>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80059b0:	d118      	bne.n	80059e4 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80059b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80059ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059bc:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80059be:	4b2a      	ldr	r3, [pc, #168]	; (8005a68 <HAL_ADC_ConfigChannel+0x5cc>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a2a      	ldr	r2, [pc, #168]	; (8005a6c <HAL_ADC_ConfigChannel+0x5d0>)
 80059c4:	fba2 2303 	umull	r2, r3, r2, r3
 80059c8:	0c9a      	lsrs	r2, r3, #18
 80059ca:	4613      	mov	r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	4413      	add	r3, r2
 80059d0:	005b      	lsls	r3, r3, #1
 80059d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80059d4:	e002      	b.n	80059dc <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	3b01      	subs	r3, #1
 80059da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d1f9      	bne.n	80059d6 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80059e2:	e02e      	b.n	8005a42 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2b11      	cmp	r3, #17
 80059ea:	d10b      	bne.n	8005a04 <HAL_ADC_ConfigChannel+0x568>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80059f4:	d106      	bne.n	8005a04 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80059f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80059fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a00:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005a02:	e01e      	b.n	8005a42 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2b12      	cmp	r3, #18
 8005a0a:	d11a      	bne.n	8005a42 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8005a0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005a14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a16:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005a18:	e013      	b.n	8005a42 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1e:	f043 0220 	orr.w	r2, r3, #32
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005a2c:	e00a      	b.n	8005a44 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a32:	f043 0220 	orr.w	r2, r3, #32
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005a40:	e000      	b.n	8005a44 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005a42:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8005a4c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	376c      	adds	r7, #108	; 0x6c
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr
 8005a5c:	50000100 	.word	0x50000100
 8005a60:	50000400 	.word	0x50000400
 8005a64:	50000500 	.word	0x50000500
 8005a68:	2000000c 	.word	0x2000000c
 8005a6c:	431bde83 	.word	0x431bde83

08005a70 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b099      	sub	sp, #100	; 0x64
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a88:	d102      	bne.n	8005a90 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8005a8a:	4b6d      	ldr	r3, [pc, #436]	; (8005c40 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8005a8c:	60bb      	str	r3, [r7, #8]
 8005a8e:	e01a      	b.n	8005ac6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a6a      	ldr	r2, [pc, #424]	; (8005c40 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d103      	bne.n	8005aa2 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8005a9a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005a9e:	60bb      	str	r3, [r7, #8]
 8005aa0:	e011      	b.n	8005ac6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a67      	ldr	r2, [pc, #412]	; (8005c44 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d102      	bne.n	8005ab2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005aac:	4b66      	ldr	r3, [pc, #408]	; (8005c48 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8005aae:	60bb      	str	r3, [r7, #8]
 8005ab0:	e009      	b.n	8005ac6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a64      	ldr	r2, [pc, #400]	; (8005c48 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d102      	bne.n	8005ac2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005abc:	4b61      	ldr	r3, [pc, #388]	; (8005c44 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8005abe:	60bb      	str	r3, [r7, #8]
 8005ac0:	e001      	b.n	8005ac6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d101      	bne.n	8005ad0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e0b0      	b.n	8005c32 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d101      	bne.n	8005ade <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8005ada:	2302      	movs	r3, #2
 8005adc:	e0a9      	b.n	8005c32 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	f003 0304 	and.w	r3, r3, #4
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f040 808d 	bne.w	8005c10 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	f003 0304 	and.w	r3, r3, #4
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	f040 8086 	bne.w	8005c10 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b0c:	d004      	beq.n	8005b18 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a4b      	ldr	r2, [pc, #300]	; (8005c40 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d101      	bne.n	8005b1c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005b18:	4b4c      	ldr	r3, [pc, #304]	; (8005c4c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8005b1a:	e000      	b.n	8005b1e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005b1c:	4b4c      	ldr	r3, [pc, #304]	; (8005c50 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8005b1e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d040      	beq.n	8005baa <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8005b28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	6859      	ldr	r1, [r3, #4]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005b3a:	035b      	lsls	r3, r3, #13
 8005b3c:	430b      	orrs	r3, r1
 8005b3e:	431a      	orrs	r2, r3
 8005b40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b42:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	f003 0303 	and.w	r3, r3, #3
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d108      	bne.n	8005b64 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 0301 	and.w	r3, r3, #1
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d101      	bne.n	8005b64 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8005b60:	2301      	movs	r3, #1
 8005b62:	e000      	b.n	8005b66 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8005b64:	2300      	movs	r3, #0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d15c      	bne.n	8005c24 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	f003 0303 	and.w	r3, r3, #3
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d107      	bne.n	8005b86 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d101      	bne.n	8005b86 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8005b82:	2301      	movs	r3, #1
 8005b84:	e000      	b.n	8005b88 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8005b86:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d14b      	bne.n	8005c24 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8005b8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005b94:	f023 030f 	bic.w	r3, r3, #15
 8005b98:	683a      	ldr	r2, [r7, #0]
 8005b9a:	6811      	ldr	r1, [r2, #0]
 8005b9c:	683a      	ldr	r2, [r7, #0]
 8005b9e:	6892      	ldr	r2, [r2, #8]
 8005ba0:	430a      	orrs	r2, r1
 8005ba2:	431a      	orrs	r2, r3
 8005ba4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ba6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005ba8:	e03c      	b.n	8005c24 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005baa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005bb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bb4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	f003 0303 	and.w	r3, r3, #3
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d108      	bne.n	8005bd6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 0301 	and.w	r3, r3, #1
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d101      	bne.n	8005bd6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e000      	b.n	8005bd8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d123      	bne.n	8005c24 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f003 0303 	and.w	r3, r3, #3
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d107      	bne.n	8005bf8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0301 	and.w	r3, r3, #1
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d101      	bne.n	8005bf8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e000      	b.n	8005bfa <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8005bf8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d112      	bne.n	8005c24 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8005bfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005c06:	f023 030f 	bic.w	r3, r3, #15
 8005c0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c0c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005c0e:	e009      	b.n	8005c24 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c14:	f043 0220 	orr.w	r2, r3, #32
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005c22:	e000      	b.n	8005c26 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005c24:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8005c2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8005c32:	4618      	mov	r0, r3
 8005c34:	3764      	adds	r7, #100	; 0x64
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	50000100 	.word	0x50000100
 8005c44:	50000400 	.word	0x50000400
 8005c48:	50000500 	.word	0x50000500
 8005c4c:	50000300 	.word	0x50000300
 8005c50:	50000700 	.word	0x50000700

08005c54 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c60:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c66:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d126      	bne.n	8005cbc <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c72:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d115      	bne.n	8005cb4 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d111      	bne.n	8005cb4 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d105      	bne.n	8005cb4 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cac:	f043 0201 	orr.w	r2, r3, #1
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	f7fd fa49 	bl	800314c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8005cba:	e004      	b.n	8005cc6 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	4798      	blx	r3
}
 8005cc6:	bf00      	nop
 8005cc8:	3710      	adds	r7, #16
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}

08005cce <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005cce:	b580      	push	{r7, lr}
 8005cd0:	b084      	sub	sp, #16
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cda:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005cdc:	68f8      	ldr	r0, [r7, #12]
 8005cde:	f7fe fa85 	bl	80041ec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8005ce2:	bf00      	nop
 8005ce4:	3710      	adds	r7, #16
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}

08005cea <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005cea:	b580      	push	{r7, lr}
 8005cec:	b084      	sub	sp, #16
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d08:	f043 0204 	orr.w	r2, r3, #4
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	f7fe fa7f 	bl	8004214 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005d16:	bf00      	nop
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
	...

08005d20 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	f003 0303 	and.w	r3, r3, #3
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d108      	bne.n	8005d4c <ADC_Enable+0x2c>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0301 	and.w	r3, r3, #1
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d101      	bne.n	8005d4c <ADC_Enable+0x2c>
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e000      	b.n	8005d4e <ADC_Enable+0x2e>
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d143      	bne.n	8005dda <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	689a      	ldr	r2, [r3, #8]
 8005d58:	4b22      	ldr	r3, [pc, #136]	; (8005de4 <ADC_Enable+0xc4>)
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00d      	beq.n	8005d7c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d64:	f043 0210 	orr.w	r2, r3, #16
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d70:	f043 0201 	orr.w	r2, r3, #1
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e02f      	b.n	8005ddc <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	689a      	ldr	r2, [r3, #8]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f042 0201 	orr.w	r2, r2, #1
 8005d8a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8005d8c:	f7fe f9fe 	bl	800418c <HAL_GetTick>
 8005d90:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005d92:	e01b      	b.n	8005dcc <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005d94:	f7fe f9fa 	bl	800418c <HAL_GetTick>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d914      	bls.n	8005dcc <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 0301 	and.w	r3, r3, #1
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d00d      	beq.n	8005dcc <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db4:	f043 0210 	orr.w	r2, r3, #16
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dc0:	f043 0201 	orr.w	r2, r3, #1
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e007      	b.n	8005ddc <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 0301 	and.w	r3, r3, #1
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d1dc      	bne.n	8005d94 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3710      	adds	r7, #16
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	8000003f 	.word	0x8000003f

08005de8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005df0:	2300      	movs	r3, #0
 8005df2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	f003 0303 	and.w	r3, r3, #3
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d108      	bne.n	8005e14 <ADC_Disable+0x2c>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 0301 	and.w	r3, r3, #1
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d101      	bne.n	8005e14 <ADC_Disable+0x2c>
 8005e10:	2301      	movs	r3, #1
 8005e12:	e000      	b.n	8005e16 <ADC_Disable+0x2e>
 8005e14:	2300      	movs	r3, #0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d047      	beq.n	8005eaa <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	f003 030d 	and.w	r3, r3, #13
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d10f      	bne.n	8005e48 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	689a      	ldr	r2, [r3, #8]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f042 0202 	orr.w	r2, r2, #2
 8005e36:	609a      	str	r2, [r3, #8]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2203      	movs	r2, #3
 8005e3e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8005e40:	f7fe f9a4 	bl	800418c <HAL_GetTick>
 8005e44:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005e46:	e029      	b.n	8005e9c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4c:	f043 0210 	orr.w	r2, r3, #16
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e58:	f043 0201 	orr.w	r2, r3, #1
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e023      	b.n	8005eac <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005e64:	f7fe f992 	bl	800418c <HAL_GetTick>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d914      	bls.n	8005e9c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f003 0301 	and.w	r3, r3, #1
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d10d      	bne.n	8005e9c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e84:	f043 0210 	orr.w	r2, r3, #16
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e90:	f043 0201 	orr.w	r2, r3, #1
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e007      	b.n	8005eac <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	f003 0301 	and.w	r3, r3, #1
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d0dc      	beq.n	8005e64 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005eaa:	2300      	movs	r3, #0
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3710      	adds	r7, #16
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b086      	sub	sp, #24
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	f003 030c 	and.w	r3, r3, #12
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	f000 809b 	beq.w	8006010 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ee4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ee8:	d12a      	bne.n	8005f40 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d126      	bne.n	8005f40 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d122      	bne.n	8005f40 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8005efa:	230c      	movs	r3, #12
 8005efc:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8005efe:	e014      	b.n	8005f2a <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	4a46      	ldr	r2, [pc, #280]	; (800601c <ADC_ConversionStop+0x168>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d90d      	bls.n	8005f24 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0c:	f043 0210 	orr.w	r2, r3, #16
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f18:	f043 0201 	orr.w	r2, r3, #1
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e076      	b.n	8006012 <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	3301      	adds	r3, #1
 8005f28:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f34:	2b40      	cmp	r3, #64	; 0x40
 8005f36:	d1e3      	bne.n	8005f00 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2240      	movs	r2, #64	; 0x40
 8005f3e:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	2b60      	cmp	r3, #96	; 0x60
 8005f44:	d015      	beq.n	8005f72 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	f003 0304 	and.w	r3, r3, #4
 8005f50:	2b04      	cmp	r3, #4
 8005f52:	d10e      	bne.n	8005f72 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d107      	bne.n	8005f72 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	689a      	ldr	r2, [r3, #8]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f042 0210 	orr.w	r2, r2, #16
 8005f70:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	2b0c      	cmp	r3, #12
 8005f76:	d015      	beq.n	8005fa4 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f003 0308 	and.w	r3, r3, #8
 8005f82:	2b08      	cmp	r3, #8
 8005f84:	d10e      	bne.n	8005fa4 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d107      	bne.n	8005fa4 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	689a      	ldr	r2, [r3, #8]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f042 0220 	orr.w	r2, r2, #32
 8005fa2:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	2b60      	cmp	r3, #96	; 0x60
 8005fa8:	d005      	beq.n	8005fb6 <ADC_ConversionStop+0x102>
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	2b6c      	cmp	r3, #108	; 0x6c
 8005fae:	d105      	bne.n	8005fbc <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8005fb0:	230c      	movs	r3, #12
 8005fb2:	617b      	str	r3, [r7, #20]
        break;
 8005fb4:	e005      	b.n	8005fc2 <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8005fb6:	2308      	movs	r3, #8
 8005fb8:	617b      	str	r3, [r7, #20]
        break;
 8005fba:	e002      	b.n	8005fc2 <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005fbc:	2304      	movs	r3, #4
 8005fbe:	617b      	str	r3, [r7, #20]
        break;
 8005fc0:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8005fc2:	f7fe f8e3 	bl	800418c <HAL_GetTick>
 8005fc6:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8005fc8:	e01b      	b.n	8006002 <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005fca:	f7fe f8df 	bl	800418c <HAL_GetTick>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	1ad3      	subs	r3, r2, r3
 8005fd4:	2b0b      	cmp	r3, #11
 8005fd6:	d914      	bls.n	8006002 <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	689a      	ldr	r2, [r3, #8]
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00d      	beq.n	8006002 <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fea:	f043 0210 	orr.w	r2, r3, #16
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ff6:	f043 0201 	orr.w	r2, r3, #1
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e007      	b.n	8006012 <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	689a      	ldr	r2, [r3, #8]
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	4013      	ands	r3, r2
 800600c:	2b00      	cmp	r3, #0
 800600e:	d1dc      	bne.n	8005fca <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3718      	adds	r7, #24
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	000993ff 	.word	0x000993ff

08006020 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006020:	b480      	push	{r7}
 8006022:	b085      	sub	sp, #20
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f003 0307 	and.w	r3, r3, #7
 800602e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006030:	4b0c      	ldr	r3, [pc, #48]	; (8006064 <__NVIC_SetPriorityGrouping+0x44>)
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006036:	68ba      	ldr	r2, [r7, #8]
 8006038:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800603c:	4013      	ands	r3, r2
 800603e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006048:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800604c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006052:	4a04      	ldr	r2, [pc, #16]	; (8006064 <__NVIC_SetPriorityGrouping+0x44>)
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	60d3      	str	r3, [r2, #12]
}
 8006058:	bf00      	nop
 800605a:	3714      	adds	r7, #20
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr
 8006064:	e000ed00 	.word	0xe000ed00

08006068 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006068:	b480      	push	{r7}
 800606a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800606c:	4b04      	ldr	r3, [pc, #16]	; (8006080 <__NVIC_GetPriorityGrouping+0x18>)
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	0a1b      	lsrs	r3, r3, #8
 8006072:	f003 0307 	and.w	r3, r3, #7
}
 8006076:	4618      	mov	r0, r3
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr
 8006080:	e000ed00 	.word	0xe000ed00

08006084 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	4603      	mov	r3, r0
 800608c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800608e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006092:	2b00      	cmp	r3, #0
 8006094:	db0b      	blt.n	80060ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006096:	79fb      	ldrb	r3, [r7, #7]
 8006098:	f003 021f 	and.w	r2, r3, #31
 800609c:	4907      	ldr	r1, [pc, #28]	; (80060bc <__NVIC_EnableIRQ+0x38>)
 800609e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060a2:	095b      	lsrs	r3, r3, #5
 80060a4:	2001      	movs	r0, #1
 80060a6:	fa00 f202 	lsl.w	r2, r0, r2
 80060aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80060ae:	bf00      	nop
 80060b0:	370c      	adds	r7, #12
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	e000e100 	.word	0xe000e100

080060c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	4603      	mov	r3, r0
 80060c8:	6039      	str	r1, [r7, #0]
 80060ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	db0a      	blt.n	80060ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	b2da      	uxtb	r2, r3
 80060d8:	490c      	ldr	r1, [pc, #48]	; (800610c <__NVIC_SetPriority+0x4c>)
 80060da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060de:	0112      	lsls	r2, r2, #4
 80060e0:	b2d2      	uxtb	r2, r2
 80060e2:	440b      	add	r3, r1
 80060e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80060e8:	e00a      	b.n	8006100 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	b2da      	uxtb	r2, r3
 80060ee:	4908      	ldr	r1, [pc, #32]	; (8006110 <__NVIC_SetPriority+0x50>)
 80060f0:	79fb      	ldrb	r3, [r7, #7]
 80060f2:	f003 030f 	and.w	r3, r3, #15
 80060f6:	3b04      	subs	r3, #4
 80060f8:	0112      	lsls	r2, r2, #4
 80060fa:	b2d2      	uxtb	r2, r2
 80060fc:	440b      	add	r3, r1
 80060fe:	761a      	strb	r2, [r3, #24]
}
 8006100:	bf00      	nop
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr
 800610c:	e000e100 	.word	0xe000e100
 8006110:	e000ed00 	.word	0xe000ed00

08006114 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006114:	b480      	push	{r7}
 8006116:	b089      	sub	sp, #36	; 0x24
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f003 0307 	and.w	r3, r3, #7
 8006126:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	f1c3 0307 	rsb	r3, r3, #7
 800612e:	2b04      	cmp	r3, #4
 8006130:	bf28      	it	cs
 8006132:	2304      	movcs	r3, #4
 8006134:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	3304      	adds	r3, #4
 800613a:	2b06      	cmp	r3, #6
 800613c:	d902      	bls.n	8006144 <NVIC_EncodePriority+0x30>
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	3b03      	subs	r3, #3
 8006142:	e000      	b.n	8006146 <NVIC_EncodePriority+0x32>
 8006144:	2300      	movs	r3, #0
 8006146:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006148:	f04f 32ff 	mov.w	r2, #4294967295
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	fa02 f303 	lsl.w	r3, r2, r3
 8006152:	43da      	mvns	r2, r3
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	401a      	ands	r2, r3
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800615c:	f04f 31ff 	mov.w	r1, #4294967295
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	fa01 f303 	lsl.w	r3, r1, r3
 8006166:	43d9      	mvns	r1, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800616c:	4313      	orrs	r3, r2
         );
}
 800616e:	4618      	mov	r0, r3
 8006170:	3724      	adds	r7, #36	; 0x24
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
	...

0800617c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b082      	sub	sp, #8
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	3b01      	subs	r3, #1
 8006188:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800618c:	d301      	bcc.n	8006192 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800618e:	2301      	movs	r3, #1
 8006190:	e00f      	b.n	80061b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006192:	4a0a      	ldr	r2, [pc, #40]	; (80061bc <SysTick_Config+0x40>)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	3b01      	subs	r3, #1
 8006198:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800619a:	210f      	movs	r1, #15
 800619c:	f04f 30ff 	mov.w	r0, #4294967295
 80061a0:	f7ff ff8e 	bl	80060c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80061a4:	4b05      	ldr	r3, [pc, #20]	; (80061bc <SysTick_Config+0x40>)
 80061a6:	2200      	movs	r2, #0
 80061a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80061aa:	4b04      	ldr	r3, [pc, #16]	; (80061bc <SysTick_Config+0x40>)
 80061ac:	2207      	movs	r2, #7
 80061ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3708      	adds	r7, #8
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	e000e010 	.word	0xe000e010

080061c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f7ff ff29 	bl	8006020 <__NVIC_SetPriorityGrouping>
}
 80061ce:	bf00      	nop
 80061d0:	3708      	adds	r7, #8
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80061d6:	b580      	push	{r7, lr}
 80061d8:	b086      	sub	sp, #24
 80061da:	af00      	add	r7, sp, #0
 80061dc:	4603      	mov	r3, r0
 80061de:	60b9      	str	r1, [r7, #8]
 80061e0:	607a      	str	r2, [r7, #4]
 80061e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80061e4:	2300      	movs	r3, #0
 80061e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80061e8:	f7ff ff3e 	bl	8006068 <__NVIC_GetPriorityGrouping>
 80061ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	68b9      	ldr	r1, [r7, #8]
 80061f2:	6978      	ldr	r0, [r7, #20]
 80061f4:	f7ff ff8e 	bl	8006114 <NVIC_EncodePriority>
 80061f8:	4602      	mov	r2, r0
 80061fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061fe:	4611      	mov	r1, r2
 8006200:	4618      	mov	r0, r3
 8006202:	f7ff ff5d 	bl	80060c0 <__NVIC_SetPriority>
}
 8006206:	bf00      	nop
 8006208:	3718      	adds	r7, #24
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800620e:	b580      	push	{r7, lr}
 8006210:	b082      	sub	sp, #8
 8006212:	af00      	add	r7, sp, #0
 8006214:	4603      	mov	r3, r0
 8006216:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800621c:	4618      	mov	r0, r3
 800621e:	f7ff ff31 	bl	8006084 <__NVIC_EnableIRQ>
}
 8006222:	bf00      	nop
 8006224:	3708      	adds	r7, #8
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b082      	sub	sp, #8
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f7ff ffa2 	bl	800617c <SysTick_Config>
 8006238:	4603      	mov	r3, r0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3708      	adds	r7, #8
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}

08006242 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8006242:	b580      	push	{r7, lr}
 8006244:	b084      	sub	sp, #16
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800624a:	2300      	movs	r3, #0
 800624c:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d101      	bne.n	8006258 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e037      	b.n	80062c8 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2202      	movs	r2, #2
 800625c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800626e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006272:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800627c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006288:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	695b      	ldr	r3, [r3, #20]
 800628e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006294:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	69db      	ldr	r3, [r3, #28]
 800629a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	4313      	orrs	r3, r2
 80062a0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 f9b8 	bl	8006620 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2201      	movs	r2, #1
 80062ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80062c6:	2300      	movs	r3, #0
}  
 80062c8:	4618      	mov	r0, r3
 80062ca:	3710      	adds	r7, #16
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b086      	sub	sp, #24
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]
 80062dc:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80062de:	2300      	movs	r3, #0
 80062e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d101      	bne.n	80062f0 <HAL_DMA_Start_IT+0x20>
 80062ec:	2302      	movs	r3, #2
 80062ee:	e04a      	b.n	8006386 <HAL_DMA_Start_IT+0xb6>
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d13a      	bne.n	8006378 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2202      	movs	r2, #2
 8006306:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2200      	movs	r2, #0
 800630e:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f022 0201 	bic.w	r2, r2, #1
 800631e:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	68b9      	ldr	r1, [r7, #8]
 8006326:	68f8      	ldr	r0, [r7, #12]
 8006328:	f000 f94b 	bl	80065c2 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006330:	2b00      	cmp	r3, #0
 8006332:	d008      	beq.n	8006346 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f042 020e 	orr.w	r2, r2, #14
 8006342:	601a      	str	r2, [r3, #0]
 8006344:	e00f      	b.n	8006366 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f042 020a 	orr.w	r2, r2, #10
 8006354:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f022 0204 	bic.w	r2, r2, #4
 8006364:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f042 0201 	orr.w	r2, r2, #1
 8006374:	601a      	str	r2, [r3, #0]
 8006376:	e005      	b.n	8006384 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8006380:	2302      	movs	r3, #2
 8006382:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8006384:	7dfb      	ldrb	r3, [r7, #23]
} 
 8006386:	4618      	mov	r0, r3
 8006388:	3718      	adds	r7, #24
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}

0800638e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800638e:	b480      	push	{r7}
 8006390:	b083      	sub	sp, #12
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800639c:	2b02      	cmp	r3, #2
 800639e:	d008      	beq.n	80063b2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2204      	movs	r2, #4
 80063a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e020      	b.n	80063f4 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f022 020e 	bic.w	r2, r2, #14
 80063c0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f022 0201 	bic.w	r2, r2, #1
 80063d0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063da:	2101      	movs	r1, #1
 80063dc:	fa01 f202 	lsl.w	r2, r1, r2
 80063e0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006408:	2300      	movs	r3, #0
 800640a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006412:	2b02      	cmp	r3, #2
 8006414:	d005      	beq.n	8006422 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2204      	movs	r2, #4
 800641a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	73fb      	strb	r3, [r7, #15]
 8006420:	e027      	b.n	8006472 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f022 020e 	bic.w	r2, r2, #14
 8006430:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f022 0201 	bic.w	r2, r2, #1
 8006440:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800644a:	2101      	movs	r1, #1
 800644c:	fa01 f202 	lsl.w	r2, r1, r2
 8006450:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2201      	movs	r2, #1
 8006456:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006466:	2b00      	cmp	r3, #0
 8006468:	d003      	beq.n	8006472 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	4798      	blx	r3
    } 
  }
  return status;
 8006472:	7bfb      	ldrb	r3, [r7, #15]
}
 8006474:	4618      	mov	r0, r3
 8006476:	3710      	adds	r7, #16
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006498:	2204      	movs	r2, #4
 800649a:	409a      	lsls	r2, r3
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	4013      	ands	r3, r2
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d024      	beq.n	80064ee <HAL_DMA_IRQHandler+0x72>
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	f003 0304 	and.w	r3, r3, #4
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d01f      	beq.n	80064ee <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 0320 	and.w	r3, r3, #32
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d107      	bne.n	80064cc <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f022 0204 	bic.w	r2, r2, #4
 80064ca:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064d4:	2104      	movs	r1, #4
 80064d6:	fa01 f202 	lsl.w	r2, r1, r2
 80064da:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d06a      	beq.n	80065ba <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80064ec:	e065      	b.n	80065ba <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f2:	2202      	movs	r2, #2
 80064f4:	409a      	lsls	r2, r3
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	4013      	ands	r3, r2
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d02c      	beq.n	8006558 <HAL_DMA_IRQHandler+0xdc>
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	f003 0302 	and.w	r3, r3, #2
 8006504:	2b00      	cmp	r3, #0
 8006506:	d027      	beq.n	8006558 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0320 	and.w	r3, r3, #32
 8006512:	2b00      	cmp	r3, #0
 8006514:	d10b      	bne.n	800652e <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f022 020a 	bic.w	r2, r2, #10
 8006524:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2201      	movs	r2, #1
 800652a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006536:	2102      	movs	r1, #2
 8006538:	fa01 f202 	lsl.w	r2, r1, r2
 800653c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800654a:	2b00      	cmp	r3, #0
 800654c:	d035      	beq.n	80065ba <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8006556:	e030      	b.n	80065ba <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655c:	2208      	movs	r2, #8
 800655e:	409a      	lsls	r2, r3
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	4013      	ands	r3, r2
 8006564:	2b00      	cmp	r3, #0
 8006566:	d028      	beq.n	80065ba <HAL_DMA_IRQHandler+0x13e>
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	f003 0308 	and.w	r3, r3, #8
 800656e:	2b00      	cmp	r3, #0
 8006570:	d023      	beq.n	80065ba <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f022 020e 	bic.w	r2, r2, #14
 8006580:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800658a:	2101      	movs	r1, #1
 800658c:	fa01 f202 	lsl.w	r2, r1, r2
 8006590:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2201      	movs	r2, #1
 8006596:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d004      	beq.n	80065ba <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	4798      	blx	r3
    }
  }
}  
 80065b8:	e7ff      	b.n	80065ba <HAL_DMA_IRQHandler+0x13e>
 80065ba:	bf00      	nop
 80065bc:	3710      	adds	r7, #16
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}

080065c2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80065c2:	b480      	push	{r7}
 80065c4:	b085      	sub	sp, #20
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	60f8      	str	r0, [r7, #12]
 80065ca:	60b9      	str	r1, [r7, #8]
 80065cc:	607a      	str	r2, [r7, #4]
 80065ce:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065d8:	2101      	movs	r1, #1
 80065da:	fa01 f202 	lsl.w	r2, r1, r2
 80065de:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	683a      	ldr	r2, [r7, #0]
 80065e6:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	2b10      	cmp	r3, #16
 80065ee:	d108      	bne.n	8006602 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	68ba      	ldr	r2, [r7, #8]
 80065fe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006600:	e007      	b.n	8006612 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	68ba      	ldr	r2, [r7, #8]
 8006608:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	60da      	str	r2, [r3, #12]
}
 8006612:	bf00      	nop
 8006614:	3714      	adds	r7, #20
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
	...

08006620 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	461a      	mov	r2, r3
 800662e:	4b14      	ldr	r3, [pc, #80]	; (8006680 <DMA_CalcBaseAndBitshift+0x60>)
 8006630:	429a      	cmp	r2, r3
 8006632:	d80f      	bhi.n	8006654 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	461a      	mov	r2, r3
 800663a:	4b12      	ldr	r3, [pc, #72]	; (8006684 <DMA_CalcBaseAndBitshift+0x64>)
 800663c:	4413      	add	r3, r2
 800663e:	4a12      	ldr	r2, [pc, #72]	; (8006688 <DMA_CalcBaseAndBitshift+0x68>)
 8006640:	fba2 2303 	umull	r2, r3, r2, r3
 8006644:	091b      	lsrs	r3, r3, #4
 8006646:	009a      	lsls	r2, r3, #2
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a0f      	ldr	r2, [pc, #60]	; (800668c <DMA_CalcBaseAndBitshift+0x6c>)
 8006650:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8006652:	e00e      	b.n	8006672 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	461a      	mov	r2, r3
 800665a:	4b0d      	ldr	r3, [pc, #52]	; (8006690 <DMA_CalcBaseAndBitshift+0x70>)
 800665c:	4413      	add	r3, r2
 800665e:	4a0a      	ldr	r2, [pc, #40]	; (8006688 <DMA_CalcBaseAndBitshift+0x68>)
 8006660:	fba2 2303 	umull	r2, r3, r2, r3
 8006664:	091b      	lsrs	r3, r3, #4
 8006666:	009a      	lsls	r2, r3, #2
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a09      	ldr	r2, [pc, #36]	; (8006694 <DMA_CalcBaseAndBitshift+0x74>)
 8006670:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006672:	bf00      	nop
 8006674:	370c      	adds	r7, #12
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr
 800667e:	bf00      	nop
 8006680:	40020407 	.word	0x40020407
 8006684:	bffdfff8 	.word	0xbffdfff8
 8006688:	cccccccd 	.word	0xcccccccd
 800668c:	40020000 	.word	0x40020000
 8006690:	bffdfbf8 	.word	0xbffdfbf8
 8006694:	40020400 	.word	0x40020400

08006698 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006698:	b480      	push	{r7}
 800669a:	b087      	sub	sp, #28
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80066a2:	2300      	movs	r3, #0
 80066a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80066a6:	e154      	b.n	8006952 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	2101      	movs	r1, #1
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	fa01 f303 	lsl.w	r3, r1, r3
 80066b4:	4013      	ands	r3, r2
 80066b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	f000 8146 	beq.w	800694c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	f003 0303 	and.w	r3, r3, #3
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d005      	beq.n	80066d8 <HAL_GPIO_Init+0x40>
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	f003 0303 	and.w	r3, r3, #3
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	d130      	bne.n	800673a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	005b      	lsls	r3, r3, #1
 80066e2:	2203      	movs	r2, #3
 80066e4:	fa02 f303 	lsl.w	r3, r2, r3
 80066e8:	43db      	mvns	r3, r3
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	4013      	ands	r3, r2
 80066ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	68da      	ldr	r2, [r3, #12]
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	005b      	lsls	r3, r3, #1
 80066f8:	fa02 f303 	lsl.w	r3, r2, r3
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	4313      	orrs	r3, r2
 8006700:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	693a      	ldr	r2, [r7, #16]
 8006706:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800670e:	2201      	movs	r2, #1
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	fa02 f303 	lsl.w	r3, r2, r3
 8006716:	43db      	mvns	r3, r3
 8006718:	693a      	ldr	r2, [r7, #16]
 800671a:	4013      	ands	r3, r2
 800671c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	091b      	lsrs	r3, r3, #4
 8006724:	f003 0201 	and.w	r2, r3, #1
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	fa02 f303 	lsl.w	r3, r2, r3
 800672e:	693a      	ldr	r2, [r7, #16]
 8006730:	4313      	orrs	r3, r2
 8006732:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	693a      	ldr	r2, [r7, #16]
 8006738:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	f003 0303 	and.w	r3, r3, #3
 8006742:	2b03      	cmp	r3, #3
 8006744:	d017      	beq.n	8006776 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	005b      	lsls	r3, r3, #1
 8006750:	2203      	movs	r2, #3
 8006752:	fa02 f303 	lsl.w	r3, r2, r3
 8006756:	43db      	mvns	r3, r3
 8006758:	693a      	ldr	r2, [r7, #16]
 800675a:	4013      	ands	r3, r2
 800675c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	689a      	ldr	r2, [r3, #8]
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	005b      	lsls	r3, r3, #1
 8006766:	fa02 f303 	lsl.w	r3, r2, r3
 800676a:	693a      	ldr	r2, [r7, #16]
 800676c:	4313      	orrs	r3, r2
 800676e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	693a      	ldr	r2, [r7, #16]
 8006774:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	f003 0303 	and.w	r3, r3, #3
 800677e:	2b02      	cmp	r3, #2
 8006780:	d123      	bne.n	80067ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	08da      	lsrs	r2, r3, #3
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	3208      	adds	r2, #8
 800678a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800678e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	f003 0307 	and.w	r3, r3, #7
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	220f      	movs	r2, #15
 800679a:	fa02 f303 	lsl.w	r3, r2, r3
 800679e:	43db      	mvns	r3, r3
 80067a0:	693a      	ldr	r2, [r7, #16]
 80067a2:	4013      	ands	r3, r2
 80067a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	691a      	ldr	r2, [r3, #16]
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	f003 0307 	and.w	r3, r3, #7
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	fa02 f303 	lsl.w	r3, r2, r3
 80067b6:	693a      	ldr	r2, [r7, #16]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	08da      	lsrs	r2, r3, #3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	3208      	adds	r2, #8
 80067c4:	6939      	ldr	r1, [r7, #16]
 80067c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	005b      	lsls	r3, r3, #1
 80067d4:	2203      	movs	r2, #3
 80067d6:	fa02 f303 	lsl.w	r3, r2, r3
 80067da:	43db      	mvns	r3, r3
 80067dc:	693a      	ldr	r2, [r7, #16]
 80067de:	4013      	ands	r3, r2
 80067e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	f003 0203 	and.w	r2, r3, #3
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	005b      	lsls	r3, r3, #1
 80067ee:	fa02 f303 	lsl.w	r3, r2, r3
 80067f2:	693a      	ldr	r2, [r7, #16]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	693a      	ldr	r2, [r7, #16]
 80067fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006806:	2b00      	cmp	r3, #0
 8006808:	f000 80a0 	beq.w	800694c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800680c:	4b58      	ldr	r3, [pc, #352]	; (8006970 <HAL_GPIO_Init+0x2d8>)
 800680e:	699b      	ldr	r3, [r3, #24]
 8006810:	4a57      	ldr	r2, [pc, #348]	; (8006970 <HAL_GPIO_Init+0x2d8>)
 8006812:	f043 0301 	orr.w	r3, r3, #1
 8006816:	6193      	str	r3, [r2, #24]
 8006818:	4b55      	ldr	r3, [pc, #340]	; (8006970 <HAL_GPIO_Init+0x2d8>)
 800681a:	699b      	ldr	r3, [r3, #24]
 800681c:	f003 0301 	and.w	r3, r3, #1
 8006820:	60bb      	str	r3, [r7, #8]
 8006822:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006824:	4a53      	ldr	r2, [pc, #332]	; (8006974 <HAL_GPIO_Init+0x2dc>)
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	089b      	lsrs	r3, r3, #2
 800682a:	3302      	adds	r3, #2
 800682c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006830:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	f003 0303 	and.w	r3, r3, #3
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	220f      	movs	r2, #15
 800683c:	fa02 f303 	lsl.w	r3, r2, r3
 8006840:	43db      	mvns	r3, r3
 8006842:	693a      	ldr	r2, [r7, #16]
 8006844:	4013      	ands	r3, r2
 8006846:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800684e:	d019      	beq.n	8006884 <HAL_GPIO_Init+0x1ec>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a49      	ldr	r2, [pc, #292]	; (8006978 <HAL_GPIO_Init+0x2e0>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d013      	beq.n	8006880 <HAL_GPIO_Init+0x1e8>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4a48      	ldr	r2, [pc, #288]	; (800697c <HAL_GPIO_Init+0x2e4>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d00d      	beq.n	800687c <HAL_GPIO_Init+0x1e4>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a47      	ldr	r2, [pc, #284]	; (8006980 <HAL_GPIO_Init+0x2e8>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d007      	beq.n	8006878 <HAL_GPIO_Init+0x1e0>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a46      	ldr	r2, [pc, #280]	; (8006984 <HAL_GPIO_Init+0x2ec>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d101      	bne.n	8006874 <HAL_GPIO_Init+0x1dc>
 8006870:	2304      	movs	r3, #4
 8006872:	e008      	b.n	8006886 <HAL_GPIO_Init+0x1ee>
 8006874:	2305      	movs	r3, #5
 8006876:	e006      	b.n	8006886 <HAL_GPIO_Init+0x1ee>
 8006878:	2303      	movs	r3, #3
 800687a:	e004      	b.n	8006886 <HAL_GPIO_Init+0x1ee>
 800687c:	2302      	movs	r3, #2
 800687e:	e002      	b.n	8006886 <HAL_GPIO_Init+0x1ee>
 8006880:	2301      	movs	r3, #1
 8006882:	e000      	b.n	8006886 <HAL_GPIO_Init+0x1ee>
 8006884:	2300      	movs	r3, #0
 8006886:	697a      	ldr	r2, [r7, #20]
 8006888:	f002 0203 	and.w	r2, r2, #3
 800688c:	0092      	lsls	r2, r2, #2
 800688e:	4093      	lsls	r3, r2
 8006890:	693a      	ldr	r2, [r7, #16]
 8006892:	4313      	orrs	r3, r2
 8006894:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006896:	4937      	ldr	r1, [pc, #220]	; (8006974 <HAL_GPIO_Init+0x2dc>)
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	089b      	lsrs	r3, r3, #2
 800689c:	3302      	adds	r3, #2
 800689e:	693a      	ldr	r2, [r7, #16]
 80068a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80068a4:	4b38      	ldr	r3, [pc, #224]	; (8006988 <HAL_GPIO_Init+0x2f0>)
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	43db      	mvns	r3, r3
 80068ae:	693a      	ldr	r2, [r7, #16]
 80068b0:	4013      	ands	r3, r2
 80068b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d003      	beq.n	80068c8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80068c0:	693a      	ldr	r2, [r7, #16]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80068c8:	4a2f      	ldr	r2, [pc, #188]	; (8006988 <HAL_GPIO_Init+0x2f0>)
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80068ce:	4b2e      	ldr	r3, [pc, #184]	; (8006988 <HAL_GPIO_Init+0x2f0>)
 80068d0:	68db      	ldr	r3, [r3, #12]
 80068d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	43db      	mvns	r3, r3
 80068d8:	693a      	ldr	r2, [r7, #16]
 80068da:	4013      	ands	r3, r2
 80068dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d003      	beq.n	80068f2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80068ea:	693a      	ldr	r2, [r7, #16]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80068f2:	4a25      	ldr	r2, [pc, #148]	; (8006988 <HAL_GPIO_Init+0x2f0>)
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80068f8:	4b23      	ldr	r3, [pc, #140]	; (8006988 <HAL_GPIO_Init+0x2f0>)
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	43db      	mvns	r3, r3
 8006902:	693a      	ldr	r2, [r7, #16]
 8006904:	4013      	ands	r3, r2
 8006906:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006910:	2b00      	cmp	r3, #0
 8006912:	d003      	beq.n	800691c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8006914:	693a      	ldr	r2, [r7, #16]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	4313      	orrs	r3, r2
 800691a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800691c:	4a1a      	ldr	r2, [pc, #104]	; (8006988 <HAL_GPIO_Init+0x2f0>)
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006922:	4b19      	ldr	r3, [pc, #100]	; (8006988 <HAL_GPIO_Init+0x2f0>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	43db      	mvns	r3, r3
 800692c:	693a      	ldr	r2, [r7, #16]
 800692e:	4013      	ands	r3, r2
 8006930:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800693a:	2b00      	cmp	r3, #0
 800693c:	d003      	beq.n	8006946 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800693e:	693a      	ldr	r2, [r7, #16]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	4313      	orrs	r3, r2
 8006944:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006946:	4a10      	ldr	r2, [pc, #64]	; (8006988 <HAL_GPIO_Init+0x2f0>)
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	3301      	adds	r3, #1
 8006950:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	fa22 f303 	lsr.w	r3, r2, r3
 800695c:	2b00      	cmp	r3, #0
 800695e:	f47f aea3 	bne.w	80066a8 <HAL_GPIO_Init+0x10>
  }
}
 8006962:	bf00      	nop
 8006964:	bf00      	nop
 8006966:	371c      	adds	r7, #28
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr
 8006970:	40021000 	.word	0x40021000
 8006974:	40010000 	.word	0x40010000
 8006978:	48000400 	.word	0x48000400
 800697c:	48000800 	.word	0x48000800
 8006980:	48000c00 	.word	0x48000c00
 8006984:	48001000 	.word	0x48001000
 8006988:	40010400 	.word	0x40010400

0800698c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800698c:	b480      	push	{r7}
 800698e:	b085      	sub	sp, #20
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	460b      	mov	r3, r1
 8006996:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	691a      	ldr	r2, [r3, #16]
 800699c:	887b      	ldrh	r3, [r7, #2]
 800699e:	4013      	ands	r3, r2
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d002      	beq.n	80069aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80069a4:	2301      	movs	r3, #1
 80069a6:	73fb      	strb	r3, [r7, #15]
 80069a8:	e001      	b.n	80069ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80069aa:	2300      	movs	r3, #0
 80069ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80069ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3714      	adds	r7, #20
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	460b      	mov	r3, r1
 80069c6:	807b      	strh	r3, [r7, #2]
 80069c8:	4613      	mov	r3, r2
 80069ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80069cc:	787b      	ldrb	r3, [r7, #1]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d003      	beq.n	80069da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80069d2:	887a      	ldrh	r2, [r7, #2]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80069d8:	e002      	b.n	80069e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80069da:	887a      	ldrh	r2, [r7, #2]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b082      	sub	sp, #8
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	4603      	mov	r3, r0
 80069f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80069f6:	4b08      	ldr	r3, [pc, #32]	; (8006a18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80069f8:	695a      	ldr	r2, [r3, #20]
 80069fa:	88fb      	ldrh	r3, [r7, #6]
 80069fc:	4013      	ands	r3, r2
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d006      	beq.n	8006a10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006a02:	4a05      	ldr	r2, [pc, #20]	; (8006a18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006a04:	88fb      	ldrh	r3, [r7, #6]
 8006a06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006a08:	88fb      	ldrh	r3, [r7, #6]
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7fc face 	bl	8002fac <HAL_GPIO_EXTI_Callback>
  }
}
 8006a10:	bf00      	nop
 8006a12:	3708      	adds	r7, #8
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	40010400 	.word	0x40010400

08006a1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d101      	bne.n	8006a2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e081      	b.n	8006b32 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d106      	bne.n	8006a48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f7fc fee0 	bl	8003808 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2224      	movs	r2, #36	; 0x24
 8006a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f022 0201 	bic.w	r2, r2, #1
 8006a5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	685a      	ldr	r2, [r3, #4]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006a6c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	689a      	ldr	r2, [r3, #8]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006a7c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d107      	bne.n	8006a96 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	689a      	ldr	r2, [r3, #8]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a92:	609a      	str	r2, [r3, #8]
 8006a94:	e006      	b.n	8006aa4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	689a      	ldr	r2, [r3, #8]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006aa2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	d104      	bne.n	8006ab6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ab4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	6812      	ldr	r2, [r2, #0]
 8006ac0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006ac4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ac8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68da      	ldr	r2, [r3, #12]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ad8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	691a      	ldr	r2, [r3, #16]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	695b      	ldr	r3, [r3, #20]
 8006ae2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	699b      	ldr	r3, [r3, #24]
 8006aea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	430a      	orrs	r2, r1
 8006af2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	69d9      	ldr	r1, [r3, #28]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6a1a      	ldr	r2, [r3, #32]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	430a      	orrs	r2, r1
 8006b02:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f042 0201 	orr.w	r2, r2, #1
 8006b12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2220      	movs	r2, #32
 8006b1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3708      	adds	r7, #8
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
	...

08006b3c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b088      	sub	sp, #32
 8006b40:	af02      	add	r7, sp, #8
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	607a      	str	r2, [r7, #4]
 8006b46:	461a      	mov	r2, r3
 8006b48:	460b      	mov	r3, r1
 8006b4a:	817b      	strh	r3, [r7, #10]
 8006b4c:	4613      	mov	r3, r2
 8006b4e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	2b20      	cmp	r3, #32
 8006b5a:	f040 80da 	bne.w	8006d12 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d101      	bne.n	8006b6c <HAL_I2C_Master_Transmit+0x30>
 8006b68:	2302      	movs	r3, #2
 8006b6a:	e0d3      	b.n	8006d14 <HAL_I2C_Master_Transmit+0x1d8>
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006b74:	f7fd fb0a 	bl	800418c <HAL_GetTick>
 8006b78:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	9300      	str	r3, [sp, #0]
 8006b7e:	2319      	movs	r3, #25
 8006b80:	2201      	movs	r2, #1
 8006b82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006b86:	68f8      	ldr	r0, [r7, #12]
 8006b88:	f000 f9e6 	bl	8006f58 <I2C_WaitOnFlagUntilTimeout>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d001      	beq.n	8006b96 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e0be      	b.n	8006d14 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2221      	movs	r2, #33	; 0x21
 8006b9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2210      	movs	r2, #16
 8006ba2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	893a      	ldrh	r2, [r7, #8]
 8006bb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	2bff      	cmp	r3, #255	; 0xff
 8006bc6:	d90e      	bls.n	8006be6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	22ff      	movs	r2, #255	; 0xff
 8006bcc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bd2:	b2da      	uxtb	r2, r3
 8006bd4:	8979      	ldrh	r1, [r7, #10]
 8006bd6:	4b51      	ldr	r3, [pc, #324]	; (8006d1c <HAL_I2C_Master_Transmit+0x1e0>)
 8006bd8:	9300      	str	r3, [sp, #0]
 8006bda:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006bde:	68f8      	ldr	r0, [r7, #12]
 8006be0:	f000 fbf6 	bl	80073d0 <I2C_TransferConfig>
 8006be4:	e06c      	b.n	8006cc0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bea:	b29a      	uxth	r2, r3
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bf4:	b2da      	uxtb	r2, r3
 8006bf6:	8979      	ldrh	r1, [r7, #10]
 8006bf8:	4b48      	ldr	r3, [pc, #288]	; (8006d1c <HAL_I2C_Master_Transmit+0x1e0>)
 8006bfa:	9300      	str	r3, [sp, #0]
 8006bfc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c00:	68f8      	ldr	r0, [r7, #12]
 8006c02:	f000 fbe5 	bl	80073d0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006c06:	e05b      	b.n	8006cc0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c08:	697a      	ldr	r2, [r7, #20]
 8006c0a:	6a39      	ldr	r1, [r7, #32]
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	f000 f9f2 	bl	8006ff6 <I2C_WaitOnTXISFlagUntilTimeout>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d001      	beq.n	8006c1c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e07b      	b.n	8006d14 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c20:	781a      	ldrb	r2, [r3, #0]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2c:	1c5a      	adds	r2, r3, #1
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	3b01      	subs	r3, #1
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c44:	3b01      	subs	r3, #1
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d034      	beq.n	8006cc0 <HAL_I2C_Master_Transmit+0x184>
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d130      	bne.n	8006cc0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	9300      	str	r3, [sp, #0]
 8006c62:	6a3b      	ldr	r3, [r7, #32]
 8006c64:	2200      	movs	r2, #0
 8006c66:	2180      	movs	r1, #128	; 0x80
 8006c68:	68f8      	ldr	r0, [r7, #12]
 8006c6a:	f000 f975 	bl	8006f58 <I2C_WaitOnFlagUntilTimeout>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d001      	beq.n	8006c78 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	e04d      	b.n	8006d14 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	2bff      	cmp	r3, #255	; 0xff
 8006c80:	d90e      	bls.n	8006ca0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	22ff      	movs	r2, #255	; 0xff
 8006c86:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c8c:	b2da      	uxtb	r2, r3
 8006c8e:	8979      	ldrh	r1, [r7, #10]
 8006c90:	2300      	movs	r3, #0
 8006c92:	9300      	str	r3, [sp, #0]
 8006c94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c98:	68f8      	ldr	r0, [r7, #12]
 8006c9a:	f000 fb99 	bl	80073d0 <I2C_TransferConfig>
 8006c9e:	e00f      	b.n	8006cc0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ca4:	b29a      	uxth	r2, r3
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cae:	b2da      	uxtb	r2, r3
 8006cb0:	8979      	ldrh	r1, [r7, #10]
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	9300      	str	r3, [sp, #0]
 8006cb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006cba:	68f8      	ldr	r0, [r7, #12]
 8006cbc:	f000 fb88 	bl	80073d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d19e      	bne.n	8006c08 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006cca:	697a      	ldr	r2, [r7, #20]
 8006ccc:	6a39      	ldr	r1, [r7, #32]
 8006cce:	68f8      	ldr	r0, [r7, #12]
 8006cd0:	f000 f9d8 	bl	8007084 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d001      	beq.n	8006cde <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e01a      	b.n	8006d14 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	2220      	movs	r2, #32
 8006ce4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	6859      	ldr	r1, [r3, #4]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	4b0b      	ldr	r3, [pc, #44]	; (8006d20 <HAL_I2C_Master_Transmit+0x1e4>)
 8006cf2:	400b      	ands	r3, r1
 8006cf4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2220      	movs	r2, #32
 8006cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	e000      	b.n	8006d14 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8006d12:	2302      	movs	r3, #2
  }
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3718      	adds	r7, #24
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}
 8006d1c:	80002000 	.word	0x80002000
 8006d20:	fe00e800 	.word	0xfe00e800

08006d24 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b088      	sub	sp, #32
 8006d28:	af02      	add	r7, sp, #8
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	607a      	str	r2, [r7, #4]
 8006d2e:	461a      	mov	r2, r3
 8006d30:	460b      	mov	r3, r1
 8006d32:	817b      	strh	r3, [r7, #10]
 8006d34:	4613      	mov	r3, r2
 8006d36:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	2b20      	cmp	r3, #32
 8006d42:	f040 80db 	bne.w	8006efc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d101      	bne.n	8006d54 <HAL_I2C_Master_Receive+0x30>
 8006d50:	2302      	movs	r3, #2
 8006d52:	e0d4      	b.n	8006efe <HAL_I2C_Master_Receive+0x1da>
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006d5c:	f7fd fa16 	bl	800418c <HAL_GetTick>
 8006d60:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	9300      	str	r3, [sp, #0]
 8006d66:	2319      	movs	r3, #25
 8006d68:	2201      	movs	r2, #1
 8006d6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d6e:	68f8      	ldr	r0, [r7, #12]
 8006d70:	f000 f8f2 	bl	8006f58 <I2C_WaitOnFlagUntilTimeout>
 8006d74:	4603      	mov	r3, r0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d001      	beq.n	8006d7e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e0bf      	b.n	8006efe <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2222      	movs	r2, #34	; 0x22
 8006d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2210      	movs	r2, #16
 8006d8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2200      	movs	r2, #0
 8006d92:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	893a      	ldrh	r2, [r7, #8]
 8006d9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2200      	movs	r2, #0
 8006da4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	2bff      	cmp	r3, #255	; 0xff
 8006dae:	d90e      	bls.n	8006dce <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	22ff      	movs	r2, #255	; 0xff
 8006db4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dba:	b2da      	uxtb	r2, r3
 8006dbc:	8979      	ldrh	r1, [r7, #10]
 8006dbe:	4b52      	ldr	r3, [pc, #328]	; (8006f08 <HAL_I2C_Master_Receive+0x1e4>)
 8006dc0:	9300      	str	r3, [sp, #0]
 8006dc2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006dc6:	68f8      	ldr	r0, [r7, #12]
 8006dc8:	f000 fb02 	bl	80073d0 <I2C_TransferConfig>
 8006dcc:	e06d      	b.n	8006eaa <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dd2:	b29a      	uxth	r2, r3
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ddc:	b2da      	uxtb	r2, r3
 8006dde:	8979      	ldrh	r1, [r7, #10]
 8006de0:	4b49      	ldr	r3, [pc, #292]	; (8006f08 <HAL_I2C_Master_Receive+0x1e4>)
 8006de2:	9300      	str	r3, [sp, #0]
 8006de4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006de8:	68f8      	ldr	r0, [r7, #12]
 8006dea:	f000 faf1 	bl	80073d0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006dee:	e05c      	b.n	8006eaa <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006df0:	697a      	ldr	r2, [r7, #20]
 8006df2:	6a39      	ldr	r1, [r7, #32]
 8006df4:	68f8      	ldr	r0, [r7, #12]
 8006df6:	f000 f989 	bl	800710c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d001      	beq.n	8006e04 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	e07c      	b.n	8006efe <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0e:	b2d2      	uxtb	r2, r2
 8006e10:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e16:	1c5a      	adds	r2, r3, #1
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e20:	3b01      	subs	r3, #1
 8006e22:	b29a      	uxth	r2, r3
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	3b01      	subs	r3, #1
 8006e30:	b29a      	uxth	r2, r3
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d034      	beq.n	8006eaa <HAL_I2C_Master_Receive+0x186>
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d130      	bne.n	8006eaa <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	9300      	str	r3, [sp, #0]
 8006e4c:	6a3b      	ldr	r3, [r7, #32]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	2180      	movs	r1, #128	; 0x80
 8006e52:	68f8      	ldr	r0, [r7, #12]
 8006e54:	f000 f880 	bl	8006f58 <I2C_WaitOnFlagUntilTimeout>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d001      	beq.n	8006e62 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e04d      	b.n	8006efe <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	2bff      	cmp	r3, #255	; 0xff
 8006e6a:	d90e      	bls.n	8006e8a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	22ff      	movs	r2, #255	; 0xff
 8006e70:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e76:	b2da      	uxtb	r2, r3
 8006e78:	8979      	ldrh	r1, [r7, #10]
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	9300      	str	r3, [sp, #0]
 8006e7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	f000 faa4 	bl	80073d0 <I2C_TransferConfig>
 8006e88:	e00f      	b.n	8006eaa <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e8e:	b29a      	uxth	r2, r3
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e98:	b2da      	uxtb	r2, r3
 8006e9a:	8979      	ldrh	r1, [r7, #10]
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	9300      	str	r3, [sp, #0]
 8006ea0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ea4:	68f8      	ldr	r0, [r7, #12]
 8006ea6:	f000 fa93 	bl	80073d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d19d      	bne.n	8006df0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006eb4:	697a      	ldr	r2, [r7, #20]
 8006eb6:	6a39      	ldr	r1, [r7, #32]
 8006eb8:	68f8      	ldr	r0, [r7, #12]
 8006eba:	f000 f8e3 	bl	8007084 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d001      	beq.n	8006ec8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e01a      	b.n	8006efe <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2220      	movs	r2, #32
 8006ece:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	6859      	ldr	r1, [r3, #4]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	4b0c      	ldr	r3, [pc, #48]	; (8006f0c <HAL_I2C_Master_Receive+0x1e8>)
 8006edc:	400b      	ands	r3, r1
 8006ede:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2220      	movs	r2, #32
 8006ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2200      	movs	r2, #0
 8006eec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	e000      	b.n	8006efe <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006efc:	2302      	movs	r3, #2
  }
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3718      	adds	r7, #24
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	80002400 	.word	0x80002400
 8006f0c:	fe00e800 	.word	0xfe00e800

08006f10 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	699b      	ldr	r3, [r3, #24]
 8006f1e:	f003 0302 	and.w	r3, r3, #2
 8006f22:	2b02      	cmp	r3, #2
 8006f24:	d103      	bne.n	8006f2e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	699b      	ldr	r3, [r3, #24]
 8006f34:	f003 0301 	and.w	r3, r3, #1
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d007      	beq.n	8006f4c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	699a      	ldr	r2, [r3, #24]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f042 0201 	orr.w	r2, r2, #1
 8006f4a:	619a      	str	r2, [r3, #24]
  }
}
 8006f4c:	bf00      	nop
 8006f4e:	370c      	adds	r7, #12
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b084      	sub	sp, #16
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	60b9      	str	r1, [r7, #8]
 8006f62:	603b      	str	r3, [r7, #0]
 8006f64:	4613      	mov	r3, r2
 8006f66:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f68:	e031      	b.n	8006fce <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f70:	d02d      	beq.n	8006fce <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f72:	f7fd f90b 	bl	800418c <HAL_GetTick>
 8006f76:	4602      	mov	r2, r0
 8006f78:	69bb      	ldr	r3, [r7, #24]
 8006f7a:	1ad3      	subs	r3, r2, r3
 8006f7c:	683a      	ldr	r2, [r7, #0]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d302      	bcc.n	8006f88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d122      	bne.n	8006fce <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	699a      	ldr	r2, [r3, #24]
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	4013      	ands	r3, r2
 8006f92:	68ba      	ldr	r2, [r7, #8]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	bf0c      	ite	eq
 8006f98:	2301      	moveq	r3, #1
 8006f9a:	2300      	movne	r3, #0
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	79fb      	ldrb	r3, [r7, #7]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d113      	bne.n	8006fce <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006faa:	f043 0220 	orr.w	r2, r3, #32
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2220      	movs	r2, #32
 8006fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e00f      	b.n	8006fee <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	699a      	ldr	r2, [r3, #24]
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	68ba      	ldr	r2, [r7, #8]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	bf0c      	ite	eq
 8006fde:	2301      	moveq	r3, #1
 8006fe0:	2300      	movne	r3, #0
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	79fb      	ldrb	r3, [r7, #7]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d0be      	beq.n	8006f6a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006fec:	2300      	movs	r3, #0
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}

08006ff6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006ff6:	b580      	push	{r7, lr}
 8006ff8:	b084      	sub	sp, #16
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	60f8      	str	r0, [r7, #12]
 8006ffe:	60b9      	str	r1, [r7, #8]
 8007000:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007002:	e033      	b.n	800706c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	68b9      	ldr	r1, [r7, #8]
 8007008:	68f8      	ldr	r0, [r7, #12]
 800700a:	f000 f901 	bl	8007210 <I2C_IsErrorOccurred>
 800700e:	4603      	mov	r3, r0
 8007010:	2b00      	cmp	r3, #0
 8007012:	d001      	beq.n	8007018 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	e031      	b.n	800707c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800701e:	d025      	beq.n	800706c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007020:	f7fd f8b4 	bl	800418c <HAL_GetTick>
 8007024:	4602      	mov	r2, r0
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	1ad3      	subs	r3, r2, r3
 800702a:	68ba      	ldr	r2, [r7, #8]
 800702c:	429a      	cmp	r2, r3
 800702e:	d302      	bcc.n	8007036 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d11a      	bne.n	800706c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	699b      	ldr	r3, [r3, #24]
 800703c:	f003 0302 	and.w	r3, r3, #2
 8007040:	2b02      	cmp	r3, #2
 8007042:	d013      	beq.n	800706c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007048:	f043 0220 	orr.w	r2, r3, #32
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2220      	movs	r2, #32
 8007054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2200      	movs	r2, #0
 800705c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2200      	movs	r2, #0
 8007064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007068:	2301      	movs	r3, #1
 800706a:	e007      	b.n	800707c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	699b      	ldr	r3, [r3, #24]
 8007072:	f003 0302 	and.w	r3, r3, #2
 8007076:	2b02      	cmp	r3, #2
 8007078:	d1c4      	bne.n	8007004 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800707a:	2300      	movs	r3, #0
}
 800707c:	4618      	mov	r0, r3
 800707e:	3710      	adds	r7, #16
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007090:	e02f      	b.n	80070f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	68b9      	ldr	r1, [r7, #8]
 8007096:	68f8      	ldr	r0, [r7, #12]
 8007098:	f000 f8ba 	bl	8007210 <I2C_IsErrorOccurred>
 800709c:	4603      	mov	r3, r0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d001      	beq.n	80070a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	e02d      	b.n	8007102 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070a6:	f7fd f871 	bl	800418c <HAL_GetTick>
 80070aa:	4602      	mov	r2, r0
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	1ad3      	subs	r3, r2, r3
 80070b0:	68ba      	ldr	r2, [r7, #8]
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d302      	bcc.n	80070bc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d11a      	bne.n	80070f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	699b      	ldr	r3, [r3, #24]
 80070c2:	f003 0320 	and.w	r3, r3, #32
 80070c6:	2b20      	cmp	r3, #32
 80070c8:	d013      	beq.n	80070f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ce:	f043 0220 	orr.w	r2, r3, #32
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2220      	movs	r2, #32
 80070da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2200      	movs	r2, #0
 80070e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	e007      	b.n	8007102 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	699b      	ldr	r3, [r3, #24]
 80070f8:	f003 0320 	and.w	r3, r3, #32
 80070fc:	2b20      	cmp	r3, #32
 80070fe:	d1c8      	bne.n	8007092 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	3710      	adds	r7, #16
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
	...

0800710c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	60f8      	str	r0, [r7, #12]
 8007114:	60b9      	str	r1, [r7, #8]
 8007116:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007118:	e06b      	b.n	80071f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	68b9      	ldr	r1, [r7, #8]
 800711e:	68f8      	ldr	r0, [r7, #12]
 8007120:	f000 f876 	bl	8007210 <I2C_IsErrorOccurred>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	d001      	beq.n	800712e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e069      	b.n	8007202 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	699b      	ldr	r3, [r3, #24]
 8007134:	f003 0320 	and.w	r3, r3, #32
 8007138:	2b20      	cmp	r3, #32
 800713a:	d138      	bne.n	80071ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	699b      	ldr	r3, [r3, #24]
 8007142:	f003 0304 	and.w	r3, r3, #4
 8007146:	2b04      	cmp	r3, #4
 8007148:	d105      	bne.n	8007156 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800714e:	2b00      	cmp	r3, #0
 8007150:	d001      	beq.n	8007156 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8007152:	2300      	movs	r3, #0
 8007154:	e055      	b.n	8007202 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	699b      	ldr	r3, [r3, #24]
 800715c:	f003 0310 	and.w	r3, r3, #16
 8007160:	2b10      	cmp	r3, #16
 8007162:	d107      	bne.n	8007174 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	2210      	movs	r2, #16
 800716a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2204      	movs	r2, #4
 8007170:	645a      	str	r2, [r3, #68]	; 0x44
 8007172:	e002      	b.n	800717a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2200      	movs	r2, #0
 8007178:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2220      	movs	r2, #32
 8007180:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	6859      	ldr	r1, [r3, #4]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	4b1f      	ldr	r3, [pc, #124]	; (800720c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800718e:	400b      	ands	r3, r1
 8007190:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2220      	movs	r2, #32
 8007196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2200      	movs	r2, #0
 800719e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	e029      	b.n	8007202 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071ae:	f7fc ffed 	bl	800418c <HAL_GetTick>
 80071b2:	4602      	mov	r2, r0
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	1ad3      	subs	r3, r2, r3
 80071b8:	68ba      	ldr	r2, [r7, #8]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d302      	bcc.n	80071c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d116      	bne.n	80071f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	699b      	ldr	r3, [r3, #24]
 80071ca:	f003 0304 	and.w	r3, r3, #4
 80071ce:	2b04      	cmp	r3, #4
 80071d0:	d00f      	beq.n	80071f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071d6:	f043 0220 	orr.w	r2, r3, #32
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2220      	movs	r2, #32
 80071e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	e007      	b.n	8007202 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	699b      	ldr	r3, [r3, #24]
 80071f8:	f003 0304 	and.w	r3, r3, #4
 80071fc:	2b04      	cmp	r3, #4
 80071fe:	d18c      	bne.n	800711a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007200:	2300      	movs	r3, #0
}
 8007202:	4618      	mov	r0, r3
 8007204:	3710      	adds	r7, #16
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop
 800720c:	fe00e800 	.word	0xfe00e800

08007210 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b08a      	sub	sp, #40	; 0x28
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800721c:	2300      	movs	r3, #0
 800721e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	699b      	ldr	r3, [r3, #24]
 8007228:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800722a:	2300      	movs	r3, #0
 800722c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	f003 0310 	and.w	r3, r3, #16
 8007238:	2b00      	cmp	r3, #0
 800723a:	d068      	beq.n	800730e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2210      	movs	r2, #16
 8007242:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007244:	e049      	b.n	80072da <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800724c:	d045      	beq.n	80072da <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800724e:	f7fc ff9d 	bl	800418c <HAL_GetTick>
 8007252:	4602      	mov	r2, r0
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	1ad3      	subs	r3, r2, r3
 8007258:	68ba      	ldr	r2, [r7, #8]
 800725a:	429a      	cmp	r2, r3
 800725c:	d302      	bcc.n	8007264 <I2C_IsErrorOccurred+0x54>
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d13a      	bne.n	80072da <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800726e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007276:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	699b      	ldr	r3, [r3, #24]
 800727e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007282:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007286:	d121      	bne.n	80072cc <I2C_IsErrorOccurred+0xbc>
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800728e:	d01d      	beq.n	80072cc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007290:	7cfb      	ldrb	r3, [r7, #19]
 8007292:	2b20      	cmp	r3, #32
 8007294:	d01a      	beq.n	80072cc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	685a      	ldr	r2, [r3, #4]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80072a4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80072a6:	f7fc ff71 	bl	800418c <HAL_GetTick>
 80072aa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80072ac:	e00e      	b.n	80072cc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80072ae:	f7fc ff6d 	bl	800418c <HAL_GetTick>
 80072b2:	4602      	mov	r2, r0
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	1ad3      	subs	r3, r2, r3
 80072b8:	2b19      	cmp	r3, #25
 80072ba:	d907      	bls.n	80072cc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80072bc:	6a3b      	ldr	r3, [r7, #32]
 80072be:	f043 0320 	orr.w	r3, r3, #32
 80072c2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80072c4:	2301      	movs	r3, #1
 80072c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80072ca:	e006      	b.n	80072da <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	699b      	ldr	r3, [r3, #24]
 80072d2:	f003 0320 	and.w	r3, r3, #32
 80072d6:	2b20      	cmp	r3, #32
 80072d8:	d1e9      	bne.n	80072ae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	699b      	ldr	r3, [r3, #24]
 80072e0:	f003 0320 	and.w	r3, r3, #32
 80072e4:	2b20      	cmp	r3, #32
 80072e6:	d003      	beq.n	80072f0 <I2C_IsErrorOccurred+0xe0>
 80072e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d0aa      	beq.n	8007246 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80072f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d103      	bne.n	8007300 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	2220      	movs	r2, #32
 80072fe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007300:	6a3b      	ldr	r3, [r7, #32]
 8007302:	f043 0304 	orr.w	r3, r3, #4
 8007306:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	699b      	ldr	r3, [r3, #24]
 8007314:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007316:	69bb      	ldr	r3, [r7, #24]
 8007318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800731c:	2b00      	cmp	r3, #0
 800731e:	d00b      	beq.n	8007338 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007320:	6a3b      	ldr	r3, [r7, #32]
 8007322:	f043 0301 	orr.w	r3, r3, #1
 8007326:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007330:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007338:	69bb      	ldr	r3, [r7, #24]
 800733a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800733e:	2b00      	cmp	r3, #0
 8007340:	d00b      	beq.n	800735a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007342:	6a3b      	ldr	r3, [r7, #32]
 8007344:	f043 0308 	orr.w	r3, r3, #8
 8007348:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007352:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800735a:	69bb      	ldr	r3, [r7, #24]
 800735c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007360:	2b00      	cmp	r3, #0
 8007362:	d00b      	beq.n	800737c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007364:	6a3b      	ldr	r3, [r7, #32]
 8007366:	f043 0302 	orr.w	r3, r3, #2
 800736a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007374:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800737c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007380:	2b00      	cmp	r3, #0
 8007382:	d01c      	beq.n	80073be <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007384:	68f8      	ldr	r0, [r7, #12]
 8007386:	f7ff fdc3 	bl	8006f10 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	6859      	ldr	r1, [r3, #4]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	4b0d      	ldr	r3, [pc, #52]	; (80073cc <I2C_IsErrorOccurred+0x1bc>)
 8007396:	400b      	ands	r3, r1
 8007398:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800739e:	6a3b      	ldr	r3, [r7, #32]
 80073a0:	431a      	orrs	r2, r3
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2220      	movs	r2, #32
 80073aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2200      	movs	r2, #0
 80073b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80073be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3728      	adds	r7, #40	; 0x28
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	fe00e800 	.word	0xfe00e800

080073d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b087      	sub	sp, #28
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	607b      	str	r3, [r7, #4]
 80073da:	460b      	mov	r3, r1
 80073dc:	817b      	strh	r3, [r7, #10]
 80073de:	4613      	mov	r3, r2
 80073e0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80073e2:	897b      	ldrh	r3, [r7, #10]
 80073e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80073e8:	7a7b      	ldrb	r3, [r7, #9]
 80073ea:	041b      	lsls	r3, r3, #16
 80073ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80073f0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80073f6:	6a3b      	ldr	r3, [r7, #32]
 80073f8:	4313      	orrs	r3, r2
 80073fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80073fe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	685a      	ldr	r2, [r3, #4]
 8007406:	6a3b      	ldr	r3, [r7, #32]
 8007408:	0d5b      	lsrs	r3, r3, #21
 800740a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800740e:	4b08      	ldr	r3, [pc, #32]	; (8007430 <I2C_TransferConfig+0x60>)
 8007410:	430b      	orrs	r3, r1
 8007412:	43db      	mvns	r3, r3
 8007414:	ea02 0103 	and.w	r1, r2, r3
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	697a      	ldr	r2, [r7, #20]
 800741e:	430a      	orrs	r2, r1
 8007420:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007422:	bf00      	nop
 8007424:	371c      	adds	r7, #28
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr
 800742e:	bf00      	nop
 8007430:	03ff63ff 	.word	0x03ff63ff

08007434 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007434:	b480      	push	{r7}
 8007436:	b083      	sub	sp, #12
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007444:	b2db      	uxtb	r3, r3
 8007446:	2b20      	cmp	r3, #32
 8007448:	d138      	bne.n	80074bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007450:	2b01      	cmp	r3, #1
 8007452:	d101      	bne.n	8007458 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007454:	2302      	movs	r3, #2
 8007456:	e032      	b.n	80074be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2201      	movs	r2, #1
 800745c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2224      	movs	r2, #36	; 0x24
 8007464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f022 0201 	bic.w	r2, r2, #1
 8007476:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007486:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	6819      	ldr	r1, [r3, #0]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	683a      	ldr	r2, [r7, #0]
 8007494:	430a      	orrs	r2, r1
 8007496:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f042 0201 	orr.w	r2, r2, #1
 80074a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2220      	movs	r2, #32
 80074ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80074b8:	2300      	movs	r3, #0
 80074ba:	e000      	b.n	80074be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80074bc:	2302      	movs	r3, #2
  }
}
 80074be:	4618      	mov	r0, r3
 80074c0:	370c      	adds	r7, #12
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr

080074ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80074ca:	b480      	push	{r7}
 80074cc:	b085      	sub	sp, #20
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
 80074d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	2b20      	cmp	r3, #32
 80074de:	d139      	bne.n	8007554 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d101      	bne.n	80074ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80074ea:	2302      	movs	r3, #2
 80074ec:	e033      	b.n	8007556 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2201      	movs	r2, #1
 80074f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2224      	movs	r2, #36	; 0x24
 80074fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f022 0201 	bic.w	r2, r2, #1
 800750c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800751c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	021b      	lsls	r3, r3, #8
 8007522:	68fa      	ldr	r2, [r7, #12]
 8007524:	4313      	orrs	r3, r2
 8007526:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	68fa      	ldr	r2, [r7, #12]
 800752e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f042 0201 	orr.w	r2, r2, #1
 800753e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2220      	movs	r2, #32
 8007544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007550:	2300      	movs	r3, #0
 8007552:	e000      	b.n	8007556 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007554:	2302      	movs	r3, #2
  }
}
 8007556:	4618      	mov	r0, r3
 8007558:	3714      	adds	r7, #20
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr
	...

08007564 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800756a:	af00      	add	r7, sp, #0
 800756c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007570:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007574:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007576:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800757a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d102      	bne.n	800758a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8007584:	2301      	movs	r3, #1
 8007586:	f001 b823 	b.w	80085d0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800758a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800758e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f003 0301 	and.w	r3, r3, #1
 800759a:	2b00      	cmp	r3, #0
 800759c:	f000 817d 	beq.w	800789a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80075a0:	4bbc      	ldr	r3, [pc, #752]	; (8007894 <HAL_RCC_OscConfig+0x330>)
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	f003 030c 	and.w	r3, r3, #12
 80075a8:	2b04      	cmp	r3, #4
 80075aa:	d00c      	beq.n	80075c6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80075ac:	4bb9      	ldr	r3, [pc, #740]	; (8007894 <HAL_RCC_OscConfig+0x330>)
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	f003 030c 	and.w	r3, r3, #12
 80075b4:	2b08      	cmp	r3, #8
 80075b6:	d15c      	bne.n	8007672 <HAL_RCC_OscConfig+0x10e>
 80075b8:	4bb6      	ldr	r3, [pc, #728]	; (8007894 <HAL_RCC_OscConfig+0x330>)
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075c4:	d155      	bne.n	8007672 <HAL_RCC_OscConfig+0x10e>
 80075c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80075ca:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075ce:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80075d2:	fa93 f3a3 	rbit	r3, r3
 80075d6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80075da:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075de:	fab3 f383 	clz	r3, r3
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	095b      	lsrs	r3, r3, #5
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	f043 0301 	orr.w	r3, r3, #1
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d102      	bne.n	80075f8 <HAL_RCC_OscConfig+0x94>
 80075f2:	4ba8      	ldr	r3, [pc, #672]	; (8007894 <HAL_RCC_OscConfig+0x330>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	e015      	b.n	8007624 <HAL_RCC_OscConfig+0xc0>
 80075f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80075fc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007600:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8007604:	fa93 f3a3 	rbit	r3, r3
 8007608:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800760c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007610:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8007614:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8007618:	fa93 f3a3 	rbit	r3, r3
 800761c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8007620:	4b9c      	ldr	r3, [pc, #624]	; (8007894 <HAL_RCC_OscConfig+0x330>)
 8007622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007624:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007628:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800762c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8007630:	fa92 f2a2 	rbit	r2, r2
 8007634:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8007638:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800763c:	fab2 f282 	clz	r2, r2
 8007640:	b2d2      	uxtb	r2, r2
 8007642:	f042 0220 	orr.w	r2, r2, #32
 8007646:	b2d2      	uxtb	r2, r2
 8007648:	f002 021f 	and.w	r2, r2, #31
 800764c:	2101      	movs	r1, #1
 800764e:	fa01 f202 	lsl.w	r2, r1, r2
 8007652:	4013      	ands	r3, r2
 8007654:	2b00      	cmp	r3, #0
 8007656:	f000 811f 	beq.w	8007898 <HAL_RCC_OscConfig+0x334>
 800765a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800765e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	2b00      	cmp	r3, #0
 8007668:	f040 8116 	bne.w	8007898 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800766c:	2301      	movs	r3, #1
 800766e:	f000 bfaf 	b.w	80085d0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007676:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007682:	d106      	bne.n	8007692 <HAL_RCC_OscConfig+0x12e>
 8007684:	4b83      	ldr	r3, [pc, #524]	; (8007894 <HAL_RCC_OscConfig+0x330>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a82      	ldr	r2, [pc, #520]	; (8007894 <HAL_RCC_OscConfig+0x330>)
 800768a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800768e:	6013      	str	r3, [r2, #0]
 8007690:	e036      	b.n	8007700 <HAL_RCC_OscConfig+0x19c>
 8007692:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007696:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d10c      	bne.n	80076bc <HAL_RCC_OscConfig+0x158>
 80076a2:	4b7c      	ldr	r3, [pc, #496]	; (8007894 <HAL_RCC_OscConfig+0x330>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a7b      	ldr	r2, [pc, #492]	; (8007894 <HAL_RCC_OscConfig+0x330>)
 80076a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076ac:	6013      	str	r3, [r2, #0]
 80076ae:	4b79      	ldr	r3, [pc, #484]	; (8007894 <HAL_RCC_OscConfig+0x330>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a78      	ldr	r2, [pc, #480]	; (8007894 <HAL_RCC_OscConfig+0x330>)
 80076b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80076b8:	6013      	str	r3, [r2, #0]
 80076ba:	e021      	b.n	8007700 <HAL_RCC_OscConfig+0x19c>
 80076bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80076cc:	d10c      	bne.n	80076e8 <HAL_RCC_OscConfig+0x184>
 80076ce:	4b71      	ldr	r3, [pc, #452]	; (8007894 <HAL_RCC_OscConfig+0x330>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a70      	ldr	r2, [pc, #448]	; (8007894 <HAL_RCC_OscConfig+0x330>)
 80076d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80076d8:	6013      	str	r3, [r2, #0]
 80076da:	4b6e      	ldr	r3, [pc, #440]	; (8007894 <HAL_RCC_OscConfig+0x330>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a6d      	ldr	r2, [pc, #436]	; (8007894 <HAL_RCC_OscConfig+0x330>)
 80076e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076e4:	6013      	str	r3, [r2, #0]
 80076e6:	e00b      	b.n	8007700 <HAL_RCC_OscConfig+0x19c>
 80076e8:	4b6a      	ldr	r3, [pc, #424]	; (8007894 <HAL_RCC_OscConfig+0x330>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a69      	ldr	r2, [pc, #420]	; (8007894 <HAL_RCC_OscConfig+0x330>)
 80076ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076f2:	6013      	str	r3, [r2, #0]
 80076f4:	4b67      	ldr	r3, [pc, #412]	; (8007894 <HAL_RCC_OscConfig+0x330>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a66      	ldr	r2, [pc, #408]	; (8007894 <HAL_RCC_OscConfig+0x330>)
 80076fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80076fe:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007700:	4b64      	ldr	r3, [pc, #400]	; (8007894 <HAL_RCC_OscConfig+0x330>)
 8007702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007704:	f023 020f 	bic.w	r2, r3, #15
 8007708:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800770c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	495f      	ldr	r1, [pc, #380]	; (8007894 <HAL_RCC_OscConfig+0x330>)
 8007716:	4313      	orrs	r3, r2
 8007718:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800771a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800771e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d059      	beq.n	80077de <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800772a:	f7fc fd2f 	bl	800418c <HAL_GetTick>
 800772e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007732:	e00a      	b.n	800774a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007734:	f7fc fd2a 	bl	800418c <HAL_GetTick>
 8007738:	4602      	mov	r2, r0
 800773a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800773e:	1ad3      	subs	r3, r2, r3
 8007740:	2b64      	cmp	r3, #100	; 0x64
 8007742:	d902      	bls.n	800774a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8007744:	2303      	movs	r3, #3
 8007746:	f000 bf43 	b.w	80085d0 <HAL_RCC_OscConfig+0x106c>
 800774a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800774e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007752:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8007756:	fa93 f3a3 	rbit	r3, r3
 800775a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800775e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007762:	fab3 f383 	clz	r3, r3
 8007766:	b2db      	uxtb	r3, r3
 8007768:	095b      	lsrs	r3, r3, #5
 800776a:	b2db      	uxtb	r3, r3
 800776c:	f043 0301 	orr.w	r3, r3, #1
 8007770:	b2db      	uxtb	r3, r3
 8007772:	2b01      	cmp	r3, #1
 8007774:	d102      	bne.n	800777c <HAL_RCC_OscConfig+0x218>
 8007776:	4b47      	ldr	r3, [pc, #284]	; (8007894 <HAL_RCC_OscConfig+0x330>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	e015      	b.n	80077a8 <HAL_RCC_OscConfig+0x244>
 800777c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007780:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007784:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8007788:	fa93 f3a3 	rbit	r3, r3
 800778c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8007790:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007794:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8007798:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800779c:	fa93 f3a3 	rbit	r3, r3
 80077a0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80077a4:	4b3b      	ldr	r3, [pc, #236]	; (8007894 <HAL_RCC_OscConfig+0x330>)
 80077a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80077ac:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80077b0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80077b4:	fa92 f2a2 	rbit	r2, r2
 80077b8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80077bc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80077c0:	fab2 f282 	clz	r2, r2
 80077c4:	b2d2      	uxtb	r2, r2
 80077c6:	f042 0220 	orr.w	r2, r2, #32
 80077ca:	b2d2      	uxtb	r2, r2
 80077cc:	f002 021f 	and.w	r2, r2, #31
 80077d0:	2101      	movs	r1, #1
 80077d2:	fa01 f202 	lsl.w	r2, r1, r2
 80077d6:	4013      	ands	r3, r2
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d0ab      	beq.n	8007734 <HAL_RCC_OscConfig+0x1d0>
 80077dc:	e05d      	b.n	800789a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077de:	f7fc fcd5 	bl	800418c <HAL_GetTick>
 80077e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80077e6:	e00a      	b.n	80077fe <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80077e8:	f7fc fcd0 	bl	800418c <HAL_GetTick>
 80077ec:	4602      	mov	r2, r0
 80077ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80077f2:	1ad3      	subs	r3, r2, r3
 80077f4:	2b64      	cmp	r3, #100	; 0x64
 80077f6:	d902      	bls.n	80077fe <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80077f8:	2303      	movs	r3, #3
 80077fa:	f000 bee9 	b.w	80085d0 <HAL_RCC_OscConfig+0x106c>
 80077fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007802:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007806:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800780a:	fa93 f3a3 	rbit	r3, r3
 800780e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8007812:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007816:	fab3 f383 	clz	r3, r3
 800781a:	b2db      	uxtb	r3, r3
 800781c:	095b      	lsrs	r3, r3, #5
 800781e:	b2db      	uxtb	r3, r3
 8007820:	f043 0301 	orr.w	r3, r3, #1
 8007824:	b2db      	uxtb	r3, r3
 8007826:	2b01      	cmp	r3, #1
 8007828:	d102      	bne.n	8007830 <HAL_RCC_OscConfig+0x2cc>
 800782a:	4b1a      	ldr	r3, [pc, #104]	; (8007894 <HAL_RCC_OscConfig+0x330>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	e015      	b.n	800785c <HAL_RCC_OscConfig+0x2f8>
 8007830:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007834:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007838:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800783c:	fa93 f3a3 	rbit	r3, r3
 8007840:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8007844:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007848:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800784c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8007850:	fa93 f3a3 	rbit	r3, r3
 8007854:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8007858:	4b0e      	ldr	r3, [pc, #56]	; (8007894 <HAL_RCC_OscConfig+0x330>)
 800785a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007860:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8007864:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8007868:	fa92 f2a2 	rbit	r2, r2
 800786c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8007870:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8007874:	fab2 f282 	clz	r2, r2
 8007878:	b2d2      	uxtb	r2, r2
 800787a:	f042 0220 	orr.w	r2, r2, #32
 800787e:	b2d2      	uxtb	r2, r2
 8007880:	f002 021f 	and.w	r2, r2, #31
 8007884:	2101      	movs	r1, #1
 8007886:	fa01 f202 	lsl.w	r2, r1, r2
 800788a:	4013      	ands	r3, r2
 800788c:	2b00      	cmp	r3, #0
 800788e:	d1ab      	bne.n	80077e8 <HAL_RCC_OscConfig+0x284>
 8007890:	e003      	b.n	800789a <HAL_RCC_OscConfig+0x336>
 8007892:	bf00      	nop
 8007894:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007898:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800789a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800789e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f003 0302 	and.w	r3, r3, #2
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	f000 817d 	beq.w	8007baa <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80078b0:	4ba6      	ldr	r3, [pc, #664]	; (8007b4c <HAL_RCC_OscConfig+0x5e8>)
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	f003 030c 	and.w	r3, r3, #12
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d00b      	beq.n	80078d4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80078bc:	4ba3      	ldr	r3, [pc, #652]	; (8007b4c <HAL_RCC_OscConfig+0x5e8>)
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	f003 030c 	and.w	r3, r3, #12
 80078c4:	2b08      	cmp	r3, #8
 80078c6:	d172      	bne.n	80079ae <HAL_RCC_OscConfig+0x44a>
 80078c8:	4ba0      	ldr	r3, [pc, #640]	; (8007b4c <HAL_RCC_OscConfig+0x5e8>)
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d16c      	bne.n	80079ae <HAL_RCC_OscConfig+0x44a>
 80078d4:	2302      	movs	r3, #2
 80078d6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078da:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80078de:	fa93 f3a3 	rbit	r3, r3
 80078e2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80078e6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80078ea:	fab3 f383 	clz	r3, r3
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	095b      	lsrs	r3, r3, #5
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	f043 0301 	orr.w	r3, r3, #1
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d102      	bne.n	8007904 <HAL_RCC_OscConfig+0x3a0>
 80078fe:	4b93      	ldr	r3, [pc, #588]	; (8007b4c <HAL_RCC_OscConfig+0x5e8>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	e013      	b.n	800792c <HAL_RCC_OscConfig+0x3c8>
 8007904:	2302      	movs	r3, #2
 8007906:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800790a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800790e:	fa93 f3a3 	rbit	r3, r3
 8007912:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8007916:	2302      	movs	r3, #2
 8007918:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800791c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8007920:	fa93 f3a3 	rbit	r3, r3
 8007924:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8007928:	4b88      	ldr	r3, [pc, #544]	; (8007b4c <HAL_RCC_OscConfig+0x5e8>)
 800792a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800792c:	2202      	movs	r2, #2
 800792e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8007932:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8007936:	fa92 f2a2 	rbit	r2, r2
 800793a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800793e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8007942:	fab2 f282 	clz	r2, r2
 8007946:	b2d2      	uxtb	r2, r2
 8007948:	f042 0220 	orr.w	r2, r2, #32
 800794c:	b2d2      	uxtb	r2, r2
 800794e:	f002 021f 	and.w	r2, r2, #31
 8007952:	2101      	movs	r1, #1
 8007954:	fa01 f202 	lsl.w	r2, r1, r2
 8007958:	4013      	ands	r3, r2
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00a      	beq.n	8007974 <HAL_RCC_OscConfig+0x410>
 800795e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007962:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	2b01      	cmp	r3, #1
 800796c:	d002      	beq.n	8007974 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	f000 be2e 	b.w	80085d0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007974:	4b75      	ldr	r3, [pc, #468]	; (8007b4c <HAL_RCC_OscConfig+0x5e8>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800797c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007980:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	695b      	ldr	r3, [r3, #20]
 8007988:	21f8      	movs	r1, #248	; 0xf8
 800798a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800798e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8007992:	fa91 f1a1 	rbit	r1, r1
 8007996:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800799a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800799e:	fab1 f181 	clz	r1, r1
 80079a2:	b2c9      	uxtb	r1, r1
 80079a4:	408b      	lsls	r3, r1
 80079a6:	4969      	ldr	r1, [pc, #420]	; (8007b4c <HAL_RCC_OscConfig+0x5e8>)
 80079a8:	4313      	orrs	r3, r2
 80079aa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80079ac:	e0fd      	b.n	8007baa <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80079ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	691b      	ldr	r3, [r3, #16]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	f000 8088 	beq.w	8007ad0 <HAL_RCC_OscConfig+0x56c>
 80079c0:	2301      	movs	r3, #1
 80079c2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079c6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80079ca:	fa93 f3a3 	rbit	r3, r3
 80079ce:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80079d2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80079d6:	fab3 f383 	clz	r3, r3
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80079e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	461a      	mov	r2, r3
 80079e8:	2301      	movs	r3, #1
 80079ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079ec:	f7fc fbce 	bl	800418c <HAL_GetTick>
 80079f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079f4:	e00a      	b.n	8007a0c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80079f6:	f7fc fbc9 	bl	800418c <HAL_GetTick>
 80079fa:	4602      	mov	r2, r0
 80079fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007a00:	1ad3      	subs	r3, r2, r3
 8007a02:	2b02      	cmp	r3, #2
 8007a04:	d902      	bls.n	8007a0c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8007a06:	2303      	movs	r3, #3
 8007a08:	f000 bde2 	b.w	80085d0 <HAL_RCC_OscConfig+0x106c>
 8007a0c:	2302      	movs	r3, #2
 8007a0e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a12:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8007a16:	fa93 f3a3 	rbit	r3, r3
 8007a1a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8007a1e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a22:	fab3 f383 	clz	r3, r3
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	095b      	lsrs	r3, r3, #5
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	f043 0301 	orr.w	r3, r3, #1
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d102      	bne.n	8007a3c <HAL_RCC_OscConfig+0x4d8>
 8007a36:	4b45      	ldr	r3, [pc, #276]	; (8007b4c <HAL_RCC_OscConfig+0x5e8>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	e013      	b.n	8007a64 <HAL_RCC_OscConfig+0x500>
 8007a3c:	2302      	movs	r3, #2
 8007a3e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a42:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8007a46:	fa93 f3a3 	rbit	r3, r3
 8007a4a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8007a4e:	2302      	movs	r3, #2
 8007a50:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8007a54:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8007a58:	fa93 f3a3 	rbit	r3, r3
 8007a5c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8007a60:	4b3a      	ldr	r3, [pc, #232]	; (8007b4c <HAL_RCC_OscConfig+0x5e8>)
 8007a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a64:	2202      	movs	r2, #2
 8007a66:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8007a6a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8007a6e:	fa92 f2a2 	rbit	r2, r2
 8007a72:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8007a76:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8007a7a:	fab2 f282 	clz	r2, r2
 8007a7e:	b2d2      	uxtb	r2, r2
 8007a80:	f042 0220 	orr.w	r2, r2, #32
 8007a84:	b2d2      	uxtb	r2, r2
 8007a86:	f002 021f 	and.w	r2, r2, #31
 8007a8a:	2101      	movs	r1, #1
 8007a8c:	fa01 f202 	lsl.w	r2, r1, r2
 8007a90:	4013      	ands	r3, r2
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d0af      	beq.n	80079f6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a96:	4b2d      	ldr	r3, [pc, #180]	; (8007b4c <HAL_RCC_OscConfig+0x5e8>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007aa2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	695b      	ldr	r3, [r3, #20]
 8007aaa:	21f8      	movs	r1, #248	; 0xf8
 8007aac:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ab0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007ab4:	fa91 f1a1 	rbit	r1, r1
 8007ab8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8007abc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8007ac0:	fab1 f181 	clz	r1, r1
 8007ac4:	b2c9      	uxtb	r1, r1
 8007ac6:	408b      	lsls	r3, r1
 8007ac8:	4920      	ldr	r1, [pc, #128]	; (8007b4c <HAL_RCC_OscConfig+0x5e8>)
 8007aca:	4313      	orrs	r3, r2
 8007acc:	600b      	str	r3, [r1, #0]
 8007ace:	e06c      	b.n	8007baa <HAL_RCC_OscConfig+0x646>
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ad6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007ada:	fa93 f3a3 	rbit	r3, r3
 8007ade:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8007ae2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ae6:	fab3 f383 	clz	r3, r3
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007af0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007af4:	009b      	lsls	r3, r3, #2
 8007af6:	461a      	mov	r2, r3
 8007af8:	2300      	movs	r3, #0
 8007afa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007afc:	f7fc fb46 	bl	800418c <HAL_GetTick>
 8007b00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b04:	e00a      	b.n	8007b1c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b06:	f7fc fb41 	bl	800418c <HAL_GetTick>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007b10:	1ad3      	subs	r3, r2, r3
 8007b12:	2b02      	cmp	r3, #2
 8007b14:	d902      	bls.n	8007b1c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8007b16:	2303      	movs	r3, #3
 8007b18:	f000 bd5a 	b.w	80085d0 <HAL_RCC_OscConfig+0x106c>
 8007b1c:	2302      	movs	r3, #2
 8007b1e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b22:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007b26:	fa93 f3a3 	rbit	r3, r3
 8007b2a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8007b2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b32:	fab3 f383 	clz	r3, r3
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	095b      	lsrs	r3, r3, #5
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	f043 0301 	orr.w	r3, r3, #1
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d104      	bne.n	8007b50 <HAL_RCC_OscConfig+0x5ec>
 8007b46:	4b01      	ldr	r3, [pc, #4]	; (8007b4c <HAL_RCC_OscConfig+0x5e8>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	e015      	b.n	8007b78 <HAL_RCC_OscConfig+0x614>
 8007b4c:	40021000 	.word	0x40021000
 8007b50:	2302      	movs	r3, #2
 8007b52:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b5a:	fa93 f3a3 	rbit	r3, r3
 8007b5e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007b62:	2302      	movs	r3, #2
 8007b64:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007b68:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007b6c:	fa93 f3a3 	rbit	r3, r3
 8007b70:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007b74:	4bc8      	ldr	r3, [pc, #800]	; (8007e98 <HAL_RCC_OscConfig+0x934>)
 8007b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b78:	2202      	movs	r2, #2
 8007b7a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8007b7e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8007b82:	fa92 f2a2 	rbit	r2, r2
 8007b86:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8007b8a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8007b8e:	fab2 f282 	clz	r2, r2
 8007b92:	b2d2      	uxtb	r2, r2
 8007b94:	f042 0220 	orr.w	r2, r2, #32
 8007b98:	b2d2      	uxtb	r2, r2
 8007b9a:	f002 021f 	and.w	r2, r2, #31
 8007b9e:	2101      	movs	r1, #1
 8007ba0:	fa01 f202 	lsl.w	r2, r1, r2
 8007ba4:	4013      	ands	r3, r2
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d1ad      	bne.n	8007b06 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007baa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007bae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f003 0308 	and.w	r3, r3, #8
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	f000 8110 	beq.w	8007de0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007bc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007bc4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	699b      	ldr	r3, [r3, #24]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d079      	beq.n	8007cc4 <HAL_RCC_OscConfig+0x760>
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bd6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007bda:	fa93 f3a3 	rbit	r3, r3
 8007bde:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8007be2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007be6:	fab3 f383 	clz	r3, r3
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	461a      	mov	r2, r3
 8007bee:	4bab      	ldr	r3, [pc, #684]	; (8007e9c <HAL_RCC_OscConfig+0x938>)
 8007bf0:	4413      	add	r3, r2
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007bfa:	f7fc fac7 	bl	800418c <HAL_GetTick>
 8007bfe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c02:	e00a      	b.n	8007c1a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007c04:	f7fc fac2 	bl	800418c <HAL_GetTick>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007c0e:	1ad3      	subs	r3, r2, r3
 8007c10:	2b02      	cmp	r3, #2
 8007c12:	d902      	bls.n	8007c1a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8007c14:	2303      	movs	r3, #3
 8007c16:	f000 bcdb 	b.w	80085d0 <HAL_RCC_OscConfig+0x106c>
 8007c1a:	2302      	movs	r3, #2
 8007c1c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c20:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007c24:	fa93 f3a3 	rbit	r3, r3
 8007c28:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007c2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c30:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007c34:	2202      	movs	r2, #2
 8007c36:	601a      	str	r2, [r3, #0]
 8007c38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c3c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	fa93 f2a3 	rbit	r2, r3
 8007c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c4e:	601a      	str	r2, [r3, #0]
 8007c50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c58:	2202      	movs	r2, #2
 8007c5a:	601a      	str	r2, [r3, #0]
 8007c5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	fa93 f2a3 	rbit	r2, r3
 8007c6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c6e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007c72:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c74:	4b88      	ldr	r3, [pc, #544]	; (8007e98 <HAL_RCC_OscConfig+0x934>)
 8007c76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c7c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007c80:	2102      	movs	r1, #2
 8007c82:	6019      	str	r1, [r3, #0]
 8007c84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c88:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	fa93 f1a3 	rbit	r1, r3
 8007c92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c96:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007c9a:	6019      	str	r1, [r3, #0]
  return result;
 8007c9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ca0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	fab3 f383 	clz	r3, r3
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	f003 031f 	and.w	r3, r3, #31
 8007cb6:	2101      	movs	r1, #1
 8007cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8007cbc:	4013      	ands	r3, r2
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d0a0      	beq.n	8007c04 <HAL_RCC_OscConfig+0x6a0>
 8007cc2:	e08d      	b.n	8007de0 <HAL_RCC_OscConfig+0x87c>
 8007cc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cc8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007ccc:	2201      	movs	r2, #1
 8007cce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cd4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	fa93 f2a3 	rbit	r2, r3
 8007cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ce2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007ce6:	601a      	str	r2, [r3, #0]
  return result;
 8007ce8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cec:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007cf0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007cf2:	fab3 f383 	clz	r3, r3
 8007cf6:	b2db      	uxtb	r3, r3
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	4b68      	ldr	r3, [pc, #416]	; (8007e9c <HAL_RCC_OscConfig+0x938>)
 8007cfc:	4413      	add	r3, r2
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	461a      	mov	r2, r3
 8007d02:	2300      	movs	r3, #0
 8007d04:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d06:	f7fc fa41 	bl	800418c <HAL_GetTick>
 8007d0a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d0e:	e00a      	b.n	8007d26 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007d10:	f7fc fa3c 	bl	800418c <HAL_GetTick>
 8007d14:	4602      	mov	r2, r0
 8007d16:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007d1a:	1ad3      	subs	r3, r2, r3
 8007d1c:	2b02      	cmp	r3, #2
 8007d1e:	d902      	bls.n	8007d26 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8007d20:	2303      	movs	r3, #3
 8007d22:	f000 bc55 	b.w	80085d0 <HAL_RCC_OscConfig+0x106c>
 8007d26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d2a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007d2e:	2202      	movs	r2, #2
 8007d30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d36:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	fa93 f2a3 	rbit	r2, r3
 8007d40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d44:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007d48:	601a      	str	r2, [r3, #0]
 8007d4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d4e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007d52:	2202      	movs	r2, #2
 8007d54:	601a      	str	r2, [r3, #0]
 8007d56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d5a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	fa93 f2a3 	rbit	r2, r3
 8007d64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d6c:	601a      	str	r2, [r3, #0]
 8007d6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d76:	2202      	movs	r2, #2
 8007d78:	601a      	str	r2, [r3, #0]
 8007d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	fa93 f2a3 	rbit	r2, r3
 8007d88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d8c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8007d90:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d92:	4b41      	ldr	r3, [pc, #260]	; (8007e98 <HAL_RCC_OscConfig+0x934>)
 8007d94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d9a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007d9e:	2102      	movs	r1, #2
 8007da0:	6019      	str	r1, [r3, #0]
 8007da2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007da6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	fa93 f1a3 	rbit	r1, r3
 8007db0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007db4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8007db8:	6019      	str	r1, [r3, #0]
  return result;
 8007dba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007dbe:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	fab3 f383 	clz	r3, r3
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	f003 031f 	and.w	r3, r3, #31
 8007dd4:	2101      	movs	r1, #1
 8007dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8007dda:	4013      	ands	r3, r2
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d197      	bne.n	8007d10 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007de0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007de4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f003 0304 	and.w	r3, r3, #4
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	f000 81a1 	beq.w	8008138 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007df6:	2300      	movs	r3, #0
 8007df8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007dfc:	4b26      	ldr	r3, [pc, #152]	; (8007e98 <HAL_RCC_OscConfig+0x934>)
 8007dfe:	69db      	ldr	r3, [r3, #28]
 8007e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d116      	bne.n	8007e36 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e08:	4b23      	ldr	r3, [pc, #140]	; (8007e98 <HAL_RCC_OscConfig+0x934>)
 8007e0a:	69db      	ldr	r3, [r3, #28]
 8007e0c:	4a22      	ldr	r2, [pc, #136]	; (8007e98 <HAL_RCC_OscConfig+0x934>)
 8007e0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e12:	61d3      	str	r3, [r2, #28]
 8007e14:	4b20      	ldr	r3, [pc, #128]	; (8007e98 <HAL_RCC_OscConfig+0x934>)
 8007e16:	69db      	ldr	r3, [r3, #28]
 8007e18:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8007e1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e20:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8007e24:	601a      	str	r2, [r3, #0]
 8007e26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e2a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8007e2e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8007e30:	2301      	movs	r3, #1
 8007e32:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e36:	4b1a      	ldr	r3, [pc, #104]	; (8007ea0 <HAL_RCC_OscConfig+0x93c>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d11a      	bne.n	8007e78 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007e42:	4b17      	ldr	r3, [pc, #92]	; (8007ea0 <HAL_RCC_OscConfig+0x93c>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a16      	ldr	r2, [pc, #88]	; (8007ea0 <HAL_RCC_OscConfig+0x93c>)
 8007e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e4c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e4e:	f7fc f99d 	bl	800418c <HAL_GetTick>
 8007e52:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e56:	e009      	b.n	8007e6c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e58:	f7fc f998 	bl	800418c <HAL_GetTick>
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007e62:	1ad3      	subs	r3, r2, r3
 8007e64:	2b64      	cmp	r3, #100	; 0x64
 8007e66:	d901      	bls.n	8007e6c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8007e68:	2303      	movs	r3, #3
 8007e6a:	e3b1      	b.n	80085d0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e6c:	4b0c      	ldr	r3, [pc, #48]	; (8007ea0 <HAL_RCC_OscConfig+0x93c>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d0ef      	beq.n	8007e58 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	68db      	ldr	r3, [r3, #12]
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d10d      	bne.n	8007ea4 <HAL_RCC_OscConfig+0x940>
 8007e88:	4b03      	ldr	r3, [pc, #12]	; (8007e98 <HAL_RCC_OscConfig+0x934>)
 8007e8a:	6a1b      	ldr	r3, [r3, #32]
 8007e8c:	4a02      	ldr	r2, [pc, #8]	; (8007e98 <HAL_RCC_OscConfig+0x934>)
 8007e8e:	f043 0301 	orr.w	r3, r3, #1
 8007e92:	6213      	str	r3, [r2, #32]
 8007e94:	e03c      	b.n	8007f10 <HAL_RCC_OscConfig+0x9ac>
 8007e96:	bf00      	nop
 8007e98:	40021000 	.word	0x40021000
 8007e9c:	10908120 	.word	0x10908120
 8007ea0:	40007000 	.word	0x40007000
 8007ea4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ea8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	68db      	ldr	r3, [r3, #12]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d10c      	bne.n	8007ece <HAL_RCC_OscConfig+0x96a>
 8007eb4:	4bc1      	ldr	r3, [pc, #772]	; (80081bc <HAL_RCC_OscConfig+0xc58>)
 8007eb6:	6a1b      	ldr	r3, [r3, #32]
 8007eb8:	4ac0      	ldr	r2, [pc, #768]	; (80081bc <HAL_RCC_OscConfig+0xc58>)
 8007eba:	f023 0301 	bic.w	r3, r3, #1
 8007ebe:	6213      	str	r3, [r2, #32]
 8007ec0:	4bbe      	ldr	r3, [pc, #760]	; (80081bc <HAL_RCC_OscConfig+0xc58>)
 8007ec2:	6a1b      	ldr	r3, [r3, #32]
 8007ec4:	4abd      	ldr	r2, [pc, #756]	; (80081bc <HAL_RCC_OscConfig+0xc58>)
 8007ec6:	f023 0304 	bic.w	r3, r3, #4
 8007eca:	6213      	str	r3, [r2, #32]
 8007ecc:	e020      	b.n	8007f10 <HAL_RCC_OscConfig+0x9ac>
 8007ece:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ed2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	68db      	ldr	r3, [r3, #12]
 8007eda:	2b05      	cmp	r3, #5
 8007edc:	d10c      	bne.n	8007ef8 <HAL_RCC_OscConfig+0x994>
 8007ede:	4bb7      	ldr	r3, [pc, #732]	; (80081bc <HAL_RCC_OscConfig+0xc58>)
 8007ee0:	6a1b      	ldr	r3, [r3, #32]
 8007ee2:	4ab6      	ldr	r2, [pc, #728]	; (80081bc <HAL_RCC_OscConfig+0xc58>)
 8007ee4:	f043 0304 	orr.w	r3, r3, #4
 8007ee8:	6213      	str	r3, [r2, #32]
 8007eea:	4bb4      	ldr	r3, [pc, #720]	; (80081bc <HAL_RCC_OscConfig+0xc58>)
 8007eec:	6a1b      	ldr	r3, [r3, #32]
 8007eee:	4ab3      	ldr	r2, [pc, #716]	; (80081bc <HAL_RCC_OscConfig+0xc58>)
 8007ef0:	f043 0301 	orr.w	r3, r3, #1
 8007ef4:	6213      	str	r3, [r2, #32]
 8007ef6:	e00b      	b.n	8007f10 <HAL_RCC_OscConfig+0x9ac>
 8007ef8:	4bb0      	ldr	r3, [pc, #704]	; (80081bc <HAL_RCC_OscConfig+0xc58>)
 8007efa:	6a1b      	ldr	r3, [r3, #32]
 8007efc:	4aaf      	ldr	r2, [pc, #700]	; (80081bc <HAL_RCC_OscConfig+0xc58>)
 8007efe:	f023 0301 	bic.w	r3, r3, #1
 8007f02:	6213      	str	r3, [r2, #32]
 8007f04:	4bad      	ldr	r3, [pc, #692]	; (80081bc <HAL_RCC_OscConfig+0xc58>)
 8007f06:	6a1b      	ldr	r3, [r3, #32]
 8007f08:	4aac      	ldr	r2, [pc, #688]	; (80081bc <HAL_RCC_OscConfig+0xc58>)
 8007f0a:	f023 0304 	bic.w	r3, r3, #4
 8007f0e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007f10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f14:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	f000 8081 	beq.w	8008024 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f22:	f7fc f933 	bl	800418c <HAL_GetTick>
 8007f26:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f2a:	e00b      	b.n	8007f44 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f2c:	f7fc f92e 	bl	800418c <HAL_GetTick>
 8007f30:	4602      	mov	r2, r0
 8007f32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007f36:	1ad3      	subs	r3, r2, r3
 8007f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d901      	bls.n	8007f44 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8007f40:	2303      	movs	r3, #3
 8007f42:	e345      	b.n	80085d0 <HAL_RCC_OscConfig+0x106c>
 8007f44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f48:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8007f4c:	2202      	movs	r2, #2
 8007f4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f54:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	fa93 f2a3 	rbit	r2, r3
 8007f5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f62:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8007f66:	601a      	str	r2, [r3, #0]
 8007f68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f6c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007f70:	2202      	movs	r2, #2
 8007f72:	601a      	str	r2, [r3, #0]
 8007f74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f78:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	fa93 f2a3 	rbit	r2, r3
 8007f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f86:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8007f8a:	601a      	str	r2, [r3, #0]
  return result;
 8007f8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f90:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8007f94:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f96:	fab3 f383 	clz	r3, r3
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	095b      	lsrs	r3, r3, #5
 8007f9e:	b2db      	uxtb	r3, r3
 8007fa0:	f043 0302 	orr.w	r3, r3, #2
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	2b02      	cmp	r3, #2
 8007fa8:	d102      	bne.n	8007fb0 <HAL_RCC_OscConfig+0xa4c>
 8007faa:	4b84      	ldr	r3, [pc, #528]	; (80081bc <HAL_RCC_OscConfig+0xc58>)
 8007fac:	6a1b      	ldr	r3, [r3, #32]
 8007fae:	e013      	b.n	8007fd8 <HAL_RCC_OscConfig+0xa74>
 8007fb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fb4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8007fb8:	2202      	movs	r2, #2
 8007fba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fc0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	fa93 f2a3 	rbit	r2, r3
 8007fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fce:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8007fd2:	601a      	str	r2, [r3, #0]
 8007fd4:	4b79      	ldr	r3, [pc, #484]	; (80081bc <HAL_RCC_OscConfig+0xc58>)
 8007fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007fdc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8007fe0:	2102      	movs	r1, #2
 8007fe2:	6011      	str	r1, [r2, #0]
 8007fe4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007fe8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8007fec:	6812      	ldr	r2, [r2, #0]
 8007fee:	fa92 f1a2 	rbit	r1, r2
 8007ff2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007ff6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8007ffa:	6011      	str	r1, [r2, #0]
  return result;
 8007ffc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008000:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8008004:	6812      	ldr	r2, [r2, #0]
 8008006:	fab2 f282 	clz	r2, r2
 800800a:	b2d2      	uxtb	r2, r2
 800800c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008010:	b2d2      	uxtb	r2, r2
 8008012:	f002 021f 	and.w	r2, r2, #31
 8008016:	2101      	movs	r1, #1
 8008018:	fa01 f202 	lsl.w	r2, r1, r2
 800801c:	4013      	ands	r3, r2
 800801e:	2b00      	cmp	r3, #0
 8008020:	d084      	beq.n	8007f2c <HAL_RCC_OscConfig+0x9c8>
 8008022:	e07f      	b.n	8008124 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008024:	f7fc f8b2 	bl	800418c <HAL_GetTick>
 8008028:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800802c:	e00b      	b.n	8008046 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800802e:	f7fc f8ad 	bl	800418c <HAL_GetTick>
 8008032:	4602      	mov	r2, r0
 8008034:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008038:	1ad3      	subs	r3, r2, r3
 800803a:	f241 3288 	movw	r2, #5000	; 0x1388
 800803e:	4293      	cmp	r3, r2
 8008040:	d901      	bls.n	8008046 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8008042:	2303      	movs	r3, #3
 8008044:	e2c4      	b.n	80085d0 <HAL_RCC_OscConfig+0x106c>
 8008046:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800804a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800804e:	2202      	movs	r2, #2
 8008050:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008052:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008056:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	fa93 f2a3 	rbit	r2, r3
 8008060:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008064:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8008068:	601a      	str	r2, [r3, #0]
 800806a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800806e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8008072:	2202      	movs	r2, #2
 8008074:	601a      	str	r2, [r3, #0]
 8008076:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800807a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	fa93 f2a3 	rbit	r2, r3
 8008084:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008088:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800808c:	601a      	str	r2, [r3, #0]
  return result;
 800808e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008092:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8008096:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008098:	fab3 f383 	clz	r3, r3
 800809c:	b2db      	uxtb	r3, r3
 800809e:	095b      	lsrs	r3, r3, #5
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	f043 0302 	orr.w	r3, r3, #2
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	2b02      	cmp	r3, #2
 80080aa:	d102      	bne.n	80080b2 <HAL_RCC_OscConfig+0xb4e>
 80080ac:	4b43      	ldr	r3, [pc, #268]	; (80081bc <HAL_RCC_OscConfig+0xc58>)
 80080ae:	6a1b      	ldr	r3, [r3, #32]
 80080b0:	e013      	b.n	80080da <HAL_RCC_OscConfig+0xb76>
 80080b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080b6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80080ba:	2202      	movs	r2, #2
 80080bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080c2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	fa93 f2a3 	rbit	r2, r3
 80080cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080d0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80080d4:	601a      	str	r2, [r3, #0]
 80080d6:	4b39      	ldr	r3, [pc, #228]	; (80081bc <HAL_RCC_OscConfig+0xc58>)
 80080d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80080de:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80080e2:	2102      	movs	r1, #2
 80080e4:	6011      	str	r1, [r2, #0]
 80080e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80080ea:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80080ee:	6812      	ldr	r2, [r2, #0]
 80080f0:	fa92 f1a2 	rbit	r1, r2
 80080f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80080f8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80080fc:	6011      	str	r1, [r2, #0]
  return result;
 80080fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008102:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8008106:	6812      	ldr	r2, [r2, #0]
 8008108:	fab2 f282 	clz	r2, r2
 800810c:	b2d2      	uxtb	r2, r2
 800810e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008112:	b2d2      	uxtb	r2, r2
 8008114:	f002 021f 	and.w	r2, r2, #31
 8008118:	2101      	movs	r1, #1
 800811a:	fa01 f202 	lsl.w	r2, r1, r2
 800811e:	4013      	ands	r3, r2
 8008120:	2b00      	cmp	r3, #0
 8008122:	d184      	bne.n	800802e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008124:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8008128:	2b01      	cmp	r3, #1
 800812a:	d105      	bne.n	8008138 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800812c:	4b23      	ldr	r3, [pc, #140]	; (80081bc <HAL_RCC_OscConfig+0xc58>)
 800812e:	69db      	ldr	r3, [r3, #28]
 8008130:	4a22      	ldr	r2, [pc, #136]	; (80081bc <HAL_RCC_OscConfig+0xc58>)
 8008132:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008136:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008138:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800813c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	69db      	ldr	r3, [r3, #28]
 8008144:	2b00      	cmp	r3, #0
 8008146:	f000 8242 	beq.w	80085ce <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800814a:	4b1c      	ldr	r3, [pc, #112]	; (80081bc <HAL_RCC_OscConfig+0xc58>)
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	f003 030c 	and.w	r3, r3, #12
 8008152:	2b08      	cmp	r3, #8
 8008154:	f000 8213 	beq.w	800857e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800815c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	69db      	ldr	r3, [r3, #28]
 8008164:	2b02      	cmp	r3, #2
 8008166:	f040 8162 	bne.w	800842e <HAL_RCC_OscConfig+0xeca>
 800816a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800816e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8008172:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008176:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008178:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800817c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	fa93 f2a3 	rbit	r2, r3
 8008186:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800818a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800818e:	601a      	str	r2, [r3, #0]
  return result;
 8008190:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008194:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8008198:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800819a:	fab3 f383 	clz	r3, r3
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80081a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80081a8:	009b      	lsls	r3, r3, #2
 80081aa:	461a      	mov	r2, r3
 80081ac:	2300      	movs	r3, #0
 80081ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081b0:	f7fb ffec 	bl	800418c <HAL_GetTick>
 80081b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80081b8:	e00c      	b.n	80081d4 <HAL_RCC_OscConfig+0xc70>
 80081ba:	bf00      	nop
 80081bc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80081c0:	f7fb ffe4 	bl	800418c <HAL_GetTick>
 80081c4:	4602      	mov	r2, r0
 80081c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80081ca:	1ad3      	subs	r3, r2, r3
 80081cc:	2b02      	cmp	r3, #2
 80081ce:	d901      	bls.n	80081d4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80081d0:	2303      	movs	r3, #3
 80081d2:	e1fd      	b.n	80085d0 <HAL_RCC_OscConfig+0x106c>
 80081d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80081d8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80081dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80081e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80081e6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	fa93 f2a3 	rbit	r2, r3
 80081f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80081f4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80081f8:	601a      	str	r2, [r3, #0]
  return result;
 80081fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80081fe:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8008202:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008204:	fab3 f383 	clz	r3, r3
 8008208:	b2db      	uxtb	r3, r3
 800820a:	095b      	lsrs	r3, r3, #5
 800820c:	b2db      	uxtb	r3, r3
 800820e:	f043 0301 	orr.w	r3, r3, #1
 8008212:	b2db      	uxtb	r3, r3
 8008214:	2b01      	cmp	r3, #1
 8008216:	d102      	bne.n	800821e <HAL_RCC_OscConfig+0xcba>
 8008218:	4bb0      	ldr	r3, [pc, #704]	; (80084dc <HAL_RCC_OscConfig+0xf78>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	e027      	b.n	800826e <HAL_RCC_OscConfig+0xd0a>
 800821e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008222:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8008226:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800822a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800822c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008230:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	fa93 f2a3 	rbit	r2, r3
 800823a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800823e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8008242:	601a      	str	r2, [r3, #0]
 8008244:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008248:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800824c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008250:	601a      	str	r2, [r3, #0]
 8008252:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008256:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	fa93 f2a3 	rbit	r2, r3
 8008260:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008264:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8008268:	601a      	str	r2, [r3, #0]
 800826a:	4b9c      	ldr	r3, [pc, #624]	; (80084dc <HAL_RCC_OscConfig+0xf78>)
 800826c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800826e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008272:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8008276:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800827a:	6011      	str	r1, [r2, #0]
 800827c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008280:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8008284:	6812      	ldr	r2, [r2, #0]
 8008286:	fa92 f1a2 	rbit	r1, r2
 800828a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800828e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8008292:	6011      	str	r1, [r2, #0]
  return result;
 8008294:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008298:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800829c:	6812      	ldr	r2, [r2, #0]
 800829e:	fab2 f282 	clz	r2, r2
 80082a2:	b2d2      	uxtb	r2, r2
 80082a4:	f042 0220 	orr.w	r2, r2, #32
 80082a8:	b2d2      	uxtb	r2, r2
 80082aa:	f002 021f 	and.w	r2, r2, #31
 80082ae:	2101      	movs	r1, #1
 80082b0:	fa01 f202 	lsl.w	r2, r1, r2
 80082b4:	4013      	ands	r3, r2
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d182      	bne.n	80081c0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80082ba:	4b88      	ldr	r3, [pc, #544]	; (80084dc <HAL_RCC_OscConfig+0xf78>)
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80082c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80082c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80082ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80082d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	6a1b      	ldr	r3, [r3, #32]
 80082da:	430b      	orrs	r3, r1
 80082dc:	497f      	ldr	r1, [pc, #508]	; (80084dc <HAL_RCC_OscConfig+0xf78>)
 80082de:	4313      	orrs	r3, r2
 80082e0:	604b      	str	r3, [r1, #4]
 80082e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80082e6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80082ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80082ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80082f4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	fa93 f2a3 	rbit	r2, r3
 80082fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008302:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8008306:	601a      	str	r2, [r3, #0]
  return result;
 8008308:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800830c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8008310:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008312:	fab3 f383 	clz	r3, r3
 8008316:	b2db      	uxtb	r3, r3
 8008318:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800831c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	461a      	mov	r2, r3
 8008324:	2301      	movs	r3, #1
 8008326:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008328:	f7fb ff30 	bl	800418c <HAL_GetTick>
 800832c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008330:	e009      	b.n	8008346 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008332:	f7fb ff2b 	bl	800418c <HAL_GetTick>
 8008336:	4602      	mov	r2, r0
 8008338:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800833c:	1ad3      	subs	r3, r2, r3
 800833e:	2b02      	cmp	r3, #2
 8008340:	d901      	bls.n	8008346 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8008342:	2303      	movs	r3, #3
 8008344:	e144      	b.n	80085d0 <HAL_RCC_OscConfig+0x106c>
 8008346:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800834a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800834e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008352:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008354:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008358:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	fa93 f2a3 	rbit	r2, r3
 8008362:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008366:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800836a:	601a      	str	r2, [r3, #0]
  return result;
 800836c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008370:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8008374:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008376:	fab3 f383 	clz	r3, r3
 800837a:	b2db      	uxtb	r3, r3
 800837c:	095b      	lsrs	r3, r3, #5
 800837e:	b2db      	uxtb	r3, r3
 8008380:	f043 0301 	orr.w	r3, r3, #1
 8008384:	b2db      	uxtb	r3, r3
 8008386:	2b01      	cmp	r3, #1
 8008388:	d102      	bne.n	8008390 <HAL_RCC_OscConfig+0xe2c>
 800838a:	4b54      	ldr	r3, [pc, #336]	; (80084dc <HAL_RCC_OscConfig+0xf78>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	e027      	b.n	80083e0 <HAL_RCC_OscConfig+0xe7c>
 8008390:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008394:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8008398:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800839c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800839e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80083a2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	fa93 f2a3 	rbit	r2, r3
 80083ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80083b0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80083b4:	601a      	str	r2, [r3, #0]
 80083b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80083ba:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80083be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80083c2:	601a      	str	r2, [r3, #0]
 80083c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80083c8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	fa93 f2a3 	rbit	r2, r3
 80083d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80083d6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80083da:	601a      	str	r2, [r3, #0]
 80083dc:	4b3f      	ldr	r3, [pc, #252]	; (80084dc <HAL_RCC_OscConfig+0xf78>)
 80083de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80083e4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80083e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80083ec:	6011      	str	r1, [r2, #0]
 80083ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80083f2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80083f6:	6812      	ldr	r2, [r2, #0]
 80083f8:	fa92 f1a2 	rbit	r1, r2
 80083fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008400:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8008404:	6011      	str	r1, [r2, #0]
  return result;
 8008406:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800840a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800840e:	6812      	ldr	r2, [r2, #0]
 8008410:	fab2 f282 	clz	r2, r2
 8008414:	b2d2      	uxtb	r2, r2
 8008416:	f042 0220 	orr.w	r2, r2, #32
 800841a:	b2d2      	uxtb	r2, r2
 800841c:	f002 021f 	and.w	r2, r2, #31
 8008420:	2101      	movs	r1, #1
 8008422:	fa01 f202 	lsl.w	r2, r1, r2
 8008426:	4013      	ands	r3, r2
 8008428:	2b00      	cmp	r3, #0
 800842a:	d082      	beq.n	8008332 <HAL_RCC_OscConfig+0xdce>
 800842c:	e0cf      	b.n	80085ce <HAL_RCC_OscConfig+0x106a>
 800842e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008432:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8008436:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800843a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800843c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008440:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	fa93 f2a3 	rbit	r2, r3
 800844a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800844e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8008452:	601a      	str	r2, [r3, #0]
  return result;
 8008454:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008458:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800845c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800845e:	fab3 f383 	clz	r3, r3
 8008462:	b2db      	uxtb	r3, r3
 8008464:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008468:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	461a      	mov	r2, r3
 8008470:	2300      	movs	r3, #0
 8008472:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008474:	f7fb fe8a 	bl	800418c <HAL_GetTick>
 8008478:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800847c:	e009      	b.n	8008492 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800847e:	f7fb fe85 	bl	800418c <HAL_GetTick>
 8008482:	4602      	mov	r2, r0
 8008484:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008488:	1ad3      	subs	r3, r2, r3
 800848a:	2b02      	cmp	r3, #2
 800848c:	d901      	bls.n	8008492 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800848e:	2303      	movs	r3, #3
 8008490:	e09e      	b.n	80085d0 <HAL_RCC_OscConfig+0x106c>
 8008492:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008496:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800849a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800849e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80084a4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	fa93 f2a3 	rbit	r2, r3
 80084ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80084b2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80084b6:	601a      	str	r2, [r3, #0]
  return result;
 80084b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80084bc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80084c0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80084c2:	fab3 f383 	clz	r3, r3
 80084c6:	b2db      	uxtb	r3, r3
 80084c8:	095b      	lsrs	r3, r3, #5
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	f043 0301 	orr.w	r3, r3, #1
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d104      	bne.n	80084e0 <HAL_RCC_OscConfig+0xf7c>
 80084d6:	4b01      	ldr	r3, [pc, #4]	; (80084dc <HAL_RCC_OscConfig+0xf78>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	e029      	b.n	8008530 <HAL_RCC_OscConfig+0xfcc>
 80084dc:	40021000 	.word	0x40021000
 80084e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80084e4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80084e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80084ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80084f2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	fa93 f2a3 	rbit	r2, r3
 80084fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008500:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8008504:	601a      	str	r2, [r3, #0]
 8008506:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800850a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800850e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008512:	601a      	str	r2, [r3, #0]
 8008514:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008518:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	fa93 f2a3 	rbit	r2, r3
 8008522:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008526:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800852a:	601a      	str	r2, [r3, #0]
 800852c:	4b2b      	ldr	r3, [pc, #172]	; (80085dc <HAL_RCC_OscConfig+0x1078>)
 800852e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008530:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008534:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8008538:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800853c:	6011      	str	r1, [r2, #0]
 800853e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008542:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8008546:	6812      	ldr	r2, [r2, #0]
 8008548:	fa92 f1a2 	rbit	r1, r2
 800854c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008550:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8008554:	6011      	str	r1, [r2, #0]
  return result;
 8008556:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800855a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800855e:	6812      	ldr	r2, [r2, #0]
 8008560:	fab2 f282 	clz	r2, r2
 8008564:	b2d2      	uxtb	r2, r2
 8008566:	f042 0220 	orr.w	r2, r2, #32
 800856a:	b2d2      	uxtb	r2, r2
 800856c:	f002 021f 	and.w	r2, r2, #31
 8008570:	2101      	movs	r1, #1
 8008572:	fa01 f202 	lsl.w	r2, r1, r2
 8008576:	4013      	ands	r3, r2
 8008578:	2b00      	cmp	r3, #0
 800857a:	d180      	bne.n	800847e <HAL_RCC_OscConfig+0xf1a>
 800857c:	e027      	b.n	80085ce <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800857e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008582:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	69db      	ldr	r3, [r3, #28]
 800858a:	2b01      	cmp	r3, #1
 800858c:	d101      	bne.n	8008592 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800858e:	2301      	movs	r3, #1
 8008590:	e01e      	b.n	80085d0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008592:	4b12      	ldr	r3, [pc, #72]	; (80085dc <HAL_RCC_OscConfig+0x1078>)
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800859a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800859e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80085a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80085a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	6a1b      	ldr	r3, [r3, #32]
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d10b      	bne.n	80085ca <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80085b2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80085b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80085ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80085be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d001      	beq.n	80085ce <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80085ca:	2301      	movs	r3, #1
 80085cc:	e000      	b.n	80085d0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80085ce:	2300      	movs	r3, #0
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
 80085da:	bf00      	nop
 80085dc:	40021000 	.word	0x40021000

080085e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b09e      	sub	sp, #120	; 0x78
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80085ea:	2300      	movs	r3, #0
 80085ec:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d101      	bne.n	80085f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80085f4:	2301      	movs	r3, #1
 80085f6:	e162      	b.n	80088be <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80085f8:	4b90      	ldr	r3, [pc, #576]	; (800883c <HAL_RCC_ClockConfig+0x25c>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f003 0307 	and.w	r3, r3, #7
 8008600:	683a      	ldr	r2, [r7, #0]
 8008602:	429a      	cmp	r2, r3
 8008604:	d910      	bls.n	8008628 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008606:	4b8d      	ldr	r3, [pc, #564]	; (800883c <HAL_RCC_ClockConfig+0x25c>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f023 0207 	bic.w	r2, r3, #7
 800860e:	498b      	ldr	r1, [pc, #556]	; (800883c <HAL_RCC_ClockConfig+0x25c>)
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	4313      	orrs	r3, r2
 8008614:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008616:	4b89      	ldr	r3, [pc, #548]	; (800883c <HAL_RCC_ClockConfig+0x25c>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f003 0307 	and.w	r3, r3, #7
 800861e:	683a      	ldr	r2, [r7, #0]
 8008620:	429a      	cmp	r2, r3
 8008622:	d001      	beq.n	8008628 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008624:	2301      	movs	r3, #1
 8008626:	e14a      	b.n	80088be <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f003 0302 	and.w	r3, r3, #2
 8008630:	2b00      	cmp	r3, #0
 8008632:	d008      	beq.n	8008646 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008634:	4b82      	ldr	r3, [pc, #520]	; (8008840 <HAL_RCC_ClockConfig+0x260>)
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	497f      	ldr	r1, [pc, #508]	; (8008840 <HAL_RCC_ClockConfig+0x260>)
 8008642:	4313      	orrs	r3, r2
 8008644:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f003 0301 	and.w	r3, r3, #1
 800864e:	2b00      	cmp	r3, #0
 8008650:	f000 80dc 	beq.w	800880c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	2b01      	cmp	r3, #1
 800865a:	d13c      	bne.n	80086d6 <HAL_RCC_ClockConfig+0xf6>
 800865c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008660:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008662:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008664:	fa93 f3a3 	rbit	r3, r3
 8008668:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800866a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800866c:	fab3 f383 	clz	r3, r3
 8008670:	b2db      	uxtb	r3, r3
 8008672:	095b      	lsrs	r3, r3, #5
 8008674:	b2db      	uxtb	r3, r3
 8008676:	f043 0301 	orr.w	r3, r3, #1
 800867a:	b2db      	uxtb	r3, r3
 800867c:	2b01      	cmp	r3, #1
 800867e:	d102      	bne.n	8008686 <HAL_RCC_ClockConfig+0xa6>
 8008680:	4b6f      	ldr	r3, [pc, #444]	; (8008840 <HAL_RCC_ClockConfig+0x260>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	e00f      	b.n	80086a6 <HAL_RCC_ClockConfig+0xc6>
 8008686:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800868a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800868c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800868e:	fa93 f3a3 	rbit	r3, r3
 8008692:	667b      	str	r3, [r7, #100]	; 0x64
 8008694:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008698:	663b      	str	r3, [r7, #96]	; 0x60
 800869a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800869c:	fa93 f3a3 	rbit	r3, r3
 80086a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80086a2:	4b67      	ldr	r3, [pc, #412]	; (8008840 <HAL_RCC_ClockConfig+0x260>)
 80086a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80086aa:	65ba      	str	r2, [r7, #88]	; 0x58
 80086ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80086ae:	fa92 f2a2 	rbit	r2, r2
 80086b2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80086b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80086b6:	fab2 f282 	clz	r2, r2
 80086ba:	b2d2      	uxtb	r2, r2
 80086bc:	f042 0220 	orr.w	r2, r2, #32
 80086c0:	b2d2      	uxtb	r2, r2
 80086c2:	f002 021f 	and.w	r2, r2, #31
 80086c6:	2101      	movs	r1, #1
 80086c8:	fa01 f202 	lsl.w	r2, r1, r2
 80086cc:	4013      	ands	r3, r2
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d17b      	bne.n	80087ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80086d2:	2301      	movs	r3, #1
 80086d4:	e0f3      	b.n	80088be <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	685b      	ldr	r3, [r3, #4]
 80086da:	2b02      	cmp	r3, #2
 80086dc:	d13c      	bne.n	8008758 <HAL_RCC_ClockConfig+0x178>
 80086de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80086e2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086e6:	fa93 f3a3 	rbit	r3, r3
 80086ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80086ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80086ee:	fab3 f383 	clz	r3, r3
 80086f2:	b2db      	uxtb	r3, r3
 80086f4:	095b      	lsrs	r3, r3, #5
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	f043 0301 	orr.w	r3, r3, #1
 80086fc:	b2db      	uxtb	r3, r3
 80086fe:	2b01      	cmp	r3, #1
 8008700:	d102      	bne.n	8008708 <HAL_RCC_ClockConfig+0x128>
 8008702:	4b4f      	ldr	r3, [pc, #316]	; (8008840 <HAL_RCC_ClockConfig+0x260>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	e00f      	b.n	8008728 <HAL_RCC_ClockConfig+0x148>
 8008708:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800870c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800870e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008710:	fa93 f3a3 	rbit	r3, r3
 8008714:	647b      	str	r3, [r7, #68]	; 0x44
 8008716:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800871a:	643b      	str	r3, [r7, #64]	; 0x40
 800871c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800871e:	fa93 f3a3 	rbit	r3, r3
 8008722:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008724:	4b46      	ldr	r3, [pc, #280]	; (8008840 <HAL_RCC_ClockConfig+0x260>)
 8008726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008728:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800872c:	63ba      	str	r2, [r7, #56]	; 0x38
 800872e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008730:	fa92 f2a2 	rbit	r2, r2
 8008734:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8008736:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008738:	fab2 f282 	clz	r2, r2
 800873c:	b2d2      	uxtb	r2, r2
 800873e:	f042 0220 	orr.w	r2, r2, #32
 8008742:	b2d2      	uxtb	r2, r2
 8008744:	f002 021f 	and.w	r2, r2, #31
 8008748:	2101      	movs	r1, #1
 800874a:	fa01 f202 	lsl.w	r2, r1, r2
 800874e:	4013      	ands	r3, r2
 8008750:	2b00      	cmp	r3, #0
 8008752:	d13a      	bne.n	80087ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008754:	2301      	movs	r3, #1
 8008756:	e0b2      	b.n	80088be <HAL_RCC_ClockConfig+0x2de>
 8008758:	2302      	movs	r3, #2
 800875a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800875c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800875e:	fa93 f3a3 	rbit	r3, r3
 8008762:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008766:	fab3 f383 	clz	r3, r3
 800876a:	b2db      	uxtb	r3, r3
 800876c:	095b      	lsrs	r3, r3, #5
 800876e:	b2db      	uxtb	r3, r3
 8008770:	f043 0301 	orr.w	r3, r3, #1
 8008774:	b2db      	uxtb	r3, r3
 8008776:	2b01      	cmp	r3, #1
 8008778:	d102      	bne.n	8008780 <HAL_RCC_ClockConfig+0x1a0>
 800877a:	4b31      	ldr	r3, [pc, #196]	; (8008840 <HAL_RCC_ClockConfig+0x260>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	e00d      	b.n	800879c <HAL_RCC_ClockConfig+0x1bc>
 8008780:	2302      	movs	r3, #2
 8008782:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008786:	fa93 f3a3 	rbit	r3, r3
 800878a:	627b      	str	r3, [r7, #36]	; 0x24
 800878c:	2302      	movs	r3, #2
 800878e:	623b      	str	r3, [r7, #32]
 8008790:	6a3b      	ldr	r3, [r7, #32]
 8008792:	fa93 f3a3 	rbit	r3, r3
 8008796:	61fb      	str	r3, [r7, #28]
 8008798:	4b29      	ldr	r3, [pc, #164]	; (8008840 <HAL_RCC_ClockConfig+0x260>)
 800879a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800879c:	2202      	movs	r2, #2
 800879e:	61ba      	str	r2, [r7, #24]
 80087a0:	69ba      	ldr	r2, [r7, #24]
 80087a2:	fa92 f2a2 	rbit	r2, r2
 80087a6:	617a      	str	r2, [r7, #20]
  return result;
 80087a8:	697a      	ldr	r2, [r7, #20]
 80087aa:	fab2 f282 	clz	r2, r2
 80087ae:	b2d2      	uxtb	r2, r2
 80087b0:	f042 0220 	orr.w	r2, r2, #32
 80087b4:	b2d2      	uxtb	r2, r2
 80087b6:	f002 021f 	and.w	r2, r2, #31
 80087ba:	2101      	movs	r1, #1
 80087bc:	fa01 f202 	lsl.w	r2, r1, r2
 80087c0:	4013      	ands	r3, r2
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d101      	bne.n	80087ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80087c6:	2301      	movs	r3, #1
 80087c8:	e079      	b.n	80088be <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80087ca:	4b1d      	ldr	r3, [pc, #116]	; (8008840 <HAL_RCC_ClockConfig+0x260>)
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	f023 0203 	bic.w	r2, r3, #3
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	491a      	ldr	r1, [pc, #104]	; (8008840 <HAL_RCC_ClockConfig+0x260>)
 80087d8:	4313      	orrs	r3, r2
 80087da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80087dc:	f7fb fcd6 	bl	800418c <HAL_GetTick>
 80087e0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087e2:	e00a      	b.n	80087fa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80087e4:	f7fb fcd2 	bl	800418c <HAL_GetTick>
 80087e8:	4602      	mov	r2, r0
 80087ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087ec:	1ad3      	subs	r3, r2, r3
 80087ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d901      	bls.n	80087fa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80087f6:	2303      	movs	r3, #3
 80087f8:	e061      	b.n	80088be <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087fa:	4b11      	ldr	r3, [pc, #68]	; (8008840 <HAL_RCC_ClockConfig+0x260>)
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	f003 020c 	and.w	r2, r3, #12
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	009b      	lsls	r3, r3, #2
 8008808:	429a      	cmp	r2, r3
 800880a:	d1eb      	bne.n	80087e4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800880c:	4b0b      	ldr	r3, [pc, #44]	; (800883c <HAL_RCC_ClockConfig+0x25c>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f003 0307 	and.w	r3, r3, #7
 8008814:	683a      	ldr	r2, [r7, #0]
 8008816:	429a      	cmp	r2, r3
 8008818:	d214      	bcs.n	8008844 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800881a:	4b08      	ldr	r3, [pc, #32]	; (800883c <HAL_RCC_ClockConfig+0x25c>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f023 0207 	bic.w	r2, r3, #7
 8008822:	4906      	ldr	r1, [pc, #24]	; (800883c <HAL_RCC_ClockConfig+0x25c>)
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	4313      	orrs	r3, r2
 8008828:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800882a:	4b04      	ldr	r3, [pc, #16]	; (800883c <HAL_RCC_ClockConfig+0x25c>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f003 0307 	and.w	r3, r3, #7
 8008832:	683a      	ldr	r2, [r7, #0]
 8008834:	429a      	cmp	r2, r3
 8008836:	d005      	beq.n	8008844 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8008838:	2301      	movs	r3, #1
 800883a:	e040      	b.n	80088be <HAL_RCC_ClockConfig+0x2de>
 800883c:	40022000 	.word	0x40022000
 8008840:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f003 0304 	and.w	r3, r3, #4
 800884c:	2b00      	cmp	r3, #0
 800884e:	d008      	beq.n	8008862 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008850:	4b1d      	ldr	r3, [pc, #116]	; (80088c8 <HAL_RCC_ClockConfig+0x2e8>)
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	68db      	ldr	r3, [r3, #12]
 800885c:	491a      	ldr	r1, [pc, #104]	; (80088c8 <HAL_RCC_ClockConfig+0x2e8>)
 800885e:	4313      	orrs	r3, r2
 8008860:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f003 0308 	and.w	r3, r3, #8
 800886a:	2b00      	cmp	r3, #0
 800886c:	d009      	beq.n	8008882 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800886e:	4b16      	ldr	r3, [pc, #88]	; (80088c8 <HAL_RCC_ClockConfig+0x2e8>)
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	691b      	ldr	r3, [r3, #16]
 800887a:	00db      	lsls	r3, r3, #3
 800887c:	4912      	ldr	r1, [pc, #72]	; (80088c8 <HAL_RCC_ClockConfig+0x2e8>)
 800887e:	4313      	orrs	r3, r2
 8008880:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8008882:	f000 f829 	bl	80088d8 <HAL_RCC_GetSysClockFreq>
 8008886:	4601      	mov	r1, r0
 8008888:	4b0f      	ldr	r3, [pc, #60]	; (80088c8 <HAL_RCC_ClockConfig+0x2e8>)
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008890:	22f0      	movs	r2, #240	; 0xf0
 8008892:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008894:	693a      	ldr	r2, [r7, #16]
 8008896:	fa92 f2a2 	rbit	r2, r2
 800889a:	60fa      	str	r2, [r7, #12]
  return result;
 800889c:	68fa      	ldr	r2, [r7, #12]
 800889e:	fab2 f282 	clz	r2, r2
 80088a2:	b2d2      	uxtb	r2, r2
 80088a4:	40d3      	lsrs	r3, r2
 80088a6:	4a09      	ldr	r2, [pc, #36]	; (80088cc <HAL_RCC_ClockConfig+0x2ec>)
 80088a8:	5cd3      	ldrb	r3, [r2, r3]
 80088aa:	fa21 f303 	lsr.w	r3, r1, r3
 80088ae:	4a08      	ldr	r2, [pc, #32]	; (80088d0 <HAL_RCC_ClockConfig+0x2f0>)
 80088b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80088b2:	4b08      	ldr	r3, [pc, #32]	; (80088d4 <HAL_RCC_ClockConfig+0x2f4>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4618      	mov	r0, r3
 80088b8:	f7fb fc24 	bl	8004104 <HAL_InitTick>
  
  return HAL_OK;
 80088bc:	2300      	movs	r3, #0
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3778      	adds	r7, #120	; 0x78
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
 80088c6:	bf00      	nop
 80088c8:	40021000 	.word	0x40021000
 80088cc:	0800f688 	.word	0x0800f688
 80088d0:	2000000c 	.word	0x2000000c
 80088d4:	20000010 	.word	0x20000010

080088d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80088d8:	b480      	push	{r7}
 80088da:	b08b      	sub	sp, #44	; 0x2c
 80088dc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80088de:	2300      	movs	r3, #0
 80088e0:	61fb      	str	r3, [r7, #28]
 80088e2:	2300      	movs	r3, #0
 80088e4:	61bb      	str	r3, [r7, #24]
 80088e6:	2300      	movs	r3, #0
 80088e8:	627b      	str	r3, [r7, #36]	; 0x24
 80088ea:	2300      	movs	r3, #0
 80088ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80088ee:	2300      	movs	r3, #0
 80088f0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80088f2:	4b29      	ldr	r3, [pc, #164]	; (8008998 <HAL_RCC_GetSysClockFreq+0xc0>)
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80088f8:	69fb      	ldr	r3, [r7, #28]
 80088fa:	f003 030c 	and.w	r3, r3, #12
 80088fe:	2b04      	cmp	r3, #4
 8008900:	d002      	beq.n	8008908 <HAL_RCC_GetSysClockFreq+0x30>
 8008902:	2b08      	cmp	r3, #8
 8008904:	d003      	beq.n	800890e <HAL_RCC_GetSysClockFreq+0x36>
 8008906:	e03c      	b.n	8008982 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008908:	4b24      	ldr	r3, [pc, #144]	; (800899c <HAL_RCC_GetSysClockFreq+0xc4>)
 800890a:	623b      	str	r3, [r7, #32]
      break;
 800890c:	e03c      	b.n	8008988 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800890e:	69fb      	ldr	r3, [r7, #28]
 8008910:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8008914:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8008918:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800891a:	68ba      	ldr	r2, [r7, #8]
 800891c:	fa92 f2a2 	rbit	r2, r2
 8008920:	607a      	str	r2, [r7, #4]
  return result;
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	fab2 f282 	clz	r2, r2
 8008928:	b2d2      	uxtb	r2, r2
 800892a:	40d3      	lsrs	r3, r2
 800892c:	4a1c      	ldr	r2, [pc, #112]	; (80089a0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800892e:	5cd3      	ldrb	r3, [r2, r3]
 8008930:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8008932:	4b19      	ldr	r3, [pc, #100]	; (8008998 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008936:	f003 030f 	and.w	r3, r3, #15
 800893a:	220f      	movs	r2, #15
 800893c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800893e:	693a      	ldr	r2, [r7, #16]
 8008940:	fa92 f2a2 	rbit	r2, r2
 8008944:	60fa      	str	r2, [r7, #12]
  return result;
 8008946:	68fa      	ldr	r2, [r7, #12]
 8008948:	fab2 f282 	clz	r2, r2
 800894c:	b2d2      	uxtb	r2, r2
 800894e:	40d3      	lsrs	r3, r2
 8008950:	4a14      	ldr	r2, [pc, #80]	; (80089a4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008952:	5cd3      	ldrb	r3, [r2, r3]
 8008954:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8008956:	69fb      	ldr	r3, [r7, #28]
 8008958:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800895c:	2b00      	cmp	r3, #0
 800895e:	d008      	beq.n	8008972 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8008960:	4a0e      	ldr	r2, [pc, #56]	; (800899c <HAL_RCC_GetSysClockFreq+0xc4>)
 8008962:	69bb      	ldr	r3, [r7, #24]
 8008964:	fbb2 f2f3 	udiv	r2, r2, r3
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	fb02 f303 	mul.w	r3, r2, r3
 800896e:	627b      	str	r3, [r7, #36]	; 0x24
 8008970:	e004      	b.n	800897c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	4a0c      	ldr	r2, [pc, #48]	; (80089a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008976:	fb02 f303 	mul.w	r3, r2, r3
 800897a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800897c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897e:	623b      	str	r3, [r7, #32]
      break;
 8008980:	e002      	b.n	8008988 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008982:	4b06      	ldr	r3, [pc, #24]	; (800899c <HAL_RCC_GetSysClockFreq+0xc4>)
 8008984:	623b      	str	r3, [r7, #32]
      break;
 8008986:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008988:	6a3b      	ldr	r3, [r7, #32]
}
 800898a:	4618      	mov	r0, r3
 800898c:	372c      	adds	r7, #44	; 0x2c
 800898e:	46bd      	mov	sp, r7
 8008990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008994:	4770      	bx	lr
 8008996:	bf00      	nop
 8008998:	40021000 	.word	0x40021000
 800899c:	007a1200 	.word	0x007a1200
 80089a0:	0800f6a0 	.word	0x0800f6a0
 80089a4:	0800f6b0 	.word	0x0800f6b0
 80089a8:	003d0900 	.word	0x003d0900

080089ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80089ac:	b480      	push	{r7}
 80089ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80089b0:	4b03      	ldr	r3, [pc, #12]	; (80089c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80089b2:	681b      	ldr	r3, [r3, #0]
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	46bd      	mov	sp, r7
 80089b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089bc:	4770      	bx	lr
 80089be:	bf00      	nop
 80089c0:	2000000c 	.word	0x2000000c

080089c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b082      	sub	sp, #8
 80089c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80089ca:	f7ff ffef 	bl	80089ac <HAL_RCC_GetHCLKFreq>
 80089ce:	4601      	mov	r1, r0
 80089d0:	4b0b      	ldr	r3, [pc, #44]	; (8008a00 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80089d2:	685b      	ldr	r3, [r3, #4]
 80089d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80089d8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80089dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	fa92 f2a2 	rbit	r2, r2
 80089e4:	603a      	str	r2, [r7, #0]
  return result;
 80089e6:	683a      	ldr	r2, [r7, #0]
 80089e8:	fab2 f282 	clz	r2, r2
 80089ec:	b2d2      	uxtb	r2, r2
 80089ee:	40d3      	lsrs	r3, r2
 80089f0:	4a04      	ldr	r2, [pc, #16]	; (8008a04 <HAL_RCC_GetPCLK1Freq+0x40>)
 80089f2:	5cd3      	ldrb	r3, [r2, r3]
 80089f4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80089f8:	4618      	mov	r0, r3
 80089fa:	3708      	adds	r7, #8
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}
 8008a00:	40021000 	.word	0x40021000
 8008a04:	0800f698 	.word	0x0800f698

08008a08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8008a0e:	f7ff ffcd 	bl	80089ac <HAL_RCC_GetHCLKFreq>
 8008a12:	4601      	mov	r1, r0
 8008a14:	4b0b      	ldr	r3, [pc, #44]	; (8008a44 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8008a1c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008a20:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	fa92 f2a2 	rbit	r2, r2
 8008a28:	603a      	str	r2, [r7, #0]
  return result;
 8008a2a:	683a      	ldr	r2, [r7, #0]
 8008a2c:	fab2 f282 	clz	r2, r2
 8008a30:	b2d2      	uxtb	r2, r2
 8008a32:	40d3      	lsrs	r3, r2
 8008a34:	4a04      	ldr	r2, [pc, #16]	; (8008a48 <HAL_RCC_GetPCLK2Freq+0x40>)
 8008a36:	5cd3      	ldrb	r3, [r2, r3]
 8008a38:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3708      	adds	r7, #8
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}
 8008a44:	40021000 	.word	0x40021000
 8008a48:	0800f698 	.word	0x0800f698

08008a4c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b092      	sub	sp, #72	; 0x48
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008a54:	2300      	movs	r3, #0
 8008a56:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	f000 80d4 	beq.w	8008c18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008a70:	4b4e      	ldr	r3, [pc, #312]	; (8008bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a72:	69db      	ldr	r3, [r3, #28]
 8008a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d10e      	bne.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a7c:	4b4b      	ldr	r3, [pc, #300]	; (8008bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a7e:	69db      	ldr	r3, [r3, #28]
 8008a80:	4a4a      	ldr	r2, [pc, #296]	; (8008bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a86:	61d3      	str	r3, [r2, #28]
 8008a88:	4b48      	ldr	r3, [pc, #288]	; (8008bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a8a:	69db      	ldr	r3, [r3, #28]
 8008a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a90:	60bb      	str	r3, [r7, #8]
 8008a92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008a94:	2301      	movs	r3, #1
 8008a96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a9a:	4b45      	ldr	r3, [pc, #276]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d118      	bne.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008aa6:	4b42      	ldr	r3, [pc, #264]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a41      	ldr	r2, [pc, #260]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008aac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ab0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008ab2:	f7fb fb6b 	bl	800418c <HAL_GetTick>
 8008ab6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ab8:	e008      	b.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008aba:	f7fb fb67 	bl	800418c <HAL_GetTick>
 8008abe:	4602      	mov	r2, r0
 8008ac0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ac2:	1ad3      	subs	r3, r2, r3
 8008ac4:	2b64      	cmp	r3, #100	; 0x64
 8008ac6:	d901      	bls.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8008ac8:	2303      	movs	r3, #3
 8008aca:	e169      	b.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008acc:	4b38      	ldr	r3, [pc, #224]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d0f0      	beq.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008ad8:	4b34      	ldr	r3, [pc, #208]	; (8008bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008ada:	6a1b      	ldr	r3, [r3, #32]
 8008adc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	f000 8084 	beq.w	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008af2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d07c      	beq.n	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008af8:	4b2c      	ldr	r3, [pc, #176]	; (8008bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008afa:	6a1b      	ldr	r3, [r3, #32]
 8008afc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008b06:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0a:	fa93 f3a3 	rbit	r3, r3
 8008b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008b12:	fab3 f383 	clz	r3, r3
 8008b16:	b2db      	uxtb	r3, r3
 8008b18:	461a      	mov	r2, r3
 8008b1a:	4b26      	ldr	r3, [pc, #152]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008b1c:	4413      	add	r3, r2
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	461a      	mov	r2, r3
 8008b22:	2301      	movs	r3, #1
 8008b24:	6013      	str	r3, [r2, #0]
 8008b26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008b2a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b2e:	fa93 f3a3 	rbit	r3, r3
 8008b32:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008b36:	fab3 f383 	clz	r3, r3
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	461a      	mov	r2, r3
 8008b3e:	4b1d      	ldr	r3, [pc, #116]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008b40:	4413      	add	r3, r2
 8008b42:	009b      	lsls	r3, r3, #2
 8008b44:	461a      	mov	r2, r3
 8008b46:	2300      	movs	r3, #0
 8008b48:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008b4a:	4a18      	ldr	r2, [pc, #96]	; (8008bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b4e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b52:	f003 0301 	and.w	r3, r3, #1
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d04b      	beq.n	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b5a:	f7fb fb17 	bl	800418c <HAL_GetTick>
 8008b5e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b60:	e00a      	b.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b62:	f7fb fb13 	bl	800418c <HAL_GetTick>
 8008b66:	4602      	mov	r2, r0
 8008b68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b6a:	1ad3      	subs	r3, r2, r3
 8008b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d901      	bls.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8008b74:	2303      	movs	r3, #3
 8008b76:	e113      	b.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8008b78:	2302      	movs	r3, #2
 8008b7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b7e:	fa93 f3a3 	rbit	r3, r3
 8008b82:	627b      	str	r3, [r7, #36]	; 0x24
 8008b84:	2302      	movs	r3, #2
 8008b86:	623b      	str	r3, [r7, #32]
 8008b88:	6a3b      	ldr	r3, [r7, #32]
 8008b8a:	fa93 f3a3 	rbit	r3, r3
 8008b8e:	61fb      	str	r3, [r7, #28]
  return result;
 8008b90:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b92:	fab3 f383 	clz	r3, r3
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	095b      	lsrs	r3, r3, #5
 8008b9a:	b2db      	uxtb	r3, r3
 8008b9c:	f043 0302 	orr.w	r3, r3, #2
 8008ba0:	b2db      	uxtb	r3, r3
 8008ba2:	2b02      	cmp	r3, #2
 8008ba4:	d108      	bne.n	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8008ba6:	4b01      	ldr	r3, [pc, #4]	; (8008bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008ba8:	6a1b      	ldr	r3, [r3, #32]
 8008baa:	e00d      	b.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8008bac:	40021000 	.word	0x40021000
 8008bb0:	40007000 	.word	0x40007000
 8008bb4:	10908100 	.word	0x10908100
 8008bb8:	2302      	movs	r3, #2
 8008bba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bbc:	69bb      	ldr	r3, [r7, #24]
 8008bbe:	fa93 f3a3 	rbit	r3, r3
 8008bc2:	617b      	str	r3, [r7, #20]
 8008bc4:	4b78      	ldr	r3, [pc, #480]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc8:	2202      	movs	r2, #2
 8008bca:	613a      	str	r2, [r7, #16]
 8008bcc:	693a      	ldr	r2, [r7, #16]
 8008bce:	fa92 f2a2 	rbit	r2, r2
 8008bd2:	60fa      	str	r2, [r7, #12]
  return result;
 8008bd4:	68fa      	ldr	r2, [r7, #12]
 8008bd6:	fab2 f282 	clz	r2, r2
 8008bda:	b2d2      	uxtb	r2, r2
 8008bdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008be0:	b2d2      	uxtb	r2, r2
 8008be2:	f002 021f 	and.w	r2, r2, #31
 8008be6:	2101      	movs	r1, #1
 8008be8:	fa01 f202 	lsl.w	r2, r1, r2
 8008bec:	4013      	ands	r3, r2
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d0b7      	beq.n	8008b62 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8008bf2:	4b6d      	ldr	r3, [pc, #436]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008bf4:	6a1b      	ldr	r3, [r3, #32]
 8008bf6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	496a      	ldr	r1, [pc, #424]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008c00:	4313      	orrs	r3, r2
 8008c02:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008c04:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d105      	bne.n	8008c18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008c0c:	4b66      	ldr	r3, [pc, #408]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008c0e:	69db      	ldr	r3, [r3, #28]
 8008c10:	4a65      	ldr	r2, [pc, #404]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008c12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c16:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f003 0301 	and.w	r3, r3, #1
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d008      	beq.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008c24:	4b60      	ldr	r3, [pc, #384]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c28:	f023 0203 	bic.w	r2, r3, #3
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	689b      	ldr	r3, [r3, #8]
 8008c30:	495d      	ldr	r1, [pc, #372]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008c32:	4313      	orrs	r3, r2
 8008c34:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f003 0302 	and.w	r3, r3, #2
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d008      	beq.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008c42:	4b59      	ldr	r3, [pc, #356]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c46:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	68db      	ldr	r3, [r3, #12]
 8008c4e:	4956      	ldr	r1, [pc, #344]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008c50:	4313      	orrs	r3, r2
 8008c52:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f003 0304 	and.w	r3, r3, #4
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d008      	beq.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008c60:	4b51      	ldr	r3, [pc, #324]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	691b      	ldr	r3, [r3, #16]
 8008c6c:	494e      	ldr	r1, [pc, #312]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f003 0320 	and.w	r3, r3, #32
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d008      	beq.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008c7e:	4b4a      	ldr	r3, [pc, #296]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c82:	f023 0210 	bic.w	r2, r3, #16
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	69db      	ldr	r3, [r3, #28]
 8008c8a:	4947      	ldr	r1, [pc, #284]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d008      	beq.n	8008cae <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8008c9c:	4b42      	ldr	r3, [pc, #264]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ca8:	493f      	ldr	r1, [pc, #252]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008caa:	4313      	orrs	r3, r2
 8008cac:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d008      	beq.n	8008ccc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008cba:	4b3b      	ldr	r3, [pc, #236]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cbe:	f023 0220 	bic.w	r2, r3, #32
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6a1b      	ldr	r3, [r3, #32]
 8008cc6:	4938      	ldr	r1, [pc, #224]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f003 0308 	and.w	r3, r3, #8
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d008      	beq.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008cd8:	4b33      	ldr	r3, [pc, #204]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cdc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	695b      	ldr	r3, [r3, #20]
 8008ce4:	4930      	ldr	r1, [pc, #192]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f003 0310 	and.w	r3, r3, #16
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d008      	beq.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008cf6:	4b2c      	ldr	r3, [pc, #176]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cfa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	699b      	ldr	r3, [r3, #24]
 8008d02:	4929      	ldr	r1, [pc, #164]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008d04:	4313      	orrs	r3, r2
 8008d06:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d008      	beq.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008d14:	4b24      	ldr	r3, [pc, #144]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d20:	4921      	ldr	r1, [pc, #132]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008d22:	4313      	orrs	r3, r2
 8008d24:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d008      	beq.n	8008d44 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008d32:	4b1d      	ldr	r3, [pc, #116]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d36:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d3e:	491a      	ldr	r1, [pc, #104]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008d40:	4313      	orrs	r3, r2
 8008d42:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d008      	beq.n	8008d62 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8008d50:	4b15      	ldr	r3, [pc, #84]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d54:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d5c:	4912      	ldr	r1, [pc, #72]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d008      	beq.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8008d6e:	4b0e      	ldr	r3, [pc, #56]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d7a:	490b      	ldr	r1, [pc, #44]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d008      	beq.n	8008d9e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8008d8c:	4b06      	ldr	r3, [pc, #24]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d90:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d98:	4903      	ldr	r1, [pc, #12]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8008d9e:	2300      	movs	r3, #0
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3748      	adds	r7, #72	; 0x48
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}
 8008da8:	40021000 	.word	0x40021000

08008dac <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b084      	sub	sp, #16
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008db4:	2301      	movs	r3, #1
 8008db6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d101      	bne.n	8008dc2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	e073      	b.n	8008eaa <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	7f5b      	ldrb	r3, [r3, #29]
 8008dc6:	b2db      	uxtb	r3, r3
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d105      	bne.n	8008dd8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f7fa fd5c 	bl	8003890 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2202      	movs	r2, #2
 8008ddc:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	68db      	ldr	r3, [r3, #12]
 8008de4:	f003 0310 	and.w	r3, r3, #16
 8008de8:	2b10      	cmp	r3, #16
 8008dea:	d055      	beq.n	8008e98 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	22ca      	movs	r2, #202	; 0xca
 8008df2:	625a      	str	r2, [r3, #36]	; 0x24
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	2253      	movs	r2, #83	; 0x53
 8008dfa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 fa49 	bl	8009294 <RTC_EnterInitMode>
 8008e02:	4603      	mov	r3, r0
 8008e04:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8008e06:	7bfb      	ldrb	r3, [r7, #15]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d12c      	bne.n	8008e66 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	689b      	ldr	r3, [r3, #8]
 8008e12:	687a      	ldr	r2, [r7, #4]
 8008e14:	6812      	ldr	r2, [r2, #0]
 8008e16:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008e1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e1e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	6899      	ldr	r1, [r3, #8]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	685a      	ldr	r2, [r3, #4]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	691b      	ldr	r3, [r3, #16]
 8008e2e:	431a      	orrs	r2, r3
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	695b      	ldr	r3, [r3, #20]
 8008e34:	431a      	orrs	r2, r3
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	430a      	orrs	r2, r1
 8008e3c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	687a      	ldr	r2, [r7, #4]
 8008e44:	68d2      	ldr	r2, [r2, #12]
 8008e46:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	6919      	ldr	r1, [r3, #16]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	689b      	ldr	r3, [r3, #8]
 8008e52:	041a      	lsls	r2, r3, #16
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	430a      	orrs	r2, r1
 8008e5a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f000 fa50 	bl	8009302 <RTC_ExitInitMode>
 8008e62:	4603      	mov	r3, r0
 8008e64:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008e66:	7bfb      	ldrb	r3, [r7, #15]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d110      	bne.n	8008e8e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008e7a:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	699a      	ldr	r2, [r3, #24]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	430a      	orrs	r2, r1
 8008e8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	22ff      	movs	r2, #255	; 0xff
 8008e94:	625a      	str	r2, [r3, #36]	; 0x24
 8008e96:	e001      	b.n	8008e9c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008e9c:	7bfb      	ldrb	r3, [r7, #15]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d102      	bne.n	8008ea8 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8008ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3710      	adds	r7, #16
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}

08008eb2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008eb2:	b590      	push	{r4, r7, lr}
 8008eb4:	b087      	sub	sp, #28
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	60f8      	str	r0, [r7, #12]
 8008eba:	60b9      	str	r1, [r7, #8]
 8008ebc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	7f1b      	ldrb	r3, [r3, #28]
 8008ec6:	2b01      	cmp	r3, #1
 8008ec8:	d101      	bne.n	8008ece <HAL_RTC_SetTime+0x1c>
 8008eca:	2302      	movs	r3, #2
 8008ecc:	e087      	b.n	8008fde <HAL_RTC_SetTime+0x12c>
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2202      	movs	r2, #2
 8008ed8:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d126      	bne.n	8008f2e <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	689b      	ldr	r3, [r3, #8]
 8008ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d102      	bne.n	8008ef4 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f000 fa27 	bl	800934c <RTC_ByteToBcd2>
 8008efe:	4603      	mov	r3, r0
 8008f00:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	785b      	ldrb	r3, [r3, #1]
 8008f06:	4618      	mov	r0, r3
 8008f08:	f000 fa20 	bl	800934c <RTC_ByteToBcd2>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008f10:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	789b      	ldrb	r3, [r3, #2]
 8008f16:	4618      	mov	r0, r3
 8008f18:	f000 fa18 	bl	800934c <RTC_ByteToBcd2>
 8008f1c:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008f1e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	78db      	ldrb	r3, [r3, #3]
 8008f26:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	617b      	str	r3, [r7, #20]
 8008f2c:	e018      	b.n	8008f60 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	689b      	ldr	r3, [r3, #8]
 8008f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d102      	bne.n	8008f42 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	785b      	ldrb	r3, [r3, #1]
 8008f4c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008f4e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8008f50:	68ba      	ldr	r2, [r7, #8]
 8008f52:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008f54:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	78db      	ldrb	r3, [r3, #3]
 8008f5a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	22ca      	movs	r2, #202	; 0xca
 8008f66:	625a      	str	r2, [r3, #36]	; 0x24
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2253      	movs	r2, #83	; 0x53
 8008f6e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008f70:	68f8      	ldr	r0, [r7, #12]
 8008f72:	f000 f98f 	bl	8009294 <RTC_EnterInitMode>
 8008f76:	4603      	mov	r3, r0
 8008f78:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008f7a:	7cfb      	ldrb	r3, [r7, #19]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d120      	bne.n	8008fc2 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681a      	ldr	r2, [r3, #0]
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008f8a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008f8e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	689a      	ldr	r2, [r3, #8]
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008f9e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	6899      	ldr	r1, [r3, #8]
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	68da      	ldr	r2, [r3, #12]
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	691b      	ldr	r3, [r3, #16]
 8008fae:	431a      	orrs	r2, r3
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	430a      	orrs	r2, r1
 8008fb6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008fb8:	68f8      	ldr	r0, [r7, #12]
 8008fba:	f000 f9a2 	bl	8009302 <RTC_ExitInitMode>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008fc2:	7cfb      	ldrb	r3, [r7, #19]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d102      	bne.n	8008fce <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	22ff      	movs	r2, #255	; 0xff
 8008fd4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	771a      	strb	r2, [r3, #28]

  return status;
 8008fdc:	7cfb      	ldrb	r3, [r7, #19]
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	371c      	adds	r7, #28
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd90      	pop	{r4, r7, pc}

08008fe6 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008fe6:	b580      	push	{r7, lr}
 8008fe8:	b086      	sub	sp, #24
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	60f8      	str	r0, [r7, #12]
 8008fee:	60b9      	str	r1, [r7, #8]
 8008ff0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	691b      	ldr	r3, [r3, #16]
 8009006:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009018:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800901c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	0c1b      	lsrs	r3, r3, #16
 8009022:	b2db      	uxtb	r3, r3
 8009024:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009028:	b2da      	uxtb	r2, r3
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	0a1b      	lsrs	r3, r3, #8
 8009032:	b2db      	uxtb	r3, r3
 8009034:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009038:	b2da      	uxtb	r2, r3
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	b2db      	uxtb	r3, r3
 8009042:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009046:	b2da      	uxtb	r2, r3
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	0d9b      	lsrs	r3, r3, #22
 8009050:	b2db      	uxtb	r3, r3
 8009052:	f003 0301 	and.w	r3, r3, #1
 8009056:	b2da      	uxtb	r2, r3
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d11a      	bne.n	8009098 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	781b      	ldrb	r3, [r3, #0]
 8009066:	4618      	mov	r0, r3
 8009068:	f000 f98e 	bl	8009388 <RTC_Bcd2ToByte>
 800906c:	4603      	mov	r3, r0
 800906e:	461a      	mov	r2, r3
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	785b      	ldrb	r3, [r3, #1]
 8009078:	4618      	mov	r0, r3
 800907a:	f000 f985 	bl	8009388 <RTC_Bcd2ToByte>
 800907e:	4603      	mov	r3, r0
 8009080:	461a      	mov	r2, r3
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	789b      	ldrb	r3, [r3, #2]
 800908a:	4618      	mov	r0, r3
 800908c:	f000 f97c 	bl	8009388 <RTC_Bcd2ToByte>
 8009090:	4603      	mov	r3, r0
 8009092:	461a      	mov	r2, r3
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009098:	2300      	movs	r3, #0
}
 800909a:	4618      	mov	r0, r3
 800909c:	3718      	adds	r7, #24
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}

080090a2 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80090a2:	b590      	push	{r4, r7, lr}
 80090a4:	b087      	sub	sp, #28
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	60f8      	str	r0, [r7, #12]
 80090aa:	60b9      	str	r1, [r7, #8]
 80090ac:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80090ae:	2300      	movs	r3, #0
 80090b0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	7f1b      	ldrb	r3, [r3, #28]
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d101      	bne.n	80090be <HAL_RTC_SetDate+0x1c>
 80090ba:	2302      	movs	r3, #2
 80090bc:	e071      	b.n	80091a2 <HAL_RTC_SetDate+0x100>
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	2201      	movs	r2, #1
 80090c2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	2202      	movs	r2, #2
 80090c8:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d10e      	bne.n	80090ee <HAL_RTC_SetDate+0x4c>
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	785b      	ldrb	r3, [r3, #1]
 80090d4:	f003 0310 	and.w	r3, r3, #16
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d008      	beq.n	80090ee <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	785b      	ldrb	r3, [r3, #1]
 80090e0:	f023 0310 	bic.w	r3, r3, #16
 80090e4:	b2db      	uxtb	r3, r3
 80090e6:	330a      	adds	r3, #10
 80090e8:	b2da      	uxtb	r2, r3
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d11c      	bne.n	800912e <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	78db      	ldrb	r3, [r3, #3]
 80090f8:	4618      	mov	r0, r3
 80090fa:	f000 f927 	bl	800934c <RTC_ByteToBcd2>
 80090fe:	4603      	mov	r3, r0
 8009100:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	785b      	ldrb	r3, [r3, #1]
 8009106:	4618      	mov	r0, r3
 8009108:	f000 f920 	bl	800934c <RTC_ByteToBcd2>
 800910c:	4603      	mov	r3, r0
 800910e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009110:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	789b      	ldrb	r3, [r3, #2]
 8009116:	4618      	mov	r0, r3
 8009118:	f000 f918 	bl	800934c <RTC_ByteToBcd2>
 800911c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800911e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	781b      	ldrb	r3, [r3, #0]
 8009126:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009128:	4313      	orrs	r3, r2
 800912a:	617b      	str	r3, [r7, #20]
 800912c:	e00e      	b.n	800914c <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	78db      	ldrb	r3, [r3, #3]
 8009132:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	785b      	ldrb	r3, [r3, #1]
 8009138:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800913a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800913c:	68ba      	ldr	r2, [r7, #8]
 800913e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009140:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009148:	4313      	orrs	r3, r2
 800914a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	22ca      	movs	r2, #202	; 0xca
 8009152:	625a      	str	r2, [r3, #36]	; 0x24
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	2253      	movs	r2, #83	; 0x53
 800915a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800915c:	68f8      	ldr	r0, [r7, #12]
 800915e:	f000 f899 	bl	8009294 <RTC_EnterInitMode>
 8009162:	4603      	mov	r3, r0
 8009164:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009166:	7cfb      	ldrb	r3, [r7, #19]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d10c      	bne.n	8009186 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681a      	ldr	r2, [r3, #0]
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009176:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800917a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800917c:	68f8      	ldr	r0, [r7, #12]
 800917e:	f000 f8c0 	bl	8009302 <RTC_ExitInitMode>
 8009182:	4603      	mov	r3, r0
 8009184:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009186:	7cfb      	ldrb	r3, [r7, #19]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d102      	bne.n	8009192 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2201      	movs	r2, #1
 8009190:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	22ff      	movs	r2, #255	; 0xff
 8009198:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2200      	movs	r2, #0
 800919e:	771a      	strb	r2, [r3, #28]

  return status;
 80091a0:	7cfb      	ldrb	r3, [r7, #19]
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	371c      	adds	r7, #28
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd90      	pop	{r4, r7, pc}

080091aa <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80091aa:	b580      	push	{r7, lr}
 80091ac:	b086      	sub	sp, #24
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	60f8      	str	r0, [r7, #12]
 80091b2:	60b9      	str	r1, [r7, #8]
 80091b4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80091b6:	2300      	movs	r3, #0
 80091b8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80091c4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80091c8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	0c1b      	lsrs	r3, r3, #16
 80091ce:	b2da      	uxtb	r2, r3
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	0a1b      	lsrs	r3, r3, #8
 80091d8:	b2db      	uxtb	r3, r3
 80091da:	f003 031f 	and.w	r3, r3, #31
 80091de:	b2da      	uxtb	r2, r3
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	b2db      	uxtb	r3, r3
 80091e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80091ec:	b2da      	uxtb	r2, r3
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	0b5b      	lsrs	r3, r3, #13
 80091f6:	b2db      	uxtb	r3, r3
 80091f8:	f003 0307 	and.w	r3, r3, #7
 80091fc:	b2da      	uxtb	r2, r3
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d11a      	bne.n	800923e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	78db      	ldrb	r3, [r3, #3]
 800920c:	4618      	mov	r0, r3
 800920e:	f000 f8bb 	bl	8009388 <RTC_Bcd2ToByte>
 8009212:	4603      	mov	r3, r0
 8009214:	461a      	mov	r2, r3
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	785b      	ldrb	r3, [r3, #1]
 800921e:	4618      	mov	r0, r3
 8009220:	f000 f8b2 	bl	8009388 <RTC_Bcd2ToByte>
 8009224:	4603      	mov	r3, r0
 8009226:	461a      	mov	r2, r3
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	789b      	ldrb	r3, [r3, #2]
 8009230:	4618      	mov	r0, r3
 8009232:	f000 f8a9 	bl	8009388 <RTC_Bcd2ToByte>
 8009236:	4603      	mov	r3, r0
 8009238:	461a      	mov	r2, r3
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800923e:	2300      	movs	r3, #0
}
 8009240:	4618      	mov	r0, r3
 8009242:	3718      	adds	r7, #24
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}

08009248 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b084      	sub	sp, #16
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009250:	2300      	movs	r3, #0
 8009252:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a0d      	ldr	r2, [pc, #52]	; (8009290 <HAL_RTC_WaitForSynchro+0x48>)
 800925a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800925c:	f7fa ff96 	bl	800418c <HAL_GetTick>
 8009260:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009262:	e009      	b.n	8009278 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009264:	f7fa ff92 	bl	800418c <HAL_GetTick>
 8009268:	4602      	mov	r2, r0
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	1ad3      	subs	r3, r2, r3
 800926e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009272:	d901      	bls.n	8009278 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8009274:	2303      	movs	r3, #3
 8009276:	e007      	b.n	8009288 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	68db      	ldr	r3, [r3, #12]
 800927e:	f003 0320 	and.w	r3, r3, #32
 8009282:	2b00      	cmp	r3, #0
 8009284:	d0ee      	beq.n	8009264 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8009286:	2300      	movs	r3, #0
}
 8009288:	4618      	mov	r0, r3
 800928a:	3710      	adds	r7, #16
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}
 8009290:	0001ff5f 	.word	0x0001ff5f

08009294 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800929c:	2300      	movs	r3, #0
 800929e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80092a0:	2300      	movs	r3, #0
 80092a2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	68db      	ldr	r3, [r3, #12]
 80092aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d122      	bne.n	80092f8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	68da      	ldr	r2, [r3, #12]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80092c0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80092c2:	f7fa ff63 	bl	800418c <HAL_GetTick>
 80092c6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80092c8:	e00c      	b.n	80092e4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80092ca:	f7fa ff5f 	bl	800418c <HAL_GetTick>
 80092ce:	4602      	mov	r2, r0
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	1ad3      	subs	r3, r2, r3
 80092d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80092d8:	d904      	bls.n	80092e4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2204      	movs	r2, #4
 80092de:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80092e0:	2301      	movs	r3, #1
 80092e2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	68db      	ldr	r3, [r3, #12]
 80092ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d102      	bne.n	80092f8 <RTC_EnterInitMode+0x64>
 80092f2:	7bfb      	ldrb	r3, [r7, #15]
 80092f4:	2b01      	cmp	r3, #1
 80092f6:	d1e8      	bne.n	80092ca <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80092f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3710      	adds	r7, #16
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}

08009302 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009302:	b580      	push	{r7, lr}
 8009304:	b084      	sub	sp, #16
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800930a:	2300      	movs	r3, #0
 800930c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	68da      	ldr	r2, [r3, #12]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800931c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	689b      	ldr	r3, [r3, #8]
 8009324:	f003 0320 	and.w	r3, r3, #32
 8009328:	2b00      	cmp	r3, #0
 800932a:	d10a      	bne.n	8009342 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f7ff ff8b 	bl	8009248 <HAL_RTC_WaitForSynchro>
 8009332:	4603      	mov	r3, r0
 8009334:	2b00      	cmp	r3, #0
 8009336:	d004      	beq.n	8009342 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2204      	movs	r2, #4
 800933c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800933e:	2301      	movs	r3, #1
 8009340:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8009342:	7bfb      	ldrb	r3, [r7, #15]
}
 8009344:	4618      	mov	r0, r3
 8009346:	3710      	adds	r7, #16
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}

0800934c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800934c:	b480      	push	{r7}
 800934e:	b085      	sub	sp, #20
 8009350:	af00      	add	r7, sp, #0
 8009352:	4603      	mov	r3, r0
 8009354:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009356:	2300      	movs	r3, #0
 8009358:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800935a:	e005      	b.n	8009368 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	3301      	adds	r3, #1
 8009360:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8009362:	79fb      	ldrb	r3, [r7, #7]
 8009364:	3b0a      	subs	r3, #10
 8009366:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8009368:	79fb      	ldrb	r3, [r7, #7]
 800936a:	2b09      	cmp	r3, #9
 800936c:	d8f6      	bhi.n	800935c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	b2db      	uxtb	r3, r3
 8009372:	011b      	lsls	r3, r3, #4
 8009374:	b2da      	uxtb	r2, r3
 8009376:	79fb      	ldrb	r3, [r7, #7]
 8009378:	4313      	orrs	r3, r2
 800937a:	b2db      	uxtb	r3, r3
}
 800937c:	4618      	mov	r0, r3
 800937e:	3714      	adds	r7, #20
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr

08009388 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8009388:	b480      	push	{r7}
 800938a:	b085      	sub	sp, #20
 800938c:	af00      	add	r7, sp, #0
 800938e:	4603      	mov	r3, r0
 8009390:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8009392:	2300      	movs	r3, #0
 8009394:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8009396:	79fb      	ldrb	r3, [r7, #7]
 8009398:	091b      	lsrs	r3, r3, #4
 800939a:	b2db      	uxtb	r3, r3
 800939c:	461a      	mov	r2, r3
 800939e:	4613      	mov	r3, r2
 80093a0:	009b      	lsls	r3, r3, #2
 80093a2:	4413      	add	r3, r2
 80093a4:	005b      	lsls	r3, r3, #1
 80093a6:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	b2da      	uxtb	r2, r3
 80093ac:	79fb      	ldrb	r3, [r7, #7]
 80093ae:	f003 030f 	and.w	r3, r3, #15
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	4413      	add	r3, r2
 80093b6:	b2db      	uxtb	r3, r3
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3714      	adds	r7, #20
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr

080093c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b082      	sub	sp, #8
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d101      	bne.n	80093d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80093d2:	2301      	movs	r3, #1
 80093d4:	e049      	b.n	800946a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093dc:	b2db      	uxtb	r3, r3
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d106      	bne.n	80093f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2200      	movs	r2, #0
 80093e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f7fa fa76 	bl	80038dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2202      	movs	r2, #2
 80093f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681a      	ldr	r2, [r3, #0]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	3304      	adds	r3, #4
 8009400:	4619      	mov	r1, r3
 8009402:	4610      	mov	r0, r2
 8009404:	f001 f838 	bl	800a478 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2201      	movs	r2, #1
 800940c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2201      	movs	r2, #1
 8009414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2201      	movs	r2, #1
 800941c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2201      	movs	r2, #1
 8009424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2201      	movs	r2, #1
 800942c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2201      	movs	r2, #1
 8009434:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2201      	movs	r2, #1
 800943c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2201      	movs	r2, #1
 8009444:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2201      	movs	r2, #1
 800944c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2201      	movs	r2, #1
 8009454:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2201      	movs	r2, #1
 800945c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2201      	movs	r2, #1
 8009464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009468:	2300      	movs	r3, #0
}
 800946a:	4618      	mov	r0, r3
 800946c:	3708      	adds	r7, #8
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}
	...

08009474 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009474:	b480      	push	{r7}
 8009476:	b085      	sub	sp, #20
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009482:	b2db      	uxtb	r3, r3
 8009484:	2b01      	cmp	r3, #1
 8009486:	d001      	beq.n	800948c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009488:	2301      	movs	r3, #1
 800948a:	e04a      	b.n	8009522 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2202      	movs	r2, #2
 8009490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	68da      	ldr	r2, [r3, #12]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f042 0201 	orr.w	r2, r2, #1
 80094a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a21      	ldr	r2, [pc, #132]	; (8009530 <HAL_TIM_Base_Start_IT+0xbc>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d018      	beq.n	80094e0 <HAL_TIM_Base_Start_IT+0x6c>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094b6:	d013      	beq.n	80094e0 <HAL_TIM_Base_Start_IT+0x6c>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4a1d      	ldr	r2, [pc, #116]	; (8009534 <HAL_TIM_Base_Start_IT+0xc0>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d00e      	beq.n	80094e0 <HAL_TIM_Base_Start_IT+0x6c>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4a1c      	ldr	r2, [pc, #112]	; (8009538 <HAL_TIM_Base_Start_IT+0xc4>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d009      	beq.n	80094e0 <HAL_TIM_Base_Start_IT+0x6c>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4a1a      	ldr	r2, [pc, #104]	; (800953c <HAL_TIM_Base_Start_IT+0xc8>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d004      	beq.n	80094e0 <HAL_TIM_Base_Start_IT+0x6c>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4a19      	ldr	r2, [pc, #100]	; (8009540 <HAL_TIM_Base_Start_IT+0xcc>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d115      	bne.n	800950c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	689a      	ldr	r2, [r3, #8]
 80094e6:	4b17      	ldr	r3, [pc, #92]	; (8009544 <HAL_TIM_Base_Start_IT+0xd0>)
 80094e8:	4013      	ands	r3, r2
 80094ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	2b06      	cmp	r3, #6
 80094f0:	d015      	beq.n	800951e <HAL_TIM_Base_Start_IT+0xaa>
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094f8:	d011      	beq.n	800951e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	681a      	ldr	r2, [r3, #0]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f042 0201 	orr.w	r2, r2, #1
 8009508:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800950a:	e008      	b.n	800951e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	681a      	ldr	r2, [r3, #0]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f042 0201 	orr.w	r2, r2, #1
 800951a:	601a      	str	r2, [r3, #0]
 800951c:	e000      	b.n	8009520 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800951e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009520:	2300      	movs	r3, #0
}
 8009522:	4618      	mov	r0, r3
 8009524:	3714      	adds	r7, #20
 8009526:	46bd      	mov	sp, r7
 8009528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952c:	4770      	bx	lr
 800952e:	bf00      	nop
 8009530:	40012c00 	.word	0x40012c00
 8009534:	40000400 	.word	0x40000400
 8009538:	40000800 	.word	0x40000800
 800953c:	40013400 	.word	0x40013400
 8009540:	40014000 	.word	0x40014000
 8009544:	00010007 	.word	0x00010007

08009548 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b082      	sub	sp, #8
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d101      	bne.n	800955a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009556:	2301      	movs	r3, #1
 8009558:	e049      	b.n	80095ee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009560:	b2db      	uxtb	r3, r3
 8009562:	2b00      	cmp	r3, #0
 8009564:	d106      	bne.n	8009574 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2200      	movs	r2, #0
 800956a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f000 f841 	bl	80095f6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2202      	movs	r2, #2
 8009578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681a      	ldr	r2, [r3, #0]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	3304      	adds	r3, #4
 8009584:	4619      	mov	r1, r3
 8009586:	4610      	mov	r0, r2
 8009588:	f000 ff76 	bl	800a478 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2201      	movs	r2, #1
 8009590:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2201      	movs	r2, #1
 8009598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2201      	movs	r2, #1
 80095a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2201      	movs	r2, #1
 80095a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2201      	movs	r2, #1
 80095b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2201      	movs	r2, #1
 80095b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2201      	movs	r2, #1
 80095c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2201      	movs	r2, #1
 80095c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2201      	movs	r2, #1
 80095d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2201      	movs	r2, #1
 80095d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2201      	movs	r2, #1
 80095e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2201      	movs	r2, #1
 80095e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80095ec:	2300      	movs	r3, #0
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	3708      	adds	r7, #8
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}

080095f6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80095f6:	b480      	push	{r7}
 80095f8:	b083      	sub	sp, #12
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80095fe:	bf00      	nop
 8009600:	370c      	adds	r7, #12
 8009602:	46bd      	mov	sp, r7
 8009604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009608:	4770      	bx	lr
	...

0800960c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b084      	sub	sp, #16
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d109      	bne.n	8009630 <HAL_TIM_PWM_Start+0x24>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009622:	b2db      	uxtb	r3, r3
 8009624:	2b01      	cmp	r3, #1
 8009626:	bf14      	ite	ne
 8009628:	2301      	movne	r3, #1
 800962a:	2300      	moveq	r3, #0
 800962c:	b2db      	uxtb	r3, r3
 800962e:	e03c      	b.n	80096aa <HAL_TIM_PWM_Start+0x9e>
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	2b04      	cmp	r3, #4
 8009634:	d109      	bne.n	800964a <HAL_TIM_PWM_Start+0x3e>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800963c:	b2db      	uxtb	r3, r3
 800963e:	2b01      	cmp	r3, #1
 8009640:	bf14      	ite	ne
 8009642:	2301      	movne	r3, #1
 8009644:	2300      	moveq	r3, #0
 8009646:	b2db      	uxtb	r3, r3
 8009648:	e02f      	b.n	80096aa <HAL_TIM_PWM_Start+0x9e>
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	2b08      	cmp	r3, #8
 800964e:	d109      	bne.n	8009664 <HAL_TIM_PWM_Start+0x58>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009656:	b2db      	uxtb	r3, r3
 8009658:	2b01      	cmp	r3, #1
 800965a:	bf14      	ite	ne
 800965c:	2301      	movne	r3, #1
 800965e:	2300      	moveq	r3, #0
 8009660:	b2db      	uxtb	r3, r3
 8009662:	e022      	b.n	80096aa <HAL_TIM_PWM_Start+0x9e>
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	2b0c      	cmp	r3, #12
 8009668:	d109      	bne.n	800967e <HAL_TIM_PWM_Start+0x72>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009670:	b2db      	uxtb	r3, r3
 8009672:	2b01      	cmp	r3, #1
 8009674:	bf14      	ite	ne
 8009676:	2301      	movne	r3, #1
 8009678:	2300      	moveq	r3, #0
 800967a:	b2db      	uxtb	r3, r3
 800967c:	e015      	b.n	80096aa <HAL_TIM_PWM_Start+0x9e>
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	2b10      	cmp	r3, #16
 8009682:	d109      	bne.n	8009698 <HAL_TIM_PWM_Start+0x8c>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800968a:	b2db      	uxtb	r3, r3
 800968c:	2b01      	cmp	r3, #1
 800968e:	bf14      	ite	ne
 8009690:	2301      	movne	r3, #1
 8009692:	2300      	moveq	r3, #0
 8009694:	b2db      	uxtb	r3, r3
 8009696:	e008      	b.n	80096aa <HAL_TIM_PWM_Start+0x9e>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800969e:	b2db      	uxtb	r3, r3
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	bf14      	ite	ne
 80096a4:	2301      	movne	r3, #1
 80096a6:	2300      	moveq	r3, #0
 80096a8:	b2db      	uxtb	r3, r3
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d001      	beq.n	80096b2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80096ae:	2301      	movs	r3, #1
 80096b0:	e097      	b.n	80097e2 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d104      	bne.n	80096c2 <HAL_TIM_PWM_Start+0xb6>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2202      	movs	r2, #2
 80096bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80096c0:	e023      	b.n	800970a <HAL_TIM_PWM_Start+0xfe>
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	2b04      	cmp	r3, #4
 80096c6:	d104      	bne.n	80096d2 <HAL_TIM_PWM_Start+0xc6>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2202      	movs	r2, #2
 80096cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80096d0:	e01b      	b.n	800970a <HAL_TIM_PWM_Start+0xfe>
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	2b08      	cmp	r3, #8
 80096d6:	d104      	bne.n	80096e2 <HAL_TIM_PWM_Start+0xd6>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2202      	movs	r2, #2
 80096dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80096e0:	e013      	b.n	800970a <HAL_TIM_PWM_Start+0xfe>
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	2b0c      	cmp	r3, #12
 80096e6:	d104      	bne.n	80096f2 <HAL_TIM_PWM_Start+0xe6>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2202      	movs	r2, #2
 80096ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80096f0:	e00b      	b.n	800970a <HAL_TIM_PWM_Start+0xfe>
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	2b10      	cmp	r3, #16
 80096f6:	d104      	bne.n	8009702 <HAL_TIM_PWM_Start+0xf6>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2202      	movs	r2, #2
 80096fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009700:	e003      	b.n	800970a <HAL_TIM_PWM_Start+0xfe>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2202      	movs	r2, #2
 8009706:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	2201      	movs	r2, #1
 8009710:	6839      	ldr	r1, [r7, #0]
 8009712:	4618      	mov	r0, r3
 8009714:	f001 fbce 	bl	800aeb4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	4a33      	ldr	r2, [pc, #204]	; (80097ec <HAL_TIM_PWM_Start+0x1e0>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d013      	beq.n	800974a <HAL_TIM_PWM_Start+0x13e>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	4a32      	ldr	r2, [pc, #200]	; (80097f0 <HAL_TIM_PWM_Start+0x1e4>)
 8009728:	4293      	cmp	r3, r2
 800972a:	d00e      	beq.n	800974a <HAL_TIM_PWM_Start+0x13e>
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4a30      	ldr	r2, [pc, #192]	; (80097f4 <HAL_TIM_PWM_Start+0x1e8>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d009      	beq.n	800974a <HAL_TIM_PWM_Start+0x13e>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	4a2f      	ldr	r2, [pc, #188]	; (80097f8 <HAL_TIM_PWM_Start+0x1ec>)
 800973c:	4293      	cmp	r3, r2
 800973e:	d004      	beq.n	800974a <HAL_TIM_PWM_Start+0x13e>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	4a2d      	ldr	r2, [pc, #180]	; (80097fc <HAL_TIM_PWM_Start+0x1f0>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d101      	bne.n	800974e <HAL_TIM_PWM_Start+0x142>
 800974a:	2301      	movs	r3, #1
 800974c:	e000      	b.n	8009750 <HAL_TIM_PWM_Start+0x144>
 800974e:	2300      	movs	r3, #0
 8009750:	2b00      	cmp	r3, #0
 8009752:	d007      	beq.n	8009764 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009762:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	4a20      	ldr	r2, [pc, #128]	; (80097ec <HAL_TIM_PWM_Start+0x1e0>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d018      	beq.n	80097a0 <HAL_TIM_PWM_Start+0x194>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009776:	d013      	beq.n	80097a0 <HAL_TIM_PWM_Start+0x194>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	4a20      	ldr	r2, [pc, #128]	; (8009800 <HAL_TIM_PWM_Start+0x1f4>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d00e      	beq.n	80097a0 <HAL_TIM_PWM_Start+0x194>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	4a1f      	ldr	r2, [pc, #124]	; (8009804 <HAL_TIM_PWM_Start+0x1f8>)
 8009788:	4293      	cmp	r3, r2
 800978a:	d009      	beq.n	80097a0 <HAL_TIM_PWM_Start+0x194>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4a17      	ldr	r2, [pc, #92]	; (80097f0 <HAL_TIM_PWM_Start+0x1e4>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d004      	beq.n	80097a0 <HAL_TIM_PWM_Start+0x194>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4a16      	ldr	r2, [pc, #88]	; (80097f4 <HAL_TIM_PWM_Start+0x1e8>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d115      	bne.n	80097cc <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	689a      	ldr	r2, [r3, #8]
 80097a6:	4b18      	ldr	r3, [pc, #96]	; (8009808 <HAL_TIM_PWM_Start+0x1fc>)
 80097a8:	4013      	ands	r3, r2
 80097aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2b06      	cmp	r3, #6
 80097b0:	d015      	beq.n	80097de <HAL_TIM_PWM_Start+0x1d2>
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097b8:	d011      	beq.n	80097de <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	681a      	ldr	r2, [r3, #0]
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f042 0201 	orr.w	r2, r2, #1
 80097c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097ca:	e008      	b.n	80097de <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	681a      	ldr	r2, [r3, #0]
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f042 0201 	orr.w	r2, r2, #1
 80097da:	601a      	str	r2, [r3, #0]
 80097dc:	e000      	b.n	80097e0 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80097e0:	2300      	movs	r3, #0
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3710      	adds	r7, #16
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}
 80097ea:	bf00      	nop
 80097ec:	40012c00 	.word	0x40012c00
 80097f0:	40013400 	.word	0x40013400
 80097f4:	40014000 	.word	0x40014000
 80097f8:	40014400 	.word	0x40014400
 80097fc:	40014800 	.word	0x40014800
 8009800:	40000400 	.word	0x40000400
 8009804:	40000800 	.word	0x40000800
 8009808:	00010007 	.word	0x00010007

0800980c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b082      	sub	sp, #8
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	2200      	movs	r2, #0
 800981c:	6839      	ldr	r1, [r7, #0]
 800981e:	4618      	mov	r0, r3
 8009820:	f001 fb48 	bl	800aeb4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a3e      	ldr	r2, [pc, #248]	; (8009924 <HAL_TIM_PWM_Stop+0x118>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d013      	beq.n	8009856 <HAL_TIM_PWM_Stop+0x4a>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4a3d      	ldr	r2, [pc, #244]	; (8009928 <HAL_TIM_PWM_Stop+0x11c>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d00e      	beq.n	8009856 <HAL_TIM_PWM_Stop+0x4a>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	4a3b      	ldr	r2, [pc, #236]	; (800992c <HAL_TIM_PWM_Stop+0x120>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d009      	beq.n	8009856 <HAL_TIM_PWM_Stop+0x4a>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4a3a      	ldr	r2, [pc, #232]	; (8009930 <HAL_TIM_PWM_Stop+0x124>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d004      	beq.n	8009856 <HAL_TIM_PWM_Stop+0x4a>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a38      	ldr	r2, [pc, #224]	; (8009934 <HAL_TIM_PWM_Stop+0x128>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d101      	bne.n	800985a <HAL_TIM_PWM_Stop+0x4e>
 8009856:	2301      	movs	r3, #1
 8009858:	e000      	b.n	800985c <HAL_TIM_PWM_Stop+0x50>
 800985a:	2300      	movs	r3, #0
 800985c:	2b00      	cmp	r3, #0
 800985e:	d017      	beq.n	8009890 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	6a1a      	ldr	r2, [r3, #32]
 8009866:	f241 1311 	movw	r3, #4369	; 0x1111
 800986a:	4013      	ands	r3, r2
 800986c:	2b00      	cmp	r3, #0
 800986e:	d10f      	bne.n	8009890 <HAL_TIM_PWM_Stop+0x84>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	6a1a      	ldr	r2, [r3, #32]
 8009876:	f240 4344 	movw	r3, #1092	; 0x444
 800987a:	4013      	ands	r3, r2
 800987c:	2b00      	cmp	r3, #0
 800987e:	d107      	bne.n	8009890 <HAL_TIM_PWM_Stop+0x84>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800988e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	6a1a      	ldr	r2, [r3, #32]
 8009896:	f241 1311 	movw	r3, #4369	; 0x1111
 800989a:	4013      	ands	r3, r2
 800989c:	2b00      	cmp	r3, #0
 800989e:	d10f      	bne.n	80098c0 <HAL_TIM_PWM_Stop+0xb4>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	6a1a      	ldr	r2, [r3, #32]
 80098a6:	f240 4344 	movw	r3, #1092	; 0x444
 80098aa:	4013      	ands	r3, r2
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d107      	bne.n	80098c0 <HAL_TIM_PWM_Stop+0xb4>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	681a      	ldr	r2, [r3, #0]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f022 0201 	bic.w	r2, r2, #1
 80098be:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d104      	bne.n	80098d0 <HAL_TIM_PWM_Stop+0xc4>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2201      	movs	r2, #1
 80098ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80098ce:	e023      	b.n	8009918 <HAL_TIM_PWM_Stop+0x10c>
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	2b04      	cmp	r3, #4
 80098d4:	d104      	bne.n	80098e0 <HAL_TIM_PWM_Stop+0xd4>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2201      	movs	r2, #1
 80098da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80098de:	e01b      	b.n	8009918 <HAL_TIM_PWM_Stop+0x10c>
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	2b08      	cmp	r3, #8
 80098e4:	d104      	bne.n	80098f0 <HAL_TIM_PWM_Stop+0xe4>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2201      	movs	r2, #1
 80098ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80098ee:	e013      	b.n	8009918 <HAL_TIM_PWM_Stop+0x10c>
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	2b0c      	cmp	r3, #12
 80098f4:	d104      	bne.n	8009900 <HAL_TIM_PWM_Stop+0xf4>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2201      	movs	r2, #1
 80098fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80098fe:	e00b      	b.n	8009918 <HAL_TIM_PWM_Stop+0x10c>
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	2b10      	cmp	r3, #16
 8009904:	d104      	bne.n	8009910 <HAL_TIM_PWM_Stop+0x104>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2201      	movs	r2, #1
 800990a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800990e:	e003      	b.n	8009918 <HAL_TIM_PWM_Stop+0x10c>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2201      	movs	r2, #1
 8009914:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8009918:	2300      	movs	r3, #0
}
 800991a:	4618      	mov	r0, r3
 800991c:	3708      	adds	r7, #8
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}
 8009922:	bf00      	nop
 8009924:	40012c00 	.word	0x40012c00
 8009928:	40013400 	.word	0x40013400
 800992c:	40014000 	.word	0x40014000
 8009930:	40014400 	.word	0x40014400
 8009934:	40014800 	.word	0x40014800

08009938 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b082      	sub	sp, #8
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d101      	bne.n	800994a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009946:	2301      	movs	r3, #1
 8009948:	e049      	b.n	80099de <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009950:	b2db      	uxtb	r3, r3
 8009952:	2b00      	cmp	r3, #0
 8009954:	d106      	bne.n	8009964 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2200      	movs	r2, #0
 800995a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f000 f841 	bl	80099e6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2202      	movs	r2, #2
 8009968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681a      	ldr	r2, [r3, #0]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	3304      	adds	r3, #4
 8009974:	4619      	mov	r1, r3
 8009976:	4610      	mov	r0, r2
 8009978:	f000 fd7e 	bl	800a478 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2201      	movs	r2, #1
 8009980:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2201      	movs	r2, #1
 8009988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2201      	movs	r2, #1
 8009990:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2201      	movs	r2, #1
 8009998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2201      	movs	r2, #1
 80099a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2201      	movs	r2, #1
 80099a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2201      	movs	r2, #1
 80099b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2201      	movs	r2, #1
 80099b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2201      	movs	r2, #1
 80099c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2201      	movs	r2, #1
 80099c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2201      	movs	r2, #1
 80099d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2201      	movs	r2, #1
 80099d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80099dc:	2300      	movs	r3, #0
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3708      	adds	r7, #8
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}

080099e6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80099e6:	b480      	push	{r7}
 80099e8:	b083      	sub	sp, #12
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80099ee:	bf00      	nop
 80099f0:	370c      	adds	r7, #12
 80099f2:	46bd      	mov	sp, r7
 80099f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f8:	4770      	bx	lr
	...

080099fc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b084      	sub	sp, #16
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009a06:	2300      	movs	r3, #0
 8009a08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d104      	bne.n	8009a1a <HAL_TIM_IC_Start_IT+0x1e>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009a16:	b2db      	uxtb	r3, r3
 8009a18:	e023      	b.n	8009a62 <HAL_TIM_IC_Start_IT+0x66>
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	2b04      	cmp	r3, #4
 8009a1e:	d104      	bne.n	8009a2a <HAL_TIM_IC_Start_IT+0x2e>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009a26:	b2db      	uxtb	r3, r3
 8009a28:	e01b      	b.n	8009a62 <HAL_TIM_IC_Start_IT+0x66>
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	2b08      	cmp	r3, #8
 8009a2e:	d104      	bne.n	8009a3a <HAL_TIM_IC_Start_IT+0x3e>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	e013      	b.n	8009a62 <HAL_TIM_IC_Start_IT+0x66>
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	2b0c      	cmp	r3, #12
 8009a3e:	d104      	bne.n	8009a4a <HAL_TIM_IC_Start_IT+0x4e>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	e00b      	b.n	8009a62 <HAL_TIM_IC_Start_IT+0x66>
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	2b10      	cmp	r3, #16
 8009a4e:	d104      	bne.n	8009a5a <HAL_TIM_IC_Start_IT+0x5e>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009a56:	b2db      	uxtb	r3, r3
 8009a58:	e003      	b.n	8009a62 <HAL_TIM_IC_Start_IT+0x66>
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009a60:	b2db      	uxtb	r3, r3
 8009a62:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d104      	bne.n	8009a74 <HAL_TIM_IC_Start_IT+0x78>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a70:	b2db      	uxtb	r3, r3
 8009a72:	e013      	b.n	8009a9c <HAL_TIM_IC_Start_IT+0xa0>
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	2b04      	cmp	r3, #4
 8009a78:	d104      	bne.n	8009a84 <HAL_TIM_IC_Start_IT+0x88>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a80:	b2db      	uxtb	r3, r3
 8009a82:	e00b      	b.n	8009a9c <HAL_TIM_IC_Start_IT+0xa0>
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	2b08      	cmp	r3, #8
 8009a88:	d104      	bne.n	8009a94 <HAL_TIM_IC_Start_IT+0x98>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009a90:	b2db      	uxtb	r3, r3
 8009a92:	e003      	b.n	8009a9c <HAL_TIM_IC_Start_IT+0xa0>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8009a9a:	b2db      	uxtb	r3, r3
 8009a9c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8009a9e:	7bbb      	ldrb	r3, [r7, #14]
 8009aa0:	2b01      	cmp	r3, #1
 8009aa2:	d102      	bne.n	8009aaa <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009aa4:	7b7b      	ldrb	r3, [r7, #13]
 8009aa6:	2b01      	cmp	r3, #1
 8009aa8:	d001      	beq.n	8009aae <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8009aaa:	2301      	movs	r3, #1
 8009aac:	e0d8      	b.n	8009c60 <HAL_TIM_IC_Start_IT+0x264>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d104      	bne.n	8009abe <HAL_TIM_IC_Start_IT+0xc2>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2202      	movs	r2, #2
 8009ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009abc:	e023      	b.n	8009b06 <HAL_TIM_IC_Start_IT+0x10a>
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	2b04      	cmp	r3, #4
 8009ac2:	d104      	bne.n	8009ace <HAL_TIM_IC_Start_IT+0xd2>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2202      	movs	r2, #2
 8009ac8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009acc:	e01b      	b.n	8009b06 <HAL_TIM_IC_Start_IT+0x10a>
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	2b08      	cmp	r3, #8
 8009ad2:	d104      	bne.n	8009ade <HAL_TIM_IC_Start_IT+0xe2>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2202      	movs	r2, #2
 8009ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009adc:	e013      	b.n	8009b06 <HAL_TIM_IC_Start_IT+0x10a>
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	2b0c      	cmp	r3, #12
 8009ae2:	d104      	bne.n	8009aee <HAL_TIM_IC_Start_IT+0xf2>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2202      	movs	r2, #2
 8009ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009aec:	e00b      	b.n	8009b06 <HAL_TIM_IC_Start_IT+0x10a>
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	2b10      	cmp	r3, #16
 8009af2:	d104      	bne.n	8009afe <HAL_TIM_IC_Start_IT+0x102>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2202      	movs	r2, #2
 8009af8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009afc:	e003      	b.n	8009b06 <HAL_TIM_IC_Start_IT+0x10a>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2202      	movs	r2, #2
 8009b02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d104      	bne.n	8009b16 <HAL_TIM_IC_Start_IT+0x11a>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2202      	movs	r2, #2
 8009b10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b14:	e013      	b.n	8009b3e <HAL_TIM_IC_Start_IT+0x142>
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	2b04      	cmp	r3, #4
 8009b1a:	d104      	bne.n	8009b26 <HAL_TIM_IC_Start_IT+0x12a>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2202      	movs	r2, #2
 8009b20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b24:	e00b      	b.n	8009b3e <HAL_TIM_IC_Start_IT+0x142>
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	2b08      	cmp	r3, #8
 8009b2a:	d104      	bne.n	8009b36 <HAL_TIM_IC_Start_IT+0x13a>
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2202      	movs	r2, #2
 8009b30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009b34:	e003      	b.n	8009b3e <HAL_TIM_IC_Start_IT+0x142>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2202      	movs	r2, #2
 8009b3a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	2b0c      	cmp	r3, #12
 8009b42:	d841      	bhi.n	8009bc8 <HAL_TIM_IC_Start_IT+0x1cc>
 8009b44:	a201      	add	r2, pc, #4	; (adr r2, 8009b4c <HAL_TIM_IC_Start_IT+0x150>)
 8009b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b4a:	bf00      	nop
 8009b4c:	08009b81 	.word	0x08009b81
 8009b50:	08009bc9 	.word	0x08009bc9
 8009b54:	08009bc9 	.word	0x08009bc9
 8009b58:	08009bc9 	.word	0x08009bc9
 8009b5c:	08009b93 	.word	0x08009b93
 8009b60:	08009bc9 	.word	0x08009bc9
 8009b64:	08009bc9 	.word	0x08009bc9
 8009b68:	08009bc9 	.word	0x08009bc9
 8009b6c:	08009ba5 	.word	0x08009ba5
 8009b70:	08009bc9 	.word	0x08009bc9
 8009b74:	08009bc9 	.word	0x08009bc9
 8009b78:	08009bc9 	.word	0x08009bc9
 8009b7c:	08009bb7 	.word	0x08009bb7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	68da      	ldr	r2, [r3, #12]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f042 0202 	orr.w	r2, r2, #2
 8009b8e:	60da      	str	r2, [r3, #12]
      break;
 8009b90:	e01d      	b.n	8009bce <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	68da      	ldr	r2, [r3, #12]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f042 0204 	orr.w	r2, r2, #4
 8009ba0:	60da      	str	r2, [r3, #12]
      break;
 8009ba2:	e014      	b.n	8009bce <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	68da      	ldr	r2, [r3, #12]
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f042 0208 	orr.w	r2, r2, #8
 8009bb2:	60da      	str	r2, [r3, #12]
      break;
 8009bb4:	e00b      	b.n	8009bce <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	68da      	ldr	r2, [r3, #12]
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f042 0210 	orr.w	r2, r2, #16
 8009bc4:	60da      	str	r2, [r3, #12]
      break;
 8009bc6:	e002      	b.n	8009bce <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8009bc8:	2301      	movs	r3, #1
 8009bca:	73fb      	strb	r3, [r7, #15]
      break;
 8009bcc:	bf00      	nop
  }

  if (status == HAL_OK)
 8009bce:	7bfb      	ldrb	r3, [r7, #15]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d144      	bne.n	8009c5e <HAL_TIM_IC_Start_IT+0x262>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	2201      	movs	r2, #1
 8009bda:	6839      	ldr	r1, [r7, #0]
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f001 f969 	bl	800aeb4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4a20      	ldr	r2, [pc, #128]	; (8009c68 <HAL_TIM_IC_Start_IT+0x26c>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d018      	beq.n	8009c1e <HAL_TIM_IC_Start_IT+0x222>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bf4:	d013      	beq.n	8009c1e <HAL_TIM_IC_Start_IT+0x222>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4a1c      	ldr	r2, [pc, #112]	; (8009c6c <HAL_TIM_IC_Start_IT+0x270>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d00e      	beq.n	8009c1e <HAL_TIM_IC_Start_IT+0x222>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4a1a      	ldr	r2, [pc, #104]	; (8009c70 <HAL_TIM_IC_Start_IT+0x274>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d009      	beq.n	8009c1e <HAL_TIM_IC_Start_IT+0x222>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	4a19      	ldr	r2, [pc, #100]	; (8009c74 <HAL_TIM_IC_Start_IT+0x278>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d004      	beq.n	8009c1e <HAL_TIM_IC_Start_IT+0x222>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	4a17      	ldr	r2, [pc, #92]	; (8009c78 <HAL_TIM_IC_Start_IT+0x27c>)
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d115      	bne.n	8009c4a <HAL_TIM_IC_Start_IT+0x24e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	689a      	ldr	r2, [r3, #8]
 8009c24:	4b15      	ldr	r3, [pc, #84]	; (8009c7c <HAL_TIM_IC_Start_IT+0x280>)
 8009c26:	4013      	ands	r3, r2
 8009c28:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	2b06      	cmp	r3, #6
 8009c2e:	d015      	beq.n	8009c5c <HAL_TIM_IC_Start_IT+0x260>
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c36:	d011      	beq.n	8009c5c <HAL_TIM_IC_Start_IT+0x260>
      {
        __HAL_TIM_ENABLE(htim);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	681a      	ldr	r2, [r3, #0]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f042 0201 	orr.w	r2, r2, #1
 8009c46:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c48:	e008      	b.n	8009c5c <HAL_TIM_IC_Start_IT+0x260>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	681a      	ldr	r2, [r3, #0]
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f042 0201 	orr.w	r2, r2, #1
 8009c58:	601a      	str	r2, [r3, #0]
 8009c5a:	e000      	b.n	8009c5e <HAL_TIM_IC_Start_IT+0x262>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c5c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8009c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3710      	adds	r7, #16
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}
 8009c68:	40012c00 	.word	0x40012c00
 8009c6c:	40000400 	.word	0x40000400
 8009c70:	40000800 	.word	0x40000800
 8009c74:	40013400 	.word	0x40013400
 8009c78:	40014000 	.word	0x40014000
 8009c7c:	00010007 	.word	0x00010007

08009c80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b082      	sub	sp, #8
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	691b      	ldr	r3, [r3, #16]
 8009c8e:	f003 0302 	and.w	r3, r3, #2
 8009c92:	2b02      	cmp	r3, #2
 8009c94:	d122      	bne.n	8009cdc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	68db      	ldr	r3, [r3, #12]
 8009c9c:	f003 0302 	and.w	r3, r3, #2
 8009ca0:	2b02      	cmp	r3, #2
 8009ca2:	d11b      	bne.n	8009cdc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f06f 0202 	mvn.w	r2, #2
 8009cac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	699b      	ldr	r3, [r3, #24]
 8009cba:	f003 0303 	and.w	r3, r3, #3
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d003      	beq.n	8009cca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f7f9 f92c 	bl	8002f20 <HAL_TIM_IC_CaptureCallback>
 8009cc8:	e005      	b.n	8009cd6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 fbb6 	bl	800a43c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f000 fbbd 	bl	800a450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	691b      	ldr	r3, [r3, #16]
 8009ce2:	f003 0304 	and.w	r3, r3, #4
 8009ce6:	2b04      	cmp	r3, #4
 8009ce8:	d122      	bne.n	8009d30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	68db      	ldr	r3, [r3, #12]
 8009cf0:	f003 0304 	and.w	r3, r3, #4
 8009cf4:	2b04      	cmp	r3, #4
 8009cf6:	d11b      	bne.n	8009d30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f06f 0204 	mvn.w	r2, #4
 8009d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2202      	movs	r2, #2
 8009d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	699b      	ldr	r3, [r3, #24]
 8009d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d003      	beq.n	8009d1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f7f9 f902 	bl	8002f20 <HAL_TIM_IC_CaptureCallback>
 8009d1c:	e005      	b.n	8009d2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 fb8c 	bl	800a43c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f000 fb93 	bl	800a450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	691b      	ldr	r3, [r3, #16]
 8009d36:	f003 0308 	and.w	r3, r3, #8
 8009d3a:	2b08      	cmp	r3, #8
 8009d3c:	d122      	bne.n	8009d84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	68db      	ldr	r3, [r3, #12]
 8009d44:	f003 0308 	and.w	r3, r3, #8
 8009d48:	2b08      	cmp	r3, #8
 8009d4a:	d11b      	bne.n	8009d84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f06f 0208 	mvn.w	r2, #8
 8009d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2204      	movs	r2, #4
 8009d5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	69db      	ldr	r3, [r3, #28]
 8009d62:	f003 0303 	and.w	r3, r3, #3
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d003      	beq.n	8009d72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f7f9 f8d8 	bl	8002f20 <HAL_TIM_IC_CaptureCallback>
 8009d70:	e005      	b.n	8009d7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f000 fb62 	bl	800a43c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f000 fb69 	bl	800a450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2200      	movs	r2, #0
 8009d82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	691b      	ldr	r3, [r3, #16]
 8009d8a:	f003 0310 	and.w	r3, r3, #16
 8009d8e:	2b10      	cmp	r3, #16
 8009d90:	d122      	bne.n	8009dd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	68db      	ldr	r3, [r3, #12]
 8009d98:	f003 0310 	and.w	r3, r3, #16
 8009d9c:	2b10      	cmp	r3, #16
 8009d9e:	d11b      	bne.n	8009dd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f06f 0210 	mvn.w	r2, #16
 8009da8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2208      	movs	r2, #8
 8009dae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	69db      	ldr	r3, [r3, #28]
 8009db6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d003      	beq.n	8009dc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f7f9 f8ae 	bl	8002f20 <HAL_TIM_IC_CaptureCallback>
 8009dc4:	e005      	b.n	8009dd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f000 fb38 	bl	800a43c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f000 fb3f 	bl	800a450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	691b      	ldr	r3, [r3, #16]
 8009dde:	f003 0301 	and.w	r3, r3, #1
 8009de2:	2b01      	cmp	r3, #1
 8009de4:	d10e      	bne.n	8009e04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	68db      	ldr	r3, [r3, #12]
 8009dec:	f003 0301 	and.w	r3, r3, #1
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	d107      	bne.n	8009e04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f06f 0201 	mvn.w	r2, #1
 8009dfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f7f9 f856 	bl	8002eb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	691b      	ldr	r3, [r3, #16]
 8009e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e0e:	2b80      	cmp	r3, #128	; 0x80
 8009e10:	d10e      	bne.n	8009e30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	68db      	ldr	r3, [r3, #12]
 8009e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e1c:	2b80      	cmp	r3, #128	; 0x80
 8009e1e:	d107      	bne.n	8009e30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f001 fa82 	bl	800b334 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	691b      	ldr	r3, [r3, #16]
 8009e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e3e:	d10e      	bne.n	8009e5e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	68db      	ldr	r3, [r3, #12]
 8009e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e4a:	2b80      	cmp	r3, #128	; 0x80
 8009e4c:	d107      	bne.n	8009e5e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009e56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f001 fa75 	bl	800b348 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	691b      	ldr	r3, [r3, #16]
 8009e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e68:	2b40      	cmp	r3, #64	; 0x40
 8009e6a:	d10e      	bne.n	8009e8a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	68db      	ldr	r3, [r3, #12]
 8009e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e76:	2b40      	cmp	r3, #64	; 0x40
 8009e78:	d107      	bne.n	8009e8a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009e82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f000 faed 	bl	800a464 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	691b      	ldr	r3, [r3, #16]
 8009e90:	f003 0320 	and.w	r3, r3, #32
 8009e94:	2b20      	cmp	r3, #32
 8009e96:	d10e      	bne.n	8009eb6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	68db      	ldr	r3, [r3, #12]
 8009e9e:	f003 0320 	and.w	r3, r3, #32
 8009ea2:	2b20      	cmp	r3, #32
 8009ea4:	d107      	bne.n	8009eb6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f06f 0220 	mvn.w	r2, #32
 8009eae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f001 fa35 	bl	800b320 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009eb6:	bf00      	nop
 8009eb8:	3708      	adds	r7, #8
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}

08009ebe <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009ebe:	b580      	push	{r7, lr}
 8009ec0:	b086      	sub	sp, #24
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	60f8      	str	r0, [r7, #12]
 8009ec6:	60b9      	str	r1, [r7, #8]
 8009ec8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ed4:	2b01      	cmp	r3, #1
 8009ed6:	d101      	bne.n	8009edc <HAL_TIM_IC_ConfigChannel+0x1e>
 8009ed8:	2302      	movs	r3, #2
 8009eda:	e088      	b.n	8009fee <HAL_TIM_IC_ConfigChannel+0x130>
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	2201      	movs	r2, #1
 8009ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d11b      	bne.n	8009f22 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8009efa:	f000 fe23 	bl	800ab44 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	699a      	ldr	r2, [r3, #24]
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f022 020c 	bic.w	r2, r2, #12
 8009f0c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	6999      	ldr	r1, [r3, #24]
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	689a      	ldr	r2, [r3, #8]
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	430a      	orrs	r2, r1
 8009f1e:	619a      	str	r2, [r3, #24]
 8009f20:	e060      	b.n	8009fe4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2b04      	cmp	r3, #4
 8009f26:	d11c      	bne.n	8009f62 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8009f38:	f000 fe9b 	bl	800ac72 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	699a      	ldr	r2, [r3, #24]
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009f4a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	6999      	ldr	r1, [r3, #24]
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	689b      	ldr	r3, [r3, #8]
 8009f56:	021a      	lsls	r2, r3, #8
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	430a      	orrs	r2, r1
 8009f5e:	619a      	str	r2, [r3, #24]
 8009f60:	e040      	b.n	8009fe4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2b08      	cmp	r3, #8
 8009f66:	d11b      	bne.n	8009fa0 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8009f78:	f000 fee8 	bl	800ad4c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	69da      	ldr	r2, [r3, #28]
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f022 020c 	bic.w	r2, r2, #12
 8009f8a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	69d9      	ldr	r1, [r3, #28]
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	689a      	ldr	r2, [r3, #8]
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	430a      	orrs	r2, r1
 8009f9c:	61da      	str	r2, [r3, #28]
 8009f9e:	e021      	b.n	8009fe4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2b0c      	cmp	r3, #12
 8009fa4:	d11c      	bne.n	8009fe0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8009fb6:	f000 ff05 	bl	800adc4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	69da      	ldr	r2, [r3, #28]
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009fc8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	69d9      	ldr	r1, [r3, #28]
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	689b      	ldr	r3, [r3, #8]
 8009fd4:	021a      	lsls	r2, r3, #8
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	430a      	orrs	r2, r1
 8009fdc:	61da      	str	r2, [r3, #28]
 8009fde:	e001      	b.n	8009fe4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009fec:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3718      	adds	r7, #24
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}
	...

08009ff8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b086      	sub	sp, #24
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	60f8      	str	r0, [r7, #12]
 800a000:	60b9      	str	r1, [r7, #8]
 800a002:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a004:	2300      	movs	r3, #0
 800a006:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a00e:	2b01      	cmp	r3, #1
 800a010:	d101      	bne.n	800a016 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a012:	2302      	movs	r3, #2
 800a014:	e0ff      	b.n	800a216 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	2201      	movs	r2, #1
 800a01a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2b14      	cmp	r3, #20
 800a022:	f200 80f0 	bhi.w	800a206 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a026:	a201      	add	r2, pc, #4	; (adr r2, 800a02c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a02c:	0800a081 	.word	0x0800a081
 800a030:	0800a207 	.word	0x0800a207
 800a034:	0800a207 	.word	0x0800a207
 800a038:	0800a207 	.word	0x0800a207
 800a03c:	0800a0c1 	.word	0x0800a0c1
 800a040:	0800a207 	.word	0x0800a207
 800a044:	0800a207 	.word	0x0800a207
 800a048:	0800a207 	.word	0x0800a207
 800a04c:	0800a103 	.word	0x0800a103
 800a050:	0800a207 	.word	0x0800a207
 800a054:	0800a207 	.word	0x0800a207
 800a058:	0800a207 	.word	0x0800a207
 800a05c:	0800a143 	.word	0x0800a143
 800a060:	0800a207 	.word	0x0800a207
 800a064:	0800a207 	.word	0x0800a207
 800a068:	0800a207 	.word	0x0800a207
 800a06c:	0800a185 	.word	0x0800a185
 800a070:	0800a207 	.word	0x0800a207
 800a074:	0800a207 	.word	0x0800a207
 800a078:	0800a207 	.word	0x0800a207
 800a07c:	0800a1c5 	.word	0x0800a1c5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	68b9      	ldr	r1, [r7, #8]
 800a086:	4618      	mov	r0, r3
 800a088:	f000 fa86 	bl	800a598 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	699a      	ldr	r2, [r3, #24]
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f042 0208 	orr.w	r2, r2, #8
 800a09a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	699a      	ldr	r2, [r3, #24]
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f022 0204 	bic.w	r2, r2, #4
 800a0aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	6999      	ldr	r1, [r3, #24]
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	691a      	ldr	r2, [r3, #16]
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	430a      	orrs	r2, r1
 800a0bc:	619a      	str	r2, [r3, #24]
      break;
 800a0be:	e0a5      	b.n	800a20c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	68b9      	ldr	r1, [r7, #8]
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f000 faf6 	bl	800a6b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	699a      	ldr	r2, [r3, #24]
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a0da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	699a      	ldr	r2, [r3, #24]
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a0ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	6999      	ldr	r1, [r3, #24]
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	691b      	ldr	r3, [r3, #16]
 800a0f6:	021a      	lsls	r2, r3, #8
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	430a      	orrs	r2, r1
 800a0fe:	619a      	str	r2, [r3, #24]
      break;
 800a100:	e084      	b.n	800a20c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	68b9      	ldr	r1, [r7, #8]
 800a108:	4618      	mov	r0, r3
 800a10a:	f000 fb5f 	bl	800a7cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	69da      	ldr	r2, [r3, #28]
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f042 0208 	orr.w	r2, r2, #8
 800a11c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	69da      	ldr	r2, [r3, #28]
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f022 0204 	bic.w	r2, r2, #4
 800a12c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	69d9      	ldr	r1, [r3, #28]
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	691a      	ldr	r2, [r3, #16]
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	430a      	orrs	r2, r1
 800a13e:	61da      	str	r2, [r3, #28]
      break;
 800a140:	e064      	b.n	800a20c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	68b9      	ldr	r1, [r7, #8]
 800a148:	4618      	mov	r0, r3
 800a14a:	f000 fbc7 	bl	800a8dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	69da      	ldr	r2, [r3, #28]
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a15c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	69da      	ldr	r2, [r3, #28]
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a16c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	69d9      	ldr	r1, [r3, #28]
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	691b      	ldr	r3, [r3, #16]
 800a178:	021a      	lsls	r2, r3, #8
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	430a      	orrs	r2, r1
 800a180:	61da      	str	r2, [r3, #28]
      break;
 800a182:	e043      	b.n	800a20c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	68b9      	ldr	r1, [r7, #8]
 800a18a:	4618      	mov	r0, r3
 800a18c:	f000 fc10 	bl	800a9b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f042 0208 	orr.w	r2, r2, #8
 800a19e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f022 0204 	bic.w	r2, r2, #4
 800a1ae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	691a      	ldr	r2, [r3, #16]
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	430a      	orrs	r2, r1
 800a1c0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a1c2:	e023      	b.n	800a20c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	68b9      	ldr	r1, [r7, #8]
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f000 fc54 	bl	800aa78 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a1de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a1ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	691b      	ldr	r3, [r3, #16]
 800a1fa:	021a      	lsls	r2, r3, #8
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	430a      	orrs	r2, r1
 800a202:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a204:	e002      	b.n	800a20c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800a206:	2301      	movs	r3, #1
 800a208:	75fb      	strb	r3, [r7, #23]
      break;
 800a20a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	2200      	movs	r2, #0
 800a210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a214:	7dfb      	ldrb	r3, [r7, #23]
}
 800a216:	4618      	mov	r0, r3
 800a218:	3718      	adds	r7, #24
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	bf00      	nop

0800a220 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b084      	sub	sp, #16
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a22a:	2300      	movs	r3, #0
 800a22c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a234:	2b01      	cmp	r3, #1
 800a236:	d101      	bne.n	800a23c <HAL_TIM_ConfigClockSource+0x1c>
 800a238:	2302      	movs	r3, #2
 800a23a:	e0b6      	b.n	800a3aa <HAL_TIM_ConfigClockSource+0x18a>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2201      	movs	r2, #1
 800a240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2202      	movs	r2, #2
 800a248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	689b      	ldr	r3, [r3, #8]
 800a252:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a25a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a25e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a266:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	68ba      	ldr	r2, [r7, #8]
 800a26e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a278:	d03e      	beq.n	800a2f8 <HAL_TIM_ConfigClockSource+0xd8>
 800a27a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a27e:	f200 8087 	bhi.w	800a390 <HAL_TIM_ConfigClockSource+0x170>
 800a282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a286:	f000 8086 	beq.w	800a396 <HAL_TIM_ConfigClockSource+0x176>
 800a28a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a28e:	d87f      	bhi.n	800a390 <HAL_TIM_ConfigClockSource+0x170>
 800a290:	2b70      	cmp	r3, #112	; 0x70
 800a292:	d01a      	beq.n	800a2ca <HAL_TIM_ConfigClockSource+0xaa>
 800a294:	2b70      	cmp	r3, #112	; 0x70
 800a296:	d87b      	bhi.n	800a390 <HAL_TIM_ConfigClockSource+0x170>
 800a298:	2b60      	cmp	r3, #96	; 0x60
 800a29a:	d050      	beq.n	800a33e <HAL_TIM_ConfigClockSource+0x11e>
 800a29c:	2b60      	cmp	r3, #96	; 0x60
 800a29e:	d877      	bhi.n	800a390 <HAL_TIM_ConfigClockSource+0x170>
 800a2a0:	2b50      	cmp	r3, #80	; 0x50
 800a2a2:	d03c      	beq.n	800a31e <HAL_TIM_ConfigClockSource+0xfe>
 800a2a4:	2b50      	cmp	r3, #80	; 0x50
 800a2a6:	d873      	bhi.n	800a390 <HAL_TIM_ConfigClockSource+0x170>
 800a2a8:	2b40      	cmp	r3, #64	; 0x40
 800a2aa:	d058      	beq.n	800a35e <HAL_TIM_ConfigClockSource+0x13e>
 800a2ac:	2b40      	cmp	r3, #64	; 0x40
 800a2ae:	d86f      	bhi.n	800a390 <HAL_TIM_ConfigClockSource+0x170>
 800a2b0:	2b30      	cmp	r3, #48	; 0x30
 800a2b2:	d064      	beq.n	800a37e <HAL_TIM_ConfigClockSource+0x15e>
 800a2b4:	2b30      	cmp	r3, #48	; 0x30
 800a2b6:	d86b      	bhi.n	800a390 <HAL_TIM_ConfigClockSource+0x170>
 800a2b8:	2b20      	cmp	r3, #32
 800a2ba:	d060      	beq.n	800a37e <HAL_TIM_ConfigClockSource+0x15e>
 800a2bc:	2b20      	cmp	r3, #32
 800a2be:	d867      	bhi.n	800a390 <HAL_TIM_ConfigClockSource+0x170>
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d05c      	beq.n	800a37e <HAL_TIM_ConfigClockSource+0x15e>
 800a2c4:	2b10      	cmp	r3, #16
 800a2c6:	d05a      	beq.n	800a37e <HAL_TIM_ConfigClockSource+0x15e>
 800a2c8:	e062      	b.n	800a390 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a2da:	f000 fdcb 	bl	800ae74 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	689b      	ldr	r3, [r3, #8]
 800a2e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a2ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	68ba      	ldr	r2, [r7, #8]
 800a2f4:	609a      	str	r2, [r3, #8]
      break;
 800a2f6:	e04f      	b.n	800a398 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a308:	f000 fdb4 	bl	800ae74 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	689a      	ldr	r2, [r3, #8]
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a31a:	609a      	str	r2, [r3, #8]
      break;
 800a31c:	e03c      	b.n	800a398 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a32a:	461a      	mov	r2, r3
 800a32c:	f000 fc72 	bl	800ac14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	2150      	movs	r1, #80	; 0x50
 800a336:	4618      	mov	r0, r3
 800a338:	f000 fd81 	bl	800ae3e <TIM_ITRx_SetConfig>
      break;
 800a33c:	e02c      	b.n	800a398 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a34a:	461a      	mov	r2, r3
 800a34c:	f000 fcce 	bl	800acec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	2160      	movs	r1, #96	; 0x60
 800a356:	4618      	mov	r0, r3
 800a358:	f000 fd71 	bl	800ae3e <TIM_ITRx_SetConfig>
      break;
 800a35c:	e01c      	b.n	800a398 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a36a:	461a      	mov	r2, r3
 800a36c:	f000 fc52 	bl	800ac14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	2140      	movs	r1, #64	; 0x40
 800a376:	4618      	mov	r0, r3
 800a378:	f000 fd61 	bl	800ae3e <TIM_ITRx_SetConfig>
      break;
 800a37c:	e00c      	b.n	800a398 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681a      	ldr	r2, [r3, #0]
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	4619      	mov	r1, r3
 800a388:	4610      	mov	r0, r2
 800a38a:	f000 fd58 	bl	800ae3e <TIM_ITRx_SetConfig>
      break;
 800a38e:	e003      	b.n	800a398 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800a390:	2301      	movs	r3, #1
 800a392:	73fb      	strb	r3, [r7, #15]
      break;
 800a394:	e000      	b.n	800a398 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800a396:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2201      	movs	r2, #1
 800a39c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a3a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3710      	adds	r7, #16
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}
	...

0800a3b4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b085      	sub	sp, #20
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	2b0c      	cmp	r3, #12
 800a3c6:	d831      	bhi.n	800a42c <HAL_TIM_ReadCapturedValue+0x78>
 800a3c8:	a201      	add	r2, pc, #4	; (adr r2, 800a3d0 <HAL_TIM_ReadCapturedValue+0x1c>)
 800a3ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3ce:	bf00      	nop
 800a3d0:	0800a405 	.word	0x0800a405
 800a3d4:	0800a42d 	.word	0x0800a42d
 800a3d8:	0800a42d 	.word	0x0800a42d
 800a3dc:	0800a42d 	.word	0x0800a42d
 800a3e0:	0800a40f 	.word	0x0800a40f
 800a3e4:	0800a42d 	.word	0x0800a42d
 800a3e8:	0800a42d 	.word	0x0800a42d
 800a3ec:	0800a42d 	.word	0x0800a42d
 800a3f0:	0800a419 	.word	0x0800a419
 800a3f4:	0800a42d 	.word	0x0800a42d
 800a3f8:	0800a42d 	.word	0x0800a42d
 800a3fc:	0800a42d 	.word	0x0800a42d
 800a400:	0800a423 	.word	0x0800a423
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a40a:	60fb      	str	r3, [r7, #12]

      break;
 800a40c:	e00f      	b.n	800a42e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a414:	60fb      	str	r3, [r7, #12]

      break;
 800a416:	e00a      	b.n	800a42e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a41e:	60fb      	str	r3, [r7, #12]

      break;
 800a420:	e005      	b.n	800a42e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a428:	60fb      	str	r3, [r7, #12]

      break;
 800a42a:	e000      	b.n	800a42e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800a42c:	bf00      	nop
  }

  return tmpreg;
 800a42e:	68fb      	ldr	r3, [r7, #12]
}
 800a430:	4618      	mov	r0, r3
 800a432:	3714      	adds	r7, #20
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr

0800a43c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b083      	sub	sp, #12
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a444:	bf00      	nop
 800a446:	370c      	adds	r7, #12
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr

0800a450 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a450:	b480      	push	{r7}
 800a452:	b083      	sub	sp, #12
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a458:	bf00      	nop
 800a45a:	370c      	adds	r7, #12
 800a45c:	46bd      	mov	sp, r7
 800a45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a462:	4770      	bx	lr

0800a464 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a464:	b480      	push	{r7}
 800a466:	b083      	sub	sp, #12
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a46c:	bf00      	nop
 800a46e:	370c      	adds	r7, #12
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr

0800a478 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a478:	b480      	push	{r7}
 800a47a:	b085      	sub	sp, #20
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	4a3c      	ldr	r2, [pc, #240]	; (800a57c <TIM_Base_SetConfig+0x104>)
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d00f      	beq.n	800a4b0 <TIM_Base_SetConfig+0x38>
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a496:	d00b      	beq.n	800a4b0 <TIM_Base_SetConfig+0x38>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	4a39      	ldr	r2, [pc, #228]	; (800a580 <TIM_Base_SetConfig+0x108>)
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d007      	beq.n	800a4b0 <TIM_Base_SetConfig+0x38>
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	4a38      	ldr	r2, [pc, #224]	; (800a584 <TIM_Base_SetConfig+0x10c>)
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	d003      	beq.n	800a4b0 <TIM_Base_SetConfig+0x38>
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	4a37      	ldr	r2, [pc, #220]	; (800a588 <TIM_Base_SetConfig+0x110>)
 800a4ac:	4293      	cmp	r3, r2
 800a4ae:	d108      	bne.n	800a4c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	685b      	ldr	r3, [r3, #4]
 800a4bc:	68fa      	ldr	r2, [r7, #12]
 800a4be:	4313      	orrs	r3, r2
 800a4c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	4a2d      	ldr	r2, [pc, #180]	; (800a57c <TIM_Base_SetConfig+0x104>)
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	d01b      	beq.n	800a502 <TIM_Base_SetConfig+0x8a>
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4d0:	d017      	beq.n	800a502 <TIM_Base_SetConfig+0x8a>
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	4a2a      	ldr	r2, [pc, #168]	; (800a580 <TIM_Base_SetConfig+0x108>)
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d013      	beq.n	800a502 <TIM_Base_SetConfig+0x8a>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	4a29      	ldr	r2, [pc, #164]	; (800a584 <TIM_Base_SetConfig+0x10c>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d00f      	beq.n	800a502 <TIM_Base_SetConfig+0x8a>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	4a28      	ldr	r2, [pc, #160]	; (800a588 <TIM_Base_SetConfig+0x110>)
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d00b      	beq.n	800a502 <TIM_Base_SetConfig+0x8a>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	4a27      	ldr	r2, [pc, #156]	; (800a58c <TIM_Base_SetConfig+0x114>)
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d007      	beq.n	800a502 <TIM_Base_SetConfig+0x8a>
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	4a26      	ldr	r2, [pc, #152]	; (800a590 <TIM_Base_SetConfig+0x118>)
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d003      	beq.n	800a502 <TIM_Base_SetConfig+0x8a>
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	4a25      	ldr	r2, [pc, #148]	; (800a594 <TIM_Base_SetConfig+0x11c>)
 800a4fe:	4293      	cmp	r3, r2
 800a500:	d108      	bne.n	800a514 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a508:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	68db      	ldr	r3, [r3, #12]
 800a50e:	68fa      	ldr	r2, [r7, #12]
 800a510:	4313      	orrs	r3, r2
 800a512:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	695b      	ldr	r3, [r3, #20]
 800a51e:	4313      	orrs	r3, r2
 800a520:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	68fa      	ldr	r2, [r7, #12]
 800a526:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	689a      	ldr	r2, [r3, #8]
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	681a      	ldr	r2, [r3, #0]
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	4a10      	ldr	r2, [pc, #64]	; (800a57c <TIM_Base_SetConfig+0x104>)
 800a53c:	4293      	cmp	r3, r2
 800a53e:	d00f      	beq.n	800a560 <TIM_Base_SetConfig+0xe8>
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	4a11      	ldr	r2, [pc, #68]	; (800a588 <TIM_Base_SetConfig+0x110>)
 800a544:	4293      	cmp	r3, r2
 800a546:	d00b      	beq.n	800a560 <TIM_Base_SetConfig+0xe8>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	4a10      	ldr	r2, [pc, #64]	; (800a58c <TIM_Base_SetConfig+0x114>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d007      	beq.n	800a560 <TIM_Base_SetConfig+0xe8>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	4a0f      	ldr	r2, [pc, #60]	; (800a590 <TIM_Base_SetConfig+0x118>)
 800a554:	4293      	cmp	r3, r2
 800a556:	d003      	beq.n	800a560 <TIM_Base_SetConfig+0xe8>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	4a0e      	ldr	r2, [pc, #56]	; (800a594 <TIM_Base_SetConfig+0x11c>)
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d103      	bne.n	800a568 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	691a      	ldr	r2, [r3, #16]
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2201      	movs	r2, #1
 800a56c:	615a      	str	r2, [r3, #20]
}
 800a56e:	bf00      	nop
 800a570:	3714      	adds	r7, #20
 800a572:	46bd      	mov	sp, r7
 800a574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a578:	4770      	bx	lr
 800a57a:	bf00      	nop
 800a57c:	40012c00 	.word	0x40012c00
 800a580:	40000400 	.word	0x40000400
 800a584:	40000800 	.word	0x40000800
 800a588:	40013400 	.word	0x40013400
 800a58c:	40014000 	.word	0x40014000
 800a590:	40014400 	.word	0x40014400
 800a594:	40014800 	.word	0x40014800

0800a598 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a598:	b480      	push	{r7}
 800a59a:	b087      	sub	sp, #28
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
 800a5a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6a1b      	ldr	r3, [r3, #32]
 800a5a6:	f023 0201 	bic.w	r2, r3, #1
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6a1b      	ldr	r3, [r3, #32]
 800a5b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	685b      	ldr	r3, [r3, #4]
 800a5b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	699b      	ldr	r3, [r3, #24]
 800a5be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a5c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	f023 0303 	bic.w	r3, r3, #3
 800a5d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	68fa      	ldr	r2, [r7, #12]
 800a5da:	4313      	orrs	r3, r2
 800a5dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a5de:	697b      	ldr	r3, [r7, #20]
 800a5e0:	f023 0302 	bic.w	r3, r3, #2
 800a5e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	689b      	ldr	r3, [r3, #8]
 800a5ea:	697a      	ldr	r2, [r7, #20]
 800a5ec:	4313      	orrs	r3, r2
 800a5ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	4a2c      	ldr	r2, [pc, #176]	; (800a6a4 <TIM_OC1_SetConfig+0x10c>)
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d00f      	beq.n	800a618 <TIM_OC1_SetConfig+0x80>
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	4a2b      	ldr	r2, [pc, #172]	; (800a6a8 <TIM_OC1_SetConfig+0x110>)
 800a5fc:	4293      	cmp	r3, r2
 800a5fe:	d00b      	beq.n	800a618 <TIM_OC1_SetConfig+0x80>
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	4a2a      	ldr	r2, [pc, #168]	; (800a6ac <TIM_OC1_SetConfig+0x114>)
 800a604:	4293      	cmp	r3, r2
 800a606:	d007      	beq.n	800a618 <TIM_OC1_SetConfig+0x80>
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	4a29      	ldr	r2, [pc, #164]	; (800a6b0 <TIM_OC1_SetConfig+0x118>)
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d003      	beq.n	800a618 <TIM_OC1_SetConfig+0x80>
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	4a28      	ldr	r2, [pc, #160]	; (800a6b4 <TIM_OC1_SetConfig+0x11c>)
 800a614:	4293      	cmp	r3, r2
 800a616:	d10c      	bne.n	800a632 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	f023 0308 	bic.w	r3, r3, #8
 800a61e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	68db      	ldr	r3, [r3, #12]
 800a624:	697a      	ldr	r2, [r7, #20]
 800a626:	4313      	orrs	r3, r2
 800a628:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	f023 0304 	bic.w	r3, r3, #4
 800a630:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	4a1b      	ldr	r2, [pc, #108]	; (800a6a4 <TIM_OC1_SetConfig+0x10c>)
 800a636:	4293      	cmp	r3, r2
 800a638:	d00f      	beq.n	800a65a <TIM_OC1_SetConfig+0xc2>
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	4a1a      	ldr	r2, [pc, #104]	; (800a6a8 <TIM_OC1_SetConfig+0x110>)
 800a63e:	4293      	cmp	r3, r2
 800a640:	d00b      	beq.n	800a65a <TIM_OC1_SetConfig+0xc2>
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	4a19      	ldr	r2, [pc, #100]	; (800a6ac <TIM_OC1_SetConfig+0x114>)
 800a646:	4293      	cmp	r3, r2
 800a648:	d007      	beq.n	800a65a <TIM_OC1_SetConfig+0xc2>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	4a18      	ldr	r2, [pc, #96]	; (800a6b0 <TIM_OC1_SetConfig+0x118>)
 800a64e:	4293      	cmp	r3, r2
 800a650:	d003      	beq.n	800a65a <TIM_OC1_SetConfig+0xc2>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	4a17      	ldr	r2, [pc, #92]	; (800a6b4 <TIM_OC1_SetConfig+0x11c>)
 800a656:	4293      	cmp	r3, r2
 800a658:	d111      	bne.n	800a67e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a660:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a668:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	695b      	ldr	r3, [r3, #20]
 800a66e:	693a      	ldr	r2, [r7, #16]
 800a670:	4313      	orrs	r3, r2
 800a672:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	699b      	ldr	r3, [r3, #24]
 800a678:	693a      	ldr	r2, [r7, #16]
 800a67a:	4313      	orrs	r3, r2
 800a67c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	693a      	ldr	r2, [r7, #16]
 800a682:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	68fa      	ldr	r2, [r7, #12]
 800a688:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	685a      	ldr	r2, [r3, #4]
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	697a      	ldr	r2, [r7, #20]
 800a696:	621a      	str	r2, [r3, #32]
}
 800a698:	bf00      	nop
 800a69a:	371c      	adds	r7, #28
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	4770      	bx	lr
 800a6a4:	40012c00 	.word	0x40012c00
 800a6a8:	40013400 	.word	0x40013400
 800a6ac:	40014000 	.word	0x40014000
 800a6b0:	40014400 	.word	0x40014400
 800a6b4:	40014800 	.word	0x40014800

0800a6b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b087      	sub	sp, #28
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
 800a6c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6a1b      	ldr	r3, [r3, #32]
 800a6c6:	f023 0210 	bic.w	r2, r3, #16
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6a1b      	ldr	r3, [r3, #32]
 800a6d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	685b      	ldr	r3, [r3, #4]
 800a6d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	699b      	ldr	r3, [r3, #24]
 800a6de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a6e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a6ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a6f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	021b      	lsls	r3, r3, #8
 800a6fa:	68fa      	ldr	r2, [r7, #12]
 800a6fc:	4313      	orrs	r3, r2
 800a6fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	f023 0320 	bic.w	r3, r3, #32
 800a706:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	689b      	ldr	r3, [r3, #8]
 800a70c:	011b      	lsls	r3, r3, #4
 800a70e:	697a      	ldr	r2, [r7, #20]
 800a710:	4313      	orrs	r3, r2
 800a712:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	4a28      	ldr	r2, [pc, #160]	; (800a7b8 <TIM_OC2_SetConfig+0x100>)
 800a718:	4293      	cmp	r3, r2
 800a71a:	d003      	beq.n	800a724 <TIM_OC2_SetConfig+0x6c>
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	4a27      	ldr	r2, [pc, #156]	; (800a7bc <TIM_OC2_SetConfig+0x104>)
 800a720:	4293      	cmp	r3, r2
 800a722:	d10d      	bne.n	800a740 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a72a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	68db      	ldr	r3, [r3, #12]
 800a730:	011b      	lsls	r3, r3, #4
 800a732:	697a      	ldr	r2, [r7, #20]
 800a734:	4313      	orrs	r3, r2
 800a736:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a73e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	4a1d      	ldr	r2, [pc, #116]	; (800a7b8 <TIM_OC2_SetConfig+0x100>)
 800a744:	4293      	cmp	r3, r2
 800a746:	d00f      	beq.n	800a768 <TIM_OC2_SetConfig+0xb0>
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	4a1c      	ldr	r2, [pc, #112]	; (800a7bc <TIM_OC2_SetConfig+0x104>)
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d00b      	beq.n	800a768 <TIM_OC2_SetConfig+0xb0>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	4a1b      	ldr	r2, [pc, #108]	; (800a7c0 <TIM_OC2_SetConfig+0x108>)
 800a754:	4293      	cmp	r3, r2
 800a756:	d007      	beq.n	800a768 <TIM_OC2_SetConfig+0xb0>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	4a1a      	ldr	r2, [pc, #104]	; (800a7c4 <TIM_OC2_SetConfig+0x10c>)
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d003      	beq.n	800a768 <TIM_OC2_SetConfig+0xb0>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	4a19      	ldr	r2, [pc, #100]	; (800a7c8 <TIM_OC2_SetConfig+0x110>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d113      	bne.n	800a790 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a76e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a776:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	695b      	ldr	r3, [r3, #20]
 800a77c:	009b      	lsls	r3, r3, #2
 800a77e:	693a      	ldr	r2, [r7, #16]
 800a780:	4313      	orrs	r3, r2
 800a782:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	699b      	ldr	r3, [r3, #24]
 800a788:	009b      	lsls	r3, r3, #2
 800a78a:	693a      	ldr	r2, [r7, #16]
 800a78c:	4313      	orrs	r3, r2
 800a78e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	693a      	ldr	r2, [r7, #16]
 800a794:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	68fa      	ldr	r2, [r7, #12]
 800a79a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	685a      	ldr	r2, [r3, #4]
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	697a      	ldr	r2, [r7, #20]
 800a7a8:	621a      	str	r2, [r3, #32]
}
 800a7aa:	bf00      	nop
 800a7ac:	371c      	adds	r7, #28
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b4:	4770      	bx	lr
 800a7b6:	bf00      	nop
 800a7b8:	40012c00 	.word	0x40012c00
 800a7bc:	40013400 	.word	0x40013400
 800a7c0:	40014000 	.word	0x40014000
 800a7c4:	40014400 	.word	0x40014400
 800a7c8:	40014800 	.word	0x40014800

0800a7cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b087      	sub	sp, #28
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
 800a7d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6a1b      	ldr	r3, [r3, #32]
 800a7da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6a1b      	ldr	r3, [r3, #32]
 800a7e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	685b      	ldr	r3, [r3, #4]
 800a7ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	69db      	ldr	r3, [r3, #28]
 800a7f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a7fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	f023 0303 	bic.w	r3, r3, #3
 800a806:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	68fa      	ldr	r2, [r7, #12]
 800a80e:	4313      	orrs	r3, r2
 800a810:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a818:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	689b      	ldr	r3, [r3, #8]
 800a81e:	021b      	lsls	r3, r3, #8
 800a820:	697a      	ldr	r2, [r7, #20]
 800a822:	4313      	orrs	r3, r2
 800a824:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	4a27      	ldr	r2, [pc, #156]	; (800a8c8 <TIM_OC3_SetConfig+0xfc>)
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d003      	beq.n	800a836 <TIM_OC3_SetConfig+0x6a>
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	4a26      	ldr	r2, [pc, #152]	; (800a8cc <TIM_OC3_SetConfig+0x100>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d10d      	bne.n	800a852 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a83c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	68db      	ldr	r3, [r3, #12]
 800a842:	021b      	lsls	r3, r3, #8
 800a844:	697a      	ldr	r2, [r7, #20]
 800a846:	4313      	orrs	r3, r2
 800a848:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a850:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	4a1c      	ldr	r2, [pc, #112]	; (800a8c8 <TIM_OC3_SetConfig+0xfc>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d00f      	beq.n	800a87a <TIM_OC3_SetConfig+0xae>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	4a1b      	ldr	r2, [pc, #108]	; (800a8cc <TIM_OC3_SetConfig+0x100>)
 800a85e:	4293      	cmp	r3, r2
 800a860:	d00b      	beq.n	800a87a <TIM_OC3_SetConfig+0xae>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	4a1a      	ldr	r2, [pc, #104]	; (800a8d0 <TIM_OC3_SetConfig+0x104>)
 800a866:	4293      	cmp	r3, r2
 800a868:	d007      	beq.n	800a87a <TIM_OC3_SetConfig+0xae>
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	4a19      	ldr	r2, [pc, #100]	; (800a8d4 <TIM_OC3_SetConfig+0x108>)
 800a86e:	4293      	cmp	r3, r2
 800a870:	d003      	beq.n	800a87a <TIM_OC3_SetConfig+0xae>
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	4a18      	ldr	r2, [pc, #96]	; (800a8d8 <TIM_OC3_SetConfig+0x10c>)
 800a876:	4293      	cmp	r3, r2
 800a878:	d113      	bne.n	800a8a2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a87a:	693b      	ldr	r3, [r7, #16]
 800a87c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a880:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a888:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	695b      	ldr	r3, [r3, #20]
 800a88e:	011b      	lsls	r3, r3, #4
 800a890:	693a      	ldr	r2, [r7, #16]
 800a892:	4313      	orrs	r3, r2
 800a894:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	699b      	ldr	r3, [r3, #24]
 800a89a:	011b      	lsls	r3, r3, #4
 800a89c:	693a      	ldr	r2, [r7, #16]
 800a89e:	4313      	orrs	r3, r2
 800a8a0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	693a      	ldr	r2, [r7, #16]
 800a8a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	68fa      	ldr	r2, [r7, #12]
 800a8ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	685a      	ldr	r2, [r3, #4]
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	697a      	ldr	r2, [r7, #20]
 800a8ba:	621a      	str	r2, [r3, #32]
}
 800a8bc:	bf00      	nop
 800a8be:	371c      	adds	r7, #28
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c6:	4770      	bx	lr
 800a8c8:	40012c00 	.word	0x40012c00
 800a8cc:	40013400 	.word	0x40013400
 800a8d0:	40014000 	.word	0x40014000
 800a8d4:	40014400 	.word	0x40014400
 800a8d8:	40014800 	.word	0x40014800

0800a8dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b087      	sub	sp, #28
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6a1b      	ldr	r3, [r3, #32]
 800a8ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6a1b      	ldr	r3, [r3, #32]
 800a8f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	685b      	ldr	r3, [r3, #4]
 800a8fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	69db      	ldr	r3, [r3, #28]
 800a902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a90a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a90e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a916:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	021b      	lsls	r3, r3, #8
 800a91e:	68fa      	ldr	r2, [r7, #12]
 800a920:	4313      	orrs	r3, r2
 800a922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a924:	693b      	ldr	r3, [r7, #16]
 800a926:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a92a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	689b      	ldr	r3, [r3, #8]
 800a930:	031b      	lsls	r3, r3, #12
 800a932:	693a      	ldr	r2, [r7, #16]
 800a934:	4313      	orrs	r3, r2
 800a936:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	4a18      	ldr	r2, [pc, #96]	; (800a99c <TIM_OC4_SetConfig+0xc0>)
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d00f      	beq.n	800a960 <TIM_OC4_SetConfig+0x84>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	4a17      	ldr	r2, [pc, #92]	; (800a9a0 <TIM_OC4_SetConfig+0xc4>)
 800a944:	4293      	cmp	r3, r2
 800a946:	d00b      	beq.n	800a960 <TIM_OC4_SetConfig+0x84>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	4a16      	ldr	r2, [pc, #88]	; (800a9a4 <TIM_OC4_SetConfig+0xc8>)
 800a94c:	4293      	cmp	r3, r2
 800a94e:	d007      	beq.n	800a960 <TIM_OC4_SetConfig+0x84>
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	4a15      	ldr	r2, [pc, #84]	; (800a9a8 <TIM_OC4_SetConfig+0xcc>)
 800a954:	4293      	cmp	r3, r2
 800a956:	d003      	beq.n	800a960 <TIM_OC4_SetConfig+0x84>
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	4a14      	ldr	r2, [pc, #80]	; (800a9ac <TIM_OC4_SetConfig+0xd0>)
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d109      	bne.n	800a974 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a960:	697b      	ldr	r3, [r7, #20]
 800a962:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a966:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	695b      	ldr	r3, [r3, #20]
 800a96c:	019b      	lsls	r3, r3, #6
 800a96e:	697a      	ldr	r2, [r7, #20]
 800a970:	4313      	orrs	r3, r2
 800a972:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	697a      	ldr	r2, [r7, #20]
 800a978:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	68fa      	ldr	r2, [r7, #12]
 800a97e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	685a      	ldr	r2, [r3, #4]
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	693a      	ldr	r2, [r7, #16]
 800a98c:	621a      	str	r2, [r3, #32]
}
 800a98e:	bf00      	nop
 800a990:	371c      	adds	r7, #28
 800a992:	46bd      	mov	sp, r7
 800a994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a998:	4770      	bx	lr
 800a99a:	bf00      	nop
 800a99c:	40012c00 	.word	0x40012c00
 800a9a0:	40013400 	.word	0x40013400
 800a9a4:	40014000 	.word	0x40014000
 800a9a8:	40014400 	.word	0x40014400
 800a9ac:	40014800 	.word	0x40014800

0800a9b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b087      	sub	sp, #28
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
 800a9b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6a1b      	ldr	r3, [r3, #32]
 800a9be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6a1b      	ldr	r3, [r3, #32]
 800a9ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	685b      	ldr	r3, [r3, #4]
 800a9d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a9de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	68fa      	ldr	r2, [r7, #12]
 800a9ea:	4313      	orrs	r3, r2
 800a9ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a9f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	689b      	ldr	r3, [r3, #8]
 800a9fa:	041b      	lsls	r3, r3, #16
 800a9fc:	693a      	ldr	r2, [r7, #16]
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	4a17      	ldr	r2, [pc, #92]	; (800aa64 <TIM_OC5_SetConfig+0xb4>)
 800aa06:	4293      	cmp	r3, r2
 800aa08:	d00f      	beq.n	800aa2a <TIM_OC5_SetConfig+0x7a>
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	4a16      	ldr	r2, [pc, #88]	; (800aa68 <TIM_OC5_SetConfig+0xb8>)
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	d00b      	beq.n	800aa2a <TIM_OC5_SetConfig+0x7a>
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	4a15      	ldr	r2, [pc, #84]	; (800aa6c <TIM_OC5_SetConfig+0xbc>)
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d007      	beq.n	800aa2a <TIM_OC5_SetConfig+0x7a>
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	4a14      	ldr	r2, [pc, #80]	; (800aa70 <TIM_OC5_SetConfig+0xc0>)
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	d003      	beq.n	800aa2a <TIM_OC5_SetConfig+0x7a>
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	4a13      	ldr	r2, [pc, #76]	; (800aa74 <TIM_OC5_SetConfig+0xc4>)
 800aa26:	4293      	cmp	r3, r2
 800aa28:	d109      	bne.n	800aa3e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800aa2a:	697b      	ldr	r3, [r7, #20]
 800aa2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa30:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	695b      	ldr	r3, [r3, #20]
 800aa36:	021b      	lsls	r3, r3, #8
 800aa38:	697a      	ldr	r2, [r7, #20]
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	697a      	ldr	r2, [r7, #20]
 800aa42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	68fa      	ldr	r2, [r7, #12]
 800aa48:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	685a      	ldr	r2, [r3, #4]
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	693a      	ldr	r2, [r7, #16]
 800aa56:	621a      	str	r2, [r3, #32]
}
 800aa58:	bf00      	nop
 800aa5a:	371c      	adds	r7, #28
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa62:	4770      	bx	lr
 800aa64:	40012c00 	.word	0x40012c00
 800aa68:	40013400 	.word	0x40013400
 800aa6c:	40014000 	.word	0x40014000
 800aa70:	40014400 	.word	0x40014400
 800aa74:	40014800 	.word	0x40014800

0800aa78 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b087      	sub	sp, #28
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	6a1b      	ldr	r3, [r3, #32]
 800aa86:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6a1b      	ldr	r3, [r3, #32]
 800aa92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	685b      	ldr	r3, [r3, #4]
 800aa98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aaa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aaaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	021b      	lsls	r3, r3, #8
 800aab2:	68fa      	ldr	r2, [r7, #12]
 800aab4:	4313      	orrs	r3, r2
 800aab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800aab8:	693b      	ldr	r3, [r7, #16]
 800aaba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aabe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	689b      	ldr	r3, [r3, #8]
 800aac4:	051b      	lsls	r3, r3, #20
 800aac6:	693a      	ldr	r2, [r7, #16]
 800aac8:	4313      	orrs	r3, r2
 800aaca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	4a18      	ldr	r2, [pc, #96]	; (800ab30 <TIM_OC6_SetConfig+0xb8>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d00f      	beq.n	800aaf4 <TIM_OC6_SetConfig+0x7c>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	4a17      	ldr	r2, [pc, #92]	; (800ab34 <TIM_OC6_SetConfig+0xbc>)
 800aad8:	4293      	cmp	r3, r2
 800aada:	d00b      	beq.n	800aaf4 <TIM_OC6_SetConfig+0x7c>
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	4a16      	ldr	r2, [pc, #88]	; (800ab38 <TIM_OC6_SetConfig+0xc0>)
 800aae0:	4293      	cmp	r3, r2
 800aae2:	d007      	beq.n	800aaf4 <TIM_OC6_SetConfig+0x7c>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	4a15      	ldr	r2, [pc, #84]	; (800ab3c <TIM_OC6_SetConfig+0xc4>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d003      	beq.n	800aaf4 <TIM_OC6_SetConfig+0x7c>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	4a14      	ldr	r2, [pc, #80]	; (800ab40 <TIM_OC6_SetConfig+0xc8>)
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d109      	bne.n	800ab08 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aafa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	695b      	ldr	r3, [r3, #20]
 800ab00:	029b      	lsls	r3, r3, #10
 800ab02:	697a      	ldr	r2, [r7, #20]
 800ab04:	4313      	orrs	r3, r2
 800ab06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	697a      	ldr	r2, [r7, #20]
 800ab0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	68fa      	ldr	r2, [r7, #12]
 800ab12:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	685a      	ldr	r2, [r3, #4]
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	693a      	ldr	r2, [r7, #16]
 800ab20:	621a      	str	r2, [r3, #32]
}
 800ab22:	bf00      	nop
 800ab24:	371c      	adds	r7, #28
 800ab26:	46bd      	mov	sp, r7
 800ab28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2c:	4770      	bx	lr
 800ab2e:	bf00      	nop
 800ab30:	40012c00 	.word	0x40012c00
 800ab34:	40013400 	.word	0x40013400
 800ab38:	40014000 	.word	0x40014000
 800ab3c:	40014400 	.word	0x40014400
 800ab40:	40014800 	.word	0x40014800

0800ab44 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b087      	sub	sp, #28
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	60f8      	str	r0, [r7, #12]
 800ab4c:	60b9      	str	r1, [r7, #8]
 800ab4e:	607a      	str	r2, [r7, #4]
 800ab50:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	6a1b      	ldr	r3, [r3, #32]
 800ab56:	f023 0201 	bic.w	r2, r3, #1
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	699b      	ldr	r3, [r3, #24]
 800ab62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	6a1b      	ldr	r3, [r3, #32]
 800ab68:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	4a24      	ldr	r2, [pc, #144]	; (800ac00 <TIM_TI1_SetConfig+0xbc>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d013      	beq.n	800ab9a <TIM_TI1_SetConfig+0x56>
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab78:	d00f      	beq.n	800ab9a <TIM_TI1_SetConfig+0x56>
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	4a21      	ldr	r2, [pc, #132]	; (800ac04 <TIM_TI1_SetConfig+0xc0>)
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	d00b      	beq.n	800ab9a <TIM_TI1_SetConfig+0x56>
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	4a20      	ldr	r2, [pc, #128]	; (800ac08 <TIM_TI1_SetConfig+0xc4>)
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d007      	beq.n	800ab9a <TIM_TI1_SetConfig+0x56>
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	4a1f      	ldr	r2, [pc, #124]	; (800ac0c <TIM_TI1_SetConfig+0xc8>)
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	d003      	beq.n	800ab9a <TIM_TI1_SetConfig+0x56>
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	4a1e      	ldr	r2, [pc, #120]	; (800ac10 <TIM_TI1_SetConfig+0xcc>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d101      	bne.n	800ab9e <TIM_TI1_SetConfig+0x5a>
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	e000      	b.n	800aba0 <TIM_TI1_SetConfig+0x5c>
 800ab9e:	2300      	movs	r3, #0
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d008      	beq.n	800abb6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	f023 0303 	bic.w	r3, r3, #3
 800abaa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800abac:	697a      	ldr	r2, [r7, #20]
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	4313      	orrs	r3, r2
 800abb2:	617b      	str	r3, [r7, #20]
 800abb4:	e003      	b.n	800abbe <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800abb6:	697b      	ldr	r3, [r7, #20]
 800abb8:	f043 0301 	orr.w	r3, r3, #1
 800abbc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800abc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	011b      	lsls	r3, r3, #4
 800abca:	b2db      	uxtb	r3, r3
 800abcc:	697a      	ldr	r2, [r7, #20]
 800abce:	4313      	orrs	r3, r2
 800abd0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	f023 030a 	bic.w	r3, r3, #10
 800abd8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	f003 030a 	and.w	r3, r3, #10
 800abe0:	693a      	ldr	r2, [r7, #16]
 800abe2:	4313      	orrs	r3, r2
 800abe4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	697a      	ldr	r2, [r7, #20]
 800abea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	693a      	ldr	r2, [r7, #16]
 800abf0:	621a      	str	r2, [r3, #32]
}
 800abf2:	bf00      	nop
 800abf4:	371c      	adds	r7, #28
 800abf6:	46bd      	mov	sp, r7
 800abf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfc:	4770      	bx	lr
 800abfe:	bf00      	nop
 800ac00:	40012c00 	.word	0x40012c00
 800ac04:	40000400 	.word	0x40000400
 800ac08:	40000800 	.word	0x40000800
 800ac0c:	40013400 	.word	0x40013400
 800ac10:	40014000 	.word	0x40014000

0800ac14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac14:	b480      	push	{r7}
 800ac16:	b087      	sub	sp, #28
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	60f8      	str	r0, [r7, #12]
 800ac1c:	60b9      	str	r1, [r7, #8]
 800ac1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	6a1b      	ldr	r3, [r3, #32]
 800ac24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	6a1b      	ldr	r3, [r3, #32]
 800ac2a:	f023 0201 	bic.w	r2, r3, #1
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	699b      	ldr	r3, [r3, #24]
 800ac36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ac3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	011b      	lsls	r3, r3, #4
 800ac44:	693a      	ldr	r2, [r7, #16]
 800ac46:	4313      	orrs	r3, r2
 800ac48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	f023 030a 	bic.w	r3, r3, #10
 800ac50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ac52:	697a      	ldr	r2, [r7, #20]
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	4313      	orrs	r3, r2
 800ac58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	693a      	ldr	r2, [r7, #16]
 800ac5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	697a      	ldr	r2, [r7, #20]
 800ac64:	621a      	str	r2, [r3, #32]
}
 800ac66:	bf00      	nop
 800ac68:	371c      	adds	r7, #28
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac70:	4770      	bx	lr

0800ac72 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ac72:	b480      	push	{r7}
 800ac74:	b087      	sub	sp, #28
 800ac76:	af00      	add	r7, sp, #0
 800ac78:	60f8      	str	r0, [r7, #12]
 800ac7a:	60b9      	str	r1, [r7, #8]
 800ac7c:	607a      	str	r2, [r7, #4]
 800ac7e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	6a1b      	ldr	r3, [r3, #32]
 800ac84:	f023 0210 	bic.w	r2, r3, #16
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	699b      	ldr	r3, [r3, #24]
 800ac90:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	6a1b      	ldr	r3, [r3, #32]
 800ac96:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac9e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	021b      	lsls	r3, r3, #8
 800aca4:	697a      	ldr	r2, [r7, #20]
 800aca6:	4313      	orrs	r3, r2
 800aca8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800acb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	031b      	lsls	r3, r3, #12
 800acb6:	b29b      	uxth	r3, r3
 800acb8:	697a      	ldr	r2, [r7, #20]
 800acba:	4313      	orrs	r3, r2
 800acbc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800acc4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	011b      	lsls	r3, r3, #4
 800acca:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800acce:	693a      	ldr	r2, [r7, #16]
 800acd0:	4313      	orrs	r3, r2
 800acd2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	697a      	ldr	r2, [r7, #20]
 800acd8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	693a      	ldr	r2, [r7, #16]
 800acde:	621a      	str	r2, [r3, #32]
}
 800ace0:	bf00      	nop
 800ace2:	371c      	adds	r7, #28
 800ace4:	46bd      	mov	sp, r7
 800ace6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acea:	4770      	bx	lr

0800acec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800acec:	b480      	push	{r7}
 800acee:	b087      	sub	sp, #28
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	60f8      	str	r0, [r7, #12]
 800acf4:	60b9      	str	r1, [r7, #8]
 800acf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	6a1b      	ldr	r3, [r3, #32]
 800acfc:	f023 0210 	bic.w	r2, r3, #16
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	699b      	ldr	r3, [r3, #24]
 800ad08:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	6a1b      	ldr	r3, [r3, #32]
 800ad0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ad16:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	031b      	lsls	r3, r3, #12
 800ad1c:	697a      	ldr	r2, [r7, #20]
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ad22:	693b      	ldr	r3, [r7, #16]
 800ad24:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ad28:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	011b      	lsls	r3, r3, #4
 800ad2e:	693a      	ldr	r2, [r7, #16]
 800ad30:	4313      	orrs	r3, r2
 800ad32:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	697a      	ldr	r2, [r7, #20]
 800ad38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	693a      	ldr	r2, [r7, #16]
 800ad3e:	621a      	str	r2, [r3, #32]
}
 800ad40:	bf00      	nop
 800ad42:	371c      	adds	r7, #28
 800ad44:	46bd      	mov	sp, r7
 800ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4a:	4770      	bx	lr

0800ad4c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b087      	sub	sp, #28
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	60f8      	str	r0, [r7, #12]
 800ad54:	60b9      	str	r1, [r7, #8]
 800ad56:	607a      	str	r2, [r7, #4]
 800ad58:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	6a1b      	ldr	r3, [r3, #32]
 800ad5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	69db      	ldr	r3, [r3, #28]
 800ad6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	6a1b      	ldr	r3, [r3, #32]
 800ad70:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	f023 0303 	bic.w	r3, r3, #3
 800ad78:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800ad7a:	697a      	ldr	r2, [r7, #20]
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	4313      	orrs	r3, r2
 800ad80:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800ad82:	697b      	ldr	r3, [r7, #20]
 800ad84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ad88:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	011b      	lsls	r3, r3, #4
 800ad8e:	b2db      	uxtb	r3, r3
 800ad90:	697a      	ldr	r2, [r7, #20]
 800ad92:	4313      	orrs	r3, r2
 800ad94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800ad96:	693b      	ldr	r3, [r7, #16]
 800ad98:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800ad9c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	021b      	lsls	r3, r3, #8
 800ada2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800ada6:	693a      	ldr	r2, [r7, #16]
 800ada8:	4313      	orrs	r3, r2
 800adaa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	697a      	ldr	r2, [r7, #20]
 800adb0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	693a      	ldr	r2, [r7, #16]
 800adb6:	621a      	str	r2, [r3, #32]
}
 800adb8:	bf00      	nop
 800adba:	371c      	adds	r7, #28
 800adbc:	46bd      	mov	sp, r7
 800adbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc2:	4770      	bx	lr

0800adc4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800adc4:	b480      	push	{r7}
 800adc6:	b087      	sub	sp, #28
 800adc8:	af00      	add	r7, sp, #0
 800adca:	60f8      	str	r0, [r7, #12]
 800adcc:	60b9      	str	r1, [r7, #8]
 800adce:	607a      	str	r2, [r7, #4]
 800add0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	6a1b      	ldr	r3, [r3, #32]
 800add6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	69db      	ldr	r3, [r3, #28]
 800ade2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	6a1b      	ldr	r3, [r3, #32]
 800ade8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800adf0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	021b      	lsls	r3, r3, #8
 800adf6:	697a      	ldr	r2, [r7, #20]
 800adf8:	4313      	orrs	r3, r2
 800adfa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800adfc:	697b      	ldr	r3, [r7, #20]
 800adfe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ae02:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	031b      	lsls	r3, r3, #12
 800ae08:	b29b      	uxth	r3, r3
 800ae0a:	697a      	ldr	r2, [r7, #20]
 800ae0c:	4313      	orrs	r3, r2
 800ae0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800ae10:	693b      	ldr	r3, [r7, #16]
 800ae12:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800ae16:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	031b      	lsls	r3, r3, #12
 800ae1c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800ae20:	693a      	ldr	r2, [r7, #16]
 800ae22:	4313      	orrs	r3, r2
 800ae24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	697a      	ldr	r2, [r7, #20]
 800ae2a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	693a      	ldr	r2, [r7, #16]
 800ae30:	621a      	str	r2, [r3, #32]
}
 800ae32:	bf00      	nop
 800ae34:	371c      	adds	r7, #28
 800ae36:	46bd      	mov	sp, r7
 800ae38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3c:	4770      	bx	lr

0800ae3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ae3e:	b480      	push	{r7}
 800ae40:	b085      	sub	sp, #20
 800ae42:	af00      	add	r7, sp, #0
 800ae44:	6078      	str	r0, [r7, #4]
 800ae46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	689b      	ldr	r3, [r3, #8]
 800ae4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ae56:	683a      	ldr	r2, [r7, #0]
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	4313      	orrs	r3, r2
 800ae5c:	f043 0307 	orr.w	r3, r3, #7
 800ae60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	68fa      	ldr	r2, [r7, #12]
 800ae66:	609a      	str	r2, [r3, #8]
}
 800ae68:	bf00      	nop
 800ae6a:	3714      	adds	r7, #20
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae72:	4770      	bx	lr

0800ae74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ae74:	b480      	push	{r7}
 800ae76:	b087      	sub	sp, #28
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	60f8      	str	r0, [r7, #12]
 800ae7c:	60b9      	str	r1, [r7, #8]
 800ae7e:	607a      	str	r2, [r7, #4]
 800ae80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	689b      	ldr	r3, [r3, #8]
 800ae86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ae8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	021a      	lsls	r2, r3, #8
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	431a      	orrs	r2, r3
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	4313      	orrs	r3, r2
 800ae9c:	697a      	ldr	r2, [r7, #20]
 800ae9e:	4313      	orrs	r3, r2
 800aea0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	697a      	ldr	r2, [r7, #20]
 800aea6:	609a      	str	r2, [r3, #8]
}
 800aea8:	bf00      	nop
 800aeaa:	371c      	adds	r7, #28
 800aeac:	46bd      	mov	sp, r7
 800aeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb2:	4770      	bx	lr

0800aeb4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b087      	sub	sp, #28
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	60f8      	str	r0, [r7, #12]
 800aebc:	60b9      	str	r1, [r7, #8]
 800aebe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	f003 031f 	and.w	r3, r3, #31
 800aec6:	2201      	movs	r2, #1
 800aec8:	fa02 f303 	lsl.w	r3, r2, r3
 800aecc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	6a1a      	ldr	r2, [r3, #32]
 800aed2:	697b      	ldr	r3, [r7, #20]
 800aed4:	43db      	mvns	r3, r3
 800aed6:	401a      	ands	r2, r3
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	6a1a      	ldr	r2, [r3, #32]
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	f003 031f 	and.w	r3, r3, #31
 800aee6:	6879      	ldr	r1, [r7, #4]
 800aee8:	fa01 f303 	lsl.w	r3, r1, r3
 800aeec:	431a      	orrs	r2, r3
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	621a      	str	r2, [r3, #32]
}
 800aef2:	bf00      	nop
 800aef4:	371c      	adds	r7, #28
 800aef6:	46bd      	mov	sp, r7
 800aef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefc:	4770      	bx	lr
	...

0800af00 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b084      	sub	sp, #16
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
 800af08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d109      	bne.n	800af24 <HAL_TIMEx_PWMN_Start+0x24>
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af16:	b2db      	uxtb	r3, r3
 800af18:	2b01      	cmp	r3, #1
 800af1a:	bf14      	ite	ne
 800af1c:	2301      	movne	r3, #1
 800af1e:	2300      	moveq	r3, #0
 800af20:	b2db      	uxtb	r3, r3
 800af22:	e022      	b.n	800af6a <HAL_TIMEx_PWMN_Start+0x6a>
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	2b04      	cmp	r3, #4
 800af28:	d109      	bne.n	800af3e <HAL_TIMEx_PWMN_Start+0x3e>
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af30:	b2db      	uxtb	r3, r3
 800af32:	2b01      	cmp	r3, #1
 800af34:	bf14      	ite	ne
 800af36:	2301      	movne	r3, #1
 800af38:	2300      	moveq	r3, #0
 800af3a:	b2db      	uxtb	r3, r3
 800af3c:	e015      	b.n	800af6a <HAL_TIMEx_PWMN_Start+0x6a>
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	2b08      	cmp	r3, #8
 800af42:	d109      	bne.n	800af58 <HAL_TIMEx_PWMN_Start+0x58>
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800af4a:	b2db      	uxtb	r3, r3
 800af4c:	2b01      	cmp	r3, #1
 800af4e:	bf14      	ite	ne
 800af50:	2301      	movne	r3, #1
 800af52:	2300      	moveq	r3, #0
 800af54:	b2db      	uxtb	r3, r3
 800af56:	e008      	b.n	800af6a <HAL_TIMEx_PWMN_Start+0x6a>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800af5e:	b2db      	uxtb	r3, r3
 800af60:	2b01      	cmp	r3, #1
 800af62:	bf14      	ite	ne
 800af64:	2301      	movne	r3, #1
 800af66:	2300      	moveq	r3, #0
 800af68:	b2db      	uxtb	r3, r3
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d001      	beq.n	800af72 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800af6e:	2301      	movs	r3, #1
 800af70:	e069      	b.n	800b046 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d104      	bne.n	800af82 <HAL_TIMEx_PWMN_Start+0x82>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2202      	movs	r2, #2
 800af7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af80:	e013      	b.n	800afaa <HAL_TIMEx_PWMN_Start+0xaa>
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	2b04      	cmp	r3, #4
 800af86:	d104      	bne.n	800af92 <HAL_TIMEx_PWMN_Start+0x92>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2202      	movs	r2, #2
 800af8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af90:	e00b      	b.n	800afaa <HAL_TIMEx_PWMN_Start+0xaa>
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	2b08      	cmp	r3, #8
 800af96:	d104      	bne.n	800afa2 <HAL_TIMEx_PWMN_Start+0xa2>
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2202      	movs	r2, #2
 800af9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800afa0:	e003      	b.n	800afaa <HAL_TIMEx_PWMN_Start+0xaa>
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2202      	movs	r2, #2
 800afa6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	2204      	movs	r2, #4
 800afb0:	6839      	ldr	r1, [r7, #0]
 800afb2:	4618      	mov	r0, r3
 800afb4:	f000 f9d2 	bl	800b35c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800afc6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	4a20      	ldr	r2, [pc, #128]	; (800b050 <HAL_TIMEx_PWMN_Start+0x150>)
 800afce:	4293      	cmp	r3, r2
 800afd0:	d018      	beq.n	800b004 <HAL_TIMEx_PWMN_Start+0x104>
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afda:	d013      	beq.n	800b004 <HAL_TIMEx_PWMN_Start+0x104>
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	4a1c      	ldr	r2, [pc, #112]	; (800b054 <HAL_TIMEx_PWMN_Start+0x154>)
 800afe2:	4293      	cmp	r3, r2
 800afe4:	d00e      	beq.n	800b004 <HAL_TIMEx_PWMN_Start+0x104>
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	4a1b      	ldr	r2, [pc, #108]	; (800b058 <HAL_TIMEx_PWMN_Start+0x158>)
 800afec:	4293      	cmp	r3, r2
 800afee:	d009      	beq.n	800b004 <HAL_TIMEx_PWMN_Start+0x104>
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	4a19      	ldr	r2, [pc, #100]	; (800b05c <HAL_TIMEx_PWMN_Start+0x15c>)
 800aff6:	4293      	cmp	r3, r2
 800aff8:	d004      	beq.n	800b004 <HAL_TIMEx_PWMN_Start+0x104>
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	4a18      	ldr	r2, [pc, #96]	; (800b060 <HAL_TIMEx_PWMN_Start+0x160>)
 800b000:	4293      	cmp	r3, r2
 800b002:	d115      	bne.n	800b030 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	689a      	ldr	r2, [r3, #8]
 800b00a:	4b16      	ldr	r3, [pc, #88]	; (800b064 <HAL_TIMEx_PWMN_Start+0x164>)
 800b00c:	4013      	ands	r3, r2
 800b00e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	2b06      	cmp	r3, #6
 800b014:	d015      	beq.n	800b042 <HAL_TIMEx_PWMN_Start+0x142>
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b01c:	d011      	beq.n	800b042 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	681a      	ldr	r2, [r3, #0]
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f042 0201 	orr.w	r2, r2, #1
 800b02c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b02e:	e008      	b.n	800b042 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	681a      	ldr	r2, [r3, #0]
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f042 0201 	orr.w	r2, r2, #1
 800b03e:	601a      	str	r2, [r3, #0]
 800b040:	e000      	b.n	800b044 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b042:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b044:	2300      	movs	r3, #0
}
 800b046:	4618      	mov	r0, r3
 800b048:	3710      	adds	r7, #16
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}
 800b04e:	bf00      	nop
 800b050:	40012c00 	.word	0x40012c00
 800b054:	40000400 	.word	0x40000400
 800b058:	40000800 	.word	0x40000800
 800b05c:	40013400 	.word	0x40013400
 800b060:	40014000 	.word	0x40014000
 800b064:	00010007 	.word	0x00010007

0800b068 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b082      	sub	sp, #8
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
 800b070:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	2200      	movs	r2, #0
 800b078:	6839      	ldr	r1, [r7, #0]
 800b07a:	4618      	mov	r0, r3
 800b07c:	f000 f96e 	bl	800b35c <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	6a1a      	ldr	r2, [r3, #32]
 800b086:	f241 1311 	movw	r3, #4369	; 0x1111
 800b08a:	4013      	ands	r3, r2
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d10f      	bne.n	800b0b0 <HAL_TIMEx_PWMN_Stop+0x48>
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	6a1a      	ldr	r2, [r3, #32]
 800b096:	f240 4344 	movw	r3, #1092	; 0x444
 800b09a:	4013      	ands	r3, r2
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d107      	bne.n	800b0b0 <HAL_TIMEx_PWMN_Stop+0x48>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b0ae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	6a1a      	ldr	r2, [r3, #32]
 800b0b6:	f241 1311 	movw	r3, #4369	; 0x1111
 800b0ba:	4013      	ands	r3, r2
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d10f      	bne.n	800b0e0 <HAL_TIMEx_PWMN_Stop+0x78>
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	6a1a      	ldr	r2, [r3, #32]
 800b0c6:	f240 4344 	movw	r3, #1092	; 0x444
 800b0ca:	4013      	ands	r3, r2
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d107      	bne.n	800b0e0 <HAL_TIMEx_PWMN_Stop+0x78>
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	681a      	ldr	r2, [r3, #0]
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	f022 0201 	bic.w	r2, r2, #1
 800b0de:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d104      	bne.n	800b0f0 <HAL_TIMEx_PWMN_Stop+0x88>
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2201      	movs	r2, #1
 800b0ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b0ee:	e013      	b.n	800b118 <HAL_TIMEx_PWMN_Stop+0xb0>
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	2b04      	cmp	r3, #4
 800b0f4:	d104      	bne.n	800b100 <HAL_TIMEx_PWMN_Stop+0x98>
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2201      	movs	r2, #1
 800b0fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b0fe:	e00b      	b.n	800b118 <HAL_TIMEx_PWMN_Stop+0xb0>
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	2b08      	cmp	r3, #8
 800b104:	d104      	bne.n	800b110 <HAL_TIMEx_PWMN_Stop+0xa8>
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2201      	movs	r2, #1
 800b10a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b10e:	e003      	b.n	800b118 <HAL_TIMEx_PWMN_Stop+0xb0>
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2201      	movs	r2, #1
 800b114:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 800b118:	2300      	movs	r3, #0
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3708      	adds	r7, #8
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}
	...

0800b124 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b124:	b480      	push	{r7}
 800b126:	b085      	sub	sp, #20
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
 800b12c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b134:	2b01      	cmp	r3, #1
 800b136:	d101      	bne.n	800b13c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b138:	2302      	movs	r3, #2
 800b13a:	e063      	b.n	800b204 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2201      	movs	r2, #1
 800b140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2202      	movs	r2, #2
 800b148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	689b      	ldr	r3, [r3, #8]
 800b15a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	4a2b      	ldr	r2, [pc, #172]	; (800b210 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b162:	4293      	cmp	r3, r2
 800b164:	d004      	beq.n	800b170 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	4a2a      	ldr	r2, [pc, #168]	; (800b214 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b16c:	4293      	cmp	r3, r2
 800b16e:	d108      	bne.n	800b182 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b176:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	685b      	ldr	r3, [r3, #4]
 800b17c:	68fa      	ldr	r2, [r7, #12]
 800b17e:	4313      	orrs	r3, r2
 800b180:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b188:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	68fa      	ldr	r2, [r7, #12]
 800b190:	4313      	orrs	r3, r2
 800b192:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	68fa      	ldr	r2, [r7, #12]
 800b19a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	4a1b      	ldr	r2, [pc, #108]	; (800b210 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	d018      	beq.n	800b1d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1ae:	d013      	beq.n	800b1d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	4a18      	ldr	r2, [pc, #96]	; (800b218 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	d00e      	beq.n	800b1d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	4a17      	ldr	r2, [pc, #92]	; (800b21c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	d009      	beq.n	800b1d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	4a12      	ldr	r2, [pc, #72]	; (800b214 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b1ca:	4293      	cmp	r3, r2
 800b1cc:	d004      	beq.n	800b1d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	4a13      	ldr	r2, [pc, #76]	; (800b220 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b1d4:	4293      	cmp	r3, r2
 800b1d6:	d10c      	bne.n	800b1f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b1de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	689b      	ldr	r3, [r3, #8]
 800b1e4:	68ba      	ldr	r2, [r7, #8]
 800b1e6:	4313      	orrs	r3, r2
 800b1e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	68ba      	ldr	r2, [r7, #8]
 800b1f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2201      	movs	r2, #1
 800b1f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b202:	2300      	movs	r3, #0
}
 800b204:	4618      	mov	r0, r3
 800b206:	3714      	adds	r7, #20
 800b208:	46bd      	mov	sp, r7
 800b20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20e:	4770      	bx	lr
 800b210:	40012c00 	.word	0x40012c00
 800b214:	40013400 	.word	0x40013400
 800b218:	40000400 	.word	0x40000400
 800b21c:	40000800 	.word	0x40000800
 800b220:	40014000 	.word	0x40014000

0800b224 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b224:	b480      	push	{r7}
 800b226:	b085      	sub	sp, #20
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
 800b22c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b22e:	2300      	movs	r3, #0
 800b230:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b238:	2b01      	cmp	r3, #1
 800b23a:	d101      	bne.n	800b240 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b23c:	2302      	movs	r3, #2
 800b23e:	e065      	b.n	800b30c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2201      	movs	r2, #1
 800b244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	68db      	ldr	r3, [r3, #12]
 800b252:	4313      	orrs	r3, r2
 800b254:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	689b      	ldr	r3, [r3, #8]
 800b260:	4313      	orrs	r3, r2
 800b262:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	685b      	ldr	r3, [r3, #4]
 800b26e:	4313      	orrs	r3, r2
 800b270:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	4313      	orrs	r3, r2
 800b27e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	691b      	ldr	r3, [r3, #16]
 800b28a:	4313      	orrs	r3, r2
 800b28c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	695b      	ldr	r3, [r3, #20]
 800b298:	4313      	orrs	r3, r2
 800b29a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2a6:	4313      	orrs	r3, r2
 800b2a8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	699b      	ldr	r3, [r3, #24]
 800b2b4:	041b      	lsls	r3, r3, #16
 800b2b6:	4313      	orrs	r3, r2
 800b2b8:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	4a16      	ldr	r2, [pc, #88]	; (800b318 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b2c0:	4293      	cmp	r3, r2
 800b2c2:	d004      	beq.n	800b2ce <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	4a14      	ldr	r2, [pc, #80]	; (800b31c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b2ca:	4293      	cmp	r3, r2
 800b2cc:	d115      	bne.n	800b2fa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2d8:	051b      	lsls	r3, r3, #20
 800b2da:	4313      	orrs	r3, r2
 800b2dc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	69db      	ldr	r3, [r3, #28]
 800b2e8:	4313      	orrs	r3, r2
 800b2ea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	6a1b      	ldr	r3, [r3, #32]
 800b2f6:	4313      	orrs	r3, r2
 800b2f8:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	68fa      	ldr	r2, [r7, #12]
 800b300:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2200      	movs	r2, #0
 800b306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b30a:	2300      	movs	r3, #0
}
 800b30c:	4618      	mov	r0, r3
 800b30e:	3714      	adds	r7, #20
 800b310:	46bd      	mov	sp, r7
 800b312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b316:	4770      	bx	lr
 800b318:	40012c00 	.word	0x40012c00
 800b31c:	40013400 	.word	0x40013400

0800b320 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b320:	b480      	push	{r7}
 800b322:	b083      	sub	sp, #12
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b328:	bf00      	nop
 800b32a:	370c      	adds	r7, #12
 800b32c:	46bd      	mov	sp, r7
 800b32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b332:	4770      	bx	lr

0800b334 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b334:	b480      	push	{r7}
 800b336:	b083      	sub	sp, #12
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b33c:	bf00      	nop
 800b33e:	370c      	adds	r7, #12
 800b340:	46bd      	mov	sp, r7
 800b342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b346:	4770      	bx	lr

0800b348 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b348:	b480      	push	{r7}
 800b34a:	b083      	sub	sp, #12
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b350:	bf00      	nop
 800b352:	370c      	adds	r7, #12
 800b354:	46bd      	mov	sp, r7
 800b356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35a:	4770      	bx	lr

0800b35c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800b35c:	b480      	push	{r7}
 800b35e:	b087      	sub	sp, #28
 800b360:	af00      	add	r7, sp, #0
 800b362:	60f8      	str	r0, [r7, #12]
 800b364:	60b9      	str	r1, [r7, #8]
 800b366:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	f003 031f 	and.w	r3, r3, #31
 800b36e:	2204      	movs	r2, #4
 800b370:	fa02 f303 	lsl.w	r3, r2, r3
 800b374:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	6a1a      	ldr	r2, [r3, #32]
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	43db      	mvns	r3, r3
 800b37e:	401a      	ands	r2, r3
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	6a1a      	ldr	r2, [r3, #32]
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	f003 031f 	and.w	r3, r3, #31
 800b38e:	6879      	ldr	r1, [r7, #4]
 800b390:	fa01 f303 	lsl.w	r3, r1, r3
 800b394:	431a      	orrs	r2, r3
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	621a      	str	r2, [r3, #32]
}
 800b39a:	bf00      	nop
 800b39c:	371c      	adds	r7, #28
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a4:	4770      	bx	lr

0800b3a6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b3a6:	b580      	push	{r7, lr}
 800b3a8:	b082      	sub	sp, #8
 800b3aa:	af00      	add	r7, sp, #0
 800b3ac:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d101      	bne.n	800b3b8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	e040      	b.n	800b43a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d106      	bne.n	800b3ce <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	f7f8 fbf5 	bl	8003bb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2224      	movs	r2, #36	; 0x24
 800b3d2:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	681a      	ldr	r2, [r3, #0]
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	f022 0201 	bic.w	r2, r2, #1
 800b3e2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b3e4:	6878      	ldr	r0, [r7, #4]
 800b3e6:	f000 fbb7 	bl	800bb58 <UART_SetConfig>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	2b01      	cmp	r3, #1
 800b3ee:	d101      	bne.n	800b3f4 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	e022      	b.n	800b43a <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d002      	beq.n	800b402 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f000 fd7f 	bl	800bf00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	685a      	ldr	r2, [r3, #4]
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b410:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	689a      	ldr	r2, [r3, #8]
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b420:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	681a      	ldr	r2, [r3, #0]
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	f042 0201 	orr.w	r2, r2, #1
 800b430:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	f000 fe06 	bl	800c044 <UART_CheckIdleState>
 800b438:	4603      	mov	r3, r0
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	3708      	adds	r7, #8
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd80      	pop	{r7, pc}
	...

0800b444 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b08a      	sub	sp, #40	; 0x28
 800b448:	af00      	add	r7, sp, #0
 800b44a:	60f8      	str	r0, [r7, #12]
 800b44c:	60b9      	str	r1, [r7, #8]
 800b44e:	4613      	mov	r3, r2
 800b450:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b456:	2b20      	cmp	r3, #32
 800b458:	d165      	bne.n	800b526 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d002      	beq.n	800b466 <HAL_UART_Transmit_DMA+0x22>
 800b460:	88fb      	ldrh	r3, [r7, #6]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d101      	bne.n	800b46a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800b466:	2301      	movs	r3, #1
 800b468:	e05e      	b.n	800b528 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	68ba      	ldr	r2, [r7, #8]
 800b46e:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	88fa      	ldrh	r2, [r7, #6]
 800b474:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	88fa      	ldrh	r2, [r7, #6]
 800b47c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	2200      	movs	r2, #0
 800b484:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	2221      	movs	r2, #33	; 0x21
 800b48c:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b492:	2b00      	cmp	r3, #0
 800b494:	d027      	beq.n	800b4e6 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b49a:	4a25      	ldr	r2, [pc, #148]	; (800b530 <HAL_UART_Transmit_DMA+0xec>)
 800b49c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4a2:	4a24      	ldr	r2, [pc, #144]	; (800b534 <HAL_UART_Transmit_DMA+0xf0>)
 800b4a4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4aa:	4a23      	ldr	r2, [pc, #140]	; (800b538 <HAL_UART_Transmit_DMA+0xf4>)
 800b4ac:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4be:	4619      	mov	r1, r3
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	3328      	adds	r3, #40	; 0x28
 800b4c6:	461a      	mov	r2, r3
 800b4c8:	88fb      	ldrh	r3, [r7, #6]
 800b4ca:	f7fa ff01 	bl	80062d0 <HAL_DMA_Start_IT>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d008      	beq.n	800b4e6 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	2210      	movs	r2, #16
 800b4d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	2220      	movs	r2, #32
 800b4e0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	e020      	b.n	800b528 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	2240      	movs	r2, #64	; 0x40
 800b4ec:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	3308      	adds	r3, #8
 800b4f4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4f6:	697b      	ldr	r3, [r7, #20]
 800b4f8:	e853 3f00 	ldrex	r3, [r3]
 800b4fc:	613b      	str	r3, [r7, #16]
   return(result);
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b504:	627b      	str	r3, [r7, #36]	; 0x24
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	3308      	adds	r3, #8
 800b50c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b50e:	623a      	str	r2, [r7, #32]
 800b510:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b512:	69f9      	ldr	r1, [r7, #28]
 800b514:	6a3a      	ldr	r2, [r7, #32]
 800b516:	e841 2300 	strex	r3, r2, [r1]
 800b51a:	61bb      	str	r3, [r7, #24]
   return(result);
 800b51c:	69bb      	ldr	r3, [r7, #24]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d1e5      	bne.n	800b4ee <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800b522:	2300      	movs	r3, #0
 800b524:	e000      	b.n	800b528 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800b526:	2302      	movs	r3, #2
  }
}
 800b528:	4618      	mov	r0, r3
 800b52a:	3728      	adds	r7, #40	; 0x28
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}
 800b530:	0800c4b9 	.word	0x0800c4b9
 800b534:	0800c54d 	.word	0x0800c54d
 800b538:	0800c6cd 	.word	0x0800c6cd

0800b53c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b0ba      	sub	sp, #232	; 0xe8
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	69db      	ldr	r3, [r3, #28]
 800b54a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	689b      	ldr	r3, [r3, #8]
 800b55e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b562:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b566:	f640 030f 	movw	r3, #2063	; 0x80f
 800b56a:	4013      	ands	r3, r2
 800b56c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b570:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b574:	2b00      	cmp	r3, #0
 800b576:	d115      	bne.n	800b5a4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800b578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b57c:	f003 0320 	and.w	r3, r3, #32
 800b580:	2b00      	cmp	r3, #0
 800b582:	d00f      	beq.n	800b5a4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b588:	f003 0320 	and.w	r3, r3, #32
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d009      	beq.n	800b5a4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b594:	2b00      	cmp	r3, #0
 800b596:	f000 82ab 	beq.w	800baf0 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	4798      	blx	r3
      }
      return;
 800b5a2:	e2a5      	b.n	800baf0 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b5a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	f000 8117 	beq.w	800b7dc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b5ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b5b2:	f003 0301 	and.w	r3, r3, #1
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d106      	bne.n	800b5c8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800b5ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b5be:	4b85      	ldr	r3, [pc, #532]	; (800b7d4 <HAL_UART_IRQHandler+0x298>)
 800b5c0:	4013      	ands	r3, r2
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	f000 810a 	beq.w	800b7dc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b5c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5cc:	f003 0301 	and.w	r3, r3, #1
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d011      	beq.n	800b5f8 <HAL_UART_IRQHandler+0xbc>
 800b5d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d00b      	beq.n	800b5f8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	2201      	movs	r2, #1
 800b5e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b5ee:	f043 0201 	orr.w	r2, r3, #1
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b5f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5fc:	f003 0302 	and.w	r3, r3, #2
 800b600:	2b00      	cmp	r3, #0
 800b602:	d011      	beq.n	800b628 <HAL_UART_IRQHandler+0xec>
 800b604:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b608:	f003 0301 	and.w	r3, r3, #1
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d00b      	beq.n	800b628 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	2202      	movs	r2, #2
 800b616:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b61e:	f043 0204 	orr.w	r2, r3, #4
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b62c:	f003 0304 	and.w	r3, r3, #4
 800b630:	2b00      	cmp	r3, #0
 800b632:	d011      	beq.n	800b658 <HAL_UART_IRQHandler+0x11c>
 800b634:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b638:	f003 0301 	and.w	r3, r3, #1
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d00b      	beq.n	800b658 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	2204      	movs	r2, #4
 800b646:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b64e:	f043 0202 	orr.w	r2, r3, #2
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b65c:	f003 0308 	and.w	r3, r3, #8
 800b660:	2b00      	cmp	r3, #0
 800b662:	d017      	beq.n	800b694 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b668:	f003 0320 	and.w	r3, r3, #32
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d105      	bne.n	800b67c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b670:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b674:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d00b      	beq.n	800b694 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	2208      	movs	r2, #8
 800b682:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b68a:	f043 0208 	orr.w	r2, r3, #8
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b698:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d012      	beq.n	800b6c6 <HAL_UART_IRQHandler+0x18a>
 800b6a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d00c      	beq.n	800b6c6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b6b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b6bc:	f043 0220 	orr.w	r2, r3, #32
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	f000 8211 	beq.w	800baf4 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b6d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6d6:	f003 0320 	and.w	r3, r3, #32
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d00d      	beq.n	800b6fa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b6de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6e2:	f003 0320 	and.w	r3, r3, #32
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d007      	beq.n	800b6fa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d003      	beq.n	800b6fa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b700:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	689b      	ldr	r3, [r3, #8]
 800b70a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b70e:	2b40      	cmp	r3, #64	; 0x40
 800b710:	d005      	beq.n	800b71e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b712:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b716:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d04f      	beq.n	800b7be <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f000 fe66 	bl	800c3f0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	689b      	ldr	r3, [r3, #8]
 800b72a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b72e:	2b40      	cmp	r3, #64	; 0x40
 800b730:	d141      	bne.n	800b7b6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	3308      	adds	r3, #8
 800b738:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b73c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b740:	e853 3f00 	ldrex	r3, [r3]
 800b744:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b748:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b74c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b750:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	3308      	adds	r3, #8
 800b75a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b75e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b762:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b766:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b76a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b76e:	e841 2300 	strex	r3, r2, [r1]
 800b772:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b776:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d1d9      	bne.n	800b732 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b782:	2b00      	cmp	r3, #0
 800b784:	d013      	beq.n	800b7ae <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b78a:	4a13      	ldr	r2, [pc, #76]	; (800b7d8 <HAL_UART_IRQHandler+0x29c>)
 800b78c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b792:	4618      	mov	r0, r3
 800b794:	f7fa fe34 	bl	8006400 <HAL_DMA_Abort_IT>
 800b798:	4603      	mov	r3, r0
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d017      	beq.n	800b7ce <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b7a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7a4:	687a      	ldr	r2, [r7, #4]
 800b7a6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800b7a8:	4610      	mov	r0, r2
 800b7aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7ac:	e00f      	b.n	800b7ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f000 f9c8 	bl	800bb44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7b4:	e00b      	b.n	800b7ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	f000 f9c4 	bl	800bb44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7bc:	e007      	b.n	800b7ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f000 f9c0 	bl	800bb44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800b7cc:	e192      	b.n	800baf4 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7ce:	bf00      	nop
    return;
 800b7d0:	e190      	b.n	800baf4 <HAL_UART_IRQHandler+0x5b8>
 800b7d2:	bf00      	nop
 800b7d4:	04000120 	.word	0x04000120
 800b7d8:	0800c74b 	.word	0x0800c74b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b7e0:	2b01      	cmp	r3, #1
 800b7e2:	f040 814b 	bne.w	800ba7c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b7e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7ea:	f003 0310 	and.w	r3, r3, #16
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	f000 8144 	beq.w	800ba7c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b7f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7f8:	f003 0310 	and.w	r3, r3, #16
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	f000 813d 	beq.w	800ba7c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	2210      	movs	r2, #16
 800b808:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	689b      	ldr	r3, [r3, #8]
 800b810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b814:	2b40      	cmp	r3, #64	; 0x40
 800b816:	f040 80b5 	bne.w	800b984 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	685b      	ldr	r3, [r3, #4]
 800b822:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b826:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	f000 8164 	beq.w	800baf8 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b836:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b83a:	429a      	cmp	r2, r3
 800b83c:	f080 815c 	bcs.w	800baf8 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b846:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b84e:	699b      	ldr	r3, [r3, #24]
 800b850:	2b20      	cmp	r3, #32
 800b852:	f000 8086 	beq.w	800b962 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b85e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b862:	e853 3f00 	ldrex	r3, [r3]
 800b866:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b86a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b86e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b872:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	461a      	mov	r2, r3
 800b87c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b880:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b884:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b888:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b88c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b890:	e841 2300 	strex	r3, r2, [r1]
 800b894:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b898:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d1da      	bne.n	800b856 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	3308      	adds	r3, #8
 800b8a6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b8aa:	e853 3f00 	ldrex	r3, [r3]
 800b8ae:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b8b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b8b2:	f023 0301 	bic.w	r3, r3, #1
 800b8b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	3308      	adds	r3, #8
 800b8c0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b8c4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b8c8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ca:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b8cc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b8d0:	e841 2300 	strex	r3, r2, [r1]
 800b8d4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b8d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d1e1      	bne.n	800b8a0 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	3308      	adds	r3, #8
 800b8e2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b8e6:	e853 3f00 	ldrex	r3, [r3]
 800b8ea:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b8ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b8ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	3308      	adds	r3, #8
 800b8fc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b900:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b902:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b904:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b906:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b908:	e841 2300 	strex	r3, r2, [r1]
 800b90c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b90e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b910:	2b00      	cmp	r3, #0
 800b912:	d1e3      	bne.n	800b8dc <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2220      	movs	r2, #32
 800b918:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2200      	movs	r2, #0
 800b920:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b928:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b92a:	e853 3f00 	ldrex	r3, [r3]
 800b92e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b930:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b932:	f023 0310 	bic.w	r3, r3, #16
 800b936:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	461a      	mov	r2, r3
 800b940:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b944:	65bb      	str	r3, [r7, #88]	; 0x58
 800b946:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b948:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b94a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b94c:	e841 2300 	strex	r3, r2, [r1]
 800b950:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b952:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b954:	2b00      	cmp	r3, #0
 800b956:	d1e4      	bne.n	800b922 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b95c:	4618      	mov	r0, r3
 800b95e:	f7fa fd16 	bl	800638e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2202      	movs	r2, #2
 800b966:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b974:	b29b      	uxth	r3, r3
 800b976:	1ad3      	subs	r3, r2, r3
 800b978:	b29b      	uxth	r3, r3
 800b97a:	4619      	mov	r1, r3
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f7f5 fa8f 	bl	8000ea0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b982:	e0b9      	b.n	800baf8 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b990:	b29b      	uxth	r3, r3
 800b992:	1ad3      	subs	r3, r2, r3
 800b994:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b99e:	b29b      	uxth	r3, r3
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	f000 80ab 	beq.w	800bafc <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800b9a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	f000 80a6 	beq.w	800bafc <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9b8:	e853 3f00 	ldrex	r3, [r3]
 800b9bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b9be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b9c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	461a      	mov	r2, r3
 800b9ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b9d2:	647b      	str	r3, [r7, #68]	; 0x44
 800b9d4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b9d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b9da:	e841 2300 	strex	r3, r2, [r1]
 800b9de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b9e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d1e4      	bne.n	800b9b0 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	3308      	adds	r3, #8
 800b9ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9f0:	e853 3f00 	ldrex	r3, [r3]
 800b9f4:	623b      	str	r3, [r7, #32]
   return(result);
 800b9f6:	6a3b      	ldr	r3, [r7, #32]
 800b9f8:	f023 0301 	bic.w	r3, r3, #1
 800b9fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	3308      	adds	r3, #8
 800ba06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ba0a:	633a      	str	r2, [r7, #48]	; 0x30
 800ba0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ba10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba12:	e841 2300 	strex	r3, r2, [r1]
 800ba16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ba18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d1e3      	bne.n	800b9e6 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2220      	movs	r2, #32
 800ba22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2200      	movs	r2, #0
 800ba2a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2200      	movs	r2, #0
 800ba30:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba38:	693b      	ldr	r3, [r7, #16]
 800ba3a:	e853 3f00 	ldrex	r3, [r3]
 800ba3e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	f023 0310 	bic.w	r3, r3, #16
 800ba46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	461a      	mov	r2, r3
 800ba50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ba54:	61fb      	str	r3, [r7, #28]
 800ba56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba58:	69b9      	ldr	r1, [r7, #24]
 800ba5a:	69fa      	ldr	r2, [r7, #28]
 800ba5c:	e841 2300 	strex	r3, r2, [r1]
 800ba60:	617b      	str	r3, [r7, #20]
   return(result);
 800ba62:	697b      	ldr	r3, [r7, #20]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d1e4      	bne.n	800ba32 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2202      	movs	r2, #2
 800ba6c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ba6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ba72:	4619      	mov	r1, r3
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	f7f5 fa13 	bl	8000ea0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ba7a:	e03f      	b.n	800bafc <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ba7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d00e      	beq.n	800baa6 <HAL_UART_IRQHandler+0x56a>
 800ba88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d008      	beq.n	800baa6 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ba9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f000 fe93 	bl	800c7ca <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800baa4:	e02d      	b.n	800bb02 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800baa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800baaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d00e      	beq.n	800bad0 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800bab2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800baba:	2b00      	cmp	r3, #0
 800babc:	d008      	beq.n	800bad0 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d01c      	beq.n	800bb00 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	4798      	blx	r3
    }
    return;
 800bace:	e017      	b.n	800bb00 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d012      	beq.n	800bb02 <HAL_UART_IRQHandler+0x5c6>
 800badc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d00c      	beq.n	800bb02 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800bae8:	6878      	ldr	r0, [r7, #4]
 800baea:	f000 fe44 	bl	800c776 <UART_EndTransmit_IT>
    return;
 800baee:	e008      	b.n	800bb02 <HAL_UART_IRQHandler+0x5c6>
      return;
 800baf0:	bf00      	nop
 800baf2:	e006      	b.n	800bb02 <HAL_UART_IRQHandler+0x5c6>
    return;
 800baf4:	bf00      	nop
 800baf6:	e004      	b.n	800bb02 <HAL_UART_IRQHandler+0x5c6>
      return;
 800baf8:	bf00      	nop
 800bafa:	e002      	b.n	800bb02 <HAL_UART_IRQHandler+0x5c6>
      return;
 800bafc:	bf00      	nop
 800bafe:	e000      	b.n	800bb02 <HAL_UART_IRQHandler+0x5c6>
    return;
 800bb00:	bf00      	nop
  }

}
 800bb02:	37e8      	adds	r7, #232	; 0xe8
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}

0800bb08 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bb08:	b480      	push	{r7}
 800bb0a:	b083      	sub	sp, #12
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800bb10:	bf00      	nop
 800bb12:	370c      	adds	r7, #12
 800bb14:	46bd      	mov	sp, r7
 800bb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1a:	4770      	bx	lr

0800bb1c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	b083      	sub	sp, #12
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800bb24:	bf00      	nop
 800bb26:	370c      	adds	r7, #12
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2e:	4770      	bx	lr

0800bb30 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bb30:	b480      	push	{r7}
 800bb32:	b083      	sub	sp, #12
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800bb38:	bf00      	nop
 800bb3a:	370c      	adds	r7, #12
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb42:	4770      	bx	lr

0800bb44 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bb44:	b480      	push	{r7}
 800bb46:	b083      	sub	sp, #12
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bb4c:	bf00      	nop
 800bb4e:	370c      	adds	r7, #12
 800bb50:	46bd      	mov	sp, r7
 800bb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb56:	4770      	bx	lr

0800bb58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b088      	sub	sp, #32
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bb60:	2300      	movs	r3, #0
 800bb62:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	689a      	ldr	r2, [r3, #8]
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	691b      	ldr	r3, [r3, #16]
 800bb6c:	431a      	orrs	r2, r3
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	695b      	ldr	r3, [r3, #20]
 800bb72:	431a      	orrs	r2, r3
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	69db      	ldr	r3, [r3, #28]
 800bb78:	4313      	orrs	r3, r2
 800bb7a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800bb86:	f023 030c 	bic.w	r3, r3, #12
 800bb8a:	687a      	ldr	r2, [r7, #4]
 800bb8c:	6812      	ldr	r2, [r2, #0]
 800bb8e:	6979      	ldr	r1, [r7, #20]
 800bb90:	430b      	orrs	r3, r1
 800bb92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	685b      	ldr	r3, [r3, #4]
 800bb9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	68da      	ldr	r2, [r3, #12]
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	430a      	orrs	r2, r1
 800bba8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	699b      	ldr	r3, [r3, #24]
 800bbae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	6a1b      	ldr	r3, [r3, #32]
 800bbb4:	697a      	ldr	r2, [r7, #20]
 800bbb6:	4313      	orrs	r3, r2
 800bbb8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	689b      	ldr	r3, [r3, #8]
 800bbc0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	697a      	ldr	r2, [r7, #20]
 800bbca:	430a      	orrs	r2, r1
 800bbcc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	4aa7      	ldr	r2, [pc, #668]	; (800be70 <UART_SetConfig+0x318>)
 800bbd4:	4293      	cmp	r3, r2
 800bbd6:	d120      	bne.n	800bc1a <UART_SetConfig+0xc2>
 800bbd8:	4ba6      	ldr	r3, [pc, #664]	; (800be74 <UART_SetConfig+0x31c>)
 800bbda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbdc:	f003 0303 	and.w	r3, r3, #3
 800bbe0:	2b03      	cmp	r3, #3
 800bbe2:	d817      	bhi.n	800bc14 <UART_SetConfig+0xbc>
 800bbe4:	a201      	add	r2, pc, #4	; (adr r2, 800bbec <UART_SetConfig+0x94>)
 800bbe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbea:	bf00      	nop
 800bbec:	0800bbfd 	.word	0x0800bbfd
 800bbf0:	0800bc09 	.word	0x0800bc09
 800bbf4:	0800bc0f 	.word	0x0800bc0f
 800bbf8:	0800bc03 	.word	0x0800bc03
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	77fb      	strb	r3, [r7, #31]
 800bc00:	e0b5      	b.n	800bd6e <UART_SetConfig+0x216>
 800bc02:	2302      	movs	r3, #2
 800bc04:	77fb      	strb	r3, [r7, #31]
 800bc06:	e0b2      	b.n	800bd6e <UART_SetConfig+0x216>
 800bc08:	2304      	movs	r3, #4
 800bc0a:	77fb      	strb	r3, [r7, #31]
 800bc0c:	e0af      	b.n	800bd6e <UART_SetConfig+0x216>
 800bc0e:	2308      	movs	r3, #8
 800bc10:	77fb      	strb	r3, [r7, #31]
 800bc12:	e0ac      	b.n	800bd6e <UART_SetConfig+0x216>
 800bc14:	2310      	movs	r3, #16
 800bc16:	77fb      	strb	r3, [r7, #31]
 800bc18:	e0a9      	b.n	800bd6e <UART_SetConfig+0x216>
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	4a96      	ldr	r2, [pc, #600]	; (800be78 <UART_SetConfig+0x320>)
 800bc20:	4293      	cmp	r3, r2
 800bc22:	d124      	bne.n	800bc6e <UART_SetConfig+0x116>
 800bc24:	4b93      	ldr	r3, [pc, #588]	; (800be74 <UART_SetConfig+0x31c>)
 800bc26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800bc2c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bc30:	d011      	beq.n	800bc56 <UART_SetConfig+0xfe>
 800bc32:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bc36:	d817      	bhi.n	800bc68 <UART_SetConfig+0x110>
 800bc38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc3c:	d011      	beq.n	800bc62 <UART_SetConfig+0x10a>
 800bc3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc42:	d811      	bhi.n	800bc68 <UART_SetConfig+0x110>
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d003      	beq.n	800bc50 <UART_SetConfig+0xf8>
 800bc48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc4c:	d006      	beq.n	800bc5c <UART_SetConfig+0x104>
 800bc4e:	e00b      	b.n	800bc68 <UART_SetConfig+0x110>
 800bc50:	2300      	movs	r3, #0
 800bc52:	77fb      	strb	r3, [r7, #31]
 800bc54:	e08b      	b.n	800bd6e <UART_SetConfig+0x216>
 800bc56:	2302      	movs	r3, #2
 800bc58:	77fb      	strb	r3, [r7, #31]
 800bc5a:	e088      	b.n	800bd6e <UART_SetConfig+0x216>
 800bc5c:	2304      	movs	r3, #4
 800bc5e:	77fb      	strb	r3, [r7, #31]
 800bc60:	e085      	b.n	800bd6e <UART_SetConfig+0x216>
 800bc62:	2308      	movs	r3, #8
 800bc64:	77fb      	strb	r3, [r7, #31]
 800bc66:	e082      	b.n	800bd6e <UART_SetConfig+0x216>
 800bc68:	2310      	movs	r3, #16
 800bc6a:	77fb      	strb	r3, [r7, #31]
 800bc6c:	e07f      	b.n	800bd6e <UART_SetConfig+0x216>
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	4a82      	ldr	r2, [pc, #520]	; (800be7c <UART_SetConfig+0x324>)
 800bc74:	4293      	cmp	r3, r2
 800bc76:	d124      	bne.n	800bcc2 <UART_SetConfig+0x16a>
 800bc78:	4b7e      	ldr	r3, [pc, #504]	; (800be74 <UART_SetConfig+0x31c>)
 800bc7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc7c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800bc80:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800bc84:	d011      	beq.n	800bcaa <UART_SetConfig+0x152>
 800bc86:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800bc8a:	d817      	bhi.n	800bcbc <UART_SetConfig+0x164>
 800bc8c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800bc90:	d011      	beq.n	800bcb6 <UART_SetConfig+0x15e>
 800bc92:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800bc96:	d811      	bhi.n	800bcbc <UART_SetConfig+0x164>
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d003      	beq.n	800bca4 <UART_SetConfig+0x14c>
 800bc9c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bca0:	d006      	beq.n	800bcb0 <UART_SetConfig+0x158>
 800bca2:	e00b      	b.n	800bcbc <UART_SetConfig+0x164>
 800bca4:	2300      	movs	r3, #0
 800bca6:	77fb      	strb	r3, [r7, #31]
 800bca8:	e061      	b.n	800bd6e <UART_SetConfig+0x216>
 800bcaa:	2302      	movs	r3, #2
 800bcac:	77fb      	strb	r3, [r7, #31]
 800bcae:	e05e      	b.n	800bd6e <UART_SetConfig+0x216>
 800bcb0:	2304      	movs	r3, #4
 800bcb2:	77fb      	strb	r3, [r7, #31]
 800bcb4:	e05b      	b.n	800bd6e <UART_SetConfig+0x216>
 800bcb6:	2308      	movs	r3, #8
 800bcb8:	77fb      	strb	r3, [r7, #31]
 800bcba:	e058      	b.n	800bd6e <UART_SetConfig+0x216>
 800bcbc:	2310      	movs	r3, #16
 800bcbe:	77fb      	strb	r3, [r7, #31]
 800bcc0:	e055      	b.n	800bd6e <UART_SetConfig+0x216>
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	4a6e      	ldr	r2, [pc, #440]	; (800be80 <UART_SetConfig+0x328>)
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	d124      	bne.n	800bd16 <UART_SetConfig+0x1be>
 800bccc:	4b69      	ldr	r3, [pc, #420]	; (800be74 <UART_SetConfig+0x31c>)
 800bcce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcd0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800bcd4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bcd8:	d011      	beq.n	800bcfe <UART_SetConfig+0x1a6>
 800bcda:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bcde:	d817      	bhi.n	800bd10 <UART_SetConfig+0x1b8>
 800bce0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bce4:	d011      	beq.n	800bd0a <UART_SetConfig+0x1b2>
 800bce6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bcea:	d811      	bhi.n	800bd10 <UART_SetConfig+0x1b8>
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d003      	beq.n	800bcf8 <UART_SetConfig+0x1a0>
 800bcf0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bcf4:	d006      	beq.n	800bd04 <UART_SetConfig+0x1ac>
 800bcf6:	e00b      	b.n	800bd10 <UART_SetConfig+0x1b8>
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	77fb      	strb	r3, [r7, #31]
 800bcfc:	e037      	b.n	800bd6e <UART_SetConfig+0x216>
 800bcfe:	2302      	movs	r3, #2
 800bd00:	77fb      	strb	r3, [r7, #31]
 800bd02:	e034      	b.n	800bd6e <UART_SetConfig+0x216>
 800bd04:	2304      	movs	r3, #4
 800bd06:	77fb      	strb	r3, [r7, #31]
 800bd08:	e031      	b.n	800bd6e <UART_SetConfig+0x216>
 800bd0a:	2308      	movs	r3, #8
 800bd0c:	77fb      	strb	r3, [r7, #31]
 800bd0e:	e02e      	b.n	800bd6e <UART_SetConfig+0x216>
 800bd10:	2310      	movs	r3, #16
 800bd12:	77fb      	strb	r3, [r7, #31]
 800bd14:	e02b      	b.n	800bd6e <UART_SetConfig+0x216>
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	4a5a      	ldr	r2, [pc, #360]	; (800be84 <UART_SetConfig+0x32c>)
 800bd1c:	4293      	cmp	r3, r2
 800bd1e:	d124      	bne.n	800bd6a <UART_SetConfig+0x212>
 800bd20:	4b54      	ldr	r3, [pc, #336]	; (800be74 <UART_SetConfig+0x31c>)
 800bd22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd24:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800bd28:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800bd2c:	d011      	beq.n	800bd52 <UART_SetConfig+0x1fa>
 800bd2e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800bd32:	d817      	bhi.n	800bd64 <UART_SetConfig+0x20c>
 800bd34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bd38:	d011      	beq.n	800bd5e <UART_SetConfig+0x206>
 800bd3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bd3e:	d811      	bhi.n	800bd64 <UART_SetConfig+0x20c>
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d003      	beq.n	800bd4c <UART_SetConfig+0x1f4>
 800bd44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bd48:	d006      	beq.n	800bd58 <UART_SetConfig+0x200>
 800bd4a:	e00b      	b.n	800bd64 <UART_SetConfig+0x20c>
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	77fb      	strb	r3, [r7, #31]
 800bd50:	e00d      	b.n	800bd6e <UART_SetConfig+0x216>
 800bd52:	2302      	movs	r3, #2
 800bd54:	77fb      	strb	r3, [r7, #31]
 800bd56:	e00a      	b.n	800bd6e <UART_SetConfig+0x216>
 800bd58:	2304      	movs	r3, #4
 800bd5a:	77fb      	strb	r3, [r7, #31]
 800bd5c:	e007      	b.n	800bd6e <UART_SetConfig+0x216>
 800bd5e:	2308      	movs	r3, #8
 800bd60:	77fb      	strb	r3, [r7, #31]
 800bd62:	e004      	b.n	800bd6e <UART_SetConfig+0x216>
 800bd64:	2310      	movs	r3, #16
 800bd66:	77fb      	strb	r3, [r7, #31]
 800bd68:	e001      	b.n	800bd6e <UART_SetConfig+0x216>
 800bd6a:	2310      	movs	r3, #16
 800bd6c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	69db      	ldr	r3, [r3, #28]
 800bd72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd76:	d15b      	bne.n	800be30 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 800bd78:	7ffb      	ldrb	r3, [r7, #31]
 800bd7a:	2b08      	cmp	r3, #8
 800bd7c:	d827      	bhi.n	800bdce <UART_SetConfig+0x276>
 800bd7e:	a201      	add	r2, pc, #4	; (adr r2, 800bd84 <UART_SetConfig+0x22c>)
 800bd80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd84:	0800bda9 	.word	0x0800bda9
 800bd88:	0800bdb1 	.word	0x0800bdb1
 800bd8c:	0800bdb9 	.word	0x0800bdb9
 800bd90:	0800bdcf 	.word	0x0800bdcf
 800bd94:	0800bdbf 	.word	0x0800bdbf
 800bd98:	0800bdcf 	.word	0x0800bdcf
 800bd9c:	0800bdcf 	.word	0x0800bdcf
 800bda0:	0800bdcf 	.word	0x0800bdcf
 800bda4:	0800bdc7 	.word	0x0800bdc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bda8:	f7fc fe0c 	bl	80089c4 <HAL_RCC_GetPCLK1Freq>
 800bdac:	61b8      	str	r0, [r7, #24]
        break;
 800bdae:	e013      	b.n	800bdd8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bdb0:	f7fc fe2a 	bl	8008a08 <HAL_RCC_GetPCLK2Freq>
 800bdb4:	61b8      	str	r0, [r7, #24]
        break;
 800bdb6:	e00f      	b.n	800bdd8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bdb8:	4b33      	ldr	r3, [pc, #204]	; (800be88 <UART_SetConfig+0x330>)
 800bdba:	61bb      	str	r3, [r7, #24]
        break;
 800bdbc:	e00c      	b.n	800bdd8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bdbe:	f7fc fd8b 	bl	80088d8 <HAL_RCC_GetSysClockFreq>
 800bdc2:	61b8      	str	r0, [r7, #24]
        break;
 800bdc4:	e008      	b.n	800bdd8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bdc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bdca:	61bb      	str	r3, [r7, #24]
        break;
 800bdcc:	e004      	b.n	800bdd8 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800bdce:	2300      	movs	r3, #0
 800bdd0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	77bb      	strb	r3, [r7, #30]
        break;
 800bdd6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bdd8:	69bb      	ldr	r3, [r7, #24]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	f000 8082 	beq.w	800bee4 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bde0:	69bb      	ldr	r3, [r7, #24]
 800bde2:	005a      	lsls	r2, r3, #1
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	685b      	ldr	r3, [r3, #4]
 800bde8:	085b      	lsrs	r3, r3, #1
 800bdea:	441a      	add	r2, r3
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	685b      	ldr	r3, [r3, #4]
 800bdf0:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdf4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bdf6:	693b      	ldr	r3, [r7, #16]
 800bdf8:	2b0f      	cmp	r3, #15
 800bdfa:	d916      	bls.n	800be2a <UART_SetConfig+0x2d2>
 800bdfc:	693b      	ldr	r3, [r7, #16]
 800bdfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be02:	d212      	bcs.n	800be2a <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800be04:	693b      	ldr	r3, [r7, #16]
 800be06:	b29b      	uxth	r3, r3
 800be08:	f023 030f 	bic.w	r3, r3, #15
 800be0c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800be0e:	693b      	ldr	r3, [r7, #16]
 800be10:	085b      	lsrs	r3, r3, #1
 800be12:	b29b      	uxth	r3, r3
 800be14:	f003 0307 	and.w	r3, r3, #7
 800be18:	b29a      	uxth	r2, r3
 800be1a:	89fb      	ldrh	r3, [r7, #14]
 800be1c:	4313      	orrs	r3, r2
 800be1e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	89fa      	ldrh	r2, [r7, #14]
 800be26:	60da      	str	r2, [r3, #12]
 800be28:	e05c      	b.n	800bee4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800be2a:	2301      	movs	r3, #1
 800be2c:	77bb      	strb	r3, [r7, #30]
 800be2e:	e059      	b.n	800bee4 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800be30:	7ffb      	ldrb	r3, [r7, #31]
 800be32:	2b08      	cmp	r3, #8
 800be34:	d835      	bhi.n	800bea2 <UART_SetConfig+0x34a>
 800be36:	a201      	add	r2, pc, #4	; (adr r2, 800be3c <UART_SetConfig+0x2e4>)
 800be38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be3c:	0800be61 	.word	0x0800be61
 800be40:	0800be69 	.word	0x0800be69
 800be44:	0800be8d 	.word	0x0800be8d
 800be48:	0800bea3 	.word	0x0800bea3
 800be4c:	0800be93 	.word	0x0800be93
 800be50:	0800bea3 	.word	0x0800bea3
 800be54:	0800bea3 	.word	0x0800bea3
 800be58:	0800bea3 	.word	0x0800bea3
 800be5c:	0800be9b 	.word	0x0800be9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800be60:	f7fc fdb0 	bl	80089c4 <HAL_RCC_GetPCLK1Freq>
 800be64:	61b8      	str	r0, [r7, #24]
        break;
 800be66:	e021      	b.n	800beac <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800be68:	f7fc fdce 	bl	8008a08 <HAL_RCC_GetPCLK2Freq>
 800be6c:	61b8      	str	r0, [r7, #24]
        break;
 800be6e:	e01d      	b.n	800beac <UART_SetConfig+0x354>
 800be70:	40013800 	.word	0x40013800
 800be74:	40021000 	.word	0x40021000
 800be78:	40004400 	.word	0x40004400
 800be7c:	40004800 	.word	0x40004800
 800be80:	40004c00 	.word	0x40004c00
 800be84:	40005000 	.word	0x40005000
 800be88:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800be8c:	4b1b      	ldr	r3, [pc, #108]	; (800befc <UART_SetConfig+0x3a4>)
 800be8e:	61bb      	str	r3, [r7, #24]
        break;
 800be90:	e00c      	b.n	800beac <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800be92:	f7fc fd21 	bl	80088d8 <HAL_RCC_GetSysClockFreq>
 800be96:	61b8      	str	r0, [r7, #24]
        break;
 800be98:	e008      	b.n	800beac <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800be9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800be9e:	61bb      	str	r3, [r7, #24]
        break;
 800bea0:	e004      	b.n	800beac <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800bea2:	2300      	movs	r3, #0
 800bea4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bea6:	2301      	movs	r3, #1
 800bea8:	77bb      	strb	r3, [r7, #30]
        break;
 800beaa:	bf00      	nop
    }

    if (pclk != 0U)
 800beac:	69bb      	ldr	r3, [r7, #24]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d018      	beq.n	800bee4 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	685b      	ldr	r3, [r3, #4]
 800beb6:	085a      	lsrs	r2, r3, #1
 800beb8:	69bb      	ldr	r3, [r7, #24]
 800beba:	441a      	add	r2, r3
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	685b      	ldr	r3, [r3, #4]
 800bec0:	fbb2 f3f3 	udiv	r3, r2, r3
 800bec4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bec6:	693b      	ldr	r3, [r7, #16]
 800bec8:	2b0f      	cmp	r3, #15
 800beca:	d909      	bls.n	800bee0 <UART_SetConfig+0x388>
 800becc:	693b      	ldr	r3, [r7, #16]
 800bece:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bed2:	d205      	bcs.n	800bee0 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bed4:	693b      	ldr	r3, [r7, #16]
 800bed6:	b29a      	uxth	r2, r3
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	60da      	str	r2, [r3, #12]
 800bede:	e001      	b.n	800bee4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800bee0:	2301      	movs	r3, #1
 800bee2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2200      	movs	r2, #0
 800bee8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2200      	movs	r2, #0
 800beee:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800bef0:	7fbb      	ldrb	r3, [r7, #30]
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	3720      	adds	r7, #32
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}
 800befa:	bf00      	nop
 800befc:	007a1200 	.word	0x007a1200

0800bf00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bf00:	b480      	push	{r7}
 800bf02:	b083      	sub	sp, #12
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf0c:	f003 0301 	and.w	r3, r3, #1
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d00a      	beq.n	800bf2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	685b      	ldr	r3, [r3, #4]
 800bf1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	430a      	orrs	r2, r1
 800bf28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf2e:	f003 0302 	and.w	r3, r3, #2
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d00a      	beq.n	800bf4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	685b      	ldr	r3, [r3, #4]
 800bf3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	430a      	orrs	r2, r1
 800bf4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf50:	f003 0304 	and.w	r3, r3, #4
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d00a      	beq.n	800bf6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	685b      	ldr	r3, [r3, #4]
 800bf5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	430a      	orrs	r2, r1
 800bf6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf72:	f003 0308 	and.w	r3, r3, #8
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d00a      	beq.n	800bf90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	685b      	ldr	r3, [r3, #4]
 800bf80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	430a      	orrs	r2, r1
 800bf8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf94:	f003 0310 	and.w	r3, r3, #16
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d00a      	beq.n	800bfb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	689b      	ldr	r3, [r3, #8]
 800bfa2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	430a      	orrs	r2, r1
 800bfb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfb6:	f003 0320 	and.w	r3, r3, #32
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d00a      	beq.n	800bfd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	689b      	ldr	r3, [r3, #8]
 800bfc4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	430a      	orrs	r2, r1
 800bfd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d01a      	beq.n	800c016 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	685b      	ldr	r3, [r3, #4]
 800bfe6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	430a      	orrs	r2, r1
 800bff4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bffa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bffe:	d10a      	bne.n	800c016 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	685b      	ldr	r3, [r3, #4]
 800c006:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	430a      	orrs	r2, r1
 800c014:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c01a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d00a      	beq.n	800c038 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	685b      	ldr	r3, [r3, #4]
 800c028:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	430a      	orrs	r2, r1
 800c036:	605a      	str	r2, [r3, #4]
  }
}
 800c038:	bf00      	nop
 800c03a:	370c      	adds	r7, #12
 800c03c:	46bd      	mov	sp, r7
 800c03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c042:	4770      	bx	lr

0800c044 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b098      	sub	sp, #96	; 0x60
 800c048:	af02      	add	r7, sp, #8
 800c04a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2200      	movs	r2, #0
 800c050:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c054:	f7f8 f89a 	bl	800418c <HAL_GetTick>
 800c058:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	f003 0308 	and.w	r3, r3, #8
 800c064:	2b08      	cmp	r3, #8
 800c066:	d12e      	bne.n	800c0c6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c068:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c06c:	9300      	str	r3, [sp, #0]
 800c06e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c070:	2200      	movs	r2, #0
 800c072:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	f000 f88c 	bl	800c194 <UART_WaitOnFlagUntilTimeout>
 800c07c:	4603      	mov	r3, r0
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d021      	beq.n	800c0c6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c08a:	e853 3f00 	ldrex	r3, [r3]
 800c08e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c092:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c096:	653b      	str	r3, [r7, #80]	; 0x50
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	461a      	mov	r2, r3
 800c09e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0a0:	647b      	str	r3, [r7, #68]	; 0x44
 800c0a2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c0a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c0a8:	e841 2300 	strex	r3, r2, [r1]
 800c0ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c0ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d1e6      	bne.n	800c082 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2220      	movs	r2, #32
 800c0b8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	2200      	movs	r2, #0
 800c0be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c0c2:	2303      	movs	r3, #3
 800c0c4:	e062      	b.n	800c18c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	f003 0304 	and.w	r3, r3, #4
 800c0d0:	2b04      	cmp	r3, #4
 800c0d2:	d149      	bne.n	800c168 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c0d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c0d8:	9300      	str	r3, [sp, #0]
 800c0da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c0dc:	2200      	movs	r2, #0
 800c0de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f000 f856 	bl	800c194 <UART_WaitOnFlagUntilTimeout>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d03c      	beq.n	800c168 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f6:	e853 3f00 	ldrex	r3, [r3]
 800c0fa:	623b      	str	r3, [r7, #32]
   return(result);
 800c0fc:	6a3b      	ldr	r3, [r7, #32]
 800c0fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c102:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	461a      	mov	r2, r3
 800c10a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c10c:	633b      	str	r3, [r7, #48]	; 0x30
 800c10e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c110:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c112:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c114:	e841 2300 	strex	r3, r2, [r1]
 800c118:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d1e6      	bne.n	800c0ee <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	3308      	adds	r3, #8
 800c126:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c128:	693b      	ldr	r3, [r7, #16]
 800c12a:	e853 3f00 	ldrex	r3, [r3]
 800c12e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	f023 0301 	bic.w	r3, r3, #1
 800c136:	64bb      	str	r3, [r7, #72]	; 0x48
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	3308      	adds	r3, #8
 800c13e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c140:	61fa      	str	r2, [r7, #28]
 800c142:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c144:	69b9      	ldr	r1, [r7, #24]
 800c146:	69fa      	ldr	r2, [r7, #28]
 800c148:	e841 2300 	strex	r3, r2, [r1]
 800c14c:	617b      	str	r3, [r7, #20]
   return(result);
 800c14e:	697b      	ldr	r3, [r7, #20]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d1e5      	bne.n	800c120 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2220      	movs	r2, #32
 800c158:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2200      	movs	r2, #0
 800c160:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c164:	2303      	movs	r3, #3
 800c166:	e011      	b.n	800c18c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2220      	movs	r2, #32
 800c16c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2220      	movs	r2, #32
 800c172:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2200      	movs	r2, #0
 800c17a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2200      	movs	r2, #0
 800c180:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2200      	movs	r2, #0
 800c186:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800c18a:	2300      	movs	r3, #0
}
 800c18c:	4618      	mov	r0, r3
 800c18e:	3758      	adds	r7, #88	; 0x58
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}

0800c194 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b084      	sub	sp, #16
 800c198:	af00      	add	r7, sp, #0
 800c19a:	60f8      	str	r0, [r7, #12]
 800c19c:	60b9      	str	r1, [r7, #8]
 800c19e:	603b      	str	r3, [r7, #0]
 800c1a0:	4613      	mov	r3, r2
 800c1a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c1a4:	e049      	b.n	800c23a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c1a6:	69bb      	ldr	r3, [r7, #24]
 800c1a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1ac:	d045      	beq.n	800c23a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c1ae:	f7f7 ffed 	bl	800418c <HAL_GetTick>
 800c1b2:	4602      	mov	r2, r0
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	1ad3      	subs	r3, r2, r3
 800c1b8:	69ba      	ldr	r2, [r7, #24]
 800c1ba:	429a      	cmp	r2, r3
 800c1bc:	d302      	bcc.n	800c1c4 <UART_WaitOnFlagUntilTimeout+0x30>
 800c1be:	69bb      	ldr	r3, [r7, #24]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d101      	bne.n	800c1c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c1c4:	2303      	movs	r3, #3
 800c1c6:	e048      	b.n	800c25a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	f003 0304 	and.w	r3, r3, #4
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d031      	beq.n	800c23a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	69db      	ldr	r3, [r3, #28]
 800c1dc:	f003 0308 	and.w	r3, r3, #8
 800c1e0:	2b08      	cmp	r3, #8
 800c1e2:	d110      	bne.n	800c206 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	2208      	movs	r2, #8
 800c1ea:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800c1ec:	68f8      	ldr	r0, [r7, #12]
 800c1ee:	f000 f8ff 	bl	800c3f0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	2208      	movs	r2, #8
 800c1f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800c202:	2301      	movs	r3, #1
 800c204:	e029      	b.n	800c25a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	69db      	ldr	r3, [r3, #28]
 800c20c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c210:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c214:	d111      	bne.n	800c23a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c21e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c220:	68f8      	ldr	r0, [r7, #12]
 800c222:	f000 f8e5 	bl	800c3f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	2220      	movs	r2, #32
 800c22a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	2200      	movs	r2, #0
 800c232:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800c236:	2303      	movs	r3, #3
 800c238:	e00f      	b.n	800c25a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	69da      	ldr	r2, [r3, #28]
 800c240:	68bb      	ldr	r3, [r7, #8]
 800c242:	4013      	ands	r3, r2
 800c244:	68ba      	ldr	r2, [r7, #8]
 800c246:	429a      	cmp	r2, r3
 800c248:	bf0c      	ite	eq
 800c24a:	2301      	moveq	r3, #1
 800c24c:	2300      	movne	r3, #0
 800c24e:	b2db      	uxtb	r3, r3
 800c250:	461a      	mov	r2, r3
 800c252:	79fb      	ldrb	r3, [r7, #7]
 800c254:	429a      	cmp	r2, r3
 800c256:	d0a6      	beq.n	800c1a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c258:	2300      	movs	r3, #0
}
 800c25a:	4618      	mov	r0, r3
 800c25c:	3710      	adds	r7, #16
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}
	...

0800c264 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b096      	sub	sp, #88	; 0x58
 800c268:	af00      	add	r7, sp, #0
 800c26a:	60f8      	str	r0, [r7, #12]
 800c26c:	60b9      	str	r1, [r7, #8]
 800c26e:	4613      	mov	r3, r2
 800c270:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	68ba      	ldr	r2, [r7, #8]
 800c276:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	88fa      	ldrh	r2, [r7, #6]
 800c27c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	2200      	movs	r2, #0
 800c284:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	2222      	movs	r2, #34	; 0x22
 800c28c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c294:	2b00      	cmp	r3, #0
 800c296:	d028      	beq.n	800c2ea <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c29c:	4a3e      	ldr	r2, [pc, #248]	; (800c398 <UART_Start_Receive_DMA+0x134>)
 800c29e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c2a4:	4a3d      	ldr	r2, [pc, #244]	; (800c39c <UART_Start_Receive_DMA+0x138>)
 800c2a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c2ac:	4a3c      	ldr	r2, [pc, #240]	; (800c3a0 <UART_Start_Receive_DMA+0x13c>)
 800c2ae:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	3324      	adds	r3, #36	; 0x24
 800c2c2:	4619      	mov	r1, r3
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2c8:	461a      	mov	r2, r3
 800c2ca:	88fb      	ldrh	r3, [r7, #6]
 800c2cc:	f7fa f800 	bl	80062d0 <HAL_DMA_Start_IT>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d009      	beq.n	800c2ea <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	2210      	movs	r2, #16
 800c2da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	2220      	movs	r2, #32
 800c2e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800c2e6:	2301      	movs	r3, #1
 800c2e8:	e051      	b.n	800c38e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	691b      	ldr	r3, [r3, #16]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d018      	beq.n	800c324 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2fa:	e853 3f00 	ldrex	r3, [r3]
 800c2fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c302:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c306:	657b      	str	r3, [r7, #84]	; 0x54
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	461a      	mov	r2, r3
 800c30e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c310:	64bb      	str	r3, [r7, #72]	; 0x48
 800c312:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c314:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c316:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c318:	e841 2300 	strex	r3, r2, [r1]
 800c31c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c31e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c320:	2b00      	cmp	r3, #0
 800c322:	d1e6      	bne.n	800c2f2 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	3308      	adds	r3, #8
 800c32a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c32c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c32e:	e853 3f00 	ldrex	r3, [r3]
 800c332:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c336:	f043 0301 	orr.w	r3, r3, #1
 800c33a:	653b      	str	r3, [r7, #80]	; 0x50
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	3308      	adds	r3, #8
 800c342:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c344:	637a      	str	r2, [r7, #52]	; 0x34
 800c346:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c348:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c34a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c34c:	e841 2300 	strex	r3, r2, [r1]
 800c350:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c354:	2b00      	cmp	r3, #0
 800c356:	d1e5      	bne.n	800c324 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	3308      	adds	r3, #8
 800c35e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c360:	697b      	ldr	r3, [r7, #20]
 800c362:	e853 3f00 	ldrex	r3, [r3]
 800c366:	613b      	str	r3, [r7, #16]
   return(result);
 800c368:	693b      	ldr	r3, [r7, #16]
 800c36a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c36e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	3308      	adds	r3, #8
 800c376:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c378:	623a      	str	r2, [r7, #32]
 800c37a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c37c:	69f9      	ldr	r1, [r7, #28]
 800c37e:	6a3a      	ldr	r2, [r7, #32]
 800c380:	e841 2300 	strex	r3, r2, [r1]
 800c384:	61bb      	str	r3, [r7, #24]
   return(result);
 800c386:	69bb      	ldr	r3, [r7, #24]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d1e5      	bne.n	800c358 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800c38c:	2300      	movs	r3, #0
}
 800c38e:	4618      	mov	r0, r3
 800c390:	3758      	adds	r7, #88	; 0x58
 800c392:	46bd      	mov	sp, r7
 800c394:	bd80      	pop	{r7, pc}
 800c396:	bf00      	nop
 800c398:	0800c569 	.word	0x0800c569
 800c39c:	0800c68f 	.word	0x0800c68f
 800c3a0:	0800c6cd 	.word	0x0800c6cd

0800c3a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	b089      	sub	sp, #36	; 0x24
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	e853 3f00 	ldrex	r3, [r3]
 800c3b8:	60bb      	str	r3, [r7, #8]
   return(result);
 800c3ba:	68bb      	ldr	r3, [r7, #8]
 800c3bc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c3c0:	61fb      	str	r3, [r7, #28]
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	461a      	mov	r2, r3
 800c3c8:	69fb      	ldr	r3, [r7, #28]
 800c3ca:	61bb      	str	r3, [r7, #24]
 800c3cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3ce:	6979      	ldr	r1, [r7, #20]
 800c3d0:	69ba      	ldr	r2, [r7, #24]
 800c3d2:	e841 2300 	strex	r3, r2, [r1]
 800c3d6:	613b      	str	r3, [r7, #16]
   return(result);
 800c3d8:	693b      	ldr	r3, [r7, #16]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d1e6      	bne.n	800c3ac <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	2220      	movs	r2, #32
 800c3e2:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800c3e4:	bf00      	nop
 800c3e6:	3724      	adds	r7, #36	; 0x24
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ee:	4770      	bx	lr

0800c3f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c3f0:	b480      	push	{r7}
 800c3f2:	b095      	sub	sp, #84	; 0x54
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c400:	e853 3f00 	ldrex	r3, [r3]
 800c404:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c408:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c40c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	461a      	mov	r2, r3
 800c414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c416:	643b      	str	r3, [r7, #64]	; 0x40
 800c418:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c41a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c41c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c41e:	e841 2300 	strex	r3, r2, [r1]
 800c422:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c426:	2b00      	cmp	r3, #0
 800c428:	d1e6      	bne.n	800c3f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	3308      	adds	r3, #8
 800c430:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c432:	6a3b      	ldr	r3, [r7, #32]
 800c434:	e853 3f00 	ldrex	r3, [r3]
 800c438:	61fb      	str	r3, [r7, #28]
   return(result);
 800c43a:	69fb      	ldr	r3, [r7, #28]
 800c43c:	f023 0301 	bic.w	r3, r3, #1
 800c440:	64bb      	str	r3, [r7, #72]	; 0x48
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	3308      	adds	r3, #8
 800c448:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c44a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c44c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c44e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c450:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c452:	e841 2300 	strex	r3, r2, [r1]
 800c456:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d1e5      	bne.n	800c42a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c462:	2b01      	cmp	r3, #1
 800c464:	d118      	bne.n	800c498 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	e853 3f00 	ldrex	r3, [r3]
 800c472:	60bb      	str	r3, [r7, #8]
   return(result);
 800c474:	68bb      	ldr	r3, [r7, #8]
 800c476:	f023 0310 	bic.w	r3, r3, #16
 800c47a:	647b      	str	r3, [r7, #68]	; 0x44
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	461a      	mov	r2, r3
 800c482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c484:	61bb      	str	r3, [r7, #24]
 800c486:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c488:	6979      	ldr	r1, [r7, #20]
 800c48a:	69ba      	ldr	r2, [r7, #24]
 800c48c:	e841 2300 	strex	r3, r2, [r1]
 800c490:	613b      	str	r3, [r7, #16]
   return(result);
 800c492:	693b      	ldr	r3, [r7, #16]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d1e6      	bne.n	800c466 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2220      	movs	r2, #32
 800c49c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	669a      	str	r2, [r3, #104]	; 0x68
}
 800c4ac:	bf00      	nop
 800c4ae:	3754      	adds	r7, #84	; 0x54
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b6:	4770      	bx	lr

0800c4b8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b090      	sub	sp, #64	; 0x40
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4c4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	699b      	ldr	r3, [r3, #24]
 800c4ca:	2b20      	cmp	r3, #32
 800c4cc:	d037      	beq.n	800c53e <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800c4ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c4d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	3308      	adds	r3, #8
 800c4dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4e0:	e853 3f00 	ldrex	r3, [r3]
 800c4e4:	623b      	str	r3, [r7, #32]
   return(result);
 800c4e6:	6a3b      	ldr	r3, [r7, #32]
 800c4e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c4ec:	63bb      	str	r3, [r7, #56]	; 0x38
 800c4ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	3308      	adds	r3, #8
 800c4f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c4f6:	633a      	str	r2, [r7, #48]	; 0x30
 800c4f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c4fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4fe:	e841 2300 	strex	r3, r2, [r1]
 800c502:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c506:	2b00      	cmp	r3, #0
 800c508:	d1e5      	bne.n	800c4d6 <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c50a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c510:	693b      	ldr	r3, [r7, #16]
 800c512:	e853 3f00 	ldrex	r3, [r3]
 800c516:	60fb      	str	r3, [r7, #12]
   return(result);
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c51e:	637b      	str	r3, [r7, #52]	; 0x34
 800c520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	461a      	mov	r2, r3
 800c526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c528:	61fb      	str	r3, [r7, #28]
 800c52a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c52c:	69b9      	ldr	r1, [r7, #24]
 800c52e:	69fa      	ldr	r2, [r7, #28]
 800c530:	e841 2300 	strex	r3, r2, [r1]
 800c534:	617b      	str	r3, [r7, #20]
   return(result);
 800c536:	697b      	ldr	r3, [r7, #20]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d1e6      	bne.n	800c50a <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c53c:	e002      	b.n	800c544 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 800c53e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c540:	f7f6 fdf4 	bl	800312c <HAL_UART_TxCpltCallback>
}
 800c544:	bf00      	nop
 800c546:	3740      	adds	r7, #64	; 0x40
 800c548:	46bd      	mov	sp, r7
 800c54a:	bd80      	pop	{r7, pc}

0800c54c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b084      	sub	sp, #16
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c558:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c55a:	68f8      	ldr	r0, [r7, #12]
 800c55c:	f7ff fad4 	bl	800bb08 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c560:	bf00      	nop
 800c562:	3710      	adds	r7, #16
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}

0800c568 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b09c      	sub	sp, #112	; 0x70
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c574:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	699b      	ldr	r3, [r3, #24]
 800c57a:	2b20      	cmp	r3, #32
 800c57c:	d071      	beq.n	800c662 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800c57e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c580:	2200      	movs	r2, #0
 800c582:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c586:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c58c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c58e:	e853 3f00 	ldrex	r3, [r3]
 800c592:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c594:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c596:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c59a:	66bb      	str	r3, [r7, #104]	; 0x68
 800c59c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	461a      	mov	r2, r3
 800c5a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c5a4:	65bb      	str	r3, [r7, #88]	; 0x58
 800c5a6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c5aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c5ac:	e841 2300 	strex	r3, r2, [r1]
 800c5b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c5b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d1e6      	bne.n	800c586 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	3308      	adds	r3, #8
 800c5be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5c2:	e853 3f00 	ldrex	r3, [r3]
 800c5c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c5c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5ca:	f023 0301 	bic.w	r3, r3, #1
 800c5ce:	667b      	str	r3, [r7, #100]	; 0x64
 800c5d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	3308      	adds	r3, #8
 800c5d6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c5d8:	647a      	str	r2, [r7, #68]	; 0x44
 800c5da:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c5de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c5e0:	e841 2300 	strex	r3, r2, [r1]
 800c5e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c5e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d1e5      	bne.n	800c5b8 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c5ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	3308      	adds	r3, #8
 800c5f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5f6:	e853 3f00 	ldrex	r3, [r3]
 800c5fa:	623b      	str	r3, [r7, #32]
   return(result);
 800c5fc:	6a3b      	ldr	r3, [r7, #32]
 800c5fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c602:	663b      	str	r3, [r7, #96]	; 0x60
 800c604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	3308      	adds	r3, #8
 800c60a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c60c:	633a      	str	r2, [r7, #48]	; 0x30
 800c60e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c610:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c612:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c614:	e841 2300 	strex	r3, r2, [r1]
 800c618:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d1e5      	bne.n	800c5ec <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c622:	2220      	movs	r2, #32
 800c624:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c628:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c62a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c62c:	2b01      	cmp	r3, #1
 800c62e:	d118      	bne.n	800c662 <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c630:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c636:	693b      	ldr	r3, [r7, #16]
 800c638:	e853 3f00 	ldrex	r3, [r3]
 800c63c:	60fb      	str	r3, [r7, #12]
   return(result);
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	f023 0310 	bic.w	r3, r3, #16
 800c644:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c646:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	461a      	mov	r2, r3
 800c64c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c64e:	61fb      	str	r3, [r7, #28]
 800c650:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c652:	69b9      	ldr	r1, [r7, #24]
 800c654:	69fa      	ldr	r2, [r7, #28]
 800c656:	e841 2300 	strex	r3, r2, [r1]
 800c65a:	617b      	str	r3, [r7, #20]
   return(result);
 800c65c:	697b      	ldr	r3, [r7, #20]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d1e6      	bne.n	800c630 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c664:	2200      	movs	r2, #0
 800c666:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c66a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c66c:	2b01      	cmp	r3, #1
 800c66e:	d107      	bne.n	800c680 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c672:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c676:	4619      	mov	r1, r3
 800c678:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c67a:	f7f4 fc11 	bl	8000ea0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c67e:	e002      	b.n	800c686 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800c680:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c682:	f7ff fa4b 	bl	800bb1c <HAL_UART_RxCpltCallback>
}
 800c686:	bf00      	nop
 800c688:	3770      	adds	r7, #112	; 0x70
 800c68a:	46bd      	mov	sp, r7
 800c68c:	bd80      	pop	{r7, pc}

0800c68e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c68e:	b580      	push	{r7, lr}
 800c690:	b084      	sub	sp, #16
 800c692:	af00      	add	r7, sp, #0
 800c694:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c69a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	2201      	movs	r2, #1
 800c6a0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c6a6:	2b01      	cmp	r3, #1
 800c6a8:	d109      	bne.n	800c6be <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c6b0:	085b      	lsrs	r3, r3, #1
 800c6b2:	b29b      	uxth	r3, r3
 800c6b4:	4619      	mov	r1, r3
 800c6b6:	68f8      	ldr	r0, [r7, #12]
 800c6b8:	f7f4 fbf2 	bl	8000ea0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c6bc:	e002      	b.n	800c6c4 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800c6be:	68f8      	ldr	r0, [r7, #12]
 800c6c0:	f7ff fa36 	bl	800bb30 <HAL_UART_RxHalfCpltCallback>
}
 800c6c4:	bf00      	nop
 800c6c6:	3710      	adds	r7, #16
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	bd80      	pop	{r7, pc}

0800c6cc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b086      	sub	sp, #24
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6d8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c6da:	697b      	ldr	r3, [r7, #20]
 800c6dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c6de:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c6e0:	697b      	ldr	r3, [r7, #20]
 800c6e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c6e6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c6e8:	697b      	ldr	r3, [r7, #20]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	689b      	ldr	r3, [r3, #8]
 800c6ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6f2:	2b80      	cmp	r3, #128	; 0x80
 800c6f4:	d109      	bne.n	800c70a <UART_DMAError+0x3e>
 800c6f6:	693b      	ldr	r3, [r7, #16]
 800c6f8:	2b21      	cmp	r3, #33	; 0x21
 800c6fa:	d106      	bne.n	800c70a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c6fc:	697b      	ldr	r3, [r7, #20]
 800c6fe:	2200      	movs	r2, #0
 800c700:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800c704:	6978      	ldr	r0, [r7, #20]
 800c706:	f7ff fe4d 	bl	800c3a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c70a:	697b      	ldr	r3, [r7, #20]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	689b      	ldr	r3, [r3, #8]
 800c710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c714:	2b40      	cmp	r3, #64	; 0x40
 800c716:	d109      	bne.n	800c72c <UART_DMAError+0x60>
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	2b22      	cmp	r3, #34	; 0x22
 800c71c:	d106      	bne.n	800c72c <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c71e:	697b      	ldr	r3, [r7, #20]
 800c720:	2200      	movs	r2, #0
 800c722:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800c726:	6978      	ldr	r0, [r7, #20]
 800c728:	f7ff fe62 	bl	800c3f0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c72c:	697b      	ldr	r3, [r7, #20]
 800c72e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c732:	f043 0210 	orr.w	r2, r3, #16
 800c736:	697b      	ldr	r3, [r7, #20]
 800c738:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c73c:	6978      	ldr	r0, [r7, #20]
 800c73e:	f7ff fa01 	bl	800bb44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c742:	bf00      	nop
 800c744:	3718      	adds	r7, #24
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}

0800c74a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c74a:	b580      	push	{r7, lr}
 800c74c:	b084      	sub	sp, #16
 800c74e:	af00      	add	r7, sp, #0
 800c750:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c756:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	2200      	movs	r2, #0
 800c75c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	2200      	movs	r2, #0
 800c764:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c768:	68f8      	ldr	r0, [r7, #12]
 800c76a:	f7ff f9eb 	bl	800bb44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c76e:	bf00      	nop
 800c770:	3710      	adds	r7, #16
 800c772:	46bd      	mov	sp, r7
 800c774:	bd80      	pop	{r7, pc}

0800c776 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c776:	b580      	push	{r7, lr}
 800c778:	b088      	sub	sp, #32
 800c77a:	af00      	add	r7, sp, #0
 800c77c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	e853 3f00 	ldrex	r3, [r3]
 800c78a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c792:	61fb      	str	r3, [r7, #28]
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	461a      	mov	r2, r3
 800c79a:	69fb      	ldr	r3, [r7, #28]
 800c79c:	61bb      	str	r3, [r7, #24]
 800c79e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7a0:	6979      	ldr	r1, [r7, #20]
 800c7a2:	69ba      	ldr	r2, [r7, #24]
 800c7a4:	e841 2300 	strex	r3, r2, [r1]
 800c7a8:	613b      	str	r3, [r7, #16]
   return(result);
 800c7aa:	693b      	ldr	r3, [r7, #16]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d1e6      	bne.n	800c77e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2220      	movs	r2, #32
 800c7b4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	f7f6 fcb5 	bl	800312c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c7c2:	bf00      	nop
 800c7c4:	3720      	adds	r7, #32
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd80      	pop	{r7, pc}

0800c7ca <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c7ca:	b480      	push	{r7}
 800c7cc:	b083      	sub	sp, #12
 800c7ce:	af00      	add	r7, sp, #0
 800c7d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c7d2:	bf00      	nop
 800c7d4:	370c      	adds	r7, #12
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7dc:	4770      	bx	lr

0800c7de <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c7de:	b580      	push	{r7, lr}
 800c7e0:	b08c      	sub	sp, #48	; 0x30
 800c7e2:	af00      	add	r7, sp, #0
 800c7e4:	60f8      	str	r0, [r7, #12]
 800c7e6:	60b9      	str	r1, [r7, #8]
 800c7e8:	4613      	mov	r3, r2
 800c7ea:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c7f2:	2b20      	cmp	r3, #32
 800c7f4:	d142      	bne.n	800c87c <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c7f6:	68bb      	ldr	r3, [r7, #8]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d002      	beq.n	800c802 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800c7fc:	88fb      	ldrh	r3, [r7, #6]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d101      	bne.n	800c806 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800c802:	2301      	movs	r3, #1
 800c804:	e03b      	b.n	800c87e <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	2201      	movs	r2, #1
 800c80a:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	2200      	movs	r2, #0
 800c810:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800c812:	88fb      	ldrh	r3, [r7, #6]
 800c814:	461a      	mov	r2, r3
 800c816:	68b9      	ldr	r1, [r7, #8]
 800c818:	68f8      	ldr	r0, [r7, #12]
 800c81a:	f7ff fd23 	bl	800c264 <UART_Start_Receive_DMA>
 800c81e:	4603      	mov	r3, r0
 800c820:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800c824:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d124      	bne.n	800c876 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c830:	2b01      	cmp	r3, #1
 800c832:	d11d      	bne.n	800c870 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	2210      	movs	r2, #16
 800c83a:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c842:	69bb      	ldr	r3, [r7, #24]
 800c844:	e853 3f00 	ldrex	r3, [r3]
 800c848:	617b      	str	r3, [r7, #20]
   return(result);
 800c84a:	697b      	ldr	r3, [r7, #20]
 800c84c:	f043 0310 	orr.w	r3, r3, #16
 800c850:	62bb      	str	r3, [r7, #40]	; 0x28
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	461a      	mov	r2, r3
 800c858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c85a:	627b      	str	r3, [r7, #36]	; 0x24
 800c85c:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c85e:	6a39      	ldr	r1, [r7, #32]
 800c860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c862:	e841 2300 	strex	r3, r2, [r1]
 800c866:	61fb      	str	r3, [r7, #28]
   return(result);
 800c868:	69fb      	ldr	r3, [r7, #28]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d1e6      	bne.n	800c83c <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800c86e:	e002      	b.n	800c876 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800c870:	2301      	movs	r3, #1
 800c872:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800c876:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c87a:	e000      	b.n	800c87e <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800c87c:	2302      	movs	r3, #2
  }
}
 800c87e:	4618      	mov	r0, r3
 800c880:	3730      	adds	r7, #48	; 0x30
 800c882:	46bd      	mov	sp, r7
 800c884:	bd80      	pop	{r7, pc}

0800c886 <__cvt>:
 800c886:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c88a:	ec55 4b10 	vmov	r4, r5, d0
 800c88e:	2d00      	cmp	r5, #0
 800c890:	460e      	mov	r6, r1
 800c892:	4619      	mov	r1, r3
 800c894:	462b      	mov	r3, r5
 800c896:	bfbb      	ittet	lt
 800c898:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c89c:	461d      	movlt	r5, r3
 800c89e:	2300      	movge	r3, #0
 800c8a0:	232d      	movlt	r3, #45	; 0x2d
 800c8a2:	700b      	strb	r3, [r1, #0]
 800c8a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c8a6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c8aa:	4691      	mov	r9, r2
 800c8ac:	f023 0820 	bic.w	r8, r3, #32
 800c8b0:	bfbc      	itt	lt
 800c8b2:	4622      	movlt	r2, r4
 800c8b4:	4614      	movlt	r4, r2
 800c8b6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c8ba:	d005      	beq.n	800c8c8 <__cvt+0x42>
 800c8bc:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c8c0:	d100      	bne.n	800c8c4 <__cvt+0x3e>
 800c8c2:	3601      	adds	r6, #1
 800c8c4:	2102      	movs	r1, #2
 800c8c6:	e000      	b.n	800c8ca <__cvt+0x44>
 800c8c8:	2103      	movs	r1, #3
 800c8ca:	ab03      	add	r3, sp, #12
 800c8cc:	9301      	str	r3, [sp, #4]
 800c8ce:	ab02      	add	r3, sp, #8
 800c8d0:	9300      	str	r3, [sp, #0]
 800c8d2:	ec45 4b10 	vmov	d0, r4, r5
 800c8d6:	4653      	mov	r3, sl
 800c8d8:	4632      	mov	r2, r6
 800c8da:	f000 fe69 	bl	800d5b0 <_dtoa_r>
 800c8de:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c8e2:	4607      	mov	r7, r0
 800c8e4:	d102      	bne.n	800c8ec <__cvt+0x66>
 800c8e6:	f019 0f01 	tst.w	r9, #1
 800c8ea:	d022      	beq.n	800c932 <__cvt+0xac>
 800c8ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c8f0:	eb07 0906 	add.w	r9, r7, r6
 800c8f4:	d110      	bne.n	800c918 <__cvt+0x92>
 800c8f6:	783b      	ldrb	r3, [r7, #0]
 800c8f8:	2b30      	cmp	r3, #48	; 0x30
 800c8fa:	d10a      	bne.n	800c912 <__cvt+0x8c>
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	2300      	movs	r3, #0
 800c900:	4620      	mov	r0, r4
 800c902:	4629      	mov	r1, r5
 800c904:	f7f4 f8e0 	bl	8000ac8 <__aeabi_dcmpeq>
 800c908:	b918      	cbnz	r0, 800c912 <__cvt+0x8c>
 800c90a:	f1c6 0601 	rsb	r6, r6, #1
 800c90e:	f8ca 6000 	str.w	r6, [sl]
 800c912:	f8da 3000 	ldr.w	r3, [sl]
 800c916:	4499      	add	r9, r3
 800c918:	2200      	movs	r2, #0
 800c91a:	2300      	movs	r3, #0
 800c91c:	4620      	mov	r0, r4
 800c91e:	4629      	mov	r1, r5
 800c920:	f7f4 f8d2 	bl	8000ac8 <__aeabi_dcmpeq>
 800c924:	b108      	cbz	r0, 800c92a <__cvt+0xa4>
 800c926:	f8cd 900c 	str.w	r9, [sp, #12]
 800c92a:	2230      	movs	r2, #48	; 0x30
 800c92c:	9b03      	ldr	r3, [sp, #12]
 800c92e:	454b      	cmp	r3, r9
 800c930:	d307      	bcc.n	800c942 <__cvt+0xbc>
 800c932:	9b03      	ldr	r3, [sp, #12]
 800c934:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c936:	1bdb      	subs	r3, r3, r7
 800c938:	4638      	mov	r0, r7
 800c93a:	6013      	str	r3, [r2, #0]
 800c93c:	b004      	add	sp, #16
 800c93e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c942:	1c59      	adds	r1, r3, #1
 800c944:	9103      	str	r1, [sp, #12]
 800c946:	701a      	strb	r2, [r3, #0]
 800c948:	e7f0      	b.n	800c92c <__cvt+0xa6>

0800c94a <__exponent>:
 800c94a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c94c:	4603      	mov	r3, r0
 800c94e:	2900      	cmp	r1, #0
 800c950:	bfb8      	it	lt
 800c952:	4249      	neglt	r1, r1
 800c954:	f803 2b02 	strb.w	r2, [r3], #2
 800c958:	bfb4      	ite	lt
 800c95a:	222d      	movlt	r2, #45	; 0x2d
 800c95c:	222b      	movge	r2, #43	; 0x2b
 800c95e:	2909      	cmp	r1, #9
 800c960:	7042      	strb	r2, [r0, #1]
 800c962:	dd2a      	ble.n	800c9ba <__exponent+0x70>
 800c964:	f10d 0207 	add.w	r2, sp, #7
 800c968:	4617      	mov	r7, r2
 800c96a:	260a      	movs	r6, #10
 800c96c:	4694      	mov	ip, r2
 800c96e:	fb91 f5f6 	sdiv	r5, r1, r6
 800c972:	fb06 1415 	mls	r4, r6, r5, r1
 800c976:	3430      	adds	r4, #48	; 0x30
 800c978:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800c97c:	460c      	mov	r4, r1
 800c97e:	2c63      	cmp	r4, #99	; 0x63
 800c980:	f102 32ff 	add.w	r2, r2, #4294967295
 800c984:	4629      	mov	r1, r5
 800c986:	dcf1      	bgt.n	800c96c <__exponent+0x22>
 800c988:	3130      	adds	r1, #48	; 0x30
 800c98a:	f1ac 0402 	sub.w	r4, ip, #2
 800c98e:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c992:	1c41      	adds	r1, r0, #1
 800c994:	4622      	mov	r2, r4
 800c996:	42ba      	cmp	r2, r7
 800c998:	d30a      	bcc.n	800c9b0 <__exponent+0x66>
 800c99a:	f10d 0209 	add.w	r2, sp, #9
 800c99e:	eba2 020c 	sub.w	r2, r2, ip
 800c9a2:	42bc      	cmp	r4, r7
 800c9a4:	bf88      	it	hi
 800c9a6:	2200      	movhi	r2, #0
 800c9a8:	4413      	add	r3, r2
 800c9aa:	1a18      	subs	r0, r3, r0
 800c9ac:	b003      	add	sp, #12
 800c9ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9b0:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c9b4:	f801 5f01 	strb.w	r5, [r1, #1]!
 800c9b8:	e7ed      	b.n	800c996 <__exponent+0x4c>
 800c9ba:	2330      	movs	r3, #48	; 0x30
 800c9bc:	3130      	adds	r1, #48	; 0x30
 800c9be:	7083      	strb	r3, [r0, #2]
 800c9c0:	70c1      	strb	r1, [r0, #3]
 800c9c2:	1d03      	adds	r3, r0, #4
 800c9c4:	e7f1      	b.n	800c9aa <__exponent+0x60>
	...

0800c9c8 <_printf_float>:
 800c9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9cc:	ed2d 8b02 	vpush	{d8}
 800c9d0:	b08d      	sub	sp, #52	; 0x34
 800c9d2:	460c      	mov	r4, r1
 800c9d4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c9d8:	4616      	mov	r6, r2
 800c9da:	461f      	mov	r7, r3
 800c9dc:	4605      	mov	r5, r0
 800c9de:	f000 fce7 	bl	800d3b0 <_localeconv_r>
 800c9e2:	f8d0 a000 	ldr.w	sl, [r0]
 800c9e6:	4650      	mov	r0, sl
 800c9e8:	f7f3 fc42 	bl	8000270 <strlen>
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	930a      	str	r3, [sp, #40]	; 0x28
 800c9f0:	6823      	ldr	r3, [r4, #0]
 800c9f2:	9305      	str	r3, [sp, #20]
 800c9f4:	f8d8 3000 	ldr.w	r3, [r8]
 800c9f8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c9fc:	3307      	adds	r3, #7
 800c9fe:	f023 0307 	bic.w	r3, r3, #7
 800ca02:	f103 0208 	add.w	r2, r3, #8
 800ca06:	f8c8 2000 	str.w	r2, [r8]
 800ca0a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ca0e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ca12:	9307      	str	r3, [sp, #28]
 800ca14:	f8cd 8018 	str.w	r8, [sp, #24]
 800ca18:	ee08 0a10 	vmov	s16, r0
 800ca1c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800ca20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ca24:	4b9e      	ldr	r3, [pc, #632]	; (800cca0 <_printf_float+0x2d8>)
 800ca26:	f04f 32ff 	mov.w	r2, #4294967295
 800ca2a:	f7f4 f87f 	bl	8000b2c <__aeabi_dcmpun>
 800ca2e:	bb88      	cbnz	r0, 800ca94 <_printf_float+0xcc>
 800ca30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ca34:	4b9a      	ldr	r3, [pc, #616]	; (800cca0 <_printf_float+0x2d8>)
 800ca36:	f04f 32ff 	mov.w	r2, #4294967295
 800ca3a:	f7f4 f859 	bl	8000af0 <__aeabi_dcmple>
 800ca3e:	bb48      	cbnz	r0, 800ca94 <_printf_float+0xcc>
 800ca40:	2200      	movs	r2, #0
 800ca42:	2300      	movs	r3, #0
 800ca44:	4640      	mov	r0, r8
 800ca46:	4649      	mov	r1, r9
 800ca48:	f7f4 f848 	bl	8000adc <__aeabi_dcmplt>
 800ca4c:	b110      	cbz	r0, 800ca54 <_printf_float+0x8c>
 800ca4e:	232d      	movs	r3, #45	; 0x2d
 800ca50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca54:	4a93      	ldr	r2, [pc, #588]	; (800cca4 <_printf_float+0x2dc>)
 800ca56:	4b94      	ldr	r3, [pc, #592]	; (800cca8 <_printf_float+0x2e0>)
 800ca58:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ca5c:	bf94      	ite	ls
 800ca5e:	4690      	movls	r8, r2
 800ca60:	4698      	movhi	r8, r3
 800ca62:	2303      	movs	r3, #3
 800ca64:	6123      	str	r3, [r4, #16]
 800ca66:	9b05      	ldr	r3, [sp, #20]
 800ca68:	f023 0304 	bic.w	r3, r3, #4
 800ca6c:	6023      	str	r3, [r4, #0]
 800ca6e:	f04f 0900 	mov.w	r9, #0
 800ca72:	9700      	str	r7, [sp, #0]
 800ca74:	4633      	mov	r3, r6
 800ca76:	aa0b      	add	r2, sp, #44	; 0x2c
 800ca78:	4621      	mov	r1, r4
 800ca7a:	4628      	mov	r0, r5
 800ca7c:	f000 f9da 	bl	800ce34 <_printf_common>
 800ca80:	3001      	adds	r0, #1
 800ca82:	f040 8090 	bne.w	800cba6 <_printf_float+0x1de>
 800ca86:	f04f 30ff 	mov.w	r0, #4294967295
 800ca8a:	b00d      	add	sp, #52	; 0x34
 800ca8c:	ecbd 8b02 	vpop	{d8}
 800ca90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca94:	4642      	mov	r2, r8
 800ca96:	464b      	mov	r3, r9
 800ca98:	4640      	mov	r0, r8
 800ca9a:	4649      	mov	r1, r9
 800ca9c:	f7f4 f846 	bl	8000b2c <__aeabi_dcmpun>
 800caa0:	b140      	cbz	r0, 800cab4 <_printf_float+0xec>
 800caa2:	464b      	mov	r3, r9
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	bfbc      	itt	lt
 800caa8:	232d      	movlt	r3, #45	; 0x2d
 800caaa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800caae:	4a7f      	ldr	r2, [pc, #508]	; (800ccac <_printf_float+0x2e4>)
 800cab0:	4b7f      	ldr	r3, [pc, #508]	; (800ccb0 <_printf_float+0x2e8>)
 800cab2:	e7d1      	b.n	800ca58 <_printf_float+0x90>
 800cab4:	6863      	ldr	r3, [r4, #4]
 800cab6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800caba:	9206      	str	r2, [sp, #24]
 800cabc:	1c5a      	adds	r2, r3, #1
 800cabe:	d13f      	bne.n	800cb40 <_printf_float+0x178>
 800cac0:	2306      	movs	r3, #6
 800cac2:	6063      	str	r3, [r4, #4]
 800cac4:	9b05      	ldr	r3, [sp, #20]
 800cac6:	6861      	ldr	r1, [r4, #4]
 800cac8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800cacc:	2300      	movs	r3, #0
 800cace:	9303      	str	r3, [sp, #12]
 800cad0:	ab0a      	add	r3, sp, #40	; 0x28
 800cad2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800cad6:	ab09      	add	r3, sp, #36	; 0x24
 800cad8:	ec49 8b10 	vmov	d0, r8, r9
 800cadc:	9300      	str	r3, [sp, #0]
 800cade:	6022      	str	r2, [r4, #0]
 800cae0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cae4:	4628      	mov	r0, r5
 800cae6:	f7ff fece 	bl	800c886 <__cvt>
 800caea:	9b06      	ldr	r3, [sp, #24]
 800caec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800caee:	2b47      	cmp	r3, #71	; 0x47
 800caf0:	4680      	mov	r8, r0
 800caf2:	d108      	bne.n	800cb06 <_printf_float+0x13e>
 800caf4:	1cc8      	adds	r0, r1, #3
 800caf6:	db02      	blt.n	800cafe <_printf_float+0x136>
 800caf8:	6863      	ldr	r3, [r4, #4]
 800cafa:	4299      	cmp	r1, r3
 800cafc:	dd41      	ble.n	800cb82 <_printf_float+0x1ba>
 800cafe:	f1ab 0302 	sub.w	r3, fp, #2
 800cb02:	fa5f fb83 	uxtb.w	fp, r3
 800cb06:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cb0a:	d820      	bhi.n	800cb4e <_printf_float+0x186>
 800cb0c:	3901      	subs	r1, #1
 800cb0e:	465a      	mov	r2, fp
 800cb10:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cb14:	9109      	str	r1, [sp, #36]	; 0x24
 800cb16:	f7ff ff18 	bl	800c94a <__exponent>
 800cb1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb1c:	1813      	adds	r3, r2, r0
 800cb1e:	2a01      	cmp	r2, #1
 800cb20:	4681      	mov	r9, r0
 800cb22:	6123      	str	r3, [r4, #16]
 800cb24:	dc02      	bgt.n	800cb2c <_printf_float+0x164>
 800cb26:	6822      	ldr	r2, [r4, #0]
 800cb28:	07d2      	lsls	r2, r2, #31
 800cb2a:	d501      	bpl.n	800cb30 <_printf_float+0x168>
 800cb2c:	3301      	adds	r3, #1
 800cb2e:	6123      	str	r3, [r4, #16]
 800cb30:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d09c      	beq.n	800ca72 <_printf_float+0xaa>
 800cb38:	232d      	movs	r3, #45	; 0x2d
 800cb3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb3e:	e798      	b.n	800ca72 <_printf_float+0xaa>
 800cb40:	9a06      	ldr	r2, [sp, #24]
 800cb42:	2a47      	cmp	r2, #71	; 0x47
 800cb44:	d1be      	bne.n	800cac4 <_printf_float+0xfc>
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d1bc      	bne.n	800cac4 <_printf_float+0xfc>
 800cb4a:	2301      	movs	r3, #1
 800cb4c:	e7b9      	b.n	800cac2 <_printf_float+0xfa>
 800cb4e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800cb52:	d118      	bne.n	800cb86 <_printf_float+0x1be>
 800cb54:	2900      	cmp	r1, #0
 800cb56:	6863      	ldr	r3, [r4, #4]
 800cb58:	dd0b      	ble.n	800cb72 <_printf_float+0x1aa>
 800cb5a:	6121      	str	r1, [r4, #16]
 800cb5c:	b913      	cbnz	r3, 800cb64 <_printf_float+0x19c>
 800cb5e:	6822      	ldr	r2, [r4, #0]
 800cb60:	07d0      	lsls	r0, r2, #31
 800cb62:	d502      	bpl.n	800cb6a <_printf_float+0x1a2>
 800cb64:	3301      	adds	r3, #1
 800cb66:	440b      	add	r3, r1
 800cb68:	6123      	str	r3, [r4, #16]
 800cb6a:	65a1      	str	r1, [r4, #88]	; 0x58
 800cb6c:	f04f 0900 	mov.w	r9, #0
 800cb70:	e7de      	b.n	800cb30 <_printf_float+0x168>
 800cb72:	b913      	cbnz	r3, 800cb7a <_printf_float+0x1b2>
 800cb74:	6822      	ldr	r2, [r4, #0]
 800cb76:	07d2      	lsls	r2, r2, #31
 800cb78:	d501      	bpl.n	800cb7e <_printf_float+0x1b6>
 800cb7a:	3302      	adds	r3, #2
 800cb7c:	e7f4      	b.n	800cb68 <_printf_float+0x1a0>
 800cb7e:	2301      	movs	r3, #1
 800cb80:	e7f2      	b.n	800cb68 <_printf_float+0x1a0>
 800cb82:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800cb86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb88:	4299      	cmp	r1, r3
 800cb8a:	db05      	blt.n	800cb98 <_printf_float+0x1d0>
 800cb8c:	6823      	ldr	r3, [r4, #0]
 800cb8e:	6121      	str	r1, [r4, #16]
 800cb90:	07d8      	lsls	r0, r3, #31
 800cb92:	d5ea      	bpl.n	800cb6a <_printf_float+0x1a2>
 800cb94:	1c4b      	adds	r3, r1, #1
 800cb96:	e7e7      	b.n	800cb68 <_printf_float+0x1a0>
 800cb98:	2900      	cmp	r1, #0
 800cb9a:	bfd4      	ite	le
 800cb9c:	f1c1 0202 	rsble	r2, r1, #2
 800cba0:	2201      	movgt	r2, #1
 800cba2:	4413      	add	r3, r2
 800cba4:	e7e0      	b.n	800cb68 <_printf_float+0x1a0>
 800cba6:	6823      	ldr	r3, [r4, #0]
 800cba8:	055a      	lsls	r2, r3, #21
 800cbaa:	d407      	bmi.n	800cbbc <_printf_float+0x1f4>
 800cbac:	6923      	ldr	r3, [r4, #16]
 800cbae:	4642      	mov	r2, r8
 800cbb0:	4631      	mov	r1, r6
 800cbb2:	4628      	mov	r0, r5
 800cbb4:	47b8      	blx	r7
 800cbb6:	3001      	adds	r0, #1
 800cbb8:	d12c      	bne.n	800cc14 <_printf_float+0x24c>
 800cbba:	e764      	b.n	800ca86 <_printf_float+0xbe>
 800cbbc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cbc0:	f240 80e0 	bls.w	800cd84 <_printf_float+0x3bc>
 800cbc4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cbc8:	2200      	movs	r2, #0
 800cbca:	2300      	movs	r3, #0
 800cbcc:	f7f3 ff7c 	bl	8000ac8 <__aeabi_dcmpeq>
 800cbd0:	2800      	cmp	r0, #0
 800cbd2:	d034      	beq.n	800cc3e <_printf_float+0x276>
 800cbd4:	4a37      	ldr	r2, [pc, #220]	; (800ccb4 <_printf_float+0x2ec>)
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	4631      	mov	r1, r6
 800cbda:	4628      	mov	r0, r5
 800cbdc:	47b8      	blx	r7
 800cbde:	3001      	adds	r0, #1
 800cbe0:	f43f af51 	beq.w	800ca86 <_printf_float+0xbe>
 800cbe4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cbe8:	429a      	cmp	r2, r3
 800cbea:	db02      	blt.n	800cbf2 <_printf_float+0x22a>
 800cbec:	6823      	ldr	r3, [r4, #0]
 800cbee:	07d8      	lsls	r0, r3, #31
 800cbf0:	d510      	bpl.n	800cc14 <_printf_float+0x24c>
 800cbf2:	ee18 3a10 	vmov	r3, s16
 800cbf6:	4652      	mov	r2, sl
 800cbf8:	4631      	mov	r1, r6
 800cbfa:	4628      	mov	r0, r5
 800cbfc:	47b8      	blx	r7
 800cbfe:	3001      	adds	r0, #1
 800cc00:	f43f af41 	beq.w	800ca86 <_printf_float+0xbe>
 800cc04:	f04f 0800 	mov.w	r8, #0
 800cc08:	f104 091a 	add.w	r9, r4, #26
 800cc0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc0e:	3b01      	subs	r3, #1
 800cc10:	4543      	cmp	r3, r8
 800cc12:	dc09      	bgt.n	800cc28 <_printf_float+0x260>
 800cc14:	6823      	ldr	r3, [r4, #0]
 800cc16:	079b      	lsls	r3, r3, #30
 800cc18:	f100 8107 	bmi.w	800ce2a <_printf_float+0x462>
 800cc1c:	68e0      	ldr	r0, [r4, #12]
 800cc1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc20:	4298      	cmp	r0, r3
 800cc22:	bfb8      	it	lt
 800cc24:	4618      	movlt	r0, r3
 800cc26:	e730      	b.n	800ca8a <_printf_float+0xc2>
 800cc28:	2301      	movs	r3, #1
 800cc2a:	464a      	mov	r2, r9
 800cc2c:	4631      	mov	r1, r6
 800cc2e:	4628      	mov	r0, r5
 800cc30:	47b8      	blx	r7
 800cc32:	3001      	adds	r0, #1
 800cc34:	f43f af27 	beq.w	800ca86 <_printf_float+0xbe>
 800cc38:	f108 0801 	add.w	r8, r8, #1
 800cc3c:	e7e6      	b.n	800cc0c <_printf_float+0x244>
 800cc3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	dc39      	bgt.n	800ccb8 <_printf_float+0x2f0>
 800cc44:	4a1b      	ldr	r2, [pc, #108]	; (800ccb4 <_printf_float+0x2ec>)
 800cc46:	2301      	movs	r3, #1
 800cc48:	4631      	mov	r1, r6
 800cc4a:	4628      	mov	r0, r5
 800cc4c:	47b8      	blx	r7
 800cc4e:	3001      	adds	r0, #1
 800cc50:	f43f af19 	beq.w	800ca86 <_printf_float+0xbe>
 800cc54:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800cc58:	4313      	orrs	r3, r2
 800cc5a:	d102      	bne.n	800cc62 <_printf_float+0x29a>
 800cc5c:	6823      	ldr	r3, [r4, #0]
 800cc5e:	07d9      	lsls	r1, r3, #31
 800cc60:	d5d8      	bpl.n	800cc14 <_printf_float+0x24c>
 800cc62:	ee18 3a10 	vmov	r3, s16
 800cc66:	4652      	mov	r2, sl
 800cc68:	4631      	mov	r1, r6
 800cc6a:	4628      	mov	r0, r5
 800cc6c:	47b8      	blx	r7
 800cc6e:	3001      	adds	r0, #1
 800cc70:	f43f af09 	beq.w	800ca86 <_printf_float+0xbe>
 800cc74:	f04f 0900 	mov.w	r9, #0
 800cc78:	f104 0a1a 	add.w	sl, r4, #26
 800cc7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc7e:	425b      	negs	r3, r3
 800cc80:	454b      	cmp	r3, r9
 800cc82:	dc01      	bgt.n	800cc88 <_printf_float+0x2c0>
 800cc84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc86:	e792      	b.n	800cbae <_printf_float+0x1e6>
 800cc88:	2301      	movs	r3, #1
 800cc8a:	4652      	mov	r2, sl
 800cc8c:	4631      	mov	r1, r6
 800cc8e:	4628      	mov	r0, r5
 800cc90:	47b8      	blx	r7
 800cc92:	3001      	adds	r0, #1
 800cc94:	f43f aef7 	beq.w	800ca86 <_printf_float+0xbe>
 800cc98:	f109 0901 	add.w	r9, r9, #1
 800cc9c:	e7ee      	b.n	800cc7c <_printf_float+0x2b4>
 800cc9e:	bf00      	nop
 800cca0:	7fefffff 	.word	0x7fefffff
 800cca4:	0800f6c0 	.word	0x0800f6c0
 800cca8:	0800f6c4 	.word	0x0800f6c4
 800ccac:	0800f6c8 	.word	0x0800f6c8
 800ccb0:	0800f6cc 	.word	0x0800f6cc
 800ccb4:	0800f6d0 	.word	0x0800f6d0
 800ccb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ccba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ccbc:	429a      	cmp	r2, r3
 800ccbe:	bfa8      	it	ge
 800ccc0:	461a      	movge	r2, r3
 800ccc2:	2a00      	cmp	r2, #0
 800ccc4:	4691      	mov	r9, r2
 800ccc6:	dc37      	bgt.n	800cd38 <_printf_float+0x370>
 800ccc8:	f04f 0b00 	mov.w	fp, #0
 800cccc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ccd0:	f104 021a 	add.w	r2, r4, #26
 800ccd4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ccd6:	9305      	str	r3, [sp, #20]
 800ccd8:	eba3 0309 	sub.w	r3, r3, r9
 800ccdc:	455b      	cmp	r3, fp
 800ccde:	dc33      	bgt.n	800cd48 <_printf_float+0x380>
 800cce0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cce4:	429a      	cmp	r2, r3
 800cce6:	db3b      	blt.n	800cd60 <_printf_float+0x398>
 800cce8:	6823      	ldr	r3, [r4, #0]
 800ccea:	07da      	lsls	r2, r3, #31
 800ccec:	d438      	bmi.n	800cd60 <_printf_float+0x398>
 800ccee:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ccf2:	eba2 0903 	sub.w	r9, r2, r3
 800ccf6:	9b05      	ldr	r3, [sp, #20]
 800ccf8:	1ad2      	subs	r2, r2, r3
 800ccfa:	4591      	cmp	r9, r2
 800ccfc:	bfa8      	it	ge
 800ccfe:	4691      	movge	r9, r2
 800cd00:	f1b9 0f00 	cmp.w	r9, #0
 800cd04:	dc35      	bgt.n	800cd72 <_printf_float+0x3aa>
 800cd06:	f04f 0800 	mov.w	r8, #0
 800cd0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cd0e:	f104 0a1a 	add.w	sl, r4, #26
 800cd12:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cd16:	1a9b      	subs	r3, r3, r2
 800cd18:	eba3 0309 	sub.w	r3, r3, r9
 800cd1c:	4543      	cmp	r3, r8
 800cd1e:	f77f af79 	ble.w	800cc14 <_printf_float+0x24c>
 800cd22:	2301      	movs	r3, #1
 800cd24:	4652      	mov	r2, sl
 800cd26:	4631      	mov	r1, r6
 800cd28:	4628      	mov	r0, r5
 800cd2a:	47b8      	blx	r7
 800cd2c:	3001      	adds	r0, #1
 800cd2e:	f43f aeaa 	beq.w	800ca86 <_printf_float+0xbe>
 800cd32:	f108 0801 	add.w	r8, r8, #1
 800cd36:	e7ec      	b.n	800cd12 <_printf_float+0x34a>
 800cd38:	4613      	mov	r3, r2
 800cd3a:	4631      	mov	r1, r6
 800cd3c:	4642      	mov	r2, r8
 800cd3e:	4628      	mov	r0, r5
 800cd40:	47b8      	blx	r7
 800cd42:	3001      	adds	r0, #1
 800cd44:	d1c0      	bne.n	800ccc8 <_printf_float+0x300>
 800cd46:	e69e      	b.n	800ca86 <_printf_float+0xbe>
 800cd48:	2301      	movs	r3, #1
 800cd4a:	4631      	mov	r1, r6
 800cd4c:	4628      	mov	r0, r5
 800cd4e:	9205      	str	r2, [sp, #20]
 800cd50:	47b8      	blx	r7
 800cd52:	3001      	adds	r0, #1
 800cd54:	f43f ae97 	beq.w	800ca86 <_printf_float+0xbe>
 800cd58:	9a05      	ldr	r2, [sp, #20]
 800cd5a:	f10b 0b01 	add.w	fp, fp, #1
 800cd5e:	e7b9      	b.n	800ccd4 <_printf_float+0x30c>
 800cd60:	ee18 3a10 	vmov	r3, s16
 800cd64:	4652      	mov	r2, sl
 800cd66:	4631      	mov	r1, r6
 800cd68:	4628      	mov	r0, r5
 800cd6a:	47b8      	blx	r7
 800cd6c:	3001      	adds	r0, #1
 800cd6e:	d1be      	bne.n	800ccee <_printf_float+0x326>
 800cd70:	e689      	b.n	800ca86 <_printf_float+0xbe>
 800cd72:	9a05      	ldr	r2, [sp, #20]
 800cd74:	464b      	mov	r3, r9
 800cd76:	4442      	add	r2, r8
 800cd78:	4631      	mov	r1, r6
 800cd7a:	4628      	mov	r0, r5
 800cd7c:	47b8      	blx	r7
 800cd7e:	3001      	adds	r0, #1
 800cd80:	d1c1      	bne.n	800cd06 <_printf_float+0x33e>
 800cd82:	e680      	b.n	800ca86 <_printf_float+0xbe>
 800cd84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd86:	2a01      	cmp	r2, #1
 800cd88:	dc01      	bgt.n	800cd8e <_printf_float+0x3c6>
 800cd8a:	07db      	lsls	r3, r3, #31
 800cd8c:	d53a      	bpl.n	800ce04 <_printf_float+0x43c>
 800cd8e:	2301      	movs	r3, #1
 800cd90:	4642      	mov	r2, r8
 800cd92:	4631      	mov	r1, r6
 800cd94:	4628      	mov	r0, r5
 800cd96:	47b8      	blx	r7
 800cd98:	3001      	adds	r0, #1
 800cd9a:	f43f ae74 	beq.w	800ca86 <_printf_float+0xbe>
 800cd9e:	ee18 3a10 	vmov	r3, s16
 800cda2:	4652      	mov	r2, sl
 800cda4:	4631      	mov	r1, r6
 800cda6:	4628      	mov	r0, r5
 800cda8:	47b8      	blx	r7
 800cdaa:	3001      	adds	r0, #1
 800cdac:	f43f ae6b 	beq.w	800ca86 <_printf_float+0xbe>
 800cdb0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800cdbc:	f7f3 fe84 	bl	8000ac8 <__aeabi_dcmpeq>
 800cdc0:	b9d8      	cbnz	r0, 800cdfa <_printf_float+0x432>
 800cdc2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800cdc6:	f108 0201 	add.w	r2, r8, #1
 800cdca:	4631      	mov	r1, r6
 800cdcc:	4628      	mov	r0, r5
 800cdce:	47b8      	blx	r7
 800cdd0:	3001      	adds	r0, #1
 800cdd2:	d10e      	bne.n	800cdf2 <_printf_float+0x42a>
 800cdd4:	e657      	b.n	800ca86 <_printf_float+0xbe>
 800cdd6:	2301      	movs	r3, #1
 800cdd8:	4652      	mov	r2, sl
 800cdda:	4631      	mov	r1, r6
 800cddc:	4628      	mov	r0, r5
 800cdde:	47b8      	blx	r7
 800cde0:	3001      	adds	r0, #1
 800cde2:	f43f ae50 	beq.w	800ca86 <_printf_float+0xbe>
 800cde6:	f108 0801 	add.w	r8, r8, #1
 800cdea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdec:	3b01      	subs	r3, #1
 800cdee:	4543      	cmp	r3, r8
 800cdf0:	dcf1      	bgt.n	800cdd6 <_printf_float+0x40e>
 800cdf2:	464b      	mov	r3, r9
 800cdf4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cdf8:	e6da      	b.n	800cbb0 <_printf_float+0x1e8>
 800cdfa:	f04f 0800 	mov.w	r8, #0
 800cdfe:	f104 0a1a 	add.w	sl, r4, #26
 800ce02:	e7f2      	b.n	800cdea <_printf_float+0x422>
 800ce04:	2301      	movs	r3, #1
 800ce06:	4642      	mov	r2, r8
 800ce08:	e7df      	b.n	800cdca <_printf_float+0x402>
 800ce0a:	2301      	movs	r3, #1
 800ce0c:	464a      	mov	r2, r9
 800ce0e:	4631      	mov	r1, r6
 800ce10:	4628      	mov	r0, r5
 800ce12:	47b8      	blx	r7
 800ce14:	3001      	adds	r0, #1
 800ce16:	f43f ae36 	beq.w	800ca86 <_printf_float+0xbe>
 800ce1a:	f108 0801 	add.w	r8, r8, #1
 800ce1e:	68e3      	ldr	r3, [r4, #12]
 800ce20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ce22:	1a5b      	subs	r3, r3, r1
 800ce24:	4543      	cmp	r3, r8
 800ce26:	dcf0      	bgt.n	800ce0a <_printf_float+0x442>
 800ce28:	e6f8      	b.n	800cc1c <_printf_float+0x254>
 800ce2a:	f04f 0800 	mov.w	r8, #0
 800ce2e:	f104 0919 	add.w	r9, r4, #25
 800ce32:	e7f4      	b.n	800ce1e <_printf_float+0x456>

0800ce34 <_printf_common>:
 800ce34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce38:	4616      	mov	r6, r2
 800ce3a:	4699      	mov	r9, r3
 800ce3c:	688a      	ldr	r2, [r1, #8]
 800ce3e:	690b      	ldr	r3, [r1, #16]
 800ce40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ce44:	4293      	cmp	r3, r2
 800ce46:	bfb8      	it	lt
 800ce48:	4613      	movlt	r3, r2
 800ce4a:	6033      	str	r3, [r6, #0]
 800ce4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ce50:	4607      	mov	r7, r0
 800ce52:	460c      	mov	r4, r1
 800ce54:	b10a      	cbz	r2, 800ce5a <_printf_common+0x26>
 800ce56:	3301      	adds	r3, #1
 800ce58:	6033      	str	r3, [r6, #0]
 800ce5a:	6823      	ldr	r3, [r4, #0]
 800ce5c:	0699      	lsls	r1, r3, #26
 800ce5e:	bf42      	ittt	mi
 800ce60:	6833      	ldrmi	r3, [r6, #0]
 800ce62:	3302      	addmi	r3, #2
 800ce64:	6033      	strmi	r3, [r6, #0]
 800ce66:	6825      	ldr	r5, [r4, #0]
 800ce68:	f015 0506 	ands.w	r5, r5, #6
 800ce6c:	d106      	bne.n	800ce7c <_printf_common+0x48>
 800ce6e:	f104 0a19 	add.w	sl, r4, #25
 800ce72:	68e3      	ldr	r3, [r4, #12]
 800ce74:	6832      	ldr	r2, [r6, #0]
 800ce76:	1a9b      	subs	r3, r3, r2
 800ce78:	42ab      	cmp	r3, r5
 800ce7a:	dc26      	bgt.n	800ceca <_printf_common+0x96>
 800ce7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ce80:	1e13      	subs	r3, r2, #0
 800ce82:	6822      	ldr	r2, [r4, #0]
 800ce84:	bf18      	it	ne
 800ce86:	2301      	movne	r3, #1
 800ce88:	0692      	lsls	r2, r2, #26
 800ce8a:	d42b      	bmi.n	800cee4 <_printf_common+0xb0>
 800ce8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ce90:	4649      	mov	r1, r9
 800ce92:	4638      	mov	r0, r7
 800ce94:	47c0      	blx	r8
 800ce96:	3001      	adds	r0, #1
 800ce98:	d01e      	beq.n	800ced8 <_printf_common+0xa4>
 800ce9a:	6823      	ldr	r3, [r4, #0]
 800ce9c:	6922      	ldr	r2, [r4, #16]
 800ce9e:	f003 0306 	and.w	r3, r3, #6
 800cea2:	2b04      	cmp	r3, #4
 800cea4:	bf02      	ittt	eq
 800cea6:	68e5      	ldreq	r5, [r4, #12]
 800cea8:	6833      	ldreq	r3, [r6, #0]
 800ceaa:	1aed      	subeq	r5, r5, r3
 800ceac:	68a3      	ldr	r3, [r4, #8]
 800ceae:	bf0c      	ite	eq
 800ceb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ceb4:	2500      	movne	r5, #0
 800ceb6:	4293      	cmp	r3, r2
 800ceb8:	bfc4      	itt	gt
 800ceba:	1a9b      	subgt	r3, r3, r2
 800cebc:	18ed      	addgt	r5, r5, r3
 800cebe:	2600      	movs	r6, #0
 800cec0:	341a      	adds	r4, #26
 800cec2:	42b5      	cmp	r5, r6
 800cec4:	d11a      	bne.n	800cefc <_printf_common+0xc8>
 800cec6:	2000      	movs	r0, #0
 800cec8:	e008      	b.n	800cedc <_printf_common+0xa8>
 800ceca:	2301      	movs	r3, #1
 800cecc:	4652      	mov	r2, sl
 800cece:	4649      	mov	r1, r9
 800ced0:	4638      	mov	r0, r7
 800ced2:	47c0      	blx	r8
 800ced4:	3001      	adds	r0, #1
 800ced6:	d103      	bne.n	800cee0 <_printf_common+0xac>
 800ced8:	f04f 30ff 	mov.w	r0, #4294967295
 800cedc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cee0:	3501      	adds	r5, #1
 800cee2:	e7c6      	b.n	800ce72 <_printf_common+0x3e>
 800cee4:	18e1      	adds	r1, r4, r3
 800cee6:	1c5a      	adds	r2, r3, #1
 800cee8:	2030      	movs	r0, #48	; 0x30
 800ceea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ceee:	4422      	add	r2, r4
 800cef0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cef4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cef8:	3302      	adds	r3, #2
 800cefa:	e7c7      	b.n	800ce8c <_printf_common+0x58>
 800cefc:	2301      	movs	r3, #1
 800cefe:	4622      	mov	r2, r4
 800cf00:	4649      	mov	r1, r9
 800cf02:	4638      	mov	r0, r7
 800cf04:	47c0      	blx	r8
 800cf06:	3001      	adds	r0, #1
 800cf08:	d0e6      	beq.n	800ced8 <_printf_common+0xa4>
 800cf0a:	3601      	adds	r6, #1
 800cf0c:	e7d9      	b.n	800cec2 <_printf_common+0x8e>
	...

0800cf10 <_printf_i>:
 800cf10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cf14:	7e0f      	ldrb	r7, [r1, #24]
 800cf16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cf18:	2f78      	cmp	r7, #120	; 0x78
 800cf1a:	4691      	mov	r9, r2
 800cf1c:	4680      	mov	r8, r0
 800cf1e:	460c      	mov	r4, r1
 800cf20:	469a      	mov	sl, r3
 800cf22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cf26:	d807      	bhi.n	800cf38 <_printf_i+0x28>
 800cf28:	2f62      	cmp	r7, #98	; 0x62
 800cf2a:	d80a      	bhi.n	800cf42 <_printf_i+0x32>
 800cf2c:	2f00      	cmp	r7, #0
 800cf2e:	f000 80d4 	beq.w	800d0da <_printf_i+0x1ca>
 800cf32:	2f58      	cmp	r7, #88	; 0x58
 800cf34:	f000 80c0 	beq.w	800d0b8 <_printf_i+0x1a8>
 800cf38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cf3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cf40:	e03a      	b.n	800cfb8 <_printf_i+0xa8>
 800cf42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cf46:	2b15      	cmp	r3, #21
 800cf48:	d8f6      	bhi.n	800cf38 <_printf_i+0x28>
 800cf4a:	a101      	add	r1, pc, #4	; (adr r1, 800cf50 <_printf_i+0x40>)
 800cf4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cf50:	0800cfa9 	.word	0x0800cfa9
 800cf54:	0800cfbd 	.word	0x0800cfbd
 800cf58:	0800cf39 	.word	0x0800cf39
 800cf5c:	0800cf39 	.word	0x0800cf39
 800cf60:	0800cf39 	.word	0x0800cf39
 800cf64:	0800cf39 	.word	0x0800cf39
 800cf68:	0800cfbd 	.word	0x0800cfbd
 800cf6c:	0800cf39 	.word	0x0800cf39
 800cf70:	0800cf39 	.word	0x0800cf39
 800cf74:	0800cf39 	.word	0x0800cf39
 800cf78:	0800cf39 	.word	0x0800cf39
 800cf7c:	0800d0c1 	.word	0x0800d0c1
 800cf80:	0800cfe9 	.word	0x0800cfe9
 800cf84:	0800d07b 	.word	0x0800d07b
 800cf88:	0800cf39 	.word	0x0800cf39
 800cf8c:	0800cf39 	.word	0x0800cf39
 800cf90:	0800d0e3 	.word	0x0800d0e3
 800cf94:	0800cf39 	.word	0x0800cf39
 800cf98:	0800cfe9 	.word	0x0800cfe9
 800cf9c:	0800cf39 	.word	0x0800cf39
 800cfa0:	0800cf39 	.word	0x0800cf39
 800cfa4:	0800d083 	.word	0x0800d083
 800cfa8:	682b      	ldr	r3, [r5, #0]
 800cfaa:	1d1a      	adds	r2, r3, #4
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	602a      	str	r2, [r5, #0]
 800cfb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cfb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cfb8:	2301      	movs	r3, #1
 800cfba:	e09f      	b.n	800d0fc <_printf_i+0x1ec>
 800cfbc:	6820      	ldr	r0, [r4, #0]
 800cfbe:	682b      	ldr	r3, [r5, #0]
 800cfc0:	0607      	lsls	r7, r0, #24
 800cfc2:	f103 0104 	add.w	r1, r3, #4
 800cfc6:	6029      	str	r1, [r5, #0]
 800cfc8:	d501      	bpl.n	800cfce <_printf_i+0xbe>
 800cfca:	681e      	ldr	r6, [r3, #0]
 800cfcc:	e003      	b.n	800cfd6 <_printf_i+0xc6>
 800cfce:	0646      	lsls	r6, r0, #25
 800cfd0:	d5fb      	bpl.n	800cfca <_printf_i+0xba>
 800cfd2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cfd6:	2e00      	cmp	r6, #0
 800cfd8:	da03      	bge.n	800cfe2 <_printf_i+0xd2>
 800cfda:	232d      	movs	r3, #45	; 0x2d
 800cfdc:	4276      	negs	r6, r6
 800cfde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cfe2:	485a      	ldr	r0, [pc, #360]	; (800d14c <_printf_i+0x23c>)
 800cfe4:	230a      	movs	r3, #10
 800cfe6:	e012      	b.n	800d00e <_printf_i+0xfe>
 800cfe8:	682b      	ldr	r3, [r5, #0]
 800cfea:	6820      	ldr	r0, [r4, #0]
 800cfec:	1d19      	adds	r1, r3, #4
 800cfee:	6029      	str	r1, [r5, #0]
 800cff0:	0605      	lsls	r5, r0, #24
 800cff2:	d501      	bpl.n	800cff8 <_printf_i+0xe8>
 800cff4:	681e      	ldr	r6, [r3, #0]
 800cff6:	e002      	b.n	800cffe <_printf_i+0xee>
 800cff8:	0641      	lsls	r1, r0, #25
 800cffa:	d5fb      	bpl.n	800cff4 <_printf_i+0xe4>
 800cffc:	881e      	ldrh	r6, [r3, #0]
 800cffe:	4853      	ldr	r0, [pc, #332]	; (800d14c <_printf_i+0x23c>)
 800d000:	2f6f      	cmp	r7, #111	; 0x6f
 800d002:	bf0c      	ite	eq
 800d004:	2308      	moveq	r3, #8
 800d006:	230a      	movne	r3, #10
 800d008:	2100      	movs	r1, #0
 800d00a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d00e:	6865      	ldr	r5, [r4, #4]
 800d010:	60a5      	str	r5, [r4, #8]
 800d012:	2d00      	cmp	r5, #0
 800d014:	bfa2      	ittt	ge
 800d016:	6821      	ldrge	r1, [r4, #0]
 800d018:	f021 0104 	bicge.w	r1, r1, #4
 800d01c:	6021      	strge	r1, [r4, #0]
 800d01e:	b90e      	cbnz	r6, 800d024 <_printf_i+0x114>
 800d020:	2d00      	cmp	r5, #0
 800d022:	d04b      	beq.n	800d0bc <_printf_i+0x1ac>
 800d024:	4615      	mov	r5, r2
 800d026:	fbb6 f1f3 	udiv	r1, r6, r3
 800d02a:	fb03 6711 	mls	r7, r3, r1, r6
 800d02e:	5dc7      	ldrb	r7, [r0, r7]
 800d030:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d034:	4637      	mov	r7, r6
 800d036:	42bb      	cmp	r3, r7
 800d038:	460e      	mov	r6, r1
 800d03a:	d9f4      	bls.n	800d026 <_printf_i+0x116>
 800d03c:	2b08      	cmp	r3, #8
 800d03e:	d10b      	bne.n	800d058 <_printf_i+0x148>
 800d040:	6823      	ldr	r3, [r4, #0]
 800d042:	07de      	lsls	r6, r3, #31
 800d044:	d508      	bpl.n	800d058 <_printf_i+0x148>
 800d046:	6923      	ldr	r3, [r4, #16]
 800d048:	6861      	ldr	r1, [r4, #4]
 800d04a:	4299      	cmp	r1, r3
 800d04c:	bfde      	ittt	le
 800d04e:	2330      	movle	r3, #48	; 0x30
 800d050:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d054:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d058:	1b52      	subs	r2, r2, r5
 800d05a:	6122      	str	r2, [r4, #16]
 800d05c:	f8cd a000 	str.w	sl, [sp]
 800d060:	464b      	mov	r3, r9
 800d062:	aa03      	add	r2, sp, #12
 800d064:	4621      	mov	r1, r4
 800d066:	4640      	mov	r0, r8
 800d068:	f7ff fee4 	bl	800ce34 <_printf_common>
 800d06c:	3001      	adds	r0, #1
 800d06e:	d14a      	bne.n	800d106 <_printf_i+0x1f6>
 800d070:	f04f 30ff 	mov.w	r0, #4294967295
 800d074:	b004      	add	sp, #16
 800d076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d07a:	6823      	ldr	r3, [r4, #0]
 800d07c:	f043 0320 	orr.w	r3, r3, #32
 800d080:	6023      	str	r3, [r4, #0]
 800d082:	4833      	ldr	r0, [pc, #204]	; (800d150 <_printf_i+0x240>)
 800d084:	2778      	movs	r7, #120	; 0x78
 800d086:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d08a:	6823      	ldr	r3, [r4, #0]
 800d08c:	6829      	ldr	r1, [r5, #0]
 800d08e:	061f      	lsls	r7, r3, #24
 800d090:	f851 6b04 	ldr.w	r6, [r1], #4
 800d094:	d402      	bmi.n	800d09c <_printf_i+0x18c>
 800d096:	065f      	lsls	r7, r3, #25
 800d098:	bf48      	it	mi
 800d09a:	b2b6      	uxthmi	r6, r6
 800d09c:	07df      	lsls	r7, r3, #31
 800d09e:	bf48      	it	mi
 800d0a0:	f043 0320 	orrmi.w	r3, r3, #32
 800d0a4:	6029      	str	r1, [r5, #0]
 800d0a6:	bf48      	it	mi
 800d0a8:	6023      	strmi	r3, [r4, #0]
 800d0aa:	b91e      	cbnz	r6, 800d0b4 <_printf_i+0x1a4>
 800d0ac:	6823      	ldr	r3, [r4, #0]
 800d0ae:	f023 0320 	bic.w	r3, r3, #32
 800d0b2:	6023      	str	r3, [r4, #0]
 800d0b4:	2310      	movs	r3, #16
 800d0b6:	e7a7      	b.n	800d008 <_printf_i+0xf8>
 800d0b8:	4824      	ldr	r0, [pc, #144]	; (800d14c <_printf_i+0x23c>)
 800d0ba:	e7e4      	b.n	800d086 <_printf_i+0x176>
 800d0bc:	4615      	mov	r5, r2
 800d0be:	e7bd      	b.n	800d03c <_printf_i+0x12c>
 800d0c0:	682b      	ldr	r3, [r5, #0]
 800d0c2:	6826      	ldr	r6, [r4, #0]
 800d0c4:	6961      	ldr	r1, [r4, #20]
 800d0c6:	1d18      	adds	r0, r3, #4
 800d0c8:	6028      	str	r0, [r5, #0]
 800d0ca:	0635      	lsls	r5, r6, #24
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	d501      	bpl.n	800d0d4 <_printf_i+0x1c4>
 800d0d0:	6019      	str	r1, [r3, #0]
 800d0d2:	e002      	b.n	800d0da <_printf_i+0x1ca>
 800d0d4:	0670      	lsls	r0, r6, #25
 800d0d6:	d5fb      	bpl.n	800d0d0 <_printf_i+0x1c0>
 800d0d8:	8019      	strh	r1, [r3, #0]
 800d0da:	2300      	movs	r3, #0
 800d0dc:	6123      	str	r3, [r4, #16]
 800d0de:	4615      	mov	r5, r2
 800d0e0:	e7bc      	b.n	800d05c <_printf_i+0x14c>
 800d0e2:	682b      	ldr	r3, [r5, #0]
 800d0e4:	1d1a      	adds	r2, r3, #4
 800d0e6:	602a      	str	r2, [r5, #0]
 800d0e8:	681d      	ldr	r5, [r3, #0]
 800d0ea:	6862      	ldr	r2, [r4, #4]
 800d0ec:	2100      	movs	r1, #0
 800d0ee:	4628      	mov	r0, r5
 800d0f0:	f7f3 f86e 	bl	80001d0 <memchr>
 800d0f4:	b108      	cbz	r0, 800d0fa <_printf_i+0x1ea>
 800d0f6:	1b40      	subs	r0, r0, r5
 800d0f8:	6060      	str	r0, [r4, #4]
 800d0fa:	6863      	ldr	r3, [r4, #4]
 800d0fc:	6123      	str	r3, [r4, #16]
 800d0fe:	2300      	movs	r3, #0
 800d100:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d104:	e7aa      	b.n	800d05c <_printf_i+0x14c>
 800d106:	6923      	ldr	r3, [r4, #16]
 800d108:	462a      	mov	r2, r5
 800d10a:	4649      	mov	r1, r9
 800d10c:	4640      	mov	r0, r8
 800d10e:	47d0      	blx	sl
 800d110:	3001      	adds	r0, #1
 800d112:	d0ad      	beq.n	800d070 <_printf_i+0x160>
 800d114:	6823      	ldr	r3, [r4, #0]
 800d116:	079b      	lsls	r3, r3, #30
 800d118:	d413      	bmi.n	800d142 <_printf_i+0x232>
 800d11a:	68e0      	ldr	r0, [r4, #12]
 800d11c:	9b03      	ldr	r3, [sp, #12]
 800d11e:	4298      	cmp	r0, r3
 800d120:	bfb8      	it	lt
 800d122:	4618      	movlt	r0, r3
 800d124:	e7a6      	b.n	800d074 <_printf_i+0x164>
 800d126:	2301      	movs	r3, #1
 800d128:	4632      	mov	r2, r6
 800d12a:	4649      	mov	r1, r9
 800d12c:	4640      	mov	r0, r8
 800d12e:	47d0      	blx	sl
 800d130:	3001      	adds	r0, #1
 800d132:	d09d      	beq.n	800d070 <_printf_i+0x160>
 800d134:	3501      	adds	r5, #1
 800d136:	68e3      	ldr	r3, [r4, #12]
 800d138:	9903      	ldr	r1, [sp, #12]
 800d13a:	1a5b      	subs	r3, r3, r1
 800d13c:	42ab      	cmp	r3, r5
 800d13e:	dcf2      	bgt.n	800d126 <_printf_i+0x216>
 800d140:	e7eb      	b.n	800d11a <_printf_i+0x20a>
 800d142:	2500      	movs	r5, #0
 800d144:	f104 0619 	add.w	r6, r4, #25
 800d148:	e7f5      	b.n	800d136 <_printf_i+0x226>
 800d14a:	bf00      	nop
 800d14c:	0800f6d2 	.word	0x0800f6d2
 800d150:	0800f6e3 	.word	0x0800f6e3

0800d154 <std>:
 800d154:	2300      	movs	r3, #0
 800d156:	b510      	push	{r4, lr}
 800d158:	4604      	mov	r4, r0
 800d15a:	e9c0 3300 	strd	r3, r3, [r0]
 800d15e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d162:	6083      	str	r3, [r0, #8]
 800d164:	8181      	strh	r1, [r0, #12]
 800d166:	6643      	str	r3, [r0, #100]	; 0x64
 800d168:	81c2      	strh	r2, [r0, #14]
 800d16a:	6183      	str	r3, [r0, #24]
 800d16c:	4619      	mov	r1, r3
 800d16e:	2208      	movs	r2, #8
 800d170:	305c      	adds	r0, #92	; 0x5c
 800d172:	f000 f914 	bl	800d39e <memset>
 800d176:	4b0d      	ldr	r3, [pc, #52]	; (800d1ac <std+0x58>)
 800d178:	6263      	str	r3, [r4, #36]	; 0x24
 800d17a:	4b0d      	ldr	r3, [pc, #52]	; (800d1b0 <std+0x5c>)
 800d17c:	62a3      	str	r3, [r4, #40]	; 0x28
 800d17e:	4b0d      	ldr	r3, [pc, #52]	; (800d1b4 <std+0x60>)
 800d180:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d182:	4b0d      	ldr	r3, [pc, #52]	; (800d1b8 <std+0x64>)
 800d184:	6323      	str	r3, [r4, #48]	; 0x30
 800d186:	4b0d      	ldr	r3, [pc, #52]	; (800d1bc <std+0x68>)
 800d188:	6224      	str	r4, [r4, #32]
 800d18a:	429c      	cmp	r4, r3
 800d18c:	d006      	beq.n	800d19c <std+0x48>
 800d18e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d192:	4294      	cmp	r4, r2
 800d194:	d002      	beq.n	800d19c <std+0x48>
 800d196:	33d0      	adds	r3, #208	; 0xd0
 800d198:	429c      	cmp	r4, r3
 800d19a:	d105      	bne.n	800d1a8 <std+0x54>
 800d19c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d1a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d1a4:	f000 b978 	b.w	800d498 <__retarget_lock_init_recursive>
 800d1a8:	bd10      	pop	{r4, pc}
 800d1aa:	bf00      	nop
 800d1ac:	0800d319 	.word	0x0800d319
 800d1b0:	0800d33b 	.word	0x0800d33b
 800d1b4:	0800d373 	.word	0x0800d373
 800d1b8:	0800d397 	.word	0x0800d397
 800d1bc:	2000090c 	.word	0x2000090c

0800d1c0 <stdio_exit_handler>:
 800d1c0:	4a02      	ldr	r2, [pc, #8]	; (800d1cc <stdio_exit_handler+0xc>)
 800d1c2:	4903      	ldr	r1, [pc, #12]	; (800d1d0 <stdio_exit_handler+0x10>)
 800d1c4:	4803      	ldr	r0, [pc, #12]	; (800d1d4 <stdio_exit_handler+0x14>)
 800d1c6:	f000 b869 	b.w	800d29c <_fwalk_sglue>
 800d1ca:	bf00      	nop
 800d1cc:	20000018 	.word	0x20000018
 800d1d0:	0800ee49 	.word	0x0800ee49
 800d1d4:	20000024 	.word	0x20000024

0800d1d8 <cleanup_stdio>:
 800d1d8:	6841      	ldr	r1, [r0, #4]
 800d1da:	4b0c      	ldr	r3, [pc, #48]	; (800d20c <cleanup_stdio+0x34>)
 800d1dc:	4299      	cmp	r1, r3
 800d1de:	b510      	push	{r4, lr}
 800d1e0:	4604      	mov	r4, r0
 800d1e2:	d001      	beq.n	800d1e8 <cleanup_stdio+0x10>
 800d1e4:	f001 fe30 	bl	800ee48 <_fflush_r>
 800d1e8:	68a1      	ldr	r1, [r4, #8]
 800d1ea:	4b09      	ldr	r3, [pc, #36]	; (800d210 <cleanup_stdio+0x38>)
 800d1ec:	4299      	cmp	r1, r3
 800d1ee:	d002      	beq.n	800d1f6 <cleanup_stdio+0x1e>
 800d1f0:	4620      	mov	r0, r4
 800d1f2:	f001 fe29 	bl	800ee48 <_fflush_r>
 800d1f6:	68e1      	ldr	r1, [r4, #12]
 800d1f8:	4b06      	ldr	r3, [pc, #24]	; (800d214 <cleanup_stdio+0x3c>)
 800d1fa:	4299      	cmp	r1, r3
 800d1fc:	d004      	beq.n	800d208 <cleanup_stdio+0x30>
 800d1fe:	4620      	mov	r0, r4
 800d200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d204:	f001 be20 	b.w	800ee48 <_fflush_r>
 800d208:	bd10      	pop	{r4, pc}
 800d20a:	bf00      	nop
 800d20c:	2000090c 	.word	0x2000090c
 800d210:	20000974 	.word	0x20000974
 800d214:	200009dc 	.word	0x200009dc

0800d218 <global_stdio_init.part.0>:
 800d218:	b510      	push	{r4, lr}
 800d21a:	4b0b      	ldr	r3, [pc, #44]	; (800d248 <global_stdio_init.part.0+0x30>)
 800d21c:	4c0b      	ldr	r4, [pc, #44]	; (800d24c <global_stdio_init.part.0+0x34>)
 800d21e:	4a0c      	ldr	r2, [pc, #48]	; (800d250 <global_stdio_init.part.0+0x38>)
 800d220:	601a      	str	r2, [r3, #0]
 800d222:	4620      	mov	r0, r4
 800d224:	2200      	movs	r2, #0
 800d226:	2104      	movs	r1, #4
 800d228:	f7ff ff94 	bl	800d154 <std>
 800d22c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d230:	2201      	movs	r2, #1
 800d232:	2109      	movs	r1, #9
 800d234:	f7ff ff8e 	bl	800d154 <std>
 800d238:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d23c:	2202      	movs	r2, #2
 800d23e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d242:	2112      	movs	r1, #18
 800d244:	f7ff bf86 	b.w	800d154 <std>
 800d248:	20000a44 	.word	0x20000a44
 800d24c:	2000090c 	.word	0x2000090c
 800d250:	0800d1c1 	.word	0x0800d1c1

0800d254 <__sfp_lock_acquire>:
 800d254:	4801      	ldr	r0, [pc, #4]	; (800d25c <__sfp_lock_acquire+0x8>)
 800d256:	f000 b920 	b.w	800d49a <__retarget_lock_acquire_recursive>
 800d25a:	bf00      	nop
 800d25c:	20000a4d 	.word	0x20000a4d

0800d260 <__sfp_lock_release>:
 800d260:	4801      	ldr	r0, [pc, #4]	; (800d268 <__sfp_lock_release+0x8>)
 800d262:	f000 b91b 	b.w	800d49c <__retarget_lock_release_recursive>
 800d266:	bf00      	nop
 800d268:	20000a4d 	.word	0x20000a4d

0800d26c <__sinit>:
 800d26c:	b510      	push	{r4, lr}
 800d26e:	4604      	mov	r4, r0
 800d270:	f7ff fff0 	bl	800d254 <__sfp_lock_acquire>
 800d274:	6a23      	ldr	r3, [r4, #32]
 800d276:	b11b      	cbz	r3, 800d280 <__sinit+0x14>
 800d278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d27c:	f7ff bff0 	b.w	800d260 <__sfp_lock_release>
 800d280:	4b04      	ldr	r3, [pc, #16]	; (800d294 <__sinit+0x28>)
 800d282:	6223      	str	r3, [r4, #32]
 800d284:	4b04      	ldr	r3, [pc, #16]	; (800d298 <__sinit+0x2c>)
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d1f5      	bne.n	800d278 <__sinit+0xc>
 800d28c:	f7ff ffc4 	bl	800d218 <global_stdio_init.part.0>
 800d290:	e7f2      	b.n	800d278 <__sinit+0xc>
 800d292:	bf00      	nop
 800d294:	0800d1d9 	.word	0x0800d1d9
 800d298:	20000a44 	.word	0x20000a44

0800d29c <_fwalk_sglue>:
 800d29c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2a0:	4607      	mov	r7, r0
 800d2a2:	4688      	mov	r8, r1
 800d2a4:	4614      	mov	r4, r2
 800d2a6:	2600      	movs	r6, #0
 800d2a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d2ac:	f1b9 0901 	subs.w	r9, r9, #1
 800d2b0:	d505      	bpl.n	800d2be <_fwalk_sglue+0x22>
 800d2b2:	6824      	ldr	r4, [r4, #0]
 800d2b4:	2c00      	cmp	r4, #0
 800d2b6:	d1f7      	bne.n	800d2a8 <_fwalk_sglue+0xc>
 800d2b8:	4630      	mov	r0, r6
 800d2ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2be:	89ab      	ldrh	r3, [r5, #12]
 800d2c0:	2b01      	cmp	r3, #1
 800d2c2:	d907      	bls.n	800d2d4 <_fwalk_sglue+0x38>
 800d2c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d2c8:	3301      	adds	r3, #1
 800d2ca:	d003      	beq.n	800d2d4 <_fwalk_sglue+0x38>
 800d2cc:	4629      	mov	r1, r5
 800d2ce:	4638      	mov	r0, r7
 800d2d0:	47c0      	blx	r8
 800d2d2:	4306      	orrs	r6, r0
 800d2d4:	3568      	adds	r5, #104	; 0x68
 800d2d6:	e7e9      	b.n	800d2ac <_fwalk_sglue+0x10>

0800d2d8 <siprintf>:
 800d2d8:	b40e      	push	{r1, r2, r3}
 800d2da:	b500      	push	{lr}
 800d2dc:	b09c      	sub	sp, #112	; 0x70
 800d2de:	ab1d      	add	r3, sp, #116	; 0x74
 800d2e0:	9002      	str	r0, [sp, #8]
 800d2e2:	9006      	str	r0, [sp, #24]
 800d2e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d2e8:	4809      	ldr	r0, [pc, #36]	; (800d310 <siprintf+0x38>)
 800d2ea:	9107      	str	r1, [sp, #28]
 800d2ec:	9104      	str	r1, [sp, #16]
 800d2ee:	4909      	ldr	r1, [pc, #36]	; (800d314 <siprintf+0x3c>)
 800d2f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2f4:	9105      	str	r1, [sp, #20]
 800d2f6:	6800      	ldr	r0, [r0, #0]
 800d2f8:	9301      	str	r3, [sp, #4]
 800d2fa:	a902      	add	r1, sp, #8
 800d2fc:	f001 fc20 	bl	800eb40 <_svfiprintf_r>
 800d300:	9b02      	ldr	r3, [sp, #8]
 800d302:	2200      	movs	r2, #0
 800d304:	701a      	strb	r2, [r3, #0]
 800d306:	b01c      	add	sp, #112	; 0x70
 800d308:	f85d eb04 	ldr.w	lr, [sp], #4
 800d30c:	b003      	add	sp, #12
 800d30e:	4770      	bx	lr
 800d310:	20000070 	.word	0x20000070
 800d314:	ffff0208 	.word	0xffff0208

0800d318 <__sread>:
 800d318:	b510      	push	{r4, lr}
 800d31a:	460c      	mov	r4, r1
 800d31c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d320:	f000 f86c 	bl	800d3fc <_read_r>
 800d324:	2800      	cmp	r0, #0
 800d326:	bfab      	itete	ge
 800d328:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d32a:	89a3      	ldrhlt	r3, [r4, #12]
 800d32c:	181b      	addge	r3, r3, r0
 800d32e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d332:	bfac      	ite	ge
 800d334:	6563      	strge	r3, [r4, #84]	; 0x54
 800d336:	81a3      	strhlt	r3, [r4, #12]
 800d338:	bd10      	pop	{r4, pc}

0800d33a <__swrite>:
 800d33a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d33e:	461f      	mov	r7, r3
 800d340:	898b      	ldrh	r3, [r1, #12]
 800d342:	05db      	lsls	r3, r3, #23
 800d344:	4605      	mov	r5, r0
 800d346:	460c      	mov	r4, r1
 800d348:	4616      	mov	r6, r2
 800d34a:	d505      	bpl.n	800d358 <__swrite+0x1e>
 800d34c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d350:	2302      	movs	r3, #2
 800d352:	2200      	movs	r2, #0
 800d354:	f000 f840 	bl	800d3d8 <_lseek_r>
 800d358:	89a3      	ldrh	r3, [r4, #12]
 800d35a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d35e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d362:	81a3      	strh	r3, [r4, #12]
 800d364:	4632      	mov	r2, r6
 800d366:	463b      	mov	r3, r7
 800d368:	4628      	mov	r0, r5
 800d36a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d36e:	f000 b857 	b.w	800d420 <_write_r>

0800d372 <__sseek>:
 800d372:	b510      	push	{r4, lr}
 800d374:	460c      	mov	r4, r1
 800d376:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d37a:	f000 f82d 	bl	800d3d8 <_lseek_r>
 800d37e:	1c43      	adds	r3, r0, #1
 800d380:	89a3      	ldrh	r3, [r4, #12]
 800d382:	bf15      	itete	ne
 800d384:	6560      	strne	r0, [r4, #84]	; 0x54
 800d386:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d38a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d38e:	81a3      	strheq	r3, [r4, #12]
 800d390:	bf18      	it	ne
 800d392:	81a3      	strhne	r3, [r4, #12]
 800d394:	bd10      	pop	{r4, pc}

0800d396 <__sclose>:
 800d396:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d39a:	f000 b80d 	b.w	800d3b8 <_close_r>

0800d39e <memset>:
 800d39e:	4402      	add	r2, r0
 800d3a0:	4603      	mov	r3, r0
 800d3a2:	4293      	cmp	r3, r2
 800d3a4:	d100      	bne.n	800d3a8 <memset+0xa>
 800d3a6:	4770      	bx	lr
 800d3a8:	f803 1b01 	strb.w	r1, [r3], #1
 800d3ac:	e7f9      	b.n	800d3a2 <memset+0x4>
	...

0800d3b0 <_localeconv_r>:
 800d3b0:	4800      	ldr	r0, [pc, #0]	; (800d3b4 <_localeconv_r+0x4>)
 800d3b2:	4770      	bx	lr
 800d3b4:	20000164 	.word	0x20000164

0800d3b8 <_close_r>:
 800d3b8:	b538      	push	{r3, r4, r5, lr}
 800d3ba:	4d06      	ldr	r5, [pc, #24]	; (800d3d4 <_close_r+0x1c>)
 800d3bc:	2300      	movs	r3, #0
 800d3be:	4604      	mov	r4, r0
 800d3c0:	4608      	mov	r0, r1
 800d3c2:	602b      	str	r3, [r5, #0]
 800d3c4:	f7f6 fde1 	bl	8003f8a <_close>
 800d3c8:	1c43      	adds	r3, r0, #1
 800d3ca:	d102      	bne.n	800d3d2 <_close_r+0x1a>
 800d3cc:	682b      	ldr	r3, [r5, #0]
 800d3ce:	b103      	cbz	r3, 800d3d2 <_close_r+0x1a>
 800d3d0:	6023      	str	r3, [r4, #0]
 800d3d2:	bd38      	pop	{r3, r4, r5, pc}
 800d3d4:	20000a48 	.word	0x20000a48

0800d3d8 <_lseek_r>:
 800d3d8:	b538      	push	{r3, r4, r5, lr}
 800d3da:	4d07      	ldr	r5, [pc, #28]	; (800d3f8 <_lseek_r+0x20>)
 800d3dc:	4604      	mov	r4, r0
 800d3de:	4608      	mov	r0, r1
 800d3e0:	4611      	mov	r1, r2
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	602a      	str	r2, [r5, #0]
 800d3e6:	461a      	mov	r2, r3
 800d3e8:	f7f6 fdf6 	bl	8003fd8 <_lseek>
 800d3ec:	1c43      	adds	r3, r0, #1
 800d3ee:	d102      	bne.n	800d3f6 <_lseek_r+0x1e>
 800d3f0:	682b      	ldr	r3, [r5, #0]
 800d3f2:	b103      	cbz	r3, 800d3f6 <_lseek_r+0x1e>
 800d3f4:	6023      	str	r3, [r4, #0]
 800d3f6:	bd38      	pop	{r3, r4, r5, pc}
 800d3f8:	20000a48 	.word	0x20000a48

0800d3fc <_read_r>:
 800d3fc:	b538      	push	{r3, r4, r5, lr}
 800d3fe:	4d07      	ldr	r5, [pc, #28]	; (800d41c <_read_r+0x20>)
 800d400:	4604      	mov	r4, r0
 800d402:	4608      	mov	r0, r1
 800d404:	4611      	mov	r1, r2
 800d406:	2200      	movs	r2, #0
 800d408:	602a      	str	r2, [r5, #0]
 800d40a:	461a      	mov	r2, r3
 800d40c:	f7f6 fd84 	bl	8003f18 <_read>
 800d410:	1c43      	adds	r3, r0, #1
 800d412:	d102      	bne.n	800d41a <_read_r+0x1e>
 800d414:	682b      	ldr	r3, [r5, #0]
 800d416:	b103      	cbz	r3, 800d41a <_read_r+0x1e>
 800d418:	6023      	str	r3, [r4, #0]
 800d41a:	bd38      	pop	{r3, r4, r5, pc}
 800d41c:	20000a48 	.word	0x20000a48

0800d420 <_write_r>:
 800d420:	b538      	push	{r3, r4, r5, lr}
 800d422:	4d07      	ldr	r5, [pc, #28]	; (800d440 <_write_r+0x20>)
 800d424:	4604      	mov	r4, r0
 800d426:	4608      	mov	r0, r1
 800d428:	4611      	mov	r1, r2
 800d42a:	2200      	movs	r2, #0
 800d42c:	602a      	str	r2, [r5, #0]
 800d42e:	461a      	mov	r2, r3
 800d430:	f7f6 fd8f 	bl	8003f52 <_write>
 800d434:	1c43      	adds	r3, r0, #1
 800d436:	d102      	bne.n	800d43e <_write_r+0x1e>
 800d438:	682b      	ldr	r3, [r5, #0]
 800d43a:	b103      	cbz	r3, 800d43e <_write_r+0x1e>
 800d43c:	6023      	str	r3, [r4, #0]
 800d43e:	bd38      	pop	{r3, r4, r5, pc}
 800d440:	20000a48 	.word	0x20000a48

0800d444 <__errno>:
 800d444:	4b01      	ldr	r3, [pc, #4]	; (800d44c <__errno+0x8>)
 800d446:	6818      	ldr	r0, [r3, #0]
 800d448:	4770      	bx	lr
 800d44a:	bf00      	nop
 800d44c:	20000070 	.word	0x20000070

0800d450 <__libc_init_array>:
 800d450:	b570      	push	{r4, r5, r6, lr}
 800d452:	4d0d      	ldr	r5, [pc, #52]	; (800d488 <__libc_init_array+0x38>)
 800d454:	4c0d      	ldr	r4, [pc, #52]	; (800d48c <__libc_init_array+0x3c>)
 800d456:	1b64      	subs	r4, r4, r5
 800d458:	10a4      	asrs	r4, r4, #2
 800d45a:	2600      	movs	r6, #0
 800d45c:	42a6      	cmp	r6, r4
 800d45e:	d109      	bne.n	800d474 <__libc_init_array+0x24>
 800d460:	4d0b      	ldr	r5, [pc, #44]	; (800d490 <__libc_init_array+0x40>)
 800d462:	4c0c      	ldr	r4, [pc, #48]	; (800d494 <__libc_init_array+0x44>)
 800d464:	f002 f894 	bl	800f590 <_init>
 800d468:	1b64      	subs	r4, r4, r5
 800d46a:	10a4      	asrs	r4, r4, #2
 800d46c:	2600      	movs	r6, #0
 800d46e:	42a6      	cmp	r6, r4
 800d470:	d105      	bne.n	800d47e <__libc_init_array+0x2e>
 800d472:	bd70      	pop	{r4, r5, r6, pc}
 800d474:	f855 3b04 	ldr.w	r3, [r5], #4
 800d478:	4798      	blx	r3
 800d47a:	3601      	adds	r6, #1
 800d47c:	e7ee      	b.n	800d45c <__libc_init_array+0xc>
 800d47e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d482:	4798      	blx	r3
 800d484:	3601      	adds	r6, #1
 800d486:	e7f2      	b.n	800d46e <__libc_init_array+0x1e>
 800d488:	0800fa34 	.word	0x0800fa34
 800d48c:	0800fa34 	.word	0x0800fa34
 800d490:	0800fa34 	.word	0x0800fa34
 800d494:	0800fa38 	.word	0x0800fa38

0800d498 <__retarget_lock_init_recursive>:
 800d498:	4770      	bx	lr

0800d49a <__retarget_lock_acquire_recursive>:
 800d49a:	4770      	bx	lr

0800d49c <__retarget_lock_release_recursive>:
 800d49c:	4770      	bx	lr

0800d49e <quorem>:
 800d49e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4a2:	6903      	ldr	r3, [r0, #16]
 800d4a4:	690c      	ldr	r4, [r1, #16]
 800d4a6:	42a3      	cmp	r3, r4
 800d4a8:	4607      	mov	r7, r0
 800d4aa:	db7e      	blt.n	800d5aa <quorem+0x10c>
 800d4ac:	3c01      	subs	r4, #1
 800d4ae:	f101 0814 	add.w	r8, r1, #20
 800d4b2:	f100 0514 	add.w	r5, r0, #20
 800d4b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d4ba:	9301      	str	r3, [sp, #4]
 800d4bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d4c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d4c4:	3301      	adds	r3, #1
 800d4c6:	429a      	cmp	r2, r3
 800d4c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d4cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d4d0:	fbb2 f6f3 	udiv	r6, r2, r3
 800d4d4:	d331      	bcc.n	800d53a <quorem+0x9c>
 800d4d6:	f04f 0e00 	mov.w	lr, #0
 800d4da:	4640      	mov	r0, r8
 800d4dc:	46ac      	mov	ip, r5
 800d4de:	46f2      	mov	sl, lr
 800d4e0:	f850 2b04 	ldr.w	r2, [r0], #4
 800d4e4:	b293      	uxth	r3, r2
 800d4e6:	fb06 e303 	mla	r3, r6, r3, lr
 800d4ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d4ee:	0c1a      	lsrs	r2, r3, #16
 800d4f0:	b29b      	uxth	r3, r3
 800d4f2:	ebaa 0303 	sub.w	r3, sl, r3
 800d4f6:	f8dc a000 	ldr.w	sl, [ip]
 800d4fa:	fa13 f38a 	uxtah	r3, r3, sl
 800d4fe:	fb06 220e 	mla	r2, r6, lr, r2
 800d502:	9300      	str	r3, [sp, #0]
 800d504:	9b00      	ldr	r3, [sp, #0]
 800d506:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d50a:	b292      	uxth	r2, r2
 800d50c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d510:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d514:	f8bd 3000 	ldrh.w	r3, [sp]
 800d518:	4581      	cmp	r9, r0
 800d51a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d51e:	f84c 3b04 	str.w	r3, [ip], #4
 800d522:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d526:	d2db      	bcs.n	800d4e0 <quorem+0x42>
 800d528:	f855 300b 	ldr.w	r3, [r5, fp]
 800d52c:	b92b      	cbnz	r3, 800d53a <quorem+0x9c>
 800d52e:	9b01      	ldr	r3, [sp, #4]
 800d530:	3b04      	subs	r3, #4
 800d532:	429d      	cmp	r5, r3
 800d534:	461a      	mov	r2, r3
 800d536:	d32c      	bcc.n	800d592 <quorem+0xf4>
 800d538:	613c      	str	r4, [r7, #16]
 800d53a:	4638      	mov	r0, r7
 800d53c:	f001 f9a6 	bl	800e88c <__mcmp>
 800d540:	2800      	cmp	r0, #0
 800d542:	db22      	blt.n	800d58a <quorem+0xec>
 800d544:	3601      	adds	r6, #1
 800d546:	4629      	mov	r1, r5
 800d548:	2000      	movs	r0, #0
 800d54a:	f858 2b04 	ldr.w	r2, [r8], #4
 800d54e:	f8d1 c000 	ldr.w	ip, [r1]
 800d552:	b293      	uxth	r3, r2
 800d554:	1ac3      	subs	r3, r0, r3
 800d556:	0c12      	lsrs	r2, r2, #16
 800d558:	fa13 f38c 	uxtah	r3, r3, ip
 800d55c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800d560:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d564:	b29b      	uxth	r3, r3
 800d566:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d56a:	45c1      	cmp	r9, r8
 800d56c:	f841 3b04 	str.w	r3, [r1], #4
 800d570:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d574:	d2e9      	bcs.n	800d54a <quorem+0xac>
 800d576:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d57a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d57e:	b922      	cbnz	r2, 800d58a <quorem+0xec>
 800d580:	3b04      	subs	r3, #4
 800d582:	429d      	cmp	r5, r3
 800d584:	461a      	mov	r2, r3
 800d586:	d30a      	bcc.n	800d59e <quorem+0x100>
 800d588:	613c      	str	r4, [r7, #16]
 800d58a:	4630      	mov	r0, r6
 800d58c:	b003      	add	sp, #12
 800d58e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d592:	6812      	ldr	r2, [r2, #0]
 800d594:	3b04      	subs	r3, #4
 800d596:	2a00      	cmp	r2, #0
 800d598:	d1ce      	bne.n	800d538 <quorem+0x9a>
 800d59a:	3c01      	subs	r4, #1
 800d59c:	e7c9      	b.n	800d532 <quorem+0x94>
 800d59e:	6812      	ldr	r2, [r2, #0]
 800d5a0:	3b04      	subs	r3, #4
 800d5a2:	2a00      	cmp	r2, #0
 800d5a4:	d1f0      	bne.n	800d588 <quorem+0xea>
 800d5a6:	3c01      	subs	r4, #1
 800d5a8:	e7eb      	b.n	800d582 <quorem+0xe4>
 800d5aa:	2000      	movs	r0, #0
 800d5ac:	e7ee      	b.n	800d58c <quorem+0xee>
	...

0800d5b0 <_dtoa_r>:
 800d5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5b4:	ed2d 8b04 	vpush	{d8-d9}
 800d5b8:	69c5      	ldr	r5, [r0, #28]
 800d5ba:	b093      	sub	sp, #76	; 0x4c
 800d5bc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d5c0:	ec57 6b10 	vmov	r6, r7, d0
 800d5c4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d5c8:	9107      	str	r1, [sp, #28]
 800d5ca:	4604      	mov	r4, r0
 800d5cc:	920a      	str	r2, [sp, #40]	; 0x28
 800d5ce:	930d      	str	r3, [sp, #52]	; 0x34
 800d5d0:	b975      	cbnz	r5, 800d5f0 <_dtoa_r+0x40>
 800d5d2:	2010      	movs	r0, #16
 800d5d4:	f000 fe2a 	bl	800e22c <malloc>
 800d5d8:	4602      	mov	r2, r0
 800d5da:	61e0      	str	r0, [r4, #28]
 800d5dc:	b920      	cbnz	r0, 800d5e8 <_dtoa_r+0x38>
 800d5de:	4bae      	ldr	r3, [pc, #696]	; (800d898 <_dtoa_r+0x2e8>)
 800d5e0:	21ef      	movs	r1, #239	; 0xef
 800d5e2:	48ae      	ldr	r0, [pc, #696]	; (800d89c <_dtoa_r+0x2ec>)
 800d5e4:	f001 fc90 	bl	800ef08 <__assert_func>
 800d5e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d5ec:	6005      	str	r5, [r0, #0]
 800d5ee:	60c5      	str	r5, [r0, #12]
 800d5f0:	69e3      	ldr	r3, [r4, #28]
 800d5f2:	6819      	ldr	r1, [r3, #0]
 800d5f4:	b151      	cbz	r1, 800d60c <_dtoa_r+0x5c>
 800d5f6:	685a      	ldr	r2, [r3, #4]
 800d5f8:	604a      	str	r2, [r1, #4]
 800d5fa:	2301      	movs	r3, #1
 800d5fc:	4093      	lsls	r3, r2
 800d5fe:	608b      	str	r3, [r1, #8]
 800d600:	4620      	mov	r0, r4
 800d602:	f000 ff07 	bl	800e414 <_Bfree>
 800d606:	69e3      	ldr	r3, [r4, #28]
 800d608:	2200      	movs	r2, #0
 800d60a:	601a      	str	r2, [r3, #0]
 800d60c:	1e3b      	subs	r3, r7, #0
 800d60e:	bfbb      	ittet	lt
 800d610:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d614:	9303      	strlt	r3, [sp, #12]
 800d616:	2300      	movge	r3, #0
 800d618:	2201      	movlt	r2, #1
 800d61a:	bfac      	ite	ge
 800d61c:	f8c8 3000 	strge.w	r3, [r8]
 800d620:	f8c8 2000 	strlt.w	r2, [r8]
 800d624:	4b9e      	ldr	r3, [pc, #632]	; (800d8a0 <_dtoa_r+0x2f0>)
 800d626:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d62a:	ea33 0308 	bics.w	r3, r3, r8
 800d62e:	d11b      	bne.n	800d668 <_dtoa_r+0xb8>
 800d630:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d632:	f242 730f 	movw	r3, #9999	; 0x270f
 800d636:	6013      	str	r3, [r2, #0]
 800d638:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800d63c:	4333      	orrs	r3, r6
 800d63e:	f000 8593 	beq.w	800e168 <_dtoa_r+0xbb8>
 800d642:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d644:	b963      	cbnz	r3, 800d660 <_dtoa_r+0xb0>
 800d646:	4b97      	ldr	r3, [pc, #604]	; (800d8a4 <_dtoa_r+0x2f4>)
 800d648:	e027      	b.n	800d69a <_dtoa_r+0xea>
 800d64a:	4b97      	ldr	r3, [pc, #604]	; (800d8a8 <_dtoa_r+0x2f8>)
 800d64c:	9300      	str	r3, [sp, #0]
 800d64e:	3308      	adds	r3, #8
 800d650:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d652:	6013      	str	r3, [r2, #0]
 800d654:	9800      	ldr	r0, [sp, #0]
 800d656:	b013      	add	sp, #76	; 0x4c
 800d658:	ecbd 8b04 	vpop	{d8-d9}
 800d65c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d660:	4b90      	ldr	r3, [pc, #576]	; (800d8a4 <_dtoa_r+0x2f4>)
 800d662:	9300      	str	r3, [sp, #0]
 800d664:	3303      	adds	r3, #3
 800d666:	e7f3      	b.n	800d650 <_dtoa_r+0xa0>
 800d668:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d66c:	2200      	movs	r2, #0
 800d66e:	ec51 0b17 	vmov	r0, r1, d7
 800d672:	eeb0 8a47 	vmov.f32	s16, s14
 800d676:	eef0 8a67 	vmov.f32	s17, s15
 800d67a:	2300      	movs	r3, #0
 800d67c:	f7f3 fa24 	bl	8000ac8 <__aeabi_dcmpeq>
 800d680:	4681      	mov	r9, r0
 800d682:	b160      	cbz	r0, 800d69e <_dtoa_r+0xee>
 800d684:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d686:	2301      	movs	r3, #1
 800d688:	6013      	str	r3, [r2, #0]
 800d68a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	f000 8568 	beq.w	800e162 <_dtoa_r+0xbb2>
 800d692:	4b86      	ldr	r3, [pc, #536]	; (800d8ac <_dtoa_r+0x2fc>)
 800d694:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d696:	6013      	str	r3, [r2, #0]
 800d698:	3b01      	subs	r3, #1
 800d69a:	9300      	str	r3, [sp, #0]
 800d69c:	e7da      	b.n	800d654 <_dtoa_r+0xa4>
 800d69e:	aa10      	add	r2, sp, #64	; 0x40
 800d6a0:	a911      	add	r1, sp, #68	; 0x44
 800d6a2:	4620      	mov	r0, r4
 800d6a4:	eeb0 0a48 	vmov.f32	s0, s16
 800d6a8:	eef0 0a68 	vmov.f32	s1, s17
 800d6ac:	f001 f994 	bl	800e9d8 <__d2b>
 800d6b0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d6b4:	4682      	mov	sl, r0
 800d6b6:	2d00      	cmp	r5, #0
 800d6b8:	d07f      	beq.n	800d7ba <_dtoa_r+0x20a>
 800d6ba:	ee18 3a90 	vmov	r3, s17
 800d6be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d6c2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d6c6:	ec51 0b18 	vmov	r0, r1, d8
 800d6ca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d6ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d6d2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800d6d6:	4619      	mov	r1, r3
 800d6d8:	2200      	movs	r2, #0
 800d6da:	4b75      	ldr	r3, [pc, #468]	; (800d8b0 <_dtoa_r+0x300>)
 800d6dc:	f7f2 fdd4 	bl	8000288 <__aeabi_dsub>
 800d6e0:	a367      	add	r3, pc, #412	; (adr r3, 800d880 <_dtoa_r+0x2d0>)
 800d6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6e6:	f7f2 ff87 	bl	80005f8 <__aeabi_dmul>
 800d6ea:	a367      	add	r3, pc, #412	; (adr r3, 800d888 <_dtoa_r+0x2d8>)
 800d6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6f0:	f7f2 fdcc 	bl	800028c <__adddf3>
 800d6f4:	4606      	mov	r6, r0
 800d6f6:	4628      	mov	r0, r5
 800d6f8:	460f      	mov	r7, r1
 800d6fa:	f7f2 ff13 	bl	8000524 <__aeabi_i2d>
 800d6fe:	a364      	add	r3, pc, #400	; (adr r3, 800d890 <_dtoa_r+0x2e0>)
 800d700:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d704:	f7f2 ff78 	bl	80005f8 <__aeabi_dmul>
 800d708:	4602      	mov	r2, r0
 800d70a:	460b      	mov	r3, r1
 800d70c:	4630      	mov	r0, r6
 800d70e:	4639      	mov	r1, r7
 800d710:	f7f2 fdbc 	bl	800028c <__adddf3>
 800d714:	4606      	mov	r6, r0
 800d716:	460f      	mov	r7, r1
 800d718:	f7f3 fa1e 	bl	8000b58 <__aeabi_d2iz>
 800d71c:	2200      	movs	r2, #0
 800d71e:	4683      	mov	fp, r0
 800d720:	2300      	movs	r3, #0
 800d722:	4630      	mov	r0, r6
 800d724:	4639      	mov	r1, r7
 800d726:	f7f3 f9d9 	bl	8000adc <__aeabi_dcmplt>
 800d72a:	b148      	cbz	r0, 800d740 <_dtoa_r+0x190>
 800d72c:	4658      	mov	r0, fp
 800d72e:	f7f2 fef9 	bl	8000524 <__aeabi_i2d>
 800d732:	4632      	mov	r2, r6
 800d734:	463b      	mov	r3, r7
 800d736:	f7f3 f9c7 	bl	8000ac8 <__aeabi_dcmpeq>
 800d73a:	b908      	cbnz	r0, 800d740 <_dtoa_r+0x190>
 800d73c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d740:	f1bb 0f16 	cmp.w	fp, #22
 800d744:	d857      	bhi.n	800d7f6 <_dtoa_r+0x246>
 800d746:	4b5b      	ldr	r3, [pc, #364]	; (800d8b4 <_dtoa_r+0x304>)
 800d748:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d750:	ec51 0b18 	vmov	r0, r1, d8
 800d754:	f7f3 f9c2 	bl	8000adc <__aeabi_dcmplt>
 800d758:	2800      	cmp	r0, #0
 800d75a:	d04e      	beq.n	800d7fa <_dtoa_r+0x24a>
 800d75c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d760:	2300      	movs	r3, #0
 800d762:	930c      	str	r3, [sp, #48]	; 0x30
 800d764:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d766:	1b5b      	subs	r3, r3, r5
 800d768:	1e5a      	subs	r2, r3, #1
 800d76a:	bf45      	ittet	mi
 800d76c:	f1c3 0301 	rsbmi	r3, r3, #1
 800d770:	9305      	strmi	r3, [sp, #20]
 800d772:	2300      	movpl	r3, #0
 800d774:	2300      	movmi	r3, #0
 800d776:	9206      	str	r2, [sp, #24]
 800d778:	bf54      	ite	pl
 800d77a:	9305      	strpl	r3, [sp, #20]
 800d77c:	9306      	strmi	r3, [sp, #24]
 800d77e:	f1bb 0f00 	cmp.w	fp, #0
 800d782:	db3c      	blt.n	800d7fe <_dtoa_r+0x24e>
 800d784:	9b06      	ldr	r3, [sp, #24]
 800d786:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800d78a:	445b      	add	r3, fp
 800d78c:	9306      	str	r3, [sp, #24]
 800d78e:	2300      	movs	r3, #0
 800d790:	9308      	str	r3, [sp, #32]
 800d792:	9b07      	ldr	r3, [sp, #28]
 800d794:	2b09      	cmp	r3, #9
 800d796:	d868      	bhi.n	800d86a <_dtoa_r+0x2ba>
 800d798:	2b05      	cmp	r3, #5
 800d79a:	bfc4      	itt	gt
 800d79c:	3b04      	subgt	r3, #4
 800d79e:	9307      	strgt	r3, [sp, #28]
 800d7a0:	9b07      	ldr	r3, [sp, #28]
 800d7a2:	f1a3 0302 	sub.w	r3, r3, #2
 800d7a6:	bfcc      	ite	gt
 800d7a8:	2500      	movgt	r5, #0
 800d7aa:	2501      	movle	r5, #1
 800d7ac:	2b03      	cmp	r3, #3
 800d7ae:	f200 8085 	bhi.w	800d8bc <_dtoa_r+0x30c>
 800d7b2:	e8df f003 	tbb	[pc, r3]
 800d7b6:	3b2e      	.short	0x3b2e
 800d7b8:	5839      	.short	0x5839
 800d7ba:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d7be:	441d      	add	r5, r3
 800d7c0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d7c4:	2b20      	cmp	r3, #32
 800d7c6:	bfc1      	itttt	gt
 800d7c8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d7cc:	fa08 f803 	lslgt.w	r8, r8, r3
 800d7d0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800d7d4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800d7d8:	bfd6      	itet	le
 800d7da:	f1c3 0320 	rsble	r3, r3, #32
 800d7de:	ea48 0003 	orrgt.w	r0, r8, r3
 800d7e2:	fa06 f003 	lslle.w	r0, r6, r3
 800d7e6:	f7f2 fe8d 	bl	8000504 <__aeabi_ui2d>
 800d7ea:	2201      	movs	r2, #1
 800d7ec:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800d7f0:	3d01      	subs	r5, #1
 800d7f2:	920e      	str	r2, [sp, #56]	; 0x38
 800d7f4:	e76f      	b.n	800d6d6 <_dtoa_r+0x126>
 800d7f6:	2301      	movs	r3, #1
 800d7f8:	e7b3      	b.n	800d762 <_dtoa_r+0x1b2>
 800d7fa:	900c      	str	r0, [sp, #48]	; 0x30
 800d7fc:	e7b2      	b.n	800d764 <_dtoa_r+0x1b4>
 800d7fe:	9b05      	ldr	r3, [sp, #20]
 800d800:	eba3 030b 	sub.w	r3, r3, fp
 800d804:	9305      	str	r3, [sp, #20]
 800d806:	f1cb 0300 	rsb	r3, fp, #0
 800d80a:	9308      	str	r3, [sp, #32]
 800d80c:	2300      	movs	r3, #0
 800d80e:	930b      	str	r3, [sp, #44]	; 0x2c
 800d810:	e7bf      	b.n	800d792 <_dtoa_r+0x1e2>
 800d812:	2300      	movs	r3, #0
 800d814:	9309      	str	r3, [sp, #36]	; 0x24
 800d816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d818:	2b00      	cmp	r3, #0
 800d81a:	dc52      	bgt.n	800d8c2 <_dtoa_r+0x312>
 800d81c:	2301      	movs	r3, #1
 800d81e:	9301      	str	r3, [sp, #4]
 800d820:	9304      	str	r3, [sp, #16]
 800d822:	461a      	mov	r2, r3
 800d824:	920a      	str	r2, [sp, #40]	; 0x28
 800d826:	e00b      	b.n	800d840 <_dtoa_r+0x290>
 800d828:	2301      	movs	r3, #1
 800d82a:	e7f3      	b.n	800d814 <_dtoa_r+0x264>
 800d82c:	2300      	movs	r3, #0
 800d82e:	9309      	str	r3, [sp, #36]	; 0x24
 800d830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d832:	445b      	add	r3, fp
 800d834:	9301      	str	r3, [sp, #4]
 800d836:	3301      	adds	r3, #1
 800d838:	2b01      	cmp	r3, #1
 800d83a:	9304      	str	r3, [sp, #16]
 800d83c:	bfb8      	it	lt
 800d83e:	2301      	movlt	r3, #1
 800d840:	69e0      	ldr	r0, [r4, #28]
 800d842:	2100      	movs	r1, #0
 800d844:	2204      	movs	r2, #4
 800d846:	f102 0614 	add.w	r6, r2, #20
 800d84a:	429e      	cmp	r6, r3
 800d84c:	d93d      	bls.n	800d8ca <_dtoa_r+0x31a>
 800d84e:	6041      	str	r1, [r0, #4]
 800d850:	4620      	mov	r0, r4
 800d852:	f000 fd9f 	bl	800e394 <_Balloc>
 800d856:	9000      	str	r0, [sp, #0]
 800d858:	2800      	cmp	r0, #0
 800d85a:	d139      	bne.n	800d8d0 <_dtoa_r+0x320>
 800d85c:	4b16      	ldr	r3, [pc, #88]	; (800d8b8 <_dtoa_r+0x308>)
 800d85e:	4602      	mov	r2, r0
 800d860:	f240 11af 	movw	r1, #431	; 0x1af
 800d864:	e6bd      	b.n	800d5e2 <_dtoa_r+0x32>
 800d866:	2301      	movs	r3, #1
 800d868:	e7e1      	b.n	800d82e <_dtoa_r+0x27e>
 800d86a:	2501      	movs	r5, #1
 800d86c:	2300      	movs	r3, #0
 800d86e:	9307      	str	r3, [sp, #28]
 800d870:	9509      	str	r5, [sp, #36]	; 0x24
 800d872:	f04f 33ff 	mov.w	r3, #4294967295
 800d876:	9301      	str	r3, [sp, #4]
 800d878:	9304      	str	r3, [sp, #16]
 800d87a:	2200      	movs	r2, #0
 800d87c:	2312      	movs	r3, #18
 800d87e:	e7d1      	b.n	800d824 <_dtoa_r+0x274>
 800d880:	636f4361 	.word	0x636f4361
 800d884:	3fd287a7 	.word	0x3fd287a7
 800d888:	8b60c8b3 	.word	0x8b60c8b3
 800d88c:	3fc68a28 	.word	0x3fc68a28
 800d890:	509f79fb 	.word	0x509f79fb
 800d894:	3fd34413 	.word	0x3fd34413
 800d898:	0800f701 	.word	0x0800f701
 800d89c:	0800f718 	.word	0x0800f718
 800d8a0:	7ff00000 	.word	0x7ff00000
 800d8a4:	0800f6fd 	.word	0x0800f6fd
 800d8a8:	0800f6f4 	.word	0x0800f6f4
 800d8ac:	0800f6d1 	.word	0x0800f6d1
 800d8b0:	3ff80000 	.word	0x3ff80000
 800d8b4:	0800f808 	.word	0x0800f808
 800d8b8:	0800f770 	.word	0x0800f770
 800d8bc:	2301      	movs	r3, #1
 800d8be:	9309      	str	r3, [sp, #36]	; 0x24
 800d8c0:	e7d7      	b.n	800d872 <_dtoa_r+0x2c2>
 800d8c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8c4:	9301      	str	r3, [sp, #4]
 800d8c6:	9304      	str	r3, [sp, #16]
 800d8c8:	e7ba      	b.n	800d840 <_dtoa_r+0x290>
 800d8ca:	3101      	adds	r1, #1
 800d8cc:	0052      	lsls	r2, r2, #1
 800d8ce:	e7ba      	b.n	800d846 <_dtoa_r+0x296>
 800d8d0:	69e3      	ldr	r3, [r4, #28]
 800d8d2:	9a00      	ldr	r2, [sp, #0]
 800d8d4:	601a      	str	r2, [r3, #0]
 800d8d6:	9b04      	ldr	r3, [sp, #16]
 800d8d8:	2b0e      	cmp	r3, #14
 800d8da:	f200 80a8 	bhi.w	800da2e <_dtoa_r+0x47e>
 800d8de:	2d00      	cmp	r5, #0
 800d8e0:	f000 80a5 	beq.w	800da2e <_dtoa_r+0x47e>
 800d8e4:	f1bb 0f00 	cmp.w	fp, #0
 800d8e8:	dd38      	ble.n	800d95c <_dtoa_r+0x3ac>
 800d8ea:	4bc0      	ldr	r3, [pc, #768]	; (800dbec <_dtoa_r+0x63c>)
 800d8ec:	f00b 020f 	and.w	r2, fp, #15
 800d8f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d8f4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d8f8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800d8fc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800d900:	d019      	beq.n	800d936 <_dtoa_r+0x386>
 800d902:	4bbb      	ldr	r3, [pc, #748]	; (800dbf0 <_dtoa_r+0x640>)
 800d904:	ec51 0b18 	vmov	r0, r1, d8
 800d908:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d90c:	f7f2 ff9e 	bl	800084c <__aeabi_ddiv>
 800d910:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d914:	f008 080f 	and.w	r8, r8, #15
 800d918:	2503      	movs	r5, #3
 800d91a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800dbf0 <_dtoa_r+0x640>
 800d91e:	f1b8 0f00 	cmp.w	r8, #0
 800d922:	d10a      	bne.n	800d93a <_dtoa_r+0x38a>
 800d924:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d928:	4632      	mov	r2, r6
 800d92a:	463b      	mov	r3, r7
 800d92c:	f7f2 ff8e 	bl	800084c <__aeabi_ddiv>
 800d930:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d934:	e02b      	b.n	800d98e <_dtoa_r+0x3de>
 800d936:	2502      	movs	r5, #2
 800d938:	e7ef      	b.n	800d91a <_dtoa_r+0x36a>
 800d93a:	f018 0f01 	tst.w	r8, #1
 800d93e:	d008      	beq.n	800d952 <_dtoa_r+0x3a2>
 800d940:	4630      	mov	r0, r6
 800d942:	4639      	mov	r1, r7
 800d944:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d948:	f7f2 fe56 	bl	80005f8 <__aeabi_dmul>
 800d94c:	3501      	adds	r5, #1
 800d94e:	4606      	mov	r6, r0
 800d950:	460f      	mov	r7, r1
 800d952:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d956:	f109 0908 	add.w	r9, r9, #8
 800d95a:	e7e0      	b.n	800d91e <_dtoa_r+0x36e>
 800d95c:	f000 809f 	beq.w	800da9e <_dtoa_r+0x4ee>
 800d960:	f1cb 0600 	rsb	r6, fp, #0
 800d964:	4ba1      	ldr	r3, [pc, #644]	; (800dbec <_dtoa_r+0x63c>)
 800d966:	4fa2      	ldr	r7, [pc, #648]	; (800dbf0 <_dtoa_r+0x640>)
 800d968:	f006 020f 	and.w	r2, r6, #15
 800d96c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d970:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d974:	ec51 0b18 	vmov	r0, r1, d8
 800d978:	f7f2 fe3e 	bl	80005f8 <__aeabi_dmul>
 800d97c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d980:	1136      	asrs	r6, r6, #4
 800d982:	2300      	movs	r3, #0
 800d984:	2502      	movs	r5, #2
 800d986:	2e00      	cmp	r6, #0
 800d988:	d17e      	bne.n	800da88 <_dtoa_r+0x4d8>
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d1d0      	bne.n	800d930 <_dtoa_r+0x380>
 800d98e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d990:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d994:	2b00      	cmp	r3, #0
 800d996:	f000 8084 	beq.w	800daa2 <_dtoa_r+0x4f2>
 800d99a:	4b96      	ldr	r3, [pc, #600]	; (800dbf4 <_dtoa_r+0x644>)
 800d99c:	2200      	movs	r2, #0
 800d99e:	4640      	mov	r0, r8
 800d9a0:	4649      	mov	r1, r9
 800d9a2:	f7f3 f89b 	bl	8000adc <__aeabi_dcmplt>
 800d9a6:	2800      	cmp	r0, #0
 800d9a8:	d07b      	beq.n	800daa2 <_dtoa_r+0x4f2>
 800d9aa:	9b04      	ldr	r3, [sp, #16]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d078      	beq.n	800daa2 <_dtoa_r+0x4f2>
 800d9b0:	9b01      	ldr	r3, [sp, #4]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	dd39      	ble.n	800da2a <_dtoa_r+0x47a>
 800d9b6:	4b90      	ldr	r3, [pc, #576]	; (800dbf8 <_dtoa_r+0x648>)
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	4640      	mov	r0, r8
 800d9bc:	4649      	mov	r1, r9
 800d9be:	f7f2 fe1b 	bl	80005f8 <__aeabi_dmul>
 800d9c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d9c6:	9e01      	ldr	r6, [sp, #4]
 800d9c8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800d9cc:	3501      	adds	r5, #1
 800d9ce:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d9d2:	4628      	mov	r0, r5
 800d9d4:	f7f2 fda6 	bl	8000524 <__aeabi_i2d>
 800d9d8:	4642      	mov	r2, r8
 800d9da:	464b      	mov	r3, r9
 800d9dc:	f7f2 fe0c 	bl	80005f8 <__aeabi_dmul>
 800d9e0:	4b86      	ldr	r3, [pc, #536]	; (800dbfc <_dtoa_r+0x64c>)
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	f7f2 fc52 	bl	800028c <__adddf3>
 800d9e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800d9ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d9f0:	9303      	str	r3, [sp, #12]
 800d9f2:	2e00      	cmp	r6, #0
 800d9f4:	d158      	bne.n	800daa8 <_dtoa_r+0x4f8>
 800d9f6:	4b82      	ldr	r3, [pc, #520]	; (800dc00 <_dtoa_r+0x650>)
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	4640      	mov	r0, r8
 800d9fc:	4649      	mov	r1, r9
 800d9fe:	f7f2 fc43 	bl	8000288 <__aeabi_dsub>
 800da02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800da06:	4680      	mov	r8, r0
 800da08:	4689      	mov	r9, r1
 800da0a:	f7f3 f885 	bl	8000b18 <__aeabi_dcmpgt>
 800da0e:	2800      	cmp	r0, #0
 800da10:	f040 8296 	bne.w	800df40 <_dtoa_r+0x990>
 800da14:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800da18:	4640      	mov	r0, r8
 800da1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800da1e:	4649      	mov	r1, r9
 800da20:	f7f3 f85c 	bl	8000adc <__aeabi_dcmplt>
 800da24:	2800      	cmp	r0, #0
 800da26:	f040 8289 	bne.w	800df3c <_dtoa_r+0x98c>
 800da2a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800da2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800da30:	2b00      	cmp	r3, #0
 800da32:	f2c0 814e 	blt.w	800dcd2 <_dtoa_r+0x722>
 800da36:	f1bb 0f0e 	cmp.w	fp, #14
 800da3a:	f300 814a 	bgt.w	800dcd2 <_dtoa_r+0x722>
 800da3e:	4b6b      	ldr	r3, [pc, #428]	; (800dbec <_dtoa_r+0x63c>)
 800da40:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800da44:	e9d3 8900 	ldrd	r8, r9, [r3]
 800da48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	f280 80dc 	bge.w	800dc08 <_dtoa_r+0x658>
 800da50:	9b04      	ldr	r3, [sp, #16]
 800da52:	2b00      	cmp	r3, #0
 800da54:	f300 80d8 	bgt.w	800dc08 <_dtoa_r+0x658>
 800da58:	f040 826f 	bne.w	800df3a <_dtoa_r+0x98a>
 800da5c:	4b68      	ldr	r3, [pc, #416]	; (800dc00 <_dtoa_r+0x650>)
 800da5e:	2200      	movs	r2, #0
 800da60:	4640      	mov	r0, r8
 800da62:	4649      	mov	r1, r9
 800da64:	f7f2 fdc8 	bl	80005f8 <__aeabi_dmul>
 800da68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800da6c:	f7f3 f84a 	bl	8000b04 <__aeabi_dcmpge>
 800da70:	9e04      	ldr	r6, [sp, #16]
 800da72:	4637      	mov	r7, r6
 800da74:	2800      	cmp	r0, #0
 800da76:	f040 8245 	bne.w	800df04 <_dtoa_r+0x954>
 800da7a:	9d00      	ldr	r5, [sp, #0]
 800da7c:	2331      	movs	r3, #49	; 0x31
 800da7e:	f805 3b01 	strb.w	r3, [r5], #1
 800da82:	f10b 0b01 	add.w	fp, fp, #1
 800da86:	e241      	b.n	800df0c <_dtoa_r+0x95c>
 800da88:	07f2      	lsls	r2, r6, #31
 800da8a:	d505      	bpl.n	800da98 <_dtoa_r+0x4e8>
 800da8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800da90:	f7f2 fdb2 	bl	80005f8 <__aeabi_dmul>
 800da94:	3501      	adds	r5, #1
 800da96:	2301      	movs	r3, #1
 800da98:	1076      	asrs	r6, r6, #1
 800da9a:	3708      	adds	r7, #8
 800da9c:	e773      	b.n	800d986 <_dtoa_r+0x3d6>
 800da9e:	2502      	movs	r5, #2
 800daa0:	e775      	b.n	800d98e <_dtoa_r+0x3de>
 800daa2:	9e04      	ldr	r6, [sp, #16]
 800daa4:	465f      	mov	r7, fp
 800daa6:	e792      	b.n	800d9ce <_dtoa_r+0x41e>
 800daa8:	9900      	ldr	r1, [sp, #0]
 800daaa:	4b50      	ldr	r3, [pc, #320]	; (800dbec <_dtoa_r+0x63c>)
 800daac:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dab0:	4431      	add	r1, r6
 800dab2:	9102      	str	r1, [sp, #8]
 800dab4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dab6:	eeb0 9a47 	vmov.f32	s18, s14
 800daba:	eef0 9a67 	vmov.f32	s19, s15
 800dabe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800dac2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dac6:	2900      	cmp	r1, #0
 800dac8:	d044      	beq.n	800db54 <_dtoa_r+0x5a4>
 800daca:	494e      	ldr	r1, [pc, #312]	; (800dc04 <_dtoa_r+0x654>)
 800dacc:	2000      	movs	r0, #0
 800dace:	f7f2 febd 	bl	800084c <__aeabi_ddiv>
 800dad2:	ec53 2b19 	vmov	r2, r3, d9
 800dad6:	f7f2 fbd7 	bl	8000288 <__aeabi_dsub>
 800dada:	9d00      	ldr	r5, [sp, #0]
 800dadc:	ec41 0b19 	vmov	d9, r0, r1
 800dae0:	4649      	mov	r1, r9
 800dae2:	4640      	mov	r0, r8
 800dae4:	f7f3 f838 	bl	8000b58 <__aeabi_d2iz>
 800dae8:	4606      	mov	r6, r0
 800daea:	f7f2 fd1b 	bl	8000524 <__aeabi_i2d>
 800daee:	4602      	mov	r2, r0
 800daf0:	460b      	mov	r3, r1
 800daf2:	4640      	mov	r0, r8
 800daf4:	4649      	mov	r1, r9
 800daf6:	f7f2 fbc7 	bl	8000288 <__aeabi_dsub>
 800dafa:	3630      	adds	r6, #48	; 0x30
 800dafc:	f805 6b01 	strb.w	r6, [r5], #1
 800db00:	ec53 2b19 	vmov	r2, r3, d9
 800db04:	4680      	mov	r8, r0
 800db06:	4689      	mov	r9, r1
 800db08:	f7f2 ffe8 	bl	8000adc <__aeabi_dcmplt>
 800db0c:	2800      	cmp	r0, #0
 800db0e:	d164      	bne.n	800dbda <_dtoa_r+0x62a>
 800db10:	4642      	mov	r2, r8
 800db12:	464b      	mov	r3, r9
 800db14:	4937      	ldr	r1, [pc, #220]	; (800dbf4 <_dtoa_r+0x644>)
 800db16:	2000      	movs	r0, #0
 800db18:	f7f2 fbb6 	bl	8000288 <__aeabi_dsub>
 800db1c:	ec53 2b19 	vmov	r2, r3, d9
 800db20:	f7f2 ffdc 	bl	8000adc <__aeabi_dcmplt>
 800db24:	2800      	cmp	r0, #0
 800db26:	f040 80b6 	bne.w	800dc96 <_dtoa_r+0x6e6>
 800db2a:	9b02      	ldr	r3, [sp, #8]
 800db2c:	429d      	cmp	r5, r3
 800db2e:	f43f af7c 	beq.w	800da2a <_dtoa_r+0x47a>
 800db32:	4b31      	ldr	r3, [pc, #196]	; (800dbf8 <_dtoa_r+0x648>)
 800db34:	ec51 0b19 	vmov	r0, r1, d9
 800db38:	2200      	movs	r2, #0
 800db3a:	f7f2 fd5d 	bl	80005f8 <__aeabi_dmul>
 800db3e:	4b2e      	ldr	r3, [pc, #184]	; (800dbf8 <_dtoa_r+0x648>)
 800db40:	ec41 0b19 	vmov	d9, r0, r1
 800db44:	2200      	movs	r2, #0
 800db46:	4640      	mov	r0, r8
 800db48:	4649      	mov	r1, r9
 800db4a:	f7f2 fd55 	bl	80005f8 <__aeabi_dmul>
 800db4e:	4680      	mov	r8, r0
 800db50:	4689      	mov	r9, r1
 800db52:	e7c5      	b.n	800dae0 <_dtoa_r+0x530>
 800db54:	ec51 0b17 	vmov	r0, r1, d7
 800db58:	f7f2 fd4e 	bl	80005f8 <__aeabi_dmul>
 800db5c:	9b02      	ldr	r3, [sp, #8]
 800db5e:	9d00      	ldr	r5, [sp, #0]
 800db60:	930f      	str	r3, [sp, #60]	; 0x3c
 800db62:	ec41 0b19 	vmov	d9, r0, r1
 800db66:	4649      	mov	r1, r9
 800db68:	4640      	mov	r0, r8
 800db6a:	f7f2 fff5 	bl	8000b58 <__aeabi_d2iz>
 800db6e:	4606      	mov	r6, r0
 800db70:	f7f2 fcd8 	bl	8000524 <__aeabi_i2d>
 800db74:	3630      	adds	r6, #48	; 0x30
 800db76:	4602      	mov	r2, r0
 800db78:	460b      	mov	r3, r1
 800db7a:	4640      	mov	r0, r8
 800db7c:	4649      	mov	r1, r9
 800db7e:	f7f2 fb83 	bl	8000288 <__aeabi_dsub>
 800db82:	f805 6b01 	strb.w	r6, [r5], #1
 800db86:	9b02      	ldr	r3, [sp, #8]
 800db88:	429d      	cmp	r5, r3
 800db8a:	4680      	mov	r8, r0
 800db8c:	4689      	mov	r9, r1
 800db8e:	f04f 0200 	mov.w	r2, #0
 800db92:	d124      	bne.n	800dbde <_dtoa_r+0x62e>
 800db94:	4b1b      	ldr	r3, [pc, #108]	; (800dc04 <_dtoa_r+0x654>)
 800db96:	ec51 0b19 	vmov	r0, r1, d9
 800db9a:	f7f2 fb77 	bl	800028c <__adddf3>
 800db9e:	4602      	mov	r2, r0
 800dba0:	460b      	mov	r3, r1
 800dba2:	4640      	mov	r0, r8
 800dba4:	4649      	mov	r1, r9
 800dba6:	f7f2 ffb7 	bl	8000b18 <__aeabi_dcmpgt>
 800dbaa:	2800      	cmp	r0, #0
 800dbac:	d173      	bne.n	800dc96 <_dtoa_r+0x6e6>
 800dbae:	ec53 2b19 	vmov	r2, r3, d9
 800dbb2:	4914      	ldr	r1, [pc, #80]	; (800dc04 <_dtoa_r+0x654>)
 800dbb4:	2000      	movs	r0, #0
 800dbb6:	f7f2 fb67 	bl	8000288 <__aeabi_dsub>
 800dbba:	4602      	mov	r2, r0
 800dbbc:	460b      	mov	r3, r1
 800dbbe:	4640      	mov	r0, r8
 800dbc0:	4649      	mov	r1, r9
 800dbc2:	f7f2 ff8b 	bl	8000adc <__aeabi_dcmplt>
 800dbc6:	2800      	cmp	r0, #0
 800dbc8:	f43f af2f 	beq.w	800da2a <_dtoa_r+0x47a>
 800dbcc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800dbce:	1e6b      	subs	r3, r5, #1
 800dbd0:	930f      	str	r3, [sp, #60]	; 0x3c
 800dbd2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dbd6:	2b30      	cmp	r3, #48	; 0x30
 800dbd8:	d0f8      	beq.n	800dbcc <_dtoa_r+0x61c>
 800dbda:	46bb      	mov	fp, r7
 800dbdc:	e04a      	b.n	800dc74 <_dtoa_r+0x6c4>
 800dbde:	4b06      	ldr	r3, [pc, #24]	; (800dbf8 <_dtoa_r+0x648>)
 800dbe0:	f7f2 fd0a 	bl	80005f8 <__aeabi_dmul>
 800dbe4:	4680      	mov	r8, r0
 800dbe6:	4689      	mov	r9, r1
 800dbe8:	e7bd      	b.n	800db66 <_dtoa_r+0x5b6>
 800dbea:	bf00      	nop
 800dbec:	0800f808 	.word	0x0800f808
 800dbf0:	0800f7e0 	.word	0x0800f7e0
 800dbf4:	3ff00000 	.word	0x3ff00000
 800dbf8:	40240000 	.word	0x40240000
 800dbfc:	401c0000 	.word	0x401c0000
 800dc00:	40140000 	.word	0x40140000
 800dc04:	3fe00000 	.word	0x3fe00000
 800dc08:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800dc0c:	9d00      	ldr	r5, [sp, #0]
 800dc0e:	4642      	mov	r2, r8
 800dc10:	464b      	mov	r3, r9
 800dc12:	4630      	mov	r0, r6
 800dc14:	4639      	mov	r1, r7
 800dc16:	f7f2 fe19 	bl	800084c <__aeabi_ddiv>
 800dc1a:	f7f2 ff9d 	bl	8000b58 <__aeabi_d2iz>
 800dc1e:	9001      	str	r0, [sp, #4]
 800dc20:	f7f2 fc80 	bl	8000524 <__aeabi_i2d>
 800dc24:	4642      	mov	r2, r8
 800dc26:	464b      	mov	r3, r9
 800dc28:	f7f2 fce6 	bl	80005f8 <__aeabi_dmul>
 800dc2c:	4602      	mov	r2, r0
 800dc2e:	460b      	mov	r3, r1
 800dc30:	4630      	mov	r0, r6
 800dc32:	4639      	mov	r1, r7
 800dc34:	f7f2 fb28 	bl	8000288 <__aeabi_dsub>
 800dc38:	9e01      	ldr	r6, [sp, #4]
 800dc3a:	9f04      	ldr	r7, [sp, #16]
 800dc3c:	3630      	adds	r6, #48	; 0x30
 800dc3e:	f805 6b01 	strb.w	r6, [r5], #1
 800dc42:	9e00      	ldr	r6, [sp, #0]
 800dc44:	1bae      	subs	r6, r5, r6
 800dc46:	42b7      	cmp	r7, r6
 800dc48:	4602      	mov	r2, r0
 800dc4a:	460b      	mov	r3, r1
 800dc4c:	d134      	bne.n	800dcb8 <_dtoa_r+0x708>
 800dc4e:	f7f2 fb1d 	bl	800028c <__adddf3>
 800dc52:	4642      	mov	r2, r8
 800dc54:	464b      	mov	r3, r9
 800dc56:	4606      	mov	r6, r0
 800dc58:	460f      	mov	r7, r1
 800dc5a:	f7f2 ff5d 	bl	8000b18 <__aeabi_dcmpgt>
 800dc5e:	b9c8      	cbnz	r0, 800dc94 <_dtoa_r+0x6e4>
 800dc60:	4642      	mov	r2, r8
 800dc62:	464b      	mov	r3, r9
 800dc64:	4630      	mov	r0, r6
 800dc66:	4639      	mov	r1, r7
 800dc68:	f7f2 ff2e 	bl	8000ac8 <__aeabi_dcmpeq>
 800dc6c:	b110      	cbz	r0, 800dc74 <_dtoa_r+0x6c4>
 800dc6e:	9b01      	ldr	r3, [sp, #4]
 800dc70:	07db      	lsls	r3, r3, #31
 800dc72:	d40f      	bmi.n	800dc94 <_dtoa_r+0x6e4>
 800dc74:	4651      	mov	r1, sl
 800dc76:	4620      	mov	r0, r4
 800dc78:	f000 fbcc 	bl	800e414 <_Bfree>
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dc80:	702b      	strb	r3, [r5, #0]
 800dc82:	f10b 0301 	add.w	r3, fp, #1
 800dc86:	6013      	str	r3, [r2, #0]
 800dc88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	f43f ace2 	beq.w	800d654 <_dtoa_r+0xa4>
 800dc90:	601d      	str	r5, [r3, #0]
 800dc92:	e4df      	b.n	800d654 <_dtoa_r+0xa4>
 800dc94:	465f      	mov	r7, fp
 800dc96:	462b      	mov	r3, r5
 800dc98:	461d      	mov	r5, r3
 800dc9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dc9e:	2a39      	cmp	r2, #57	; 0x39
 800dca0:	d106      	bne.n	800dcb0 <_dtoa_r+0x700>
 800dca2:	9a00      	ldr	r2, [sp, #0]
 800dca4:	429a      	cmp	r2, r3
 800dca6:	d1f7      	bne.n	800dc98 <_dtoa_r+0x6e8>
 800dca8:	9900      	ldr	r1, [sp, #0]
 800dcaa:	2230      	movs	r2, #48	; 0x30
 800dcac:	3701      	adds	r7, #1
 800dcae:	700a      	strb	r2, [r1, #0]
 800dcb0:	781a      	ldrb	r2, [r3, #0]
 800dcb2:	3201      	adds	r2, #1
 800dcb4:	701a      	strb	r2, [r3, #0]
 800dcb6:	e790      	b.n	800dbda <_dtoa_r+0x62a>
 800dcb8:	4ba3      	ldr	r3, [pc, #652]	; (800df48 <_dtoa_r+0x998>)
 800dcba:	2200      	movs	r2, #0
 800dcbc:	f7f2 fc9c 	bl	80005f8 <__aeabi_dmul>
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	4606      	mov	r6, r0
 800dcc6:	460f      	mov	r7, r1
 800dcc8:	f7f2 fefe 	bl	8000ac8 <__aeabi_dcmpeq>
 800dccc:	2800      	cmp	r0, #0
 800dcce:	d09e      	beq.n	800dc0e <_dtoa_r+0x65e>
 800dcd0:	e7d0      	b.n	800dc74 <_dtoa_r+0x6c4>
 800dcd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dcd4:	2a00      	cmp	r2, #0
 800dcd6:	f000 80ca 	beq.w	800de6e <_dtoa_r+0x8be>
 800dcda:	9a07      	ldr	r2, [sp, #28]
 800dcdc:	2a01      	cmp	r2, #1
 800dcde:	f300 80ad 	bgt.w	800de3c <_dtoa_r+0x88c>
 800dce2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dce4:	2a00      	cmp	r2, #0
 800dce6:	f000 80a5 	beq.w	800de34 <_dtoa_r+0x884>
 800dcea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dcee:	9e08      	ldr	r6, [sp, #32]
 800dcf0:	9d05      	ldr	r5, [sp, #20]
 800dcf2:	9a05      	ldr	r2, [sp, #20]
 800dcf4:	441a      	add	r2, r3
 800dcf6:	9205      	str	r2, [sp, #20]
 800dcf8:	9a06      	ldr	r2, [sp, #24]
 800dcfa:	2101      	movs	r1, #1
 800dcfc:	441a      	add	r2, r3
 800dcfe:	4620      	mov	r0, r4
 800dd00:	9206      	str	r2, [sp, #24]
 800dd02:	f000 fc3d 	bl	800e580 <__i2b>
 800dd06:	4607      	mov	r7, r0
 800dd08:	b165      	cbz	r5, 800dd24 <_dtoa_r+0x774>
 800dd0a:	9b06      	ldr	r3, [sp, #24]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	dd09      	ble.n	800dd24 <_dtoa_r+0x774>
 800dd10:	42ab      	cmp	r3, r5
 800dd12:	9a05      	ldr	r2, [sp, #20]
 800dd14:	bfa8      	it	ge
 800dd16:	462b      	movge	r3, r5
 800dd18:	1ad2      	subs	r2, r2, r3
 800dd1a:	9205      	str	r2, [sp, #20]
 800dd1c:	9a06      	ldr	r2, [sp, #24]
 800dd1e:	1aed      	subs	r5, r5, r3
 800dd20:	1ad3      	subs	r3, r2, r3
 800dd22:	9306      	str	r3, [sp, #24]
 800dd24:	9b08      	ldr	r3, [sp, #32]
 800dd26:	b1f3      	cbz	r3, 800dd66 <_dtoa_r+0x7b6>
 800dd28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	f000 80a3 	beq.w	800de76 <_dtoa_r+0x8c6>
 800dd30:	2e00      	cmp	r6, #0
 800dd32:	dd10      	ble.n	800dd56 <_dtoa_r+0x7a6>
 800dd34:	4639      	mov	r1, r7
 800dd36:	4632      	mov	r2, r6
 800dd38:	4620      	mov	r0, r4
 800dd3a:	f000 fce1 	bl	800e700 <__pow5mult>
 800dd3e:	4652      	mov	r2, sl
 800dd40:	4601      	mov	r1, r0
 800dd42:	4607      	mov	r7, r0
 800dd44:	4620      	mov	r0, r4
 800dd46:	f000 fc31 	bl	800e5ac <__multiply>
 800dd4a:	4651      	mov	r1, sl
 800dd4c:	4680      	mov	r8, r0
 800dd4e:	4620      	mov	r0, r4
 800dd50:	f000 fb60 	bl	800e414 <_Bfree>
 800dd54:	46c2      	mov	sl, r8
 800dd56:	9b08      	ldr	r3, [sp, #32]
 800dd58:	1b9a      	subs	r2, r3, r6
 800dd5a:	d004      	beq.n	800dd66 <_dtoa_r+0x7b6>
 800dd5c:	4651      	mov	r1, sl
 800dd5e:	4620      	mov	r0, r4
 800dd60:	f000 fcce 	bl	800e700 <__pow5mult>
 800dd64:	4682      	mov	sl, r0
 800dd66:	2101      	movs	r1, #1
 800dd68:	4620      	mov	r0, r4
 800dd6a:	f000 fc09 	bl	800e580 <__i2b>
 800dd6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	4606      	mov	r6, r0
 800dd74:	f340 8081 	ble.w	800de7a <_dtoa_r+0x8ca>
 800dd78:	461a      	mov	r2, r3
 800dd7a:	4601      	mov	r1, r0
 800dd7c:	4620      	mov	r0, r4
 800dd7e:	f000 fcbf 	bl	800e700 <__pow5mult>
 800dd82:	9b07      	ldr	r3, [sp, #28]
 800dd84:	2b01      	cmp	r3, #1
 800dd86:	4606      	mov	r6, r0
 800dd88:	dd7a      	ble.n	800de80 <_dtoa_r+0x8d0>
 800dd8a:	f04f 0800 	mov.w	r8, #0
 800dd8e:	6933      	ldr	r3, [r6, #16]
 800dd90:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800dd94:	6918      	ldr	r0, [r3, #16]
 800dd96:	f000 fba5 	bl	800e4e4 <__hi0bits>
 800dd9a:	f1c0 0020 	rsb	r0, r0, #32
 800dd9e:	9b06      	ldr	r3, [sp, #24]
 800dda0:	4418      	add	r0, r3
 800dda2:	f010 001f 	ands.w	r0, r0, #31
 800dda6:	f000 8094 	beq.w	800ded2 <_dtoa_r+0x922>
 800ddaa:	f1c0 0320 	rsb	r3, r0, #32
 800ddae:	2b04      	cmp	r3, #4
 800ddb0:	f340 8085 	ble.w	800debe <_dtoa_r+0x90e>
 800ddb4:	9b05      	ldr	r3, [sp, #20]
 800ddb6:	f1c0 001c 	rsb	r0, r0, #28
 800ddba:	4403      	add	r3, r0
 800ddbc:	9305      	str	r3, [sp, #20]
 800ddbe:	9b06      	ldr	r3, [sp, #24]
 800ddc0:	4403      	add	r3, r0
 800ddc2:	4405      	add	r5, r0
 800ddc4:	9306      	str	r3, [sp, #24]
 800ddc6:	9b05      	ldr	r3, [sp, #20]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	dd05      	ble.n	800ddd8 <_dtoa_r+0x828>
 800ddcc:	4651      	mov	r1, sl
 800ddce:	461a      	mov	r2, r3
 800ddd0:	4620      	mov	r0, r4
 800ddd2:	f000 fcef 	bl	800e7b4 <__lshift>
 800ddd6:	4682      	mov	sl, r0
 800ddd8:	9b06      	ldr	r3, [sp, #24]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	dd05      	ble.n	800ddea <_dtoa_r+0x83a>
 800ddde:	4631      	mov	r1, r6
 800dde0:	461a      	mov	r2, r3
 800dde2:	4620      	mov	r0, r4
 800dde4:	f000 fce6 	bl	800e7b4 <__lshift>
 800dde8:	4606      	mov	r6, r0
 800ddea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d072      	beq.n	800ded6 <_dtoa_r+0x926>
 800ddf0:	4631      	mov	r1, r6
 800ddf2:	4650      	mov	r0, sl
 800ddf4:	f000 fd4a 	bl	800e88c <__mcmp>
 800ddf8:	2800      	cmp	r0, #0
 800ddfa:	da6c      	bge.n	800ded6 <_dtoa_r+0x926>
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	4651      	mov	r1, sl
 800de00:	220a      	movs	r2, #10
 800de02:	4620      	mov	r0, r4
 800de04:	f000 fb28 	bl	800e458 <__multadd>
 800de08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de0a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800de0e:	4682      	mov	sl, r0
 800de10:	2b00      	cmp	r3, #0
 800de12:	f000 81b0 	beq.w	800e176 <_dtoa_r+0xbc6>
 800de16:	2300      	movs	r3, #0
 800de18:	4639      	mov	r1, r7
 800de1a:	220a      	movs	r2, #10
 800de1c:	4620      	mov	r0, r4
 800de1e:	f000 fb1b 	bl	800e458 <__multadd>
 800de22:	9b01      	ldr	r3, [sp, #4]
 800de24:	2b00      	cmp	r3, #0
 800de26:	4607      	mov	r7, r0
 800de28:	f300 8096 	bgt.w	800df58 <_dtoa_r+0x9a8>
 800de2c:	9b07      	ldr	r3, [sp, #28]
 800de2e:	2b02      	cmp	r3, #2
 800de30:	dc59      	bgt.n	800dee6 <_dtoa_r+0x936>
 800de32:	e091      	b.n	800df58 <_dtoa_r+0x9a8>
 800de34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800de36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800de3a:	e758      	b.n	800dcee <_dtoa_r+0x73e>
 800de3c:	9b04      	ldr	r3, [sp, #16]
 800de3e:	1e5e      	subs	r6, r3, #1
 800de40:	9b08      	ldr	r3, [sp, #32]
 800de42:	42b3      	cmp	r3, r6
 800de44:	bfbf      	itttt	lt
 800de46:	9b08      	ldrlt	r3, [sp, #32]
 800de48:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800de4a:	9608      	strlt	r6, [sp, #32]
 800de4c:	1af3      	sublt	r3, r6, r3
 800de4e:	bfb4      	ite	lt
 800de50:	18d2      	addlt	r2, r2, r3
 800de52:	1b9e      	subge	r6, r3, r6
 800de54:	9b04      	ldr	r3, [sp, #16]
 800de56:	bfbc      	itt	lt
 800de58:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800de5a:	2600      	movlt	r6, #0
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	bfb7      	itett	lt
 800de60:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800de64:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800de68:	1a9d      	sublt	r5, r3, r2
 800de6a:	2300      	movlt	r3, #0
 800de6c:	e741      	b.n	800dcf2 <_dtoa_r+0x742>
 800de6e:	9e08      	ldr	r6, [sp, #32]
 800de70:	9d05      	ldr	r5, [sp, #20]
 800de72:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800de74:	e748      	b.n	800dd08 <_dtoa_r+0x758>
 800de76:	9a08      	ldr	r2, [sp, #32]
 800de78:	e770      	b.n	800dd5c <_dtoa_r+0x7ac>
 800de7a:	9b07      	ldr	r3, [sp, #28]
 800de7c:	2b01      	cmp	r3, #1
 800de7e:	dc19      	bgt.n	800deb4 <_dtoa_r+0x904>
 800de80:	9b02      	ldr	r3, [sp, #8]
 800de82:	b9bb      	cbnz	r3, 800deb4 <_dtoa_r+0x904>
 800de84:	9b03      	ldr	r3, [sp, #12]
 800de86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800de8a:	b99b      	cbnz	r3, 800deb4 <_dtoa_r+0x904>
 800de8c:	9b03      	ldr	r3, [sp, #12]
 800de8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800de92:	0d1b      	lsrs	r3, r3, #20
 800de94:	051b      	lsls	r3, r3, #20
 800de96:	b183      	cbz	r3, 800deba <_dtoa_r+0x90a>
 800de98:	9b05      	ldr	r3, [sp, #20]
 800de9a:	3301      	adds	r3, #1
 800de9c:	9305      	str	r3, [sp, #20]
 800de9e:	9b06      	ldr	r3, [sp, #24]
 800dea0:	3301      	adds	r3, #1
 800dea2:	9306      	str	r3, [sp, #24]
 800dea4:	f04f 0801 	mov.w	r8, #1
 800dea8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800deaa:	2b00      	cmp	r3, #0
 800deac:	f47f af6f 	bne.w	800dd8e <_dtoa_r+0x7de>
 800deb0:	2001      	movs	r0, #1
 800deb2:	e774      	b.n	800dd9e <_dtoa_r+0x7ee>
 800deb4:	f04f 0800 	mov.w	r8, #0
 800deb8:	e7f6      	b.n	800dea8 <_dtoa_r+0x8f8>
 800deba:	4698      	mov	r8, r3
 800debc:	e7f4      	b.n	800dea8 <_dtoa_r+0x8f8>
 800debe:	d082      	beq.n	800ddc6 <_dtoa_r+0x816>
 800dec0:	9a05      	ldr	r2, [sp, #20]
 800dec2:	331c      	adds	r3, #28
 800dec4:	441a      	add	r2, r3
 800dec6:	9205      	str	r2, [sp, #20]
 800dec8:	9a06      	ldr	r2, [sp, #24]
 800deca:	441a      	add	r2, r3
 800decc:	441d      	add	r5, r3
 800dece:	9206      	str	r2, [sp, #24]
 800ded0:	e779      	b.n	800ddc6 <_dtoa_r+0x816>
 800ded2:	4603      	mov	r3, r0
 800ded4:	e7f4      	b.n	800dec0 <_dtoa_r+0x910>
 800ded6:	9b04      	ldr	r3, [sp, #16]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	dc37      	bgt.n	800df4c <_dtoa_r+0x99c>
 800dedc:	9b07      	ldr	r3, [sp, #28]
 800dede:	2b02      	cmp	r3, #2
 800dee0:	dd34      	ble.n	800df4c <_dtoa_r+0x99c>
 800dee2:	9b04      	ldr	r3, [sp, #16]
 800dee4:	9301      	str	r3, [sp, #4]
 800dee6:	9b01      	ldr	r3, [sp, #4]
 800dee8:	b963      	cbnz	r3, 800df04 <_dtoa_r+0x954>
 800deea:	4631      	mov	r1, r6
 800deec:	2205      	movs	r2, #5
 800deee:	4620      	mov	r0, r4
 800def0:	f000 fab2 	bl	800e458 <__multadd>
 800def4:	4601      	mov	r1, r0
 800def6:	4606      	mov	r6, r0
 800def8:	4650      	mov	r0, sl
 800defa:	f000 fcc7 	bl	800e88c <__mcmp>
 800defe:	2800      	cmp	r0, #0
 800df00:	f73f adbb 	bgt.w	800da7a <_dtoa_r+0x4ca>
 800df04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df06:	9d00      	ldr	r5, [sp, #0]
 800df08:	ea6f 0b03 	mvn.w	fp, r3
 800df0c:	f04f 0800 	mov.w	r8, #0
 800df10:	4631      	mov	r1, r6
 800df12:	4620      	mov	r0, r4
 800df14:	f000 fa7e 	bl	800e414 <_Bfree>
 800df18:	2f00      	cmp	r7, #0
 800df1a:	f43f aeab 	beq.w	800dc74 <_dtoa_r+0x6c4>
 800df1e:	f1b8 0f00 	cmp.w	r8, #0
 800df22:	d005      	beq.n	800df30 <_dtoa_r+0x980>
 800df24:	45b8      	cmp	r8, r7
 800df26:	d003      	beq.n	800df30 <_dtoa_r+0x980>
 800df28:	4641      	mov	r1, r8
 800df2a:	4620      	mov	r0, r4
 800df2c:	f000 fa72 	bl	800e414 <_Bfree>
 800df30:	4639      	mov	r1, r7
 800df32:	4620      	mov	r0, r4
 800df34:	f000 fa6e 	bl	800e414 <_Bfree>
 800df38:	e69c      	b.n	800dc74 <_dtoa_r+0x6c4>
 800df3a:	2600      	movs	r6, #0
 800df3c:	4637      	mov	r7, r6
 800df3e:	e7e1      	b.n	800df04 <_dtoa_r+0x954>
 800df40:	46bb      	mov	fp, r7
 800df42:	4637      	mov	r7, r6
 800df44:	e599      	b.n	800da7a <_dtoa_r+0x4ca>
 800df46:	bf00      	nop
 800df48:	40240000 	.word	0x40240000
 800df4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df4e:	2b00      	cmp	r3, #0
 800df50:	f000 80c8 	beq.w	800e0e4 <_dtoa_r+0xb34>
 800df54:	9b04      	ldr	r3, [sp, #16]
 800df56:	9301      	str	r3, [sp, #4]
 800df58:	2d00      	cmp	r5, #0
 800df5a:	dd05      	ble.n	800df68 <_dtoa_r+0x9b8>
 800df5c:	4639      	mov	r1, r7
 800df5e:	462a      	mov	r2, r5
 800df60:	4620      	mov	r0, r4
 800df62:	f000 fc27 	bl	800e7b4 <__lshift>
 800df66:	4607      	mov	r7, r0
 800df68:	f1b8 0f00 	cmp.w	r8, #0
 800df6c:	d05b      	beq.n	800e026 <_dtoa_r+0xa76>
 800df6e:	6879      	ldr	r1, [r7, #4]
 800df70:	4620      	mov	r0, r4
 800df72:	f000 fa0f 	bl	800e394 <_Balloc>
 800df76:	4605      	mov	r5, r0
 800df78:	b928      	cbnz	r0, 800df86 <_dtoa_r+0x9d6>
 800df7a:	4b83      	ldr	r3, [pc, #524]	; (800e188 <_dtoa_r+0xbd8>)
 800df7c:	4602      	mov	r2, r0
 800df7e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800df82:	f7ff bb2e 	b.w	800d5e2 <_dtoa_r+0x32>
 800df86:	693a      	ldr	r2, [r7, #16]
 800df88:	3202      	adds	r2, #2
 800df8a:	0092      	lsls	r2, r2, #2
 800df8c:	f107 010c 	add.w	r1, r7, #12
 800df90:	300c      	adds	r0, #12
 800df92:	f000 ffab 	bl	800eeec <memcpy>
 800df96:	2201      	movs	r2, #1
 800df98:	4629      	mov	r1, r5
 800df9a:	4620      	mov	r0, r4
 800df9c:	f000 fc0a 	bl	800e7b4 <__lshift>
 800dfa0:	9b00      	ldr	r3, [sp, #0]
 800dfa2:	3301      	adds	r3, #1
 800dfa4:	9304      	str	r3, [sp, #16]
 800dfa6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dfaa:	4413      	add	r3, r2
 800dfac:	9308      	str	r3, [sp, #32]
 800dfae:	9b02      	ldr	r3, [sp, #8]
 800dfb0:	f003 0301 	and.w	r3, r3, #1
 800dfb4:	46b8      	mov	r8, r7
 800dfb6:	9306      	str	r3, [sp, #24]
 800dfb8:	4607      	mov	r7, r0
 800dfba:	9b04      	ldr	r3, [sp, #16]
 800dfbc:	4631      	mov	r1, r6
 800dfbe:	3b01      	subs	r3, #1
 800dfc0:	4650      	mov	r0, sl
 800dfc2:	9301      	str	r3, [sp, #4]
 800dfc4:	f7ff fa6b 	bl	800d49e <quorem>
 800dfc8:	4641      	mov	r1, r8
 800dfca:	9002      	str	r0, [sp, #8]
 800dfcc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800dfd0:	4650      	mov	r0, sl
 800dfd2:	f000 fc5b 	bl	800e88c <__mcmp>
 800dfd6:	463a      	mov	r2, r7
 800dfd8:	9005      	str	r0, [sp, #20]
 800dfda:	4631      	mov	r1, r6
 800dfdc:	4620      	mov	r0, r4
 800dfde:	f000 fc71 	bl	800e8c4 <__mdiff>
 800dfe2:	68c2      	ldr	r2, [r0, #12]
 800dfe4:	4605      	mov	r5, r0
 800dfe6:	bb02      	cbnz	r2, 800e02a <_dtoa_r+0xa7a>
 800dfe8:	4601      	mov	r1, r0
 800dfea:	4650      	mov	r0, sl
 800dfec:	f000 fc4e 	bl	800e88c <__mcmp>
 800dff0:	4602      	mov	r2, r0
 800dff2:	4629      	mov	r1, r5
 800dff4:	4620      	mov	r0, r4
 800dff6:	9209      	str	r2, [sp, #36]	; 0x24
 800dff8:	f000 fa0c 	bl	800e414 <_Bfree>
 800dffc:	9b07      	ldr	r3, [sp, #28]
 800dffe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e000:	9d04      	ldr	r5, [sp, #16]
 800e002:	ea43 0102 	orr.w	r1, r3, r2
 800e006:	9b06      	ldr	r3, [sp, #24]
 800e008:	4319      	orrs	r1, r3
 800e00a:	d110      	bne.n	800e02e <_dtoa_r+0xa7e>
 800e00c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e010:	d029      	beq.n	800e066 <_dtoa_r+0xab6>
 800e012:	9b05      	ldr	r3, [sp, #20]
 800e014:	2b00      	cmp	r3, #0
 800e016:	dd02      	ble.n	800e01e <_dtoa_r+0xa6e>
 800e018:	9b02      	ldr	r3, [sp, #8]
 800e01a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800e01e:	9b01      	ldr	r3, [sp, #4]
 800e020:	f883 9000 	strb.w	r9, [r3]
 800e024:	e774      	b.n	800df10 <_dtoa_r+0x960>
 800e026:	4638      	mov	r0, r7
 800e028:	e7ba      	b.n	800dfa0 <_dtoa_r+0x9f0>
 800e02a:	2201      	movs	r2, #1
 800e02c:	e7e1      	b.n	800dff2 <_dtoa_r+0xa42>
 800e02e:	9b05      	ldr	r3, [sp, #20]
 800e030:	2b00      	cmp	r3, #0
 800e032:	db04      	blt.n	800e03e <_dtoa_r+0xa8e>
 800e034:	9907      	ldr	r1, [sp, #28]
 800e036:	430b      	orrs	r3, r1
 800e038:	9906      	ldr	r1, [sp, #24]
 800e03a:	430b      	orrs	r3, r1
 800e03c:	d120      	bne.n	800e080 <_dtoa_r+0xad0>
 800e03e:	2a00      	cmp	r2, #0
 800e040:	dded      	ble.n	800e01e <_dtoa_r+0xa6e>
 800e042:	4651      	mov	r1, sl
 800e044:	2201      	movs	r2, #1
 800e046:	4620      	mov	r0, r4
 800e048:	f000 fbb4 	bl	800e7b4 <__lshift>
 800e04c:	4631      	mov	r1, r6
 800e04e:	4682      	mov	sl, r0
 800e050:	f000 fc1c 	bl	800e88c <__mcmp>
 800e054:	2800      	cmp	r0, #0
 800e056:	dc03      	bgt.n	800e060 <_dtoa_r+0xab0>
 800e058:	d1e1      	bne.n	800e01e <_dtoa_r+0xa6e>
 800e05a:	f019 0f01 	tst.w	r9, #1
 800e05e:	d0de      	beq.n	800e01e <_dtoa_r+0xa6e>
 800e060:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e064:	d1d8      	bne.n	800e018 <_dtoa_r+0xa68>
 800e066:	9a01      	ldr	r2, [sp, #4]
 800e068:	2339      	movs	r3, #57	; 0x39
 800e06a:	7013      	strb	r3, [r2, #0]
 800e06c:	462b      	mov	r3, r5
 800e06e:	461d      	mov	r5, r3
 800e070:	3b01      	subs	r3, #1
 800e072:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e076:	2a39      	cmp	r2, #57	; 0x39
 800e078:	d06c      	beq.n	800e154 <_dtoa_r+0xba4>
 800e07a:	3201      	adds	r2, #1
 800e07c:	701a      	strb	r2, [r3, #0]
 800e07e:	e747      	b.n	800df10 <_dtoa_r+0x960>
 800e080:	2a00      	cmp	r2, #0
 800e082:	dd07      	ble.n	800e094 <_dtoa_r+0xae4>
 800e084:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e088:	d0ed      	beq.n	800e066 <_dtoa_r+0xab6>
 800e08a:	9a01      	ldr	r2, [sp, #4]
 800e08c:	f109 0301 	add.w	r3, r9, #1
 800e090:	7013      	strb	r3, [r2, #0]
 800e092:	e73d      	b.n	800df10 <_dtoa_r+0x960>
 800e094:	9b04      	ldr	r3, [sp, #16]
 800e096:	9a08      	ldr	r2, [sp, #32]
 800e098:	f803 9c01 	strb.w	r9, [r3, #-1]
 800e09c:	4293      	cmp	r3, r2
 800e09e:	d043      	beq.n	800e128 <_dtoa_r+0xb78>
 800e0a0:	4651      	mov	r1, sl
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	220a      	movs	r2, #10
 800e0a6:	4620      	mov	r0, r4
 800e0a8:	f000 f9d6 	bl	800e458 <__multadd>
 800e0ac:	45b8      	cmp	r8, r7
 800e0ae:	4682      	mov	sl, r0
 800e0b0:	f04f 0300 	mov.w	r3, #0
 800e0b4:	f04f 020a 	mov.w	r2, #10
 800e0b8:	4641      	mov	r1, r8
 800e0ba:	4620      	mov	r0, r4
 800e0bc:	d107      	bne.n	800e0ce <_dtoa_r+0xb1e>
 800e0be:	f000 f9cb 	bl	800e458 <__multadd>
 800e0c2:	4680      	mov	r8, r0
 800e0c4:	4607      	mov	r7, r0
 800e0c6:	9b04      	ldr	r3, [sp, #16]
 800e0c8:	3301      	adds	r3, #1
 800e0ca:	9304      	str	r3, [sp, #16]
 800e0cc:	e775      	b.n	800dfba <_dtoa_r+0xa0a>
 800e0ce:	f000 f9c3 	bl	800e458 <__multadd>
 800e0d2:	4639      	mov	r1, r7
 800e0d4:	4680      	mov	r8, r0
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	220a      	movs	r2, #10
 800e0da:	4620      	mov	r0, r4
 800e0dc:	f000 f9bc 	bl	800e458 <__multadd>
 800e0e0:	4607      	mov	r7, r0
 800e0e2:	e7f0      	b.n	800e0c6 <_dtoa_r+0xb16>
 800e0e4:	9b04      	ldr	r3, [sp, #16]
 800e0e6:	9301      	str	r3, [sp, #4]
 800e0e8:	9d00      	ldr	r5, [sp, #0]
 800e0ea:	4631      	mov	r1, r6
 800e0ec:	4650      	mov	r0, sl
 800e0ee:	f7ff f9d6 	bl	800d49e <quorem>
 800e0f2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e0f6:	9b00      	ldr	r3, [sp, #0]
 800e0f8:	f805 9b01 	strb.w	r9, [r5], #1
 800e0fc:	1aea      	subs	r2, r5, r3
 800e0fe:	9b01      	ldr	r3, [sp, #4]
 800e100:	4293      	cmp	r3, r2
 800e102:	dd07      	ble.n	800e114 <_dtoa_r+0xb64>
 800e104:	4651      	mov	r1, sl
 800e106:	2300      	movs	r3, #0
 800e108:	220a      	movs	r2, #10
 800e10a:	4620      	mov	r0, r4
 800e10c:	f000 f9a4 	bl	800e458 <__multadd>
 800e110:	4682      	mov	sl, r0
 800e112:	e7ea      	b.n	800e0ea <_dtoa_r+0xb3a>
 800e114:	9b01      	ldr	r3, [sp, #4]
 800e116:	2b00      	cmp	r3, #0
 800e118:	bfc8      	it	gt
 800e11a:	461d      	movgt	r5, r3
 800e11c:	9b00      	ldr	r3, [sp, #0]
 800e11e:	bfd8      	it	le
 800e120:	2501      	movle	r5, #1
 800e122:	441d      	add	r5, r3
 800e124:	f04f 0800 	mov.w	r8, #0
 800e128:	4651      	mov	r1, sl
 800e12a:	2201      	movs	r2, #1
 800e12c:	4620      	mov	r0, r4
 800e12e:	f000 fb41 	bl	800e7b4 <__lshift>
 800e132:	4631      	mov	r1, r6
 800e134:	4682      	mov	sl, r0
 800e136:	f000 fba9 	bl	800e88c <__mcmp>
 800e13a:	2800      	cmp	r0, #0
 800e13c:	dc96      	bgt.n	800e06c <_dtoa_r+0xabc>
 800e13e:	d102      	bne.n	800e146 <_dtoa_r+0xb96>
 800e140:	f019 0f01 	tst.w	r9, #1
 800e144:	d192      	bne.n	800e06c <_dtoa_r+0xabc>
 800e146:	462b      	mov	r3, r5
 800e148:	461d      	mov	r5, r3
 800e14a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e14e:	2a30      	cmp	r2, #48	; 0x30
 800e150:	d0fa      	beq.n	800e148 <_dtoa_r+0xb98>
 800e152:	e6dd      	b.n	800df10 <_dtoa_r+0x960>
 800e154:	9a00      	ldr	r2, [sp, #0]
 800e156:	429a      	cmp	r2, r3
 800e158:	d189      	bne.n	800e06e <_dtoa_r+0xabe>
 800e15a:	f10b 0b01 	add.w	fp, fp, #1
 800e15e:	2331      	movs	r3, #49	; 0x31
 800e160:	e796      	b.n	800e090 <_dtoa_r+0xae0>
 800e162:	4b0a      	ldr	r3, [pc, #40]	; (800e18c <_dtoa_r+0xbdc>)
 800e164:	f7ff ba99 	b.w	800d69a <_dtoa_r+0xea>
 800e168:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	f47f aa6d 	bne.w	800d64a <_dtoa_r+0x9a>
 800e170:	4b07      	ldr	r3, [pc, #28]	; (800e190 <_dtoa_r+0xbe0>)
 800e172:	f7ff ba92 	b.w	800d69a <_dtoa_r+0xea>
 800e176:	9b01      	ldr	r3, [sp, #4]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	dcb5      	bgt.n	800e0e8 <_dtoa_r+0xb38>
 800e17c:	9b07      	ldr	r3, [sp, #28]
 800e17e:	2b02      	cmp	r3, #2
 800e180:	f73f aeb1 	bgt.w	800dee6 <_dtoa_r+0x936>
 800e184:	e7b0      	b.n	800e0e8 <_dtoa_r+0xb38>
 800e186:	bf00      	nop
 800e188:	0800f770 	.word	0x0800f770
 800e18c:	0800f6d0 	.word	0x0800f6d0
 800e190:	0800f6f4 	.word	0x0800f6f4

0800e194 <_free_r>:
 800e194:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e196:	2900      	cmp	r1, #0
 800e198:	d044      	beq.n	800e224 <_free_r+0x90>
 800e19a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e19e:	9001      	str	r0, [sp, #4]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	f1a1 0404 	sub.w	r4, r1, #4
 800e1a6:	bfb8      	it	lt
 800e1a8:	18e4      	addlt	r4, r4, r3
 800e1aa:	f000 f8e7 	bl	800e37c <__malloc_lock>
 800e1ae:	4a1e      	ldr	r2, [pc, #120]	; (800e228 <_free_r+0x94>)
 800e1b0:	9801      	ldr	r0, [sp, #4]
 800e1b2:	6813      	ldr	r3, [r2, #0]
 800e1b4:	b933      	cbnz	r3, 800e1c4 <_free_r+0x30>
 800e1b6:	6063      	str	r3, [r4, #4]
 800e1b8:	6014      	str	r4, [r2, #0]
 800e1ba:	b003      	add	sp, #12
 800e1bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e1c0:	f000 b8e2 	b.w	800e388 <__malloc_unlock>
 800e1c4:	42a3      	cmp	r3, r4
 800e1c6:	d908      	bls.n	800e1da <_free_r+0x46>
 800e1c8:	6825      	ldr	r5, [r4, #0]
 800e1ca:	1961      	adds	r1, r4, r5
 800e1cc:	428b      	cmp	r3, r1
 800e1ce:	bf01      	itttt	eq
 800e1d0:	6819      	ldreq	r1, [r3, #0]
 800e1d2:	685b      	ldreq	r3, [r3, #4]
 800e1d4:	1949      	addeq	r1, r1, r5
 800e1d6:	6021      	streq	r1, [r4, #0]
 800e1d8:	e7ed      	b.n	800e1b6 <_free_r+0x22>
 800e1da:	461a      	mov	r2, r3
 800e1dc:	685b      	ldr	r3, [r3, #4]
 800e1de:	b10b      	cbz	r3, 800e1e4 <_free_r+0x50>
 800e1e0:	42a3      	cmp	r3, r4
 800e1e2:	d9fa      	bls.n	800e1da <_free_r+0x46>
 800e1e4:	6811      	ldr	r1, [r2, #0]
 800e1e6:	1855      	adds	r5, r2, r1
 800e1e8:	42a5      	cmp	r5, r4
 800e1ea:	d10b      	bne.n	800e204 <_free_r+0x70>
 800e1ec:	6824      	ldr	r4, [r4, #0]
 800e1ee:	4421      	add	r1, r4
 800e1f0:	1854      	adds	r4, r2, r1
 800e1f2:	42a3      	cmp	r3, r4
 800e1f4:	6011      	str	r1, [r2, #0]
 800e1f6:	d1e0      	bne.n	800e1ba <_free_r+0x26>
 800e1f8:	681c      	ldr	r4, [r3, #0]
 800e1fa:	685b      	ldr	r3, [r3, #4]
 800e1fc:	6053      	str	r3, [r2, #4]
 800e1fe:	440c      	add	r4, r1
 800e200:	6014      	str	r4, [r2, #0]
 800e202:	e7da      	b.n	800e1ba <_free_r+0x26>
 800e204:	d902      	bls.n	800e20c <_free_r+0x78>
 800e206:	230c      	movs	r3, #12
 800e208:	6003      	str	r3, [r0, #0]
 800e20a:	e7d6      	b.n	800e1ba <_free_r+0x26>
 800e20c:	6825      	ldr	r5, [r4, #0]
 800e20e:	1961      	adds	r1, r4, r5
 800e210:	428b      	cmp	r3, r1
 800e212:	bf04      	itt	eq
 800e214:	6819      	ldreq	r1, [r3, #0]
 800e216:	685b      	ldreq	r3, [r3, #4]
 800e218:	6063      	str	r3, [r4, #4]
 800e21a:	bf04      	itt	eq
 800e21c:	1949      	addeq	r1, r1, r5
 800e21e:	6021      	streq	r1, [r4, #0]
 800e220:	6054      	str	r4, [r2, #4]
 800e222:	e7ca      	b.n	800e1ba <_free_r+0x26>
 800e224:	b003      	add	sp, #12
 800e226:	bd30      	pop	{r4, r5, pc}
 800e228:	20000a50 	.word	0x20000a50

0800e22c <malloc>:
 800e22c:	4b02      	ldr	r3, [pc, #8]	; (800e238 <malloc+0xc>)
 800e22e:	4601      	mov	r1, r0
 800e230:	6818      	ldr	r0, [r3, #0]
 800e232:	f000 b823 	b.w	800e27c <_malloc_r>
 800e236:	bf00      	nop
 800e238:	20000070 	.word	0x20000070

0800e23c <sbrk_aligned>:
 800e23c:	b570      	push	{r4, r5, r6, lr}
 800e23e:	4e0e      	ldr	r6, [pc, #56]	; (800e278 <sbrk_aligned+0x3c>)
 800e240:	460c      	mov	r4, r1
 800e242:	6831      	ldr	r1, [r6, #0]
 800e244:	4605      	mov	r5, r0
 800e246:	b911      	cbnz	r1, 800e24e <sbrk_aligned+0x12>
 800e248:	f000 fe40 	bl	800eecc <_sbrk_r>
 800e24c:	6030      	str	r0, [r6, #0]
 800e24e:	4621      	mov	r1, r4
 800e250:	4628      	mov	r0, r5
 800e252:	f000 fe3b 	bl	800eecc <_sbrk_r>
 800e256:	1c43      	adds	r3, r0, #1
 800e258:	d00a      	beq.n	800e270 <sbrk_aligned+0x34>
 800e25a:	1cc4      	adds	r4, r0, #3
 800e25c:	f024 0403 	bic.w	r4, r4, #3
 800e260:	42a0      	cmp	r0, r4
 800e262:	d007      	beq.n	800e274 <sbrk_aligned+0x38>
 800e264:	1a21      	subs	r1, r4, r0
 800e266:	4628      	mov	r0, r5
 800e268:	f000 fe30 	bl	800eecc <_sbrk_r>
 800e26c:	3001      	adds	r0, #1
 800e26e:	d101      	bne.n	800e274 <sbrk_aligned+0x38>
 800e270:	f04f 34ff 	mov.w	r4, #4294967295
 800e274:	4620      	mov	r0, r4
 800e276:	bd70      	pop	{r4, r5, r6, pc}
 800e278:	20000a54 	.word	0x20000a54

0800e27c <_malloc_r>:
 800e27c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e280:	1ccd      	adds	r5, r1, #3
 800e282:	f025 0503 	bic.w	r5, r5, #3
 800e286:	3508      	adds	r5, #8
 800e288:	2d0c      	cmp	r5, #12
 800e28a:	bf38      	it	cc
 800e28c:	250c      	movcc	r5, #12
 800e28e:	2d00      	cmp	r5, #0
 800e290:	4607      	mov	r7, r0
 800e292:	db01      	blt.n	800e298 <_malloc_r+0x1c>
 800e294:	42a9      	cmp	r1, r5
 800e296:	d905      	bls.n	800e2a4 <_malloc_r+0x28>
 800e298:	230c      	movs	r3, #12
 800e29a:	603b      	str	r3, [r7, #0]
 800e29c:	2600      	movs	r6, #0
 800e29e:	4630      	mov	r0, r6
 800e2a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e378 <_malloc_r+0xfc>
 800e2a8:	f000 f868 	bl	800e37c <__malloc_lock>
 800e2ac:	f8d8 3000 	ldr.w	r3, [r8]
 800e2b0:	461c      	mov	r4, r3
 800e2b2:	bb5c      	cbnz	r4, 800e30c <_malloc_r+0x90>
 800e2b4:	4629      	mov	r1, r5
 800e2b6:	4638      	mov	r0, r7
 800e2b8:	f7ff ffc0 	bl	800e23c <sbrk_aligned>
 800e2bc:	1c43      	adds	r3, r0, #1
 800e2be:	4604      	mov	r4, r0
 800e2c0:	d155      	bne.n	800e36e <_malloc_r+0xf2>
 800e2c2:	f8d8 4000 	ldr.w	r4, [r8]
 800e2c6:	4626      	mov	r6, r4
 800e2c8:	2e00      	cmp	r6, #0
 800e2ca:	d145      	bne.n	800e358 <_malloc_r+0xdc>
 800e2cc:	2c00      	cmp	r4, #0
 800e2ce:	d048      	beq.n	800e362 <_malloc_r+0xe6>
 800e2d0:	6823      	ldr	r3, [r4, #0]
 800e2d2:	4631      	mov	r1, r6
 800e2d4:	4638      	mov	r0, r7
 800e2d6:	eb04 0903 	add.w	r9, r4, r3
 800e2da:	f000 fdf7 	bl	800eecc <_sbrk_r>
 800e2de:	4581      	cmp	r9, r0
 800e2e0:	d13f      	bne.n	800e362 <_malloc_r+0xe6>
 800e2e2:	6821      	ldr	r1, [r4, #0]
 800e2e4:	1a6d      	subs	r5, r5, r1
 800e2e6:	4629      	mov	r1, r5
 800e2e8:	4638      	mov	r0, r7
 800e2ea:	f7ff ffa7 	bl	800e23c <sbrk_aligned>
 800e2ee:	3001      	adds	r0, #1
 800e2f0:	d037      	beq.n	800e362 <_malloc_r+0xe6>
 800e2f2:	6823      	ldr	r3, [r4, #0]
 800e2f4:	442b      	add	r3, r5
 800e2f6:	6023      	str	r3, [r4, #0]
 800e2f8:	f8d8 3000 	ldr.w	r3, [r8]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d038      	beq.n	800e372 <_malloc_r+0xf6>
 800e300:	685a      	ldr	r2, [r3, #4]
 800e302:	42a2      	cmp	r2, r4
 800e304:	d12b      	bne.n	800e35e <_malloc_r+0xe2>
 800e306:	2200      	movs	r2, #0
 800e308:	605a      	str	r2, [r3, #4]
 800e30a:	e00f      	b.n	800e32c <_malloc_r+0xb0>
 800e30c:	6822      	ldr	r2, [r4, #0]
 800e30e:	1b52      	subs	r2, r2, r5
 800e310:	d41f      	bmi.n	800e352 <_malloc_r+0xd6>
 800e312:	2a0b      	cmp	r2, #11
 800e314:	d917      	bls.n	800e346 <_malloc_r+0xca>
 800e316:	1961      	adds	r1, r4, r5
 800e318:	42a3      	cmp	r3, r4
 800e31a:	6025      	str	r5, [r4, #0]
 800e31c:	bf18      	it	ne
 800e31e:	6059      	strne	r1, [r3, #4]
 800e320:	6863      	ldr	r3, [r4, #4]
 800e322:	bf08      	it	eq
 800e324:	f8c8 1000 	streq.w	r1, [r8]
 800e328:	5162      	str	r2, [r4, r5]
 800e32a:	604b      	str	r3, [r1, #4]
 800e32c:	4638      	mov	r0, r7
 800e32e:	f104 060b 	add.w	r6, r4, #11
 800e332:	f000 f829 	bl	800e388 <__malloc_unlock>
 800e336:	f026 0607 	bic.w	r6, r6, #7
 800e33a:	1d23      	adds	r3, r4, #4
 800e33c:	1af2      	subs	r2, r6, r3
 800e33e:	d0ae      	beq.n	800e29e <_malloc_r+0x22>
 800e340:	1b9b      	subs	r3, r3, r6
 800e342:	50a3      	str	r3, [r4, r2]
 800e344:	e7ab      	b.n	800e29e <_malloc_r+0x22>
 800e346:	42a3      	cmp	r3, r4
 800e348:	6862      	ldr	r2, [r4, #4]
 800e34a:	d1dd      	bne.n	800e308 <_malloc_r+0x8c>
 800e34c:	f8c8 2000 	str.w	r2, [r8]
 800e350:	e7ec      	b.n	800e32c <_malloc_r+0xb0>
 800e352:	4623      	mov	r3, r4
 800e354:	6864      	ldr	r4, [r4, #4]
 800e356:	e7ac      	b.n	800e2b2 <_malloc_r+0x36>
 800e358:	4634      	mov	r4, r6
 800e35a:	6876      	ldr	r6, [r6, #4]
 800e35c:	e7b4      	b.n	800e2c8 <_malloc_r+0x4c>
 800e35e:	4613      	mov	r3, r2
 800e360:	e7cc      	b.n	800e2fc <_malloc_r+0x80>
 800e362:	230c      	movs	r3, #12
 800e364:	603b      	str	r3, [r7, #0]
 800e366:	4638      	mov	r0, r7
 800e368:	f000 f80e 	bl	800e388 <__malloc_unlock>
 800e36c:	e797      	b.n	800e29e <_malloc_r+0x22>
 800e36e:	6025      	str	r5, [r4, #0]
 800e370:	e7dc      	b.n	800e32c <_malloc_r+0xb0>
 800e372:	605b      	str	r3, [r3, #4]
 800e374:	deff      	udf	#255	; 0xff
 800e376:	bf00      	nop
 800e378:	20000a50 	.word	0x20000a50

0800e37c <__malloc_lock>:
 800e37c:	4801      	ldr	r0, [pc, #4]	; (800e384 <__malloc_lock+0x8>)
 800e37e:	f7ff b88c 	b.w	800d49a <__retarget_lock_acquire_recursive>
 800e382:	bf00      	nop
 800e384:	20000a4c 	.word	0x20000a4c

0800e388 <__malloc_unlock>:
 800e388:	4801      	ldr	r0, [pc, #4]	; (800e390 <__malloc_unlock+0x8>)
 800e38a:	f7ff b887 	b.w	800d49c <__retarget_lock_release_recursive>
 800e38e:	bf00      	nop
 800e390:	20000a4c 	.word	0x20000a4c

0800e394 <_Balloc>:
 800e394:	b570      	push	{r4, r5, r6, lr}
 800e396:	69c6      	ldr	r6, [r0, #28]
 800e398:	4604      	mov	r4, r0
 800e39a:	460d      	mov	r5, r1
 800e39c:	b976      	cbnz	r6, 800e3bc <_Balloc+0x28>
 800e39e:	2010      	movs	r0, #16
 800e3a0:	f7ff ff44 	bl	800e22c <malloc>
 800e3a4:	4602      	mov	r2, r0
 800e3a6:	61e0      	str	r0, [r4, #28]
 800e3a8:	b920      	cbnz	r0, 800e3b4 <_Balloc+0x20>
 800e3aa:	4b18      	ldr	r3, [pc, #96]	; (800e40c <_Balloc+0x78>)
 800e3ac:	4818      	ldr	r0, [pc, #96]	; (800e410 <_Balloc+0x7c>)
 800e3ae:	216b      	movs	r1, #107	; 0x6b
 800e3b0:	f000 fdaa 	bl	800ef08 <__assert_func>
 800e3b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e3b8:	6006      	str	r6, [r0, #0]
 800e3ba:	60c6      	str	r6, [r0, #12]
 800e3bc:	69e6      	ldr	r6, [r4, #28]
 800e3be:	68f3      	ldr	r3, [r6, #12]
 800e3c0:	b183      	cbz	r3, 800e3e4 <_Balloc+0x50>
 800e3c2:	69e3      	ldr	r3, [r4, #28]
 800e3c4:	68db      	ldr	r3, [r3, #12]
 800e3c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e3ca:	b9b8      	cbnz	r0, 800e3fc <_Balloc+0x68>
 800e3cc:	2101      	movs	r1, #1
 800e3ce:	fa01 f605 	lsl.w	r6, r1, r5
 800e3d2:	1d72      	adds	r2, r6, #5
 800e3d4:	0092      	lsls	r2, r2, #2
 800e3d6:	4620      	mov	r0, r4
 800e3d8:	f000 fdb4 	bl	800ef44 <_calloc_r>
 800e3dc:	b160      	cbz	r0, 800e3f8 <_Balloc+0x64>
 800e3de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e3e2:	e00e      	b.n	800e402 <_Balloc+0x6e>
 800e3e4:	2221      	movs	r2, #33	; 0x21
 800e3e6:	2104      	movs	r1, #4
 800e3e8:	4620      	mov	r0, r4
 800e3ea:	f000 fdab 	bl	800ef44 <_calloc_r>
 800e3ee:	69e3      	ldr	r3, [r4, #28]
 800e3f0:	60f0      	str	r0, [r6, #12]
 800e3f2:	68db      	ldr	r3, [r3, #12]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d1e4      	bne.n	800e3c2 <_Balloc+0x2e>
 800e3f8:	2000      	movs	r0, #0
 800e3fa:	bd70      	pop	{r4, r5, r6, pc}
 800e3fc:	6802      	ldr	r2, [r0, #0]
 800e3fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e402:	2300      	movs	r3, #0
 800e404:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e408:	e7f7      	b.n	800e3fa <_Balloc+0x66>
 800e40a:	bf00      	nop
 800e40c:	0800f701 	.word	0x0800f701
 800e410:	0800f781 	.word	0x0800f781

0800e414 <_Bfree>:
 800e414:	b570      	push	{r4, r5, r6, lr}
 800e416:	69c6      	ldr	r6, [r0, #28]
 800e418:	4605      	mov	r5, r0
 800e41a:	460c      	mov	r4, r1
 800e41c:	b976      	cbnz	r6, 800e43c <_Bfree+0x28>
 800e41e:	2010      	movs	r0, #16
 800e420:	f7ff ff04 	bl	800e22c <malloc>
 800e424:	4602      	mov	r2, r0
 800e426:	61e8      	str	r0, [r5, #28]
 800e428:	b920      	cbnz	r0, 800e434 <_Bfree+0x20>
 800e42a:	4b09      	ldr	r3, [pc, #36]	; (800e450 <_Bfree+0x3c>)
 800e42c:	4809      	ldr	r0, [pc, #36]	; (800e454 <_Bfree+0x40>)
 800e42e:	218f      	movs	r1, #143	; 0x8f
 800e430:	f000 fd6a 	bl	800ef08 <__assert_func>
 800e434:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e438:	6006      	str	r6, [r0, #0]
 800e43a:	60c6      	str	r6, [r0, #12]
 800e43c:	b13c      	cbz	r4, 800e44e <_Bfree+0x3a>
 800e43e:	69eb      	ldr	r3, [r5, #28]
 800e440:	6862      	ldr	r2, [r4, #4]
 800e442:	68db      	ldr	r3, [r3, #12]
 800e444:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e448:	6021      	str	r1, [r4, #0]
 800e44a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e44e:	bd70      	pop	{r4, r5, r6, pc}
 800e450:	0800f701 	.word	0x0800f701
 800e454:	0800f781 	.word	0x0800f781

0800e458 <__multadd>:
 800e458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e45c:	690d      	ldr	r5, [r1, #16]
 800e45e:	4607      	mov	r7, r0
 800e460:	460c      	mov	r4, r1
 800e462:	461e      	mov	r6, r3
 800e464:	f101 0c14 	add.w	ip, r1, #20
 800e468:	2000      	movs	r0, #0
 800e46a:	f8dc 3000 	ldr.w	r3, [ip]
 800e46e:	b299      	uxth	r1, r3
 800e470:	fb02 6101 	mla	r1, r2, r1, r6
 800e474:	0c1e      	lsrs	r6, r3, #16
 800e476:	0c0b      	lsrs	r3, r1, #16
 800e478:	fb02 3306 	mla	r3, r2, r6, r3
 800e47c:	b289      	uxth	r1, r1
 800e47e:	3001      	adds	r0, #1
 800e480:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e484:	4285      	cmp	r5, r0
 800e486:	f84c 1b04 	str.w	r1, [ip], #4
 800e48a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e48e:	dcec      	bgt.n	800e46a <__multadd+0x12>
 800e490:	b30e      	cbz	r6, 800e4d6 <__multadd+0x7e>
 800e492:	68a3      	ldr	r3, [r4, #8]
 800e494:	42ab      	cmp	r3, r5
 800e496:	dc19      	bgt.n	800e4cc <__multadd+0x74>
 800e498:	6861      	ldr	r1, [r4, #4]
 800e49a:	4638      	mov	r0, r7
 800e49c:	3101      	adds	r1, #1
 800e49e:	f7ff ff79 	bl	800e394 <_Balloc>
 800e4a2:	4680      	mov	r8, r0
 800e4a4:	b928      	cbnz	r0, 800e4b2 <__multadd+0x5a>
 800e4a6:	4602      	mov	r2, r0
 800e4a8:	4b0c      	ldr	r3, [pc, #48]	; (800e4dc <__multadd+0x84>)
 800e4aa:	480d      	ldr	r0, [pc, #52]	; (800e4e0 <__multadd+0x88>)
 800e4ac:	21ba      	movs	r1, #186	; 0xba
 800e4ae:	f000 fd2b 	bl	800ef08 <__assert_func>
 800e4b2:	6922      	ldr	r2, [r4, #16]
 800e4b4:	3202      	adds	r2, #2
 800e4b6:	f104 010c 	add.w	r1, r4, #12
 800e4ba:	0092      	lsls	r2, r2, #2
 800e4bc:	300c      	adds	r0, #12
 800e4be:	f000 fd15 	bl	800eeec <memcpy>
 800e4c2:	4621      	mov	r1, r4
 800e4c4:	4638      	mov	r0, r7
 800e4c6:	f7ff ffa5 	bl	800e414 <_Bfree>
 800e4ca:	4644      	mov	r4, r8
 800e4cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e4d0:	3501      	adds	r5, #1
 800e4d2:	615e      	str	r6, [r3, #20]
 800e4d4:	6125      	str	r5, [r4, #16]
 800e4d6:	4620      	mov	r0, r4
 800e4d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4dc:	0800f770 	.word	0x0800f770
 800e4e0:	0800f781 	.word	0x0800f781

0800e4e4 <__hi0bits>:
 800e4e4:	0c03      	lsrs	r3, r0, #16
 800e4e6:	041b      	lsls	r3, r3, #16
 800e4e8:	b9d3      	cbnz	r3, 800e520 <__hi0bits+0x3c>
 800e4ea:	0400      	lsls	r0, r0, #16
 800e4ec:	2310      	movs	r3, #16
 800e4ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e4f2:	bf04      	itt	eq
 800e4f4:	0200      	lsleq	r0, r0, #8
 800e4f6:	3308      	addeq	r3, #8
 800e4f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e4fc:	bf04      	itt	eq
 800e4fe:	0100      	lsleq	r0, r0, #4
 800e500:	3304      	addeq	r3, #4
 800e502:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e506:	bf04      	itt	eq
 800e508:	0080      	lsleq	r0, r0, #2
 800e50a:	3302      	addeq	r3, #2
 800e50c:	2800      	cmp	r0, #0
 800e50e:	db05      	blt.n	800e51c <__hi0bits+0x38>
 800e510:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e514:	f103 0301 	add.w	r3, r3, #1
 800e518:	bf08      	it	eq
 800e51a:	2320      	moveq	r3, #32
 800e51c:	4618      	mov	r0, r3
 800e51e:	4770      	bx	lr
 800e520:	2300      	movs	r3, #0
 800e522:	e7e4      	b.n	800e4ee <__hi0bits+0xa>

0800e524 <__lo0bits>:
 800e524:	6803      	ldr	r3, [r0, #0]
 800e526:	f013 0207 	ands.w	r2, r3, #7
 800e52a:	d00c      	beq.n	800e546 <__lo0bits+0x22>
 800e52c:	07d9      	lsls	r1, r3, #31
 800e52e:	d422      	bmi.n	800e576 <__lo0bits+0x52>
 800e530:	079a      	lsls	r2, r3, #30
 800e532:	bf49      	itett	mi
 800e534:	085b      	lsrmi	r3, r3, #1
 800e536:	089b      	lsrpl	r3, r3, #2
 800e538:	6003      	strmi	r3, [r0, #0]
 800e53a:	2201      	movmi	r2, #1
 800e53c:	bf5c      	itt	pl
 800e53e:	6003      	strpl	r3, [r0, #0]
 800e540:	2202      	movpl	r2, #2
 800e542:	4610      	mov	r0, r2
 800e544:	4770      	bx	lr
 800e546:	b299      	uxth	r1, r3
 800e548:	b909      	cbnz	r1, 800e54e <__lo0bits+0x2a>
 800e54a:	0c1b      	lsrs	r3, r3, #16
 800e54c:	2210      	movs	r2, #16
 800e54e:	b2d9      	uxtb	r1, r3
 800e550:	b909      	cbnz	r1, 800e556 <__lo0bits+0x32>
 800e552:	3208      	adds	r2, #8
 800e554:	0a1b      	lsrs	r3, r3, #8
 800e556:	0719      	lsls	r1, r3, #28
 800e558:	bf04      	itt	eq
 800e55a:	091b      	lsreq	r3, r3, #4
 800e55c:	3204      	addeq	r2, #4
 800e55e:	0799      	lsls	r1, r3, #30
 800e560:	bf04      	itt	eq
 800e562:	089b      	lsreq	r3, r3, #2
 800e564:	3202      	addeq	r2, #2
 800e566:	07d9      	lsls	r1, r3, #31
 800e568:	d403      	bmi.n	800e572 <__lo0bits+0x4e>
 800e56a:	085b      	lsrs	r3, r3, #1
 800e56c:	f102 0201 	add.w	r2, r2, #1
 800e570:	d003      	beq.n	800e57a <__lo0bits+0x56>
 800e572:	6003      	str	r3, [r0, #0]
 800e574:	e7e5      	b.n	800e542 <__lo0bits+0x1e>
 800e576:	2200      	movs	r2, #0
 800e578:	e7e3      	b.n	800e542 <__lo0bits+0x1e>
 800e57a:	2220      	movs	r2, #32
 800e57c:	e7e1      	b.n	800e542 <__lo0bits+0x1e>
	...

0800e580 <__i2b>:
 800e580:	b510      	push	{r4, lr}
 800e582:	460c      	mov	r4, r1
 800e584:	2101      	movs	r1, #1
 800e586:	f7ff ff05 	bl	800e394 <_Balloc>
 800e58a:	4602      	mov	r2, r0
 800e58c:	b928      	cbnz	r0, 800e59a <__i2b+0x1a>
 800e58e:	4b05      	ldr	r3, [pc, #20]	; (800e5a4 <__i2b+0x24>)
 800e590:	4805      	ldr	r0, [pc, #20]	; (800e5a8 <__i2b+0x28>)
 800e592:	f240 1145 	movw	r1, #325	; 0x145
 800e596:	f000 fcb7 	bl	800ef08 <__assert_func>
 800e59a:	2301      	movs	r3, #1
 800e59c:	6144      	str	r4, [r0, #20]
 800e59e:	6103      	str	r3, [r0, #16]
 800e5a0:	bd10      	pop	{r4, pc}
 800e5a2:	bf00      	nop
 800e5a4:	0800f770 	.word	0x0800f770
 800e5a8:	0800f781 	.word	0x0800f781

0800e5ac <__multiply>:
 800e5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5b0:	4691      	mov	r9, r2
 800e5b2:	690a      	ldr	r2, [r1, #16]
 800e5b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e5b8:	429a      	cmp	r2, r3
 800e5ba:	bfb8      	it	lt
 800e5bc:	460b      	movlt	r3, r1
 800e5be:	460c      	mov	r4, r1
 800e5c0:	bfbc      	itt	lt
 800e5c2:	464c      	movlt	r4, r9
 800e5c4:	4699      	movlt	r9, r3
 800e5c6:	6927      	ldr	r7, [r4, #16]
 800e5c8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e5cc:	68a3      	ldr	r3, [r4, #8]
 800e5ce:	6861      	ldr	r1, [r4, #4]
 800e5d0:	eb07 060a 	add.w	r6, r7, sl
 800e5d4:	42b3      	cmp	r3, r6
 800e5d6:	b085      	sub	sp, #20
 800e5d8:	bfb8      	it	lt
 800e5da:	3101      	addlt	r1, #1
 800e5dc:	f7ff feda 	bl	800e394 <_Balloc>
 800e5e0:	b930      	cbnz	r0, 800e5f0 <__multiply+0x44>
 800e5e2:	4602      	mov	r2, r0
 800e5e4:	4b44      	ldr	r3, [pc, #272]	; (800e6f8 <__multiply+0x14c>)
 800e5e6:	4845      	ldr	r0, [pc, #276]	; (800e6fc <__multiply+0x150>)
 800e5e8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800e5ec:	f000 fc8c 	bl	800ef08 <__assert_func>
 800e5f0:	f100 0514 	add.w	r5, r0, #20
 800e5f4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e5f8:	462b      	mov	r3, r5
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	4543      	cmp	r3, r8
 800e5fe:	d321      	bcc.n	800e644 <__multiply+0x98>
 800e600:	f104 0314 	add.w	r3, r4, #20
 800e604:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e608:	f109 0314 	add.w	r3, r9, #20
 800e60c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e610:	9202      	str	r2, [sp, #8]
 800e612:	1b3a      	subs	r2, r7, r4
 800e614:	3a15      	subs	r2, #21
 800e616:	f022 0203 	bic.w	r2, r2, #3
 800e61a:	3204      	adds	r2, #4
 800e61c:	f104 0115 	add.w	r1, r4, #21
 800e620:	428f      	cmp	r7, r1
 800e622:	bf38      	it	cc
 800e624:	2204      	movcc	r2, #4
 800e626:	9201      	str	r2, [sp, #4]
 800e628:	9a02      	ldr	r2, [sp, #8]
 800e62a:	9303      	str	r3, [sp, #12]
 800e62c:	429a      	cmp	r2, r3
 800e62e:	d80c      	bhi.n	800e64a <__multiply+0x9e>
 800e630:	2e00      	cmp	r6, #0
 800e632:	dd03      	ble.n	800e63c <__multiply+0x90>
 800e634:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d05b      	beq.n	800e6f4 <__multiply+0x148>
 800e63c:	6106      	str	r6, [r0, #16]
 800e63e:	b005      	add	sp, #20
 800e640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e644:	f843 2b04 	str.w	r2, [r3], #4
 800e648:	e7d8      	b.n	800e5fc <__multiply+0x50>
 800e64a:	f8b3 a000 	ldrh.w	sl, [r3]
 800e64e:	f1ba 0f00 	cmp.w	sl, #0
 800e652:	d024      	beq.n	800e69e <__multiply+0xf2>
 800e654:	f104 0e14 	add.w	lr, r4, #20
 800e658:	46a9      	mov	r9, r5
 800e65a:	f04f 0c00 	mov.w	ip, #0
 800e65e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e662:	f8d9 1000 	ldr.w	r1, [r9]
 800e666:	fa1f fb82 	uxth.w	fp, r2
 800e66a:	b289      	uxth	r1, r1
 800e66c:	fb0a 110b 	mla	r1, sl, fp, r1
 800e670:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e674:	f8d9 2000 	ldr.w	r2, [r9]
 800e678:	4461      	add	r1, ip
 800e67a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e67e:	fb0a c20b 	mla	r2, sl, fp, ip
 800e682:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e686:	b289      	uxth	r1, r1
 800e688:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e68c:	4577      	cmp	r7, lr
 800e68e:	f849 1b04 	str.w	r1, [r9], #4
 800e692:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e696:	d8e2      	bhi.n	800e65e <__multiply+0xb2>
 800e698:	9a01      	ldr	r2, [sp, #4]
 800e69a:	f845 c002 	str.w	ip, [r5, r2]
 800e69e:	9a03      	ldr	r2, [sp, #12]
 800e6a0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e6a4:	3304      	adds	r3, #4
 800e6a6:	f1b9 0f00 	cmp.w	r9, #0
 800e6aa:	d021      	beq.n	800e6f0 <__multiply+0x144>
 800e6ac:	6829      	ldr	r1, [r5, #0]
 800e6ae:	f104 0c14 	add.w	ip, r4, #20
 800e6b2:	46ae      	mov	lr, r5
 800e6b4:	f04f 0a00 	mov.w	sl, #0
 800e6b8:	f8bc b000 	ldrh.w	fp, [ip]
 800e6bc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e6c0:	fb09 220b 	mla	r2, r9, fp, r2
 800e6c4:	4452      	add	r2, sl
 800e6c6:	b289      	uxth	r1, r1
 800e6c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e6cc:	f84e 1b04 	str.w	r1, [lr], #4
 800e6d0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e6d4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e6d8:	f8be 1000 	ldrh.w	r1, [lr]
 800e6dc:	fb09 110a 	mla	r1, r9, sl, r1
 800e6e0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800e6e4:	4567      	cmp	r7, ip
 800e6e6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e6ea:	d8e5      	bhi.n	800e6b8 <__multiply+0x10c>
 800e6ec:	9a01      	ldr	r2, [sp, #4]
 800e6ee:	50a9      	str	r1, [r5, r2]
 800e6f0:	3504      	adds	r5, #4
 800e6f2:	e799      	b.n	800e628 <__multiply+0x7c>
 800e6f4:	3e01      	subs	r6, #1
 800e6f6:	e79b      	b.n	800e630 <__multiply+0x84>
 800e6f8:	0800f770 	.word	0x0800f770
 800e6fc:	0800f781 	.word	0x0800f781

0800e700 <__pow5mult>:
 800e700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e704:	4615      	mov	r5, r2
 800e706:	f012 0203 	ands.w	r2, r2, #3
 800e70a:	4606      	mov	r6, r0
 800e70c:	460f      	mov	r7, r1
 800e70e:	d007      	beq.n	800e720 <__pow5mult+0x20>
 800e710:	4c25      	ldr	r4, [pc, #148]	; (800e7a8 <__pow5mult+0xa8>)
 800e712:	3a01      	subs	r2, #1
 800e714:	2300      	movs	r3, #0
 800e716:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e71a:	f7ff fe9d 	bl	800e458 <__multadd>
 800e71e:	4607      	mov	r7, r0
 800e720:	10ad      	asrs	r5, r5, #2
 800e722:	d03d      	beq.n	800e7a0 <__pow5mult+0xa0>
 800e724:	69f4      	ldr	r4, [r6, #28]
 800e726:	b97c      	cbnz	r4, 800e748 <__pow5mult+0x48>
 800e728:	2010      	movs	r0, #16
 800e72a:	f7ff fd7f 	bl	800e22c <malloc>
 800e72e:	4602      	mov	r2, r0
 800e730:	61f0      	str	r0, [r6, #28]
 800e732:	b928      	cbnz	r0, 800e740 <__pow5mult+0x40>
 800e734:	4b1d      	ldr	r3, [pc, #116]	; (800e7ac <__pow5mult+0xac>)
 800e736:	481e      	ldr	r0, [pc, #120]	; (800e7b0 <__pow5mult+0xb0>)
 800e738:	f240 11b3 	movw	r1, #435	; 0x1b3
 800e73c:	f000 fbe4 	bl	800ef08 <__assert_func>
 800e740:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e744:	6004      	str	r4, [r0, #0]
 800e746:	60c4      	str	r4, [r0, #12]
 800e748:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800e74c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e750:	b94c      	cbnz	r4, 800e766 <__pow5mult+0x66>
 800e752:	f240 2171 	movw	r1, #625	; 0x271
 800e756:	4630      	mov	r0, r6
 800e758:	f7ff ff12 	bl	800e580 <__i2b>
 800e75c:	2300      	movs	r3, #0
 800e75e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e762:	4604      	mov	r4, r0
 800e764:	6003      	str	r3, [r0, #0]
 800e766:	f04f 0900 	mov.w	r9, #0
 800e76a:	07eb      	lsls	r3, r5, #31
 800e76c:	d50a      	bpl.n	800e784 <__pow5mult+0x84>
 800e76e:	4639      	mov	r1, r7
 800e770:	4622      	mov	r2, r4
 800e772:	4630      	mov	r0, r6
 800e774:	f7ff ff1a 	bl	800e5ac <__multiply>
 800e778:	4639      	mov	r1, r7
 800e77a:	4680      	mov	r8, r0
 800e77c:	4630      	mov	r0, r6
 800e77e:	f7ff fe49 	bl	800e414 <_Bfree>
 800e782:	4647      	mov	r7, r8
 800e784:	106d      	asrs	r5, r5, #1
 800e786:	d00b      	beq.n	800e7a0 <__pow5mult+0xa0>
 800e788:	6820      	ldr	r0, [r4, #0]
 800e78a:	b938      	cbnz	r0, 800e79c <__pow5mult+0x9c>
 800e78c:	4622      	mov	r2, r4
 800e78e:	4621      	mov	r1, r4
 800e790:	4630      	mov	r0, r6
 800e792:	f7ff ff0b 	bl	800e5ac <__multiply>
 800e796:	6020      	str	r0, [r4, #0]
 800e798:	f8c0 9000 	str.w	r9, [r0]
 800e79c:	4604      	mov	r4, r0
 800e79e:	e7e4      	b.n	800e76a <__pow5mult+0x6a>
 800e7a0:	4638      	mov	r0, r7
 800e7a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7a6:	bf00      	nop
 800e7a8:	0800f8d0 	.word	0x0800f8d0
 800e7ac:	0800f701 	.word	0x0800f701
 800e7b0:	0800f781 	.word	0x0800f781

0800e7b4 <__lshift>:
 800e7b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7b8:	460c      	mov	r4, r1
 800e7ba:	6849      	ldr	r1, [r1, #4]
 800e7bc:	6923      	ldr	r3, [r4, #16]
 800e7be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e7c2:	68a3      	ldr	r3, [r4, #8]
 800e7c4:	4607      	mov	r7, r0
 800e7c6:	4691      	mov	r9, r2
 800e7c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e7cc:	f108 0601 	add.w	r6, r8, #1
 800e7d0:	42b3      	cmp	r3, r6
 800e7d2:	db0b      	blt.n	800e7ec <__lshift+0x38>
 800e7d4:	4638      	mov	r0, r7
 800e7d6:	f7ff fddd 	bl	800e394 <_Balloc>
 800e7da:	4605      	mov	r5, r0
 800e7dc:	b948      	cbnz	r0, 800e7f2 <__lshift+0x3e>
 800e7de:	4602      	mov	r2, r0
 800e7e0:	4b28      	ldr	r3, [pc, #160]	; (800e884 <__lshift+0xd0>)
 800e7e2:	4829      	ldr	r0, [pc, #164]	; (800e888 <__lshift+0xd4>)
 800e7e4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800e7e8:	f000 fb8e 	bl	800ef08 <__assert_func>
 800e7ec:	3101      	adds	r1, #1
 800e7ee:	005b      	lsls	r3, r3, #1
 800e7f0:	e7ee      	b.n	800e7d0 <__lshift+0x1c>
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	f100 0114 	add.w	r1, r0, #20
 800e7f8:	f100 0210 	add.w	r2, r0, #16
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	4553      	cmp	r3, sl
 800e800:	db33      	blt.n	800e86a <__lshift+0xb6>
 800e802:	6920      	ldr	r0, [r4, #16]
 800e804:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e808:	f104 0314 	add.w	r3, r4, #20
 800e80c:	f019 091f 	ands.w	r9, r9, #31
 800e810:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e814:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e818:	d02b      	beq.n	800e872 <__lshift+0xbe>
 800e81a:	f1c9 0e20 	rsb	lr, r9, #32
 800e81e:	468a      	mov	sl, r1
 800e820:	2200      	movs	r2, #0
 800e822:	6818      	ldr	r0, [r3, #0]
 800e824:	fa00 f009 	lsl.w	r0, r0, r9
 800e828:	4310      	orrs	r0, r2
 800e82a:	f84a 0b04 	str.w	r0, [sl], #4
 800e82e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e832:	459c      	cmp	ip, r3
 800e834:	fa22 f20e 	lsr.w	r2, r2, lr
 800e838:	d8f3      	bhi.n	800e822 <__lshift+0x6e>
 800e83a:	ebac 0304 	sub.w	r3, ip, r4
 800e83e:	3b15      	subs	r3, #21
 800e840:	f023 0303 	bic.w	r3, r3, #3
 800e844:	3304      	adds	r3, #4
 800e846:	f104 0015 	add.w	r0, r4, #21
 800e84a:	4584      	cmp	ip, r0
 800e84c:	bf38      	it	cc
 800e84e:	2304      	movcc	r3, #4
 800e850:	50ca      	str	r2, [r1, r3]
 800e852:	b10a      	cbz	r2, 800e858 <__lshift+0xa4>
 800e854:	f108 0602 	add.w	r6, r8, #2
 800e858:	3e01      	subs	r6, #1
 800e85a:	4638      	mov	r0, r7
 800e85c:	612e      	str	r6, [r5, #16]
 800e85e:	4621      	mov	r1, r4
 800e860:	f7ff fdd8 	bl	800e414 <_Bfree>
 800e864:	4628      	mov	r0, r5
 800e866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e86a:	f842 0f04 	str.w	r0, [r2, #4]!
 800e86e:	3301      	adds	r3, #1
 800e870:	e7c5      	b.n	800e7fe <__lshift+0x4a>
 800e872:	3904      	subs	r1, #4
 800e874:	f853 2b04 	ldr.w	r2, [r3], #4
 800e878:	f841 2f04 	str.w	r2, [r1, #4]!
 800e87c:	459c      	cmp	ip, r3
 800e87e:	d8f9      	bhi.n	800e874 <__lshift+0xc0>
 800e880:	e7ea      	b.n	800e858 <__lshift+0xa4>
 800e882:	bf00      	nop
 800e884:	0800f770 	.word	0x0800f770
 800e888:	0800f781 	.word	0x0800f781

0800e88c <__mcmp>:
 800e88c:	b530      	push	{r4, r5, lr}
 800e88e:	6902      	ldr	r2, [r0, #16]
 800e890:	690c      	ldr	r4, [r1, #16]
 800e892:	1b12      	subs	r2, r2, r4
 800e894:	d10e      	bne.n	800e8b4 <__mcmp+0x28>
 800e896:	f100 0314 	add.w	r3, r0, #20
 800e89a:	3114      	adds	r1, #20
 800e89c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e8a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e8a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e8a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e8ac:	42a5      	cmp	r5, r4
 800e8ae:	d003      	beq.n	800e8b8 <__mcmp+0x2c>
 800e8b0:	d305      	bcc.n	800e8be <__mcmp+0x32>
 800e8b2:	2201      	movs	r2, #1
 800e8b4:	4610      	mov	r0, r2
 800e8b6:	bd30      	pop	{r4, r5, pc}
 800e8b8:	4283      	cmp	r3, r0
 800e8ba:	d3f3      	bcc.n	800e8a4 <__mcmp+0x18>
 800e8bc:	e7fa      	b.n	800e8b4 <__mcmp+0x28>
 800e8be:	f04f 32ff 	mov.w	r2, #4294967295
 800e8c2:	e7f7      	b.n	800e8b4 <__mcmp+0x28>

0800e8c4 <__mdiff>:
 800e8c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8c8:	460c      	mov	r4, r1
 800e8ca:	4606      	mov	r6, r0
 800e8cc:	4611      	mov	r1, r2
 800e8ce:	4620      	mov	r0, r4
 800e8d0:	4690      	mov	r8, r2
 800e8d2:	f7ff ffdb 	bl	800e88c <__mcmp>
 800e8d6:	1e05      	subs	r5, r0, #0
 800e8d8:	d110      	bne.n	800e8fc <__mdiff+0x38>
 800e8da:	4629      	mov	r1, r5
 800e8dc:	4630      	mov	r0, r6
 800e8de:	f7ff fd59 	bl	800e394 <_Balloc>
 800e8e2:	b930      	cbnz	r0, 800e8f2 <__mdiff+0x2e>
 800e8e4:	4b3a      	ldr	r3, [pc, #232]	; (800e9d0 <__mdiff+0x10c>)
 800e8e6:	4602      	mov	r2, r0
 800e8e8:	f240 2137 	movw	r1, #567	; 0x237
 800e8ec:	4839      	ldr	r0, [pc, #228]	; (800e9d4 <__mdiff+0x110>)
 800e8ee:	f000 fb0b 	bl	800ef08 <__assert_func>
 800e8f2:	2301      	movs	r3, #1
 800e8f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e8f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8fc:	bfa4      	itt	ge
 800e8fe:	4643      	movge	r3, r8
 800e900:	46a0      	movge	r8, r4
 800e902:	4630      	mov	r0, r6
 800e904:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e908:	bfa6      	itte	ge
 800e90a:	461c      	movge	r4, r3
 800e90c:	2500      	movge	r5, #0
 800e90e:	2501      	movlt	r5, #1
 800e910:	f7ff fd40 	bl	800e394 <_Balloc>
 800e914:	b920      	cbnz	r0, 800e920 <__mdiff+0x5c>
 800e916:	4b2e      	ldr	r3, [pc, #184]	; (800e9d0 <__mdiff+0x10c>)
 800e918:	4602      	mov	r2, r0
 800e91a:	f240 2145 	movw	r1, #581	; 0x245
 800e91e:	e7e5      	b.n	800e8ec <__mdiff+0x28>
 800e920:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e924:	6926      	ldr	r6, [r4, #16]
 800e926:	60c5      	str	r5, [r0, #12]
 800e928:	f104 0914 	add.w	r9, r4, #20
 800e92c:	f108 0514 	add.w	r5, r8, #20
 800e930:	f100 0e14 	add.w	lr, r0, #20
 800e934:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e938:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e93c:	f108 0210 	add.w	r2, r8, #16
 800e940:	46f2      	mov	sl, lr
 800e942:	2100      	movs	r1, #0
 800e944:	f859 3b04 	ldr.w	r3, [r9], #4
 800e948:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e94c:	fa11 f88b 	uxtah	r8, r1, fp
 800e950:	b299      	uxth	r1, r3
 800e952:	0c1b      	lsrs	r3, r3, #16
 800e954:	eba8 0801 	sub.w	r8, r8, r1
 800e958:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e95c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e960:	fa1f f888 	uxth.w	r8, r8
 800e964:	1419      	asrs	r1, r3, #16
 800e966:	454e      	cmp	r6, r9
 800e968:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e96c:	f84a 3b04 	str.w	r3, [sl], #4
 800e970:	d8e8      	bhi.n	800e944 <__mdiff+0x80>
 800e972:	1b33      	subs	r3, r6, r4
 800e974:	3b15      	subs	r3, #21
 800e976:	f023 0303 	bic.w	r3, r3, #3
 800e97a:	3304      	adds	r3, #4
 800e97c:	3415      	adds	r4, #21
 800e97e:	42a6      	cmp	r6, r4
 800e980:	bf38      	it	cc
 800e982:	2304      	movcc	r3, #4
 800e984:	441d      	add	r5, r3
 800e986:	4473      	add	r3, lr
 800e988:	469e      	mov	lr, r3
 800e98a:	462e      	mov	r6, r5
 800e98c:	4566      	cmp	r6, ip
 800e98e:	d30e      	bcc.n	800e9ae <__mdiff+0xea>
 800e990:	f10c 0203 	add.w	r2, ip, #3
 800e994:	1b52      	subs	r2, r2, r5
 800e996:	f022 0203 	bic.w	r2, r2, #3
 800e99a:	3d03      	subs	r5, #3
 800e99c:	45ac      	cmp	ip, r5
 800e99e:	bf38      	it	cc
 800e9a0:	2200      	movcc	r2, #0
 800e9a2:	4413      	add	r3, r2
 800e9a4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e9a8:	b17a      	cbz	r2, 800e9ca <__mdiff+0x106>
 800e9aa:	6107      	str	r7, [r0, #16]
 800e9ac:	e7a4      	b.n	800e8f8 <__mdiff+0x34>
 800e9ae:	f856 8b04 	ldr.w	r8, [r6], #4
 800e9b2:	fa11 f288 	uxtah	r2, r1, r8
 800e9b6:	1414      	asrs	r4, r2, #16
 800e9b8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e9bc:	b292      	uxth	r2, r2
 800e9be:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e9c2:	f84e 2b04 	str.w	r2, [lr], #4
 800e9c6:	1421      	asrs	r1, r4, #16
 800e9c8:	e7e0      	b.n	800e98c <__mdiff+0xc8>
 800e9ca:	3f01      	subs	r7, #1
 800e9cc:	e7ea      	b.n	800e9a4 <__mdiff+0xe0>
 800e9ce:	bf00      	nop
 800e9d0:	0800f770 	.word	0x0800f770
 800e9d4:	0800f781 	.word	0x0800f781

0800e9d8 <__d2b>:
 800e9d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e9dc:	460f      	mov	r7, r1
 800e9de:	2101      	movs	r1, #1
 800e9e0:	ec59 8b10 	vmov	r8, r9, d0
 800e9e4:	4616      	mov	r6, r2
 800e9e6:	f7ff fcd5 	bl	800e394 <_Balloc>
 800e9ea:	4604      	mov	r4, r0
 800e9ec:	b930      	cbnz	r0, 800e9fc <__d2b+0x24>
 800e9ee:	4602      	mov	r2, r0
 800e9f0:	4b24      	ldr	r3, [pc, #144]	; (800ea84 <__d2b+0xac>)
 800e9f2:	4825      	ldr	r0, [pc, #148]	; (800ea88 <__d2b+0xb0>)
 800e9f4:	f240 310f 	movw	r1, #783	; 0x30f
 800e9f8:	f000 fa86 	bl	800ef08 <__assert_func>
 800e9fc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ea00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ea04:	bb2d      	cbnz	r5, 800ea52 <__d2b+0x7a>
 800ea06:	9301      	str	r3, [sp, #4]
 800ea08:	f1b8 0300 	subs.w	r3, r8, #0
 800ea0c:	d026      	beq.n	800ea5c <__d2b+0x84>
 800ea0e:	4668      	mov	r0, sp
 800ea10:	9300      	str	r3, [sp, #0]
 800ea12:	f7ff fd87 	bl	800e524 <__lo0bits>
 800ea16:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ea1a:	b1e8      	cbz	r0, 800ea58 <__d2b+0x80>
 800ea1c:	f1c0 0320 	rsb	r3, r0, #32
 800ea20:	fa02 f303 	lsl.w	r3, r2, r3
 800ea24:	430b      	orrs	r3, r1
 800ea26:	40c2      	lsrs	r2, r0
 800ea28:	6163      	str	r3, [r4, #20]
 800ea2a:	9201      	str	r2, [sp, #4]
 800ea2c:	9b01      	ldr	r3, [sp, #4]
 800ea2e:	61a3      	str	r3, [r4, #24]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	bf14      	ite	ne
 800ea34:	2202      	movne	r2, #2
 800ea36:	2201      	moveq	r2, #1
 800ea38:	6122      	str	r2, [r4, #16]
 800ea3a:	b1bd      	cbz	r5, 800ea6c <__d2b+0x94>
 800ea3c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ea40:	4405      	add	r5, r0
 800ea42:	603d      	str	r5, [r7, #0]
 800ea44:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ea48:	6030      	str	r0, [r6, #0]
 800ea4a:	4620      	mov	r0, r4
 800ea4c:	b003      	add	sp, #12
 800ea4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ea56:	e7d6      	b.n	800ea06 <__d2b+0x2e>
 800ea58:	6161      	str	r1, [r4, #20]
 800ea5a:	e7e7      	b.n	800ea2c <__d2b+0x54>
 800ea5c:	a801      	add	r0, sp, #4
 800ea5e:	f7ff fd61 	bl	800e524 <__lo0bits>
 800ea62:	9b01      	ldr	r3, [sp, #4]
 800ea64:	6163      	str	r3, [r4, #20]
 800ea66:	3020      	adds	r0, #32
 800ea68:	2201      	movs	r2, #1
 800ea6a:	e7e5      	b.n	800ea38 <__d2b+0x60>
 800ea6c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ea70:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ea74:	6038      	str	r0, [r7, #0]
 800ea76:	6918      	ldr	r0, [r3, #16]
 800ea78:	f7ff fd34 	bl	800e4e4 <__hi0bits>
 800ea7c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ea80:	e7e2      	b.n	800ea48 <__d2b+0x70>
 800ea82:	bf00      	nop
 800ea84:	0800f770 	.word	0x0800f770
 800ea88:	0800f781 	.word	0x0800f781

0800ea8c <__ssputs_r>:
 800ea8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea90:	688e      	ldr	r6, [r1, #8]
 800ea92:	461f      	mov	r7, r3
 800ea94:	42be      	cmp	r6, r7
 800ea96:	680b      	ldr	r3, [r1, #0]
 800ea98:	4682      	mov	sl, r0
 800ea9a:	460c      	mov	r4, r1
 800ea9c:	4690      	mov	r8, r2
 800ea9e:	d82c      	bhi.n	800eafa <__ssputs_r+0x6e>
 800eaa0:	898a      	ldrh	r2, [r1, #12]
 800eaa2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800eaa6:	d026      	beq.n	800eaf6 <__ssputs_r+0x6a>
 800eaa8:	6965      	ldr	r5, [r4, #20]
 800eaaa:	6909      	ldr	r1, [r1, #16]
 800eaac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eab0:	eba3 0901 	sub.w	r9, r3, r1
 800eab4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eab8:	1c7b      	adds	r3, r7, #1
 800eaba:	444b      	add	r3, r9
 800eabc:	106d      	asrs	r5, r5, #1
 800eabe:	429d      	cmp	r5, r3
 800eac0:	bf38      	it	cc
 800eac2:	461d      	movcc	r5, r3
 800eac4:	0553      	lsls	r3, r2, #21
 800eac6:	d527      	bpl.n	800eb18 <__ssputs_r+0x8c>
 800eac8:	4629      	mov	r1, r5
 800eaca:	f7ff fbd7 	bl	800e27c <_malloc_r>
 800eace:	4606      	mov	r6, r0
 800ead0:	b360      	cbz	r0, 800eb2c <__ssputs_r+0xa0>
 800ead2:	6921      	ldr	r1, [r4, #16]
 800ead4:	464a      	mov	r2, r9
 800ead6:	f000 fa09 	bl	800eeec <memcpy>
 800eada:	89a3      	ldrh	r3, [r4, #12]
 800eadc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800eae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eae4:	81a3      	strh	r3, [r4, #12]
 800eae6:	6126      	str	r6, [r4, #16]
 800eae8:	6165      	str	r5, [r4, #20]
 800eaea:	444e      	add	r6, r9
 800eaec:	eba5 0509 	sub.w	r5, r5, r9
 800eaf0:	6026      	str	r6, [r4, #0]
 800eaf2:	60a5      	str	r5, [r4, #8]
 800eaf4:	463e      	mov	r6, r7
 800eaf6:	42be      	cmp	r6, r7
 800eaf8:	d900      	bls.n	800eafc <__ssputs_r+0x70>
 800eafa:	463e      	mov	r6, r7
 800eafc:	6820      	ldr	r0, [r4, #0]
 800eafe:	4632      	mov	r2, r6
 800eb00:	4641      	mov	r1, r8
 800eb02:	f000 f9c9 	bl	800ee98 <memmove>
 800eb06:	68a3      	ldr	r3, [r4, #8]
 800eb08:	1b9b      	subs	r3, r3, r6
 800eb0a:	60a3      	str	r3, [r4, #8]
 800eb0c:	6823      	ldr	r3, [r4, #0]
 800eb0e:	4433      	add	r3, r6
 800eb10:	6023      	str	r3, [r4, #0]
 800eb12:	2000      	movs	r0, #0
 800eb14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb18:	462a      	mov	r2, r5
 800eb1a:	f000 fa3b 	bl	800ef94 <_realloc_r>
 800eb1e:	4606      	mov	r6, r0
 800eb20:	2800      	cmp	r0, #0
 800eb22:	d1e0      	bne.n	800eae6 <__ssputs_r+0x5a>
 800eb24:	6921      	ldr	r1, [r4, #16]
 800eb26:	4650      	mov	r0, sl
 800eb28:	f7ff fb34 	bl	800e194 <_free_r>
 800eb2c:	230c      	movs	r3, #12
 800eb2e:	f8ca 3000 	str.w	r3, [sl]
 800eb32:	89a3      	ldrh	r3, [r4, #12]
 800eb34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb38:	81a3      	strh	r3, [r4, #12]
 800eb3a:	f04f 30ff 	mov.w	r0, #4294967295
 800eb3e:	e7e9      	b.n	800eb14 <__ssputs_r+0x88>

0800eb40 <_svfiprintf_r>:
 800eb40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb44:	4698      	mov	r8, r3
 800eb46:	898b      	ldrh	r3, [r1, #12]
 800eb48:	061b      	lsls	r3, r3, #24
 800eb4a:	b09d      	sub	sp, #116	; 0x74
 800eb4c:	4607      	mov	r7, r0
 800eb4e:	460d      	mov	r5, r1
 800eb50:	4614      	mov	r4, r2
 800eb52:	d50e      	bpl.n	800eb72 <_svfiprintf_r+0x32>
 800eb54:	690b      	ldr	r3, [r1, #16]
 800eb56:	b963      	cbnz	r3, 800eb72 <_svfiprintf_r+0x32>
 800eb58:	2140      	movs	r1, #64	; 0x40
 800eb5a:	f7ff fb8f 	bl	800e27c <_malloc_r>
 800eb5e:	6028      	str	r0, [r5, #0]
 800eb60:	6128      	str	r0, [r5, #16]
 800eb62:	b920      	cbnz	r0, 800eb6e <_svfiprintf_r+0x2e>
 800eb64:	230c      	movs	r3, #12
 800eb66:	603b      	str	r3, [r7, #0]
 800eb68:	f04f 30ff 	mov.w	r0, #4294967295
 800eb6c:	e0d0      	b.n	800ed10 <_svfiprintf_r+0x1d0>
 800eb6e:	2340      	movs	r3, #64	; 0x40
 800eb70:	616b      	str	r3, [r5, #20]
 800eb72:	2300      	movs	r3, #0
 800eb74:	9309      	str	r3, [sp, #36]	; 0x24
 800eb76:	2320      	movs	r3, #32
 800eb78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eb7c:	f8cd 800c 	str.w	r8, [sp, #12]
 800eb80:	2330      	movs	r3, #48	; 0x30
 800eb82:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ed28 <_svfiprintf_r+0x1e8>
 800eb86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eb8a:	f04f 0901 	mov.w	r9, #1
 800eb8e:	4623      	mov	r3, r4
 800eb90:	469a      	mov	sl, r3
 800eb92:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eb96:	b10a      	cbz	r2, 800eb9c <_svfiprintf_r+0x5c>
 800eb98:	2a25      	cmp	r2, #37	; 0x25
 800eb9a:	d1f9      	bne.n	800eb90 <_svfiprintf_r+0x50>
 800eb9c:	ebba 0b04 	subs.w	fp, sl, r4
 800eba0:	d00b      	beq.n	800ebba <_svfiprintf_r+0x7a>
 800eba2:	465b      	mov	r3, fp
 800eba4:	4622      	mov	r2, r4
 800eba6:	4629      	mov	r1, r5
 800eba8:	4638      	mov	r0, r7
 800ebaa:	f7ff ff6f 	bl	800ea8c <__ssputs_r>
 800ebae:	3001      	adds	r0, #1
 800ebb0:	f000 80a9 	beq.w	800ed06 <_svfiprintf_r+0x1c6>
 800ebb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ebb6:	445a      	add	r2, fp
 800ebb8:	9209      	str	r2, [sp, #36]	; 0x24
 800ebba:	f89a 3000 	ldrb.w	r3, [sl]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	f000 80a1 	beq.w	800ed06 <_svfiprintf_r+0x1c6>
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	f04f 32ff 	mov.w	r2, #4294967295
 800ebca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ebce:	f10a 0a01 	add.w	sl, sl, #1
 800ebd2:	9304      	str	r3, [sp, #16]
 800ebd4:	9307      	str	r3, [sp, #28]
 800ebd6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ebda:	931a      	str	r3, [sp, #104]	; 0x68
 800ebdc:	4654      	mov	r4, sl
 800ebde:	2205      	movs	r2, #5
 800ebe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebe4:	4850      	ldr	r0, [pc, #320]	; (800ed28 <_svfiprintf_r+0x1e8>)
 800ebe6:	f7f1 faf3 	bl	80001d0 <memchr>
 800ebea:	9a04      	ldr	r2, [sp, #16]
 800ebec:	b9d8      	cbnz	r0, 800ec26 <_svfiprintf_r+0xe6>
 800ebee:	06d0      	lsls	r0, r2, #27
 800ebf0:	bf44      	itt	mi
 800ebf2:	2320      	movmi	r3, #32
 800ebf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ebf8:	0711      	lsls	r1, r2, #28
 800ebfa:	bf44      	itt	mi
 800ebfc:	232b      	movmi	r3, #43	; 0x2b
 800ebfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec02:	f89a 3000 	ldrb.w	r3, [sl]
 800ec06:	2b2a      	cmp	r3, #42	; 0x2a
 800ec08:	d015      	beq.n	800ec36 <_svfiprintf_r+0xf6>
 800ec0a:	9a07      	ldr	r2, [sp, #28]
 800ec0c:	4654      	mov	r4, sl
 800ec0e:	2000      	movs	r0, #0
 800ec10:	f04f 0c0a 	mov.w	ip, #10
 800ec14:	4621      	mov	r1, r4
 800ec16:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ec1a:	3b30      	subs	r3, #48	; 0x30
 800ec1c:	2b09      	cmp	r3, #9
 800ec1e:	d94d      	bls.n	800ecbc <_svfiprintf_r+0x17c>
 800ec20:	b1b0      	cbz	r0, 800ec50 <_svfiprintf_r+0x110>
 800ec22:	9207      	str	r2, [sp, #28]
 800ec24:	e014      	b.n	800ec50 <_svfiprintf_r+0x110>
 800ec26:	eba0 0308 	sub.w	r3, r0, r8
 800ec2a:	fa09 f303 	lsl.w	r3, r9, r3
 800ec2e:	4313      	orrs	r3, r2
 800ec30:	9304      	str	r3, [sp, #16]
 800ec32:	46a2      	mov	sl, r4
 800ec34:	e7d2      	b.n	800ebdc <_svfiprintf_r+0x9c>
 800ec36:	9b03      	ldr	r3, [sp, #12]
 800ec38:	1d19      	adds	r1, r3, #4
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	9103      	str	r1, [sp, #12]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	bfbb      	ittet	lt
 800ec42:	425b      	neglt	r3, r3
 800ec44:	f042 0202 	orrlt.w	r2, r2, #2
 800ec48:	9307      	strge	r3, [sp, #28]
 800ec4a:	9307      	strlt	r3, [sp, #28]
 800ec4c:	bfb8      	it	lt
 800ec4e:	9204      	strlt	r2, [sp, #16]
 800ec50:	7823      	ldrb	r3, [r4, #0]
 800ec52:	2b2e      	cmp	r3, #46	; 0x2e
 800ec54:	d10c      	bne.n	800ec70 <_svfiprintf_r+0x130>
 800ec56:	7863      	ldrb	r3, [r4, #1]
 800ec58:	2b2a      	cmp	r3, #42	; 0x2a
 800ec5a:	d134      	bne.n	800ecc6 <_svfiprintf_r+0x186>
 800ec5c:	9b03      	ldr	r3, [sp, #12]
 800ec5e:	1d1a      	adds	r2, r3, #4
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	9203      	str	r2, [sp, #12]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	bfb8      	it	lt
 800ec68:	f04f 33ff 	movlt.w	r3, #4294967295
 800ec6c:	3402      	adds	r4, #2
 800ec6e:	9305      	str	r3, [sp, #20]
 800ec70:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ed38 <_svfiprintf_r+0x1f8>
 800ec74:	7821      	ldrb	r1, [r4, #0]
 800ec76:	2203      	movs	r2, #3
 800ec78:	4650      	mov	r0, sl
 800ec7a:	f7f1 faa9 	bl	80001d0 <memchr>
 800ec7e:	b138      	cbz	r0, 800ec90 <_svfiprintf_r+0x150>
 800ec80:	9b04      	ldr	r3, [sp, #16]
 800ec82:	eba0 000a 	sub.w	r0, r0, sl
 800ec86:	2240      	movs	r2, #64	; 0x40
 800ec88:	4082      	lsls	r2, r0
 800ec8a:	4313      	orrs	r3, r2
 800ec8c:	3401      	adds	r4, #1
 800ec8e:	9304      	str	r3, [sp, #16]
 800ec90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec94:	4825      	ldr	r0, [pc, #148]	; (800ed2c <_svfiprintf_r+0x1ec>)
 800ec96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ec9a:	2206      	movs	r2, #6
 800ec9c:	f7f1 fa98 	bl	80001d0 <memchr>
 800eca0:	2800      	cmp	r0, #0
 800eca2:	d038      	beq.n	800ed16 <_svfiprintf_r+0x1d6>
 800eca4:	4b22      	ldr	r3, [pc, #136]	; (800ed30 <_svfiprintf_r+0x1f0>)
 800eca6:	bb1b      	cbnz	r3, 800ecf0 <_svfiprintf_r+0x1b0>
 800eca8:	9b03      	ldr	r3, [sp, #12]
 800ecaa:	3307      	adds	r3, #7
 800ecac:	f023 0307 	bic.w	r3, r3, #7
 800ecb0:	3308      	adds	r3, #8
 800ecb2:	9303      	str	r3, [sp, #12]
 800ecb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecb6:	4433      	add	r3, r6
 800ecb8:	9309      	str	r3, [sp, #36]	; 0x24
 800ecba:	e768      	b.n	800eb8e <_svfiprintf_r+0x4e>
 800ecbc:	fb0c 3202 	mla	r2, ip, r2, r3
 800ecc0:	460c      	mov	r4, r1
 800ecc2:	2001      	movs	r0, #1
 800ecc4:	e7a6      	b.n	800ec14 <_svfiprintf_r+0xd4>
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	3401      	adds	r4, #1
 800ecca:	9305      	str	r3, [sp, #20]
 800eccc:	4619      	mov	r1, r3
 800ecce:	f04f 0c0a 	mov.w	ip, #10
 800ecd2:	4620      	mov	r0, r4
 800ecd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ecd8:	3a30      	subs	r2, #48	; 0x30
 800ecda:	2a09      	cmp	r2, #9
 800ecdc:	d903      	bls.n	800ece6 <_svfiprintf_r+0x1a6>
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d0c6      	beq.n	800ec70 <_svfiprintf_r+0x130>
 800ece2:	9105      	str	r1, [sp, #20]
 800ece4:	e7c4      	b.n	800ec70 <_svfiprintf_r+0x130>
 800ece6:	fb0c 2101 	mla	r1, ip, r1, r2
 800ecea:	4604      	mov	r4, r0
 800ecec:	2301      	movs	r3, #1
 800ecee:	e7f0      	b.n	800ecd2 <_svfiprintf_r+0x192>
 800ecf0:	ab03      	add	r3, sp, #12
 800ecf2:	9300      	str	r3, [sp, #0]
 800ecf4:	462a      	mov	r2, r5
 800ecf6:	4b0f      	ldr	r3, [pc, #60]	; (800ed34 <_svfiprintf_r+0x1f4>)
 800ecf8:	a904      	add	r1, sp, #16
 800ecfa:	4638      	mov	r0, r7
 800ecfc:	f7fd fe64 	bl	800c9c8 <_printf_float>
 800ed00:	1c42      	adds	r2, r0, #1
 800ed02:	4606      	mov	r6, r0
 800ed04:	d1d6      	bne.n	800ecb4 <_svfiprintf_r+0x174>
 800ed06:	89ab      	ldrh	r3, [r5, #12]
 800ed08:	065b      	lsls	r3, r3, #25
 800ed0a:	f53f af2d 	bmi.w	800eb68 <_svfiprintf_r+0x28>
 800ed0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ed10:	b01d      	add	sp, #116	; 0x74
 800ed12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed16:	ab03      	add	r3, sp, #12
 800ed18:	9300      	str	r3, [sp, #0]
 800ed1a:	462a      	mov	r2, r5
 800ed1c:	4b05      	ldr	r3, [pc, #20]	; (800ed34 <_svfiprintf_r+0x1f4>)
 800ed1e:	a904      	add	r1, sp, #16
 800ed20:	4638      	mov	r0, r7
 800ed22:	f7fe f8f5 	bl	800cf10 <_printf_i>
 800ed26:	e7eb      	b.n	800ed00 <_svfiprintf_r+0x1c0>
 800ed28:	0800f8dc 	.word	0x0800f8dc
 800ed2c:	0800f8e6 	.word	0x0800f8e6
 800ed30:	0800c9c9 	.word	0x0800c9c9
 800ed34:	0800ea8d 	.word	0x0800ea8d
 800ed38:	0800f8e2 	.word	0x0800f8e2

0800ed3c <__sflush_r>:
 800ed3c:	898a      	ldrh	r2, [r1, #12]
 800ed3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed42:	4605      	mov	r5, r0
 800ed44:	0710      	lsls	r0, r2, #28
 800ed46:	460c      	mov	r4, r1
 800ed48:	d458      	bmi.n	800edfc <__sflush_r+0xc0>
 800ed4a:	684b      	ldr	r3, [r1, #4]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	dc05      	bgt.n	800ed5c <__sflush_r+0x20>
 800ed50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	dc02      	bgt.n	800ed5c <__sflush_r+0x20>
 800ed56:	2000      	movs	r0, #0
 800ed58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ed5e:	2e00      	cmp	r6, #0
 800ed60:	d0f9      	beq.n	800ed56 <__sflush_r+0x1a>
 800ed62:	2300      	movs	r3, #0
 800ed64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ed68:	682f      	ldr	r7, [r5, #0]
 800ed6a:	6a21      	ldr	r1, [r4, #32]
 800ed6c:	602b      	str	r3, [r5, #0]
 800ed6e:	d032      	beq.n	800edd6 <__sflush_r+0x9a>
 800ed70:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ed72:	89a3      	ldrh	r3, [r4, #12]
 800ed74:	075a      	lsls	r2, r3, #29
 800ed76:	d505      	bpl.n	800ed84 <__sflush_r+0x48>
 800ed78:	6863      	ldr	r3, [r4, #4]
 800ed7a:	1ac0      	subs	r0, r0, r3
 800ed7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ed7e:	b10b      	cbz	r3, 800ed84 <__sflush_r+0x48>
 800ed80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ed82:	1ac0      	subs	r0, r0, r3
 800ed84:	2300      	movs	r3, #0
 800ed86:	4602      	mov	r2, r0
 800ed88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ed8a:	6a21      	ldr	r1, [r4, #32]
 800ed8c:	4628      	mov	r0, r5
 800ed8e:	47b0      	blx	r6
 800ed90:	1c43      	adds	r3, r0, #1
 800ed92:	89a3      	ldrh	r3, [r4, #12]
 800ed94:	d106      	bne.n	800eda4 <__sflush_r+0x68>
 800ed96:	6829      	ldr	r1, [r5, #0]
 800ed98:	291d      	cmp	r1, #29
 800ed9a:	d82b      	bhi.n	800edf4 <__sflush_r+0xb8>
 800ed9c:	4a29      	ldr	r2, [pc, #164]	; (800ee44 <__sflush_r+0x108>)
 800ed9e:	410a      	asrs	r2, r1
 800eda0:	07d6      	lsls	r6, r2, #31
 800eda2:	d427      	bmi.n	800edf4 <__sflush_r+0xb8>
 800eda4:	2200      	movs	r2, #0
 800eda6:	6062      	str	r2, [r4, #4]
 800eda8:	04d9      	lsls	r1, r3, #19
 800edaa:	6922      	ldr	r2, [r4, #16]
 800edac:	6022      	str	r2, [r4, #0]
 800edae:	d504      	bpl.n	800edba <__sflush_r+0x7e>
 800edb0:	1c42      	adds	r2, r0, #1
 800edb2:	d101      	bne.n	800edb8 <__sflush_r+0x7c>
 800edb4:	682b      	ldr	r3, [r5, #0]
 800edb6:	b903      	cbnz	r3, 800edba <__sflush_r+0x7e>
 800edb8:	6560      	str	r0, [r4, #84]	; 0x54
 800edba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800edbc:	602f      	str	r7, [r5, #0]
 800edbe:	2900      	cmp	r1, #0
 800edc0:	d0c9      	beq.n	800ed56 <__sflush_r+0x1a>
 800edc2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800edc6:	4299      	cmp	r1, r3
 800edc8:	d002      	beq.n	800edd0 <__sflush_r+0x94>
 800edca:	4628      	mov	r0, r5
 800edcc:	f7ff f9e2 	bl	800e194 <_free_r>
 800edd0:	2000      	movs	r0, #0
 800edd2:	6360      	str	r0, [r4, #52]	; 0x34
 800edd4:	e7c0      	b.n	800ed58 <__sflush_r+0x1c>
 800edd6:	2301      	movs	r3, #1
 800edd8:	4628      	mov	r0, r5
 800edda:	47b0      	blx	r6
 800eddc:	1c41      	adds	r1, r0, #1
 800edde:	d1c8      	bne.n	800ed72 <__sflush_r+0x36>
 800ede0:	682b      	ldr	r3, [r5, #0]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d0c5      	beq.n	800ed72 <__sflush_r+0x36>
 800ede6:	2b1d      	cmp	r3, #29
 800ede8:	d001      	beq.n	800edee <__sflush_r+0xb2>
 800edea:	2b16      	cmp	r3, #22
 800edec:	d101      	bne.n	800edf2 <__sflush_r+0xb6>
 800edee:	602f      	str	r7, [r5, #0]
 800edf0:	e7b1      	b.n	800ed56 <__sflush_r+0x1a>
 800edf2:	89a3      	ldrh	r3, [r4, #12]
 800edf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800edf8:	81a3      	strh	r3, [r4, #12]
 800edfa:	e7ad      	b.n	800ed58 <__sflush_r+0x1c>
 800edfc:	690f      	ldr	r7, [r1, #16]
 800edfe:	2f00      	cmp	r7, #0
 800ee00:	d0a9      	beq.n	800ed56 <__sflush_r+0x1a>
 800ee02:	0793      	lsls	r3, r2, #30
 800ee04:	680e      	ldr	r6, [r1, #0]
 800ee06:	bf08      	it	eq
 800ee08:	694b      	ldreq	r3, [r1, #20]
 800ee0a:	600f      	str	r7, [r1, #0]
 800ee0c:	bf18      	it	ne
 800ee0e:	2300      	movne	r3, #0
 800ee10:	eba6 0807 	sub.w	r8, r6, r7
 800ee14:	608b      	str	r3, [r1, #8]
 800ee16:	f1b8 0f00 	cmp.w	r8, #0
 800ee1a:	dd9c      	ble.n	800ed56 <__sflush_r+0x1a>
 800ee1c:	6a21      	ldr	r1, [r4, #32]
 800ee1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ee20:	4643      	mov	r3, r8
 800ee22:	463a      	mov	r2, r7
 800ee24:	4628      	mov	r0, r5
 800ee26:	47b0      	blx	r6
 800ee28:	2800      	cmp	r0, #0
 800ee2a:	dc06      	bgt.n	800ee3a <__sflush_r+0xfe>
 800ee2c:	89a3      	ldrh	r3, [r4, #12]
 800ee2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee32:	81a3      	strh	r3, [r4, #12]
 800ee34:	f04f 30ff 	mov.w	r0, #4294967295
 800ee38:	e78e      	b.n	800ed58 <__sflush_r+0x1c>
 800ee3a:	4407      	add	r7, r0
 800ee3c:	eba8 0800 	sub.w	r8, r8, r0
 800ee40:	e7e9      	b.n	800ee16 <__sflush_r+0xda>
 800ee42:	bf00      	nop
 800ee44:	dfbffffe 	.word	0xdfbffffe

0800ee48 <_fflush_r>:
 800ee48:	b538      	push	{r3, r4, r5, lr}
 800ee4a:	690b      	ldr	r3, [r1, #16]
 800ee4c:	4605      	mov	r5, r0
 800ee4e:	460c      	mov	r4, r1
 800ee50:	b913      	cbnz	r3, 800ee58 <_fflush_r+0x10>
 800ee52:	2500      	movs	r5, #0
 800ee54:	4628      	mov	r0, r5
 800ee56:	bd38      	pop	{r3, r4, r5, pc}
 800ee58:	b118      	cbz	r0, 800ee62 <_fflush_r+0x1a>
 800ee5a:	6a03      	ldr	r3, [r0, #32]
 800ee5c:	b90b      	cbnz	r3, 800ee62 <_fflush_r+0x1a>
 800ee5e:	f7fe fa05 	bl	800d26c <__sinit>
 800ee62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d0f3      	beq.n	800ee52 <_fflush_r+0xa>
 800ee6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ee6c:	07d0      	lsls	r0, r2, #31
 800ee6e:	d404      	bmi.n	800ee7a <_fflush_r+0x32>
 800ee70:	0599      	lsls	r1, r3, #22
 800ee72:	d402      	bmi.n	800ee7a <_fflush_r+0x32>
 800ee74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ee76:	f7fe fb10 	bl	800d49a <__retarget_lock_acquire_recursive>
 800ee7a:	4628      	mov	r0, r5
 800ee7c:	4621      	mov	r1, r4
 800ee7e:	f7ff ff5d 	bl	800ed3c <__sflush_r>
 800ee82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ee84:	07da      	lsls	r2, r3, #31
 800ee86:	4605      	mov	r5, r0
 800ee88:	d4e4      	bmi.n	800ee54 <_fflush_r+0xc>
 800ee8a:	89a3      	ldrh	r3, [r4, #12]
 800ee8c:	059b      	lsls	r3, r3, #22
 800ee8e:	d4e1      	bmi.n	800ee54 <_fflush_r+0xc>
 800ee90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ee92:	f7fe fb03 	bl	800d49c <__retarget_lock_release_recursive>
 800ee96:	e7dd      	b.n	800ee54 <_fflush_r+0xc>

0800ee98 <memmove>:
 800ee98:	4288      	cmp	r0, r1
 800ee9a:	b510      	push	{r4, lr}
 800ee9c:	eb01 0402 	add.w	r4, r1, r2
 800eea0:	d902      	bls.n	800eea8 <memmove+0x10>
 800eea2:	4284      	cmp	r4, r0
 800eea4:	4623      	mov	r3, r4
 800eea6:	d807      	bhi.n	800eeb8 <memmove+0x20>
 800eea8:	1e43      	subs	r3, r0, #1
 800eeaa:	42a1      	cmp	r1, r4
 800eeac:	d008      	beq.n	800eec0 <memmove+0x28>
 800eeae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eeb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eeb6:	e7f8      	b.n	800eeaa <memmove+0x12>
 800eeb8:	4402      	add	r2, r0
 800eeba:	4601      	mov	r1, r0
 800eebc:	428a      	cmp	r2, r1
 800eebe:	d100      	bne.n	800eec2 <memmove+0x2a>
 800eec0:	bd10      	pop	{r4, pc}
 800eec2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800eec6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800eeca:	e7f7      	b.n	800eebc <memmove+0x24>

0800eecc <_sbrk_r>:
 800eecc:	b538      	push	{r3, r4, r5, lr}
 800eece:	4d06      	ldr	r5, [pc, #24]	; (800eee8 <_sbrk_r+0x1c>)
 800eed0:	2300      	movs	r3, #0
 800eed2:	4604      	mov	r4, r0
 800eed4:	4608      	mov	r0, r1
 800eed6:	602b      	str	r3, [r5, #0]
 800eed8:	f7f5 f88c 	bl	8003ff4 <_sbrk>
 800eedc:	1c43      	adds	r3, r0, #1
 800eede:	d102      	bne.n	800eee6 <_sbrk_r+0x1a>
 800eee0:	682b      	ldr	r3, [r5, #0]
 800eee2:	b103      	cbz	r3, 800eee6 <_sbrk_r+0x1a>
 800eee4:	6023      	str	r3, [r4, #0]
 800eee6:	bd38      	pop	{r3, r4, r5, pc}
 800eee8:	20000a48 	.word	0x20000a48

0800eeec <memcpy>:
 800eeec:	440a      	add	r2, r1
 800eeee:	4291      	cmp	r1, r2
 800eef0:	f100 33ff 	add.w	r3, r0, #4294967295
 800eef4:	d100      	bne.n	800eef8 <memcpy+0xc>
 800eef6:	4770      	bx	lr
 800eef8:	b510      	push	{r4, lr}
 800eefa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eefe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ef02:	4291      	cmp	r1, r2
 800ef04:	d1f9      	bne.n	800eefa <memcpy+0xe>
 800ef06:	bd10      	pop	{r4, pc}

0800ef08 <__assert_func>:
 800ef08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ef0a:	4614      	mov	r4, r2
 800ef0c:	461a      	mov	r2, r3
 800ef0e:	4b09      	ldr	r3, [pc, #36]	; (800ef34 <__assert_func+0x2c>)
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	4605      	mov	r5, r0
 800ef14:	68d8      	ldr	r0, [r3, #12]
 800ef16:	b14c      	cbz	r4, 800ef2c <__assert_func+0x24>
 800ef18:	4b07      	ldr	r3, [pc, #28]	; (800ef38 <__assert_func+0x30>)
 800ef1a:	9100      	str	r1, [sp, #0]
 800ef1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ef20:	4906      	ldr	r1, [pc, #24]	; (800ef3c <__assert_func+0x34>)
 800ef22:	462b      	mov	r3, r5
 800ef24:	f000 f872 	bl	800f00c <fiprintf>
 800ef28:	f000 f882 	bl	800f030 <abort>
 800ef2c:	4b04      	ldr	r3, [pc, #16]	; (800ef40 <__assert_func+0x38>)
 800ef2e:	461c      	mov	r4, r3
 800ef30:	e7f3      	b.n	800ef1a <__assert_func+0x12>
 800ef32:	bf00      	nop
 800ef34:	20000070 	.word	0x20000070
 800ef38:	0800f8f7 	.word	0x0800f8f7
 800ef3c:	0800f904 	.word	0x0800f904
 800ef40:	0800f932 	.word	0x0800f932

0800ef44 <_calloc_r>:
 800ef44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ef46:	fba1 2402 	umull	r2, r4, r1, r2
 800ef4a:	b94c      	cbnz	r4, 800ef60 <_calloc_r+0x1c>
 800ef4c:	4611      	mov	r1, r2
 800ef4e:	9201      	str	r2, [sp, #4]
 800ef50:	f7ff f994 	bl	800e27c <_malloc_r>
 800ef54:	9a01      	ldr	r2, [sp, #4]
 800ef56:	4605      	mov	r5, r0
 800ef58:	b930      	cbnz	r0, 800ef68 <_calloc_r+0x24>
 800ef5a:	4628      	mov	r0, r5
 800ef5c:	b003      	add	sp, #12
 800ef5e:	bd30      	pop	{r4, r5, pc}
 800ef60:	220c      	movs	r2, #12
 800ef62:	6002      	str	r2, [r0, #0]
 800ef64:	2500      	movs	r5, #0
 800ef66:	e7f8      	b.n	800ef5a <_calloc_r+0x16>
 800ef68:	4621      	mov	r1, r4
 800ef6a:	f7fe fa18 	bl	800d39e <memset>
 800ef6e:	e7f4      	b.n	800ef5a <_calloc_r+0x16>

0800ef70 <__ascii_mbtowc>:
 800ef70:	b082      	sub	sp, #8
 800ef72:	b901      	cbnz	r1, 800ef76 <__ascii_mbtowc+0x6>
 800ef74:	a901      	add	r1, sp, #4
 800ef76:	b142      	cbz	r2, 800ef8a <__ascii_mbtowc+0x1a>
 800ef78:	b14b      	cbz	r3, 800ef8e <__ascii_mbtowc+0x1e>
 800ef7a:	7813      	ldrb	r3, [r2, #0]
 800ef7c:	600b      	str	r3, [r1, #0]
 800ef7e:	7812      	ldrb	r2, [r2, #0]
 800ef80:	1e10      	subs	r0, r2, #0
 800ef82:	bf18      	it	ne
 800ef84:	2001      	movne	r0, #1
 800ef86:	b002      	add	sp, #8
 800ef88:	4770      	bx	lr
 800ef8a:	4610      	mov	r0, r2
 800ef8c:	e7fb      	b.n	800ef86 <__ascii_mbtowc+0x16>
 800ef8e:	f06f 0001 	mvn.w	r0, #1
 800ef92:	e7f8      	b.n	800ef86 <__ascii_mbtowc+0x16>

0800ef94 <_realloc_r>:
 800ef94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef98:	4680      	mov	r8, r0
 800ef9a:	4614      	mov	r4, r2
 800ef9c:	460e      	mov	r6, r1
 800ef9e:	b921      	cbnz	r1, 800efaa <_realloc_r+0x16>
 800efa0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800efa4:	4611      	mov	r1, r2
 800efa6:	f7ff b969 	b.w	800e27c <_malloc_r>
 800efaa:	b92a      	cbnz	r2, 800efb8 <_realloc_r+0x24>
 800efac:	f7ff f8f2 	bl	800e194 <_free_r>
 800efb0:	4625      	mov	r5, r4
 800efb2:	4628      	mov	r0, r5
 800efb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efb8:	f000 f841 	bl	800f03e <_malloc_usable_size_r>
 800efbc:	4284      	cmp	r4, r0
 800efbe:	4607      	mov	r7, r0
 800efc0:	d802      	bhi.n	800efc8 <_realloc_r+0x34>
 800efc2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800efc6:	d812      	bhi.n	800efee <_realloc_r+0x5a>
 800efc8:	4621      	mov	r1, r4
 800efca:	4640      	mov	r0, r8
 800efcc:	f7ff f956 	bl	800e27c <_malloc_r>
 800efd0:	4605      	mov	r5, r0
 800efd2:	2800      	cmp	r0, #0
 800efd4:	d0ed      	beq.n	800efb2 <_realloc_r+0x1e>
 800efd6:	42bc      	cmp	r4, r7
 800efd8:	4622      	mov	r2, r4
 800efda:	4631      	mov	r1, r6
 800efdc:	bf28      	it	cs
 800efde:	463a      	movcs	r2, r7
 800efe0:	f7ff ff84 	bl	800eeec <memcpy>
 800efe4:	4631      	mov	r1, r6
 800efe6:	4640      	mov	r0, r8
 800efe8:	f7ff f8d4 	bl	800e194 <_free_r>
 800efec:	e7e1      	b.n	800efb2 <_realloc_r+0x1e>
 800efee:	4635      	mov	r5, r6
 800eff0:	e7df      	b.n	800efb2 <_realloc_r+0x1e>

0800eff2 <__ascii_wctomb>:
 800eff2:	b149      	cbz	r1, 800f008 <__ascii_wctomb+0x16>
 800eff4:	2aff      	cmp	r2, #255	; 0xff
 800eff6:	bf85      	ittet	hi
 800eff8:	238a      	movhi	r3, #138	; 0x8a
 800effa:	6003      	strhi	r3, [r0, #0]
 800effc:	700a      	strbls	r2, [r1, #0]
 800effe:	f04f 30ff 	movhi.w	r0, #4294967295
 800f002:	bf98      	it	ls
 800f004:	2001      	movls	r0, #1
 800f006:	4770      	bx	lr
 800f008:	4608      	mov	r0, r1
 800f00a:	4770      	bx	lr

0800f00c <fiprintf>:
 800f00c:	b40e      	push	{r1, r2, r3}
 800f00e:	b503      	push	{r0, r1, lr}
 800f010:	4601      	mov	r1, r0
 800f012:	ab03      	add	r3, sp, #12
 800f014:	4805      	ldr	r0, [pc, #20]	; (800f02c <fiprintf+0x20>)
 800f016:	f853 2b04 	ldr.w	r2, [r3], #4
 800f01a:	6800      	ldr	r0, [r0, #0]
 800f01c:	9301      	str	r3, [sp, #4]
 800f01e:	f000 f83f 	bl	800f0a0 <_vfiprintf_r>
 800f022:	b002      	add	sp, #8
 800f024:	f85d eb04 	ldr.w	lr, [sp], #4
 800f028:	b003      	add	sp, #12
 800f02a:	4770      	bx	lr
 800f02c:	20000070 	.word	0x20000070

0800f030 <abort>:
 800f030:	b508      	push	{r3, lr}
 800f032:	2006      	movs	r0, #6
 800f034:	f000 fa0c 	bl	800f450 <raise>
 800f038:	2001      	movs	r0, #1
 800f03a:	f7f4 ff63 	bl	8003f04 <_exit>

0800f03e <_malloc_usable_size_r>:
 800f03e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f042:	1f18      	subs	r0, r3, #4
 800f044:	2b00      	cmp	r3, #0
 800f046:	bfbc      	itt	lt
 800f048:	580b      	ldrlt	r3, [r1, r0]
 800f04a:	18c0      	addlt	r0, r0, r3
 800f04c:	4770      	bx	lr

0800f04e <__sfputc_r>:
 800f04e:	6893      	ldr	r3, [r2, #8]
 800f050:	3b01      	subs	r3, #1
 800f052:	2b00      	cmp	r3, #0
 800f054:	b410      	push	{r4}
 800f056:	6093      	str	r3, [r2, #8]
 800f058:	da08      	bge.n	800f06c <__sfputc_r+0x1e>
 800f05a:	6994      	ldr	r4, [r2, #24]
 800f05c:	42a3      	cmp	r3, r4
 800f05e:	db01      	blt.n	800f064 <__sfputc_r+0x16>
 800f060:	290a      	cmp	r1, #10
 800f062:	d103      	bne.n	800f06c <__sfputc_r+0x1e>
 800f064:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f068:	f000 b934 	b.w	800f2d4 <__swbuf_r>
 800f06c:	6813      	ldr	r3, [r2, #0]
 800f06e:	1c58      	adds	r0, r3, #1
 800f070:	6010      	str	r0, [r2, #0]
 800f072:	7019      	strb	r1, [r3, #0]
 800f074:	4608      	mov	r0, r1
 800f076:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f07a:	4770      	bx	lr

0800f07c <__sfputs_r>:
 800f07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f07e:	4606      	mov	r6, r0
 800f080:	460f      	mov	r7, r1
 800f082:	4614      	mov	r4, r2
 800f084:	18d5      	adds	r5, r2, r3
 800f086:	42ac      	cmp	r4, r5
 800f088:	d101      	bne.n	800f08e <__sfputs_r+0x12>
 800f08a:	2000      	movs	r0, #0
 800f08c:	e007      	b.n	800f09e <__sfputs_r+0x22>
 800f08e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f092:	463a      	mov	r2, r7
 800f094:	4630      	mov	r0, r6
 800f096:	f7ff ffda 	bl	800f04e <__sfputc_r>
 800f09a:	1c43      	adds	r3, r0, #1
 800f09c:	d1f3      	bne.n	800f086 <__sfputs_r+0xa>
 800f09e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f0a0 <_vfiprintf_r>:
 800f0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0a4:	460d      	mov	r5, r1
 800f0a6:	b09d      	sub	sp, #116	; 0x74
 800f0a8:	4614      	mov	r4, r2
 800f0aa:	4698      	mov	r8, r3
 800f0ac:	4606      	mov	r6, r0
 800f0ae:	b118      	cbz	r0, 800f0b8 <_vfiprintf_r+0x18>
 800f0b0:	6a03      	ldr	r3, [r0, #32]
 800f0b2:	b90b      	cbnz	r3, 800f0b8 <_vfiprintf_r+0x18>
 800f0b4:	f7fe f8da 	bl	800d26c <__sinit>
 800f0b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f0ba:	07d9      	lsls	r1, r3, #31
 800f0bc:	d405      	bmi.n	800f0ca <_vfiprintf_r+0x2a>
 800f0be:	89ab      	ldrh	r3, [r5, #12]
 800f0c0:	059a      	lsls	r2, r3, #22
 800f0c2:	d402      	bmi.n	800f0ca <_vfiprintf_r+0x2a>
 800f0c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f0c6:	f7fe f9e8 	bl	800d49a <__retarget_lock_acquire_recursive>
 800f0ca:	89ab      	ldrh	r3, [r5, #12]
 800f0cc:	071b      	lsls	r3, r3, #28
 800f0ce:	d501      	bpl.n	800f0d4 <_vfiprintf_r+0x34>
 800f0d0:	692b      	ldr	r3, [r5, #16]
 800f0d2:	b99b      	cbnz	r3, 800f0fc <_vfiprintf_r+0x5c>
 800f0d4:	4629      	mov	r1, r5
 800f0d6:	4630      	mov	r0, r6
 800f0d8:	f000 f93a 	bl	800f350 <__swsetup_r>
 800f0dc:	b170      	cbz	r0, 800f0fc <_vfiprintf_r+0x5c>
 800f0de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f0e0:	07dc      	lsls	r4, r3, #31
 800f0e2:	d504      	bpl.n	800f0ee <_vfiprintf_r+0x4e>
 800f0e4:	f04f 30ff 	mov.w	r0, #4294967295
 800f0e8:	b01d      	add	sp, #116	; 0x74
 800f0ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0ee:	89ab      	ldrh	r3, [r5, #12]
 800f0f0:	0598      	lsls	r0, r3, #22
 800f0f2:	d4f7      	bmi.n	800f0e4 <_vfiprintf_r+0x44>
 800f0f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f0f6:	f7fe f9d1 	bl	800d49c <__retarget_lock_release_recursive>
 800f0fa:	e7f3      	b.n	800f0e4 <_vfiprintf_r+0x44>
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	9309      	str	r3, [sp, #36]	; 0x24
 800f100:	2320      	movs	r3, #32
 800f102:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f106:	f8cd 800c 	str.w	r8, [sp, #12]
 800f10a:	2330      	movs	r3, #48	; 0x30
 800f10c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f2c0 <_vfiprintf_r+0x220>
 800f110:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f114:	f04f 0901 	mov.w	r9, #1
 800f118:	4623      	mov	r3, r4
 800f11a:	469a      	mov	sl, r3
 800f11c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f120:	b10a      	cbz	r2, 800f126 <_vfiprintf_r+0x86>
 800f122:	2a25      	cmp	r2, #37	; 0x25
 800f124:	d1f9      	bne.n	800f11a <_vfiprintf_r+0x7a>
 800f126:	ebba 0b04 	subs.w	fp, sl, r4
 800f12a:	d00b      	beq.n	800f144 <_vfiprintf_r+0xa4>
 800f12c:	465b      	mov	r3, fp
 800f12e:	4622      	mov	r2, r4
 800f130:	4629      	mov	r1, r5
 800f132:	4630      	mov	r0, r6
 800f134:	f7ff ffa2 	bl	800f07c <__sfputs_r>
 800f138:	3001      	adds	r0, #1
 800f13a:	f000 80a9 	beq.w	800f290 <_vfiprintf_r+0x1f0>
 800f13e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f140:	445a      	add	r2, fp
 800f142:	9209      	str	r2, [sp, #36]	; 0x24
 800f144:	f89a 3000 	ldrb.w	r3, [sl]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	f000 80a1 	beq.w	800f290 <_vfiprintf_r+0x1f0>
 800f14e:	2300      	movs	r3, #0
 800f150:	f04f 32ff 	mov.w	r2, #4294967295
 800f154:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f158:	f10a 0a01 	add.w	sl, sl, #1
 800f15c:	9304      	str	r3, [sp, #16]
 800f15e:	9307      	str	r3, [sp, #28]
 800f160:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f164:	931a      	str	r3, [sp, #104]	; 0x68
 800f166:	4654      	mov	r4, sl
 800f168:	2205      	movs	r2, #5
 800f16a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f16e:	4854      	ldr	r0, [pc, #336]	; (800f2c0 <_vfiprintf_r+0x220>)
 800f170:	f7f1 f82e 	bl	80001d0 <memchr>
 800f174:	9a04      	ldr	r2, [sp, #16]
 800f176:	b9d8      	cbnz	r0, 800f1b0 <_vfiprintf_r+0x110>
 800f178:	06d1      	lsls	r1, r2, #27
 800f17a:	bf44      	itt	mi
 800f17c:	2320      	movmi	r3, #32
 800f17e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f182:	0713      	lsls	r3, r2, #28
 800f184:	bf44      	itt	mi
 800f186:	232b      	movmi	r3, #43	; 0x2b
 800f188:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f18c:	f89a 3000 	ldrb.w	r3, [sl]
 800f190:	2b2a      	cmp	r3, #42	; 0x2a
 800f192:	d015      	beq.n	800f1c0 <_vfiprintf_r+0x120>
 800f194:	9a07      	ldr	r2, [sp, #28]
 800f196:	4654      	mov	r4, sl
 800f198:	2000      	movs	r0, #0
 800f19a:	f04f 0c0a 	mov.w	ip, #10
 800f19e:	4621      	mov	r1, r4
 800f1a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f1a4:	3b30      	subs	r3, #48	; 0x30
 800f1a6:	2b09      	cmp	r3, #9
 800f1a8:	d94d      	bls.n	800f246 <_vfiprintf_r+0x1a6>
 800f1aa:	b1b0      	cbz	r0, 800f1da <_vfiprintf_r+0x13a>
 800f1ac:	9207      	str	r2, [sp, #28]
 800f1ae:	e014      	b.n	800f1da <_vfiprintf_r+0x13a>
 800f1b0:	eba0 0308 	sub.w	r3, r0, r8
 800f1b4:	fa09 f303 	lsl.w	r3, r9, r3
 800f1b8:	4313      	orrs	r3, r2
 800f1ba:	9304      	str	r3, [sp, #16]
 800f1bc:	46a2      	mov	sl, r4
 800f1be:	e7d2      	b.n	800f166 <_vfiprintf_r+0xc6>
 800f1c0:	9b03      	ldr	r3, [sp, #12]
 800f1c2:	1d19      	adds	r1, r3, #4
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	9103      	str	r1, [sp, #12]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	bfbb      	ittet	lt
 800f1cc:	425b      	neglt	r3, r3
 800f1ce:	f042 0202 	orrlt.w	r2, r2, #2
 800f1d2:	9307      	strge	r3, [sp, #28]
 800f1d4:	9307      	strlt	r3, [sp, #28]
 800f1d6:	bfb8      	it	lt
 800f1d8:	9204      	strlt	r2, [sp, #16]
 800f1da:	7823      	ldrb	r3, [r4, #0]
 800f1dc:	2b2e      	cmp	r3, #46	; 0x2e
 800f1de:	d10c      	bne.n	800f1fa <_vfiprintf_r+0x15a>
 800f1e0:	7863      	ldrb	r3, [r4, #1]
 800f1e2:	2b2a      	cmp	r3, #42	; 0x2a
 800f1e4:	d134      	bne.n	800f250 <_vfiprintf_r+0x1b0>
 800f1e6:	9b03      	ldr	r3, [sp, #12]
 800f1e8:	1d1a      	adds	r2, r3, #4
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	9203      	str	r2, [sp, #12]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	bfb8      	it	lt
 800f1f2:	f04f 33ff 	movlt.w	r3, #4294967295
 800f1f6:	3402      	adds	r4, #2
 800f1f8:	9305      	str	r3, [sp, #20]
 800f1fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f2d0 <_vfiprintf_r+0x230>
 800f1fe:	7821      	ldrb	r1, [r4, #0]
 800f200:	2203      	movs	r2, #3
 800f202:	4650      	mov	r0, sl
 800f204:	f7f0 ffe4 	bl	80001d0 <memchr>
 800f208:	b138      	cbz	r0, 800f21a <_vfiprintf_r+0x17a>
 800f20a:	9b04      	ldr	r3, [sp, #16]
 800f20c:	eba0 000a 	sub.w	r0, r0, sl
 800f210:	2240      	movs	r2, #64	; 0x40
 800f212:	4082      	lsls	r2, r0
 800f214:	4313      	orrs	r3, r2
 800f216:	3401      	adds	r4, #1
 800f218:	9304      	str	r3, [sp, #16]
 800f21a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f21e:	4829      	ldr	r0, [pc, #164]	; (800f2c4 <_vfiprintf_r+0x224>)
 800f220:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f224:	2206      	movs	r2, #6
 800f226:	f7f0 ffd3 	bl	80001d0 <memchr>
 800f22a:	2800      	cmp	r0, #0
 800f22c:	d03f      	beq.n	800f2ae <_vfiprintf_r+0x20e>
 800f22e:	4b26      	ldr	r3, [pc, #152]	; (800f2c8 <_vfiprintf_r+0x228>)
 800f230:	bb1b      	cbnz	r3, 800f27a <_vfiprintf_r+0x1da>
 800f232:	9b03      	ldr	r3, [sp, #12]
 800f234:	3307      	adds	r3, #7
 800f236:	f023 0307 	bic.w	r3, r3, #7
 800f23a:	3308      	adds	r3, #8
 800f23c:	9303      	str	r3, [sp, #12]
 800f23e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f240:	443b      	add	r3, r7
 800f242:	9309      	str	r3, [sp, #36]	; 0x24
 800f244:	e768      	b.n	800f118 <_vfiprintf_r+0x78>
 800f246:	fb0c 3202 	mla	r2, ip, r2, r3
 800f24a:	460c      	mov	r4, r1
 800f24c:	2001      	movs	r0, #1
 800f24e:	e7a6      	b.n	800f19e <_vfiprintf_r+0xfe>
 800f250:	2300      	movs	r3, #0
 800f252:	3401      	adds	r4, #1
 800f254:	9305      	str	r3, [sp, #20]
 800f256:	4619      	mov	r1, r3
 800f258:	f04f 0c0a 	mov.w	ip, #10
 800f25c:	4620      	mov	r0, r4
 800f25e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f262:	3a30      	subs	r2, #48	; 0x30
 800f264:	2a09      	cmp	r2, #9
 800f266:	d903      	bls.n	800f270 <_vfiprintf_r+0x1d0>
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d0c6      	beq.n	800f1fa <_vfiprintf_r+0x15a>
 800f26c:	9105      	str	r1, [sp, #20]
 800f26e:	e7c4      	b.n	800f1fa <_vfiprintf_r+0x15a>
 800f270:	fb0c 2101 	mla	r1, ip, r1, r2
 800f274:	4604      	mov	r4, r0
 800f276:	2301      	movs	r3, #1
 800f278:	e7f0      	b.n	800f25c <_vfiprintf_r+0x1bc>
 800f27a:	ab03      	add	r3, sp, #12
 800f27c:	9300      	str	r3, [sp, #0]
 800f27e:	462a      	mov	r2, r5
 800f280:	4b12      	ldr	r3, [pc, #72]	; (800f2cc <_vfiprintf_r+0x22c>)
 800f282:	a904      	add	r1, sp, #16
 800f284:	4630      	mov	r0, r6
 800f286:	f7fd fb9f 	bl	800c9c8 <_printf_float>
 800f28a:	4607      	mov	r7, r0
 800f28c:	1c78      	adds	r0, r7, #1
 800f28e:	d1d6      	bne.n	800f23e <_vfiprintf_r+0x19e>
 800f290:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f292:	07d9      	lsls	r1, r3, #31
 800f294:	d405      	bmi.n	800f2a2 <_vfiprintf_r+0x202>
 800f296:	89ab      	ldrh	r3, [r5, #12]
 800f298:	059a      	lsls	r2, r3, #22
 800f29a:	d402      	bmi.n	800f2a2 <_vfiprintf_r+0x202>
 800f29c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f29e:	f7fe f8fd 	bl	800d49c <__retarget_lock_release_recursive>
 800f2a2:	89ab      	ldrh	r3, [r5, #12]
 800f2a4:	065b      	lsls	r3, r3, #25
 800f2a6:	f53f af1d 	bmi.w	800f0e4 <_vfiprintf_r+0x44>
 800f2aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f2ac:	e71c      	b.n	800f0e8 <_vfiprintf_r+0x48>
 800f2ae:	ab03      	add	r3, sp, #12
 800f2b0:	9300      	str	r3, [sp, #0]
 800f2b2:	462a      	mov	r2, r5
 800f2b4:	4b05      	ldr	r3, [pc, #20]	; (800f2cc <_vfiprintf_r+0x22c>)
 800f2b6:	a904      	add	r1, sp, #16
 800f2b8:	4630      	mov	r0, r6
 800f2ba:	f7fd fe29 	bl	800cf10 <_printf_i>
 800f2be:	e7e4      	b.n	800f28a <_vfiprintf_r+0x1ea>
 800f2c0:	0800f8dc 	.word	0x0800f8dc
 800f2c4:	0800f8e6 	.word	0x0800f8e6
 800f2c8:	0800c9c9 	.word	0x0800c9c9
 800f2cc:	0800f07d 	.word	0x0800f07d
 800f2d0:	0800f8e2 	.word	0x0800f8e2

0800f2d4 <__swbuf_r>:
 800f2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2d6:	460e      	mov	r6, r1
 800f2d8:	4614      	mov	r4, r2
 800f2da:	4605      	mov	r5, r0
 800f2dc:	b118      	cbz	r0, 800f2e6 <__swbuf_r+0x12>
 800f2de:	6a03      	ldr	r3, [r0, #32]
 800f2e0:	b90b      	cbnz	r3, 800f2e6 <__swbuf_r+0x12>
 800f2e2:	f7fd ffc3 	bl	800d26c <__sinit>
 800f2e6:	69a3      	ldr	r3, [r4, #24]
 800f2e8:	60a3      	str	r3, [r4, #8]
 800f2ea:	89a3      	ldrh	r3, [r4, #12]
 800f2ec:	071a      	lsls	r2, r3, #28
 800f2ee:	d525      	bpl.n	800f33c <__swbuf_r+0x68>
 800f2f0:	6923      	ldr	r3, [r4, #16]
 800f2f2:	b31b      	cbz	r3, 800f33c <__swbuf_r+0x68>
 800f2f4:	6823      	ldr	r3, [r4, #0]
 800f2f6:	6922      	ldr	r2, [r4, #16]
 800f2f8:	1a98      	subs	r0, r3, r2
 800f2fa:	6963      	ldr	r3, [r4, #20]
 800f2fc:	b2f6      	uxtb	r6, r6
 800f2fe:	4283      	cmp	r3, r0
 800f300:	4637      	mov	r7, r6
 800f302:	dc04      	bgt.n	800f30e <__swbuf_r+0x3a>
 800f304:	4621      	mov	r1, r4
 800f306:	4628      	mov	r0, r5
 800f308:	f7ff fd9e 	bl	800ee48 <_fflush_r>
 800f30c:	b9e0      	cbnz	r0, 800f348 <__swbuf_r+0x74>
 800f30e:	68a3      	ldr	r3, [r4, #8]
 800f310:	3b01      	subs	r3, #1
 800f312:	60a3      	str	r3, [r4, #8]
 800f314:	6823      	ldr	r3, [r4, #0]
 800f316:	1c5a      	adds	r2, r3, #1
 800f318:	6022      	str	r2, [r4, #0]
 800f31a:	701e      	strb	r6, [r3, #0]
 800f31c:	6962      	ldr	r2, [r4, #20]
 800f31e:	1c43      	adds	r3, r0, #1
 800f320:	429a      	cmp	r2, r3
 800f322:	d004      	beq.n	800f32e <__swbuf_r+0x5a>
 800f324:	89a3      	ldrh	r3, [r4, #12]
 800f326:	07db      	lsls	r3, r3, #31
 800f328:	d506      	bpl.n	800f338 <__swbuf_r+0x64>
 800f32a:	2e0a      	cmp	r6, #10
 800f32c:	d104      	bne.n	800f338 <__swbuf_r+0x64>
 800f32e:	4621      	mov	r1, r4
 800f330:	4628      	mov	r0, r5
 800f332:	f7ff fd89 	bl	800ee48 <_fflush_r>
 800f336:	b938      	cbnz	r0, 800f348 <__swbuf_r+0x74>
 800f338:	4638      	mov	r0, r7
 800f33a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f33c:	4621      	mov	r1, r4
 800f33e:	4628      	mov	r0, r5
 800f340:	f000 f806 	bl	800f350 <__swsetup_r>
 800f344:	2800      	cmp	r0, #0
 800f346:	d0d5      	beq.n	800f2f4 <__swbuf_r+0x20>
 800f348:	f04f 37ff 	mov.w	r7, #4294967295
 800f34c:	e7f4      	b.n	800f338 <__swbuf_r+0x64>
	...

0800f350 <__swsetup_r>:
 800f350:	b538      	push	{r3, r4, r5, lr}
 800f352:	4b2a      	ldr	r3, [pc, #168]	; (800f3fc <__swsetup_r+0xac>)
 800f354:	4605      	mov	r5, r0
 800f356:	6818      	ldr	r0, [r3, #0]
 800f358:	460c      	mov	r4, r1
 800f35a:	b118      	cbz	r0, 800f364 <__swsetup_r+0x14>
 800f35c:	6a03      	ldr	r3, [r0, #32]
 800f35e:	b90b      	cbnz	r3, 800f364 <__swsetup_r+0x14>
 800f360:	f7fd ff84 	bl	800d26c <__sinit>
 800f364:	89a3      	ldrh	r3, [r4, #12]
 800f366:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f36a:	0718      	lsls	r0, r3, #28
 800f36c:	d422      	bmi.n	800f3b4 <__swsetup_r+0x64>
 800f36e:	06d9      	lsls	r1, r3, #27
 800f370:	d407      	bmi.n	800f382 <__swsetup_r+0x32>
 800f372:	2309      	movs	r3, #9
 800f374:	602b      	str	r3, [r5, #0]
 800f376:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f37a:	81a3      	strh	r3, [r4, #12]
 800f37c:	f04f 30ff 	mov.w	r0, #4294967295
 800f380:	e034      	b.n	800f3ec <__swsetup_r+0x9c>
 800f382:	0758      	lsls	r0, r3, #29
 800f384:	d512      	bpl.n	800f3ac <__swsetup_r+0x5c>
 800f386:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f388:	b141      	cbz	r1, 800f39c <__swsetup_r+0x4c>
 800f38a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f38e:	4299      	cmp	r1, r3
 800f390:	d002      	beq.n	800f398 <__swsetup_r+0x48>
 800f392:	4628      	mov	r0, r5
 800f394:	f7fe fefe 	bl	800e194 <_free_r>
 800f398:	2300      	movs	r3, #0
 800f39a:	6363      	str	r3, [r4, #52]	; 0x34
 800f39c:	89a3      	ldrh	r3, [r4, #12]
 800f39e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f3a2:	81a3      	strh	r3, [r4, #12]
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	6063      	str	r3, [r4, #4]
 800f3a8:	6923      	ldr	r3, [r4, #16]
 800f3aa:	6023      	str	r3, [r4, #0]
 800f3ac:	89a3      	ldrh	r3, [r4, #12]
 800f3ae:	f043 0308 	orr.w	r3, r3, #8
 800f3b2:	81a3      	strh	r3, [r4, #12]
 800f3b4:	6923      	ldr	r3, [r4, #16]
 800f3b6:	b94b      	cbnz	r3, 800f3cc <__swsetup_r+0x7c>
 800f3b8:	89a3      	ldrh	r3, [r4, #12]
 800f3ba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f3be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f3c2:	d003      	beq.n	800f3cc <__swsetup_r+0x7c>
 800f3c4:	4621      	mov	r1, r4
 800f3c6:	4628      	mov	r0, r5
 800f3c8:	f000 f884 	bl	800f4d4 <__smakebuf_r>
 800f3cc:	89a0      	ldrh	r0, [r4, #12]
 800f3ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f3d2:	f010 0301 	ands.w	r3, r0, #1
 800f3d6:	d00a      	beq.n	800f3ee <__swsetup_r+0x9e>
 800f3d8:	2300      	movs	r3, #0
 800f3da:	60a3      	str	r3, [r4, #8]
 800f3dc:	6963      	ldr	r3, [r4, #20]
 800f3de:	425b      	negs	r3, r3
 800f3e0:	61a3      	str	r3, [r4, #24]
 800f3e2:	6923      	ldr	r3, [r4, #16]
 800f3e4:	b943      	cbnz	r3, 800f3f8 <__swsetup_r+0xa8>
 800f3e6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f3ea:	d1c4      	bne.n	800f376 <__swsetup_r+0x26>
 800f3ec:	bd38      	pop	{r3, r4, r5, pc}
 800f3ee:	0781      	lsls	r1, r0, #30
 800f3f0:	bf58      	it	pl
 800f3f2:	6963      	ldrpl	r3, [r4, #20]
 800f3f4:	60a3      	str	r3, [r4, #8]
 800f3f6:	e7f4      	b.n	800f3e2 <__swsetup_r+0x92>
 800f3f8:	2000      	movs	r0, #0
 800f3fa:	e7f7      	b.n	800f3ec <__swsetup_r+0x9c>
 800f3fc:	20000070 	.word	0x20000070

0800f400 <_raise_r>:
 800f400:	291f      	cmp	r1, #31
 800f402:	b538      	push	{r3, r4, r5, lr}
 800f404:	4604      	mov	r4, r0
 800f406:	460d      	mov	r5, r1
 800f408:	d904      	bls.n	800f414 <_raise_r+0x14>
 800f40a:	2316      	movs	r3, #22
 800f40c:	6003      	str	r3, [r0, #0]
 800f40e:	f04f 30ff 	mov.w	r0, #4294967295
 800f412:	bd38      	pop	{r3, r4, r5, pc}
 800f414:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f416:	b112      	cbz	r2, 800f41e <_raise_r+0x1e>
 800f418:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f41c:	b94b      	cbnz	r3, 800f432 <_raise_r+0x32>
 800f41e:	4620      	mov	r0, r4
 800f420:	f000 f830 	bl	800f484 <_getpid_r>
 800f424:	462a      	mov	r2, r5
 800f426:	4601      	mov	r1, r0
 800f428:	4620      	mov	r0, r4
 800f42a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f42e:	f000 b817 	b.w	800f460 <_kill_r>
 800f432:	2b01      	cmp	r3, #1
 800f434:	d00a      	beq.n	800f44c <_raise_r+0x4c>
 800f436:	1c59      	adds	r1, r3, #1
 800f438:	d103      	bne.n	800f442 <_raise_r+0x42>
 800f43a:	2316      	movs	r3, #22
 800f43c:	6003      	str	r3, [r0, #0]
 800f43e:	2001      	movs	r0, #1
 800f440:	e7e7      	b.n	800f412 <_raise_r+0x12>
 800f442:	2400      	movs	r4, #0
 800f444:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f448:	4628      	mov	r0, r5
 800f44a:	4798      	blx	r3
 800f44c:	2000      	movs	r0, #0
 800f44e:	e7e0      	b.n	800f412 <_raise_r+0x12>

0800f450 <raise>:
 800f450:	4b02      	ldr	r3, [pc, #8]	; (800f45c <raise+0xc>)
 800f452:	4601      	mov	r1, r0
 800f454:	6818      	ldr	r0, [r3, #0]
 800f456:	f7ff bfd3 	b.w	800f400 <_raise_r>
 800f45a:	bf00      	nop
 800f45c:	20000070 	.word	0x20000070

0800f460 <_kill_r>:
 800f460:	b538      	push	{r3, r4, r5, lr}
 800f462:	4d07      	ldr	r5, [pc, #28]	; (800f480 <_kill_r+0x20>)
 800f464:	2300      	movs	r3, #0
 800f466:	4604      	mov	r4, r0
 800f468:	4608      	mov	r0, r1
 800f46a:	4611      	mov	r1, r2
 800f46c:	602b      	str	r3, [r5, #0]
 800f46e:	f7f4 fd39 	bl	8003ee4 <_kill>
 800f472:	1c43      	adds	r3, r0, #1
 800f474:	d102      	bne.n	800f47c <_kill_r+0x1c>
 800f476:	682b      	ldr	r3, [r5, #0]
 800f478:	b103      	cbz	r3, 800f47c <_kill_r+0x1c>
 800f47a:	6023      	str	r3, [r4, #0]
 800f47c:	bd38      	pop	{r3, r4, r5, pc}
 800f47e:	bf00      	nop
 800f480:	20000a48 	.word	0x20000a48

0800f484 <_getpid_r>:
 800f484:	f7f4 bd26 	b.w	8003ed4 <_getpid>

0800f488 <__swhatbuf_r>:
 800f488:	b570      	push	{r4, r5, r6, lr}
 800f48a:	460c      	mov	r4, r1
 800f48c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f490:	2900      	cmp	r1, #0
 800f492:	b096      	sub	sp, #88	; 0x58
 800f494:	4615      	mov	r5, r2
 800f496:	461e      	mov	r6, r3
 800f498:	da0d      	bge.n	800f4b6 <__swhatbuf_r+0x2e>
 800f49a:	89a3      	ldrh	r3, [r4, #12]
 800f49c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f4a0:	f04f 0100 	mov.w	r1, #0
 800f4a4:	bf0c      	ite	eq
 800f4a6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f4aa:	2340      	movne	r3, #64	; 0x40
 800f4ac:	2000      	movs	r0, #0
 800f4ae:	6031      	str	r1, [r6, #0]
 800f4b0:	602b      	str	r3, [r5, #0]
 800f4b2:	b016      	add	sp, #88	; 0x58
 800f4b4:	bd70      	pop	{r4, r5, r6, pc}
 800f4b6:	466a      	mov	r2, sp
 800f4b8:	f000 f848 	bl	800f54c <_fstat_r>
 800f4bc:	2800      	cmp	r0, #0
 800f4be:	dbec      	blt.n	800f49a <__swhatbuf_r+0x12>
 800f4c0:	9901      	ldr	r1, [sp, #4]
 800f4c2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f4c6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f4ca:	4259      	negs	r1, r3
 800f4cc:	4159      	adcs	r1, r3
 800f4ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f4d2:	e7eb      	b.n	800f4ac <__swhatbuf_r+0x24>

0800f4d4 <__smakebuf_r>:
 800f4d4:	898b      	ldrh	r3, [r1, #12]
 800f4d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f4d8:	079d      	lsls	r5, r3, #30
 800f4da:	4606      	mov	r6, r0
 800f4dc:	460c      	mov	r4, r1
 800f4de:	d507      	bpl.n	800f4f0 <__smakebuf_r+0x1c>
 800f4e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f4e4:	6023      	str	r3, [r4, #0]
 800f4e6:	6123      	str	r3, [r4, #16]
 800f4e8:	2301      	movs	r3, #1
 800f4ea:	6163      	str	r3, [r4, #20]
 800f4ec:	b002      	add	sp, #8
 800f4ee:	bd70      	pop	{r4, r5, r6, pc}
 800f4f0:	ab01      	add	r3, sp, #4
 800f4f2:	466a      	mov	r2, sp
 800f4f4:	f7ff ffc8 	bl	800f488 <__swhatbuf_r>
 800f4f8:	9900      	ldr	r1, [sp, #0]
 800f4fa:	4605      	mov	r5, r0
 800f4fc:	4630      	mov	r0, r6
 800f4fe:	f7fe febd 	bl	800e27c <_malloc_r>
 800f502:	b948      	cbnz	r0, 800f518 <__smakebuf_r+0x44>
 800f504:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f508:	059a      	lsls	r2, r3, #22
 800f50a:	d4ef      	bmi.n	800f4ec <__smakebuf_r+0x18>
 800f50c:	f023 0303 	bic.w	r3, r3, #3
 800f510:	f043 0302 	orr.w	r3, r3, #2
 800f514:	81a3      	strh	r3, [r4, #12]
 800f516:	e7e3      	b.n	800f4e0 <__smakebuf_r+0xc>
 800f518:	89a3      	ldrh	r3, [r4, #12]
 800f51a:	6020      	str	r0, [r4, #0]
 800f51c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f520:	81a3      	strh	r3, [r4, #12]
 800f522:	9b00      	ldr	r3, [sp, #0]
 800f524:	6163      	str	r3, [r4, #20]
 800f526:	9b01      	ldr	r3, [sp, #4]
 800f528:	6120      	str	r0, [r4, #16]
 800f52a:	b15b      	cbz	r3, 800f544 <__smakebuf_r+0x70>
 800f52c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f530:	4630      	mov	r0, r6
 800f532:	f000 f81d 	bl	800f570 <_isatty_r>
 800f536:	b128      	cbz	r0, 800f544 <__smakebuf_r+0x70>
 800f538:	89a3      	ldrh	r3, [r4, #12]
 800f53a:	f023 0303 	bic.w	r3, r3, #3
 800f53e:	f043 0301 	orr.w	r3, r3, #1
 800f542:	81a3      	strh	r3, [r4, #12]
 800f544:	89a3      	ldrh	r3, [r4, #12]
 800f546:	431d      	orrs	r5, r3
 800f548:	81a5      	strh	r5, [r4, #12]
 800f54a:	e7cf      	b.n	800f4ec <__smakebuf_r+0x18>

0800f54c <_fstat_r>:
 800f54c:	b538      	push	{r3, r4, r5, lr}
 800f54e:	4d07      	ldr	r5, [pc, #28]	; (800f56c <_fstat_r+0x20>)
 800f550:	2300      	movs	r3, #0
 800f552:	4604      	mov	r4, r0
 800f554:	4608      	mov	r0, r1
 800f556:	4611      	mov	r1, r2
 800f558:	602b      	str	r3, [r5, #0]
 800f55a:	f7f4 fd22 	bl	8003fa2 <_fstat>
 800f55e:	1c43      	adds	r3, r0, #1
 800f560:	d102      	bne.n	800f568 <_fstat_r+0x1c>
 800f562:	682b      	ldr	r3, [r5, #0]
 800f564:	b103      	cbz	r3, 800f568 <_fstat_r+0x1c>
 800f566:	6023      	str	r3, [r4, #0]
 800f568:	bd38      	pop	{r3, r4, r5, pc}
 800f56a:	bf00      	nop
 800f56c:	20000a48 	.word	0x20000a48

0800f570 <_isatty_r>:
 800f570:	b538      	push	{r3, r4, r5, lr}
 800f572:	4d06      	ldr	r5, [pc, #24]	; (800f58c <_isatty_r+0x1c>)
 800f574:	2300      	movs	r3, #0
 800f576:	4604      	mov	r4, r0
 800f578:	4608      	mov	r0, r1
 800f57a:	602b      	str	r3, [r5, #0]
 800f57c:	f7f4 fd21 	bl	8003fc2 <_isatty>
 800f580:	1c43      	adds	r3, r0, #1
 800f582:	d102      	bne.n	800f58a <_isatty_r+0x1a>
 800f584:	682b      	ldr	r3, [r5, #0]
 800f586:	b103      	cbz	r3, 800f58a <_isatty_r+0x1a>
 800f588:	6023      	str	r3, [r4, #0]
 800f58a:	bd38      	pop	{r3, r4, r5, pc}
 800f58c:	20000a48 	.word	0x20000a48

0800f590 <_init>:
 800f590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f592:	bf00      	nop
 800f594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f596:	bc08      	pop	{r3}
 800f598:	469e      	mov	lr, r3
 800f59a:	4770      	bx	lr

0800f59c <_fini>:
 800f59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f59e:	bf00      	nop
 800f5a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5a2:	bc08      	pop	{r3}
 800f5a4:	469e      	mov	lr, r3
 800f5a6:	4770      	bx	lr
